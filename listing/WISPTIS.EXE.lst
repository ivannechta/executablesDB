mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_100E963  +
mov dword ptr [esi] offset off_10014C0 +
mov dword ptr [esi+8] offset off_100148C +
mov dword ptr [esi+0Ch] offset off_1001478 +
mov dword ptr [esi+10h] offset off_1001444 +
mov dword ptr [esi+24h] offset off_1001410 +
mov eax esi +
pop esi  +
retn   +
***
mov eax large fs:0 +
push eax  +
mov eax [esp+0Ch] +
mov large fs:0 esp +
mov [esp+0Ch] ebp +
lea ebp [esp+0Ch] +
push eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
call sub_10059EF  +
mov eax [ebp+arg_0] +
mov [esi+18Ch] eax +
mov dword ptr [esi] offset off_10015BC +
mov dword ptr [esi+8] offset off_1001530 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_100F4CA  +
mov dword ptr [esi] offset off_100167C +
mov dword ptr [esi+8] offset off_10015F0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
add eax 2D0h +
push eax  +
call ds:EnterCriticalSection  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_1001717  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jz loc_1003026  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_1003026  +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_1027000 +
cmp ecx edx +
jz loc_1001740  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jb loc_1001744  +
mov eax ecx +
mov ecx [ecx] +
cmp ecx edx +
jnz loc_1001732  +
pop esi  +
pop ebp  +
retn 4  +
mov ecx [ecx+8] +
jmp loc_100173B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
push edi  +
mov edi offset CriticalSection +
push edi  +
mov ebx 80004005h +
call ds:EnterCriticalSection  +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx offset unk_1027004 +
call sub_10016D6  +
mov eax [ebp+arg_4] +
cmp dword_1027008 eax +
jz loc_1001790  +
mov eax [eax+10h] +
mov [esi] eax +
xor ebx ebx +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax ecx +
add dword ptr [eax+8] 4 +
mov ecx [eax+8] +
cmp ecx [eax+4] +
jz loc_101502A  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_100E9BD  +
mov dword ptr [esi] offset off_10019BC +
mov dword ptr [esi+8] offset off_1001988 +
mov dword ptr [esi+0Ch] offset off_1001974 +
mov dword ptr [esi+10h] offset off_1001940 +
mov dword ptr [esi+24h] offset off_100190C +
mov eax esi +
pop esi  +
retn   +
***
jge near ptr loc_10019F0+1  +
add al [ecx] +
sbb [eax] esp +
add [ecx] al +
jmp near ptr off_1001A54+3  +
jge near ptr loc_1001A24+1  +
add al [ecx] +
sbb [eax] esp +
add [ecx] al +
jmp loc_1001A8B  +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_100DFA5  +
mov dword ptr [esi] offset off_1001AF8 +
mov dword ptr [esi+8] offset off_1001AD4 +
mov dword ptr [esi+0Ch] offset off_1001AA0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_100F602  +
mov dword ptr [esi] offset off_1001B80 +
mov dword ptr [esi+8] offset off_1001B5C +
mov dword ptr [esi+0Ch] offset off_1001B28 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
mov esi ecx +
call sub_100D714  +
mov dword ptr [esi] offset off_1001BC0 +
mov dword ptr [esi+8] offset off_1001BA8 +
mov eax esi +
pop esi  +
retn   +
***
movs   +
sti   +
add [ecx] eax +
jmp loc_1001BED  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100DF57  +
mov dword ptr [esi] offset off_10087CC +
mov dword ptr [esi+8] offset off_1001C34 +
mov dword ptr [esi+0Ch] offset off_1006A6C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100DF57  +
mov dword ptr [esi] offset off_10087CC +
mov dword ptr [esi+8] offset off_1001C80 +
mov dword ptr [esi+0Ch] offset off_1006A6C +
mov eax esi +
pop esi  +
retn   +
***
xor [ebx+1CC10100h] eax +
add [ecx] al +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1014E1C  +
mov ecx [ebp+8] +
mov ecx [ecx-4] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+14h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1016F31  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
inc ecx  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1001D84  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedIncrement  +
mov edi eax +
cmp edi 1 +
jz loc_1001D8F  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
retn 4  +
push offset Addend  +
call ds:InterlockedIncrement  +
retn 4  +
mov eax [esi+20h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1001D2F  +
mov eax [esi+20h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1001D57  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
mov esi [ebp+8] +
mov eax [esi+44Ch] +
xor ebx ebx +
push edi  +
mov [ebp+8] eax +
mov eax [esi+454h] +
push offset dword_102D7B8  +
mov [ebp-0Ch] ebx +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
mov [ebp-30h] eax +
mov [ebp-3Ch] ebx +
mov [ebp-40h] ebx +
mov [ebp-34h] ebx +
mov [ebp-38h] ebx +
call ds:QueryPerformanceFrequency  +
xor edi edi +
xor eax eax +
cmp dword_102D230[eax] ebx +
jz loc_1001DF8  +
add eax 1Ch +
inc edi  +
cmp eax 380h +
jb loc_1001DE5  +
cmp edi 20h +
jnb loc_1016320  +
push ebx  +
push ebx  +
call ds:CoInitializeEx  +
push 2  +
call ds:GetCurrentThread  +
push eax  +
call ds:SetThreadPriority  +
push 0FFFFFFFFh  +
push dword ptr [esi+450h]  +
call ds:WaitForSingleObject  +
call sub_1002CAC  +
mov eax [esi+234h] +
mov [ebp-10h] eax +
call sub_1002CC8  +
call sub_1002CAC  +
imul edi edi +
call ds:GetCurrentThreadId  +
push ebx  +
push ebx  +
mov dword_102D230[edi] eax +
mov eax [esi+70h] +
push ebx  +
push ebx  +
mov dword_102D234[edi] eax +
call ds:CreateEventW  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword_102D238[edi] eax +
mov dword_102D23C[edi] ebx +
call ds:CreateEventW  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov dword_102D240[edi] eax +
call ds:CreateEventW  +
mov dword_102D244[edi] eax +
mov eax dword_102D240[edi] +
mov [esi+458h] eax +
mov eax dword_102D244[edi] +
mov [esi+45Ch] eax +
mov dword_102D248[edi] ebx +
call sub_1002CC8  +
mov eax [esi+454h] +
mov [ebp-2Ch] eax +
mov eax [esi+458h] +
mov [ebp-28h] eax +
mov eax [esi+87Ch] +
mov [ebp-24h] eax +
mov eax [esi+86Ch] +
cmp eax ebx +
mov dword ptr [ebp-14h] 3 +
jnz loc_1016238  +
cmp [ebp-10h] ebx +
jz loc_10162DC  +
cmp [ebp-8] ebx +
jnz loc_10162DC  +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-0Ch] +
push eax  +
push dword ptr [ebp-4]  +
push esi  +
call sub_1001F72  +
test eax eax +
jz loc_10162AF  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-14h]  +
call ds:WaitForMultipleObjects  +
cmp eax ebx +
jnz loc_1002E9A  +
push ebx  +
lea eax [ebp-0Ch] +
push eax  +
lea eax [ebp-40h] +
push eax  +
push dword ptr [ebp+8]  +
call ds:GetOverlappedResult  +
test eax eax +
jz loc_1001F4E  +
cmp [esi+86Ch] ebx +
jnz loc_1016247  +
push dword ptr [ebp-4]  +
push esi  +
call sub_1014221  +
xor dword ptr [ebp-4] 1 +
lea eax [ebp-40h] +
push eax  +
lea eax [ebp-0Ch] +
push eax  +
push dword ptr [ebp-4]  +
push esi  +
call sub_1001F72  +
test eax eax +
jz loc_1016252  +
jmp loc_1001F0B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+44Ch] +
movzx ecx word ptr [eax+24h] +
push esi  +
push edi  +
mov edi [ebp+lpOverlapped] +
push edi  +
push [ebp+lpNumberOfBytesRead]  +
push ecx  +
mov ecx [ebp+arg_4] +
push dword ptr [eax+ecx*4+6Ch]  +
push dword ptr [eax+8]  +
call ds:ReadFile  +
mov esi eax +
cmp esi 1 +
jz loc_10022B0  +
call ds:GetLastError  +
mov esi eax +
sub esi 3E5h +
neg esi  +
sbb esi esi +
inc esi  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx ecx +
mov eax [ebx+0C8h] +
xor edx edx +
cmp eax edx +
push esi  +
push edi  +
jz loc_100253D  +
test byte ptr [ebx+108h] 1 +
jnz loc_1013B4F  +
mov ecx [ebp+Msg] +
sub ecx 2C0h +
jnz loc_10150A0  +
push dword ptr [ebx+4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_101737E  +
push esi  +
mov esi [ebp+8] +
add esi 9Ch +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
test byte ptr [ecx+34h] 1 +
push esi  +
push edi  +
lea edx [ecx+48h] +
lea esi [ecx+38h] +
mov edi edx +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
jnz loc_1014E42  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov ecx [ebp+arg_8] +
mov eax [ecx] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_C] +
mov edi [ecx+8] +
mov edx [esi] +
sub edi eax +
mov eax [esi+8] +
sub eax edx +
mov [ebp+arg_0] eax +
mov eax [esi+0Ch] +
sub eax [esi+4] +
mov ebx [ecx+0Ch] +
mov [ebp+arg_8] eax +
mov eax [ebp+var_18] +
sub eax [ecx] +
sub ebx [ecx+4] +
imul eax [ebp+arg_0] +
cdq   +
idiv  edi +
mov [ebp+var_4] edi +
mov edi [ebp+arg_4] +
mov [ebp+var_8] ebx +
add eax [esi] +
mov [edi] eax +
mov eax [ebp+var_14] +
sub eax [ecx+4] +
imul eax [ebp+arg_8] +
cdq   +
idiv  ebx +
add eax [esi+4] +
mov [edi+4] eax +
mov eax [ebp+var_10] +
sub eax [ecx] +
imul eax [ebp+arg_0] +
cdq   +
idiv  [ebp+var_4] +
add eax [esi] +
mov [edi+8] eax +
mov eax [ebp+var_C] +
sub eax [ecx+4] +
imul eax [ebp+arg_8] +
cdq   +
idiv  ebx +
add eax [esi+4] +
mov [edi+0Ch] eax +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
cmp [ebp+0Ch] eax +
jz loc_1014E9B  +
push esi  +
mov esi [ebp+8] +
push edi  +
add esi 30h +
lea edi [ebp-10h] +
movs   +
movs   +
movs   +
movs   +
mov ecx [ebp-0Ch] +
sub [ebp-4] ecx +
mov ecx [ebp-10h] +
sub [ebp-8] ecx +
mov edi [ebp+0Ch] +
mov [ebp-0Ch] eax +
mov [ebp-10h] eax +
lea esi [ebp-10h] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jle loc_100216B  +
cmp eax 2 +
jg loc_100216B  +
mov ecx [ebp+8] +
mov [ecx+94h] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax 80070057h +
jmp loc_1002167  +
***
mov eax offset byte_10228AD +
call sub_10014DD  +
sub esp 3Ch +
push ebx  +
mov ebx [ebp+8] +
mov eax [ebx+28h] +
xor ecx ecx +
cmp eax ecx +
push esi  +
push edi  +
mov [ebp-10h] esp +
mov [ebp-4] ecx +
mov [ebp-38h] ecx +
mov [ebp-34h] ecx +
mov [ebp-30h] ecx +
mov [ebp-2Ch] ecx +
jz loc_10021B0  +
lea ecx [ebp-38h] +
push ecx  +
push eax  +
call ds:GetClientRect  +
mov eax [ebp-38h] +
mov esi ds:ClientToScreen +
mov [ebp-18h] eax +
mov eax [ebp-34h] +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebx+28h]  +
call esi  +
test byte ptr [ebx+70h] 1 +
jz loc_1002269  +
mov ecx [ebx+60h] +
add ecx [ebp-18h] +
lea eax [ebx+50h] +
mov [ebp+8] eax +
mov [eax] ecx +
mov eax [ebx+64h] +
add eax [ebp-14h] +
mov [ebx+54h] eax +
mov eax [ebx+68h] +
add eax [ebp-18h] +
mov [ebx+58h] eax +
mov eax [ebx+6Ch] +
add eax [ebp-14h] +
mov [ebx+5Ch] eax +
mov eax [ebx+24h] +
lea edx [ebp-48h] +
add eax 8 +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [ebx+24h] +
test byte ptr [eax+0B4h] 1 +
lea edi [ebp-28h] +
lea esi [eax+140h] +
jz loc_1002261  +
movs   +
movs   +
movs   +
lea eax [ebp-48h] +
push eax  +
movs   +
lea eax [ebp-28h] +
push eax  +
lea esi [ebx+30h] +
push esi  +
push dword ptr [ebp+8]  +
lea edi [ebx-8] +
mov ecx edi +
call sub_1002065  +
mov ecx edi +
call sub_1002045  +
mov edi [ebp+0Ch] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
lea esi [eax+130h] +
jmp loc_1002223  +
***
mov eax [ebp-30h] +
mov [ebp-20h] eax +
mov eax [ebp-2Ch] +
mov [ebp-1Ch] eax +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebx+28h]  +
call esi  +
mov ecx [ebp-18h] +
lea eax [ebx+50h] +
mov [ebp+8] eax +
mov [eax] ecx +
mov eax [ebp-14h] +
mov [ebx+54h] eax +
mov eax [ebp-20h] +
mov [ebx+58h] eax +
mov eax [ebp-1Ch] +
jmp loc_10021FB  +
***
cmp dword ptr [ebp+1Ch] 0 +
mov [edi] eax +
jz loc_1017CAA  +
mov eax esi +
jmp loc_1002474  +
***
push dword ptr [edi+10h]  +
call ds:SetEvent  +
jmp loc_1001FBC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ecx+58h] +
movs   +
movs   +
movs   +
movs   +
call sub_10022E4  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+Point.x] 0 +
and [ebp+Point.y] 0 +
push esi  +
lea eax [ebp+Point] +
mov esi ecx +
push eax  +
push dword ptr [esi+30h]  +
call ds:ClientToScreen  +
mov eax [esi+58h] +
sub eax [ebp+Point.x] +
mov [esi+68h] eax +
mov eax [esi+5Ch] +
sub eax [ebp+Point.y] +
mov [esi+6Ch] eax +
mov eax [esi+60h] +
sub eax [ebp+Point.x] +
mov [esi+70h] eax +
mov eax [esi+64h] +
sub eax [ebp+Point.y] +
or dword ptr [esi+78h] 1 +
mov [esi+74h] eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1014E91  +
mov edx [ebp+8] +
xor ecx ecx +
cmp dword ptr [edx+94h] 2 +
setz cl  +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov ecx [ebp+0Ch] +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
mov esi [ebp+8] +
mov eax [esi+4] +
mov [ebp-18h] ecx +
mov ecx [ebp+14h] +
push edi  +
mov edi [esi+18h] +
mov [ebp-10h] ecx +
xor ecx ecx +
push ecx  +
mov [ebp-0Ch] ecx +
mov [ebp-8] ecx +
mov [ebp-4] ecx +
lea ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+14h]  +
lea edx [ebp-1Ch] +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov [esi+18h] edx +
mov edx [esi] +
push eax  +
mov ecx esi +
mov [ebp-1Ch] eax +
mov [ebp-14h] ebx +
call dword ptr [edx]  +
test eax eax +
mov [esi+18h] edi +
jnz loc_10023D6  +
cmp dword ptr [ebp+0Ch] 82h +
jz loc_1017D50  +
push dword ptr [ebp+14h]  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [esi+4]  +
push dword ptr [esi+1Ch]  +
call ds:CallWindowProcW  +
mov [ebp+8] eax +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
not dword ptr [eax+eax+8FED01h]  +
add [eax-6F6F6F70h] edx +
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jnz loc_1002472  +
mov ecx [ebp+0Ch] +
mov edi [ebp+18h] +
xor esi esi +
mov eax 219h +
inc esi  +
cmp ecx eax +
jz loc_10068A0  +
mov eax 401h +
cmp ecx eax +
jz loc_1017CD8  +
cmp ecx 7Eh +
jz loc_1017CF2  +
cmp ecx 1Ah +
jz loc_1007E31  +
cmp ecx 16h +
jz loc_1017D02  +
mov eax 2B1h +
cmp ecx eax +
jz loc_1017D1C  +
mov eax 2DDh +
cmp ecx eax +
jz loc_10085DA  +
mov eax 2DCh +
cmp ecx eax +
jz loc_1017D36  +
movzx eax word ptr [ebx+7Ch] +
cmp ecx eax +
jz loc_1017CB2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
cmp ecx dword_1027154 +
jnb loc_1011B7A  +
and dword ptr [esi+428h] 0 +
and dword ptr [esi+424h] 0 +
jmp loc_101215D  +
fild  [ebp+var_10] +
fild  [ebp+var_14] +
fpatan   +
fmul  ds:dbl_10024D8 +
call _ftol  +
mov ecx [esi+424h] +
test ecx ecx +
jl loc_1011C52  +
jg loc_1011C68  +
add ecx eax +
inc dword ptr [esi+428h]  +
mov [esi+424h] ecx +
jmp loc_1012171  +
***
push offset unk_102702C  +
call sub_1001D15  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
jmp loc_1011277  +
***
push offset Addend  +
call edi  +
push offset unk_102702C  +
call sub_1001D3C  +
jmp loc_10112B2  +
***
xor eax eax +
inc eax  +
jmp loc_1010E01  +
***
mov eax 80004005h +
jmp loc_1013DCE  +
***
mov ecx [ebp+arg_2C] +
mov eax [eax] +
mov [ecx] eax +
lea ecx [ebp+arg_24] +
call sub_10017A5  +
lea ecx [ebp+arg_4] +
call sub_10017A5  +
jmp loc_1002C00  +
***
push dword ptr [ebx+4]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [ebx+30h]  +
call ds:PostMessageW  +
jmp loc_100200B  +
***
test ecx ecx +
jnz loc_101497A  +
jmp loc_10149D6  +
***
dec edx  +
dec edx  +
jz loc_1016BB2  +
dec edx  +
jnz loc_1010DDA  +
jmp loc_1016BA2  +
***
popf   +
and eax 1F7F0100h +
add al [ecx] +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
cmp edi 1 +
jz loc_1003DF1  +
test edi edi +
jz loc_1003E10  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10025FF  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100949D  +
mov eax [ebp+arg_0] +
mov [esi+38h] eax +
mov dword ptr [esi] offset off_10023E0 +
mov dword ptr [esi+20h] offset off_100266C +
mov dword ptr [esi+24h] offset off_1002638 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
add eax 0FFFFFFF8h +
push offset off_10026E4  +
push eax  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+2Ch] 0 +
jz loc_100DA46  +
mov eax [esi+0Ch] +
cmp eax [esi+4] +
jz loc_100DA46  +
add dword ptr [esi+0Ch] 0FFFFFFFCh +
push [ebp+arg_0]  +
mov eax [esi+0Ch] +
push eax  +
call sub_10025EC  +
inc dword ptr [esi+2Ch]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax [ebp+arg_1C] +
push esi  +
push edi  +
jz loc_1002774  +
mov ecx [ebp+arg_24] +
mov esi [ecx] +
cmp [eax] esi +
jnz loc_1002BC3  +
mov eax [ebp+arg_0] +
lea esi [ebp+arg_4] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_10] +
movs   +
call sub_10027C0  +
mov eax [ebp+arg_0] +
lea esi [ebp+var_10] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
lea edi [eax+edx*4] +
mov esi edi +
sub esi [ecx] +
sar esi 2 +
js loc_1014FEF  +
mov eax esi +
mov ebx 400h +
cdq   +
idiv  ebx +
test eax eax +
jnz loc_1015000  +
mov [ecx+8] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
push 1  +
lea eax [ebp+var_10] +
mov ebx ecx +
push eax  +
lea ecx [ebp+arg_4] +
call sub_100278B  +
sub esp 10h +
mov edi esp +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
push [ebp+arg_0]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_100284A  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+arg_4] +
mov ebx ecx +
push eax  +
lea ecx [ebp+arg_14] +
call sub_100290D  +
lea esi [ebx+4] +
mov [ebp+var_4] esi +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
mov [ebp+var_C] eax +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+arg_4] +
movs   +
call sub_100290D  +
lea esi [ebx+14h] +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
mov [ebp+var_8] eax +
lea eax [ebp+arg_14] +
push eax  +
lea ecx [ebp+var_1C] +
movs   +
call sub_100290D  +
sub esp 10h +
mov edi esp +
sub esp 10h +
cmp [ebp+var_8] eax +
lea eax [ebp+arg_4] +
jnb loc_1002C34  +
lea esi [ebp+arg_14] +
movs   +
movs   +
movs   +
movs   +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_4] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push eax  +
movs   +
call sub_1002939  +
mov esi [ebp+var_C] +
test esi esi +
jbe loc_10028DF  +
mov ecx ebx +
call sub_1002963  +
dec esi  +
jnz loc_10028D5  +
cmp [ebp+var_8] 0 +
mov esi [ebp+var_4] +
lea edi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
jnz loc_1002C20  +
lea eax [ebp+arg_4] +
mov esi eax +
mov eax [ebp+arg_0] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+0Ch] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi+0Ch] +
cmp edx edi +
jnz loc_1014FCC  +
mov eax [ecx+8] +
sub eax [esi+8] +
sar eax 2 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi [ebp+arg_1C] +
jnz loc_101536B  +
mov eax [ebp+arg_0] +
lea esi [ebp+arg_24] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 34h  +
***
add dword ptr [ecx+0Ch] 4 +
dec dword ptr [ecx+2Ch]  +
mov eax [ecx+0Ch] +
jz loc_1019317  +
cmp eax [ecx+8] +
jz loc_1019317  +
retn   +
***
mov eax offset byte_102344D +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
mov esi [ebp+10h] +
test esi esi +
push edi  +
mov [ebp-10h] esp +
jz loc_10168BF  +
push esi  +
push offset dword_10026AC  +
lea eax [ebp+0Ch] +
push eax  +
call sub_10029D9  +
test eax eax +
jl loc_10029CD  +
cmp dword ptr [esi] 0 +
jz loc_10029CD  +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov eax 80040213h +
jmp loc_10029BC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_10168B5  +
and dword ptr [esi] 0 +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_0]  +
call sub_100174E  +
test eax eax +
jl loc_1002A0C  +
mov eax [ebp+arg_8] +
push esi  +
push [ebp+arg_4]  +
add eax 8 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax offset byte_10227D1 +
call sub_10014DD  +
push ecx  +
mov eax [ebp+8] +
mov ecx [eax-4] +
and dword ptr [ebp-4] 0 +
cmp ecx 1 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jz loc_1014EC1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx [eax+24h] +
call sub_1002A5F  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov eax offset byte_1023DF1 +
call sub_10014DD  +
sub esp 3Ch +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
push ebx  +
lea ecx [ebp-18h] +
call sub_10016B1  +
lea ecx [ebp+8] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebx+284h] +
mov [ebp-14h] esi +
movs   +
movs   +
and dword ptr [ebp-4] 0 +
movs   +
movs   +
lea eax [ebx+274h] +
sub esp 10h +
mov esi eax +
mov edi esp +
movs   +
movs   +
mov [ebp-10h] eax +
movs   +
lea eax [ebp-28h] +
push eax  +
movs   +
call sub_1002758  +
add ebx 270h +
push 0  +
mov ecx ebx +
call sub_1002B53  +
cmp dword ptr [ebp+10h] 0 +
mov eax [eax] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
lea edi [ebp-38h] +
jnz loc_1002BDC  +
mov esi [ebp-14h] +
movs   +
movs   +
movs   +
push 1  +
lea eax [ebp-48h] +
push eax  +
lea ecx [ebp-28h] +
movs   +
call sub_100278B  +
mov eax [eax+8] +
cmp eax [ebp-30h] +
jz loc_1002BEF  +
mov eax [ebp-20h] +
mov eax [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp-28h] +
movs   +
movs   +
mov [ebp+8] eax +
movs   +
lea eax [ebp-48h] +
push eax  +
mov ecx ebx +
movs   +
call sub_10027FF  +
cmp dword ptr [ebp+10h] 0 +
lea eax [ebp+8] +
mov ecx ebx +
push eax  +
jnz loc_1002C9D  +
call sub_1002B84  +
xor esi esi +
inc esi  +
mov eax [ebp-18h] +
add eax 2D0h +
push eax  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-0Ch] +
pop edi  +
mov eax esi +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
push [ebp+arg_0]  +
lea esi [ecx+4] +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
lea eax [ebp+var_20] +
push eax  +
lea ecx [ebp+var_10] +
movs   +
call sub_100278B  +
mov eax [eax+8] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+2Ch] 0 +
jz loc_100868C  +
mov ecx [esi+1Ch] +
mov edx [esi+18h] +
cmp ecx edx +
jz loc_100868C  +
push [ebp+arg_0]  +
lea eax [ecx+4] +
cmp eax edx +
mov [esi+1Ch] eax +
push ecx  +
jz loc_1015E9E  +
call sub_10025EC  +
inc dword ptr [esi+2Ch]  +
pop esi  +
pop ebp  +
retn 4  +
***
lea ecx [ebp+arg_4] +
call sub_10017A5  +
mov eax [ebp+arg_C] +
cmp eax [ebp+arg_1C] +
jz loc_1002774  +
jmp loc_100276C  +
***
mov esi [ebp-10h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp-30h] +
cmp eax [ebp-20h] +
jnz loc_1002AF5  +
xor esi esi +
jmp loc_1002B2C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax [ebp+arg_1C] +
jnz loc_1002521  +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
lea esi [ebp+arg_24] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 34h  +
***
push [ebp+var_8]  +
lea eax [ebp+arg_14] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_100278B  +
jmp loc_10028F6  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
mov edi esp +
lea esi [ebx+14h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_14] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call sub_1002BFB  +
mov esi [ebp+var_C] +
test esi esi +
jbe loc_10028DF  +
mov ecx ebx +
call sub_1002C75  +
dec esi  +
jnz loc_1002C61  +
jmp loc_10028DF  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
cmp eax [esi+14h] +
jz loc_101541A  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1002C91  +
add dword ptr [esi+1Ch] 0FFFFFFFCh +
dec eax  +
mov [esi+2Ch] eax +
jz loc_1015424  +
pop esi  +
retn   +
***
call sub_100271D  +
jmp loc_1002B29  +
***
call ds:GetCurrentThreadId  +
mov dword_1027080 eax +
retn   +
***
and dword_1027080 0 +
push offset stru_1027068  +
call ds:LeaveCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
call sub_1002CAC  +
cmp [ebp+8] ebx +
jnz loc_1015A3E  +
lea eax [esi+870h] +
inc dword ptr [eax]  +
push dword ptr [eax]  +
push offset aSuspendinputRp  +
call nullsub_1  +
lea eax [esi+874h] +
cmp dword ptr [eax] 0 +
pop ecx  +
pop ecx  +
jnz loc_1002D2B  +
xor ecx ecx +
inc ecx  +
mov ebx ecx +
mov [eax] ecx +
call sub_1002CC8  +
test ebx ebx +
jz loc_1002D62  +
push dword ptr [esi+87Ch]  +
call ds:SetEvent  +
mov eax [esi+880h] +
mov [ebp-8] eax +
mov eax [esi+45Ch] +
push 0FFFFFFFFh  +
mov [ebp-4] eax +
push 0  +
lea eax [ebp-8] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov edi ecx +
mov [ebp-4] ebx +
call sub_1002CAC  +
cmp [ebp+8] ebx +
lea esi [edi+870h] +
jnz loc_1015ACA  +
dec dword ptr [esi]  +
push dword ptr [esi]  +
push offset aResumeinputRpc  +
call nullsub_1  +
cmp [esi] ebx +
pop ecx  +
pop ecx  +
jnz loc_1002E12  +
lea eax [edi+874h] +
cmp [eax] ebx +
jz loc_1002E12  +
cmp [edi+878h] ebx +
jnz loc_1002E12  +
mov [eax] ebx +
mov dword ptr [ebp-4] 1 +
call sub_1002CC8  +
cmp [ebp-4] ebx +
jz loc_1002E28  +
push dword ptr [edi+884h]  +
call ds:SetEvent  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax [ecx] +
push 0  +
call dword ptr [eax+8]  +
retn   +
***
mov eax [ecx] +
push 0  +
call dword ptr [eax+0Ch]  +
retn   +
***
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_101625B  +
cmp eax 2 +
jnz loc_101626C  +
push dword ptr [esi+884h]  +
call ds:ResetEvent  +
mov eax [ebp+8] +
push dword ptr [eax+8]  +
call ds:CancelIo  +
push dword ptr [esi+880h]  +
call ds:SetEvent  +
mov eax [esi+884h] +
mov [ebp-1Ch] eax +
mov eax [esi+458h] +
push 0FFFFFFFFh  +
mov [ebp-18h] eax +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_101625B  +
jmp loc_1001F0B  +
***
mov eax offset byte_1022855 +
call sub_10014DD  +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+24h] +
mov eax [ecx] +
push edi  +
xor edi edi +
mov [ebp-10h] esp +
mov [ebp-14h] edi +
call dword ptr [eax+10h]  +
lea ebx [esi-8] +
and dword ptr [ebx+78h] 0FFFFFFFEh +
cmp [ebp+0Ch] edi +
mov [ebp-4] edi +
mov [ebx+68h] edi +
mov [ebx+6Ch] edi +
mov [ebx+70h] edi +
mov [ebx+74h] edi +
mov ecx ebx +
jz loc_10035BE  +
push dword ptr [ebp+0Ch]  +
call sub_10022C3  +
mov eax [esi+24h] +
lea edx [ebp-34h] +
add eax 8 +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi [esi+24h] +
test byte ptr [esi+0B4h] 1 +
lea edi [ebp-24h] +
jz loc_1003010  +
add esi 140h +
movs   +
movs   +
movs   +
lea eax [ebp-34h] +
push eax  +
movs   +
mov esi [ebp+8] +
lea eax [ebp-24h] +
push eax  +
lea eax [esi+30h] +
push eax  +
lea eax [esi+50h] +
push eax  +
mov ecx ebx +
call sub_1002065  +
mov ecx ebx +
call sub_1002045  +
mov ecx [esi+24h] +
mov eax [ecx] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call dword ptr [eax+14h]  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
cmp eax [esi+44Ch] +
jz loc_1002FE7  +
add esi 450h +
push esi  +
call ds:EnterCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
cmp eax [esi+44Ch] +
jz loc_100300E  +
add esi 450h +
push esi  +
call ds:LeaveCriticalSection  +
pop esi  +
retn   +
***
add esi 130h +
jmp loc_1002F7D  +
***
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
jmp loc_1001705  +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100345F  +
mov dword ptr [esi] offset off_10030C0 +
mov eax esi +
pop esi  +
retn   +
***
mov al ds:1501004Ah +
push ebp  +
add [ecx] al +
cmps   +
aaa   +
add [ecx] al +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+88Ch] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+48h] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jz loc_1016975  +
cmp edi 1 +
jz loc_1003180  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+468h] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+48h] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jz loc_101698B  +
cmp edi 1 +
jz loc_1003196  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push offset unk_102702C  +
call sub_1001D15  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
jmp loc_1003131  +
***
push offset unk_102702C  +
call sub_1001D15  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
jmp loc_1003177  +
***
push eax  +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax [ebp-8] +
mov [ebp-18h] esp +
push eax  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_100324C  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jz loc_1003DB5  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_1003DB5  +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_1027088 +
cmp ecx edx +
jz loc_1003274  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jnb loc_1003278  +
mov ecx [ecx+8] +
cmp ecx edx +
jnz loc_1003267  +
pop esi  +
pop ebp  +
retn 4  +
mov eax ecx +
mov ecx [ecx] +
jmp loc_100326F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+88Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 48h +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jz loc_10034A8  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+468h] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 48h +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jz loc_10034BE  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100332C +
mov byte ptr [ecx+8] 0 +
call sub_1009425  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push [ebp+arg_0]  +
add ecx 4 +
call sub_1003381  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10164B4  +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx] +
test ecx ecx +
jz loc_10033A1  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jz loc_101659F  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+8] +
mov eax [esi] +
push edi  +
mov edi 80004005h +
mov [ebp+arg_0] eax +
dec [ebp+arg_4]  +
cmp eax esi +
jz loc_10033DA  +
cmp [ebp+arg_4] 0 +
jg loc_10033F4  +
cmp eax esi +
jz loc_10033EC  +
add eax 0Ch +
push eax  +
push [ebp+arg_8]  +
call sub_1003365  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
lea ecx [ebp+arg_0] +
call sub_1003406  +
mov eax [ebp+arg_0] +
jmp loc_10033CD  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_102708C +
jnz loc_100342B  +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jz loc_1003433  +
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_1003429  +
mov [esi] eax +
pop esi  +
retn   +
push eax  +
call sub_100343E  +
jmp loc_1003427  +
mov [esi] eax +
mov ecx eax +
jmp loc_1003418  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102708C +
mov ecx [eax] +
cmp ecx edx +
jnz loc_1003456  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_100344C  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100697D  +
mov dword ptr [esi] offset off_1003474 +
mov eax esi +
pop esi  +
retn   +
***
push offset Addend  +
call edi  +
push offset unk_102702C  +
call sub_1001D3C  +
jmp loc_10032B3  +
***
push offset Addend  +
call edi  +
push offset unk_102702C  +
call sub_1001D3C  +
jmp loc_10032F9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10034F2  +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov [eax] edx +
mov ecx [ecx+4] +
mov [eax+4] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 18h  +
call sub_100351E  +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov ecx [ebp+arg_4] +
mov [eax+14h] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jl loc_1014E26  +
push [ebp+arg_0]  +
call ??2@YAPAXI@Z  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027050 +
mov ecx [eax] +
cmp ecx edx +
jnz loc_1003557  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_100354D  +
***
mov ecx [eax+10h] +
cmp ecx [edi+4] +
jz loc_1015621  +
lea ecx [ebp+arg_0] +
call sub_100358C  +
mov eax [ebp+arg_0] +
cmp [esi+330h] eax +
jnz loc_100355B  +
jmp loc_1003A09  +
***
push eax  +
call sub_100353F  +
jmp loc_10035AD  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_1027050 +
jnz loc_100357F  +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jz loc_10035B1  +
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_10035AF  +
mov [esi] eax +
pop esi  +
retn   +
mov [esi] eax +
mov ecx eax +
jmp loc_100359E  +
***
xor esi esi +
jmp loc_10051D7  +
***
call sub_10058F9  +
jmp loc_1002F54  +
***
inc [ebp+var_4]  +
add [ebp+var_14] 10h +
cmp [ebp+var_4] ebx +
jnb loc_1005F7D  +
jmp loc_1005F6B  +
and [ebp+var_8] 0 +
jmp loc_1005EBE  +
***
mov [ecx] esi +
jmp loc_1003F1A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_1003620  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
add eax 0FFFFFFF8h +
push offset off_1003658  +
push eax  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
add al [eax] +
fidiv  word ptr ds:4629232Ch +
test eax 0E607E15h +
or ch 88h +
nop   +
nop   +
nop   +
nop   +
nop   +
mov eax offset byte_1023D81 +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jz loc_1017653  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call sub_101108D  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov eax offset byte_1023DAD +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+10h] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jz loc_1017672  +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
add eax 8 +
push eax  +
call sub_1010FAE  +
cmp eax 80070057h +
jz loc_101767C  +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1003754  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1003762  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+10h] +
test eax eax +
jnz loc_10109AC  +
mov esi [esi+14h] +
test esi esi +
jnz loc_10109B8  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jz loc_1003792  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov esi [esi+10h] +
test esi esi +
jz loc_10037A0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
retn   +
***
mov eax offset byte_1023E35 +
call sub_10014DD  +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
lea eax [edi+14h] +
xor esi esi +
push eax  +
mov [ebp-10h] esi +
mov [ebp-14h] eax +
call ds:EnterCriticalSection  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp+8] +
lea ebx [edi+4] +
push eax  +
mov ecx ebx +
call sub_100320B  +
mov edi [edi+8] +
mov eax [ebp+8] +
cmp edi eax +
jz loc_1003DE5  +
add eax 10h +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1003DC5  +
and [ebp-4] esi +
mov edi [ebp+0Ch] +
mov esi edi +
neg esi  +
lea eax [edi-8] +
sbb esi esi +
and esi eax +
jz loc_101783D  +
lea eax [esi+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push eax  +
mov ecx ebx +
call sub_1003FB1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test edi edi +
jz loc_1003833  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
push dword ptr [ebp-14h]  +
call ds:LeaveCriticalSection  +
test esi esi +
jz loc_1003849  +
add esi 8 +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov ecx [ebp-0Ch] +
mov eax [ebp-10h] +
pop edi  +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 8  +
***
mov eax offset byte_1022C95 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+20h] +
mov eax [eax] +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1003887  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [esi+20h] +
test ecx ecx +
jz loc_1003895  +
push 3  +
call sub_10038B1  +
add esi 24h +
push esi  +
call ds:DeleteCriticalSection  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_10156D3  +
push esi  +
push offset nullsub_1  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 20h  +
push edi  +
call sub_10038F0  +
test [ebp+arg_0] 1 +
jz loc_10038E3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
call sub_10031B5  +
and dword ptr [ebp-1Ch] 0 +
mov esi [ebp+0Ch] +
mov eax esi +
imul eax [ebp+10h] +
add [ebp+8] eax +
and dword ptr [ebp-4] 0 +
jmp loc_1003924  +
dec dword ptr [ebp+10h]  +
js loc_1003934  +
sub [ebp+8] esi +
mov ecx [ebp+8] +
call dword ptr [ebp+14h]  +
jmp loc_1003924  +
mov dword ptr [ebp-1Ch] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1003951  +
call sub_10031F5  +
retn 10h  +
***
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1017ECB  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+2Ch] +
test esi esi +
jz loc_100398D  +
lea eax [edi+4] +
push eax  +
call sub_1003E5F  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
push esi  +
mov ecx edi +
call sub_1003999  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
and dword ptr [edi+2Ch] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea eax [edi+8] +
mov ecx [eax] +
push eax  +
mov [ebp+var_8] edi +
call dword ptr [ecx+58h]  +
push dword ptr [edi+0B4h]  +
call ??3@YAXPAX@Z  +
push dword ptr [edi+0B8h]  +
call ??3@YAXPAX@Z  +
mov esi [ebp+arg_0] +
test esi esi +
pop ecx  +
pop ecx  +
jz loc_1003A7E  +
mov eax [edi+34h] +
test al 2 +
jnz loc_10109DA  +
test byte ptr [edi+134h] 1 +
jnz loc_10109DA  +
push 0  +
test al 20h +
pop ebx  +
setnz bl  +
inc ebx  +
mov ecx [esi+330h] +
mov eax [ecx] +
cmp ecx eax +
mov [ebp+arg_0] eax +
jnz loc_100355B  +
push esi  +
lea ecx [ebp+var_4] +
call sub_10016B1  +
add edi 4 +
push edi  +
lea ebx [ebx+ebx*2+24h] +
shl ebx 4 +
add ebx esi +
sub esp 10h +
mov edi esp +
lea esi [ebx+14h] +
mov [ebp+arg_0] esi +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+4] +
movs   +
movs   +
movs   +
lea eax [ebp+var_18] +
push eax  +
movs   +
call sub_1002758  +
mov esi [ebp+arg_0] +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_20] +
cmp eax [ebp+var_10] +
jz loc_1003A6C  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
lea eax [ebp+var_28] +
push eax  +
mov ecx ebx +
movs   +
call sub_10027FF  +
mov eax [ebp+var_4] +
add eax 2D0h +
push eax  +
call ds:LeaveCriticalSection  +
mov edi [ebp+var_8] +
mov ecx edi +
call sub_1003A91  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+110h] +
push eax  +
call sub_1003B00  +
lea eax [esi+114h] +
push eax  +
call sub_1003B00  +
lea eax [esi+118h] +
push eax  +
call sub_1003B00  +
mov eax [esi+11Ch] +
xor edi edi +
cmp eax edi +
jz loc_1003AD4  +
push eax  +
call ds:UnmapViewOfFile  +
mov [esi+11Ch] edi +
lea eax [esi+130h] +
push eax  +
call sub_1003B00  +
mov [esi+11Ch] edi +
mov [esi+120h] edi +
mov [esi+124h] edi +
mov [esi+128h] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_1003B19  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1003B7F  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp+var_4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_1027084  +
jz loc_1015603  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jnz loc_1015615  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jnz loc_101550C  +
cmp ecx [ebp+arg_8] +
jnz loc_101554F  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003BD3  +
test byte ptr [ebp+8] 1 +
jz loc_1003BC7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1024035 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10016A0 +
mov dword ptr [esi+8] offset off_1001848 +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+0Ch] 1 +
call sub_1003961  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1003C28  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov eax offset dword_1022984 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+138h] +
mov dword ptr [ebp-4] 6 +
call sub_1003B23  +
lea ecx [esi+0CCh] +
mov byte ptr [ebp-4] 5 +
call sub_1003862  +
mov eax [esi+0C8h] +
test eax eax +
mov byte ptr [ebp-4] 4 +
jz loc_1003C6E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+0A0h] +
mov byte ptr [ebp-4] 3 +
call sub_100377F  +
lea ecx [esi+7Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1003741  +
mov eax [esi+28h] +
test eax eax +
mov byte ptr [ebp-4] 1 +
jz loc_1003C9A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx esi +
mov byte ptr [ebp-4] 0 +
call sub_1003CCC  +
mov eax esi +
add esi 0Ch +
neg eax  +
sbb eax eax +
and eax esi +
add eax 4 +
push eax  +
call ds:DeleteCriticalSection  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
mov edi offset CriticalSection +
push edi  +
mov dword ptr [esi] offset off_10031AC +
call ds:EnterCriticalSection  +
mov eax [esi+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
mov esi offset unk_1027004 +
push eax  +
mov ecx esi +
call sub_10016D6  +
mov eax [ebp+var_8] +
cmp dword_1027008 eax +
jnz loc_10155F2  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax offset byte_1022D45 +
call sub_10014DD  +
push ecx  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
push edi  +
add ecx 0C4h +
mov [ebp-10h] esp +
call sub_1003D5B  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 4  +
***
mov eax offset byte_1022C25 +
call sub_10014DD  +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+24h] +
mov [ebp-10h] esp +
push eax  +
mov [ebp-18h] esi +
call ds:EnterCriticalSection  +
and dword ptr [ebp-4] 0 +
movsx eax word ptr [esi+1Ah] +
and dword ptr [ebp-14h] 0 +
mov ecx [ebp-14h] +
cmp ecx [esi+14h] +
jb loc_10156E7  +
and dword ptr [ebp-14h] 0 +
add esi 24h +
push esi  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn   +
***
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
jmp loc_100323A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
test eax eax +
push esi  +
mov esi ecx +
mov [esi] eax +
jz loc_1003DDE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ebp-10h] 80004005h +
jmp loc_1003833  +
***
lea eax [esi+184h] +
cmp dword ptr [eax] 0 +
jz loc_10025DF  +
mov eax [eax] +
push dword ptr [esi-4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
jmp loc_10025DF  +
***
lea ecx [esi-8] +
test ecx ecx +
jz loc_10025DF  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_10025DF  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_1027088 +
jnz loc_1008592  +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jnz loc_1003E4F  +
mov [esi] eax +
mov ecx eax +
jmp loc_1003E41  +
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_1003E58  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi offset CriticalSection +
push edi  +
call ds:EnterCriticalSection  +
push [ebp+arg_0]  +
lea eax [ebp+arg_0] +
mov esi offset unk_1027004 +
push eax  +
mov ecx esi +
call sub_10016D6  +
mov eax [ebp+arg_0] +
cmp dword_1027008 eax +
jz loc_1003E9C  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1003EB0  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_1003F8C  +
mov esi [edi] +
mov eax dword_1027000 +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_1004149  +
mov esi [ebx] +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jnz loc_1004169  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jz loc_101543B  +
mov ecx [edi+4] +
cmp [ecx] edi +
jz loc_10035E6  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jz loc_1015443  +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_1003F44  +
mov ecx [edi] +
cmp ecx dword_1027000 +
jnz loc_10041B6  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jnz loc_1003F63  +
mov eax [ebx+4] +
cmp esi [eax+4] +
jz loc_1003F60  +
cmp [esi+14h] edi +
jz loc_100410F  +
mov [esi+14h] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_1027000 +
jz loc_10040D0  +
push eax  +
call sub_10040F3  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_1003E2B  +
mov esi [edi] +
mov eax dword_1027088 +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_1010917  +
mov esi [ebx] +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jnz loc_10166A3  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jz loc_1016706  +
mov ecx [edi+4] +
cmp [ecx] edi +
jz loc_101670E  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jz loc_1016715  +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_1004045  +
mov ecx [edi] +
cmp ecx dword_1027088 +
jnz loc_1010936  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jz loc_10108A0  +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
mov esi [ebp+var_4] +
lea eax [esi+0Ch] +
push eax  +
call sub_1004087  +
push esi  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100409F  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10040C2  +
test [ebp+arg_0] 1 +
jnz loc_1015B93  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+4] +
test eax eax +
jz locret_10040CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
mov eax [ecx+4] +
cmp ecx [eax+8] +
jnz loc_10040DE  +
mov [esi] eax +
mov ecx eax +
jmp loc_10040D0  +
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_1003FAA  +
jmp loc_1003FA8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027000 +
mov ecx [eax] +
cmp ecx edx +
jnz loc_10108B5  +
pop ebp  +
retn 4  +
***
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jz loc_10084EE  +
cmp dword ptr [eax+14h] 0 +
jz loc_10154A8  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_10108D8  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_10108D8  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
jmp loc_1003F4F  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_1003EE3  +
push ecx  +
call sub_10040F3  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
jmp loc_1003EE3  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_10108BC  +
mov [esi+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jz loc_101542C  +
mov ecx [edi+4] +
cmp [ecx] edi +
jz loc_1015434  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_1003F47  +
push esi  +
call sub_10041CC  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
jmp loc_1003F44  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027000 +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_10041E5  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_10041DA  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1006A21  +
mov dword ptr [esi] offset off_100432C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
add eax 0FFFFFFF8h +
push offset off_1004388  +
push eax  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov eax offset byte_1023349 +
call sub_10014DD  +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
cmp [ebp+10h] ebx +
push esi  +
mov [ebp-14h] ebx +
jz loc_1016635  +
push edi  +
mov edi [ebp+0Ch] +
cmp edi ebx +
jl loc_10044C7  +
mov eax [ebp+8] +
mov eax [eax+10h] +
cmp edi eax +
mov [ebp-18h] eax +
jge loc_10044C7  +
xor esi esi +
inc edi  +
inc esi  +
cmp edi ebx +
mov [ebp+0Ch] ebx +
jle loc_1004487  +
cmp esi [ebp-18h] +
jg loc_1004482  +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call sub_10033AC  +
cmp eax ebx +
mov eax [ebp-10h] +
jl loc_10044BA  +
cmp eax ebx +
jz loc_10044BA  +
lea ecx [eax-8] +
cmp ecx ebx +
jz loc_101663F  +
cmp [ecx+234h] ebx +
jz loc_1004472  +
inc dword ptr [ebp+0Ch]  +
mov [ebp-14h] esi +
mov ecx [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
call dword ptr [ecx+8]  +
inc esi  +
cmp [ebp+0Ch] edi +
jl loc_1004436  +
cmp [ebp+0Ch] edi +
jl loc_10044C7  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+8]  +
call sub_10033AC  +
mov ecx [ebp+10h] +
cmp [ecx] ebx +
jz loc_10044B3  +
cmp eax ebx +
jl loc_10044B3  +
xor eax eax +
pop edi  +
mov ecx [ebp-0Ch] +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
mov eax 80004005h +
jmp loc_10044A2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10044B3  +
jmp loc_1016643  +
mov eax 80040214h +
jmp loc_10044A2  +
***
mov eax offset byte_1023349 +
call sub_10014DD  +
push ecx  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_101664E  +
push ebx  +
mov ebx [ebp+8] +
and dword ptr [ebp+8] 0 +
push esi  +
mov esi [ebx+10h] +
push edi  +
xor edi edi +
inc edi  +
cmp esi edi +
jl loc_1004540  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push edi  +
push ebx  +
call sub_10033AC  +
test eax eax +
mov eax [ebp-10h] +
jl loc_100455B  +
test eax eax +
jz loc_100455B  +
lea ecx [eax-8] +
test ecx ecx +
jz loc_1016658  +
cmp dword ptr [ecx+234h] 0 +
jz loc_1004531  +
inc dword ptr [ebp+8]  +
mov ecx [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi esi +
jle loc_10044FC  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
leave   +
retn 8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1016662  +
jmp loc_101665C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea eax [esi+24h] +
push eax  +
call ds:InitializeCriticalSection  +
mov eax [ebp+arg_0] +
and dword ptr [esi+20h] 0 +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
mov [esi+8] eax +
mov eax [ebp+arg_10] +
mov [esi+0Ch] eax +
mov dword ptr [esi+10h] 400h +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
lea eax [esi+4] +
push eax  +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
test byte ptr [esi+2Ch] 22h +
push edi  +
jnz loc_10058EC  +
push dword ptr [esi+28h]  +
call ds:IsWindow  +
test eax eax +
jz loc_10058EC  +
mov esi [esi+28h] +
mov edi ds:GetWindowLongW +
push 0FFFFFFECh  +
push esi  +
call edi  +
test al 8 +
jnz loc_1004A22  +
push 1  +
push esi  +
mov esi ds:GetAncestor +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_10058EC  +
push 1  +
push ebx  +
mov [ebp+8] ebx +
call esi  +
push 0FFFFFFECh  +
push dword ptr [ebp+8]  +
mov ebx eax +
call edi  +
test al 8 +
jz loc_1004A05  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 0C8h +
push ecx  +
call ds:AtlComPtrAssign  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax ecx +
or word ptr [eax+16h] 0FFFFh +
or word ptr [eax+14h] 0FFFFh +
and byte ptr [eax+1Ch] 0FCh +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax] ecx +
mov [eax+0Ch] ecx +
mov [eax+8] ecx +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
add eax 4 +
mov [esi] ecx +
push eax  +
lea ecx [esi+4] +
call sub_10054DC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_10168FC  +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [edi+4] +
call sub_100320B  +
mov eax [ebp+arg_8] +
cmp [edi+8] eax +
pop edi  +
jz loc_1004AEA  +
mov ecx [eax+10h] +
mov [esi] ecx +
mov eax [eax+10h] +
test eax eax +
jz loc_1004AE3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax 80004005h +
jmp loc_1004AE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi offset CriticalSection +
push edi  +
call ds:EnterCriticalSection  +
mov esi offset dword_1027898 +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call sub_100174E  +
test eax eax +
jge loc_1006413  +
push edi  +
call ds:LeaveCriticalSection  +
mov eax dword_1027898 +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push edi  +
mov edx ecx +
push 8  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
mov edi edi +
push edi  +
xor eax eax +
mov edi ecx +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax ecx +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_8] +
mov eax [ebx+8] +
push esi  +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_10172ED  +
mov eax [ebx+10h] +
cmp eax edi +
jnz loc_10172FF  +
mov esi [ebp+arg_4] +
mov eax [esi] +
cmp eax edi +
mov [ebx+4] eax +
jz loc_1004C03  +
shl eax 5 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax edi +
pop ecx  +
mov [ebx+8] eax +
jz loc_1004C51  +
cmp [ebx+4] edi +
mov [ebp+var_8] edi +
jbe loc_1004C03  +
mov [ebp+var_4] edi +
mov [ebp+arg_8] edi +
mov esi [esi+4] +
mov edi [ebx+8] +
add esi [ebp+arg_8] +
mov ecx [ebp+var_4] +
add edi ecx +
movs   +
mov eax [ebp+arg_0] +
movs   +
movs   +
movs   +
mov esi [ebx+8] +
mov edx [eax] +
lea ecx [ecx+esi+10h] +
push ecx  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+4] +
add ecx [ebp+arg_8] +
push ecx  +
push eax  +
call dword ptr [edx+20h]  +
test eax eax +
jl loc_1017311  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add [ebp+arg_8] 10h +
add [ebp+var_4] 20h +
cmp eax [ebx+4] +
mov esi [ebp+arg_4] +
jb loc_1004BB6  +
xor edi edi +
mov eax [esi+8] +
cmp eax edi +
mov [ebx+0Ch] eax +
jz loc_1004C37  +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax edi +
pop ecx  +
mov [ebx+10h] eax +
jz loc_1004C51  +
mov ecx [ebx+0Ch] +
mov esi [esi+0Ch] +
shl ecx 4 +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov eax [ebx+0Ch] +
add eax 1Fh +
shr eax 5 +
add eax [ebx+4] +
shl eax 2 +
mov [ebx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov eax 8007000Eh +
jmp loc_1004C4A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
push esi  +
mov esi ecx +
mov [esi] eax +
jz loc_1004C74  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1023D11 +
call sub_10014DD  +
push ecx  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push dword ptr [ebp+10h]  +
add ecx 0B0h +
push dword ptr [ebp+0Ch]  +
call sub_1004CBF  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_4] +
test edx edx +
mov eax ecx +
jz loc_10172CD  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi off_102779C +
push 4  +
pop ecx  +
xor ebx ebx +
cmps   +
jz loc_10172D7  +
mov ecx [eax+4] +
and [ebp+arg_4] 0 +
test ecx ecx +
mov [ebp+var_4] ecx +
jbe loc_1004D18  +
mov eax [eax+8] +
mov esi [ebp+arg_0] +
push 4  +
pop ecx  +
mov edi eax +
xor ebx ebx +
cmps   +
jz loc_1004D24  +
inc [ebp+arg_4]  +
mov ecx [ebp+arg_4] +
add eax 20h +
cmp ecx [ebp+var_4] +
jb loc_1004CFC  +
mov eax 8004021Bh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
lea esi [eax+10h] +
mov edi edx +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
jmp loc_1004D1D  +
***
mov eax offset byte_1022B49 +
call sub_10014DD  +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+10h] +
mov eax edi +
shl eax 5 +
add eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
xor ebx ebx +
cmp eax ebx +
mov [ebp-4] ebx +
jz loc_1004D7D  +
push offset nullsub_1  +
push offset loc_1004A50  +
push edi  +
lea ebx [eax+4] +
push 20h  +
push ebx  +
mov [eax] edi +
call sub_1004E26  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ebx ebx +
mov [esi+20h] ebx +
jz loc_1004E1A  +
mov eax [esi+10h] +
mov edi [ebp+8] +
imul eax edi +
shl eax 2 +
push eax  +
call ??2@YAPAXI@Z  +
xor edx edx +
cmp eax edx +
pop ecx  +
mov [ebp-10h] eax +
jz loc_1004E1A  +
cmp [esi+10h] edx +
mov [ebp-14h] edx +
jbe loc_1004DF4  +
mov ecx edi +
shl ecx 2 +
mov eax [esi+20h] +
mov ebx [ebp-10h] +
mov [edx+eax] ebx +
mov eax [esi+20h] +
mov [edx+eax+4] edi +
mov edi [esi+20h] +
mov edi [edx+edi] +
mov ebx ecx +
shr ecx 2 +
xor eax eax +
stos   +
mov ecx ebx +
and ecx 3 +
inc dword ptr [ebp-14h]  +
stos   +
mov edi [ebp+8] +
mov eax [ebp-14h] +
mov ecx edi +
shl ecx 2 +
add [ebp-10h] ecx +
add edx 20h +
cmp eax [esi+10h] +
jb loc_1004DB5  +
and dword ptr [esi+14h] 0 +
and word ptr [esi+18h] 0 +
or word ptr [esi+1Ah] 0FFFFh +
or word ptr [esi+1Ch] 0FFFFh +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 4  +
mov eax 8007000Eh +
jmp loc_1004E09  +
***
call sub_10031B5  +
xor eax eax +
mov [ebp-20h] eax +
mov [ebp-4] eax +
mov [ebp-1Ch] eax +
jmp loc_1004E4C  +
mov eax [ebp-1Ch] +
cmp eax [ebp+10h] +
jge loc_1004E67  +
mov esi [ebp+8] +
mov ecx esi +
call dword ptr [ebp+14h]  +
add esi [ebp+0Ch] +
mov [ebp+8] esi +
inc dword ptr [ebp-1Ch]  +
jmp loc_1004E4C  +
mov dword ptr [ebp-20h] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1004E84  +
call sub_10031F5  +
retn 14h  +
***
cmp dword ptr [ebp-20h] 0 +
jz loc_1017EF8  +
retn   +
***
mov ecx [ebp+arg_10] +
mov [ebx+0BCh] ecx +
jmp loc_10050E9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx ecx +
mov [ebx+2Ch] eax +
mov [ebx+0D4h] eax +
mov eax [ebp+arg_4] +
mov [ebx+30h] eax +
mov eax [ebp+arg_C] +
mov ecx eax +
shr ecx 4 +
not ecx  +
test cl 1 +
push esi  +
push edi  +
mov [ebx+34h] eax +
jz loc_1008BF9  +
xor esi esi +
test byte ptr [ebx+34h] 2 +
jnz loc_1010C38  +
lea eax [ebx+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+80h]  +
mov edi eax +
xor eax eax +
cmp edi esi +
setz al  +
and dword ptr [ebx+78h] 0FFFFFFFEh +
lea ecx [ebx+134h] +
mov [ebx+68h] esi +
mov [ebx+6Ch] esi +
mov [ebx+70h] esi +
mov [ebx+74h] esi +
xor eax [ecx] +
mov [ebx+14Ch] esi +
and eax 1 +
xor [ecx] eax +
mov eax [ebp+arg_14] +
mov [ebx+9Ch] eax +
mov eax [ebx+34h] +
shr eax 4 +
not eax  +
test al 1 +
mov [ebx+150h] esi +
mov [ebx+16Ch] esi +
mov [ebx+154h] si +
mov [ebx+156h] si +
mov [ebx+15Ch] esi +
mov [ebx+160h] esi +
mov [ebx+164h] esi +
mov [ebx+168h] esi +
mov [ebx+170h] esi +
mov [ebx+174h] esi +
mov [ebx+178h] esi +
mov [ebx+17Ch] esi +
mov [ebx+184h] esi +
mov [ebx+188h] esi +
mov [ebx+158h] si +
mov [ebx+180h] si +
jz loc_1008C06  +
cmp [ebp+arg_8] esi +
jnz loc_101538A  +
cmp [ebx+30h] esi +
jz loc_1015399  +
mov ecx ebx +
call sub_10058F9  +
mov eax [ebx+2Ch] +
lea edx [ebp+var_24] +
add eax 8 +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [ebx+2Ch] +
test byte ptr [eax+0B4h] 1 +
lea edi [ebp+var_14] +
lea esi [eax+140h] +
jz loc_100641E  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebx+38h] +
push eax  +
lea eax [ebx+58h] +
movs   +
movs   +
movs   +
mov ecx ebx +
push eax  +
movs   +
call sub_1002065  +
cmp [ebp+arg_10] 0 +
jz loc_1010B8C  +
push [ebp+arg_10]  +
lea edi [ebx+7Ch] +
mov ecx edi +
call sub_1005229  +
mov ecx ebx +
call sub_1002045  +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_1010C43  +
add eax 8 +
lea esi [ebx+0A0h] +
push esi  +
push edi  +
push eax  +
call sub_1004B62  +
mov eax [esi] +
shr eax 2 +
inc eax  +
inc eax  +
push eax  +
lea ecx [ebx+0CCh] +
call sub_1004D36  +
test eax eax +
jl loc_10153B6  +
mov eax [ebx+0A4h] +
lea eax ds:8[eax*4] +
push eax  +
call ??2@YAPAXI@Z  +
xor esi esi +
cmp eax esi +
pop ecx  +
mov [ebx+0B4h] eax +
jz loc_10153C0  +
mov eax [ebx+0ACh] +
shl eax 2 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax esi +
pop ecx  +
mov [ebx+0B8h] eax +
jz loc_10153C0  +
mov eax [ebx+0B4h] +
mov [eax] esi +
mov eax [ebx+0B4h] +
mov [eax+4] esi +
cmp [ebx+0A4h] esi +
mov [ebp+arg_10] esi +
jbe loc_100517C  +
mov [ebp+arg_14] esi +
mov [ebp+arg_4] 8 +
mov eax [ebx+0A8h] +
add eax [ebp+arg_14] +
mov edi off_102779C +
push 4  +
pop ecx  +
mov esi eax +
xor edx edx +
cmps   +
jz loc_10153CA  +
mov edi off_1027794 +
push 4  +
pop ecx  +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1004E8F  +
mov edi off_1027798 +
push 4  +
pop ecx  +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1005216  +
mov ecx [ebp+arg_0] +
mov edx [ecx+0F0h] +
and [ebp+arg_8] 0 +
test edx edx +
mov [ebp+arg_C] edx +
jbe loc_1005148  +
mov ecx [ecx+0ECh] +
mov [ebp+var_4] ecx +
mov edx [ecx] +
cmp edx 0FFFFFFFFh +
jz loc_1005134  +
mov edi dword_10277A0[edx*4] +
push 4  +
pop ecx  +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1005148  +
inc [ebp+arg_8]  +
mov ecx [ebp+var_4] +
mov edx [ebp+arg_8] +
add ecx 8 +
cmp edx [ebp+arg_C] +
mov [ebp+var_4] ecx +
jb loc_100511B  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_C] +
jnb loc_10153D3  +
mov ecx [ebx+0B4h] +
mov edx [ebp+arg_4] +
mov [edx+ecx] eax +
inc [ebp+arg_10]  +
mov eax [ebp+arg_10] +
add [ebp+arg_4] 4 +
add [ebp+arg_14] 20h +
cmp eax [ebx+0A4h] +
jb loc_10050B6  +
xor esi esi +
cmp [ebx+0ACh] esi +
mov [ebp+arg_10] esi +
jbe loc_10051FF  +
mov [ebp+arg_4] esi +
mov eax [ebp+arg_0] +
mov ecx [eax+0F0h] +
cmp ecx esi +
mov [ebp+arg_8] esi +
mov [ebp+arg_C] ecx +
jbe loc_10051D7  +
mov edx [eax+0ECh] +
mov eax [edx] +
cmp eax 0FFFFFFFFh +
jz loc_10051C9  +
mov esi [ebx+0B0h] +
mov edi dword_10277A0[eax*4] +
add esi [ebp+arg_4] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
jz loc_10035B7  +
xor esi esi +
inc [ebp+arg_8]  +
mov eax [ebp+arg_8] +
add edx 8 +
cmp eax [ebp+arg_C] +
jb loc_10051A3  +
mov ecx [ebp+arg_8] +
cmp ecx [ebp+arg_C] +
mov eax [ebp+arg_10] +
jnb loc_1010C4A  +
mov edx [ebx+0B8h] +
mov [edx+eax*4] ecx +
add [ebp+arg_4] 10h +
inc eax  +
cmp eax [ebx+0ACh] +
mov [ebp+arg_10] eax +
jb loc_100518A  +
push [ebp+arg_18]  +
mov ecx ebx +
call sub_1004A30  +
cmp eax esi +
jl loc_100520F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
mov ecx [ebp+arg_10] +
mov [ebx+0C0h] ecx +
jmp loc_10050FE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jnz loc_101732F  +
mov eax [esi+0Ch] +
test eax eax +
jnz loc_101733B  +
mov eax [esi+10h] +
test eax eax +
jnz loc_1017347  +
mov eax [esi+14h] +
test eax eax +
jnz loc_1017353  +
push [ebp+arg_0]  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+10h] 0 +
and dword ptr [esi+14h] 0 +
mov ecx esi +
call sub_1005283  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
push 8  +
pop ecx  +
mov edi ebx +
movs   +
mov eax [ebx] +
test eax eax +
jz loc_10052CD  +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
test eax eax +
pop ecx  +
mov [ebx+4] eax +
jz loc_101721C  +
mov ecx [ebx] +
mov edx [ebp+arg_0] +
mov esi [edx+4] +
shl ecx 4 +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov eax [ebx+8] +
xor esi esi +
cmp eax esi +
jz loc_100601C  +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax esi +
pop ecx  +
mov [ebx+0Ch] eax +
jz loc_101721C  +
mov ecx [ebx+8] +
mov edx [ebp+arg_0] +
mov esi [edx+0Ch] +
shl ecx 4 +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
cmp dword ptr [edx+10h] 0 +
jnz loc_1010BA6  +
cmp dword ptr [edx+14h] 0 +
jnz loc_1010BEB  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1022A53 +
call sub_10014DD  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+0Ch] +
mov [ebp-10h] esi +
call sub_10049A5  +
xor ebx ebx +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_10031AC +
lea edi [esi+28h] +
mov [edi] ebx +
lea ecx [esi+7Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1004B36  +
lea ecx [esi+0A0h] +
mov byte ptr [ebp-4] 3 +
call sub_1004B4D  +
mov [esi+0C8h] ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [esi+0CCh] +
push ebx  +
call sub_1004965  +
lea ecx [esi+138h] +
mov byte ptr [ebp-4] 6 +
mov [ecx+8] bl +
call sub_100544A  +
mov [esi+2Ch] ebx +
mov [esi+30h] ebx +
push dword_102704C  +
push edi  +
call ds:AtlComPtrAssign  +
and dword ptr [esi+134h] 0FFFFFFF8h +
or dword ptr [esi+0BCh] 0FFFFFFFFh +
or dword ptr [esi+0C0h] 0FFFFFFFFh +
or dword ptr [esi+0C4h] 0FFFFFFFFh +
mov ecx [ebp-0Ch] +
lea eax [esi+0A0h] +
mov [esi+0D0h] eax +
xor eax eax +
inc eax  +
and dword ptr [esi+108h] 0FFFFFFFEh +
mov [esi+148h] eax +
mov [esi+12Ch] eax +
mov [esi+0B4h] ebx +
mov [esi+0B8h] ebx +
mov [esi+10Ch] ebx +
mov [esi+110h] ebx +
mov [esi+114h] ebx +
mov [esi+118h] ebx +
mov [esi+11Ch] ebx +
mov [esi+120h] ebx +
mov [esi+124h] ebx +
mov [esi+128h] ebx +
mov [esi+130h] ebx +
pop edi  +
mov [esi+0CCh] esi +
mov eax esi +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_102789C edi +
jz loc_1008C3E  +
inc dword_1027084  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jz loc_1005490  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
push edi  +
push dword_102789C  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
lea ecx [esi+4] +
mov [esi] eax +
call sub_10054DC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi] 0 +
call sub_10054FB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
push ecx  +
call ds:AtlComPtrAssign  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1023FF1 +
call sub_10014DD  +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+14h] +
push ebx  +
call ds:EnterCriticalSection  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
call sub_1004C5D  +
xor edi edi +
push eax  +
lea ecx [ebp+10h] +
mov [ebp-4] edi +
call sub_10054DC  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-20h] +
call sub_10054B6  +
mov eax [ebp+10h] +
cmp eax edi +
mov byte ptr [ebp-4] 1 +
jz loc_1005569  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
cmp eax edi +
mov byte ptr [ebp-4] 2 +
jz loc_100557A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-18h] +
call sub_1004A79  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 3 +
call sub_100562D  +
mov eax [ebp-14h] +
cmp eax edi +
mov byte ptr [ebp-4] 2 +
jz loc_10055AB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+8] edi +
mov eax [esi] +
lea ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 4 +
push esi  +
call dword ptr [eax+28h]  +
mov esi eax +
cmp esi edi +
jl loc_10055E5  +
mov eax [ebp+8] +
cmp eax edi +
jz loc_1005621  +
lea ecx [eax-8] +
cmp ecx edi +
jz loc_1005621  +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [ecx+4]  +
push edi  +
push 2C0h  +
call sub_1001FC9  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
cmp eax edi +
mov byte ptr [ebp-4] 2 +
jz loc_10055FD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_100560E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp-0Ch] +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
mov esi 80004005h +
jmp loc_10055E5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_1005657  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_1027088 +
cmp esi eax +
mov dl 1 +
jz loc_1005691  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jnz loc_1016906  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_100567A  +
cmp byte ptr [edi+8] 0 +
jnz loc_1008678  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jnz loc_100866D  +
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jnb loc_1008680  +
push eax  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_10056DB  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_1027088 +
mov [ebx] eax +
mov eax dword_1027088 +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_1005779  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jz loc_100864C  +
mov eax [ebp+arg_4] +
cmp eax dword_1027088 +
jnz loc_100864C  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_100864C  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1005744  +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jz loc_100575B  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jz loc_1010766  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100579C  +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov [eax] edx +
add eax 4 +
and dword ptr [eax] 0 +
push dword ptr [ecx+4]  +
push eax  +
call ds:AtlComPtrAssign  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_10057CF  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_1027000 +
cmp esi eax +
mov dl 1 +
jz loc_1005809  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jnz loc_1016C69  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_10057F2  +
cmp byte ptr [edi+8] 0 +
jnz loc_100C414  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jnz loc_100C409  +
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jnb loc_100C41C  +
push eax  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1005853  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_1027000 +
mov [ebx] eax +
mov eax dword_1027000 +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_10034D9  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jz loc_1008FF0  +
mov eax [ebp+arg_4] +
cmp eax dword_1027000 +
jnz loc_1008FF0  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_1008FF0  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_10058BC  +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jz loc_10058D3  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jz loc_10063D3  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
xor eax eax +
inc eax  +
jmp loc_1004A24  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+58h] +
push edi  +
push dword ptr [esi+30h]  +
call ds:GetClientRect  +
mov eax [edi] +
mov ebx ds:ClientToScreen +
mov [ebp+Point.x] eax +
mov eax [esi+5Ch] +
mov [ebp+Point.y] eax +
lea eax [ebp+Point] +
push eax  +
push dword ptr [esi+30h]  +
call ebx  +
mov eax [ebp+Point.x] +
mov [edi] eax +
mov eax [ebp+Point.y] +
mov [esi+5Ch] eax +
mov eax [esi+60h] +
mov [ebp+var_10] eax +
mov eax [esi+64h] +
mov [ebp+var_C] eax +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [esi+30h]  +
call ebx  +
mov eax [ebp+var_10] +
mov [esi+60h] eax +
mov eax [ebp+var_C] +
pop edi  +
mov [esi+64h] eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1014E5E  +
mov ecx [ebp+8] +
mov ecx [ecx+28h] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1014E68  +
mov ecx [ebp+8] +
mov ecx [ecx+2Ch] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax offset byte_10228D9 +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jz loc_1015077  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0C0h +
call sub_1003381  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100532D  +
push offset Addend  +
mov dword ptr [esi] offset off_10016A0 +
mov dword ptr [esi+8] offset off_1001848 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov eax offset byte_1023CE5 +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jz loc_101735F  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0C4h +
call sub_1005A62  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
push ebx  +
mov ebx ecx +
jz loc_1017231  +
and dword ptr [eax] 0 +
and [ebp+var_8] 0 +
push edi  +
push 20h  +
call ds:CoTaskMemAlloc  +
mov edi eax +
test edi edi +
mov [ebp+pv] edi +
jz loc_101723B  +
push esi  +
push 8  +
pop ecx  +
mov esi ebx +
movs   +
mov eax [ebx] +
test eax eax +
jz loc_1005AD1  +
shl eax 4 +
mov esi eax +
push esi  +
call ds:CoTaskMemAlloc  +
test eax eax +
mov ecx [ebp+pv] +
mov [ecx+4] eax +
jz loc_1017245  +
mov ecx esi +
mov esi [ebx+4] +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov eax [ebx+8] +
test eax eax +
jz loc_1005B83  +
shl eax 4 +
mov esi eax +
push esi  +
call ds:CoTaskMemAlloc  +
test eax eax +
mov ecx [ebp+pv] +
mov [ecx+0Ch] eax +
jz loc_1017245  +
mov ecx esi +
mov esi [ebx+0Ch] +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
cmp dword ptr [ebx+10h] 0 +
jz loc_1005B47  +
mov esi [ebx+8] +
add esi 1Fh +
shr esi 5 +
shl esi 2 +
push esi  +
call ds:CoTaskMemAlloc  +
test eax eax +
mov ecx [ebp+pv] +
mov [ecx+10h] eax +
jz loc_1017245  +
mov ecx esi +
mov esi [ebx+10h] +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
cmp dword ptr [ebx+14h] 0 +
jz loc_1005B83  +
mov esi [ebx+8] +
add esi 1Fh +
shr esi 5 +
shl esi 2 +
push esi  +
call ds:CoTaskMemAlloc  +
test eax eax +
mov ecx [ebp+pv] +
mov [ecx+14h] eax +
jz loc_1017245  +
mov ecx esi +
mov esi [ebx+14h] +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov eax [ebp+arg_0] +
mov ecx [ebp+pv] +
mov [eax] ecx +
mov eax [ebp+var_8] +
pop esi  +
pop edi  +
***
pop ebx  +
leave   +
retn 4  +
***
mov eax offset dword_10240DC +
call sub_10014DD  +
sub esp 40h +
push ebx  +
push esi  +
mov esi [ebp+14h] +
and esi 22h +
push edi  +
mov [ebp-10h] esp +
jnz loc_1005BC6  +
push dword ptr [ebp+0Ch]  +
call ds:IsWindow  +
test eax eax +
jz loc_1017A7D  +
xor edi edi +
cmp esi edi +
jnz loc_1010C58  +
cmp [ebp+18h] edi +
jz loc_1010C30  +
test byte ptr [ebp+15h] 1 +
jnz loc_1010C30  +
mov ebx [ebp+8] +
push dword ptr [ebp+18h]  +
lea ecx [ebx-8] +
call sub_1005E84  +
test eax eax +
jz loc_1017A9A  +
mov eax [ebp+20h] +
cmp eax edi +
jz loc_1017AA4  +
cmp [ebx+22Ch] edi +
jz loc_1010C6E  +
mov [eax] edi +
mov eax [ebp+28h] +
cmp eax edi +
mov [ebp-4] edi +
jz loc_1005C1E  +
mov [eax] edi +
lea eax [ebp-18h] +
push eax  +
mov [ebp-18h] edi +
call sub_1005D8D  +
cmp eax edi +
jl loc_1005D77  +
mov esi [ebp-18h] +
cmp esi edi +
jz loc_1005D77  +
mov byte ptr [ebp-1Ch] 1 +
mov [ebp-18h] esi +
lea edi [ebx+48h] +
push edi  +
mov byte ptr [ebp-4] 1 +
call ds:InterlockedIncrement  +
push dword ptr [ebp+2Ch]  +
lea eax [ebx-8] +
push dword ptr [ebp+1Ch]  +
mov ecx esi +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_1004EA2  +
push edi  +
mov [ebp+18h] eax +
call ds:InterlockedDecrement  +
cmp dword ptr [ebp+18h] 0 +
jl loc_1017AAE  +
and dword ptr [ebp+8] 0 +
lea edx [ebp+8] +
push edx  +
lea eax [esi+8] +
mov ecx [eax] +
push offset dword_10026AC  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx]  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
push dword ptr [ebp+8]  +
lea eax [ebx+1Ch] +
push dword ptr [ebp-14h]  +
push eax  +
call sub_1005515  +
mov edi eax +
test edi edi +
jl loc_1017AC2  +
lea eax [ebx-8] +
neg eax  +
sbb eax eax +
lea ecx [ebx+1Ch] +
and eax ecx +
mov [esi+18Ch] eax +
lea eax [ebx-8] +
push eax  +
lea ecx [ebp+14h] +
call sub_10016B1  +
mov eax [esi+34h] +
test al 2 +
mov byte ptr [ebp-4] 3 +
jnz loc_1010C78  +
test byte ptr [esi+134h] 1 +
jnz loc_10085BE  +
test al 20h +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebx+298h] +
jnz loc_1005D10  +
lea ecx [ebx+268h] +
call sub_100271D  +
mov eax [ebp+14h] +
add eax 2D0h +
push eax  +
mov byte ptr [ebp-4] 2 +
call ds:LeaveCriticalSection  +
push dword ptr [ebp+20h]  +
lea ecx [ebp+8] +
call sub_1003381  +
mov eax [ebp+24h] +
test eax eax +
jz loc_1005D3F  +
mov ecx [ebp-14h] +
mov [eax] ecx +
cmp dword ptr [ebp+28h] 0 +
jz loc_1005D51  +
mov eax [ebp+8] +
push dword ptr [ebp+28h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-18h] +
and dword ptr [ebp+8] 0 +
add eax 0Ch +
push eax  +
mov byte ptr [ebp-1Ch] 0 +
call ds:InterlockedDecrement  +
mov eax [ebp+8] +
test eax eax +
mov byte ptr [ebp-4] 1 +
jnz loc_1017AF9  +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
call sub_1004AF6  +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_1005DB0  +
leave   +
retn 4  +
***
mov eax offset byte_1024089 +
call sub_10014DD  +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push offset CriticalSection  +
call ds:EnterCriticalSection  +
mov ebx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push ebx  +
call sub_100174E  +
test eax eax +
jge loc_1017A47  +
xor esi esi +
push 190h  +
mov [ebp-18h] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-20h] ecx +
cmp ecx esi +
mov byte ptr [ebp-4] 1 +
jz loc_1005E12  +
push esi  +
call sub_1001501  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1005E5B  +
lea edi [esi+0Ch] +
push edi  +
call ds:InterlockedIncrement  +
push edi  +
call ds:InterlockedDecrement  +
mov eax [ebx] +
mov [esi+4] eax +
mov eax [ebx] +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx offset unk_1027004 +
mov [ebp-20h] esi +
call sub_10057A5  +
cmp byte ptr [ebp-18h] 0 +
jz loc_1017A6E  +
mov dword ptr [ebp-14h] 1 +
mov eax [ebp+0Ch] +
mov [eax] esi +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax ecx +
mov edx [eax+0CCh] +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ecx] +
inc edx  +
cmp esi edx +
push edi  +
mov [ebp+var_10] eax +
ja loc_10035DD  +
mov edx [ecx+8] +
cmp edx [eax+0D4h] +
ja loc_10035DD  +
mov [ebp+var_8] 1 +
xor edx edx +
cmp [ebp+var_8] edx +
mov [ebp+var_C] edx +
jz loc_1005F3A  +
mov [ebp+var_14] edx +
mov edx [ebp+var_C] +
cmp edx [ecx] +
jnb loc_1005F3A  +
mov edx [ecx+4] +
add edx [ebp+var_14] +
mov edi off_102779C +
push 4  +
pop ecx  +
mov esi edx +
xor ebx ebx +
cmps   +
jz loc_1005F2A  +
and [ebp+var_4] ebx +
cmp [eax+0CCh] ebx +
jbe loc_1005F1B  +
mov ebx [eax+0D0h] +
push 4  +
xor eax eax +
mov eax [ebp+var_10] +
pop ecx  +
mov edi ebx +
mov esi edx +
cmps   +
jz loc_1005F1B  +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
add ebx 10h +
cmp ecx [eax+0CCh] +
jb loc_1005EFA  +
mov ecx [ebp+var_4] +
cmp ecx [eax+0CCh] +
jz loc_10173B1  +
inc [ebp+var_C]  +
add [ebp+var_14] 10h +
cmp [ebp+var_8] 0 +
mov ecx [ebp+arg_0] +
jnz loc_1005ECB  +
xor esi esi +
cmp [ebp+var_8] esi +
mov [ebp+var_C] esi +
jz loc_1005F9A  +
mov [ebp+var_18] esi +
mov edx [ebp+var_C] +
cmp edx [ecx+8] +
jnb loc_1005F9A  +
mov edx [ecx+0Ch] +
mov ebx [eax+0D4h] +
add edx [ebp+var_18] +
cmp ebx esi +
mov [ebp+var_4] esi +
jbe loc_1005F83  +
mov eax [eax+0D8h] +
mov [ebp+var_14] eax +
mov edi [ebp+var_14] +
push 4  +
pop ecx  +
mov esi edx +
xor eax eax +
cmps   +
jnz loc_10035C8  +
mov eax [ebp+var_10] +
mov ecx [ebp+arg_0] +
cmp [ebp+var_4] ebx +
jz loc_10173BA  +
inc [ebp+var_C]  +
add [ebp+var_18] 10h +
xor esi esi +
cmp [ebp+var_8] esi +
jnz loc_1005F47  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
push edi  +
mov edi ecx +
jz loc_1014DF4  +
and dword ptr [esi] 0 +
mov eax [edi] +
test eax eax +
jz loc_1005FCD  +
push eax  +
call ds:SysStringLen  +
lea eax [eax+eax+2] +
push eax  +
call ds:CoTaskMemAlloc  +
test eax eax +
mov [esi] eax +
jz loc_1014DFE  +
push dword ptr [edi]  +
push eax  +
call ds:lstrcpyW  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10173A7  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 88h +
call sub_1005FA9  +
pop ebp  +
retn 8  +
***
mov [ebx+0Ch] esi +
mov [ebx+10h] esi +
mov [ebx+14h] esi +
jmp loc_100531F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
mov edi ecx +
mov [ebp+var_4] 1 +
call ds:CreateEventW  +
cmp eax esi +
mov [edi+110h] eax +
jz loc_10150F1  +
push esi  +
push esi  +
push esi  +
call ds:CreateMutexW  +
cmp eax esi +
mov [edi+114h] eax +
jz loc_10150F1  +
mov eax [edi+0DCh] +
cmp eax 40h +
jbe loc_1006080  +
push 40h  +
pop eax  +
mov esi [edi+0A0h] +
imul esi eax +
add esi 3Ch +
lea ebx [esi+eax+4] +
xor eax eax +
push eax  +
push ebx  +
push eax  +
push 4  +
push eax  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
xor ecx ecx +
cmp eax ecx +
mov [edi+118h] eax +
jz loc_1015100  +
push ebx  +
push ecx  +
push ecx  +
push 2  +
push eax  +
call ds:MapViewOfFile  +
test eax eax +
mov [edi+11Ch] eax +
jz loc_1015105  +
lea edx [eax+3Ch] +
mov [edi+124h] edx +
lea ecx [edi+120h] +
mov [ecx] eax +
lea edx [eax+esi] +
mov [edi+128h] edx +
mov [eax] ebx +
mov eax [ecx] +
mov [eax+4] esi +
mov eax [ecx] +
or dword ptr [eax+0Ch] 0FFFFFFFFh +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax offset byte_1022779 +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jz loc_1014E72  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 98h +
call sub_1006144  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
push esi  +
mov esi ecx +
mov [ebp+var_8] esi +
jz loc_1017290  +
and dword ptr [eax] 0 +
and [ebp+var_4] 0 +
push ebx  +
push 14h  +
call ds:CoTaskMemAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_101729A  +
push edi  +
push 5  +
pop ecx  +
mov edi ebx +
movs   +
mov esi [ebp+var_8] +
mov eax [esi+4] +
test eax eax +
jz loc_10061B9  +
shl eax 5 +
push eax  +
call ds:CoTaskMemAlloc  +
test eax eax +
mov [ebx+8] eax +
jz loc_10172A4  +
mov ecx [esi+4] +
mov esi [esi+8] +
shl ecx 5 +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov esi [ebp+var_8] +
mov eax [esi+0Ch] +
test eax eax +
jz loc_10061EE  +
shl eax 4 +
push eax  +
call ds:CoTaskMemAlloc  +
test eax eax +
mov [ebx+10h] eax +
jz loc_10172A4  +
mov ecx [esi+0Ch] +
mov esi [esi+10h] +
shl ecx 4 +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov eax [ebp+arg_0] +
mov [eax] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jz loc_10153E5  +
cmp [ebp+10h] ebx +
jz loc_1006332  +
cmp [ebp+14h] ebx +
jz loc_1006332  +
cmp [ebp+18h] ebx +
jz loc_1006332  +
cmp [ebp+1Ch] ebx +
jz loc_1006332  +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
lea ecx [esi-8] +
mov [ebp-4] edi +
call sub_100602F  +
lea ecx [esi+100h] +
mov edx [ecx] +
xor edx eax +
and edx 1 +
xor [ecx] edx +
test byte ptr [ecx] 1 +
jz loc_1006329  +
mov ecx [esi+24h] +
call sub_100633E  +
test eax eax +
jz loc_10153EF  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push 40h  +
call ds:OpenProcess  +
cmp eax ebx +
mov [esi+128h] eax +
jz loc_10153EF  +
call ds:GetCurrentProcess  +
mov ecx [esi+24h] +
mov edi ds:DuplicateHandle +
push ebx  +
push ebx  +
push 1F0003h  +
push dword ptr [ebp+14h]  +
mov [ebp+0Ch] eax +
push dword ptr [esi+128h]  +
push dword ptr [ecx+80h]  +
push eax  +
call edi  +
test eax eax +
jz loc_10153EF  +
push ebx  +
push ebx  +
push 100000h  +
push dword ptr [ebp+10h]  +
push dword ptr [esi+128h]  +
push dword ptr [esi+108h]  +
push dword ptr [ebp+0Ch]  +
call edi  +
test eax eax +
jz loc_10153EF  +
push ebx  +
push ebx  +
push 1F0001h  +
push dword ptr [ebp+18h]  +
push dword ptr [esi+128h]  +
push dword ptr [esi+10Ch]  +
push dword ptr [ebp+0Ch]  +
call edi  +
test eax eax +
jz loc_10153EF  +
push ebx  +
push ebx  +
push 6  +
push dword ptr [ebp+1Ch]  +
push dword ptr [esi+128h]  +
push dword ptr [esi+110h]  +
push dword ptr [ebp+0Ch]  +
call edi  +
test eax eax +
mov edi 80004005h +
jz loc_1006329  +
mov edi [ebp-4] +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov eax 80004003h +
jmp loc_100632D  +
***
mov edi edi +
push ebx  +
push esi  +
xor eax eax +
push edi  +
mov esi ecx +
inc eax  +
xor edi edi +
cmp [esi+80h] edi +
mov ebx eax +
jz loc_100873E  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax offset byte_10233CD +
call sub_10014DD  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push dword ptr [ebp+10h]  +
add eax 4 +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10043F1  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov eax offset byte_10233A1 +
call sub_10014DD  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push dword ptr [ebp+0Ch]  +
add eax 4 +
push eax  +
call sub_10044D3  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jz loc_1016BC9  +
cmp dword ptr [ecx+14h] 0 +
jnz loc_1006429  +
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+14h] eax +
mov [ecx+14h] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
mov eax [edi+4] +
cmp esi [eax+4] +
jz loc_10058D3  +
jmp loc_10058C6  +
***
inc dword_1027898  +
jmp loc_1004B0F  +
***
lea esi [eax+130h] +
jmp loc_1004FDA  +
***
cmp esi [eax] +
jz loc_1016C0B  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1006459  +
jmp loc_1006402  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_1027000 +
jnz loc_101081F  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jz loc_1010827  +
mov ecx [edx+4] +
cmp edx [ecx] +
jz loc_1015364  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1017DC2  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_1006544  +
push dword ptr [ebp+8]  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
add eax 0FFFFFFE0h +
push offset off_100422C  +
push eax  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+14h] +
test edx edx +
mov eax 80004003h +
jz loc_10065D2  +
and dword ptr [edx] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1017DB1  +
mov eax [ebp+8] +
mov ecx [eax+0B4h] +
test ecx ecx +
jnz loc_1017DBB  +
push edx  +
push dword ptr [ebp+10h]  +
add eax 44h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1017388  +
mov ecx [ebp+8] +
mov ecx [ecx+0ACh] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax offset byte_1023375 +
call sub_10014DD  +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
xor edi edi +
cmp esi edi +
mov [ebp-10h] esp +
mov [ebp-4] edi +
jz loc_101682A  +
mov ebx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
add ebx 4 +
push ebx  +
mov [esi] edi +
mov [ebp-14h] edi +
mov [ebp-18h] edi +
call sub_10044D3  +
cmp eax edi +
jl loc_10066E7  +
mov [ebp+8] edi +
mov eax [ebp+8] +
cmp eax [ebp-14h] +
push esi  +
jnb loc_101684B  +
push eax  +
push ebx  +
call sub_10043F1  +
cmp eax edi +
jl loc_10066D9  +
mov eax [esi] +
cmp eax edi +
jz loc_10066D9  +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax edi +
mov eax [esi] +
mov ecx [eax] +
jl loc_10066E1  +
lea edx [ebp+0Ch] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
cmp eax edi +
jl loc_1016834  +
test byte ptr [ebp-18h] 1 +
jz loc_10066B0  +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
push offset aScreen  +
push dword ptr [ebp+0Ch]  +
call ds:wcscmp  +
test eax eax +
pop ecx  +
pop ecx  +
jnz loc_101683D  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp+0Ch]  +
call ds:CoTaskMemFree  +
inc dword ptr [ebp+8]  +
jmp loc_1006657  +
***
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10066D9  +
***
mov eax 80004005h +
jmp loc_100669F  +
***
mov eax offset byte_1023CB9 +
call sub_10014DD  +
sub esp 38h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_1009143  +
call ds:GetCurrentThreadId  +
push 1  +
mov esi 80000002h +
push esi  +
mov ecx ebx +
mov dword_102777C eax +
call sub_1007442  +
xor edi edi +
push edi  +
push 80000001h  +
mov ecx ebx +
call sub_1007442  +
cmp eax edi +
jl loc_1017142  +
push 80h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:SetPriorityClass  +
mov esi ds:GetCurrentThread +
push 2  +
call esi  +
push eax  +
call ds:SetThreadPriority  +
push edi  +
push 2  +
call ds:SetProcessShutdownParameters  +
push offset Name  +
push edi  +
push 100000h  +
call ds:OpenEventW  +
push 202h  +
push offset unk_102D5B0  +
mov ecx ebx +
mov dword_102D228 eax +
call sub_100C1A0  +
mov eax offset dword_102D234 +
mov [eax-4] edi +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+8] edi +
mov [eax+0Ch] edi +
mov [eax+10h] edi +
mov [eax+14h] edi +
add eax 1Ch +
cmp eax offset unk_102D5B4 +
jl loc_1006793  +
call sub_1002CAC  +
mov eax dword_102777C +
mov dword_102D230 eax +
call esi  +
mov dword_102D234 eax +
mov dword_102D238 edi +
mov dword_102D23C edi +
mov dword_102D240 edi +
mov dword_102D244 edi +
mov dword_102D248 edi +
call sub_1002CC8  +
push edi  +
push edi  +
call ds:CoInitializeEx  +
mov [ebp-28h] edi +
mov [ebp-24h] edi +
mov [ebp-20h] edi +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
push 1  +
push edi  +
lea ecx [ebp-28h] +
mov [ebp-4] edi +
call sub_1010351  +
push edi  +
push edi  +
push edi  +
push 3  +
push 4  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push dword ptr [ebp-28h]  +
call ds:CoInitializeSecurity  +
push 1  +
push 4  +
push offset unk_1027098  +
call ds:AtlModuleRegisterClassObjects  +
lea eax [ebp-14h] +
push eax  +
push edi  +
push edi  +
push offset loc_100C038  +
push edi  +
push edi  +
call ds:_beginthreadex  +
mov esi ds:GetMessageW +
add esp 18h +
mov [ebx+6F8h] eax +
push edi  +
push edi  +
lea eax [ebp-44h] +
push edi  +
push eax  +
call esi  +
test eax eax +
jz loc_1017164  +
lea eax [ebp-44h] +
push eax  +
call ds:DispatchMessageW  +
jmp loc_1006854  +
***
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push eax  +
call sub_10068BF  +
jmp loc_100229D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
cmp ecx 8000h +
jz loc_10068FF  +
cmp ecx 8001h +
jz loc_10068F1  +
mov eax 8002h +
cmp ecx eax +
jz loc_10068FF  +
ja loc_1016AC5  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax+4] 6 +
jnz loc_10068E9  +
jmp loc_1016AD6  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax+4] 5 +
jnz loc_10068E9  +
jmp loc_1016AE5  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1006998 +
mov byte ptr [ecx+8] 0 +
call sub_100C297  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1010D33  +
mov dword ptr [esi] offset off_10069E8 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100330F  +
mov dword ptr [esi] offset off_1006A38 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10168DE  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+10h] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1006B15  +
mov dword ptr [esi] offset off_1006ADC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1006B30 +
mov byte ptr [ecx+8] 0 +
call sub_100C21A  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1015B6B  +
shl eax 2 +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jbe loc_1006BAB  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_10025EC  +
add [ebp+arg_0] 4 +
dec esi  +
jnz loc_1006B99  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jnz loc_1006D9A  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
mov ebx [edi+4] +
push 1  +
push esi  +
call sub_1006C06  +
mov eax [edi+4] +
sub esi ebx +
sar esi 2 +
pop edi  +
lea eax [eax+esi*4] +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
sub ecx eax +
push edi  +
mov edi [ebp+arg_4] +
sar ecx 2 +
cmp ecx edi +
jnb loc_1007F4A  +
mov ecx esi +
call sub_1006CB6  +
cmp edi eax +
jb loc_1007E15  +
mov [ebp+arg_4] edi +
mov ecx esi +
call sub_1006CB6  +
mov ebx eax +
add ebx [ebp+arg_4] +
push 0  +
push ebx  +
call sub_1006B69  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
push dword ptr [esi+4]  +
mov [ebp+arg_4] eax +
call sub_1006BB5  +
push [ebp+arg_8]  +
mov ecx esi +
push edi  +
push eax  +
mov [ebp+var_4] eax +
call sub_1006B8C  +
mov eax [ebp+var_4] +
lea eax [eax+edi*4] +
push eax  +
push dword ptr [esi+8]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_1006BB5  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
mov eax [ebp+arg_4] +
pop ecx  +
lea eax [eax+ebx*4] +
mov ecx esi +
mov [esi+0Ch] eax +
call sub_1006CB6  +
mov ecx eax +
mov eax [ebp+arg_4] +
add ecx edi +
lea ecx [eax+ecx*4] +
mov [esi+8] ecx +
mov [esi+4] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_1006CC6  +
mov eax [ecx+8] +
sub eax edx +
sar eax 2 +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
xor eax eax +
pop ecx  +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+188h] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 4 +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jz loc_1006D2B  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push offset Addend  +
call edi  +
push offset unk_102702C  +
call sub_1001D3C  +
jmp loc_1006D1A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+188h] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+4] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jz loc_1016CD2  +
cmp edi 1 +
jz loc_1006D84  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push offset unk_102702C  +
call sub_1001D15  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
jmp loc_1006D7B  +
***
push esi  +
push [ebp+arg_8]  +
call sub_10025EC  +
add [ebp+arg_8] 4 +
add esi 4 +
jmp loc_1006BBE  +
***
mov eax [ecx+138h] +
sub eax [ecx+130h] +
retn   +
***
mov eax [ecx+13Ch] +
sub eax [ecx+134h] +
retn   +
***
lea eax [ebx+130h] +
lea edi [ebx+94h] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+0A4h] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
jmp loc_1007130  +
cmp eax esi +
jnz loc_10070C0  +
jmp loc_10070B4  +
cmp ecx esi +
jnz loc_100716D  +
jmp loc_1007165  +
***
mov eax offset byte_1023EC3 +
call sub_10014DD  +
sub esp 50h +
push ebx  +
push esi  +
xor esi esi +
cmp [ebp+8] esi +
push edi  +
mov ebx ecx +
jnz loc_101785D  +
mov eax [ebx+22Ch] +
cmp eax esi +
jnz loc_1017898  +
cmp [ebx+230h] esi +
jnz loc_10178A4  +
mov [ebp+8] esi +
mov ecx ebx +
mov [ebx+23Ch] esi +
call sub_1007CDC  +
push 37h  +
pop ecx  +
lea edx [ebx+150h] +
push edx  +
xor eax eax +
mov edi edx +
push 0FFFFFFFFh  +
stos   +
push esi  +
mov word ptr [ebx+194h] 0DCh +
call ds:EnumDisplaySettingsW  +
push 17h  +
call ds:GetSystemMetrics  +
mov ecx ebx +
mov [ebx+23Ch] eax +
call sub_1010E24  +
mov edx eax +
call sub_1010E43  +
xor ecx ecx +
cmp eax edx +
mov eax [ebx] +
setnle cl  +
mov [ebx+22Ch] ecx +
lea ecx [ebp-1Ch] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+4]  +
cmp dword ptr [ebp-1Ch] 3 +
jz loc_100704C  +
mov eax [ebx+9Ch] +
sub eax [ebx+94h] +
mov edi [ebx+0A0h] +
sub edi [ebx+98h] +
xor ecx ecx +
cmp edi eax +
setnle cl  +
mov eax ecx +
mov ecx [ebx+22Ch] +
cmp ecx esi +
mov [ebx+230h] eax +
jnz loc_10178B0  +
cmp eax esi +
jnz loc_10178B8  +
xor eax eax +
test byte ptr [ebx+0B4h] 1 +
jz loc_1007189  +
cmp [ebp+8] esi +
jnz loc_10178C0  +
cmp eax esi +
jnz loc_10178C8  +
cmp dword ptr [ebx+22Ch] 1 +
jz loc_101796F  +
mov eax [ebx+128h] +
mov [ebx+11Ch] eax +
mov [ebp-10h] esi +
mov [ebp-28h] esi +
mov [ebp-24h] esi +
mov [ebp-20h] esi +
push ebx  +
lea ecx [ebp-18h] +
mov [ebp-4] esi +
call sub_10016B1  +
lea eax [ebx+254h] +
mov byte ptr [ebp-4] 1 +
mov [ebp+8] eax +
mov dword ptr [ebp-14h] 3 +
mov eax [ebp+8] +
lea esi [eax-10h] +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
mov eax [ebp-34h] +
lea edi [ebp-4Ch] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp-44h] eax +
jz loc_1007228  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
call sub_100174E  +
mov eax [ebp-10h] +
test eax eax +
jz loc_1007215  +
add eax 8 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp-24h]  +
lea ecx [ebp-2Ch] +
call sub_1006BD4  +
push 0  +
lea eax [ebp-5Ch] +
push eax  +
lea ecx [ebp-3Ch] +
call sub_1010D89  +
mov esi [ebp+8] +
jmp loc_10071DD  +
add dword ptr [ebp+8] 30h +
dec dword ptr [ebp-14h]  +
jnz loc_10071CE  +
mov eax [ebp-18h] +
add eax 2D0h +
push eax  +
mov byte ptr [ebp-4] 0 +
call ds:LeaveCriticalSection  +
mov edi [ebp-28h] +
cmp [ebp-24h] edi +
jz loc_1007269  +
mov eax [edi] +
lea ecx [ebp-5Ch] +
lea esi [eax+8] +
mov eax [esi] +
push ecx  +
push esi  +
call dword ptr [eax+7Ch]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
add edi 4 +
cmp edi [ebp-24h] +
jnz loc_100724C  +
lea ecx [ebp-2Ch] +
call sub_1006CCE  +
mov eax [ebx+0B0h] +
sub eax [ebx+0A8h] +
mov edi [ebx+0ACh] +
sub edi [ebx+0A4h] +
mov ecx ebx +
mov [ebp-14h] eax +
call sub_1010E24  +
mov [ebp-10h] eax +
call sub_1010E43  +
mov esi [ebx+0C0h] +
mov [ebp+8] eax +
lea eax [esi+10h] +
push eax  +
call sub_10073FB  +
add esi 30h +
push esi  +
mov ecx ebx +
mov [ebp-18h] eax +
mov [ebx+388h] eax +
call sub_10073FB  +
mov esi [ebp-18h] +
test esi esi +
mov ecx eax +
mov [ebx+38Ch] ecx +
jz loc_1007346  +
test ecx ecx +
jz loc_1007346  +
mov eax dword_102713C +
imul eax [ebp-10h] +
xor edx edx +
div  esi +
xor edx edx +
mov [ebx+3E8h] eax +
mov eax dword_102713C +
imul eax [ebp+8] +
div  ecx +
xor edx edx +
mov [ebx+3ECh] eax +
mov eax dword_1027140 +
imul eax [ebp-10h] +
div  esi +
xor edx edx +
mov [ebx+3F0h] eax +
mov eax dword_1027140 +
imul eax [ebp+8] +
div  ecx +
xor edx edx +
mov [ebx+3F4h] eax +
mov eax dword_1027148 +
imul eax [ebp-10h] +
div  esi +
xor edx edx +
mov [ebx+3F8h] eax +
mov eax dword_1027148 +
imul eax [ebp+8] +
div  ecx +
mov [ebx+3FCh] eax +
mov eax ecx +
imul eax ecx +
mov ecx esi +
imul ecx esi +
add eax ecx +
mov [ebp-18h] eax +
fild  dword ptr [ebp-18h] +
fsqrt   +
call _ftol  +
mov ecx [ebp-10h] +
push eax  +
imul ecx ecx +
push nNumerator  +
mov [ebp-18h] eax +
mov eax [ebp+8] +
imul eax eax +
add eax ecx +
test eax eax +
mov [ebp+8] eax +
fild  dword ptr [ebp+8] +
jl loc_101797A  +
fsqrt   +
call _ftol  +
mov esi ds:MulDiv +
push eax  +
call esi  +
mov [ebx+400h] eax +
mov eax [ebp-14h] +
mov ecx edi +
imul eax eax +
imul ecx edi +
add eax ecx +
test eax eax +
mov [ebp+8] eax +
fild  dword ptr [ebp+8] +
jl loc_1017985  +
fsqrt   +
call _ftol  +
push dword ptr [ebp-18h]  +
mov edi eax +
push dword_102714C  +
push edi  +
call esi  +
push dword ptr [ebp-18h]  +
mov [ebx+418h] eax +
push dword_1027138  +
push edi  +
call esi  +
mov [ebx+41Ch] eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
dec ecx  +
jnz loc_1007426  +
mov ecx [eax+4] +
sub ecx [eax] +
imul ecx ecx +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
fdiv  dword ptr [eax+0Ch] +
call _ftol  +
pop ebp  +
retn 4  +
dec ecx  +
jnz loc_10173C3  +
mov ecx [eax+4] +
sub ecx [eax] +
imul ecx ecx +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
jmp loc_100741A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push offset SubKey  +
push [ebp+hKey]  +
mov edi 80004005h +
mov esi ecx +
mov [ebp+var_4] edi +
call ds:RegOpenKeyW  +
test eax eax +
jnz loc_1016F86  +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_4] bl +
jnz sub_100FBD7  +
push dword ptr [esi+100h]  +
lea eax [esi+9Ch] +
push dword ptr [esi+108h]  +
push dword ptr [esi+104h]  +
push eax  +
push offset aShakeangle  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+10Ch]  +
lea eax [esi+0A0h] +
push dword ptr [esi+114h]  +
push dword ptr [esi+110h]  +
push eax  +
push offset aShakerate  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+160h]  +
lea eax [esi+0BCh] +
push dword ptr [esi+168h]  +
push dword ptr [esi+164h]  +
push eax  +
push offset aShakesize  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+16Ch]  +
lea eax [esi+0C0h] +
push dword ptr [esi+174h]  +
push dword ptr [esi+170h]  +
push eax  +
push offset aShakecount  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+178h]  +
lea eax [esi+0C4h] +
push dword ptr [esi+180h]  +
push dword ptr [esi+17Ch]  +
push eax  +
push offset aShaketime  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+148h]  +
lea eax [esi+0B4h] +
push dword ptr [esi+150h]  +
push dword ptr [esi+14Ch]  +
push eax  +
push offset aHoverlimit  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+118h]  +
lea eax [esi+0A4h] +
push dword ptr [esi+120h]  +
push dword ptr [esi+11Ch]  +
push eax  +
push offset aSplash  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+124h]  +
lea eax [esi+0A8h] +
push dword ptr [esi+12Ch]  +
push dword ptr [esi+128h]  +
push eax  +
push offset aCancel  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+130h]  +
lea eax [esi+0ACh] +
push dword ptr [esi+138h]  +
push dword ptr [esi+134h]  +
push eax  +
push offset aMove  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+13Ch]  +
lea eax [esi+0B0h] +
push dword ptr [esi+144h]  +
push dword ptr [esi+140h]  +
push eax  +
push offset aDbldist  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+154h]  +
lea eax [esi+0B8h] +
push dword ptr [esi+15Ch]  +
push dword ptr [esi+158h]  +
push eax  +
push offset aHovercount  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+184h]  +
lea eax [esi+0C8h] +
push dword ptr [esi+18Ch]  +
push dword ptr [esi+188h]  +
push eax  +
push offset aDbltime  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push 1Eh  +
push 64h  +
push ebx  +
lea eax [esi+0E4h] +
push eax  +
push offset aLagtime  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
call ds:GetDoubleClickTime  +
mov edi ds:GetSystemMetrics +
lea ecx [esi+0E8h] +
mov [ecx] eax +
mov edx dword_102717C +
add eax edx +
push 24h  +
mov [ecx] eax +
call edi  +
mov ebx eax +
push 4Eh  +
shl ebx 10h +
call edi  +
mov ecx eax +
mov eax ebx +
cdq   +
idiv  ecx +
push 25h  +
mov [esi+0ECh] eax +
call edi  +
mov ebx eax +
push 4Fh  +
shl ebx 10h +
call edi  +
mov ecx eax +
mov eax ebx +
cdq   +
idiv  ecx +
push dword ptr [esi+190h]  +
push dword ptr [esi+198h]  +
push dword ptr [esi+194h]  +
mov [esi+0F0h] eax +
lea eax [esi+0CCh] +
push eax  +
push offset aTaptime  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+19Ch]  +
lea eax [esi+0D0h] +
push dword ptr [esi+1A4h]  +
push dword ptr [esi+1A0h]  +
push eax  +
push offset aWaittime  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+1A8h]  +
lea eax [esi+0D4h] +
push dword ptr [esi+1B0h]  +
push dword ptr [esi+1ACh]  +
push eax  +
push offset aOpentime  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+1B4h]  +
lea eax [esi+0D8h] +
push dword ptr [esi+1BCh]  +
push dword ptr [esi+1B8h]  +
push eax  +
push offset aHoldtime  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push dword ptr [esi+1C0h]  +
lea eax [esi+0DCh] +
push dword ptr [esi+1C8h]  +
push dword ptr [esi+1C4h]  +
push eax  +
push offset aClosetime  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
xor edi edi +
inc edi  +
push edi  +
push 2  +
push edi  +
lea ebx [esi+2D4h] +
push ebx  +
push offset aV2_singleclick  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jge loc_100781D  +
mov [ebx] edi +
cmp dword ptr [ebx] 2 +
jz loc_1016F8D  +
push edi  +
push 2  +
push edi  +
lea ebx [esi+2D8h] +
push ebx  +
push offset aV2_doubleclick  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jge loc_1007844  +
mov [ebx] edi +
push edi  +
push 2  +
push edi  +
lea ebx [esi+2DCh] +
push ebx  +
push offset aV2_holdmode  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jge loc_1007862  +
mov [ebx] edi +
cmp dword ptr [ebx] 2 +
jz loc_1016FA6  +
push 2  +
push 3  +
push 2  +
lea eax [ebp+Data] +
push eax  +
push offset aHoldmode  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
xor eax eax +
cmp dword ptr [ebp+Data] 3 +
push edi  +
setnz al  +
push edi  +
xor ebx ebx +
push ebx  +
mov [esi+90h] eax +
lea eax [esi+94h] +
push eax  +
push offset aShakeenable  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push edi  +
push edi  +
push ebx  +
lea eax [esi+8Ch] +
push eax  +
push offset aEraseenable  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push edi  +
push edi  +
push ebx  +
lea eax [esi+98h] +
push eax  +
push offset aRightmaskenabl  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov ecx esi +
call sub_10079FB  +
mov eax [esi+1E0h] +
mov [esi+1E8h] eax +
mov eax [esi+1E4h] +
mov [esi+1ECh] eax +
mov eax [esi+20Ch] +
mov [esi+214h] eax +
mov eax [esi+210h] +
mov [esi+218h] eax +
mov eax [esi+238h] +
mov [esi+240h] eax +
mov eax [esi+23Ch] +
mov [esi+244h] eax +
mov eax [esi+290h] +
mov [esi+298h] eax +
mov eax [esi+294h] +
push ebx  +
mov [esi+29Ch] eax +
add esi 84h +
push esi  +
push ebx  +
push 1Bh  +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_1016FEB  +
mov [ebp+var_4] ebx +
mov esi [ebp+var_4] +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi [ebp+lpData] +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10079E8  +
cmp [ebp+lpData] 4 +
jnz loc_10079EF  +
cmp [ebp+cbData] 4 +
jnz loc_10079EF  +
mov eax [edi] +
cmp eax [ebp+arg_C] +
jb loc_101577F  +
cmp eax [ebp+arg_10] +
ja loc_101577F  +
xor eax eax +
pop edi  +
leave   +
retn 18h  +
or eax 80070000h +
jmp loc_10079E3  +
mov eax 8007065Dh +
jmp loc_10079E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
push esi  +
push edi  +
push 28h  +
pop eax  +
push 30h  +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
pop eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
push 0  +
lea eax [ebp+var_68] +
push eax  +
mov esi ecx +
push 16h  +
lea ecx [esi+1CCh] +
lea edi [ebp+var_8] +
lea eax [ebp+var_10] +
mov [ebp+var_68] 0DDh +
mov [ebp+var_64] 0DEh +
mov [ebp+var_60] 0DFh +
mov [ebp+var_5C] 0E0h +
mov [ebp+var_58] 0E1h +
mov [ebp+var_54] 0E2h +
mov [ebp+var_50] 0E3h +
mov [ebp+var_4C] 0E4h +
mov [ebp+var_48] 0E5h +
mov [ebp+var_44] 0E6h +
mov [ebp+var_40] 0E7h +
mov [ebp+var_3C] 0E8h +
mov [ebp+var_38] 0E9h +
mov [ebp+var_34] 0EAh +
mov [ebp+var_30] 0EBh +
mov [ebp+var_2C] 0ECh +
mov [ebp+var_28] 0EDh +
mov [ebp+var_24] 0EEh +
mov [ebp+var_20] 0EFh +
mov [ebp+var_1C] 0F0h +
mov [ebp+var_18] 0F1h +
mov [ebp+var_14] 0F2h +
call sub_1007C37  +
test eax eax +
jl loc_1007C2B  +
push 0  +
lea eax [ebp+var_68] +
push eax  +
push 16h  +
lea ecx [esi+1F8h] +
lea eax [ebp+var_10] +
call sub_1007C37  +
test eax eax +
jl loc_1007C2B  +
push 0  +
lea eax [ebp+var_14] +
push eax  +
push 1  +
lea ecx [esi+224h] +
lea eax [ebp+var_10] +
call sub_1007C37  +
test eax eax +
jl loc_1007C2B  +
push 0  +
lea eax [ebp+var_68] +
push eax  +
push 16h  +
lea ecx [esi+27Ch] +
lea eax [ebp+var_10] +
mov [ebp+var_14] 0DDh +
mov [ebp+var_18] 0DEh +
mov [ebp+var_1C] 0DFh +
mov [ebp+var_20] 0E0h +
mov [ebp+var_24] 0E1h +
mov [ebp+var_28] 0E2h +
mov [ebp+var_2C] 0E3h +
mov [ebp+var_30] 0E4h +
mov [ebp+var_34] 0E5h +
mov [ebp+var_38] 0E6h +
mov [ebp+var_3C] 0E7h +
mov [ebp+var_40] 0E8h +
mov [ebp+var_44] 0E9h +
mov [ebp+var_48] 0EAh +
mov [ebp+var_4C] 0EBh +
mov [ebp+var_50] 0ECh +
mov [ebp+var_54] 0EDh +
mov [ebp+var_58] 0EEh +
mov [ebp+var_5C] 0EFh +
mov [ebp+var_60] 0F0h +
mov [ebp+var_64] 0F1h +
mov [ebp+var_68] 0F2h +
call sub_1007C37  +
test eax eax +
jl loc_1007C2B  +
push 20h  +
mov eax 0CAh +
mov [ebp+var_64] eax +
mov [ebp+var_5C] eax +
pop eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
push 0  +
mov ecx 0CBh +
lea eax [ebp+var_68] +
push eax  +
mov [ebp+var_68] ecx +
mov [ebp+var_60] ecx +
push 4  +
lea ecx [esi+250h] +
lea eax [ebp+var_10] +
mov [ebp+var_10] 14h +
mov [ebp+var_C] 10h +
call sub_1007C37  +
test eax eax +
jl loc_1007C2B  +
push 0FFFFFFFFh  +
lea eax [ebp+var_68] +
push eax  +
push 4  +
lea ecx [esi+2A8h] +
lea eax [ebp+var_10] +
call sub_1007C37  +
test eax eax +
jl loc_1007C2B  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn   +
mov eax 80004005h +
jmp loc_1007C27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
mov ebx eax +
jz loc_1007C4D  +
call sub_1007DE5  +
mov eax [ebp+arg_0] +
shl eax 3 +
push eax  +
call ds:CoTaskMemAlloc  +
test eax eax +
mov [esi+8] eax +
jz loc_1016F46  +
mov ecx [ebp+arg_0] +
mov [esi+4] ecx +
mov eax [ebx] +
mov [esi+14h] eax +
mov eax [ebx+4] +
mov [esi+18h] eax +
mov eax [edi] +
mov [esi+0Ch] eax +
mov eax [edi+4] +
mov [esi+10h] eax +
mov eax [ebp+arg_8] +
mov [esi+24h] eax +
xor eax eax +
test ecx ecx +
mov [ebp+arg_8] eax +
jbe loc_1007CCF  +
mov ecx [ebp+arg_4] +
mov ebx eax +
lea eax [ecx+eax*4] +
mov edx [eax] +
mov ecx [esi+8] +
push 0  +
shl ebx 3 +
mov [ebx+ecx] edx +
push dword ptr [edi+4]  +
movzx eax word ptr [eax] +
push dword ptr [edi]  +
push 1  +
push eax  +
push dword_102709C  +
call ds:LoadImageW  +
mov ecx [esi+8] +
mov [ebx+ecx+4] eax +
mov eax [ebp+arg_8] +
inc eax  +
cmp eax [ebp+arg_0] +
mov [ebp+arg_8] eax +
jb loc_1007C90  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
test byte ptr [esi+0B4h] 1 +
push edi  +
jz loc_1007D03  +
push esi  +
push offset fnEnum  +
xor edi edi +
push edi  +
push edi  +
call ds:EnumDisplayMonitors  +
test eax eax +
jz loc_10174D8  +
mov edi ds:GetSystemMetrics +
push 4Ch  +
call edi  +
push 4Dh  +
mov [esi+130h] eax +
call edi  +
push 4Eh  +
mov [esi+134h] eax +
call edi  +
add eax [esi+130h] +
push 4Fh  +
mov [esi+138h] eax +
call edi  +
add eax [esi+134h] +
pop edi  +
mov [esi+13Ch] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_1027090 +
push esi  +
mov esi [ebp+arg_C] +
lea ecx [ebp+mi] +
mov [ebp+var_4] eax +
mov eax [ebp+hMonitor] +
push ecx  +
push eax  +
mov [ebp+mi.cbSize] 68h +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_1007D96  +
lea eax [ebp+var_44] +
push offset a_Display1  +
push eax  +
call ds:wcscmp  +
test eax eax +
pop ecx  +
pop ecx  +
jnz loc_1007D96  +
push edi  +
lea edi [esi+140h] +
mov esi [ebp+arg_8] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
mov ecx [ebp+var_4] +
xor eax eax +
inc eax  +
pop esi  +
call sub_1007DC7  +
leave   +
retn 10h  +
***
cmp ecx dword_1027090 +
jnz loc_1022131  +
test ecx 0FFFF0000h +
jnz loc_1022131  +
retn   +
***
cmp dword ptr [esi+8] 0 +
jz locret_1007E14  +
push edi  +
xor edi edi +
cmp [esi+4] edi +
jbe loc_1007E06  +
mov eax [esi+8] +
push dword ptr [eax+edi*8+4]  +
call ds:DestroyIcon  +
inc edi  +
cmp edi [esi+4] +
jb loc_1007DF3  +
push dword ptr [esi+8]  +
call ds:CoTaskMemFree  +
and dword ptr [esi+8] 0 +
pop edi  +
retn   +
***
mov ecx esi +
call sub_1006CB6  +
mov [ebp+arg_4] eax +
jmp loc_1006C39  +
test edi edi +
jbe loc_1006CAA  +
jmp loc_10175E1  +
***
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
mov [ebp+1Ch] esi +
call sub_1007E50  +
jmp loc_100229D  +
***
xor eax eax +
inc eax  +
retn 10h  +
***
mov eax offset byte_1023305 +
call sub_10014DD  +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov esi ecx +
push 80000001h  +
mov ecx offset unk_1027098 +
mov [ebp-18h] edi +
call sub_1007442  +
lea eax [ebp-18h] +
push eax  +
lea ebx [esi+24h] +
push ebx  +
call sub_1006AA5  +
cmp [ebp-18h] edi +
mov [ebp-10h] edi +
jle loc_1007EEA  +
mov [ebp-14h] edi +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-10h]  +
mov [ebp-4] edi +
push ebx  +
call sub_1007F03  +
cmp eax edi +
jl loc_1016810  +
mov esi [ebp-14h] +
mov ecx esi +
neg ecx  +
lea eax [esi-8] +
sbb ecx ecx +
and ecx eax +
jz loc_1007ED1  +
push dword ptr [ebp+8]  +
call sub_1007089  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi edi +
jz loc_1007EDF  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
cmp eax [ebp-18h] +
jl loc_1007E9E  +
mov ecx [ebp-0Ch] +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_101666C  +
mov eax [ebp+arg_4] +
test eax eax +
jl loc_1007F43  +
mov ecx [ebp+arg_0] +
cmp eax [ecx+10h] +
jge loc_1007F43  +
push esi  +
inc eax  +
push eax  +
push ecx  +
call sub_10033AC  +
cmp dword ptr [esi] 0 +
jz loc_1007F3C  +
test eax eax +
jl loc_1007F3C  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax 80004005h +
jmp loc_1007F37  +
mov eax 80040214h +
jmp loc_1007F37  +
***
mov ebx [ebp+arg_0] +
mov ecx eax +
sub ecx ebx +
sar ecx 2 +
cmp ecx edi +
jnb loc_1007E24  +
mov ecx edi +
shl ecx 2 +
mov [ebp+arg_0] ecx +
add ecx ebx +
push ecx  +
push eax  +
push ebx  +
mov ecx esi +
call sub_1006BB5  +
mov eax [esi+8] +
push [ebp+arg_8]  +
mov ecx eax +
sub ecx ebx +
sar ecx 2 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_1006B8C  +
push [ebp+arg_8]  +
push dword ptr [esi+8]  +
push ebx  +
call sub_1007FA4  +
mov eax [ebp+arg_0] +
add [esi+8] eax +
jmp loc_1006CAA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_10174FC  +
pop ebp  +
retn 0Ch  +
***
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
jmp loc_10118A0  +
***
mov ebx ds:CreateEventW +
push edi  +
push edi  +
push edi  +
push edi  +
call ebx  +
cmp eax edi +
mov [esi+78h] eax +
jz loc_1008005  +
push edi  +
push edi  +
push edi  +
push edi  +
call ebx  +
cmp eax edi +
mov [esi+7Ch] eax +
jz loc_1008005  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push esi  +
push offset loc_1012E2D  +
push edi  +
push edi  +
call ds:_beginthreadex  +
add esp 18h +
cmp eax edi +
mov [esi+74h] eax +
jnz loc_1013230  +
mov ecx esi +
call sub_1020BE2  +
jmp loc_1017A40  +
***
push [ebp+arg_4]  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1008034  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_10127EA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_1027050 +
mov [ebx] eax +
mov eax dword_1027050 +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_10034D9  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jnz loc_100811B  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_100815E  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jnz loc_100814C  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
cmp esi 2CAh +
jnz loc_100200B  +
mov ecx [ebp+arg_8] +
movzx esi cx +
shr ecx 10h +
mov edi ecx +
mov ecx [ebx+34h] +
shr ecx 4 +
not ecx  +
test cl 1 +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
jz loc_10080E5  +
sub esi [ebx+38h] +
sub edi [ebx+3Ch] +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
cmp [ebp+arg_C] edx +
mov [ebp+var_4] edx +
setnz cl  +
sub esp 14h +
push 5  +
inc cl  +
mov [ebp+var_8] cl +
pop ecx  +
mov edi esp +
push 1Dh  +
push [ebp+arg_4]  +
mov [ebp+var_12] dx +
push dword ptr [ebx+4]  +
mov edx [eax] +
lea esi [ebp-14h] +
mov [ebp+var_14] 0 +
push eax  +
movs   +
call dword ptr [edx+2Ch]  +
jmp loc_100200B  +
mov eax [ebp+arg_4] +
cmp eax dword_1027050 +
jnz loc_1008072  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_1008072  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1008088  +
jmp loc_1008085  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jz loc_101752D  +
jmp loc_1008096  +
cmp esi [eax] +
jnz loc_1008088  +
jmp loc_1017526  +
***
push eax  +
jmp loc_1008014  +
***
and eax 2 +
push eax  +
movzx eax word ptr [ebp+var_1C] +
mov [ecx] ebx +
movzx ecx word ptr [ebp+var_20] +
shl eax 10h +
or eax ecx +
push eax  +
push ebx  +
push 2CAh  +
mov ecx esi +
call sub_10081A3  +
jmp loc_1012240  +
push 14h  +
jmp loc_1013FAA  +
***
mov eax offset byte_1023E7B +
call ds:GetDesktopWindow  +
mov ebx eax +
push ebx  +
call ds:GetDC  +
mov edi eax +
push edi  +
call ds:CreateCompatibleDC  +
test eax eax +
mov [esi+78h] eax +
jz loc_1008307  +
mov eax 80h +
push eax  +
push eax  +
push edi  +
call ds:CreateCompatibleBitmap  +
test eax eax +
mov [esi+74h] eax +
jz loc_10164A2  +
push eax  +
push dword ptr [esi+78h]  +
call ds:SelectObject  +
push edi  +
push ebx  +
call ds:ReleaseDC  +
mov eax [esi+78h] +
pop edi  +
pop ebx  +
jmp loc_1012A78  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1014E12  +
push esi  +
mov esi [ebp+8] +
add esi 24h +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+3Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 4 +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jz loc_1008394  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push offset Addend  +
call edi  +
push offset unk_102702C  +
call sub_1001D3C  +
jmp loc_1008383  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
inc eax  +
push eax  +
push [ebp+arg_0]  +
call sub_10083CA  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jz loc_101587D  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+8] +
mov eax [esi] +
push edi  +
mov edi 80004005h +
mov [ebp+arg_0] eax +
dec [ebp+arg_4]  +
cmp eax esi +
jz loc_10083F8  +
cmp [ebp+arg_4] 0 +
jg loc_1008412  +
cmp eax esi +
jz loc_100840A  +
add eax 0Ch +
push eax  +
push [ebp+arg_8]  +
call sub_1003365  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
lea ecx [ebp+arg_0] +
call sub_1008424  +
mov eax [ebp+arg_0] +
jmp loc_10083EB  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_1027094 +
jz loc_10157AD  +
push eax  +
call sub_1008452  +
mov [esi] eax +
pop esi  +
retn   +
***
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_1008442  +
jmp loc_1008440  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027094 +
mov ecx [eax] +
cmp ecx edx +
jnz loc_100846A  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1008460  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
add eax 0FFFFFFF8h +
push offset off_1008494  +
push eax  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1014E08  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 34h +
call sub_1005FA9  +
pop ebp  +
retn 8  +
***
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jz loc_101546D  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_100850E  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_100413D  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_101548C  +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1006459  +
jmp loc_1003F60  +
***
mov eax offset byte_1022DC9 +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+10h] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jz loc_1015970  +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
add eax 4 +
push eax  +
call sub_10083AC  +
cmp eax 80070057h +
jz loc_101597A  +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
push eax  +
call sub_10085A2  +
jmp loc_1003E56  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027088 +
mov ecx [eax] +
cmp ecx edx +
jnz loc_10085BA  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_10085B0  +
***
lea eax [ebp-14h] +
push eax  +
lea ecx [ebx+238h] +
call sub_1002B84  +
jmp loc_1005D15  +
***
mov [ecx+4] eax +
jmp loc_1010816  +
***
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push eax  +
call sub_10085F9  +
jmp loc_100229D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
mov eax [ecx+58h] +
push esi  +
mov esi [ecx+5Ch] +
mov [ebp+arg_8] edx +
cmp esi eax +
jnz loc_1008626  +
lea eax [ebp+arg_8] +
add ecx 54h +
push eax  +
push dword ptr [ecx+8]  +
call sub_1006BD4  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
cmp [eax] edx +
jz loc_100861E  +
jmp loc_1016899  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
shl eax 2 +
push 0  +
push eax  +
call sub_100351E  +
mov [esi+24h] eax +
pop esi  +
retn   +
***
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1008660  +
mov [eax+4] ebx +
mov eax [edi+4] +
jmp loc_1005741  +
cmp esi [eax] +
jnz loc_1005744  +
jmp loc_101691D  +
***
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_101690D  +
push [ebp+arg_4]  +
jmp loc_10056B7  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_10056CD  +
***
mov ecx esi +
call sub_10086AA  +
mov eax [esi+1Ch] +
push [ebp+arg_0]  +
lea ecx [eax+4] +
mov [esi+1Ch] ecx +
push eax  +
jmp loc_1002BB6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
push 0  +
push 400h  +
mov ebx ecx +
call sub_1006B69  +
cmp dword ptr [ebx+2Ch] 0 +
mov esi eax +
mov [ebp+var_8] esi +
jnz loc_1015BF7  +
mov ecx ebx +
mov dword ptr [ebx+28h] 2 +
call sub_1008634  +
mov eax [ebx+24h] +
mov [eax+4] esi +
mov eax [ebx+24h] +
add eax 4 +
push eax  +
add esi 800h +
push esi  +
lea ecx [ebp+var_18] +
call sub_1008718  +
lea edi [ebx+4] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+14h] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov [eax] edx +
mov edx [ecx] +
add edx 1000h +
mov [eax+4] edx +
mov edx [ebp+arg_0] +
mov [eax+8] edx +
mov [eax+0Ch] ecx +
pop ebp  +
retn 8  +
***
push edi  +
push edi  +
push edi  +
push edi  +
call ds:CreateEventW  +
cmp eax edi +
mov [esi+80h] eax +
jz loc_10174D1  +
mov eax ebx +
jmp loc_1006358  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov [ecx+28h] eax +
mov eax [ebp+arg_C] +
push edi  +
push [ebp+arg_8]  +
mov [ecx+40h] eax +
lea edi [ecx+2Ch] +
movs   +
movs   +
movs   +
add ecx 3Ch +
movs   +
call sub_100CA96  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
or eax 80h +
mov [ebx+34h] eax +
jmp loc_1004ED7  +
mov eax [ebx+2Ch] +
lea edx [ebp+var_14] +
add eax 8 +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
cmp [ebp+arg_8] esi +
mov esi [ebp+arg_8] +
jz loc_10153AE  +
mov ecx [ebx+2Ch] +
add ecx 130h +
push ecx  +
lea ecx [ebp+var_14] +
push ecx  +
lea eax [ebx+38h] +
lea ecx [ebx+58h] +
mov edi eax +
push ecx  +
jmp loc_1004FE9  +
***
mov eax ebx +
mov dword_102789C eax +
mov [eax] edi +
mov eax dword_102789C +
xor ebx ebx +
mov [eax+8] edi +
jmp loc_1005476  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 25h +
jl loc_1015796  +
imul eax eax +
mov eax dword_1027C30[eax] +
push esi  +
mov esi dword_10277A0[eax*4] +
push edi  +
mov edi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1008CC5  +
cmp eax 2 +
jnb loc_1008CC5  +
mov eax dword_10278EC[eax*4] +
push esi  +
mov esi dword_10277A0[eax*4] +
push edi  +
mov edi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax 80040216h +
jmp loc_1008CC1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_102D1AC +
jnz loc_10157FD  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_1015805  +
mov [ecx+4] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1008D28  +
push [ebp+arg_4]  +
call sub_1004A79  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 10h  +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jz loc_1008D4E  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
dec eax  +
js loc_1008D80  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [eax+1] +
mov ecx esi +
call [ebp+arg_C]  +
add esi [ebp+arg_4] +
dec edi  +
jnz loc_1008D73  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102D1DC +
mov ecx [eax] +
cmp ecx edx +
jnz loc_1008DA1  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1008D97  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_1008DD0  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
add [ebp+arg_8] 10h +
mov esi eax +
movs   +
movs   +
movs   +
add eax 10h +
cmp eax [ebp+arg_4] +
movs   +
jnz loc_1008DB9  +
pop edi  +
pop esi  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1015B8C  +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jbe loc_1008E1E  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_10099DB  +
add [ebp+arg_0] 10h +
dec esi  +
jnz loc_1008E0C  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_100AAF7  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101117F  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1011128  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ds:ResetEvent +
push edi  +
mov edi ecx +
push dword ptr [edi+450h]  +
call esi  +
push dword ptr [edi+454h]  +
call esi  +
push dword ptr [edi+458h]  +
call esi  +
push dword ptr [edi+45Ch]  +
call esi  +
push dword ptr [edi+87Ch]  +
call esi  +
push dword ptr [edi+884h]  +
call esi  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push edi  +
push offset loc_1001D9F  +
push 0  +
push 0  +
call ds:_beginthreadex  +
add esp 18h +
test eax eax +
mov [edi+70h] eax +
jz loc_1016329  +
push dword ptr [edi+450h]  +
call ds:SetEvent  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push ecx  +
push offset unk_1027098  +
call ds:AtlModuleRegisterWndClassInfoW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
and dword ptr [esi+10h] 0 +
mov [esi] eax +
lea eax [esi+18h] +
push eax  +
mov dword ptr [esi+4] 1000h +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax dword_102704C +
lea ecx [eax-20h] +
neg eax  +
sbb eax eax +
and eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10164BE  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_102708C +
jnz loc_10164DF  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_10164E7  +
mov [ecx+4] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_102D1F0 +
jnz loc_101650C  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_1016514  +
mov [ecx+4] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1009004  +
mov [eax+4] ebx +
mov eax [edi+4] +
jmp loc_10058B9  +
cmp esi [eax] +
jnz loc_10058BC  +
jmp loc_1016BC2  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1011285  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101123E  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
push edi  +
jnz loc_1016DB4  +
mov eax [esi+4] +
cmp eax ebx +
mov edi ds:__imp_free +
jnz loc_1016DC2  +
mov eax [esi+8] +
cmp eax ebx +
jnz loc_1016DCE  +
mov eax [esi+0Ch] +
cmp eax ebx +
jnz loc_1016DDA  +
mov eax [esi+10h] +
cmp eax ebx +
jnz loc_1016DE6  +
push 14h  +
call ??2@YAPAXI@Z  +
cmp eax ebx +
pop ecx  +
mov [esi] eax +
jz loc_1016DF2  +
push 1  +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_1016DFC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+bOwnerDefaulted]  +
xor ebx ebx +
mov esi ecx +
push ebx  +
push dword ptr [esi]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_1016E1B  +
mov eax [esi+4] +
cmp eax ebx +
push edi  +
mov edi ds:__imp_free +
jnz loc_1016E2C  +
cmp [ebp+pSourceSid] ebx +
jz loc_1009135  +
push [ebp+pSourceSid]  +
call ds:IsValidSid  +
test eax eax +
jz loc_1016E38  +
push [ebp+pSourceSid]  +
call ds:GetLengthSid  +
mov ebx eax +
push ebx  +
call ds:__imp_malloc  +
test eax eax +
pop ecx  +
mov [esi+4] eax +
jz loc_1016E42  +
push [ebp+pSourceSid]  +
push eax  +
push ebx  +
call ds:CopySid  +
test eax eax +
jz loc_1016E4C  +
push [ebp+bOwnerDefaulted]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_1016E4C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor eax eax +
cmp [ebp+arg_0] eax +
push ebx  +
mov ebx ecx +
mov [ebp+var_8] eax +
mov [ebx+6F0h] eax +
mov [ebx+6F4h] eax +
jz loc_100920C  +
push esi  +
mov esi ds:wcsstr +
push edi  +
mov edi offset aEndsessioninfo +
push edi  +
push [ebp+arg_0]  +
call esi  +
test eax eax +
pop ecx  +
pop ecx  +
mov [ebp+arg_0] eax +
jz loc_1009207  +
push edi  +
call ds:__imp_wcslen  +
mov ecx [ebp+arg_0] +
lea eax [ecx+eax*2] +
mov edi offset word_1009214 +
push edi  +
push eax  +
mov [ebp+arg_0] eax +
call esi  +
add esp 0Ch +
test eax eax +
mov [ebp+var_C] eax +
jz loc_1009207  +
cmp [ebp+arg_0] eax +
jnb loc_1009207  +
add eax 2 +
push edi  +
push eax  +
mov [ebp+var_4] eax +
call esi  +
test eax eax +
pop ecx  +
pop ecx  +
mov [ebp+var_10] eax +
jz loc_1009207  +
cmp [ebp+var_4] eax +
jnb loc_1009207  +
mov esi ds:wcstol +
push 10h  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call esi  +
mov [ebx+6F0h] eax +
push 10h  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_4]  +
call esi  +
add esp 18h +
mov [ebx+6F4h] eax +
mov [ebp+var_8] 1 +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax ecx +
fld1   +
and dword ptr [eax+8] 0 +
fstp  dword ptr [eax+0Ch] +
mov dword ptr [eax] 80000000h +
mov dword ptr [eax+4] 7FFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1017649  +
mov eax [ebp+arg_4] +
test eax eax +
jl loc_100929D  +
mov ecx [ebp+arg_0] +
cmp eax [ecx+10h] +
jge loc_100929D  +
push esi  +
inc eax  +
push eax  +
push ecx  +
call sub_1010F2D  +
cmp dword ptr [esi] 0 +
jz loc_1009296  +
test eax eax +
jl loc_1009296  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax 80004005h +
jmp loc_1009291  +
mov eax 80070057h +
jmp loc_1009291  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
shl eax 3 +
push eax  +
mov esi ecx +
call ??2@YAPAXI@Z  +
test eax eax +
pop ecx  +
mov [esi] eax +
jz loc_1017B3C  +
xor eax eax +
test edi edi +
mov [esi+4] edi +
jbe loc_10092E7  +
mov ecx [esi] +
or dword ptr [ecx+eax*8] 0FFFFFFFFh +
mov ecx [esi] +
and dword ptr [ecx+eax*8+4] 0 +
inc eax  +
cmp eax [esi+4] +
jb loc_10092D4  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
xor edx edx +
test eax eax +
jbe loc_1009315  +
mov ecx [ecx] +
push esi  +
mov esi [ecx] +
cmp esi [ebp+arg_0] +
jz loc_1009314  +
inc edx  +
add ecx 8 +
cmp edx eax +
jb loc_1009305  +
pop esi  +
cmp edx eax +
mov eax [ebp+arg_4] +
jz loc_1017B50  +
mov [eax] edx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
mov ecx dword_102D7F4 +
mov [eax+8] ecx +
mov ecx dword_102D7F8 +
mov [eax+0Ch] ecx +
mov ecx dword_102D7F4 +
mov [eax+10h] ecx +
mov ecx dword_102D7F8 +
and dword ptr [eax+18h] 0FFFFFFFCh +
mov [eax+14h] ecx +
retn   +
***
mov edi edi +
push esi  +
lea esi [ecx+2E0h] +
mov eax [esi] +
test eax eax +
jnz loc_1017B5D  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push 0  +
push offset aSoftwareMicr_1  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_1017B6C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_102708C edi +
jnz loc_1009460  +
mov eax ebx +
mov dword_102708C eax +
mov [eax] edi +
mov eax dword_102708C +
xor ebx ebx +
mov [eax+8] edi +
inc dword_102D7FC  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jnz sub_1017C9E  +
push edi  +
push dword_102708C  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov eax offset word_10241AE +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+38h] +
mov [ebp-10h] esi +
call sub_10049A5  +
mov eax ds:DefWindowProcW +
xor edi edi +
mov [esi+4] edi +
mov [esi+14h] edi +
mov [ebp-4] edi +
mov [esi+18h] edi +
mov [esi+1Ch] eax +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 1 +
call sub_1004315  +
mov ecx [ebp-0Ch] +
mov [esi+58h] edi +
mov [esi+5Ch] edi +
mov [esi+60h] edi +
pop edi  +
mov eax esi +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1027090 +
test eax eax +
jz loc_100951A  +
cmp eax 0BB40h +
jnz loc_1009566  +
push esi  +
lea eax [ebp-8] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp-4] +
xor esi [ebp-8] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp-10h] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax [ebp-0Ch] +
xor eax [ebp-10h] +
xor eax esi +
and eax 0FFFFh +
pop esi  +
jz loc_1017DE6  +
mov dword_1027090 eax +
not eax  +
mov dword_102D038 eax +
leave   +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
push 1  +
xor edi edi +
push edi  +
push offset aSystemCurrentc  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_10095EE  +
lea eax [ebp+phkResult] +
push eax  +
push 1  +
push edi  +
push edi  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_1009620  +
push [ebp+lpValueName]  +
call ds:__imp_wcslen  +
test eax eax +
pop ecx  +
jz loc_1009617  +
mov ebx [ebp+lpcbData] +
push ebx  +
push edi  +
push edi  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_1018104  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor ebx ebx +
push ebx  +
push offset aControlPanelTa  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_101819E  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push ebx  +
push offset aControlPanel_0  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_101823E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_10098C2  +
lea eax [ebp+arg_4] +
jmp loc_10098C8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_10098DA  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jnz loc_1009894  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_102D178 +
cmp ecx edx +
jz loc_1009902  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jnb loc_1009906  +
mov ecx [ecx+8] +
cmp ecx edx +
jnz loc_10098F5  +
pop esi  +
pop ebp  +
retn 4  +
mov eax ecx +
mov ecx [ecx] +
jmp loc_10098FD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
push edi  +
mov edi offset stru_102D190 +
push edi  +
mov ebx 80004005h +
call ds:EnterCriticalSection  +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx offset unk_102D180 +
call sub_10098A5  +
mov eax [ebp+arg_4] +
cmp dword_102D184 eax +
jnz loc_100995C  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
mov eax [eax+10h] +
mov [esi] eax +
xor ebx ebx +
jmp loc_100994C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi offset stru_102D190 +
push edi  +
call ds:EnterCriticalSection  +
mov esi offset dword_102D7C0 +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call sub_1009911  +
test eax eax +
jge loc_10099A1  +
push edi  +
call ds:LeaveCriticalSection  +
mov eax dword_102D7C0 +
pop edi  +
pop esi  +
leave   +
retn   +
inc dword_102D7C0  +
jmp loc_1009983  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi [ebp+arg_4] +
jnz loc_10099C4  +
mov eax [ebp+arg_8] +
pop esi  +
pop ebp  +
retn 0Ch  +
push esi  +
push [ebp+arg_8]  +
call sub_10099DB  +
add [ebp+arg_8] 10h +
add esi 10h +
jmp loc_10099B7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_10099F1  +
push esi  +
mov esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edx [ecx+4] +
test edx edx +
jz loc_1009A0B  +
mov eax [ecx+8] +
sub eax edx +
sar eax 4 +
retn   +
xor eax eax +
retn   +
***
push dword_1027C30[edi]  +
lea ecx [esi+0ECh] +
call sub_100C72F  +
cmp dword_1027A24[edi] 0Dh +
jnz loc_1009A99  +
cmp dword ptr [ebx] 45h +
jnz loc_1009A99  +
mov dword_1027A20[edi] 1 +
jmp loc_1009A99  +
***
mov eax offset byte_1023239 +
call sub_10014DD  +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+44Ch] +
xor ecx ecx +
mov [ebp-14h] ecx +
cmp [eax+7Ch] ecx +
push edi  +
mov [ebp-10h] ecx +
jbe loc_1009ABE  +
mov [ebp-18h] ecx +
mov edi 1B04h +
mov eax [esi+44Ch] +
mov ecx [ebp-18h] +
mov eax [eax+84h] +
add eax ecx +
movzx ecx word ptr [eax] +
cmp ecx dword_1027A24[edi] +
jnz loc_1009A99  +
movzx eax word ptr [eax+38h] +
lea ebx dword_1027A28[edi] +
cmp eax [ebx] +
jz loc_1009A0E  +
add edi 214h +
cmp edi 5534h +
jb loc_1009A6B  +
inc dword ptr [ebp-10h]  +
mov eax [esi+44Ch] +
mov ecx [ebp-10h] +
add dword ptr [ebp-18h] 48h +
cmp ecx [eax+7Ch] +
jb loc_1009A66  +
xor ecx ecx +
mov dword_1029524 1 +
mov [ebp-18h] ecx +
mov ebx 1B04h +
lea eax dword_1027A20[ebx] +
cmp [eax] ecx +
jnz loc_1009AF0  +
add ebx 214h +
cmp ebx 2354h +
jnb loc_1009BAE  +
xor ecx ecx +
jmp loc_1009AD0  +
mov [eax] ecx +
mov eax [esi+4] +
mov [ebp-24h] eax +
mov eax [ebp-18h] +
mov [ebp-20h] eax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov [ebp-1Ch] ecx +
call sub_100DFDD  +
test eax eax +
jl loc_1009ADA  +
mov edi [ebp-1Ch] +
test edi edi +
jz loc_1009ADA  +
lea eax aDigitizer[ebx] +
push eax  +
push dword ptr [ebp-18h]  +
lea eax [esi+8] +
push dword ptr [esi+44Ch]  +
mov ecx edi +
push eax  +
call sub_1009CD8  +
test eax eax +
jl loc_1009BBF  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea edx [ebp-10h] +
push edx  +
lea eax [edi+8] +
mov ecx [eax] +
push offset dword_10035F0  +
push eax  +
call dword ptr [ecx]  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
push dword ptr [ebp-10h]  +
lea eax [esi+10h] +
push dword ptr [ebp-14h]  +
push eax  +
call sub_100DE75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-1Ch] eax +
mov eax [ebp-10h] +
test eax eax +
jz loc_1009B85  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [ebp-1Ch] 0 +
jl loc_1009BBF  +
mov eax [ebp-14h] +
and dword ptr [esi+eax*8+46Ch] 0 +
mov eax dword_1027A28[ebx] +
mov ecx [ebp-14h] +
inc dword ptr [ebp-18h]  +
mov [esi+ecx*8+468h] eax +
jmp loc_1009ADA  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn   +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax]  +
jmp loc_1009B8B  +
***
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1009BDA  +
mov [eax+4] ebx +
mov eax [edi+4] +
jmp loc_1009C42  +
cmp esi [eax] +
jnz loc_1009C45  +
jmp loc_101581B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_102D178 +
mov [ebx] eax +
mov eax dword_102D178 +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_10034D9  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jz loc_1009BC9  +
mov eax [ebp+arg_4] +
cmp eax dword_102D178 +
jnz loc_1009BC9  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_1009BC9  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1009C45  +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jz loc_1009C9C  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jnz loc_1009C9C  +
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jz loc_1015822  +
cmp dword ptr [ecx+14h] 0 +
jz loc_1009CB5  +
cmp esi [eax] +
jz loc_1015864  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_100AFAD  +
mov eax [edi+4] +
cmp esi [eax+4] +
jnz loc_1009C4F  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+14h] eax +
mov [ecx+14h] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
jmp loc_1009C94  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
mov [esi+3Ch] eax +
mov eax [ebp+arg_8] +
lea ecx [esi+40h] +
mov [esi+44h] eax +
call sub_100CA96  +
mov eax [ebp+arg_4] +
push offset aEraser  +
push [ebp+arg_C]  +
mov [esi+50h] eax +
mov dword ptr [esi+48h] 1 +
call ds:wcscmp  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
inc eax  +
mov ecx esi +
mov [esi+4Ch] eax +
call sub_1009D3B  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax offset byte_1022EDD +
call sub_10014DD  +
sub esp 28h +
mov eax dword_1027090 +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp-10h] eax +
mov eax [esi+50h] +
push edi  +
xor edi edi +
cmp [eax+7Ch] edi +
mov ebx 80004005h +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
jbe loc_1009E4C  +
mov [ebp-24h] edi +
lea eax [ebp-34h] +
push eax  +
mov [ebp-34h] edi +
call sub_100D745  +
mov ebx eax +
cmp ebx edi +
jl loc_1009DBF  +
mov edi [ebp-34h] +
test edi edi +
jz loc_1009DBF  +
mov eax [esi+50h] +
mov ecx [ebp-24h] +
mov eax [eax+84h] +
movzx eax word ptr [eax+ecx+38h] +
push 25h  +
pop edx  +
mov ecx 4CE4h +
cmp eax dword_1027A28[ecx] +
jz loc_1009DBA  +
add ecx 214h +
inc edx  +
cmp ecx 5534h +
jb loc_1009DA3  +
cmp edx 28h +
jbe loc_1009DD5  +
inc dword ptr [ebp-28h]  +
mov eax [esi+50h] +
mov ecx [ebp-28h] +
add dword ptr [ebp-24h] 48h +
cmp ecx [eax+7Ch] +
jnb loc_1009E4C  +
xor edi edi +
jmp loc_1009D71  +
lea eax [ebp-20h] +
push eax  +
push edx  +
mov ecx esi +
call sub_1008C5B  +
imul edx edx +
push 0  +
add edx offset aDigitizer +
push edx  +
lea eax [ebp-20h] +
push eax  +
lea eax [esi+8] +
push eax  +
mov ecx edi +
call sub_1008BC9  +
mov ebx eax +
test ebx ebx +
jl loc_1009E65  +
and dword ptr [ebp-30h] 0 +
and dword ptr [ebp-4] 0 +
lea edx [ebp-30h] +
push edx  +
lea eax [edi+8] +
mov ecx [eax] +
push offset dword_100831C  +
push eax  +
call dword ptr [ecx]  +
push dword ptr [ebp-30h]  +
lea eax [esi+0Ch] +
push dword ptr [ebp-2Ch]  +
push eax  +
call sub_100D632  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ebx eax +
mov eax [ebp-30h] +
test eax eax +
jz loc_1009E40  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test ebx ebx +
jl loc_1009E65  +
inc dword ptr [ebp-2Ch]  +
jmp loc_1009DBF  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
mov ecx [ebp-10h] +
mov eax ebx +
pop ebx  +
call sub_1007DC7  +
leave   +
retn   +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax]  +
jmp loc_1009E44  +
***
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jnb loc_1009E7C  +
push eax  +
jmp loc_1009EE1  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_1009EF7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_1027094 +
cmp esi eax +
mov dl 1 +
jz loc_1009EC4  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jnz loc_1015959  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_1009EAD  +
cmp byte ptr [edi+8] 0 +
jnz loc_1009EDE  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jz loc_1009E6F  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1015960  +
push [ebp+arg_4]  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1009F05  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_1027094 +
mov [ebx] eax +
mov eax dword_1027094 +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_1008D14  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jz loc_1009F92  +
mov eax [ebp+arg_4] +
cmp eax dword_1027094 +
jnz loc_1009F92  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_1009F92  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_1009F62  +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jz loc_1009F79  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jz loc_101589A  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1009FA3  +
mov [eax+4] ebx +
mov eax [edi+4] +
jmp loc_1009F5F  +
cmp esi [eax] +
jnz loc_1009F62  +
jmp loc_1015893  +
***
cmp esi [eax] +
jnz loc_100A01C  +
mov [eax] ebx +
jmp loc_100A01C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_100C8BE  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_102D1DC +
mov [ebx] eax +
mov eax dword_102D1DC +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_10099DB  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jz loc_100A04C  +
mov eax [ebp+arg_4] +
cmp eax dword_102D1DC +
jnz loc_100A04C  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_C]  +
call sub_1008D31  +
test al al +
jnz loc_100A04C  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_100A01C  +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jz loc_100A033  +
mov eax [esi+4] +
cmp dword ptr [eax+1Ch] 0 +
jz loc_1015D30  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+1Ch] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_1009FAC  +
mov [eax+4] ebx +
mov eax [edi+4] +
jmp loc_100A019  +
***
mov ecx esi +
call sub_10099FB  +
mov [ebp+arg_4] eax +
jmp loc_100A0AE  +
test edi edi +
jbe loc_100A123  +
jmp loc_1015CF0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
sub ecx eax +
push edi  +
mov edi [ebp+arg_4] +
sar ecx 4 +
cmp ecx edi +
jnb loc_100A12A  +
mov ecx esi +
call sub_10099FB  +
cmp edi eax +
jb loc_100A061  +
mov [ebp+arg_4] edi +
mov ecx esi +
call sub_10099FB  +
mov ebx eax +
add ebx [ebp+arg_4] +
push 0  +
push ebx  +
call sub_1008DDC  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
push dword ptr [esi+4]  +
mov [ebp+arg_4] eax +
call sub_10099AE  +
push [ebp+arg_8]  +
mov ecx esi +
push edi  +
push eax  +
mov [ebp+var_4] eax +
call sub_1008DFF  +
mov eax edi +
shl eax 4 +
add eax [ebp+var_4] +
mov ecx esi +
push eax  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_10099AE  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
shl ebx 4 +
add ebx [ebp+arg_4] +
pop ecx  +
mov ecx esi +
mov [esi+0Ch] ebx +
call sub_10099FB  +
mov ecx eax +
mov eax [ebp+arg_4] +
add ecx edi +
shl ecx 4 +
add ecx eax +
mov [esi+8] ecx +
mov [esi+4] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov ecx [ebp+arg_0] +
mov edx eax +
sub edx ecx +
sar edx 4 +
cmp edx edi +
jnb loc_100A06D  +
mov ebx edi +
shl ebx 4 +
lea edx [ebx+ecx] +
push edx  +
push eax  +
push ecx  +
mov ecx esi +
call sub_10099AE  +
mov eax [esi+8] +
push [ebp+arg_8]  +
mov ecx eax +
sub ecx [ebp+arg_0] +
sar ecx 4 +
sub edi ecx +
push edi  +
push eax  +
mov ecx esi +
call sub_1008DFF  +
push [ebp+arg_8]  +
push dword ptr [esi+8]  +
push [ebp+arg_0]  +
call sub_100A17F  +
add [esi+8] ebx +
jmp loc_100A123  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_1015B72  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100A1B4  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push [ebp+arg_4]  +
and dword ptr [edi] 0 +
call wcslen  +
cmp [ebp+arg_8] 0 +
mov esi eax +
pop ecx  +
lea eax [esi+esi+2] +
push eax  +
jnz loc_10184CF  +
call ??2@YAPAXI@Z  +
test eax eax +
pop ecx  +
mov [edi] eax +
jz loc_100A204  +
push [ebp+arg_4]  +
inc esi  +
push esi  +
push eax  +
call sub_100A210  +
mov esi eax +
test esi esi +
jl loc_10184D9  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
mov esi 8007000Eh +
jmp loc_100A1FC  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1016D9E  +
mov edx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
mov cx [esi] +
test cx cx +
jz loc_100A253  +
mov [edx] cx +
inc edx  +
inc edx  +
inc esi  +
inc esi  +
dec [ebp+arg_4]  +
jnz loc_100A23F  +
cmp [ebp+arg_4] 0 +
pop esi  +
jz loc_1016DA8  +
and word ptr [edx] 0 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1027090 +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
xor esi esi +
cmp eax esi +
push edi  +
mov [ebp+var_218] ecx +
jz loc_100A3DB  +
cmp ecx esi +
jz loc_100A3DB  +
push dword ptr [eax]  +
lea eax [ebp+Name] +
push offset aSoftwareMicros  +
push offset aSU  +
push 100h  +
push eax  +
mov [ebp+hKey] esi +
call sub_100CFAD  +
add esp 14h +
test eax eax +
jnz loc_100A3DB  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
lea eax [ebp+Name] +
push eax  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100A3DB  +
cmp [ebp+hKey] esi +
jz loc_100A3DB  +
mov edi 101h +
push edi  +
lea eax [ebp+Name] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+dwIndex] esi +
mov esi ds:RegEnumKeyW +
call esi  +
mov ebx ds:RegCloseKey +
test eax eax +
jnz loc_100A3D3  +
push [ebp+var_218]  +
lea eax [ebp+Name] +
push offset aU  +
push eax  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_100A3B2  +
and [ebp+phkResult] 0 +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push 0  +
lea eax [ebp+Name] +
push eax  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100A3B2  +
cmp [ebp+phkResult] eax +
jz loc_100A3B2  +
push eax  +
push 7FFFFFFFh  +
push eax  +
lea eax [ebp+Data] +
push eax  +
push offset aHidcursorid  +
push [ebp+hKey]  +
call sub_1007995  +
test eax eax +
push [ebp+phkResult]  +
jz loc_10157C1  +
call ebx  +
inc [ebp+dwIndex]  +
push edi  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call esi  +
jmp loc_100A328  +
push [ebp+hKey]  +
call ebx  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
call sub_1007DC7  +
leave   +
retn 8  +
***
xor edx edx +
jmp loc_100A659  +
xor eax eax +
jmp loc_100A4D9  +
mov [ebp-420h] esi +
jmp loc_100A4E3  +
cmp cx 4 +
jnz loc_100A57B  +
jmp loc_100A571  +
and dword ptr [ecx] 0 +
jmp loc_100A69E  +
***
mov eax offset byte_1023067 +
call sub_10014DD  +
sub esp 438h +
mov eax dword_1027090 +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov ebx ecx +
mov edx 80h +
mov [ebp-10h] eax +
xor eax eax +
mov ecx edx +
lea edi [ebp-416h] +
mov [ebp-418h] si +
stos   +
mov ecx edx +
lea edi [ebp-212h] +
mov [ebp-214h] si +
stos   +
mov [ebp-438h] esi +
mov [ebp-434h] esi +
mov [ebp-430h] esi +
mov eax [ebx+44Ch] +
mov eax [eax+78h] +
cmp eax 29h +
mov [ebp-4] esi +
ja loc_1015F09  +
cmp Data esi +
lea edi [eax+2] +
jnz loc_1015F13  +
cmp edi esi +
jle loc_100A3FA  +
mov eax edi +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-41Ch] eax +
cmp eax esi +
mov byte ptr [ebp-4] 1 +
jz loc_100A3F3  +
push offset sub_100923F  +
push edi  +
push 10h  +
push eax  +
call sub_1008D60  +
mov eax [ebp-41Ch] +
mov byte ptr [ebp-4] 0 +
mov [ebp-420h] eax +
cmp [ebp-420h] esi +
jz loc_1015F1A  +
push 100h  +
lea eax [ebp-418h] +
push eax  +
mov eax [ebx+44Ch] +
push dword ptr [eax+8]  +
call HidD_GetProductString  +
lea eax [ebp-418h] +
push eax  +
lea ecx [ebx+8Ch] +
call sub_100CA96  +
mov eax [ebx+44Ch] +
movzx eax word ptr [eax+66h] +
push eax  +
push offset aLd  +
lea eax [ebp-214h] +
push 101h  +
push eax  +
call sub_100CFAD  +
mov [ebp-428h] eax +
add esp 10h +
lea eax [ebp-214h] +
push eax  +
lea ecx [ebx+90h] +
call sub_100CA96  +
mov eax [ebx+44Ch] +
mov [ebx+0B4h] esi +
mov cx [eax+20h] +
cmp cx 2 +
jnz loc_1015F24  +
mov dword ptr [ebx+0B4h] 1 +
or dword ptr [ebx+0B4h] 4 +
xor edi edi +
cmp [eax+78h] edi +
mov [ebp-424h] esi +
mov [ebp-440h] edi +
jbe loc_100A79E  +
mov ecx [ebp-420h] +
add ecx 8 +
mov [ebp-42Ch] ecx +
mov edx [eax+74h] +
add edx edi +
push 11h  +
mov [ebp-41Ch] edx +
pop ecx  +
mov edx 2354h +
mov esi [ebp-41Ch] +
movzx esi word ptr [esi] +
cmp esi dword_1027A24[edx] +
jnz loc_100A5DE  +
mov esi [ebp-41Ch] +
movzx esi word ptr [esi+18h] +
cmp esi dword_1027A28[edx] +
jz loc_100A5ED  +
add edx 214h +
inc ecx  +
cmp edx 4CE4h +
jb loc_100A5BB  +
cmp ecx 24h +
ja loc_100A77A  +
imul ecx ecx +
lea esi dword_1027C30[ecx] +
push dword ptr [esi]  +
lea ecx [ebx+0ECh] +
mov [ebp-444h] esi +
call sub_100C72F  +
mov eax [ebx+44Ch] +
mov eax [eax+74h] +
lea eax [eax+edi+14h] +
push eax  +
push dword ptr [esi]  +
lea ecx [ebx+0ECh] +
call sub_10092F4  +
mov ecx [ebx+44Ch] +
mov eax [ecx+74h] +
mov al [edi+eax+1Ch] +
and al 0Fh +
xor edx edx +
cmp byte_10279F4[edx*4] al +
jz loc_100A650  +
inc edx  +
cmp edx 0Bh +
jb loc_100A641  +
cmp edx 0Bh +
jnb loc_100A3EC  +
mov eax [ecx+74h] +
mov dx word_10279F6[edx*4] +
lea ecx [edi+eax] +
mov eax [ecx+20h] +
mov esi [ecx+24h] +
mov ecx [ebp-42Ch] +
mov [ecx-8] esi +
mov esi [ebx+44Ch] +
mov esi [esi+74h] +
mov esi [esi+edi+28h] +
shr eax 4 +
and eax 0Fh +
cmp eax 5 +
mov [ecx-4] esi +
jnb loc_100A414  +
mov eax dword_10279E0[eax*4] +
mov [ecx] eax +
mov eax [ebx+44Ch] +
mov eax [eax+74h] +
lea esi [eax+edi] +
mov eax [esi+28h] +
sub eax [esi+24h] +
mov [ebp-41Ch] eax +
fild  dword ptr [ebp-41Ch] +
fld  ds:dbl_100A9E0 +
movsx eax dx +
mov [ebp-41Ch] eax +
fild  dword ptr [ebp-41Ch] +
call _CIpow  +
fst  dword ptr [ebp-41Ch] +
mov eax [esi+30h] +
sub eax [esi+2Ch] +
inc dword ptr [ebp-424h]  +
mov [ebp-41Ch] eax +
fimul  dword ptr [ebp-41Ch] +
mov eax [ebp-42Ch] +
add dword ptr [ebp-42Ch] 10h +
lea ecx [ebp-43Ch] +
fdivp st(1) st +
fstp  dword ptr [eax+4] +
mov eax [ebp-444h] +
mov eax [eax] +
push dword_10277A0[eax*4]  +
push dword ptr [ebp-434h]  +
call sub_100A9F5  +
mov eax [ebx+44Ch] +
mov ecx [eax+74h] +
add ecx edi +
cmp word ptr [ecx] 1 +
jnz loc_100A77A  +
cmp word ptr [ecx+18h] 30h +
jnz loc_100A758  +
mov ecx [eax+74h] +
mov ecx [edi+ecx+24h] +
mov [ebx+94h] ecx +
mov ecx [eax+74h] +
mov ecx [edi+ecx+28h] +
mov [ebx+9Ch] ecx +
mov ecx [eax+74h] +
cmp word ptr [edi+ecx+18h] 31h +
jnz loc_100A77A  +
mov ecx [edi+ecx+24h] +
mov [ebx+98h] ecx +
mov ecx [eax+74h] +
mov ecx [edi+ecx+28h] +
mov [ebx+0A0h] ecx +
inc dword ptr [ebp-440h]  +
mov ecx [ebx+44Ch] +
mov edx [ebp-440h] +
mov esi [ebp-424h] +
add edi 3Ch +
cmp edx [ecx+78h] +
jb loc_100A5A8  +
mov ecx [ebp-420h] +
fldz   +
mov eax esi +
shl eax 4 +
add eax ecx +
and dword ptr [eax] 0 +
fstp  dword ptr [eax+0Ch] +
and dword ptr [eax+8] 0 +
mov dword ptr [eax+4] 8 +
push dword_10277AC  +
lea ecx [ebp-43Ch] +
push dword ptr [ebp-434h]  +
inc esi  +
call sub_100A9F5  +
xor edi edi +
cmp Data edi +
jnz loc_1015F33  +
cmp [ebp-438h] edi +
mov esi [ebp-434h] +
mov [ebx+110h] edi +
mov [ebx+0E4h] edi +
mov [ebx+0E8h] edi +
jz loc_1015FA9  +
mov eax esi +
sub eax [ebp-438h] +
sar eax 4 +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax edi +
pop ecx  +
mov [ebx+0D0h] eax +
jz loc_100A9A7  +
push eax  +
push esi  +
push dword ptr [ebp-438h]  +
call sub_1008DAA  +
cmp [ebp-438h] edi +
jz loc_1015FB0  +
sub esi [ebp-438h] +
sar esi 4 +
lea eax [ebx+0D8h] +
mov [ebx+0CCh] esi +
push eax  +
lea esi [ebx+0D4h] +
push esi  +
mov ecx ebx +
call sub_100DB0F  +
cmp [esi] edi +
jz loc_100A8A8  +
push 4  +
call ??2@YAPAXI@Z  +
push 4  +
mov [ebx+0DCh] eax +
call ??2@YAPAXI@Z  +
mov edx [ebx+0DCh] +
cmp edx edi +
pop ecx  +
pop ecx  +
lea ecx [ebx+0E0h] +
mov [ecx] eax +
jz loc_100A9A7  +
cmp eax edi +
jz loc_100A9A7  +
or dword ptr [edx] 0FFFFFFFFh +
mov eax [ecx] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax [ebx+0C0h] +
cmp eax edi +
jnz loc_1015FB7  +
mov eax [ebx+0C8h] +
cmp eax edi +
jnz loc_1015FCF  +
mov eax [ebx+0CCh] +
cmp eax edi +
mov [ebx+0BCh] eax +
jz loc_100A935  +
shl eax 5 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax edi +
pop ecx  +
mov [ebx+0C0h] eax +
jz loc_100A9A7  +
xor edx edx +
cmp [ebx+0BCh] edi +
jbe loc_100A935  +
xor ecx ecx +
xor eax eax +
mov esi [ebx+0D0h] +
mov edi [ebx+0C0h] +
add esi eax +
add edi ecx +
movs   +
movs   +
movs   +
movs   +
mov edi [ebx+0C0h] +
mov esi [ebp-420h] +
add esi eax +
lea edi [edi+ecx+10h] +
movs   +
movs   +
movs   +
inc edx  +
movs   +
add eax 10h +
add ecx 20h +
cmp edx [ebx+0BCh] +
jb loc_100A8FA  +
xor edi edi +
mov eax [ebx+0D4h] +
cmp eax edi +
mov [ebx+0C4h] eax +
jz loc_100A97A  +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax edi +
pop ecx  +
mov [ebx+0C8h] eax +
jz loc_100A9A7  +
mov ecx [ebx+0C4h] +
mov esi [ebx+0D8h] +
shl ecx 4 +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
xor edi edi +
mov eax [ebx+0C4h] +
push dword ptr [ebp-420h]  +
add eax 1Fh +
shr eax 5 +
add eax [ebx+0BCh] +
shl eax 2 +
mov [ebx+0B8h] eax +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebp-428h] edi +
cmp [ebp-428h] edi +
jl loc_1015FE7  +
mov esi [ebp-428h] +
lea ecx [ebp-43Ch] +
call sub_1006CCE  +
mov ecx [ebp-0Ch] +
pop edi  +
mov eax esi +
pop esi  +
mov large fs:0 ecx +
mov ecx [ebp-10h] +
pop ebx  +
call sub_1007DC7  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
mov edi [esi+4] +
push 1  +
push [ebp+arg_0]  +
call sub_100A07F  +
mov eax [ebp+arg_0] +
sub eax edi +
sar eax 4 +
shl eax 4 +
add eax [esi+4] +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_100AA50  +
lea eax [ebp+arg_4] +
jmp loc_100AA56  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_100AA68  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jnz loc_100AA22  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_102D1AC +
cmp ecx edx +
jz loc_100AA90  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jnb loc_100AA94  +
mov ecx [ecx+8] +
cmp ecx edx +
jnz loc_100AA83  +
pop esi  +
pop ebp  +
retn 4  +
mov eax ecx +
mov ecx [ecx] +
jmp loc_100AA8B  +
***
push eax  +
call sub_1008D89  +
jmp loc_100AAC8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_102D1DC +
jnz loc_100AA9A  +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jz loc_100AACC  +
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_100AACA  +
mov [esi] eax +
pop esi  +
retn   +
mov [esi] eax +
mov ecx eax +
jmp loc_100AAB9  +
***
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jz loc_100AAD2  +
mov ecx [esi] +
cmp [ecx+8] eax +
jnz loc_10111FB  +
jmp loc_10111FD  +
***
mov esi [esi] +
jmp loc_100AB30  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx dword_102D1DC +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
cmp esi ebx +
mov [ebp+var_4] eax +
mov cl 1 +
jz loc_100AB37  +
lea eax [esi+0Ch] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_4] esi +
call sub_1008D31  +
mov cl al +
test cl cl +
jnz loc_100AAEE  +
mov esi [esi+8] +
cmp esi ebx +
jnz loc_100AB18  +
mov eax [ebp+var_4] +
cmp byte ptr [edi+8] 0 +
jnz loc_100AB51  +
test cl cl +
mov ebx eax +
mov [ebp+var_8] ebx +
jz loc_100AB73  +
mov ecx [edi+4] +
cmp eax [ecx] +
jnz loc_100DABD  +
push [ebp+arg_4]  +
push eax  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1009FB9  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push [ebp+arg_4]  +
lea eax [ebx+0Ch] +
push eax  +
call sub_1008D31  +
test al al +
jz loc_100AB8B  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
jmp loc_100AB55  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
mov byte ptr [eax+4] 0 +
jmp loc_100AB6C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
call sub_100D295  +
mov esi eax +
test esi esi +
jz loc_1016D87  +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
call sub_100ABD7  +
test esi esi +
pop esi  +
jz loc_100ABCE  +
test eax eax +
jl loc_100ABCE  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax offset byte_1023BED +
call sub_10014DD  +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push offset stru_102D1C4  +
call ds:EnterCriticalSection  +
mov ebx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push ebx  +
call sub_100ACA7  +
test eax eax +
jge loc_1016D51  +
xor esi esi +
push 68h  +
mov [ebp-18h] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-20h] ecx +
cmp ecx esi +
mov byte ptr [ebp-4] 1 +
jz loc_100AC35  +
call sub_1001B01  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100AC7E  +
lea edi [esi+20h] +
push edi  +
call ds:InterlockedIncrement  +
push edi  +
call ds:InterlockedDecrement  +
mov eax [ebx] +
mov [esi+4] eax +
mov eax [ebx] +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx offset unk_102D1B4 +
mov [ebp-20h] esi +
call sub_100E0EB  +
cmp byte ptr [ebp-18h] 0 +
jz loc_1016D78  +
mov dword ptr [ebp-14h] 1 +
mov eax [ebp+0Ch] +
mov [eax] esi +
push offset stru_102D1C4  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
push edi  +
mov edi offset stru_102D1C4 +
push edi  +
mov ebx 80004005h +
call ds:EnterCriticalSection  +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx offset unk_102D1B4 +
call sub_100AA33  +
mov eax [ebp+arg_4] +
cmp dword_102D1B8 eax +
jnz loc_100ACF2  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
mov eax [eax+10h] +
mov [esi] eax +
xor ebx ebx +
jmp loc_100ACE2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi offset stru_102D1C4 +
push edi  +
call ds:EnterCriticalSection  +
mov esi offset dword_102CF58 +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call sub_100ACA7  +
test eax eax +
jge loc_100AD37  +
push edi  +
call ds:LeaveCriticalSection  +
mov eax dword_102CF58 +
pop edi  +
pop esi  +
leave   +
retn   +
inc dword_102CF58  +
jmp loc_100AD19  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 320h +
mov eax dword_1027090 +
push ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
push esi  +
push edi  +
mov [ebp+var_318] eax +
jz loc_100AF16  +
cmp eax ebx +
jz loc_100AF16  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
push offset aSoftwareMicros  +
push 80000001h  +
mov [ebp+hKey] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100AF16  +
cmp [ebp+hKey] ebx +
jz loc_100AF16  +
mov edi ds:RegEnumKeyW +
push 80h  +
lea eax [ebp+SubKey] +
push eax  +
mov [ebp+var_310] ebx +
push ebx  +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_100AF0A  +
push [ebp+var_318]  +
lea eax [ebp+SubKey] +
push offset aU  +
push eax  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_100AEDF  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push ebx  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
mov [ebp+phkResult] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100AEDF  +
cmp [ebp+phkResult] ebx +
jz loc_100AEDF  +
push 2  +
push 3  +
push 2  +
lea eax [ebp+var_31C] +
push eax  +
push offset aType  +
push [ebp+phkResult]  +
mov [ebp+cbData] 4 +
call sub_1007995  +
test eax eax +
jl loc_100AED3  +
cmp [ebp+var_31C] 2 +
jnz loc_100AED3  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset ValueName  +
push [ebp+phkResult]  +
mov [ebp+Data] bl +
mov [ebp+cbData] 200h +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_100AED3  +
mov esi [ebp+arg_0] +
lea eax [ebp+Data] +
mov dl [esi] +
mov cl dl +
cmp dl [eax] +
jnz loc_100AEC6  +
cmp cl bl +
jz loc_100AF27  +
mov dl [esi+1] +
mov cl dl +
cmp dl [eax+1] +
jz loc_1015A0F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_1015A20  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
inc [ebp+var_310]  +
push 80h  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+var_310]  +
jmp loc_100ADC6  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
call sub_1007DC7  +
leave   +
retn 8  +
xor eax eax +
jmp loc_100AECB  +
***
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_100AF59  +
lea eax [ebp+arg_4] +
jmp loc_100AF5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_100AF71  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jnz loc_100AF2B  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_102D1F0 +
cmp ecx edx +
jz loc_100AF99  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jnb loc_100AF9D  +
mov ecx [ecx+8] +
cmp ecx edx +
jnz loc_100AF8C  +
pop esi  +
pop ebp  +
retn 4  +
mov eax ecx +
mov ecx [ecx] +
jmp loc_100AF94  +
***
mov [esi+4] edx +
jmp loc_100AFC8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_102D178 +
jnz loc_100AFA3  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jz loc_100AFEE  +
mov ecx [edx+4] +
cmp edx [ecx] +
jz loc_1014E2F  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
mov [ecx+4] eax +
jmp loc_100AFE5  +
***
mov [edi] eax +
jmp loc_100B396  +
***
mov eax offset byte_10232C1 +
call sub_10014DD  +
sub esp 0F8h +
mov eax dword_1027090 +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 8Ch  +
mov [ebp-10h] eax +
mov ebx ecx +
mov [ebp-0FCh] esi +
call ??2@YAPAXI@Z  +
mov edi eax +
test edi edi +
pop ecx  +
mov [ebx+44Ch] edi +
jz loc_1016346  +
push 23h  +
pop ecx  +
xor eax eax +
stos   +
mov edi [ebx+44Ch] +
mov eax [ebp-0FCh] +
push 23h  +
pop ecx  +
movs   +
push dword ptr [eax]  +
push dword ptr [ebx+44Ch]  +
call sub_100A199  +
test eax eax +
jnz loc_1016333  +
xor esi esi +
mov ecx ebx +
mov [ebx+70h] esi +
mov [ebx+450h] esi +
mov [ebx+454h] esi +
mov [ebx+458h] esi +
mov [ebx+45Ch] esi +
mov [ebx+238h] esi +
mov [ebx+464h] esi +
mov dword ptr [ebx+234h] 1 +
call sub_1007CDC  +
push dword ptr [ebx+44Ch]  +
mov [ebx+86Ch] esi +
mov [ebx+868h] esi +
mov [ebx+87Ch] esi +
mov [ebx+880h] esi +
mov [ebx+884h] esi +
mov [ebx+870h] esi +
mov [ebx+874h] esi +
mov [ebx+878h] esi +
call sub_100E244  +
test eax eax +
jz loc_10163D1  +
mov eax [ebx+44Ch] +
xor edx edx +
mov dx [eax+7Ch] +
add dx [eax+78h] +
cmp Data esi +
lea ecx [ebx+0ECh] +
jnz loc_1016350  +
inc edx  +
inc edx  +
movzx eax dx +
push eax  +
call sub_10092A9  +
cmp eax esi +
jl loc_10163D1  +
lea edi [ebx+0ECh] +
push 17h  +
mov ecx edi +
call sub_100C72F  +
test eax eax +
jl loc_10163D1  +
push 3  +
mov ecx edi +
mov dword ptr [ebx+890h] 20h +
call sub_100C72F  +
test eax eax +
jl loc_10163D1  +
mov ecx ebx +
call sub_1009A3E  +
test eax eax +
jl loc_10163D1  +
mov ecx ebx +
call sub_100A421  +
test eax eax +
jl loc_10163D1  +
cmp Data esi +
jnz loc_1016358  +
lea eax [ebp-104h] +
push eax  +
push 21h  +
mov ecx edi +
call sub_1013524  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
cmp eax esi +
mov [ebx+868h] eax +
jz loc_1016377  +
mov edi ds:CreateEventW +
push esi  +
push esi  +
push esi  +
push esi  +
call edi  +
cmp eax esi +
mov [ebx+450h] eax +
jz loc_10163D1  +
push esi  +
push esi  +
push esi  +
push esi  +
call edi  +
cmp eax esi +
mov [ebx+454h] eax +
jz loc_10163D1  +
push esi  +
push esi  +
push esi  +
push esi  +
call edi  +
cmp eax esi +
mov [ebx+87Ch] eax +
jz loc_10163D1  +
push esi  +
push esi  +
push esi  +
push esi  +
call edi  +
cmp eax esi +
mov [ebx+880h] eax +
jz loc_10163D1  +
push esi  +
push esi  +
push esi  +
push esi  +
call edi  +
cmp eax esi +
mov [ebx+884h] eax +
jz loc_10163D1  +
push ebx  +
lea eax [ebx+0ECh] +
push eax  +
lea ecx [ebx+2E8h] +
call sub_100E115  +
cmp eax esi +
jl loc_10163D1  +
test byte ptr [ebx+0B4h] 1 +
jz loc_100B274  +
mov eax [ebx+8Ch] +
lea ecx [ebx+114h] +
push ecx  +
lea ecx [ebx+118h] +
push ecx  +
mov ecx [ebx+44Ch] +
push dword ptr [ecx+4]  +
push eax  +
call sub_10095B3  +
lea eax [ebx+128h] +
push eax  +
lea eax [ebx+12Ch] +
push eax  +
lea eax [ebx+120h] +
push eax  +
lea eax [ebx+124h] +
push eax  +
call sub_100962E  +
lea esi [ebx+94h] +
lea edi [ebx+0A4h] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
push edi  +
mov ecx ebx +
call sub_1007089  +
push ebx  +
lea ecx [ebp-0F8h] +
call sub_10016B1  +
xor esi esi +
lea eax [ebp-0FCh] +
inc esi  +
push eax  +
lea ecx [ebx+270h] +
mov [ebp-4] edi +
mov [ebp-0FCh] esi +
call sub_100271D  +
lea eax [ebp-0FCh] +
push eax  +
lea ecx [ebx+2A0h] +
mov [ebp-0FCh] esi +
call sub_1002B84  +
mov eax [ebp-0F8h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add eax 2D0h +
push eax  +
call ds:LeaveCriticalSection  +
mov ecx ebx +
call sub_1008E70  +
test eax eax +
jl loc_10163D1  +
mov ecx ebx +
call sub_100D02A  +
mov eax ds:dword_100B3F8 +
mov [ebp-18h] eax +
mov eax ds:dword_100B3FC +
push 37h  +
pop ecx  +
mov [ebp-14h] eax +
mov [ebp-0F8h] edi +
mov [ebp-0FCh] edi +
xor eax eax +
lea edi [ebp-0F4h] +
stos   +
lea eax [ebp-0F4h] +
push eax  +
push 0  +
lea edi [ebx+888h] +
or dword ptr [edi] 0FFFFFFFFh +
lea esi [ebx+88Ch] +
or dword ptr [esi] 0FFFFFFFFh +
push 0  +
mov word ptr [ebp-0B0h] 0DCh +
call ds:EnumDisplaySettingsW  +
test eax eax +
jz loc_100B3C4  +
test byte ptr [ebp-0ACh] 80h +
jz loc_100B367  +
cmp dword ptr [ebp-0A0h] 0 +
jnz loc_100B39D  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-0F4h] +
push eax  +
call ds:wcscmp  +
test eax eax +
pop ecx  +
pop ecx  +
jz loc_100B39D  +
test byte ptr [ebp-0A9h] 20h +
jnz loc_10163DB  +
mov eax [ebp-48h] +
cmp eax [edi] +
jb loc_100AFF3  +
mov eax [ebp-44h] +
cmp eax [esi] +
jb loc_100B400  +
inc dword ptr [ebp-0F8h]  +
lea eax [ebp-0F4h] +
push eax  +
push dword ptr [ebp-0F8h]  +
push 0  +
call ds:EnumDisplaySettingsW  +
test eax eax +
jnz loc_100B355  +
cmp [ebp-0FCh] eax +
jnz loc_100B3CA  +
and dword ptr [edi] 0 +
and dword ptr [esi] 0 +
push 43h  +
call ds:GetSystemMetrics  +
test eax eax +
jnz loc_10163EA  +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
mov ecx [ebp-10h] +
pop ebx  +
call sub_1007DC7  +
leave   +
retn 4  +
mov [esi] eax +
jmp loc_100B39D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
push edi  +
mov edi offset stru_102D7DC +
push edi  +
mov ebx 80004005h +
call ds:EnterCriticalSection  +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx offset unk_102D7CC +
call sub_100AF3C  +
mov eax [ebp+arg_4] +
cmp dword_102D7D0 eax +
jnz loc_100B454  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
mov eax [eax+10h] +
mov [esi] eax +
xor ebx ebx +
jmp loc_100B444  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi offset stru_102D7DC +
push edi  +
call ds:EnterCriticalSection  +
mov esi offset dword_102D7C4 +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call sub_100B409  +
test eax eax +
jge loc_100B499  +
push edi  +
call ds:LeaveCriticalSection  +
mov eax dword_102D7C4 +
pop edi  +
pop esi  +
leave   +
retn   +
inc dword_102D7C4  +
jmp loc_100B47B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
mov eax dword_1027090 +
mov ecx [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
xor esi esi +
cmp eax esi +
mov [ebp+var_5C] ecx +
mov ecx [ebp+arg_10] +
push edi  +
mov [ebp+var_54] eax +
mov [ebp+var_60] ecx +
mov [ebp+RequiredSize] esi +
jz loc_100B646  +
cmp ebx esi +
jz loc_100B646  +
mov edi [ebx] +
add edi [ebp+MemberIndex] +
lea eax [ebp+InterfaceClassGuid] +
push eax  +
mov [ebp+var_68] edi +
mov [ebx] esi +
call HidD_GetHidGuid  +
push esi  +
push esi  +
push esi  +
push 12h  +
push esi  +
push esi  +
lea eax [ebp+InterfaceClassGuid] +
push eax  +
call ds:SetupDiGetClassDevsExW  +
cmp eax 0FFFFFFFFh +
mov [ebp+DeviceInfoSet] eax +
jz loc_100B646  +
cmp [ebp+MemberIndex] edi +
push 1Ch  +
pop eax  +
mov [ebp+DeviceInterfaceData.cbSize] eax +
mov [ebp+DeviceInfoData.cbSize] eax +
jnb loc_100B618  +
mov eax [ebp+var_54] +
add eax 4 +
mov [ebp+var_54] eax +
lea eax [ebp+DeviceInterfaceData] +
push eax  +
push [ebp+MemberIndex]  +
lea eax [ebp+InterfaceClassGuid] +
push eax  +
push esi  +
push [ebp+DeviceInfoSet]  +
call ds:SetupDiEnumDeviceInterfaces  +
test eax eax +
jz loc_100B632  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push [ebp+MemberIndex]  +
push [ebp+DeviceInfoSet]  +
call ds:SetupDiEnumDeviceInfo  +
test eax eax +
jz loc_10180B3  +
push esi  +
lea eax [ebp+RequiredSize] +
push eax  +
push esi  +
push esi  +
lea eax [ebp+DeviceInterfaceData] +
push eax  +
push [ebp+DeviceInfoSet]  +
call ds:SetupDiGetDeviceInterfaceDetailW  +
mov eax [ebp+RequiredSize] +
mov [ebp+DeviceInterfaceDetailDataSize] eax +
lea eax [eax+eax*2] +
shl eax 1 +
push eax  +
call ??2@YAPAXI@Z  +
mov edi eax +
cmp edi esi +
pop ecx  +
jz loc_100B63F  +
push esi  +
lea eax [ebp+RequiredSize] +
push eax  +
push [ebp+DeviceInterfaceDetailDataSize]  +
lea eax [ebp+DeviceInterfaceData] +
push edi  +
push eax  +
push [ebp+DeviceInfoSet]  +
mov dword ptr [edi] 6 +
call ds:SetupDiGetDeviceInterfaceDetailW  +
test eax eax +
jz loc_10180F8  +
cmp [ebp+var_5C] esi +
jnz loc_10180C9  +
xor eax eax +
push eax  +
mov eax [ebp+var_54] +
add eax 0FFFFFFFCh +
push eax  +
lea eax [edi+4] +
push eax  +
call sub_101065E  +
test eax eax +
jz loc_100B5F9  +
push 1  +
push 1  +
push esi  +
push 1  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push [ebp+DeviceInfoSet]  +
call ds:SetupDiOpenDevRegKey  +
cmp eax 0FFFFFFFFh +
mov ecx [ebp+var_54] +
mov [ecx] eax +
jz loc_10180F1  +
inc dword ptr [ebx]  +
push edi  +
call ??3@YAXPAX@Z  +
inc [ebp+MemberIndex]  +
mov eax [ebp+MemberIndex] +
add [ebp+var_54] 8Ch +
cmp eax [ebp+var_68] +
pop ecx  +
jb loc_100B52E  +
push [ebp+DeviceInfoSet]  +
call ds:SetupDiDestroyDeviceInfoList  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
call sub_1007DC7  +
leave   +
retn 14h  +
call ds:GetLastError  +
cmp eax 103h +
jz loc_100B618  +
mov esi 80004005h +
jmp loc_100B618  +
mov eax 80004005h +
jmp loc_100B623  +
***
mov eax [ebp+arg_4] +
cmp eax dword_1027058 +
jnz loc_100B6AE  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_100B6AE  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_100B6C0  +
jmp loc_100B6BD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_1027058 +
mov [ebx] eax +
mov eax dword_1027058 +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_1008D14  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jnz loc_100B64D  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_100B6F2  +
mov [eax+4] ebx +
mov eax [edi+4] +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jnz loc_100B6E3  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jz loc_1015DDF  +
jmp loc_100B6CA  +
cmp esi [eax] +
jnz loc_100B6C0  +
jmp loc_1015DD8  +
***
call sub_10031B5  +
xor edi edi +
push edi  +
call ds:GetModuleHandleA  +
cmp word ptr [eax] 5A4Dh +
jnz loc_100B86F  +
mov ecx [eax+3Ch] +
add ecx eax +
cmp dword ptr [ecx] 4550h +
jnz loc_100B86F  +
movzx eax word ptr [ecx+18h] +
cmp eax 10Bh +
jnz loc_1017DF0  +
cmp dword ptr [ecx+74h] 0Eh +
jbe loc_100B86F  +
xor eax eax +
cmp [ecx+0E8h] edi +
setnz al  +
mov [ebp-1Ch] eax +
mov [ebp-4] edi +
push 2  +
pop ebx  +
push ebx  +
call ds:__set_app_type  +
pop ecx  +
or dword_102D818 0FFFFFFFFh +
or dword_102D81C 0FFFFFFFFh +
call ds:__p__fmode  +
mov ecx dword_102D80C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_102D808 +
mov [eax] ecx +
mov eax ds:_adjust_fdiv +
mov eax [eax] +
mov dword_102D814 eax +
call sub_1009595  +
cmp dword_102D03C edi +
jz loc_1017E15  +
call sub_10105D8  +
push offset unk_10278D8  +
push offset unk_10278D4  +
call _initterm  +
mov eax dword_102D804 +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
push eax  +
push dword_102D800  +
lea eax [ebp-2Ch] +
push eax  +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call ds:__wgetmainargs  +
mov [ebp-38h] eax +
push offset unk_10278D0  +
push offset unk_10278A0  +
call _initterm  +
add esp 24h +
mov eax ds:_wcmdln +
mov esi [eax] +
cmp esi edi +
jz loc_1017E26  +
mov [ebp-20h] esi +
cmp word ptr [esi] 22h +
jz loc_1017E34  +
cmp word ptr [esi] 20h +
jbe loc_100B834  +
add esi ebx +
mov [ebp-20h] esi +
jmp loc_100B816  +
mov ax [esi] +
cmp ax di +
jnz loc_1017E5B  +
mov [ebp-54h] edi +
lea eax [ebp-80h] +
push eax  +
call ds:GetStartupInfoW  +
test byte ptr [ebp-54h] 1 +
jnz loc_1017E66  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push edi  +
push edi  +
call ds:GetModuleHandleA  +
push eax  +
call sub_100B87C  +
jmp loc_1017E6F  +
mov [ebp-1Ch] edi +
jmp loc_100B758  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1027090 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push offset asc_100B9B8  +
mov [ebp+var_4] eax +
call nullsub_1  +
pop ecx  +
call ds:GetCommandLineW  +
push offset dword_100B974  +
push 65h  +
push 64h  +
push esi  +
mov ebx offset unk_1027098 +
push offset off_102CF60  +
mov ecx ebx +
mov [ebp+lpString1] eax +
call sub_100F639  +
push [ebp+lpString1]  +
mov ecx ebx +
call sub_1009154  +
mov [ebp+var_14] eax +
call sub_100937E  +
mov esi offset asc_100B9B0 +
lea edi [ebp+sz] +
lea eax [ebp+sz] +
movs   +
push eax  +
push [ebp+lpString1]  +
movs   +
call sub_100B9ED  +
test eax eax +
mov [ebp+lpString1] eax +
jz loc_100B93F  +
mov esi ds:CompareStringW +
mov edi 409h +
push 0FFFFFFFFh  +
push offset String2  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push edi  +
call esi  +
cmp eax 2 +
jz loc_100B969  +
push 0FFFFFFFFh  +
push offset aRegserver  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push edi  +
call esi  +
cmp eax 2 +
jz loc_1017BB0  +
lea eax [ebp+sz] +
push eax  +
push [ebp+lpString1]  +
call sub_100B9ED  +
test eax eax +
mov [ebp+lpString1] eax +
jnz loc_100B8FC  +
push 56h  +
call ds:GetSystemMetrics  +
test eax eax +
jz loc_100B951  +
cmp [ebp+var_14] 0 +
jz loc_100B958  +
mov ecx ebx +
call sub_10066F3  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
call sub_1007DC7  +
leave   +
retn 10h  +
mov ecx ebx +
call sub_1020490  +
jmp loc_100B95A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100BA2B  +
mov esi ds:CharNextW +
cmp word ptr [edi] 0 +
jz loc_100BA2B  +
mov eax [ebp+lpsz] +
test eax eax +
jz loc_100BA22  +
mov cx [eax] +
test cx cx +
jz loc_100BA22  +
cmp [edi] cx +
jz loc_100BA33  +
push eax  +
call esi  +
test eax eax +
jnz loc_100BA0E  +
push edi  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_100BA01  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
push edi  +
call esi  +
jmp loc_100BA2D  +
***
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+14h] eax +
mov [ecx+14h] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
jmp loc_100BB23  +
cmp esi [eax] +
jnz loc_100BAD0  +
jmp loc_1015B9F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_102D1AC +
mov [ebx] eax +
mov eax dword_102D1AC +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_10034D9  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jz loc_100BB44  +
mov eax [ebp+arg_4] +
cmp eax dword_102D1AC +
jnz loc_100BB44  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_100BB44  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_100BAD0  +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jz loc_100BB2B  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jnz loc_100BB2B  +
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jz loc_1015BA6  +
cmp dword ptr [ecx+14h] 0 +
jz loc_100BA38  +
cmp esi [eax] +
jz loc_1015BE8  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1008CD1  +
mov eax [edi+4] +
cmp esi [eax+4] +
jnz loc_100BADA  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_100BA59  +
mov [eax+4] ebx +
mov eax [edi+4] +
jmp loc_100BACD  +
***
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jz loc_1016531  +
cmp dword ptr [ecx+14h] 0 +
jz loc_101653A  +
cmp esi [eax] +
jz loc_1016590  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1008FAA  +
mov eax [edi+4] +
cmp esi [eax+4] +
jz loc_100BC1F  +
jmp loc_100BC12  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_102D1F0 +
mov [ebx] eax +
mov eax dword_102D1F0 +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_10034D9  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jz loc_100BC38  +
mov eax [ebp+arg_4] +
cmp eax dword_102D1F0 +
jnz loc_100BC38  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_100BC38  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_100BC08  +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jz loc_100BC1F  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jz loc_100BB5C  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_100BC49  +
mov [eax+4] ebx +
mov eax [edi+4] +
jmp loc_100BC05  +
cmp esi [eax] +
jnz loc_100BC08  +
jmp loc_101652A  +
***
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jz loc_10165B0  +
cmp dword ptr [ecx+14h] 0 +
jz loc_10165B9  +
cmp esi [eax] +
jz loc_101660F  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1008F67  +
mov eax [edi+4] +
cmp esi [eax+4] +
jz loc_100BD15  +
jmp loc_100BD08  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_102708C +
mov [ebx] eax +
mov eax dword_102708C +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_1008D14  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jz loc_100BD2E  +
mov eax [ebp+arg_4] +
cmp eax dword_102708C +
jnz loc_100BD2E  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_100BD2E  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_100BCFE  +
mov [eax+8] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jz loc_100BD15  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jz loc_100BC52  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_100BD3F  +
mov [eax+4] ebx +
mov eax [edi+4] +
jmp loc_100BCFB  +
cmp esi [eax] +
jnz loc_100BCFE  +
jmp loc_10165A9  +
***
push [ebp+arg_4]  +
jmp loc_100BDAF  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_100BDC5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_102D178 +
cmp esi eax +
mov dl 1 +
jz loc_100BD95  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jnz loc_1015942  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_100BD7E  +
cmp byte ptr [edi+8] 0 +
jnz loc_100BD48  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jnz loc_100BDCE  +
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jnb loc_100BD4D  +
push eax  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_1009BE8  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1015949  +
jmp loc_100BD48  +
***
push [ebp+arg_4]  +
jmp loc_100BE45  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_100BE5B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_102D1AC +
cmp esi eax +
mov dl 1 +
jz loc_100BE2B  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jnz loc_1015E87  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_100BE14  +
cmp byte ptr [edi+8] 0 +
jnz loc_100BDDE  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jnz loc_100BE64  +
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jnb loc_100BDE3  +
push eax  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_100BA67  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1015E8E  +
jmp loc_100BDDE  +
***
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jnb loc_100BE81  +
push eax  +
jmp loc_100BECA  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_100BEE0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_1027058 +
cmp esi eax +
mov dl 1 +
jnz loc_100BEE9  +
cmp byte ptr [edi+8] 0 +
jnz loc_100BEC7  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jz loc_100BE74  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1015EDB  +
push [ebp+arg_4]  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_100B674  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jnz loc_1015ED4  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_100BEEE  +
jmp loc_100BEAD  +
***
push [ebp+arg_4]  +
jmp loc_100BF6E  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_100BF84  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_102D1F0 +
cmp esi eax +
mov dl 1 +
jz loc_100BF54  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jnz loc_101661E  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_100BF3D  +
cmp byte ptr [edi+8] 0 +
jnz loc_100BF07  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jnz loc_100BF8D  +
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jnb loc_100BF0C  +
push eax  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_100BBAB  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1016625  +
jmp loc_100BF07  +
***
push [ebp+arg_4]  +
jmp loc_100C004  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_100C01A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_102708C +
cmp esi eax +
mov dl 1 +
jz loc_100BFEA  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jnz loc_1016676  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_100BFD3  +
cmp byte ptr [edi+8] 0 +
jnz loc_100BF9D  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jnz loc_100C023  +
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jnb loc_100BFA2  +
push eax  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_100BCA1  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_101667D  +
jmp loc_100BF9D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
call sub_1008F3A  +
mov [ebp-4] eax +
xor edi edi +
xor esi esi +
xor eax eax +
cmp dword_102D230[eax] edi +
jz loc_100C063  +
add eax 1Ch +
inc esi  +
cmp eax 380h +
jb loc_100C050  +
cmp esi 20h +
jnb loc_1017120  +
push ebx  +
push 2  +
call ds:GetCurrentThread  +
push eax  +
call ds:SetThreadPriority  +
push edi  +
push edi  +
call ds:CoInitializeEx  +
call sub_1002CAC  +
imul esi esi +
call ds:GetCurrentThreadId  +
mov ebx ds:CreateEventW +
push edi  +
push edi  +
mov dword_102D230[esi] eax +
mov eax hThread +
push edi  +
push edi  +
mov dword_102D234[esi] eax +
mov dword_102D238[esi] edi +
call ebx  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword_102D23C[esi] eax +
call ebx  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword_102D240[esi] eax +
call ebx  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword_102D244[esi] eax +
call ebx  +
mov ebx [ebp-4] +
mov [ebx+84h] eax +
mov dword_102D248[esi] 1 +
call sub_1002CC8  +
mov eax dword_102D228 +
mov [ebp-14h] eax +
mov eax dword_102D240[esi] +
mov [ebp-10h] eax +
mov eax [ebx+84h] +
mov ecx offset unk_1027098 +
mov [ebp-0Ch] eax +
call sub_100C134  +
push 1  +
push dword ptr [ebx+80h]  +
lea eax [ebp-14h] +
push edi  +
push eax  +
push 3  +
call ds:WaitForMultipleObjectsEx  +
jmp loc_1016FF2  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_1009364  +
mov edi 2000000h +
push edi  +
push 0  +
push 0  +
call ds:OpenInputDesktop  +
test eax eax +
mov [esi+2E0h] eax +
jz loc_1017C76  +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetThreadDesktop  +
push dword ptr [esi+2E0h]  +
mov edi eax +
call ds:SetThreadDesktop  +
test eax eax +
mov ecx esi +
jz loc_1017C97  +
push 202h  +
push offset unk_102D5B0  +
call sub_100C1A0  +
push edi  +
call ds:CloseDesktop  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi 2000000h +
push esi  +
xor ebx ebx +
push ebx  +
push ebx  +
call ds:OpenInputDesktop  +
mov edi eax +
cmp edi ebx +
jnz loc_100C1F2  +
push esi  +
push ebx  +
push ebx  +
mov esi offset szDesktop +
push esi  +
call ds:OpenDesktopW  +
push esi  +
push 100h  +
push [ebp+pvInfo]  +
mov edi eax +
call sub_100A228  +
test eax eax +
jnz loc_1017C64  +
cmp edi ebx +
jnz loc_100C1F2  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
lea eax [ebp+nLengthNeeded] +
push eax  +
push [ebp+nLengthNeeded]  +
push [ebp+pvInfo]  +
push 2  +
push edi  +
call ds:GetUserObjectInformationW  +
test eax eax +
jz loc_100C20C  +
xor ebx ebx +
inc ebx  +
push edi  +
call ds:CloseDesktop  +
jmp loc_100C1E9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_1027094 edi +
jz loc_100C27D  +
inc dword_102D1E0  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jz loc_100C25C  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
push edi  +
push dword_1027094  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax ebx +
mov dword_1027094 eax +
mov [eax] edi +
mov eax dword_1027094 +
xor ebx ebx +
mov [eax+8] edi +
jmp loc_100C242  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_1027088 edi +
jz loc_100C2FA  +
inc dword_102D1F4  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jz loc_100C2D9  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
push edi  +
push dword_1027088  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax ebx +
mov dword_1027088 eax +
mov [eax] edi +
mov eax dword_1027088 +
xor ebx ebx +
mov [eax+8] edi +
jmp loc_100C2BF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_1027058 edi +
jz loc_100C377  +
inc dword_102D1F8  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jz loc_100C356  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
push edi  +
push dword_1027058  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax ebx +
mov dword_1027058 eax +
mov [eax] edi +
mov eax dword_1027058 +
xor ebx ebx +
mov [eax+8] edi +
jmp loc_100C33C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_1027050 edi +
jz loc_100C3F4  +
inc dword_102D1FC  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jz loc_100C3D3  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
push edi  +
push dword_1027050  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax ebx +
mov dword_1027050 eax +
mov [eax] edi +
mov eax dword_1027050 +
xor ebx ebx +
mov [eax+8] edi +
jmp loc_100C3B9  +
***
mov eax [edi+4] +
cmp ebx [eax] +
jnz loc_1016C70  +
push [ebp+arg_4]  +
jmp loc_100582F  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
jmp loc_1005845  +
***
mov eax offset byte_1023AB1 +
call sub_10014DD  +
sub esp 4Ch +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov ebx ecx +
mov [ebp-24h] esi +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
mov [ebp-4] esi +
call ds:GetDesktopWindow  +
push eax  +
mov [ebp-18h] eax +
call ds:GetDC  +
mov [ebp-10h] eax +
lea edi [ebp-58h] +
mov dword ptr [ebp-14h] 3 +
mov ecx edi +
call sub_100923F  +
add edi 10h +
dec dword ptr [ebp-14h]  +
jnz loc_100C46A  +
mov eax [ebx+94h] +
mov edi ds:GetDeviceCaps +
push 4  +
push dword ptr [ebp-10h]  +
mov [ebp-58h] eax +
mov eax [ebx+9Ch] +
mov [ebp-54h] eax +
mov dword ptr [ebp-50h] 2 +
call edi  +
cdq   +
push 0Ah  +
pop ecx  +
idiv  ecx +
push dword_10277A0  +
push esi  +
mov ecx eax +
mov eax [ebx+9Ch] +
sub eax [ebx+94h] +
cdq   +
idiv  ecx +
lea ecx [ebp-28h] +
mov [ebp-14h] eax +
fild  dword ptr [ebp-14h] +
fstp  dword ptr [ebp-4Ch] +
call sub_100A9F5  +
lea ecx [ebx+0ECh] +
push esi  +
call sub_100C72F  +
mov eax [ebx+98h] +
push 6  +
push dword ptr [ebp-10h]  +
mov [ebp-48h] eax +
mov eax [ebx+0A0h] +
mov [ebp-44h] eax +
mov dword ptr [ebp-40h] 2 +
call edi  +
cdq   +
push 0Ah  +
pop ecx  +
idiv  ecx +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-18h]  +
mov ecx eax +
mov eax [ebx+0A0h] +
sub eax [ebx+98h] +
cdq   +
idiv  ecx +
mov [ebp-14h] eax +
fild  dword ptr [ebp-14h] +
fstp  dword ptr [ebp-3Ch] +
call ds:ReleaseDC  +
lea edi [ebx+0ECh] +
push 1  +
mov ecx edi +
call sub_100C72F  +
push dword_10277A4  +
lea ecx [ebp-28h] +
push dword ptr [ebp-20h]  +
call sub_100A9F5  +
fldz   +
push 3  +
fstp  dword ptr [ebp-2Ch] +
mov ecx edi +
mov [ebp-38h] esi +
mov dword ptr [ebp-34h] 8 +
mov [ebp-30h] esi +
call sub_100C72F  +
push dword_10277AC  +
lea ecx [ebp-28h] +
push dword ptr [ebp-20h]  +
call sub_100A9F5  +
cmp [ebp-24h] esi +
mov edi [ebp-20h] +
mov [ebx+110h] esi +
mov [ebx+0E4h] esi +
mov [ebx+0E8h] esi +
jz loc_1016C8A  +
mov eax edi +
sub eax [ebp-24h] +
sar eax 4 +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax esi +
pop ecx  +
mov [ebx+0D0h] eax +
jz loc_1016C91  +
push eax  +
push edi  +
push dword ptr [ebp-24h]  +
call sub_1008DAA  +
cmp [ebp-24h] esi +
jz loc_1016C9B  +
sub edi [ebp-24h] +
sar edi 4 +
lea eax [ebx+0D8h] +
mov [ebx+0CCh] edi +
push eax  +
lea edi [ebx+0D4h] +
push edi  +
mov ecx ebx +
call sub_100F2FF  +
cmp [edi] esi +
jz loc_100C624  +
push 4  +
call ??2@YAPAXI@Z  +
push 4  +
mov [ebx+0DCh] eax +
call ??2@YAPAXI@Z  +
mov edx [ebx+0DCh] +
cmp edx esi +
pop ecx  +
pop ecx  +
lea ecx [ebx+0E0h] +
mov [ecx] eax +
jz loc_1016C91  +
cmp eax esi +
jz loc_1016C91  +
or dword ptr [edx] 0FFFFFFFFh +
mov eax [ecx] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax [ebx+0C0h] +
cmp eax esi +
jnz loc_1016CA2  +
mov eax [ebx+0C8h] +
cmp eax esi +
jnz loc_1016CBA  +
mov eax [ebx+0CCh] +
cmp eax esi +
mov [ebx+0BCh] eax +
jz loc_100C6AD  +
shl eax 5 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax esi +
pop ecx  +
mov [ebx+0C0h] eax +
jz loc_1016C91  +
xor edx edx +
cmp [ebx+0BCh] esi +
jbe loc_100C6AD  +
xor ecx ecx +
xor eax eax +
mov esi [ebx+0D0h] +
mov edi [ebx+0C0h] +
add edi ecx +
add esi eax +
movs   +
movs   +
movs   +
movs   +
mov edi [ebx+0C0h] +
lea edi [edi+ecx+10h] +
lea esi [ebp+eax-58h] +
movs   +
movs   +
movs   +
inc edx  +
movs   +
add eax 10h +
add ecx 20h +
cmp edx [ebx+0BCh] +
jb loc_100C676  +
xor esi esi +
mov eax [ebx+0D4h] +
cmp eax esi +
mov [ebx+0C4h] eax +
jz loc_100C6F6  +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax esi +
pop ecx  +
mov [ebx+0C8h] eax +
jz loc_1016C91  +
mov ecx [ebx+0C4h] +
mov esi [ebx+0D8h] +
shl ecx 4 +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
xor esi esi +
mov eax [ebx+0C4h] +
add eax 1Fh +
shr eax 5 +
add eax [ebx+0BCh] +
shl eax 2 +
mov [ebx+0B8h] eax +
lea ecx [ebp-28h] +
call sub_1006CCE  +
mov ecx [ebp-0Ch] +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
push esi  +
push edi  +
jl loc_100C773  +
cmp ebx 3Fh +
jge loc_100C773  +
mov edx [ecx+4] +
xor eax eax +
test edx edx +
jbe loc_100C761  +
mov esi [ecx] +
mov edi [esi] +
cmp edi 0FFFFFFFFh +
jz loc_100C761  +
cmp edi ebx +
jz loc_100C773  +
inc eax  +
add esi 8 +
cmp eax edx +
jb loc_100C74E  +
cmp eax edx +
jnb loc_100C773  +
mov ecx [ecx] +
mov [ecx+eax*8] ebx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
mov eax 80004005h +
jmp loc_100C76C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 1  +
push 1  +
push 5  +
call sub_100C7AA  +
test eax eax +
jz loc_1017BC0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryW  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1027090 +
push edi  +
push 47h  +
mov [ebp+var_4] eax +
pop ecx  +
xor eax eax +
lea edi [ebp+var_120] +
stos   +
mov eax [ebp+arg_0] +
push 3  +
mov [ebp+var_11C] eax +
mov eax [ebp+arg_4] +
push 2  +
mov [ebp+var_118] eax +
mov ax [ebp+arg_8] +
push 0  +
push 0  +
mov [ebp+var_120] 11Ch +
mov [ebp+var_C] ax +
call VerSetConditionMask  +
push 3  +
push 1  +
push edx  +
push eax  +
call VerSetConditionMask  +
push 3  +
push 20h  +
push edx  +
push eax  +
call VerSetConditionMask  +
push edx  +
push eax  +
push 23h  +
lea eax [ebp+var_120] +
push eax  +
call ds:VerifyVersionInfoW  +
mov ecx [ebp+var_4] +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
call sub_1007DC7  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_100C8BE  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_102D1DC edi +
jnz loc_100C881  +
mov eax ebx +
mov dword_102D1DC eax +
mov [eax] edi +
mov eax dword_102D1DC +
xor ebx ebx +
mov [eax+8] edi +
inc dword_102D1E4  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jnz sub_1015D24  +
push edi  +
push dword_102D1DC  +
mov ecx esi +
call sub_100C8BE  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 20h  +
call sub_100351E  +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov ecx [ebp+arg_4] +
mov [eax+1Ch] ecx +
pop ebp  +
retn 8  +
***
mov eax offset byte_1023C75 +
call sub_10014DD  +
sub esp 74h +
mov eax dword_1027090 +
push ebx  +
mov [ebp-10h] eax +
lea eax [ebp-78h] +
push eax  +
push 1  +
mov ebx ecx +
mov dword ptr [ebp-78h] 68h +
call ds:GetDesktopWindow  +
push eax  +
call ds:MonitorFromWindow  +
push eax  +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_1016D94  +
push esi  +
push edi  +
lea eax [ebp-50h] +
push eax  +
lea ecx [ebx+8Ch] +
call sub_100CA96  +
push offset aScreen  +
lea ecx [ebx+90h] +
call sub_100CA96  +
xor eax eax +
mov ecx ebx +
mov dword ptr [ebx+0B4h] 2 +
mov [ebx+238h] eax +
mov [ebx+468h] eax +
mov [ebx+46Ch] eax +
mov [ebx+70h] eax +
mov [ebx+44Ch] eax +
call sub_1007CDC  +
lea eax [ebx+130h] +
mov esi eax +
lea edi [ebx+94h] +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
lea edi [ebx+0A4h] +
movs   +
movs   +
movs   +
push 13h  +
movs   +
call ds:GetSystemMetrics  +
xor edi edi +
lea esi [ebx+0ECh] +
push 6  +
mov ecx esi +
mov [ebx+234h] eax +
mov [ebx+22Ch] edi +
mov [ebx+230h] edi +
call sub_10092A9  +
test eax eax +
jl loc_100CA8A  +
push 17h  +
mov ecx esi +
call sub_100C72F  +
test eax eax +
jl loc_100CA8A  +
mov ecx ebx +
call sub_100DDA8  +
test eax eax +
jl loc_100CA8A  +
mov ecx ebx +
call sub_100C42D  +
test eax eax +
jl loc_100CA8A  +
push ebx  +
push esi  +
lea ecx [ebx+2E8h] +
call sub_100E115  +
test eax eax +
jl loc_100CA8A  +
mov ecx ebx +
call sub_100CABD  +
test eax eax +
jl loc_100CA8A  +
mov ecx ebx +
call sub_100F1F6  +
cmp eax edi +
jl loc_100CA73  +
push edi  +
mov ecx ebx +
call sub_1007089  +
push ebx  +
lea ecx [ebp-80h] +
call sub_10016B1  +
xor esi esi +
lea eax [ebp-7Ch] +
inc esi  +
push eax  +
lea ecx [ebx+270h] +
mov [ebp-4] edi +
mov [ebp-7Ch] esi +
call sub_100271D  +
lea eax [ebp-7Ch] +
push eax  +
lea ecx [ebx+2A0h] +
mov [ebp-7Ch] esi +
call sub_1002B84  +
mov eax [ebp-80h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add eax 2D0h +
push eax  +
call ds:LeaveCriticalSection  +
mov ecx ebx +
call sub_100CDC0  +
xor eax eax +
pop edi  +
pop esi  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
mov ecx [ebp-10h] +
pop ebx  +
call sub_1007DC7  +
leave   +
retn   +
mov eax 80004005h +
jmp loc_100CA73  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:SysFreeString  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1023B97 +
call sub_10014DD  +
sub esp 48h +
push ebx  +
mov eax 80000000h +
push esi  +
push edi  +
mov [ebp-34h] eax +
mov [ebp-30h] eax +
dec eax  +
xor ebx ebx +
test byte ptr dword_102D220 1 +
mov edi ecx +
mov [ebp-14h] edi +
mov [ebp-2Ch] eax +
mov [ebp-28h] eax +
mov [ebp-18h] ebx +
jnz loc_100CB2E  +
mov esi off_1027794 +
or dword_102D220 1 +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
mov ecx offset unk_102D200 +
movs   +
call sub_100CC3A  +
mov esi off_1027798 +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
mov ecx offset unk_102D210 +
movs   +
call sub_100CC3A  +
mov edi [ebp-14h] +
lea ecx [ebp-14h] +
lea eax [edi+24h] +
push ecx  +
push eax  +
mov [ebp-1Ch] eax +
call sub_1006AA5  +
cmp eax ebx +
jl loc_100CC26  +
cmp [ebp-14h] ebx +
jg loc_100CC26  +
lea eax [ebp-14h] +
push eax  +
mov [ebp-14h] ebx +
call sub_100F50C  +
cmp eax ebx +
jl loc_100CC26  +
mov esi [ebp-14h] +
cmp esi ebx +
jz loc_100CC26  +
mov byte ptr [ebp-24h] 1 +
mov [ebp-20h] esi +
lea eax [edi+50h] +
push eax  +
mov [ebp-4] ebx +
mov dword ptr [ebp-54h] 2 +
mov dword ptr [ebp-50h] offset unk_102D200 +
mov [ebp-4Ch] ebx +
mov [ebp-48h] ebx +
mov [ebp-44h] ebx +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
mov [ebp-14h] eax +
call ds:InterlockedIncrement  +
push ebx  +
push 1  +
lea eax [ebp-54h] +
push eax  +
push 10h  +
lea eax [ebp-34h] +
push eax  +
call ds:GetDesktopWindow  +
push eax  +
push edi  +
mov ecx esi +
call sub_1004EA2  +
push dword ptr [ebp-14h]  +
mov edi eax +
call ds:InterlockedDecrement  +
cmp edi ebx +
jl loc_1016D28  +
mov [ebp-10h] ebx +
lea edx [ebp-10h] +
push edx  +
lea eax [esi+8] +
mov ecx [eax] +
push offset dword_10026AC  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx]  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
call sub_1005515  +
mov edi eax +
cmp edi ebx +
mov eax [ebp-10h] +
mov [ebp-4] bl +
jl loc_1016D1E  +
cmp eax ebx +
mov [ebp-24h] bl +
jz loc_100CC24  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1027090 +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_4] eax +
mov eax ecx +
mov ecx [ebp+var_4] +
lea esi [ebp+var_14] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
call sub_1007DC7  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov byte ptr [esi+8] 0 +
call sub_100CC8D  +
mov eax esi +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_102D178 edi +
jnz loc_100CCC8  +
mov eax ebx +
mov dword_102D178 eax +
mov [eax] edi +
mov eax dword_102D178 +
xor ebx ebx +
mov [eax+8] edi +
inc dword_102D17C  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jnz sub_1014E36  +
push edi  +
push dword_102D178  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-1] +
push eax  +
lea eax [ebp-1] +
push eax  +
mov ecx offset unk_1027004 +
call sub_100CD2F  +
push offset loc_102436E  +
call sub_1010624  +
pop ecx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov byte ptr [esi+8] 0 +
call sub_100CD48  +
mov eax esi +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_1027000 edi +
jnz loc_100CD83  +
mov eax ebx +
mov dword_1027000 eax +
mov [eax] edi +
mov eax dword_1027000 +
xor ebx ebx +
mov [eax+8] edi +
inc dword_102D1A8  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jnz sub_1015500  +
push edi  +
push dword_1027000  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1027090 +
push ebx  +
push esi  +
mov ebx ds:RegCreateKeyExW +
push edi  +
mov [ebp+var_4] eax +
lea eax [ebp+dwDisposition] +
push eax  +
xor edi edi +
lea eax [ebp+hKey] +
push eax  +
push edi  +
mov esi 20006h +
push esi  +
push edi  +
push edi  +
push edi  +
push offset aSoftwareMicros  +
push 80000001h  +
mov [ebp+var_108] ecx +
mov [ebp+hKey] edi +
call ebx  +
test eax eax +
jnz loc_100CEAE  +
cmp [ebp+hKey] edi +
jz loc_100CEAE  +
push 0Ah  +
lea eax [ebp+SubKey] +
push eax  +
mov eax [ebp+var_108] +
push dword ptr [eax+4]  +
call ds:_itow  +
add esp 0Ch +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push edi  +
push esi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
mov [ebp+phkResult] edi +
call ebx  +
test eax eax +
mov esi ds:RegCloseKey +
jnz loc_100CEA6  +
cmp [ebp+phkResult] edi +
jz loc_100CEA6  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push edi  +
push offset aType  +
push [ebp+phkResult]  +
mov dword ptr [ebp+Data] 3 +
call ds:RegSetValueExW  +
push [ebp+phkResult]  +
call esi  +
push [ebp+hKey]  +
call esi  +
mov esi [ebp+var_108] +
lea eax [esi+10h] +
neg esi  +
sbb esi esi +
and esi eax +
mov ecx [esi+8] +
mov eax [ecx] +
add esi 4 +
cmp eax ecx +
mov [ebp+var_108] eax +
jz loc_100CEF4  +
mov eax [eax+10h] +
cmp eax edi +
jz loc_100CF01  +
lea ecx [eax-8] +
call sub_100CF0A  +
lea ecx [ebp+var_108] +
call sub_10111DF  +
mov eax [ebp+var_108] +
cmp eax [esi+4] +
jnz loc_100CECF  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
call sub_1007DC7  +
leave   +
retn   +
xor ecx ecx +
jmp loc_100CED9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1027090 +
mov [ebp+var_4] eax +
mov eax [ecx+3Ch] +
push esi  +
xor esi esi +
cmp eax esi +
mov [ebp+hKey] esi +
jz loc_100CFA4  +
add eax 0FFFFFFF8h +
push dword ptr [ecx+4]  +
push dword ptr [eax+4]  +
lea eax [ebp+SubKey] +
push offset aSoftwareMicros  +
push offset aSUU  +
push 100h  +
push eax  +
call sub_100CFAD  +
add esp 18h +
test eax eax +
jnz loc_100CF99  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 20006h  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+SubKey] +
push eax  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_100CF99  +
cmp [ebp+hKey] esi +
jz loc_100CF99  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop esi  +
call sub_1007DC7  +
leave   +
retn   +
xor eax eax +
jmp loc_100CF30  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 7FFFFFFFh +
ja loc_10157BA  +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CFD8  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
test eax eax +
jz loc_101576B  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [eax-1] +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100D01B  +
cmp eax esi +
ja loc_100D01B  +
jz loc_1015775  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
mov ebx 8007007Ah +
jmp loc_1015775  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_1027090 +
push ebx  +
push esi  +
push edi  +
mov edi ds:RegCreateKeyExW +
mov [ebp+var_4] eax +
lea eax [ebp+dwDisposition] +
push eax  +
xor ebx ebx +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 20006h  +
push ebx  +
push ebx  +
push ebx  +
push offset aSoftwareMicros  +
push 80000001h  +
mov esi ecx +
mov [ebp+hKey] ebx +
call edi  +
test eax eax +
jnz loc_100D141  +
cmp [ebp+hKey] ebx +
jz loc_100D141  +
push 0Ah  +
lea eax [ebp+SubKey] +
push eax  +
push dword ptr [esi+4]  +
call ds:_itow  +
add esp 0Ch +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push ebx  +
push 20006h  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
mov [ebp+phkResult] ebx +
call edi  +
test eax eax +
jnz loc_100D135  +
cmp [ebp+phkResult] ebx +
jz loc_100D135  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push offset aType  +
push [ebp+phkResult]  +
mov dword ptr [ebp+Data] 2 +
call ds:RegSetValueExW  +
lea edi [esi+44Ch] +
mov eax [edi] +
push dword ptr [eax]  +
call ds:__imp_wcslen  +
pop ecx  +
lea eax [eax+eax+2] +
push eax  +
mov eax [edi] +
push dword ptr [eax]  +
push 1  +
push ebx  +
push offset aHiddevicepat_0  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
lea eax [esi+10h] +
neg esi  +
sbb esi esi +
and esi eax +
mov ecx [esi+8] +
mov eax [ecx] +
add esi 4 +
cmp eax ecx +
mov [ebp+phkResult] eax +
jz loc_100D181  +
mov eax [eax+10h] +
cmp eax ebx +
jz loc_100D18E  +
lea ecx [eax-8] +
call sub_100D1B5  +
lea ecx [ebp+phkResult] +
call sub_10111DF  +
mov eax [ebp+phkResult] +
cmp eax [esi+4] +
jnz loc_100D15C  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
call sub_1007DC7  +
leave   +
retn   +
xor ecx ecx +
jmp loc_100D166  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1027090 +
push esi  +
mov esi ecx +
mov [ebp+var_4] eax +
mov eax [esi+3Ch] +
push edi  +
xor edi edi +
cmp eax edi +
mov [ebp+hKey] edi +
jz loc_100D271  +
add eax 0FFFFFFF8h +
push dword ptr [esi+4]  +
push dword ptr [eax+4]  +
lea eax [ebp+SubKey] +
push offset aSoftwareMicros  +
push offset aSUU  +
push 100h  +
push eax  +
call sub_100CFAD  +
add esp 18h +
test eax eax +
jnz loc_100D265  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push 20006h  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push 80000001h  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_100D265  +
cmp [ebp+hKey] edi +
jz loc_100D265  +
push 4  +
add esi 44h +
push esi  +
push 4  +
push edi  +
push offset aHidcursorid  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
call sub_1007DC7  +
leave   +
retn   +
xor eax eax +
jmp loc_100D1E2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1027090 +
mov ecx [ebp+arg_4] +
push ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
xor ebx ebx +
cmp eax ebx +
push esi  +
push edi  +
mov [ebp+var_218] ecx +
jz loc_100D3DA  +
cmp ecx ebx +
jz loc_100D3DA  +
push dword ptr [eax]  +
lea eax [ebp+SubKey] +
push offset aSoftwareMicros  +
push offset aSU  +
push 100h  +
push eax  +
mov [ebp+hKey] ebx +
call sub_100CFAD  +
add esp 14h +
test eax eax +
jnz loc_100D3DA  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
lea eax [ebp+SubKey] +
push eax  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100D3DA  +
cmp [ebp+hKey] ebx +
jz loc_100D3DA  +
mov esi ds:RegEnumKeyW +
mov edi 101h +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
mov [ebp+var_214] ebx +
push ebx  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jnz loc_10157EC  +
push [ebp+var_218]  +
lea eax [ebp+SubKey] +
push offset aU  +
push eax  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_10157D3  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push ebx  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
mov [ebp+phkResult] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10157D3  +
cmp [ebp+phkResult] ebx +
jz loc_10157D3  +
push [ebp+phkResult]  +
mov esi ds:RegCloseKey +
call esi  +
push [ebp+hKey]  +
call esi  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
call sub_1007DC7  +
leave   +
retn 8  +
xor eax eax +
jmp loc_100D3CB  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_10049A5  +
mov dword ptr [esi] offset off_100D40C +
and dword ptr [esi+3Ch] 0 +
and dword ptr [esi+28h] 0 +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-1] +
push eax  +
lea eax [ebp-1] +
push eax  +
mov ecx offset unk_102D1B4 +
call sub_100D43F  +
push offset loc_102438E  +
call sub_1010624  +
pop ecx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov byte ptr [esi+8] 0 +
call sub_100D458  +
mov eax esi +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_102D1AC edi +
jnz loc_100D493  +
mov eax ebx +
mov dword_102D1AC eax +
mov [eax] edi +
mov eax dword_102D1AC +
xor ebx ebx +
mov [eax+8] edi +
inc dword_102D1B0  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jnz sub_1015887  +
push edi  +
push dword_102D1AC  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
mov [esi+3Ch] eax +
mov eax [ebp+arg_4] +
lea ecx [esi+40h] +
mov [esi+44h] eax +
call sub_100CA96  +
mov ecx esi +
mov dword ptr [esi+48h] 1 +
call sub_100D507  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax offset byte_1022EDD +
call sub_10014DD  +
sub esp 24h +
mov eax dword_1027090 +
and dword ptr [ebp-2Ch] 0 +
and dword ptr [ebp-24h] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] eax +
mov edi ecx +
and dword ptr [ebp-28h] 0 +
lea eax [ebp-28h] +
push eax  +
call sub_100D745  +
test eax eax +
jl loc_100D5FB  +
mov ebx [ebp-28h] +
test ebx ebx +
jz loc_100D5FB  +
xor eax eax +
cmp [ebp-24h] eax +
mov ecx edi +
setnz al  +
lea eax [eax+eax+25h] +
mov esi eax +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-24h]  +
call sub_1008C95  +
imul esi esi +
push 0  +
lea eax aDigitizer[esi] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov eax edi +
neg eax  +
lea ecx [edi+8] +
sbb eax eax +
and eax ecx +
push eax  +
mov ecx ebx +
call sub_1008BC9  +
test eax eax +
jl loc_100D61F  +
and dword ptr [ebp-30h] 0 +
and dword ptr [ebp-4] 0 +
lea edx [ebp-30h] +
push edx  +
lea eax [ebx+8] +
mov ecx [eax] +
push offset dword_100831C  +
push eax  +
call dword ptr [ecx]  +
push dword ptr [ebp-30h]  +
lea eax [edi+0Ch] +
push dword ptr [ebp-2Ch]  +
push eax  +
call sub_100D632  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-28h] eax +
mov eax [ebp-30h] +
test eax eax +
jz loc_100D5CF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [ebp-28h] 0 +
jl loc_100D61F  +
mov eax [edi+3Ch] +
test eax eax +
jz loc_100D629  +
lea ebx [eax-8] +
push dword_1027C30[esi]  +
lea ecx [ebx+0ECh] +
call sub_100C72F  +
test eax eax +
jl loc_10159F9  +
inc dword ptr [ebp-2Ch]  +
inc dword ptr [ebp-24h]  +
cmp dword ptr [ebp-24h] 2 +
jb loc_100D529  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
mov ecx [ebp-10h] +
pop ebx  +
call sub_1007DC7  +
leave   +
retn   +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
jmp loc_100D5D5  +
xor ebx ebx +
jmp loc_100D5DF  +
***
mov eax offset dword_1022E6C +
call sub_10014DD  +
sub esp 1Ch +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
call sub_1004C5D  +
and dword ptr [ebp-4] 0 +
push eax  +
lea ecx [ebp+10h] +
call sub_10054DC  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-18h] +
call sub_10054B6  +
mov eax [ebp+10h] +
test eax eax +
mov byte ptr [ebp-4] 1 +
jz loc_100D675  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
test eax eax +
mov byte ptr [ebp-4] 2 +
jz loc_100D686  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-20h] +
call sub_1004A79  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
add ecx 4 +
mov byte ptr [ebp-4] 3 +
call sub_100D6EA  +
mov eax [ebp-1Ch] +
test eax eax +
mov byte ptr [ebp-4] 2 +
jz loc_100D6BA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp-24h] 0 +
mov eax [ebp-14h] +
jz loc_1015999  +
test eax eax +
jz loc_100D6D5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_1009E8A  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100D3EB  +
lea eax [esi+44h] +
push eax  +
mov dword ptr [esi] offset off_100D73C +
mov dword ptr [esi+8] offset off_1001CA4 +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
call sub_100996A  +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_100D768  +
leave   +
retn 4  +
***
mov eax offset byte_1022E99 +
call sub_10014DD  +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push offset stru_102D190  +
call ds:EnterCriticalSection  +
mov ebx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push ebx  +
call sub_1009911  +
test eax eax +
jge loc_10159C3  +
and dword ptr [ebp-1Ch] 0 +
and dword ptr [ebp-4] 0 +
push 5Ch  +
mov dword ptr [ebp-14h] 8007000Eh +
call ??2@YAPAXI@Z  +
test eax eax +
pop ecx  +
jz loc_100D82C  +
mov ecx eax +
call sub_1001B89  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100D808  +
lea edi [esi+0Ch] +
push edi  +
call ds:InterlockedIncrement  +
push edi  +
call ds:InterlockedDecrement  +
mov eax [ebx] +
mov [esi+4] eax +
mov eax [ebx] +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov ecx offset unk_102D180 +
mov [ebp-1Ch] esi +
call sub_100D835  +
cmp byte ptr [ebp-14h] 0 +
jz loc_10159EA  +
mov dword ptr [ebp-14h] 1 +
mov eax [ebp+0Ch] +
mov [eax] esi +
push offset stru_102D190  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
xor eax eax +
jmp loc_100D7BD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_100BD5B  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
call sub_100D86C  +
xor eax eax +
retn   +
***
mov eax dword_102704C +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
lea ecx [esi+24h] +
mov [esi+6Ch] eax +
mov [esi+114h] edi +
mov [esi+118h] edi +
mov [esi+39Ch] edi +
mov [esi+11Ch] edi +
mov [esi+120h] edi +
mov [esi+124h] edi +
mov [esi+128h] edi +
mov [esi+12Ch] edi +
mov [esi+130h] edi +
mov [esi+134h] edi +
mov [esi+138h] edi +
mov [esi+13Ch] edi +
mov [esi+22Ch] edi +
mov [esi+230h] edi +
mov dword ptr [esi+234h] 1 +
mov [esi+74h] edi +
mov [esi+78h] edi +
mov [esi+7Ch] edi +
mov [esi+80h] edi +
mov [esi+84h] edi +
call sub_100DA39  +
lea eax [esi+2D0h] +
push eax  +
call ds:InitializeCriticalSection  +
or dword ptr [esi+88h] 0FFFFFFFFh +
mov [esi+3A8h] edi +
mov [esi+3A4h] edi +
call ds:GetDoubleClickTime  +
push offset String  +
mov [esi+398h] eax +
mov [esi+238h] edi +
call ds:GlobalAddAtomW  +
mov [esi+3A0h] edi +
mov [esi+3ACh] edi +
mov [esi+408h] edi +
mov [esi+440h] edi +
mov [esi+434h] edi +
mov [esi+40Ch] edi +
mov [esi+3C8h] edi +
mov [esi+3C0h] edi +
mov [esi+3B8h] edi +
mov [esi+3B0h] edi +
mov [esi+444h] edi +
mov [esi+438h] edi +
mov [esi+410h] edi +
mov [esi+3CCh] edi +
mov [esi+3C4h] edi +
mov [esi+3BCh] edi +
mov [esi+3B4h] edi +
mov [esi+3E4h] edi +
mov [esi+414h] edi +
mov [esi+418h] edi +
mov [esi+41Ch] edi +
mov [esi+420h] edi +
mov [esi+424h] edi +
mov [esi+428h] edi +
mov [esi+42Ch] edi +
mov [esi+430h] edi +
mov [esi+390h] edi +
mov [esi+394h] edi +
mov [esi+404h] ax +
pop edi  +
mov byte ptr [esi+448h] 1 +
xor eax eax +
pop esi  +
retn   +
***
add ecx 14h +
push ecx  +
call ds:InitializeCriticalSection  +
xor eax eax +
retn   +
***
mov ecx esi +
call sub_100DA57  +
jmp loc_100273B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
push 0  +
push 400h  +
mov ebx ecx +
call sub_1006B69  +
cmp dword ptr [ebx+2Ch] 0 +
mov esi eax +
jnz loc_1015C5A  +
mov ecx ebx +
mov dword ptr [ebx+28h] 2 +
call sub_1008634  +
mov eax [ebx+24h] +
mov [eax+4] esi +
mov eax [ebx+24h] +
add eax 4 +
push eax  +
add esi 804h +
push esi  +
lea ecx [ebp+var_18] +
call sub_1008718  +
lea edi [ebx+4] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+14h] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
lea ecx [ebp+var_8] +
call sub_100DAD2  +
mov ebx [ebp+var_8] +
jmp loc_100AB73  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+1Ch] 0 +
jnz loc_100DAEB  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jz loc_1015B58  +
mov eax [ecx] +
cmp eax dword_102D1DC +
jnz loc_1015B60  +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_100DB04  +
mov [esi] eax +
pop esi  +
retn   +
mov [esi] eax +
mov ecx eax +
jmp loc_100DAF9  +
***
mov eax offset byte_1023019 +
call sub_10014DD  +
sub esp 54h +
mov eax dword_1027090 +
push ebx  +
push esi  +
mov esi [ebp+8] +
xor ebx ebx +
push edi  +
mov edi [ebp+0Ch] +
mov [ebp-24h] ecx +
mov [esi] ebx +
lea ecx [ebp-58h] +
mov [ebp-10h] eax +
mov [ebp-40h] esi +
mov [ebp-44h] edi +
mov [edi] ebx +
mov [ebp-50h] bl +
call sub_100C846  +
mov eax [ebp-24h] +
lea ecx [ebp-30h] +
add eax 10h +
push ecx  +
push eax  +
mov [ebp-4] ebx +
mov [ebp-30h] ebx +
mov [ebp-48h] eax +
call sub_1006AA5  +
cmp [ebp-30h] ebx +
mov [ebp-24h] ebx +
jle loc_100DC49  +
mov [ebp-3Ch] ebx +
lea eax [ebp-3Ch] +
push eax  +
push dword ptr [ebp-24h]  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp-48h]  +
call sub_100925D  +
mov [ebp-28h] ebx +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-3Ch]  +
mov byte ptr [ebp-4] 2 +
call sub_1003605  +
mov eax [ebp-28h] +
lea edx [ebp-38h] +
push edx  +
mov [ebp-38h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp [ebp-38h] ebx +
mov [ebp-2Ch] ebx +
jle loc_100DC19  +
sub esp 10h +
mov edi esp +
mov esi offset dword_1008BB4 +
movs   +
movs   +
movs   +
lea ecx [ebp-20h] +
movs   +
call sub_100CC3A  +
mov [ebp-34h] ebx +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-34h] +
push edx  +
push dword ptr [ebp-2Ch]  +
mov byte ptr [ebp-4] 3 +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-34h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-58h] +
call sub_1008E28  +
mov eax [ebp-34h] +
cmp eax ebx +
mov byte ptr [ebp-4] 2 +
jz loc_100DC08  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-2Ch]  +
mov eax [ebp-2Ch] +
cmp eax [ebp-38h] +
jl loc_100DBAD  +
mov esi [ebp-40h] +
mov edi [ebp-44h] +
mov eax [ebp-28h] +
cmp eax ebx +
mov byte ptr [ebp-4] 1 +
jz loc_100DC2A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-3Ch] +
cmp eax ebx +
mov [ebp-4] bl +
jz loc_100DC3A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-24h]  +
mov eax [ebp-24h] +
cmp eax [ebp-30h] +
jl loc_100DB6C  +
mov eax [ebp-4Ch] +
cmp eax ebx +
mov [esi] eax +
jz loc_100DC73  +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax ebx +
pop ecx  +
mov [edi] eax +
jz loc_1015EFF  +
mov ecx [ebp-54h] +
mov edx [ecx] +
push eax  +
push ecx  +
push edx  +
call sub_100F48F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-58h] +
call sub_100DC9F  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
mov ecx [ebp-10h] +
mov eax ebx +
call sub_1007DC7  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_100DD07  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp+var_4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D1E4  +
jnz loc_100DCEB  +
mov esi dword_102D1DC +
and dword_102D1DC 0 +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_100DCFF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_100DD59  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_100DD59  +
cmp [ebp+arg_8] eax +
jnz loc_100DD59  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_100DD68  +
mov ecx dword_102D1DC +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
cmp ecx [ebp+arg_8] +
jz loc_100DD4F  +
jmp loc_1015EAF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_102D1DC +
mov ebx ecx +
mov esi edi +
jz loc_100DD9C  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_100DD68  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_102D1DC +
pop ecx  +
mov edi esi +
jnz loc_100DD7F  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1023C31 +
call sub_10014DD  +
sub esp 10h +
and dword ptr [ebp-14h] 0 +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov [ebp-18h] eax +
push edi  +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_100AB9B  +
test eax eax +
jl loc_100DE5B  +
mov edi [ebp-14h] +
test edi edi +
jz loc_100DE5B  +
push offset aMouse  +
push 0  +
lea eax [esi+8] +
push eax  +
mov ecx edi +
call sub_100D4D0  +
test eax eax +
jl loc_100DE51  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea edx [ebp-10h] +
push edx  +
lea eax [edi+8] +
mov ecx [eax] +
push offset dword_10035F0  +
push eax  +
call dword ptr [ecx]  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
push dword ptr [ebp-10h]  +
add esi 10h +
push dword ptr [ebp-1Ch]  +
push esi  +
call sub_100DE75  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
mov eax [ebp-10h] +
test eax eax +
jz loc_100DE3D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test esi esi +
jl loc_100DE51  +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax]  +
jmp loc_100DE41  +
mov eax 80004005h +
jmp loc_100DE43  +
***
mov eax offset dword_1022F30 +
call sub_10014DD  +
sub esp 1Ch +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
call sub_1004C5D  +
and dword ptr [ebp-4] 0 +
push eax  +
lea ecx [ebp+10h] +
call sub_10054DC  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-18h] +
call sub_10054B6  +
mov eax [ebp+10h] +
test eax eax +
mov byte ptr [ebp-4] 1 +
jz loc_100DEB8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
test eax eax +
mov byte ptr [ebp-4] 2 +
jz loc_100DEC9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-20h] +
call sub_1004A79  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
add ecx 4 +
mov byte ptr [ebp-4] 3 +
call sub_100DF2D  +
mov eax [ebp-1Ch] +
test eax eax +
mov byte ptr [ebp-4] 2 +
jz loc_100DEFD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp-24h] 0 +
mov eax [ebp-14h] +
jz loc_1015EEB  +
test eax eax +
jz loc_100DF18  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_100BE8F  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
mov eax offset word_10230B2 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
lea ecx [esi+20h] +
mov [ebp-10h] esi +
call sub_10049A5  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_100DF9C +
lea ecx [esi+0Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1006AC8  +
and dword ptr [esi+40h] 0 +
mov ecx [ebp-0Ch] +
mov eax esi +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1001C11  +
lea eax [esi+54h] +
push eax  +
mov dword ptr [esi] offset off_100DFD4 +
mov dword ptr [esi+8] offset off_1001BC4 +
mov dword ptr [esi+0Ch] offset off_1006910 +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
call sub_100A26B  +
mov esi eax +
test esi esi +
jnz loc_100DFFD  +
call sub_100AD00  +
mov [ebp+arg_4] eax +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
call sub_100E01B  +
test esi esi +
pop esi  +
jnz loc_10160B1  +
pop ebp  +
retn 8  +
***
mov eax offset byte_10231F5 +
call sub_10014DD  +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push offset stru_102D1C4  +
call ds:EnterCriticalSection  +
mov ebx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push ebx  +
call sub_100ACA7  +
test eax eax +
jge loc_101607B  +
xor esi esi +
push 6Ch  +
mov [ebp-18h] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-20h] ecx +
cmp ecx esi +
mov byte ptr [ebp-4] 1 +
jz loc_100E079  +
call sub_1001A79  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100E0C2  +
lea edi [esi+20h] +
push edi  +
call ds:InterlockedIncrement  +
push edi  +
call ds:InterlockedDecrement  +
mov eax [ebx] +
mov [esi+4] eax +
mov eax [ebx] +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx offset unk_102D1B4 +
mov [ebp-20h] esi +
call sub_100E0EB  +
cmp byte ptr [ebp-18h] 0 +
jz loc_10160A2  +
mov dword ptr [ebp-14h] 1 +
mov eax [ebp+0Ch] +
mov [eax] esi +
push offset stru_102D1C4  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_100BDF1  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
mov eax offset byte_1024121 +
call sub_10014DD  +
push ecx  +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
mov [esi+14h] eax +
lea eax [edi+edi*8] +
lea eax ds:4[eax*4] +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+0Ch] eax +
xor ebx ebx +
cmp eax ebx +
mov [ebp-4] ebx +
jz loc_100E164  +
push offset sub_1020FC6  +
push offset sub_100E220  +
push edi  +
lea ebx [eax+4] +
push 24h  +
push ebx  +
mov [eax] edi +
call sub_1004E26  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ebx ebx +
mov [esi+10h] ebx +
jz loc_100E214  +
mov edi [ebp+8] +
mov ebx [edi+4] +
mov eax [esi+4] +
and dword ptr [esi+8] 0 +
shl ebx 3 +
imul eax ebx +
push eax  +
mov [ebp-14h] ebx +
call ??2@YAPAXI@Z  +
pop ecx  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+8] eax +
jz loc_100E214  +
cmp [esi+4] ecx +
mov [ebp-10h] ecx +
jbe loc_100E1FC  +
mov eax [esi+10h] +
mov edx [ebp+8] +
and dword ptr [ebp+0Ch] 0 +
mov [ecx+eax] edx +
mov eax [esi+10h] +
mov edx [edi+4] +
mov [eax+ecx+4] edx +
cmp dword ptr [edi+4] 0 +
jbe loc_100E1EB  +
mov eax [ebp+0Ch] +
mov edx [edi] +
mov ebx [esi+10h] +
mov ebx [ebx+ecx] +
shl eax 3 +
mov edx [eax+edx] +
mov [eax+ebx] edx +
mov edx [esi+10h] +
mov edx [edx+ecx] +
and dword ptr [edx+eax+4] 0 +
inc dword ptr [ebp+0Ch]  +
mov eax [ebp+0Ch] +
cmp eax [edi+4] +
jb loc_100E1BE  +
mov ebx [ebp-14h] +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
add [ebp+8] ebx +
add ecx 24h +
cmp eax [esi+4] +
jb loc_100E1A1  +
and word ptr [esi+0Ch] 0 +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 8  +
mov eax 8007000Eh +
jmp loc_100E203  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
mov [eax+14h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_8] esi +
mov [ebp+var_C] esi +
mov [ebp+var_4] esi +
lea edi [ebx+6Ch] +
movzx eax word ptr [ebx+24h] +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax esi +
pop ecx  +
mov [edi] eax +
jz loc_100E41C  +
inc [ebp+var_4]  +
add edi 4 +
cmp [ebp+var_4] 2 +
jb loc_100E260  +
movzx eax word ptr [ebx+4Eh] +
lea eax [eax+eax*8] +
shl eax 3 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax esi +
pop ecx  +
mov [ebp+var_4] eax +
mov [ebx+84h] eax +
jz loc_100E41C  +
movzx eax word ptr [ebx+50h] +
lea eax [eax+eax*8] +
shl eax 3 +
push eax  +
call ??2@YAPAXI@Z  +
mov edi eax +
xor eax eax +
cmp edi esi +
pop ecx  +
mov [ebx+88h] edi +
jz loc_100E415  +
mov ax [ebx+4Eh] +
push dword ptr [ebx+1Ch]  +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
push esi  +
push esi  +
push esi  +
push esi  +
call HidP_GetSpecificButtonCaps  +
push dword ptr [ebx+1Ch]  +
xor eax eax +
mov ax [ebx+50h] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
push esi  +
push esi  +
push esi  +
call HidP_GetSpecificValueCaps  +
xor ecx ecx +
cmp [ebx+50h] si +
jbe loc_100E31A  +
movzx edx word ptr [ebx+50h] +
lea eax [edi+3Ah] +
cmp byte ptr [eax-2Eh] 0 +
jnz loc_101843A  +
inc ecx  +
add eax 48h +
dec edx  +
jnz loc_100E309  +
mov edi [ebx+88h] +
movzx eax cx +
mov [ebp+var_10] eax +
mov [ebx+78h] eax +
imul eax eax +
push eax  +
call ??2@YAPAXI@Z  +
mov esi eax +
test esi esi +
pop ecx  +
mov [ebx+74h] esi +
jz loc_100E41C  +
mov eax [ebp+var_4] +
push dword ptr [ebx+1Ch]  +
movzx eax word ptr [eax] +
push eax  +
push 0  +
call HidP_MaxUsageListLength  +
test eax eax +
mov [ebx+7Ch] eax +
jz loc_101844C  +
add eax eax +
push eax  +
call ??2@YAPAXI@Z  +
test eax eax +
pop ecx  +
mov [ebx+80h] eax +
jz loc_100E41C  +
mov eax [ebp+var_10] +
test eax eax +
jbe loc_100E41C  +
mov [ebp+var_4] eax +
xor eax eax +
mov edx 110000h +
inc eax  +
cmp byte ptr [edi+0Ch] 0 +
jnz loc_1018457  +
mov [esi+4] edx +
mov cx [edi] +
mov [esi] cx +
mov cx [edi+38h] +
mov [esi+18h] cx +
movzx ecx byte ptr [edi+2] +
or dword ptr [esi+14h] 0FFFFFFFFh +
cmp [esi] ax +
mov [esi+8] ecx +
mov cx [edi+8] +
mov [esi+0Eh] cx +
mov cx [edi+0Ah] +
mov [esi+10h] cx +
mov ecx [edi+20h] +
mov [esi+1Ch] ecx +
mov ecx [edi+24h] +
mov [esi+20h] ecx +
mov ecx [edi+28h] +
mov [esi+24h] ecx +
mov ecx [edi+2Ch] +
mov [esi+28h] ecx +
mov ecx [edi+30h] +
mov [esi+2Ch] ecx +
mov ecx [edi+34h] +
mov [esi+30h] ecx +
jnz loc_100E3FE  +
mov cx [esi+18h] +
cmp cx 30h +
jnz loc_100E3F5  +
mov [ebp+var_8] eax +
cmp cx 31h +
jnz loc_100E3FE  +
mov [ebp+var_C] eax +
add esi 3Ch +
add edi 48h +
dec [ebp+var_4]  +
jnz loc_100E389  +
cmp [ebp+var_8] 0 +
jz loc_100E41C  +
cmp [ebp+var_C] 0 +
jz loc_100E41C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
xor eax eax +
jmp loc_100E415  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push offset unk_1027098  +
call ds:AtlModuleExtractCreateWndData  +
mov ebx [ebp+8] +
mov esi eax +
mov eax [esi] +
mov ecx esi +
mov [esi+4] ebx +
call dword ptr [eax+4]  +
push esi  +
lea edi [esi+14h] +
push eax  +
mov ecx edi +
call sub_100E482  +
mov edi [edi] +
push edi  +
push 0FFFFFFFCh  +
push ebx  +
call ds:SetWindowLongW  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_100E49A  +
call sub_100E4ED  +
test eax eax +
mov [esi] eax +
jz loc_100E4A7  +
push [ebp+arg_4]  +
mov ecx [esi] +
push [ebp+arg_0]  +
call sub_100E4B1  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov [ecx+4] eax +
mov eax [ebp+arg_0] +
sub eax ecx +
push 0Dh  +
sub eax 0Dh +
push ecx  +
mov dword ptr [ecx] 42444C7h +
mov byte ptr [ecx+8] 0E9h +
mov [ecx+9] eax +
call ds:GetCurrentProcess  +
push eax  +
call ds:FlushInstructionCache  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
cmp dword_102D810 0 +
push esi  +
jnz loc_100E500  +
call sub_100E52E  +
test eax eax +
jz loc_100E525  +
mov eax dword_102D810 +
cmp eax 1 +
jnz loc_1018002  +
push 0Dh  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_100E525  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push edi  +
push offset LibFileName  +
call ds:LoadLibraryA  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1017F0E  +
push esi  +
mov esi ds:GetProcAddress +
push offset ProcName  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_100E574  +
push 0Ch  +
call eax  +
cmp eax ebx +
jnz loc_1017F15  +
xor eax eax +
inc eax  +
mov dword_102D810 eax +
pop esi  +
pop edi  +
pop ebx  +
retn   +
xor eax eax +
jmp loc_100E560  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-1] +
push eax  +
call sub_100E5BC  +
leave   +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10279B0 0 +
push esi  +
mov esi ecx +
jnz loc_100E601  +
and dword_10279B0 0 +
lea eax [esi+1Ch] +
push eax  +
mov ecx offset unk_1027980 +
call sub_1008EEF  +
push [ebp+lpParam]  +
push eax  +
push [ebp+hMenu]  +
push [ebp+dwExStyle]  +
push [ebp+arg_C]  +
call sub_1008F4E  +
push eax  +
push [ebp+lpWindowName]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+hWndParent]  +
call sub_100E63C  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 0  +
lea ecx [esi+14h] +
call sub_100E482  +
test eax eax +
jz loc_10164C8  +
cmp [ebp+arg_18] 0 +
jz loc_10164D0  +
push esi  +
lea eax [esi+8] +
push eax  +
push offset unk_1027098  +
call ds:AtlModuleAddCreateWndData  +
cmp [ebp+hMenu] 0 +
jnz loc_100E683  +
test [ebp+arg_F] 40h +
jnz loc_10164D7  +
push [ebp+lpParam]  +
mov eax [ebp+arg_4] +
push dword_102709C  +
mov ecx [eax+4] +
push [ebp+hMenu]  +
mov esi [eax+0Ch] +
push [ebp+hWndParent]  +
mov edx [eax] +
mov eax [eax+8] +
sub esi ecx +
push esi  +
sub eax edx +
push eax  +
movzx eax [ebp+arg_18] +
push ecx  +
push edx  +
push dword ptr [ebp+14h]  +
push [ebp+lpWindowName]  +
push eax  +
push [ebp+dwExStyle]  +
call ds:CreateWindowExW  +
pop esi  +
pop ebp  +
retn 20h  +
***
mov eax offset byte_1023349 +
call sub_10014DD  +
push ecx  +
push ecx  +
and dword ptr [ebp-14h] 0 +
push esi  +
push edi  +
push 1  +
lea eax [ebp-14h] +
push eax  +
mov edi ecx +
call sub_100EB62  +
test eax eax +
jl loc_100E73F  +
mov esi [ebp-14h] +
test esi esi +
jz loc_100E73F  +
mov ecx esi +
call sub_100C8E1  +
test eax eax +
mov [ebp-14h] eax +
jl loc_1016AB5  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea edx [ebp-10h] +
push edx  +
lea eax [esi+8] +
mov ecx [eax] +
push offset nullsub_2  +
push eax  +
call dword ptr [ecx]  +
push dword ptr [ebp-10h]  +
add edi 24h +
push dword ptr [esi+4]  +
push edi  +
call sub_100E752  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
mov eax [ebp-10h] +
test eax eax +
jz loc_100E73D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov eax offset dword_1023420 +
call sub_10014DD  +
sub esp 1Ch +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
call sub_1004C5D  +
and dword ptr [ebp-4] 0 +
push eax  +
lea ecx [ebp+10h] +
call sub_10054DC  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-18h] +
call sub_10054B6  +
mov eax [ebp+10h] +
test eax eax +
mov byte ptr [ebp-4] 1 +
jz loc_100E795  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
test eax eax +
mov byte ptr [ebp-4] 2 +
jz loc_100E7A6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-20h] +
call sub_1004A79  +
mov ecx [ebp+8] +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-28h] +
push eax  +
add ecx 4 +
mov byte ptr [ebp-4] 3 +
call sub_100E80A  +
mov eax [ebp-1Ch] +
test eax eax +
mov byte ptr [ebp-4] 2 +
jz loc_100E7DA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp byte ptr [ebp-24h] 0 +
mov eax [ebp-14h] +
jz loc_10168A1  +
test eax eax +
jz loc_100E7F5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_100BFB0  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
mov eax offset word_1023686 +
call sub_10014DD  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [esi+50h] +
mov [ebp-10h] esi +
call sub_10049A5  +
xor ebx ebx +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_10087D0 +
lea ecx [esi+10h] +
mov byte ptr [ebp-4] 1 +
call sub_1010EDD  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 2 +
call sub_10030A9  +
mov [esi+8Ch] ebx +
mov [esi+90h] ebx +
lea ecx [esi+0B8h] +
mov byte ptr [ebp-4] 5 +
call sub_1004B4D  +
lea ecx [esi+0CCh] +
mov byte ptr [ebp-4] 6 +
call sub_1004B36  +
lea ecx [esi+0ECh] +
mov byte ptr [ebp-4] 7 +
call sub_100E220  +
push offset loc_101D7D7  +
push offset loc_100E5A6  +
push 3  +
push 30h  +
lea eax [esi+240h] +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_1004E26  +
push ebx  +
push ebx  +
lea ecx [esi+2E8h] +
call sub_1008F0C  +
lea eax [esi+318h] +
mov [eax+4] ebx +
mov [eax+8] ebx +
mov [eax+0Ch] ebx +
lea ecx [esi+32Ch] +
mov byte ptr [ebp-4] 0Bh +
mov [ecx+8] bl +
call sub_100C391  +
lea ecx [esi+33Ch] +
mov byte ptr [ebp-4] 0Ch +
call sub_100932D  +
lea ecx [esi+358h] +
mov byte ptr [ebp-4] 0Dh +
call sub_100E929  +
mov ecx [ebp-0Ch] +
mov eax esi +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov edx dword_102D1E8 +
mov [eax+14h] edx +
mov edx dword_102D1EC +
and dword ptr [eax+2Ch] 0FFFFFFFEh +
mov [eax+18h] edx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100E834  +
lea eax [esi+894h] +
push eax  +
mov dword ptr [esi] offset off_1001688 +
mov dword ptr [esi+8] offset off_10019D4 +
mov dword ptr [esi+0Ch] offset off_100E9A4 +
mov dword ptr [esi+10h] offset off_1010E70 +
mov dword ptr [esi+24h] offset off_100303C +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100E834  +
lea eax [esi+470h] +
push eax  +
mov dword ptr [esi] offset off_1001A5C +
mov dword ptr [esi+8] offset off_1001A08 +
mov dword ptr [esi+0Ch] offset off_100E9FC +
mov dword ptr [esi+10h] offset off_1010EA4 +
mov dword ptr [esi+24h] offset off_1003070 +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
call sub_100AD44  +
mov esi eax +
test esi esi +
jnz loc_100EA35  +
call sub_100B462  +
mov [ebp+arg_4] eax +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
call sub_100EA53  +
test esi esi +
pop esi  +
jnz loc_1016A07  +
pop ebp  +
retn 8  +
***
mov eax offset byte_10238BD +
call sub_10014DD  +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push offset stru_102D7DC  +
call ds:EnterCriticalSection  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_100B409  +
test eax eax +
jge loc_10169A1  +
xor esi esi +
push 8ACh  +
mov [ebp-18h] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-20h] ecx +
cmp ecx esi +
mov byte ptr [ebp-4] 1 +
jz loc_100EAB3  +
call sub_10013DD  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100EB0F  +
lea edi [esi+50h] +
push edi  +
call ds:InterlockedIncrement  +
mov ecx esi +
call sub_100D85F  +
push edi  +
mov ebx eax +
call ds:InterlockedDecrement  +
test ebx ebx +
jnz loc_10169C5  +
mov eax [ebp+8] +
mov ecx [eax] +
mov [esi+4] ecx +
mov eax [eax] +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx offset unk_102D7CC +
mov [ebp-20h] esi +
call sub_100EB38  +
cmp [ebp-18h] bl +
jz loc_10169C5  +
mov dword ptr [ebp-14h] 1 +
mov eax [ebp+0Ch] +
mov [eax] esi +
push offset stru_102D7DC  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_100BF1A  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
call sub_100ECB2  +
mov esi eax +
test esi esi +
jz loc_1016A16  +
push [ebp+arg_0]  +
lea eax [ebp+arg_4] +
push eax  +
call sub_100EB9E  +
test esi esi +
pop esi  +
jz loc_100EB95  +
test eax eax +
jl loc_100EB95  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax offset byte_1023911 +
call sub_10014DD  +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push offset stru_102D7DC  +
call ds:EnterCriticalSection  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_100B409  +
test eax eax +
jge loc_10169D4  +
xor esi esi +
push 488h  +
mov [ebp-18h] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-20h] ecx +
cmp ecx esi +
mov byte ptr [ebp-4] 1 +
jz loc_100EBFE  +
call sub_10018D9  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100EC5A  +
lea edi [esi+50h] +
push edi  +
call ds:InterlockedIncrement  +
mov ecx esi +
call sub_100EC83  +
push edi  +
mov ebx eax +
call ds:InterlockedDecrement  +
test ebx ebx +
jnz loc_10169F8  +
mov eax [ebp+8] +
mov ecx [eax] +
mov [esi+4] ecx +
mov eax [eax] +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx offset unk_102D7CC +
mov [ebp-20h] esi +
call sub_100EB38  +
cmp [ebp-18h] bl +
jz loc_10169F8  +
mov dword ptr [ebp-14h] 1 +
mov eax [ebp+0Ch] +
mov [eax] esi +
push offset stru_102D7DC  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 8001FA0h  +
lea eax [esi+450h] +
push eax  +
call ds:InitializeCriticalSectionAndSpinCount  +
test eax eax +
jz loc_1016B2F  +
mov ecx esi +
call sub_100D86C  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1027090 +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
xor esi esi +
cmp [ebp+arg_0] esi +
push edi  +
mov [ebp+var_118] eax +
jz loc_100EDFF  +
cmp eax esi +
jz loc_100EDFF  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset aSoftwareMicros  +
push 80000001h  +
mov [ebp+hKey] esi +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100EDFF  +
cmp [ebp+hKey] esi +
jz loc_100EDFF  +
mov edi 80h +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+var_110] esi +
mov esi ds:RegEnumKeyW +
call esi  +
mov ebx ds:RegCloseKey +
test eax eax +
jnz loc_1016B5F  +
push [ebp+var_118]  +
lea eax [ebp+SubKey] +
push offset aU  +
push eax  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_1016B3E  +
and [ebp+phkResult] 0 +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push 0  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1016B3E  +
cmp [ebp+phkResult] eax +
jz loc_1016B3E  +
push 2  +
push 3  +
push 2  +
lea eax [ebp+Data] +
push eax  +
push offset aType  +
push [ebp+phkResult]  +
call sub_1007995  +
test eax eax +
jl loc_1016B36  +
cmp dword ptr [ebp+Data] 3 +
jnz loc_1016B36  +
push [ebp+phkResult]  +
call ebx  +
push [ebp+hKey]  +
call ebx  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
call sub_1007DC7  +
leave   +
retn 8  +
xor eax eax +
jmp loc_100EDF0  +
***
mov eax offset byte_10239C9 +
call sub_10014DD  +
sub esp 38h +
mov eax dword_1027090 +
push ebx  +
push esi  +
mov [ebp-14h] eax +
mov esi ecx +
push edi  +
xor edi edi +
mov eax esi +
neg eax  +
lea ecx [esi+20h] +
sbb eax eax +
and eax ecx +
mov [ebp-10h] esp +
mov dword_102704C eax +
push offset Addend  +
mov [ebp-4] edi +
mov [esi+8Ch] edi +
call ds:InterlockedIncrement  +
push offset aTabletpcwritea  +
call ds:RegisterWindowMessageW  +
cmp [esi+4] edi +
push 20h  +
pop ebx  +
mov [esi+7Ch] ax +
mov [ebp-40h] edi +
mov [ebp-44h] edi +
mov [ebp-38h] ebx +
mov [ebp-3Ch] ebx +
jnz loc_100EEF0  +
push edi  +
push edi  +
push 8080088h  +
push 80000000h  +
push offset WindowName  +
lea eax [ebp-44h] +
push eax  +
push edi  +
mov ecx esi +
call sub_100E5E9  +
cmp [esi+4] edi +
jz loc_100EFAC  +
or dword ptr [esi+80h] 0FFFFFFFFh +
lea eax [ebp-28h] +
push eax  +
mov [esi+78h] edi +
mov [esi+74h] edi +
mov [ebp-34h] ebx +
mov dword ptr [ebp-30h] 5 +
call HidD_GetHidGuid  +
push edi  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [esi+4]  +
call ds:RegisterDeviceNotificationW  +
push offset aWtsapi32_dll  +
mov [esi+64h] eax +
mov [esi+70h] edi +
mov [esi+68h] edi +
mov [esi+6Ch] edi +
call sub_100C77F  +
cmp eax edi +
mov [esi+70h] eax +
jz loc_100EF6A  +
mov ebx ds:GetProcAddress +
push offset aWtsregisterses  +
push eax  +
call ebx  +
push offset aWtsunregisters  +
push dword ptr [esi+70h]  +
mov [esi+68h] eax +
call ebx  +
mov ecx [esi+68h] +
cmp ecx edi +
mov [esi+6Ch] eax +
jz loc_100EF6A  +
cmp eax edi +
jz loc_100EF6A  +
push edi  +
push dword ptr [esi+4]  +
call ecx  +
mov ecx esi +
mov dword ptr [esi+88h] 1 +
call sub_100E6C6  +
mov ecx esi +
mov ebx eax +
call sub_100F063  +
push offset Addend  +
call ds:InterlockedDecrement  +
cmp ebx edi +
jl loc_100EFAC  +
xor eax eax +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
mov ecx [ebp-14h] +
call sub_1007DC7  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax 80004005h +
jmp loc_100EF95  +
***
mov eax offset byte_1023955 +
call sub_10014DD  +
sub esp 1Ch +
push ebx  +
xor ebx ebx +
push 230h  +
mov [ebp-28h] ecx +
mov [ebp-20h] ebx +
call ??2@YAPAXI@Z  +
mov edx eax +
cmp edx ebx +
pop ecx  +
mov [ebp-14h] edx +
jz loc_1016A23  +
push esi  +
push edi  +
xor eax eax +
mov ecx 8Ch +
mov edi edx +
mov dword ptr [ebp-10h] 4 +
stos   +
push dword_1027780  +
lea eax [ebp-10h] +
push dword_1027784  +
push eax  +
push ebx  +
push edx  +
call sub_100B4A6  +
test eax eax +
jl loc_1016AAB  +
cmp [ebp-10h] ebx +
mov esi [ebp-14h] +
mov [ebp-1Ch] ebx +
jbe loc_100F163  +
mov eax [esi] +
cmp eax ebx +
jz loc_100F14E  +
push eax  +
lea eax [ebp-24h] +
push eax  +
mov [ebp-24h] ebx +
call sub_100EA15  +
test eax eax +
jl loc_1016A2D  +
mov edi [ebp-24h] +
push esi  +
mov ecx edi +
call sub_100AFFF  +
cmp eax ebx +
jl loc_1016A62  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
mov [ebp-18h] ebx +
lea edx [ebp-18h] +
push edx  +
lea eax [edi+8] +
mov ecx [eax] +
push offset nullsub_2  +
push eax  +
mov [ebp-4] ebx +
call dword ptr [ecx]  +
push dword ptr [ebp-18h]  +
mov eax [ebp-28h] +
push dword ptr [edi+4]  +
add eax 24h +
push eax  +
call sub_100E752  +
mov ecx [ebp-28h] +
push edi  +
call sub_100F191  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100F14E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-1Ch]  +
mov eax [ebp-1Ch] +
add esi 8Ch +
cmp eax [ebp-10h] +
jb loc_100F0D3  +
push 4  +
pop eax  +
add [ebp-20h] eax +
cmp [ebp-10h] eax +
jnb loc_1016A81  +
push dword ptr [ebp-14h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax ebx +
pop esi  +
mov ecx [ebp-0Ch] +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_1027090 +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_4] eax +
mov eax ecx +
mov ecx [esi+44Ch] +
mov [ebp+NotificationFilter] 2Ch +
mov [ebp+var_2C] 6 +
mov ecx [ecx+8] +
mov [ebp+var_24] ecx +
push 0  +
lea ecx [ebp+NotificationFilter] +
push ecx  +
push dword ptr [eax+4]  +
call ds:RegisterDeviceNotificationW  +
mov ecx [ebp+var_4] +
mov [esi+460h] eax +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
call sub_1007DC7  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+44Ch] +
push eax  +
xor eax eax +
push eax  +
push esi  +
push offset loc_100F22E  +
push eax  +
push eax  +
call ds:_beginthreadex  +
mov [esi+70h] eax +
add esp 18h +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov eax offset dword_102D230 +
cmp [eax] edi +
jz loc_100F250  +
add eax 1Ch +
inc esi  +
cmp eax offset unk_102D5B0 +
jl loc_100F241  +
cmp esi 20h +
jge loc_1016C61  +
push ebx  +
push edi  +
push edi  +
call ds:CoInitializeEx  +
mov ebx ds:GetCurrentThread +
push 2  +
call ebx  +
push eax  +
call ds:SetThreadPriority  +
call sub_1002CAC  +
imul esi esi +
call ds:GetCurrentThreadId  +
mov dword_102D230[esi] eax +
call ebx  +
mov dword_102D234[esi] eax +
mov dword_102D238[esi] edi +
mov dword_102D23C[esi] edi +
mov dword_102D240[esi] edi +
mov dword_102D244[esi] edi +
mov dword_102D248[esi] edi +
call sub_1002CC8  +
mov ecx [ebp+8] +
cmp ecx edi +
jz loc_100F2C4  +
mov dword_1027060 ecx +
call sub_100F2DD  +
mov ebx ds:GetMessageW +
push edi  +
push edi  +
lea eax [ebp-1Ch] +
push edi  +
push eax  +
call ebx  +
jmp loc_1016C29  +
***
push offset fn  +
push 0Eh  +
call ds:SetWindowsHookExW  +
mov hhk eax +
xor eax eax +
retn   +
***
mov eax offset byte_1023A6D +
call sub_10014DD  +
sub esp 54h +
mov eax dword_1027090 +
push ebx  +
push esi  +
mov esi [ebp+8] +
xor ebx ebx +
push edi  +
mov edi [ebp+0Ch] +
mov [ebp-24h] ecx +
mov [esi] ebx +
lea ecx [ebp-58h] +
mov [ebp-10h] eax +
mov [ebp-40h] esi +
mov [ebp-44h] edi +
mov [edi] ebx +
mov [ebp-50h] bl +
call sub_100C846  +
mov eax [ebp-24h] +
lea ecx [ebp-30h] +
add eax 10h +
push ecx  +
push eax  +
mov [ebp-4] ebx +
mov [ebp-30h] ebx +
mov [ebp-48h] eax +
call sub_1006AA5  +
cmp [ebp-30h] ebx +
mov [ebp-24h] ebx +
jle loc_100F439  +
mov [ebp-3Ch] ebx +
lea eax [ebp-3Ch] +
push eax  +
push dword ptr [ebp-24h]  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp-48h]  +
call sub_100925D  +
mov [ebp-28h] ebx +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-3Ch]  +
mov byte ptr [ebp-4] 2 +
call sub_1003605  +
mov eax [ebp-28h] +
lea edx [ebp-38h] +
push edx  +
mov [ebp-38h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp [ebp-38h] ebx +
mov [ebp-2Ch] ebx +
jle loc_100F409  +
sub esp 10h +
mov edi esp +
mov esi offset dword_1008BB4 +
movs   +
movs   +
movs   +
lea ecx [ebp-20h] +
movs   +
call sub_100CC3A  +
mov [ebp-34h] ebx +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-34h] +
push edx  +
push dword ptr [ebp-2Ch]  +
mov byte ptr [ebp-4] 3 +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-34h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-60h] +
push eax  +
lea ecx [ebp-58h] +
call sub_1008E28  +
mov eax [ebp-34h] +
cmp eax ebx +
mov byte ptr [ebp-4] 2 +
jz loc_100F3F8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-2Ch]  +
mov eax [ebp-2Ch] +
cmp eax [ebp-38h] +
jl loc_100F39D  +
mov esi [ebp-40h] +
mov edi [ebp-44h] +
mov eax [ebp-28h] +
cmp eax ebx +
mov byte ptr [ebp-4] 1 +
jz loc_100F41A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-3Ch] +
cmp eax ebx +
mov [ebp-4] bl +
jz loc_100F42A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-24h]  +
mov eax [ebp-24h] +
cmp eax [ebp-30h] +
jl loc_100F35C  +
mov eax [ebp-4Ch] +
cmp eax ebx +
mov [esi] eax +
jz loc_100F463  +
shl eax 4 +
push eax  +
call ??2@YAPAXI@Z  +
cmp eax ebx +
pop ecx  +
mov [edi] eax +
jz loc_1016C80  +
mov ecx [ebp-54h] +
mov edx [ecx] +
push eax  +
push ecx  +
push edx  +
call sub_100F48F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-58h] +
call sub_100DC9F  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
mov ecx [ebp-10h] +
mov eax ebx +
call sub_1007DC7  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_100F4BE  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
add [ebp+arg_8] 10h +
lea esi [eax+0Ch] +
movs   +
movs   +
movs   +
lea ecx [ebp+arg_0] +
movs   +
call sub_100AAA7  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnz loc_100F49E  +
pop edi  +
pop esi  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100F4F9  +
lea eax [esi+190h] +
push eax  +
mov dword ptr [esi] offset off_1012458 +
mov dword ptr [esi+8] offset off_10017B8 +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100532D  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
call sub_1004AF6  +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_100F52F  +
leave   +
retn 4  +
***
mov eax offset byte_1023B51 +
call sub_10014DD  +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push offset CriticalSection  +
call ds:EnterCriticalSection  +
mov ebx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
push ebx  +
call sub_100174E  +
test eax eax +
jge loc_1016CE8  +
xor esi esi +
push 1A8h  +
mov [ebp-18h] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] esi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-20h] ecx +
cmp ecx esi +
mov byte ptr [ebp-4] 1 +
jz loc_100F590  +
call sub_10015CD  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_100F5D9  +
lea edi [esi+0Ch] +
push edi  +
call ds:InterlockedIncrement  +
push edi  +
call ds:InterlockedDecrement  +
mov eax [ebx] +
mov [esi+4] eax +
mov eax [ebx] +
mov [ebp-24h] eax +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx offset unk_1027004 +
mov [ebp-20h] esi +
call sub_10057A5  +
cmp byte ptr [ebp-18h] 0 +
jz loc_1016D0F  +
mov dword ptr [ebp-14h] 1 +
mov eax [ebp+0Ch] +
mov [eax] esi +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1001C5D  +
lea eax [esi+50h] +
push eax  +
mov dword ptr [esi] offset off_100F630 +
mov dword ptr [esi+8] offset off_1001BE8 +
mov dword ptr [esi+0Ch] offset off_1006944 +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+hInstance]  +
push [ebp+arg_0]  +
call sub_100F964  +
mov edi ds:LoadStringW +
mov ebx 100h +
push ebx  +
lea eax [esi+2E4h] +
push eax  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call edi  +
push ebx  +
lea eax [esi+4E4h] +
push eax  +
push [ebp+arg_C]  +
push [ebp+hInstance]  +
call edi  +
and dword ptr [esi+84h] 0 +
and dword ptr [esi+0E0h] 0 +
push 0Ah  +
pop edx  +
push 0Fh  +
pop ecx  +
push 28h  +
pop eax  +
mov [esi+0ACh] eax +
mov [esi+0A4h] eax +
push 64h  +
mov eax 0C8h +
mov [esi+0B4h] ecx +
mov [esi+0B0h] ecx +
pop ecx  +
mov [esi+0ECh] eax +
mov [esi+0F0h] eax +
add ebx 2Ch +
push 32h  +
xor eax eax +
inc eax  +
pop edi  +
mov [esi+9Ch] edx +
mov dword ptr [esi+0A0h] 8E8h +
mov [esi+0A8h] edx +
mov dword ptr [esi+0B8h] 6 +
mov dword ptr [esi+0BCh] 4 +
mov dword ptr [esi+0C0h] 3 +
mov [esi+0C4h] ecx +
mov dword ptr [esi+0C8h] 320h +
mov dword ptr [esi+0E4h] 1Eh +
mov [esi+0E8h] ebx +
mov [esi+0CCh] edi +
mov dword ptr [esi+0D0h] 2BCh +
mov [esi+0D4h] ebx +
mov dword ptr [esi+0D8h] 8FCh +
mov dword ptr [esi+0DCh] 1F4h +
mov [esi+98h] eax +
mov [esi+8Ch] eax +
mov [esi+88h] eax +
mov [esi+94h] eax +
mov [esi+90h] eax +
mov [esi+100h] edx +
mov dword ptr [esi+104h] 5 +
mov dword ptr [esi+108h] 19h +
mov dword ptr [esi+10Ch] 8E8h +
mov dword ptr [esi+110h] 591h +
mov dword ptr [esi+114h] 1644h +
mov dword ptr [esi+148h] 0Fh +
mov dword ptr [esi+14Ch] 5 +
mov dword ptr [esi+150h] 19h +
mov dword ptr [esi+130h] 28h +
mov [esi+134h] edx +
mov [esi+138h] edi +
mov dword ptr [esi+118h] 28h +
mov dword ptr [esi+11Ch] 14h +
mov dword ptr [esi+120h] 50h +
mov [esi+124h] edx +
mov dword ptr [esi+128h] 5 +
and dword ptr [esi+0F8h] 0 +
push 2  +
pop edx  +
mov [esi+178h] edi +
mov [esi+190h] edi +
push 16h  +
mov [esi+17Ch] ecx +
mov [esi+188h] ecx +
mov [esi+198h] ecx +
mov [esi+1A0h] ecx +
mov [esi+1C4h] ecx +
pop ecx  +
mov edi 3E8h +
mov [esi+1A4h] edi +
mov [esi+1B0h] edi +
mov [esi+1C8h] edi +
mov [esi+0F4h] eax +
push 16h  +
mov [esi+1A8h] ebx +
mov [esi+1ACh] ebx +
mov dword ptr [esi+12Ch] 19h +
mov dword ptr [esi+13Ch] 0Fh +
mov [esi+140h] edx +
mov dword ptr [esi+144h] 14h +
mov dword ptr [esi+154h] 6 +
mov dword ptr [esi+158h] 6 +
mov dword ptr [esi+15Ch] 0Ch +
mov dword ptr [esi+160h] 4 +
mov dword ptr [esi+164h] 3 +
mov dword ptr [esi+168h] 8 +
mov dword ptr [esi+16Ch] 3 +
mov [esi+170h] edx +
mov dword ptr [esi+174h] 7 +
mov dword ptr [esi+180h] 1F4h +
mov dword ptr [esi+184h] 320h +
mov dword ptr [esi+18Ch] 7D0h +
mov dword ptr [esi+194h] 14h +
mov dword ptr [esi+19Ch] 2BCh +
mov dword ptr [esi+1B4h] 8FCh +
mov dword ptr [esi+1B8h] 258h +
mov dword ptr [esi+1BCh] 1194h +
mov dword ptr [esi+1C0h] 1F4h +
mov [esi+0FCh] edx +
xor eax eax +
lea edi [esi+1CCh] +
stos   +
pop ecx  +
push 16h  +
lea edi [esi+224h] +
stos   +
pop ecx  +
lea edi [esi+27Ch] +
stos   +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov dword ptr [ecx+70h] offset unk_10278DC +
push [ebp+arg_0]  +
mov dword_102D174 ecx +
push ecx  +
mov dword ptr [ecx] 84h +
mov dword ptr [ecx+64h] 300h +
call ds:AtlModuleInit  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_100F9A3  +
push edi  +
mov edi offset unk_102D164 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
cmp edi eax +
mov [ebp+TokenHandle] eax +
jz loc_100F9C5  +
mov [edi] eax +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_100F9CE  +
mov [esi] eax +
lea eax [ebp+TokenHandle] +
push eax  +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1016F59  +
push esi  +
push edi  +
push [ebp+TokenHandle]  +
call sub_100FA0B  +
push [ebp+TokenHandle]  +
mov esi eax +
call ds:CloseHandle  +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov ecx [ebp+arg_4] +
xor eax eax +
cmp ecx eax +
mov [ebp+nDestinationSidLength] eax +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
jz loc_100FA27  +
mov [ecx] eax +
mov edx [ebp+arg_8] +
cmp edx eax +
jz loc_100FA30  +
mov [edx] eax +
cmp ecx eax +
push ebx  +
mov ebx ds:__imp_malloc +
push esi  +
mov esi ds:GetTokenInformation +
push edi  +
mov edi ds:GetLastError +
jz loc_100FAD9  +
lea ecx [ebp+nDestinationSidLength] +
push ecx  +
push eax  +
push eax  +
push 1  +
push [ebp+TokenHandle]  +
call esi  +
call edi  +
cmp eax 7Ah +
jnz loc_1016EDB  +
push [ebp+nDestinationSidLength]  +
call ebx  +
test eax eax +
pop ecx  +
mov [ebp+var_8] eax +
jz loc_1016EBB  +
lea ecx [ebp+nDestinationSidLength] +
push ecx  +
push [ebp+nDestinationSidLength]  +
push eax  +
push 1  +
push [ebp+TokenHandle]  +
call esi  +
test eax eax +
jz loc_1016EC2  +
mov eax [ebp+var_8] +
push dword ptr [eax]  +
call ds:GetLengthSid  +
push eax  +
mov [ebp+nDestinationSidLength] eax +
call ebx  +
test eax eax +
pop ecx  +
mov [ebp+var_10] eax +
jz loc_1016EBB  +
mov ecx [ebp+var_8] +
push dword ptr [ecx]  +
push eax  +
push [ebp+nDestinationSidLength]  +
call ds:CopySid  +
test eax eax +
jz loc_1016ECE  +
mov eax [ebp+var_10] +
mov ecx [ebp+arg_4] +
push [ebp+var_8]  +
mov [ecx] eax +
call ds:__imp_free  +
and [ebp+var_8] 0 +
pop ecx  +
xor eax eax +
cmp [ebp+arg_8] eax +
jz loc_100FB5B  +
lea ecx [ebp+nDestinationSidLength] +
push ecx  +
push eax  +
push eax  +
push 5  +
push [ebp+TokenHandle]  +
call esi  +
call edi  +
cmp eax 7Ah +
jnz loc_1016EDB  +
push [ebp+nDestinationSidLength]  +
call ebx  +
test eax eax +
pop ecx  +
mov [ebp+var_C] eax +
jz loc_1016EF1  +
lea ecx [ebp+nDestinationSidLength] +
push ecx  +
push [ebp+nDestinationSidLength]  +
push eax  +
push 5  +
push [ebp+TokenHandle]  +
call esi  +
test eax eax +
jz loc_1016EE5  +
mov esi [ebp+var_C] +
push dword ptr [esi]  +
call ds:GetLengthSid  +
push eax  +
mov [ebp+nDestinationSidLength] eax +
call ebx  +
mov ebx eax +
test ebx ebx +
pop ecx  +
jz loc_1016EF1  +
push dword ptr [esi]  +
push ebx  +
push [ebp+nDestinationSidLength]  +
call ds:CopySid  +
test eax eax +
jz loc_1016EF8  +
mov eax [ebp+arg_8] +
push esi  +
mov [eax] ebx +
call ds:__imp_free  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
cmp edi eax +
mov [ebp+TokenHandle] eax +
jz loc_100FB7F  +
mov [edi] eax +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_100FB88  +
mov [esi] eax +
lea eax [ebp+TokenHandle] +
push eax  +
push [ebp+OpenAsSelf]  +
push 8  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_1016F6A  +
call ds:GetLastError  +
push eax  +
call sub_100FBBD  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push edi  +
push ebx  +
lea eax [esi+104h] +
push eax  +
push offset aShakeangle_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+110h] +
push eax  +
push offset aShakerate_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+164h] +
push eax  +
push offset aShakesize_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+170h] +
push eax  +
push offset aShakecount_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+17Ch] +
push eax  +
push offset aShaketime_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+14Ch] +
push eax  +
push offset aHoverlimit_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+11Ch] +
push eax  +
push offset aSplash_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+128h] +
push eax  +
push offset aCancel_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+134h] +
push eax  +
push offset aMove_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+140h] +
push eax  +
push offset aDbldist_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+158h] +
push eax  +
push offset aHovercount_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+188h] +
push eax  +
push offset aDbltime_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+194h] +
push eax  +
push offset aTaptime_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+1A0h] +
push eax  +
push offset aWaittime_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+1ACh] +
push eax  +
push offset aOpentime_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+1B8h] +
push eax  +
push offset aHoldtime_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
push ebx  +
push edi  +
push ebx  +
lea eax [esi+1C4h] +
push eax  +
push offset aClosetime_min  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+104h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+108h] +
push ecx  +
push offset aShakeangle_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+110h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+114h] +
push ecx  +
push offset aShakerate_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+164h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+168h] +
push ecx  +
push offset aShakesize_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+170h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+174h] +
push ecx  +
push offset aShakecount_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+17Ch] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+180h] +
push ecx  +
push offset aShaketime_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+14Ch] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+150h] +
push ecx  +
push offset aHoverlimit_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+11Ch] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+120h] +
push ecx  +
push offset aSplash_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+128h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+12Ch] +
push ecx  +
push offset aCancel_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+134h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+138h] +
push ecx  +
push offset aMove_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+140h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+144h] +
push ecx  +
push offset aDbldist_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+158h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+15Ch] +
push ecx  +
push offset aHovercount_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+188h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+18Ch] +
push ecx  +
push offset aDbltime_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+194h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+198h] +
push ecx  +
push offset aTaptime_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+1A0h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+1A4h] +
push ecx  +
push offset aWaittime_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+1ACh] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+1B0h] +
push ecx  +
push offset aOpentime_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+1B8h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+1BCh] +
push ecx  +
push offset aHoldtime_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+1C4h] +
push eax  +
push edi  +
push eax  +
lea ecx [esi+1C8h] +
push ecx  +
push offset aClosetime_max  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+104h] +
push eax  +
push dword ptr [esi+108h]  +
push eax  +
lea eax [esi+100h] +
push eax  +
push offset aShakeangle  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+110h] +
push eax  +
push dword ptr [esi+114h]  +
push eax  +
lea eax [esi+10Ch] +
push eax  +
push offset aShakerate  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+164h] +
push eax  +
push dword ptr [esi+168h]  +
push eax  +
lea eax [esi+160h] +
push eax  +
push offset aShakesize  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+170h] +
push eax  +
push dword ptr [esi+174h]  +
push eax  +
lea eax [esi+16Ch] +
push eax  +
push offset aShakecount  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+17Ch] +
push eax  +
push dword ptr [esi+180h]  +
push eax  +
lea eax [esi+178h] +
push eax  +
push offset aShaketime  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+14Ch] +
push eax  +
push dword ptr [esi+150h]  +
push eax  +
lea eax [esi+148h] +
push eax  +
push offset aHoverlimit  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+11Ch] +
push eax  +
push dword ptr [esi+120h]  +
push eax  +
lea eax [esi+118h] +
push eax  +
push offset aSplash  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+128h] +
push eax  +
push dword ptr [esi+12Ch]  +
push eax  +
lea eax [esi+124h] +
push eax  +
push offset aCancel  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+134h] +
push eax  +
push dword ptr [esi+138h]  +
push eax  +
lea eax [esi+130h] +
push eax  +
push offset aMove  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+140h] +
push eax  +
push dword ptr [esi+144h]  +
push eax  +
lea eax [esi+13Ch] +
push eax  +
push offset aDbldist  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+158h] +
push eax  +
push dword ptr [esi+15Ch]  +
push eax  +
lea eax [esi+154h] +
push eax  +
push offset aHovercount  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+188h] +
push eax  +
push dword ptr [esi+18Ch]  +
push eax  +
lea eax [esi+184h] +
push eax  +
push offset aDbltime  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+194h] +
push eax  +
push dword ptr [esi+198h]  +
push eax  +
lea eax [esi+190h] +
push eax  +
push offset aTaptime  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+1A0h] +
push eax  +
push dword ptr [esi+1A4h]  +
push eax  +
lea eax [esi+19Ch] +
push eax  +
push offset aWaittime  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+1ACh] +
push eax  +
push dword ptr [esi+1B0h]  +
push eax  +
lea eax [esi+1A8h] +
push eax  +
push offset aOpentime  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+1B8h] +
push eax  +
push dword ptr [esi+1BCh]  +
push eax  +
lea eax [esi+1B4h] +
push eax  +
push offset aHoldtime  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
mov eax [esi+1C4h] +
push eax  +
push dword ptr [esi+1C8h]  +
add esi 1C0h +
push eax  +
push esi  +
push offset aClosetime  +
push dword ptr [ebp+8]  +
call sub_1007995  +
test eax eax +
jl loc_100797B  +
xor esi esi +
jmp loc_100797E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp+var_4] edi +
mov [ebp+pSourceSid] edi +
call sub_1009034  +
cmp eax edi +
jl loc_10103EC  +
push ebx  +
push edi  +
lea eax [ebp+pSourceSid] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_100FB69  +
mov ebx eax +
and eax 0FFFFh +
cmp eax 3F0h +
jnz loc_101039E  +
cmp [ebp+arg_4] edi +
jz loc_101039E  +
lea eax [ebp+pSourceSid] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_100F9AF  +
mov ebx eax +
cmp ebx edi +
jl loc_10103C4  +
push [ebp+bGroupDefaulted]  +
mov ecx esi +
push [ebp+var_4]  +
call sub_10090A7  +
mov ebx eax +
cmp ebx edi +
jl loc_10103C4  +
push [ebp+bGroupDefaulted]  +
mov ecx esi +
push [ebp+pSourceSid]  +
call sub_10103F7  +
mov ebx eax +
cmp [ebp+var_4] edi +
mov edi ds:__imp_free +
jz loc_10103D5  +
push [ebp+var_4]  +
call edi  +
pop ecx  +
cmp [ebp+pSourceSid] 0 +
jz loc_10103E1  +
push [ebp+pSourceSid]  +
call edi  +
pop ecx  +
test ebx ebx +
jl loc_1017128  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+bGroupDefaulted]  +
xor ebx ebx +
mov esi ecx +
push ebx  +
push dword ptr [esi]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_1016E6B  +
mov eax [esi+8] +
cmp eax ebx +
push edi  +
mov edi ds:__imp_free +
jnz loc_1016E7C  +
cmp [ebp+pSourceSid] ebx +
jz loc_1010485  +
push [ebp+pSourceSid]  +
call ds:IsValidSid  +
test eax eax +
jz loc_1016E88  +
push [ebp+pSourceSid]  +
call ds:GetLengthSid  +
mov ebx eax +
push ebx  +
call ds:__imp_malloc  +
test eax eax +
pop ecx  +
mov [esi+8] eax +
jz loc_1016E92  +
push [ebp+pSourceSid]  +
push eax  +
push ebx  +
call ds:CopySid  +
test eax eax +
jz loc_1016E9C  +
push [ebp+bGroupDefaulted]  +
push dword ptr [esi+8]  +
push dword ptr [esi]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_1016E9C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-1] +
push eax  +
lea eax [ebp-1] +
push eax  +
mov ecx offset unk_102D7CC +
call sub_10104BD  +
push offset loc_10243BD  +
call sub_1010624  +
pop ecx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov byte ptr [esi+8] 0 +
call sub_10104D6  +
mov eax esi +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 1  +
xor edi edi +
push edi  +
mov esi ecx +
call sub_10034FB  +
lea ecx [ebp+var_4] +
mov ebx eax +
call ds:??0_Lockit@std@@QAE@XZ  +
cmp dword_102D1F0 edi +
jnz loc_1010511  +
mov eax ebx +
mov dword_102D1F0 eax +
mov [eax] edi +
mov eax dword_102D1F0 +
xor ebx ebx +
mov [eax+8] edi +
inc dword_102D7C8  +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
cmp ebx edi +
jnz sub_10175D5  +
push edi  +
push dword_102D1F0  +
mov ecx esi +
call sub_10034FB  +
mov [esi+0Ch] edi +
mov [esi+4] eax +
mov [eax] eax +
mov esi [esi+4] +
pop edi  +
mov [esi+8] esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
leave   +
retn 0Ch  +
***
call _controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-1] +
push eax  +
lea eax [ebp-1] +
push eax  +
mov ecx offset unk_102D180 +
call sub_100CC74  +
push offset loc_102434E  +
call sub_1010624  +
pop ecx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1010640  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_102D81C 0FFFFFFFFh +
jnz loc_1017EE1  +
pop ebp  +
jmp ds:_onexit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push [ebp+arg_0]  +
mov esi [ebp+arg_4] +
push esi  +
call sub_100A199  +
test eax eax +
jnz loc_101806E  +
mov eax [ebp+arg_8] +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_1010710  +
push edi  +
push 40000000h  +
push 3  +
lea eax [ebp+SecurityAttributes] +
push eax  +
push 3  +
push 80000000h  +
push dword ptr [esi]  +
mov [ebp+SecurityAttributes.nLength] 0Ch +
mov [ebp+SecurityAttributes.bInheritHandle] edi +
mov [ebp+SecurityAttributes.lpSecurityDescriptor] edi +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
mov [esi+8] eax +
jz loc_1018075  +
push ebx  +
mov [esi+10h] edi +
mov [esi+18h] edi +
lea edi [esi+1Ch] +
push edi  +
push dword ptr [esi+8]  +
xor ebx ebx +
inc ebx  +
mov [esi+0Ch] ebx +
mov [esi+14h] ebx +
call HidD_GetPreparsedData  +
test al al +
jz loc_1010715  +
lea eax [esi+60h] +
push eax  +
push dword ptr [esi+8]  +
call HidD_GetAttributes  +
test al al +
jz loc_1010715  +
lea eax [esi+20h] +
push eax  +
push dword ptr [edi]  +
call HidP_GetCaps  +
test eax eax +
jz loc_1010715  +
cmp word ptr [esi+22h] 0Dh +
jnz loc_1018086  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
mov [esi+8] eax +
jmp loc_10106BD  +
call ds:GetLastError  +
jmp loc_1018086  +
***
push 0  +
mov ecx offset unk_102702C +
call sub_101074D  +
push offset byte_102439D  +
call sub_1010624  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_10049A5  +
mov dword ptr [esi] offset sub_1001D04 +
mov eax esi +
pop esi  +
retn 4  +
***
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jz loc_1016924  +
cmp dword ptr [ecx+14h] 0 +
jnz loc_10107A6  +
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+14h] eax +
mov [ecx+14h] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
mov eax [edi+4] +
cmp esi [eax+4] +
jz loc_100575B  +
jmp loc_100574E  +
cmp esi [eax] +
jz loc_1016966  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10107D6  +
jmp loc_1010795  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_1027088 +
jnz loc_10164FD  +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jz loc_10085D2  +
mov ecx [edx+4] +
cmp edx [ecx] +
jz loc_1016505  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov [esi+4] edx +
jmp loc_1006478  +
mov [ecx+4] eax +
jmp loc_1006499  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_101578C  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 38h +
call sub_1005FA9  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1015873  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call sub_1006AA5  +
pop ebp  +
retn 8  +
***
xor eax eax +
inc eax  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
xor eax eax +
cmp [ecx+44h] eax +
setz al  +
pop ebp  +
retn 4  +
***
mov eax [ebx+4] +
cmp esi [eax+4] +
jz loc_10108AD  +
cmp [esi+14h] edi +
jz loc_10108E8  +
mov [esi+14h] edi +
jmp loc_1004054  +
***
mov eax ecx +
jmp loc_1004101  +
***
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
jmp loc_100417D  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_10154DD  +
jmp loc_10154C6  +
***
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jz loc_101673F  +
cmp dword ptr [eax+14h] 0 +
jz loc_10167B8  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_1010926  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_1010926  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
jmp loc_10108A0  +
mov ecx [ebx] +
cmp ecx eax +
jnz loc_101668D  +
jmp loc_1003FE4  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_10167ED  +
jmp loc_10167D6  +
push esi  +
call sub_101094C  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
jmp loc_1004045  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027088 +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_1010965  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_101095A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+3Ch] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+4] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jz loc_10159AD  +
cmp edi 1 +
jz loc_10109C4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100376D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1003778  +
***
push offset unk_102702C  +
call sub_1001D15  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
jmp loc_10109A3  +
***
xor ebx ebx +
jmp loc_10039F6  +
***
cmp esi edi +
jnz loc_1013320  +
test byte ptr [ebx+134h] 2 +
jnz loc_1013320  +
mov [ebp+14h] edi +
jmp loc_1013327  +
***
push dword ptr [ebp-1Ch]  +
lea ecx [ebx+0CCh] +
call sub_101311E  +
lea eax [ebx+0F0h] +
push eax  +
call ds:LeaveCriticalSection  +
test byte ptr [ebx+34h] 22h +
mov ecx [ebx+2Ch] +
jnz loc_1015684  +
push dword ptr [ebp+10h]  +
call sub_10115D9  +
jmp loc_1013402  +
***
mov edx [esi+20h] +
mov bx [eax+16h] +
movsx ecx cx +
shl ecx 5 +
mov [ecx+edx+16h] bx +
jmp loc_1013161  +
***
cmp eax 7 +
jnz loc_1012CA2  +
jmp loc_1012BBA  +
cmp [ebp+arg_0] 3 +
jnz loc_1010A9F  +
jmp loc_1010A8F  +
mov eax [ecx+14h] +
sub eax [esi+3B8h] +
cdq   +
mov edi eax +
mov eax [ecx+18h] +
sub eax [esi+3BCh] +
xor edi edx +
sub edi edx +
cdq   +
xor eax edx +
sub eax edx +
mov edx [ecx+1Ch] +
sub edx [esi+3ACh] +
cmp dword_1027370 ebx +
jz loc_1010A58  +
cmp edi [esi+3F8h] +
jl loc_1010B4A  +
and [ebp+var_8] 0 +
cmp [ebp+var_8] 0 +
jnz loc_1010B69  +
xor edi edi +
jmp loc_1012BFA  +
***
mov eax [ebp+arg_8] +
sub eax [esi+16Ch] +
mov edi [ebp+arg_14] +
cmp dword_1027180 eax +
mov ebx [ebp+arg_10] +
jnb loc_1010B33  +
mov edx [ebp+arg_0] +
xor eax eax +
cmp [edx+23Ch] eax +
push 2  +
pop ecx  +
jnz loc_10151CE  +
mov [ebp+pInputs.type] eax +
mov dword ptr [ebp+pInputs.anonymous_0+8] eax +
mov dword ptr [ebp+pInputs.anonymous_0+10h] eax +
xor edx edx +
cmp [ebp+arg_1C] eax +
mov eax [ebx] +
mov dword ptr [ebp+pInputs.anonymous_0] eax +
mov eax [edi] +
mov dword ptr [ebp+pInputs.anonymous_0+4] eax +
mov eax [ebp+arg_18] +
setnz dl  +
and eax 0FFh +
or eax 0FF515700h +
mov dword ptr [ebp+pInputs.anonymous_0+14h] eax +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
or edx ecx +
or edx 0C000h +
push 1  +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] edx +
call ds:SendInput  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push dword ptr [edi]  +
push dword ptr [ebx]  +
push [ebp+arg_0]  +
push 4  +
call sub_1014518  +
mov eax [esi+170h] +
mov [ebx] eax +
mov eax [esi+174h] +
mov [edi] eax +
xor eax eax +
jmp loc_1014769  +
***
cmp eax [esi+3FCh] +
jge loc_1010A9B  +
cmp edx dword_1027160 +
jnb loc_1010A9B  +
mov [ebp+var_8] 1 +
push 11h  +
push ecx  +
mov ecx esi +
call sub_101240F  +
mov dword ptr [esi+3A8h] 6 +
mov dword ptr [esi+3A4h] 3 +
jmp loc_1012CA2  +
***
mov esi [ebp+arg_0] +
push 8  +
pop ecx  +
add esi 0CCh +
lea edi [ebp+var_34] +
lea eax [ebp+var_34] +
movs   +
push eax  +
jmp loc_1005002  +
***
mov eax [ebx+8] +
add eax 1Fh +
shr eax 5 +
shl eax 2 +
push eax  +
call ??2@YAPAXI@Z  +
test eax eax +
pop ecx  +
mov [ebx+10h] eax +
jz loc_101721C  +
mov ecx [ebx+8] +
mov edx [ebp+arg_0] +
mov esi [edx+10h] +
add ecx 1Fh +
shr ecx 5 +
shl ecx 2 +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
jmp loc_1005315  +
mov eax [ebx+8] +
add eax 1Fh +
shr eax 5 +
shl eax 2 +
push eax  +
call ??2@YAPAXI@Z  +
test eax eax +
pop ecx  +
mov [ebx+14h] eax +
jz loc_101721C  +
mov ecx [ebx+8] +
mov edx [ebp+arg_0] +
mov esi [edx+14h] +
add ecx 1Fh +
shr ecx 5 +
shl ecx 2 +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
jmp loc_100531F  +
***
mov ebx [ebp+8] +
jmp loc_1005BF9  +
***
mov [ebx+148h] esi +
jmp loc_1004EE3  +
xor eax eax +
jmp loc_1005021  +
mov ecx [ebx+0B8h] +
mov [ecx+eax*4] esi +
jmp loc_10051EF  +
***
push dword ptr [ebp+0Ch]  +
call ds:IsWindow  +
test eax eax +
jz loc_1017A87  +
jmp loc_1005BD0  +
***
mov eax 80004005h +
jmp loc_1005D77  +
***
lea esi [ebx+23Ch] +
lea edi [ebp-2Ch] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp-24h] +
lea esi [ebx+24Ch] +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp-34h] eax +
jz loc_1010CC0  +
and dword ptr [ebp+18h] 0 +
lea ecx [ebp+18h] +
push ecx  +
push eax  +
call sub_100174E  +
mov eax [ebp+18h] +
test eax eax +
jz loc_1017AE6  +
test byte ptr [eax+134h] 1 +
jz loc_1017AE6  +
lea eax [ebp-14h] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp-2Ch] +
movs   +
movs   +
movs   +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebx+238h] +
movs   +
call sub_1010CE9  +
jmp loc_1005D15  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
lea ecx [ebx+4] +
mov esi ecx +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
cmp eax [ebp+var_10] +
mov [ebp+var_4] ecx +
jnz loc_101769B  +
push [ebp+arg_14]  +
mov ecx ebx +
call sub_100271D  +
mov esi [ebp+var_4] +
mov eax [ebp+arg_0] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1010D50 +
mov byte ptr [ecx+8] 0 +
call sub_100C314  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
call sub_10017A5  +
mov eax [ebp+arg_0] +
lea esi [ebp+var_10] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+nCode] 0 +
push esi  +
mov esi [ebp+lParam] +
jl loc_1010DE7  +
mov eax [esi+14h] +
and eax 0FFFFFF00h +
cmp eax 0FF515700h +
jnz loc_1013CA7  +
cmp dword ptr [esi+14h] 0FF575100h +
jz loc_100250F  +
push esi  +
push [ebp+wParam]  +
mov dword ptr [esi+14h] 0FF575100h +
push [ebp+nCode]  +
push hhk  +
call ds:CallNextHookEx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov dword ptr [eax] 2 +
xor eax eax +
pop ebp  +
retn 4  +
***
test byte ptr [ecx+0B4h] 1 +
jz loc_1007032  +
mov eax [ecx+148h] +
sub eax [ecx+140h] +
retn   +
***
test byte ptr [ecx+0B4h] 1 +
jz loc_100703F  +
mov eax [ecx+14Ch] +
sub eax [ecx+144h] +
retn   +
***
push 7  +
pop edi  +
jmp loc_10120F4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10069D1  +
mov dword ptr [esi] offset off_1010EF4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jz loc_10168E8  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+8] +
mov eax [esi] +
push edi  +
mov edi 80004005h +
mov [ebp+arg_0] eax +
dec [ebp+arg_4]  +
cmp eax esi +
jz loc_1010F5F  +
cmp [ebp+arg_4] 0 +
jg loc_10111CA  +
cmp eax esi +
jz loc_1010F71  +
add eax 0Ch +
push eax  +
push [ebp+arg_8]  +
call sub_1010F7E  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
mov eax [ebp+arg_4] +
jz loc_10168F2  +
mov edx [eax+4] +
mov [ecx] edx +
mov eax [eax+4] +
test eax eax +
jz loc_1010FA3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax offset byte_1023D55 +
call sub_10014DD  +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
cmp [ebp+10h] ebx +
push esi  +
mov [ebp-14h] ebx +
jz loc_1017612  +
push edi  +
mov edi [ebp+0Ch] +
cmp edi ebx +
jl loc_1011081  +
mov eax [ebp+8] +
mov eax [eax+10h] +
cmp edi eax +
mov [ebp-18h] eax +
jge loc_1011081  +
xor esi esi +
inc edi  +
inc esi  +
cmp edi ebx +
mov [ebp+0Ch] ebx +
jle loc_1011041  +
cmp esi [ebp-18h] +
jg loc_101103C  +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call sub_1010F2D  +
cmp eax ebx +
mov eax [ebp-10h] +
jl loc_1011074  +
cmp eax ebx +
jz loc_1011074  +
lea ecx [eax-8] +
cmp ecx ebx +
jz loc_101761C  +
cmp [ecx+48h] ebx +
jz loc_101102C  +
inc dword ptr [ebp+0Ch]  +
mov [ebp-14h] esi +
mov ecx [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
call dword ptr [ecx+8]  +
inc esi  +
cmp [ebp+0Ch] edi +
jl loc_1010FF3  +
cmp [ebp+0Ch] edi +
jl loc_1011081  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+8]  +
call sub_1010F2D  +
mov ecx [ebp+10h] +
cmp [ecx] ebx +
jz loc_101106D  +
cmp eax ebx +
jl loc_101106D  +
xor eax eax +
pop edi  +
mov ecx [ebp-0Ch] +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
mov eax 80004005h +
jmp loc_101105C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101106D  +
jmp loc_1017620  +
mov eax 80070057h +
jmp loc_101105C  +
***
mov eax offset byte_1023D55 +
call sub_10014DD  +
push ecx  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_101762B  +
push ebx  +
mov ebx [ebp+8] +
and dword ptr [ebp+8] 0 +
push esi  +
mov esi [ebx+10h] +
push edi  +
xor edi edi +
inc edi  +
cmp esi edi +
jl loc_10110F7  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push edi  +
push ebx  +
call sub_1010F2D  +
test eax eax +
mov eax [ebp-10h] +
jl loc_1011112  +
test eax eax +
jz loc_1011112  +
lea ecx [eax-8] +
test ecx ecx +
jz loc_1017635  +
cmp dword ptr [ecx+48h] 0 +
jz loc_10110E8  +
inc dword ptr [ebp+8]  +
mov ecx [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi esi +
jle loc_10110B6  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
leave   +
retn 8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101763F  +
jmp loc_1017639  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+4Ch] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+18h] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jz loc_1016065  +
cmp edi 1 +
jnz loc_1011171  +
push offset unk_102702C  +
call sub_1001D15  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+4Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 18h +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jnz loc_10111B9  +
push offset Addend  +
call edi  +
push offset unk_102702C  +
call sub_1001D3C  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
lea ecx [ebp+arg_0] +
call sub_10111DF  +
mov eax [ebp+arg_0] +
jmp loc_1010F4E  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_1027058 +
jz loc_100AAD6  +
push eax  +
call sub_1011204  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027058 +
mov ecx [eax] +
cmp ecx edx +
jnz loc_101121C  +
pop ebp  +
retn 4  +
mov eax ecx +
jmp loc_1011212  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov dword ptr [eax] 3 +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+48h] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+18h] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jz loc_1016D3B  +
cmp edi 1 +
jz loc_10024E0  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+48h] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 18h +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jz loc_10024F9  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Point.y] +
push eax  +
lea eax [ebp+arg_4] +
xor esi esi +
push eax  +
mov edi ecx +
mov [ebp+Point.y] esi +
call sub_100174E  +
mov ebx [ebp+Point.y] +
cmp ebx esi +
jz loc_1011300  +
cmp [ebx+2Ch] esi +
jz loc_1011300  +
cmp dword ptr [ebx+9Ch] 1 +
jz loc_101232B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax dword ptr [ebp+pInputs.anonymous_0+0Ch] +
jmp loc_1011545  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jl loc_101135E  +
cmp edi 3Fh +
jge loc_101135E  +
mov eax [ecx+4] +
xor esi esi +
test eax eax +
jbe loc_1011349  +
mov edx [ecx] +
cmp [edx] edi +
jz loc_1011349  +
inc esi  +
add edx 8 +
cmp esi eax +
jb loc_101133D  +
cmp esi eax +
jnb loc_101135E  +
mov eax [ecx] +
mov ecx [ebp+arg_4] +
mov [eax+esi*8+4] ecx +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax 80004005h +
jmp loc_1011358  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ebp+arg_4] +
test edx edx +
jz locret_101144F  +
cmp [ebp+arg_8] 0 +
jz locret_101144F  +
mov eax [ebp+arg_0] +
test eax eax +
jz locret_101144F  +
cmp [ebp+arg_C] 0 +
mov ecx [edx] +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [edx+4] +
mov edx [eax] +
mov [ebp+arg_4] ebx +
mov ebx [eax+0Ch] +
push edi  +
mov edi [eax+8] +
mov [ebp+arg_0] edx +
mov [ebp+var_8] ebx +
jz loc_1013EC3  +
mov eax [ebp+arg_10] +
sub eax [ebp+arg_20] +
mov ebx [ebp+arg_28] +
sub ebx [ebp+arg_20] +
shl eax 10h +
cdq   +
idiv  ebx +
mov [ebp+arg_C] ebx +
mov ebx [ebp+arg_2C] +
sub ebx [ebp+arg_24] +
sub ecx [ebp+arg_0] +
sub edi [ebp+arg_0] +
mov [ebp+var_4] ebx +
sub esi [ebp+arg_4] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_14] +
sub eax [ebp+arg_24] +
shl eax 10h +
cdq   +
idiv  ebx +
mov [ebp+var_14] eax +
mov eax [ebp+arg_18] +
sub eax [ebp+arg_20] +
shl eax 10h +
cdq   +
idiv  [ebp+arg_C] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_1C] +
sub eax [ebp+arg_24] +
shl eax 10h +
cdq   +
idiv  ebx +
mov ebx eax +
mov eax [ebp+var_10] +
sub eax [ebp+var_18] +
imul ecx eax +
cdq   +
sub eax edx +
sar eax 1 +
add ecx eax +
mov eax ecx +
cdq   +
idiv  edi +
mov edi [ebp+arg_8] +
mov ecx [ebp+var_8] +
sub ecx [ebp+arg_4] +
add eax [ebp+var_18] +
mov [edi] eax +
mov eax ebx +
sub eax [ebp+var_14] +
imul esi eax +
cdq   +
sub eax edx +
sar eax 1 +
add esi eax +
mov eax esi +
cdq   +
idiv  ecx +
add eax [ebp+var_14] +
mov [edi+4] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 30h  +
***
mov eax offset byte_1023F09 +
call sub_10014DD  +
sub esp 68h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ebx ecx +
xor esi esi +
lea ecx [ebx+2E8h] +
mov [ebp-14h] esi +
mov [ebp-18h] esi +
call sub_1011631  +
cmp eax esi +
mov [ebp-28h] eax +
jl loc_10115C3  +
mov ecx [ebp-18h] +
push 17h  +
call sub_1011830  +
mov eax [eax] +
mov ecx [ebp-18h] +
push 2Ch  +
mov [ebp-20h] eax +
call sub_1011830  +
push ebx  +
lea ecx [ebp-34h] +
mov [ebp-10h] esi +
call sub_10016B1  +
cmp dword ptr [ebp+8] 0FFFFFFFFh +
mov [ebp-4] esi +
jnz loc_1017998  +
lea esi [ebx+244h] +
lea edi [ebp-44h] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp-10h] +
cmp esi 1 +
jz loc_10122B2  +
lea eax [esi+esi*2] +
shl eax 4 +
lea esi [eax+ebx+254h] +
mov eax [ebp-3Ch] +
mov [ebp-24h] esi +
lea edi [ebp-54h] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp-4Ch] eax +
jz loc_1011545  +
mov ecx [eax] +
cmp ecx 1 +
jz loc_101153B  +
push ecx  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
call sub_10112C8  +
test eax eax +
jnz loc_1011538  +
push 0  +
lea eax [ebp-74h] +
push eax  +
lea ecx [ebp-44h] +
call sub_1010D89  +
mov esi [ebp-24h] +
mov eax [ebp-3Ch] +
lea edi [ebp-54h] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp-4Ch] eax +
jz loc_1011309  +
mov eax [ebp-3Ch] +
jmp loc_10114F9  +
mov eax [ebp-3Ch] +
cmp dword ptr [ebp-10h] 0 +
jz loc_1014A41  +
mov esi [ebp-24h] +
lea edi [ebp-64h] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp-5Ch] eax +
jz loc_1012301  +
cmp dword ptr [eax] 1 +
jnz loc_1011567  +
cmp dword ptr [ebp-10h] 1 +
jz loc_1012301  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
call sub_100174E  +
cmp dword ptr [ebp-14h] 0 +
jz loc_1012301  +
mov eax [ebp-34h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add eax 2D0h +
push eax  +
call ds:LeaveCriticalSection  +
mov esi [ebp-14h] +
test esi esi +
push 2  +
pop ecx  +
jz loc_10115C0  +
cmp dword ptr [ebp+8] 0FFFFFFFFh +
jnz loc_10115AF  +
lea edi [ebx+88h] +
mov eax [edi] +
cmp eax [esi+4] +
jnz loc_1013B07  +
mov eax [esi] +
push ebx  +
push ecx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-18h]  +
push esi  +
call dword ptr [eax+8]  +
mov [ebp-28h] eax +
mov eax [ebp-28h] +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 2E8h +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1011631  +
mov ebx eax +
test ebx ebx +
jl loc_101161C  +
mov eax [ebp+arg_0] +
dec dword ptr [esi+8]  +
and dword ptr [eax+0Ch] 0 +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [ebp+arg_0] +
shr eax 14h +
xor ebx ebx +
cmp eax [esi+4] +
jnb loc_1013BD7  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1013BD7  +
mov edx [esi+10h] +
lea eax [eax+eax*8] +
lea eax [edx+eax*4] +
cmp dword ptr [eax+0Ch] 1 +
jnz loc_1013BD7  +
mov [ecx] eax +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_10] ecx +
push 3  +
mov ecx esi +
call sub_1011830  +
mov ebx [eax] +
xor eax eax +
mov al bl +
xor edi edi +
inc edi  +
push 17h  +
mov ecx esi +
mov [ebp+var_20] ebx +
and eax edi +
mov [ebp+var_4] eax +
call sub_1011830  +
mov eax [eax] +
mov [ebp+var_14] eax +
mov eax ebx +
sar eax 8 +
and eax edi +
mov [ebp+var_C] eax +
mov eax ebx +
sar eax 9 +
and eax edi +
mov [ebp+var_1C] eax +
mov eax ebx +
sar eax 10h +
push 0  +
mov ecx esi +
mov [ebp+var_8] eax +
call sub_1011830  +
mov eax [eax] +
push edi  +
mov ecx esi +
mov [ebp+var_30] eax +
call sub_1011830  +
mov ebx [ebp+arg_4] +
mov eax [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebx+130h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
mov [ebp+var_2C] eax +
mov eax [ebx+0B4h] +
lea esi [ebx+140h] +
movs   +
and eax 1 +
push eax  +
movs   +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_30] +
movs   +
push eax  +
lea eax [ebx+0A4h] +
push eax  +
movs   +
call sub_101136A  +
mov eax [ebx] +
lea ecx [ebp+var_18] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+4]  +
cmp [ebp+var_18] 3 +
jz loc_1013E10  +
cmp word ptr [ebp+var_8] 15h +
jz loc_1014BDA  +
cmp word ptr [ebp+var_8] 16h +
jz loc_1014BDA  +
mov edi [ebp+var_10] +
push 14h  +
pop eax  +
cmp [edi+158h] ax +
jz loc_101529B  +
test byte ptr [edi+156h] 1 +
jnz loc_10124F0  +
mov esi [ebp+var_14] +
cmp [ebp+var_18] 3 +
jz loc_1011824  +
cmp [ebp+var_C] 0 +
jnz loc_1014687  +
cmp word ptr [edi+158h] 0Fh +
jz loc_1011824  +
call ds:GetTickCount  +
mov [ebp+arg_4] eax +
xor eax eax +
cmp [ebp+var_C] eax +
jnz loc_10146C1  +
mov ecx [ebp+var_28] +
cmp ecx [edi+164h] +
jz loc_101457B  +
xor ecx ecx +
mov cl [edi+154h] +
push 9  +
pop edx  +
and ecx edx +
sub ecx eax +
jnz loc_101461C  +
mov ecx [ebp+var_4] +
and ecx edx +
sub ecx eax +
jnz loc_1014BF3  +
push [ebp+arg_8]  +
push esi  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push ebx  +
push eax  +
call sub_1014518  +
mov eax [ebp+var_28] +
mov [edi+164h] eax +
mov eax [ebp+var_24] +
mov [edi+168h] eax +
mov ax word ptr [ebp+var_4] +
mov [edi+154h] ax +
mov ax word ptr [ebp+var_8] +
mov [edi+158h] ax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+4] +
push esi  +
xor esi esi +
test edx edx +
jbe loc_1011861  +
mov eax [ecx] +
push edi  +
mov edi [eax] +
cmp edi [ebp+arg_0] +
jz loc_1011860  +
inc esi  +
add eax 8 +
cmp esi edx +
jb loc_1011842  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
pop edi  +
mov eax [ecx] +
lea eax [eax+esi*8+4] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_10118B2  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jz loc_1007FB9  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_1007FB9  +
lea eax [ebp+arg_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_1027050 +
cmp ecx edx +
jz loc_10118DF  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jb loc_101750B  +
mov eax ecx +
mov ecx [ecx] +
cmp ecx edx +
jnz loc_10118CD  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov ebx ecx +
lea ecx [ebx+2E8h] +
call sub_1011631  +
test eax eax +
jl loc_10119C6  +
mov ecx [ebp+var_4] +
push 3  +
call sub_1011830  +
mov eax [eax] +
mov ecx [ebp+var_4] +
and eax 1 +
push 0  +
mov [ebp+var_8] eax +
call sub_1011830  +
mov eax [eax] +
mov ecx [ebp+var_4] +
push 1  +
mov [ebp+var_10] eax +
call sub_1011830  +
sub esp 10h +
mov edi esp +
mov eax [eax] +
lea esi [ebx+130h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+140h] +
movs   +
movs   +
movs   +
mov [ebp+var_C] eax +
mov eax [ebx+0B4h] +
movs   +
xor esi esi +
inc esi  +
and eax esi +
push eax  +
mov eax [ebp+var_4] +
add eax 14h +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebx+0A4h] +
push eax  +
call sub_10119D2  +
call ds:GetTickCount  +
mov ecx [ebp+var_4] +
mov [ecx+1Ch] eax +
mov eax [ebx+238h] +
xor edi edi +
cmp eax edi +
jnz loc_101228D  +
cmp [ebp+var_8] edi +
jnz loc_1012B25  +
cmp eax edi +
jnz loc_101228D  +
cmp [ebp+var_8] edi +
jnz loc_1012296  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_1011FBE  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1011A3E  +
cmp [ebp+arg_8] 0 +
jz loc_1011A3E  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1011A3E  +
mov ecx [edx] +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [edx+4] +
mov edx [eax] +
mov [ebp+arg_4] ebx +
mov ebx [eax+0Ch] +
sub ebx [ebp+arg_4] +
sub esi [ebp+arg_4] +
push edi  +
mov edi [eax+8] +
sub edi edx +
sub ecx edx +
cmp [ebp+arg_C] 0 +
jz loc_1013EF0  +
mov eax [ebp+arg_18] +
sub eax [ebp+arg_10] +
imul eax ecx +
cdq   +
idiv  edi +
mov ecx [ebp+arg_8] +
add eax [ebp+arg_10] +
mov [ecx] eax +
mov eax [ebp+arg_1C] +
sub eax [ebp+arg_14] +
imul eax esi +
cdq   +
idiv  ebx +
add eax [ebp+arg_14] +
pop edi  +
pop esi  +
mov [ecx+4] eax +
pop ebx  +
pop ebp  +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_C] 0FFFFFFFFh +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+18h] +
xor edi edi +
push eax  +
mov [ebp+var_8] edi +
mov [ebp+var_10] edi +
call ds:EnterCriticalSection  +
mov bx [esi+0Ch] +
mov [ebp+var_4] edi +
mov di [esi+4] +
test di di +
jle loc_1011A90  +
mov ecx [esi+10h] +
movsx eax bx +
lea edx [eax+eax*8] +
lea ecx [ecx+edx*4] +
cmp dword ptr [ecx+0Ch] 1 +
jz loc_1014AB4  +
cmp word ptr [ebp+var_4] di +
jge loc_1014AE3  +
cmp [ebp+arg_0] 0 +
jz loc_1014AE3  +
mov ecx esi +
movsx edi bx +
call sub_1011B36  +
mov edx [esi+10h] +
mov ecx edi +
shl ecx 14h +
or eax ecx +
lea ecx [edi+edi*8] +
shl ecx 2 +
mov [edx+ecx+8] eax +
mov eax [esi+10h] +
mov dword ptr [eax+ecx+0Ch] 1 +
movsx eax word ptr [ebp+var_4] +
mov edi [esi+10h] +
lea eax [eax+eax*8] +
xor edx edx +
shl eax 2 +
cmp [edi+eax+4] edx +
jbe loc_1011AF7  +
mov edi [esi+10h] +
mov edi [edi+ecx] +
and dword ptr [edi+edx*8+4] 0 +
mov edi [esi+10h] +
inc edx  +
cmp edx [edi+eax+4] +
jb loc_1011AE2  +
mov eax [esi+10h] +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
inc dword ptr [esi+8]  +
mov [esi+0Ch] bx +
lea eax [esi+18h] +
push eax  +
call ds:LeaveCriticalSection  +
cmp [ebp+var_8] 80004005h +
jz loc_1011B27  +
mov eax [esi+8] +
cmp eax [esi+4] +
jnb loc_1017B18  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax [ecx] +
cmp eax 100000h +
jnb loc_1017B0F  +
lea edx [eax+1] +
mov [ecx] edx +
retn   +
***
push [ebp+var_4]  +
lea ecx [esi+33Ch] +
call sub_102109B  +
jmp loc_101201C  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
lea ecx [esi+358h] +
call sub_101C7ED  +
jmp loc_1012029  +
xor eax eax +
jmp loc_1012243  +
mov eax [esi+424h] +
cdq   +
idiv  ecx +
mov edi 0B4h +
mov ecx eax +
cmp ecx edi +
jle loc_1011B96  +
sub ecx 168h +
jmp loc_1011BA4  +
cmp ecx 0FFFFFF4Ch +
jge loc_1011BA4  +
add ecx 168h +
cmp dword ptr [esi+42Ch] 0 +
jz loc_1011BEF  +
mov eax [esi+420h] +
sub edi dword_1027134 +
sub eax ecx +
cdq   +
xor eax edx +
sub eax edx +
cmp edi eax +
ja loc_1011BE3  +
mov edx dword_1027134 +
add edx 0B4h +
cmp edx eax +
jb loc_1011BE3  +
mov eax [esi+42Ch] +
inc eax  +
mov [esi+42Ch] eax +
jmp loc_1011BF9  +
and dword ptr [esi+42Ch] 0 +
jmp loc_1002487  +
mov dword ptr [esi+42Ch] 1 +
mov [esi+430h] ebx +
mov [esi+420h] ecx +
jmp loc_1002487  +
sub ebx [esi+430h] +
cmp ebx dword_102715C +
jb loc_101215D  +
and dword ptr [eax] 0 +
jmp loc_101215D  +
mov ecx [esi+3C0h] +
and dword ptr [eax] 0 +
mov [esi+440h] ecx +
mov ecx [esi+3C4h] +
mov [esi+444h] ecx +
mov ecx esi +
mov byte ptr [esi+448h] 0 +
call sub_1020B8D  +
jmp loc_1012171  +
cmp eax 5Ah +
jle loc_1011C61  +
sub eax 168h +
jmp loc_10024C1  +
test ecx ecx +
jmp loc_10024BB  +
cmp eax 0FFFFFFA6h +
jge loc_10024C1  +
add eax 168h +
jmp loc_10024C1  +
***
mov dword ptr [esi+3A8h] 3 +
mov eax [eax+1Ch] +
mov ecx offset unk_1027098 +
mov [esi+3ACh] eax +
call sub_102051F  +
***
mov edi [ebp+var_4] +
jmp loc_101227B  +
push dword ptr [esi+3B4h]  +
lea eax [esi+3D4h] +
push dword ptr [esi+3B0h]  +
push eax  +
call ebx  +
test eax eax +
jz loc_1011E69  +
cmp [ebp+var_8] 0 +
jz loc_1011E69  +
mov edi [ebp+var_4] +
mov ecx [edi+1Ch] +
sub ecx [esi+3ACh] +
mov eax dword_1027170 +
cmp ecx eax +
jb loc_1011E19  +
cmp dword_1027120 0 +
jz loc_1011CF8  +
mov dword ptr [esi+3A8h] 5 +
jmp loc_1014BC5  +
push dword ptr [esi+438h]  +
mov ecx esi +
push dword ptr [esi+434h]  +
call sub_1012990  +
push 14h  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
mov dword ptr [esi+3A8h] 6 +
jmp loc_1011C98  +
push dword ptr [esi+3B4h]  +
lea eax [esi+3D4h] +
push dword ptr [esi+3B0h]  +
push eax  +
call ebx  +
test eax eax +
jz loc_1011DE1  +
mov eax [esi+3E4h] +
cmp eax [esi+400h] +
ja loc_1011DE1  +
cmp [ebp+var_8] 0 +
jz loc_1011DE1  +
mov edx [ebp+var_4] +
mov eax [edx+1Ch] +
sub eax [esi+3ACh] +
mov ecx dword_102716C +
cmp eax ecx +
jnb loc_1011DBC  +
push 0  +
push dword ptr [esi+438h]  +
push dword ptr [esi+434h]  +
push ecx  +
push eax  +
push offset hdc  +
mov ecx esi +
call sub_1020C9F  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
sub eax [esi+3ACh] +
push 1  +
push dword ptr [esi+438h]  +
push dword ptr [esi+434h]  +
push dword_102716C  +
push eax  +
push offset unk_1027290  +
jmp loc_1011F26  +
push 15h  +
push edx  +
mov ecx esi +
call sub_101240F  +
mov eax [ebp+var_4] +
mov dword ptr [esi+3A8h] 4 +
mov eax [eax+1Ch] +
mov [esi+3ACh] eax +
jmp loc_10122AD  +
push dword ptr [esi+438h]  +
mov ecx esi +
push dword ptr [esi+434h]  +
call sub_1012990  +
push 13h  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
mov dword ptr [esi+3A8h] 6 +
mov dword ptr [esi+3A4h] 1 +
jmp loc_10122AD  +
push 0  +
push dword ptr [esi+438h]  +
mov ecx esi +
push dword ptr [esi+434h]  +
push eax  +
mov eax [edi+1Ch] +
sub eax [esi+3ACh] +
push eax  +
push offset stru_10272BC  +
call sub_1020C9F  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
sub eax [esi+3ACh] +
push 1  +
push dword ptr [esi+438h]  +
push dword ptr [esi+434h]  +
push dword_1027170  +
push eax  +
push offset unk_10272E8  +
jmp loc_1011F26  +
push dword ptr [esi+438h]  +
mov ecx esi +
push dword ptr [esi+434h]  +
call sub_1012990  +
cmp dword_1027120 0 +
jz loc_1011E8C  +
and dword ptr [esi+3A4h] 0 +
push 14h  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
mov dword ptr [esi+3A8h] 6 +
jmp loc_10122AD  +
push dword ptr [esi+3B4h]  +
lea eax [esi+3D4h] +
push dword ptr [esi+3B0h]  +
push eax  +
call ebx  +
test eax eax +
jz loc_1011F60  +
cmp [ebp+var_8] 0 +
jz loc_1011F60  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
sub eax [esi+3ACh] +
mov ecx dword_1027174 +
cmp eax ecx +
jnb loc_1011F32  +
push 0  +
push dword ptr [esi+438h]  +
push dword ptr [esi+434h]  +
push ecx  +
push eax  +
push offset stru_1027314  +
mov ecx esi +
call sub_1020C9F  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
sub eax [esi+3ACh] +
push 1  +
push dword ptr [esi+438h]  +
push dword ptr [esi+434h]  +
push dword_1027174  +
push eax  +
push offset stru_1027340  +
mov ecx esi +
call sub_1020C9F  +
jmp loc_10122AD  +
push dword ptr [esi+438h]  +
mov ecx esi +
push dword ptr [esi+434h]  +
call sub_1012990  +
push 1Eh  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
mov dword ptr [esi+3A8h] 8 +
jmp loc_10122AD  +
push dword ptr [esi+438h]  +
mov ecx esi +
push dword ptr [esi+434h]  +
call sub_1012990  +
push 14h  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
and dword ptr [esi+3A4h] 0 +
mov dword ptr [esi+3A8h] 6 +
jmp loc_10122AD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+2E8h] +
call sub_1011631  +
test eax eax +
mov [ebp+arg_0] eax +
jl loc_1012244  +
mov ecx [ebp+var_4] +
push ebx  +
push 17h  +
call sub_1011830  +
mov ebx [eax] +
mov eax [esi] +
lea ecx [ebp+var_C] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
cmp [ebp+var_C] 3 +
mov [ebp+var_8] 1 +
jz loc_1012029  +
cmp dword_1027370 2 +
jz loc_1011B49  +
cmp dword_1027374 2 +
jz loc_1011B5C  +
mov eax [esi+3A8h] +
test eax eax +
jnz loc_1012249  +
mov ecx [ebp+var_4] +
push edi  +
push 0  +
call sub_1011830  +
mov eax [eax] +
mov ecx [ebp+var_4] +
push 1  +
mov [ebp+var_20] eax +
call sub_1011830  +
mov eax [eax] +
mov edi [ebp+var_4] +
mov ecx [esi+3A8h] +
test ecx ecx +
mov [ebp+var_1C] eax +
mov eax [esi+3B0h] +
mov [esi+3C0h] eax +
mov eax [esi+3B4h] +
mov [esi+3C4h] eax +
mov eax [edi+14h] +
mov [esi+3B0h] eax +
mov eax [edi+18h] +
mov [esi+3B4h] eax +
jnz loc_1012263  +
cmp [ebp+var_C] 3 +
jz loc_1012240  +
push 3  +
mov ecx edi +
call sub_1011830  +
cmp dword_1027124 0 +
mov eax [eax] +
jz loc_10120BD  +
lea ecx [esi+394h] +
cmp ebx [ecx] +
jnz loc_1008171  +
test al 2 +
jnz loc_1012240  +
mov edx [ebp+var_4] +
mov ebx [edx+1Ch] +
mov eax [ebp+var_20] +
mov ecx [ebp+var_1C] +
sub eax [esi+3C8h] +
sub ecx [esi+3CCh] +
mov edi ebx +
sub edi [esi+3D0h] +
mov [ebp+var_14] eax +
cmp edi 7 +
mov [ebp+var_10] ecx +
jl loc_1010E68  +
mov edx ecx +
imul edx ecx +
mov ecx eax +
imul ecx eax +
add edx ecx +
mov [ebp+arg_0] edx +
fild  [ebp+arg_0] +
fsqrt   +
call _ftol  +
cmp dword_102712C 0 +
mov [ebp+arg_0] eax +
jz loc_100249A  +
cmp byte ptr [esi+448h] 0 +
jz loc_100249A  +
imul eax eax +
xor edx edx +
div  edi +
cmp eax [esi+41Ch] +
jnb loc_100249A  +
mov ecx [esi+428h] +
test ecx ecx +
jnz loc_100247B  +
lea eax [esi+42Ch] +
cmp dword ptr [eax] 0 +
jnz loc_1011C0A  +
lea eax [esi+42Ch] +
mov ecx [eax] +
cmp ecx dword_1027158 +
jz loc_1011C24  +
mov eax [ebp+var_20] +
mov ebx [esi+414h] +
test ebx ebx +
mov [esi+3C8h] eax +
mov eax [ebp+var_1C] +
mov [esi+3CCh] eax +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
mov [esi+3D0h] eax +
jz loc_10121E3  +
mov ecx [esi+40Ch] +
xor edx edx +
mov eax ecx +
div  ebx +
mov edi [esi+410h] +
xor edx edx +
mov [ebp+var_18] eax +
mov eax edi +
div  ebx +
mov edx [ebp+arg_0] +
cmp edx [esi+418h] +
ja loc_1014793  +
cmp ebx dword_1027150 +
jnz loc_10121E3  +
sub ecx [ebp+var_18] +
sub edi eax +
dec ebx  +
mov [esi+40Ch] ecx +
mov [esi+410h] edi +
mov [esi+414h] ebx +
mov eax [ebp+var_20] +
add [esi+40Ch] eax +
mov eax [ebp+var_1C] +
add [esi+410h] eax +
inc dword ptr [esi+414h]  +
cmp dword ptr [esi+414h] 2 +
jz loc_1014770  +
mov ecx [ebp+var_4] +
push 0  +
call sub_1011830  +
mov ecx eax +
mov eax [esi+40Ch] +
xor edx edx +
div  dword ptr [esi+414h] +
push 1  +
mov [ecx] eax +
mov ecx [ebp+var_4] +
call sub_1011830  +
mov ecx eax +
mov eax [esi+410h] +
xor edx edx +
div  dword ptr [esi+414h] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
cmp eax 7 +
jz loc_1012037  +
cmp [esi+390h] ebx +
jnz loc_1011B73  +
jmp loc_1012037  +
cmp ecx 2 +
jz loc_1014B82  +
cmp ecx 3 +
jz loc_1014B82  +
mov ebx ds:PtInRect +
mov eax [esi+3A8h] +
cmp eax 8 +
ja loc_101227B  +
jmp ds:off_1011F95[eax*4]  +
***
cmp [ebp+var_8] edi +
jz loc_101289C  +
mov ecx [ebp+var_4] +
push 17h  +
call sub_1011830  +
mov ecx [ebx+390h] +
mov [eax] ecx +
jmp loc_10119BA  +
***
mov eax [ebp+arg_0] +
jmp loc_1012242  +
***
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebx+32Ch] +
call sub_1011871  +
mov ecx [ebx+330h] +
mov eax [ebp-2Ch] +
cmp ecx eax +
jz loc_10114DA  +
add eax 10h +
mov ecx [eax] +
cmp ecx 0FFFFFFFFh +
jz loc_10114DA  +
cmp ecx esi +
jz loc_1012301  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
call sub_100174E  +
cmp dword ptr [ebp-14h] 0 +
jz loc_10114DA  +
jmp loc_101157B  +
mov eax [ebp-10h] +
inc eax  +
mov [ebp-10h] eax +
lea eax [eax+eax*2] +
shl eax 4 +
lea esi [eax+ebx+244h] +
lea edi [ebp-44h] +
movs   +
movs   +
movs   +
movs   +
cmp dword ptr [ebp-10h] 3 +
jge loc_101157B  +
jmp loc_10114CE  +
***
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
lea ecx [edi+2E8h] +
mov [ebp+var_4] esi +
call sub_1011631  +
test eax eax +
jl loc_1011300  +
mov ecx [ebp+var_4] +
push esi  +
call sub_1011830  +
mov eax [eax] +
mov ecx [ebp+var_4] +
push 1  +
mov [ebp+pt.x] eax +
call sub_1011830  +
mov eax [eax] +
push eax  +
push [ebp+pt.x]  +
mov [ebp+pt.y] eax +
lea eax [ebx+48h] +
push eax  +
call ds:PtInRect  +
cmp eax esi +
mov [ebp+arg_4] eax +
jz loc_10123F1  +
mov ecx ebx +
call sub_10123FE  +
test eax eax +
jz loc_10123F1  +
cmp [ebx+30h] esi +
jz loc_10123F1  +
mov eax [ebx+2Ch] +
sub esp 10h +
mov edi esp +
lea esi [eax+130h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
lea esi [eax+140h] +
mov edi esp +
mov ecx eax +
mov eax [ecx+0B4h] +
movs   +
and eax 1 +
push eax  +
movs   +
lea eax [ebp+Point] +
push eax  +
movs   +
lea eax [ebp+pt] +
push eax  +
add ecx 0A4h +
push ecx  +
movs   +
call sub_10119D2  +
push [ebp+Point.y]  +
push [ebp+Point.x]  +
call ds:WindowFromPoint  +
mov esi eax +
push 0FFFFFFECh  +
push esi  +
call ds:GetWindowLongW  +
test al 20h +
jnz loc_10123F1  +
xor eax eax +
cmp esi [ebx+30h] +
setz al  +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_4] +
jmp loc_1011302  +
***
mov eax [ecx+34h] +
shr eax 4 +
not eax  +
and eax 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
push 3  +
mov ecx edi +
call sub_1011830  +
movzx esi [ebp+arg_4] +
mov eax [eax] +
shl esi 10h +
and eax 0FFh +
or esi eax +
push 3  +
mov ecx edi +
or esi 100h +
call sub_1011830  +
mov [eax] esi +
mov eax [ebx+408h] +
mov [edi+10h] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
dec eax  +
jz loc_1013CA0  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10124AA  +
mov ecx [ebp+8] +
push 1  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
call sub_101168B  +
push dword ptr [ebp+10h]  +
mov ecx [ebp+18h] +
call sub_10115D9  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push 3  +
call sub_1011830  +
mov ecx [ebp+arg_0] +
xor ebx ebx +
mov bl [eax] +
push 17h  +
and ebx 1 +
call sub_1011830  +
mov edi [eax] +
xor eax eax +
mov ax [esi+156h] +
mov ecx eax +
xor ecx ebx +
test cx cx +
jnz loc_10124FF  +
mov [esi+184h] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
test [ebp+var_4] 1 +
jz loc_10152B1  +
jmp loc_1011785  +
test al 1 +
jnz loc_101251C  +
test bl 1 +
jz loc_1012513  +
push dword ptr [esi+4]  +
mov ecx [ebp+arg_4] +
call sub_1012A7F  +
mov [esi+156h] bx +
jmp loc_10124E3  +
test bl 1 +
jnz loc_1012513  +
push dword ptr [esi+4]  +
mov ecx [ebp+arg_4] +
call sub_10127F8  +
jmp loc_1012513  +
***
mov eax [edi+1Ch] +
sub eax [esi+3ACh] +
cmp eax dword_1027160 +
jb loc_10122AD  +
and dword ptr [esi+3A8h] 0 +
jmp loc_10122AD  +
***
push 10h  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
mov eax [ebp+var_4] +
mov dword ptr [esi+3A8h] 7 +
mov eax [eax+1Ch] +
mov [esi+3ACh] eax +
jmp loc_1012983  +
cmp dword ptr [esi+3A4h] 1 +
jnz loc_10174C0  +
jmp loc_101254F  +
***
mov edi [ebp+arg_14] +
mov ebx [ebp+arg_10] +
xor eax eax +
cmp dword_1027128 eax +
jz loc_101259E  +
cmp [ebp+arg_20] eax +
jz loc_1014C6E  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push dword ptr [edi]  +
push dword ptr [ebx]  +
push [ebp+arg_0]  +
push 4  +
call sub_1014518  +
jmp loc_1014766  +
***
cmp eax 8 +
jnz loc_1012983  +
jmp loc_101254F  +
***
mov edi [ebp+arg_14] +
mov ecx [edi] +
mov ebx [ebp+arg_10] +
mov [ebp+arg_14] edx +
mov edx [ebp+arg_0] +
xor eax eax +
cmp [edx+23Ch] eax +
jnz loc_10151E9  +
mov [ebp+pInputs.type] eax +
xor edx edx +
cmp [ebp+arg_1C] eax +
mov dword ptr [ebp+pInputs.anonymous_0+8] eax +
mov dword ptr [ebp+pInputs.anonymous_0+10h] eax +
mov eax [ebx] +
setnz dl  +
mov dword ptr [ebp+pInputs.anonymous_0] eax +
mov eax [ebp+arg_18] +
and eax 0FFh +
or eax 0FF515700h +
mov dword ptr [ebp+pInputs.anonymous_0+14h] eax +
push 1Ch  +
or edx [ebp+arg_14] +
lea eax [ebp+pInputs] +
push eax  +
or edx 0C000h +
push 1  +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] edx +
mov dword ptr [ebp+pInputs.anonymous_0+4] ecx +
call ds:SendInput  +
mov eax [ebp+arg_8] +
mov [esi+16Ch] eax +
mov eax [ebx] +
mov [esi+170h] eax +
mov eax [edi] +
mov [esi+174h] eax +
jmp loc_1014766  +
***
push [ebp+arg_0]  +
mov ecx ebx +
call sub_101267E  +
jmp loc_10119C4  +
***
push dword ptr [esi]  +
mov ecx [ebp-14h] +
push dword ptr [ebp+8]  +
call sub_10112C8  +
test eax eax +
jnz loc_10126EA  +
mov eax [ebp+0Ch] +
add eax eax +
xor eax [edi+134h] +
and eax 2 +
xor [edi+134h] eax +
jmp loc_10126EA  +
***
mov eax offset byte_1023F91 +
call sub_10014DD  +
sub esp 40h +
push ebx  +
push esi  +
push edi  +
mov [ebp-14h] ecx +
lea ebx [ecx+254h] +
mov dword ptr [ebp-18h] 2 +
push dword ptr [ebp-14h]  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-1Ch] +
call sub_10016B1  +
and dword ptr [ebp-4] 0 +
lea esi [ebx-10h] +
lea edi [ebp-2Ch] +
movs   +
movs   +
movs   +
movs   +
mov esi ebx +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp-24h] +
cmp [ebp-34h] esi +
jz loc_10126FA  +
lea eax [ebp-10h] +
push eax  +
push esi  +
call sub_100174E  +
mov edi [ebp-10h] +
test edi edi +
jz loc_10126EA  +
test byte ptr [edi+134h] 1 +
jz loc_101264E  +
push 0  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1010D89  +
jmp loc_10126BB  +
mov eax [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add eax 2D0h +
push eax  +
call ds:LeaveCriticalSection  +
add ebx 60h +
dec dword ptr [ebp-18h]  +
jnz loc_101269E  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov eax [eax] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_101275A  +
mov eax [eax] +
add eax 10h +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_1012784  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_1027050 +
cmp esi eax +
mov dl 1 +
jz loc_10127BE  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jnz loc_1014817  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_10127A7  +
cmp byte ptr [edi+8] 0 +
jnz loc_1008011  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jnz loc_10147BF  +
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jb loc_100816B  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov eax offset byte_1023F4D +
call sub_10014DD  +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea eax [ebp-18h] +
push eax  +
xor esi esi +
lea ebx [edi+10h] +
push ebx  +
mov [ebp-18h] esi +
mov [ebp-10h] esi +
call sub_101108D  +
cmp [ebp-18h] esi +
mov [ebp-14h] esi +
jle loc_1012889  +
mov [ebp-1Ch] esi +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-14h]  +
mov [ebp-4] esi +
push ebx  +
call sub_1010FAE  +
mov esi [ebp-1Ch] +
test esi esi +
jz loc_101286C  +
mov eax [esi] +
lea ecx [ebp-10h] +
push ecx  +
push esi  +
call dword ptr [eax+14h]  +
cmp dword ptr [ebp-10h] 0 +
jbe loc_101286C  +
cmp dword ptr [ebp-10h] 80h +
jnb loc_101286C  +
lea eax [ebp-10h] +
push eax  +
lea ecx [edi+32Ch] +
call sub_101272B  +
or dword ptr [eax] 0FFFFFFFFh +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_101287A  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [ebp-18h] +
jl loc_101481E  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
mov ecx [ebp+var_4] +
push 17h  +
mov [ebx+238h] edi +
call sub_1011830  +
mov ecx [ebx+390h] +
push [ebp+arg_0]  +
mov [eax] ecx +
mov ecx ebx +
call sub_10128C9  +
push edi  +
jmp loc_101263F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
xor ebx ebx +
lea ecx [esi+2E8h] +
mov [ebp+var_4] ebx +
call sub_1011631  +
cmp eax ebx +
jl loc_1012985  +
mov ecx [ebp+var_4] +
push edi  +
push 17h  +
call sub_1011830  +
mov edi [eax] +
mov eax [esi] +
lea ecx [ebp+arg_0] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
cmp [ebp+arg_0] 3 +
jz loc_101292A  +
cmp dword_1027370 2 +
jz loc_101749A  +
cmp dword_1027374 2 +
jz loc_10174AD  +
cmp [esi+390h] edi +
pop edi  +
jnz loc_1012983  +
push dword ptr [esi+438h]  +
mov ecx esi +
push dword ptr [esi+434h]  +
mov [esi+414h] ebx +
mov [esi+40Ch] ebx +
mov [esi+410h] ebx +
call sub_1012990  +
mov eax [esi+3A8h] +
cmp eax ebx +
jle loc_1012983  +
cmp eax 3 +
jle loc_1012576  +
cmp eax 5 +
jle loc_10174C0  +
cmp eax 6 +
jnz loc_10125B7  +
mov [esi+3A8h] ebx +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_102704C +
push [ebp+arg_4]  +
lea eax [ecx-20h] +
push [ebp+arg_0]  +
neg ecx  +
sbb ecx ecx +
and ecx eax +
call sub_10129B8  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
cmp [edi+4] esi +
jz loc_1012A5D  +
push ebx  +
call sub_1012A68  +
push esi  +
mov ebx eax +
call ds:GetDC  +
sub [ebp+arg_0] 40h +
sub [ebp+arg_4] 40h +
cmp ebx esi +
mov [ebp+hDC] eax +
mov eax 80h +
mov [ebp+rc.left] esi +
mov [ebp+rc.top] esi +
mov [ebp+rc.right] eax +
mov [ebp+rc.bottom] eax +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
jz loc_1012A48  +
cmp [ebp+hDC] esi +
jz loc_1012A48  +
push 1  +
call ds:GetSysColorBrush  +
push eax  +
lea eax [ebp+rc] +
push eax  +
push ebx  +
call ds:FillRect  +
push 1  +
push esi  +
push 1  +
call ds:GetSysColor  +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push ebx  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+hDC]  +
push dword ptr [edi+4]  +
call ds:UpdateLayeredWindow  +
push [ebp+hDC]  +
push esi  +
call ds:ReleaseDC  +
push esi  +
push dword ptr [edi+4]  +
call ds:ShowWindow  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+78h] +
test eax eax +
jz sub_10082C3  +
pop esi  +
retn   +
***
mov eax offset byte_1023F4D +
call sub_10014DD  +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea eax [ebp-18h] +
push eax  +
xor esi esi +
lea ebx [edi+10h] +
push ebx  +
mov [ebp-18h] esi +
mov [ebp-10h] esi +
call sub_101108D  +
cmp [ebp-18h] esi +
mov [ebp-14h] esi +
jle loc_1012B12  +
mov [ebp-1Ch] esi +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-14h]  +
mov [ebp-4] esi +
push ebx  +
call sub_1010FAE  +
mov esi [ebp-1Ch] +
test esi esi +
jz loc_1012AF5  +
mov eax [esi] +
lea ecx [ebp-10h] +
push ecx  +
push esi  +
call dword ptr [eax+14h]  +
cmp dword ptr [ebp-10h] 0 +
jbe loc_1012AF5  +
cmp dword ptr [ebp-10h] 80h +
jnb loc_1012AF5  +
lea eax [ebp-10h] +
push eax  +
lea ecx [edi+32Ch] +
call sub_101272B  +
mov ecx [ebp+8] +
mov [eax] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1012B03  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [ebp-18h] +
jl loc_10148AC  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
mov ecx [ebp+var_4] +
push 17h  +
mov [ebx+238h] esi +
call sub_1011830  +
mov eax [eax] +
push [ebp+arg_0]  +
mov ecx ebx +
mov [ebx+390h] eax +
call sub_1012B52  +
push esi  +
jmp loc_101263F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
xor edi edi +
lea ecx [esi+2E8h] +
mov [ebp+var_4] edi +
call sub_1011631  +
cmp eax edi +
jl loc_1012CA5  +
mov eax [esi] +
push ebx  +
lea ecx [ebp+arg_0] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
cmp [ebp+arg_0] 3 +
push 2  +
mov [ebp+var_8] edi +
pop ebx  +
jz loc_1012BAC  +
cmp dword_1027370 ebx +
jz loc_10173F0  +
cmp dword_1027374 ebx +
jz loc_1017407  +
mov eax [esi+3A8h] +
cmp eax edi +
jnz loc_1010A4A  +
mov ecx [ebp+var_4] +
push 2Eh  +
call sub_1011830  +
cmp [ebp+arg_0] 3 +
mov eax [eax] +
lea ecx [esi+3A0h] +
mov [ecx] eax +
jz loc_1012BDC  +
and eax dword_1027130 +
mov [ecx] eax +
cmp [ecx] edi +
mov [esi+408h] edi +
jnz loc_101741A  +
cmp dword ptr [esi+3A8h] 7 +
mov ecx [ebp+var_4] +
jz loc_1010A60  +
cmp [ebp+arg_0] 3 +
jz loc_1012C15  +
cmp dword_1027128 edi +
jz loc_1012C15  +
push 0Fh  +
push ecx  +
mov ecx esi +
call sub_101240F  +
mov ecx [ebp+var_4] +
cmp [ebp+arg_0] 3 +
mov eax [ecx+14h] +
mov [esi+3B8h] eax +
mov eax [ecx+18h] +
mov [esi+3BCh] eax +
mov eax [ecx+14h] +
lea edi [esi+3D4h] +
mov [edi] eax +
mov eax [ecx+18h] +
mov [esi+3D8h] eax +
mov eax [ecx+14h] +
mov [esi+3DCh] eax +
mov eax [ecx+18h] +
mov [esi+3E0h] eax +
mov eax [ecx+14h] +
mov [esi+434h] eax +
mov eax [ecx+18h] +
mov [esi+438h] eax +
jz loc_1012C83  +
push ecx  +
mov ecx esi +
call sub_10148D8  +
push dword ptr [esi+3ECh]  +
push dword ptr [esi+3E8h]  +
push edi  +
call ds:InflateRect  +
mov ecx [ebp+var_4] +
and dword ptr [esi+3E4h] 0 +
mov eax [ecx+1Ch] +
mov [esi+3ACh] eax +
xor eax eax +
inc eax  +
mov [esi+3A8h] eax +
mov [esi+3A4h] eax +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
push dword ptr [esi+3B4h]  +
lea edi [esi+3D4h] +
push dword ptr [esi+3B0h]  +
push edi  +
call ebx  +
test eax eax +
jz loc_1013F99  +
cmp [ebp+var_8] 0 +
jz loc_1013F99  +
cmp [ebp+var_C] 3 +
jz loc_1012240  +
cmp dword ptr [esi+3A4h] 2 +
jz loc_1012240  +
cmp dword_1027128 0 +
jz loc_1012240  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
sub eax [esi+3ACh] +
cmp eax dword_1027164 +
jb loc_1012240  +
push dword ptr [esi+3F4h]  +
mov eax [esi+3B0h] +
mov ecx [esi+3B4h] +
push dword ptr [esi+3F0h]  +
mov [edi] eax +
mov [esi+3DCh] eax +
mov eax ecx +
push edi  +
mov [esi+3D8h] ecx +
mov [esi+3E0h] eax +
call ds:InflateRect  +
push dword ptr [esi+3BCh]  +
push dword ptr [esi+3B8h]  +
call ds:WindowFromPoint  +
test eax eax +
jz loc_1014BB8  +
movzx ecx word ptr [esi+404h] +
push ecx  +
push eax  +
call ds:GetPropW  +
xor edi edi +
inc edi  +
cmp eax edi +
jnz loc_1014BB8  +
push 1Eh  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
mov [esi+408h] edi +
mov dword ptr [esi+3A8h] 8 +
mov [esi+3A4h] edi +
jmp loc_1012240  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax] +
push dword ptr [eax]  +
mov edi ecx +
mov ecx [edi+2Ch] +
add ecx 2E8h +
call sub_1011631  +
test eax eax +
jl loc_1012DF8  +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_1012DF8  +
lea eax [ebp+var_4] +
push eax  +
push 3  +
call sub_1013524  +
mov eax [ebp+var_4] +
sar eax 10h +
test byte ptr [ebp+var_4+1] 1 +
mov [ebp+var_C] eax +
jnz loc_101392C  +
xor eax eax +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
shl eax 5 +
add eax [ecx+20h] +
pop ebp  +
retn 4  +
***
sub eax 0BFh +
jz loc_1012E7B  +
sub eax 42h +
jnz loc_1012E7B  +
jmp loc_1012E74  +
xor edi edi +
jmp loc_1012E7B  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
push 2  +
call ds:GetCurrentThread  +
push eax  +
call ds:SetThreadPriority  +
mov esi [ebp+8] +
mov eax [esi+78h] +
mov [ebp-8] eax +
mov eax [esi+80h] +
xor edi edi +
mov [ebp-4] eax +
inc edi  +
push 1  +
push 0FFFFFFFFh  +
push 0  +
lea eax [ebp-8] +
push eax  +
push 2  +
call ds:WaitForMultipleObjectsEx  +
sub eax 0 +
jz loc_1012E24  +
dec eax  +
jnz loc_1012E16  +
mov ecx esi +
call sub_1012E8A  +
test edi edi +
jz loc_1017A2F  +
jmp loc_1012E5A  +
***
mov eax offset byte_1023F91 +
call sub_10014DD  +
sub esp 40h +
lea eax [ecx+84h] +
cmp dword ptr [eax] 0 +
mov [ebp-18h] ecx +
jnz loc_1013866  +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+14h] 0 +
jz loc_1012EE7  +
movsx eax word ptr [ecx+1Ah] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi] eax +
mov edx [ecx+20h] +
shl eax 5 +
test byte ptr [eax+edx+1Ch] 1 +
jnz loc_10156B4  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax 80004005h +
jmp loc_1012EE3  +
***
mov eax [eax] +
mov eax [eax+4] +
mov [edi] eax +
jmp loc_1013077  +
or byte ptr [eax+1Ch] 1 +
jmp loc_10130D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
push edi  +
push dword ptr [esi+114h]  +
call ds:WaitForSingleObject  +
cmp eax edi +
jnz loc_1014AA7  +
push ebx  +
mov ebx [esi+120h] +
mov dword ptr [esi+12Ch] 1 +
cmp dword ptr [ebx+0Ch] 0FFFFFFFFh +
jnz loc_1013C7C  +
mov eax [esi+124h] +
mov [ebp+var_14] eax +
mov eax [esi+128h] +
mov [ebp+var_1C] eax +
lea eax [esi+0F0h] +
mov [ebp+lpCriticalSection] eax +
mov eax [esi+34h] +
and [ebp+var_4] 0 +
push [ebp+lpCriticalSection]  +
and al 22h +
neg al  +
mov [ebp+var_10] 1 +
sbb eax eax +
inc eax  +
mov [ebp+var_C] eax +
call ds:EnterCriticalSection  +
lea eax [ebp+var_18] +
lea edi [esi+0CCh] +
push eax  +
mov ecx edi +
call sub_1012EBA  +
test eax eax +
jl loc_1013C92  +
push [ebp+var_18]  +
mov ecx edi +
call sub_1012E04  +
mov [ebp+var_4] eax +
lea edx [ebx+8] +
push 0Dh  +
xor eax eax +
pop ecx  +
mov edi edx +
stos   +
mov eax [esi+10Ch] +
mov ecx [ebp+var_4] +
mov [edx] eax +
mov eax [ecx+8] +
mov [ebx+0Ch] eax +
call sub_1013115  +
mov [ebx+14h] eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
mov ecx [ecx+4] +
lea edi [ebx+10h] +
mov [edi] ecx +
test byte ptr [eax+1Ch] 2 +
jnz loc_101301C  +
lea ecx [ebx+1Ch] +
push ecx  +
lea ecx [ebx+18h] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1012DA3  +
test eax eax +
mov eax [ebp+var_4] +
jnz loc_10139DA  +
mov ecx [ebx+0Ch] +
add ecx 0FFFFFD40h +
cmp ecx 7 +
ja loc_1013C89  +
jmp ds:off_1012F03[ecx*4]  +
mov eax [esi+34h] +
and eax 22h +
mov [ebx+38h] eax +
lea ecx [ebx+30h] +
push ecx  +
neg eax  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
sbb eax eax +
and eax [ebp+var_1C] +
lea ecx [esi+0CCh] +
push eax  +
push [ebp+var_14]  +
push 40h  +
push [ebp+var_18]  +
call sub_10136E3  +
test eax eax +
jl loc_1013C89  +
mov eax [esi+0A0h] +
imul eax [ebx+30h] +
mov [ebx+34h] eax +
push [ebp+lpCriticalSection]  +
mov edi ds:LeaveCriticalSection +
call edi  +
cmp [ebp+var_C] 0 +
jz loc_10139F7  +
push [ebp+lpCriticalSection]  +
call ds:EnterCriticalSection  +
mov ecx [ebp+var_4] +
call sub_1013115  +
push eax  +
lea ecx [esi+0CCh] +
call sub_101311E  +
lea eax [ebp+var_20] +
push eax  +
lea ecx [esi+0CCh] +
call sub_1012EBA  +
push [ebp+lpCriticalSection]  +
mov [ebp+var_C] eax +
call edi  +
cmp [ebp+var_C] 0 +
jge loc_1013C4C  +
mov eax [ebp+var_4] +
mov eax [eax] +
push dword ptr [eax]  +
mov ecx [esi+2Ch] +
call sub_10115D9  +
cmp [ebp+var_10] 0 +
jz loc_1012F82  +
push dword ptr [esi+110h]  +
inc dword ptr [esi+10Ch]  +
call ds:SetEvent  +
push 2  +
call ds:SetThreadExecutionState  +
push dword ptr [esi+114h]  +
call ds:ReleaseMutex  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+24h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1013198  +
test eax eax +
mov [ebp+var_4] eax +
jl loc_1013183  +
mov eax [ebp+arg_0] +
mov cx [eax+14h] +
cmp cx 0FFFFh +
push ebx  +
jnz loc_1010A33  +
mov cx [eax+16h] +
mov [esi+1Ah] cx +
mov cx [eax+16h] +
cmp cx 0FFFFh +
jnz loc_1013C35  +
mov cx [eax+14h] +
mov [esi+1Ch] cx +
and dword ptr [eax+10h] 0 +
and byte ptr [eax+1Ch] 0FCh +
dec dword ptr [esi+14h]  +
pop ebx  +
push edi  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+24h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [ebp+arg_0] +
mov ecx [esi+20h] +
shr eax 16h +
shl eax 5 +
add eax ecx +
xor ebx ebx +
cmp dword ptr [eax+10h] 1 +
jnz loc_10131D7  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
mov ebx 80004005h +
jmp loc_10131C7  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+2Ch] +
call sub_101321A  +
test eax eax +
jz loc_1014F7D  +
push esi  +
push eax  +
push offset pfnAPC  +
call ds:QueueUserAPC  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+74h] edi +
jz loc_1007FC4  +
mov eax [esi+74h] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov dword ptr [ebp+14h] 1 +
mov ecx [ebp+0Ch] +
push edi  +
call sub_1011830  +
mov eax [eax] +
mov ecx [ebp+0Ch] +
push 1  +
mov [ebp-30h] eax +
call sub_1011830  +
mov eax [eax] +
mov ecx [ebp-30h] +
mov [ebp-2Ch] eax +
sub esp 10h +
mov edi esp +
mov [ebp-24h] eax +
mov eax [ebx+2Ch] +
lea esi [eax+130h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [eax+140h] +
mov [ebp-28h] ecx +
mov ecx [eax+0B4h] +
movs   +
and ecx 1 +
push ecx  +
movs   +
lea ecx [ebp-38h] +
push ecx  +
movs   +
lea ecx [ebp-30h] +
push ecx  +
add eax 0A4h +
push eax  +
movs   +
call sub_10119D2  +
cmp dword ptr [ebp-20h] 3 +
jz loc_101339E  +
push dword ptr [ebp-34h]  +
mov ecx ebx +
push dword ptr [ebp-38h]  +
call sub_1014641  +
xor esi esi +
test byte ptr [ebx+34h] 22h +
jnz loc_10133B4  +
push esi  +
push dword ptr [ebx+2Ch]  +
mov ecx ebx +
push dword ptr [ebp+0Ch]  +
call sub_101168B  +
cmp [ebp+14h] esi +
jz loc_10109FE  +
lea eax [ebx+0F0h] +
push eax  +
call ds:LeaveCriticalSection  +
mov eax [ebx+134h] +
mov ecx eax +
shl ecx 1Eh +
sar ecx 1Fh +
jz loc_10137FA  +
cmp ecx esi +
jz loc_10133EB  +
cmp [ebp-18h] esi +
jz loc_1013A9D  +
mov eax [ebp-14h] +
mov dword ptr [eax+8] 2C7h +
push dword ptr [ebp-14h]  +
mov ecx ebx +
call sub_10136C1  +
mov [ebp+8] eax +
mov eax [ebp+8] +
***
mov ecx [ebp+mi.rcWork.right] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [eax] edi +
lea eax [esi+24h] +
push eax  +
mov [ebp+var_C] edi +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
mov cx [esi+10h] +
xor edx edx +
mov dx [esi+18h] +
xor ebx ebx +
inc ebx  +
cmp cx di +
mov [ebp+var_4] edi +
mov [ebp+var_8] edx +
jle loc_101346A  +
mov edi [esi+20h] +
movsx eax dx +
shl eax 5 +
cmp [eax+edi+10h] ebx +
jz loc_1013BE1  +
cmp word ptr [ebp+var_4] cx +
jge loc_1013C29  +
mov ecx esi +
movsx edi dx +
call sub_101350A  +
mov ecx edi +
shl ecx 16h +
or eax ecx +
mov ecx [esi+20h] +
shl edi 5 +
mov edx edi +
mov [ecx+edx+0Ch] eax +
mov eax [esi+20h] +
mov [eax+edx+10h] ebx +
mov eax [esi+20h] +
or word ptr [eax+edx+16h] 0FFFFh +
mov eax [esi+20h] +
lea edi [eax+edx] +
mov ecx [edi+4] +
mov edi [edi] +
shl ecx 2 +
mov ebx ecx +
shr ecx 2 +
xor eax eax +
stos   +
mov ecx ebx +
and ecx 3 +
stos   +
mov ax [esi+1Ch] +
cmp ax 0FFFFh +
jnz loc_1013C03  +
mov eax [ebp+var_8] +
mov ecx [esi+20h] +
mov [esi+1Ch] ax +
mov [esi+1Ah] ax +
or word ptr [ecx+edx+14h] 0FFFFh +
inc dword ptr [esi+14h]  +
mov ecx [ebp+arg_0] +
mov [esi+18h] ax +
mov eax [esi+20h] +
add eax edx +
mov [ecx] eax +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax [ecx+0Ch] +
cmp eax 400000h +
jnb loc_10156AA  +
lea edx [eax+1] +
mov [ecx+0Ch] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
xor esi esi +
test eax eax +
jbe loc_1013546  +
mov edx [ecx] +
push edi  +
mov edi [edx] +
cmp edi [ebp+arg_0] +
jz loc_1013545  +
inc esi  +
add edx 8 +
cmp esi eax +
jb loc_1013536  +
pop edi  +
cmp esi eax +
jz loc_1017B46  +
mov eax [ecx] +
mov eax [eax+esi*8+4] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
cmp dword ptr [edi+0C4h] 0FFFFFFFFh +
jnz loc_1014EFA  +
add dword ptr [ebp+0Ch] 2 +
mov esi [ebp+0Ch] +
xor eax eax +
cmp eax [edi+0ACh] +
jb loc_10140C0  +
add edi 0ACh +
cmp dword ptr [edi] 0 +
ja loc_10140EF  +
and dword ptr [ebp+10h] 0 +
mov ecx [ebp-0Ch] +
mov eax [ebp+10h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test byte ptr [ecx+108h] 1 +
jz loc_10153F9  +
call sub_10131E3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov eax [eax] +
push edi  +
mov [ebp+var_10] eax +
lea eax [esi+24h] +
xor edi edi +
push eax  +
mov [ebp+var_14] esi +
mov [ebp+var_8] edi +
mov [ebp+var_C] edi +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
mov ebx [ebp+arg_0] +
shl ebx 5 +
add ebx [esi+20h] +
cmp dword ptr [ebx+10h] 1 +
jnz loc_10137C2  +
cmp dword ptr [ebx+8] 2C7h +
jnz loc_10137C2  +
test byte ptr [ebx+1Ch] 2 +
jnz loc_101374A  +
mov ecx [esi] +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
call sub_1012DA3  +
test eax eax +
jnz loc_10137C2  +
cmp [ebp+arg_4] edi +
jbe loc_10137C2  +
test byte ptr [ebx+1Ch] 1 +
mov ax [ebx+16h] +
mov word ptr [ebp+arg_0] ax +
jnz loc_10137B7  +
test edi edi +
jnz loc_101376B  +
mov eax [ebx] +
mov eax [eax+4] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
mov eax [ebx] +
mov ecx [eax+4] +
mov edx [ebp+arg_10] +
cmp ecx [edx] +
jnz loc_10137B7  +
mov ecx [ebp+var_10] +
or byte ptr [ebx+1Ch] 1 +
imul edi ecx +
add edi [ebp+arg_8] +
lea esi [eax+8] +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
mov eax [ebp+arg_C] +
and ecx 3 +
test eax eax +
movs   +
jnz loc_1015748  +
mov esi [ebp+var_C] +
test esi esi +
jnz loc_1014AF8  +
inc [ebp+var_8]  +
mov esi [ebp+var_14] +
mov edi [ebp+var_8] +
mov [ebp+var_C] ebx +
cmp word ptr [ebp+arg_0] 0FFFFh +
jnz loc_1014AEF  +
mov eax [ebp+arg_14] +
mov ecx [ebp+var_C] +
push [ebp+lpCriticalSection]  +
mov [eax] ecx +
mov eax [ebp+arg_18] +
mov [eax] edi +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 1Ch  +
***
cmp [ebp-18h] esi +
jz loc_10133DE  +
or eax 2 +
mov [ebx+134h] eax +
call ds:GetTickCount  +
push 2C5h  +
push dword ptr [ebp-14h]  +
mov ecx ebx +
mov [ebx+14Ch] eax +
call sub_1013A48  +
mov eax [ebx+34h] +
mov ecx [ebp-24h] +
shr eax 4 +
not eax  +
test al 1 +
mov eax [ebp-28h] +
jz loc_101383F  +
sub eax [ebx+38h] +
sub ecx [ebx+3Ch] +
mov [ebx+178h] eax +
mov [ebx+17Ch] ecx +
jmp loc_10133F5  +
***
mov eax [ecx+12Ch] +
retn   +
***
push dword ptr [ebp-10h]  +
call pfnAPC  +
jmp loc_10138C1  +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
lea ebx [ecx+254h] +
mov dword ptr [ebp-14h] 3 +
push ecx  +
lea ecx [ebp-1Ch] +
call sub_10016B1  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
lea esi [ebx-10h] +
lea edi [ebp-2Ch] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp-24h] +
mov esi ebx +
lea edi [ebp-3Ch] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp-34h] eax +
jz loc_10138D1  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
call sub_100174E  +
cmp dword ptr [ebp-10h] 0 +
jz loc_10138C1  +
mov ecx [ebp-10h] +
call sub_1013855  +
test eax eax +
jz loc_101385C  +
push 0  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1010D89  +
jmp loc_1013894  +
mov eax [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add eax 2D0h +
push eax  +
call ds:LeaveCriticalSection  +
add ebx 30h +
dec dword ptr [ebp-14h]  +
jz loc_10138F1  +
mov ecx [ebp-18h] +
jmp loc_1013879  +
pop edi  +
pop esi  +
pop ebx  +
jmp loc_1012EA9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
mov [ecx+12Ch] eax +
jnz loc_1013918  +
mov ecx [ecx+2Ch] +
call sub_1013921  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx+84h] 1 +
retn   +
***
cmp ax 0Fh +
jz loc_1012DF8  +
cmp ax 1Eh +
jz loc_1012DF8  +
mov ecx [ebp+var_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
lea ebx [esi+4] +
push ebx  +
push 0  +
call sub_1013524  +
mov ecx [ebp+var_8] +
lea eax [esi+8] +
push eax  +
push 1  +
call sub_1013524  +
mov eax [edi+34h] +
shr eax 4 +
not eax  +
test al 1 +
jz loc_1013978  +
mov eax [edi+38h] +
sub [ebx] eax +
mov eax [edi+3Ch] +
sub [esi+8] eax +
mov eax [ebp+var_C] +
cmp ax 17h +
jz loc_101399E  +
cmp ax 18h +
jz loc_101399E  +
cmp ax 1Dh +
jz loc_101399E  +
mov ecx [edi+178h] +
mov [ebx] ecx +
mov ecx [edi+17Ch] +
mov [esi+8] ecx +
mov ecx [ebp+arg_0] +
mov ecx [ecx+18h] +
mov [esi+10h] ecx +
mov ecx [ebp+var_4] +
sar ecx 0Ah +
test byte ptr [ebp+var_4+1] 2 +
mov [esi] cl +
mov ecx [ebp+arg_4] +
jnz loc_1014F6F  +
mov [ecx] ax +
and word ptr [esi+2] 0 +
test byte ptr [ebp+var_4] 2 +
setnz al  +
inc al  +
mov [esi+0Ch] al +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
jmp loc_1012DFA  +
***
or byte ptr [eax+1Ch] 2 +
push 0  +
mov ecx esi +
mov dword ptr [ebx+0Ch] 2CAh +
call sub_10138FE  +
and [ebp+var_C] 0 +
jmp loc_1013077  +
cmp [ebp+var_10] 0 +
jz loc_1012F82  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 2 +
jz loc_1012EFA  +
jmp loc_10130D9  +
mov edi [ebp+var_14] +
mov dword ptr [ebx+30h] 1 +
mov esi [esi+0A0h] +
mov ecx esi +
mov [ebx+34h] esi +
mov esi [eax] +
mov eax ecx +
add esi 8 +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov esi [ebp+arg_0] +
jmp loc_1013077  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx 2C5h +
cmp [ebp+arg_4] edx +
jnz loc_1013ABA  +
mov [eax+8] edx +
mov eax [eax] +
mov eax [eax+4] +
push eax  +
mov [ecx+188h] eax +
call sub_1013A77  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+148h] 0 +
jz loc_1015574  +
push dword ptr [esi+4]  +
mov ecx [esi+2Ch] +
call sub_1012A7F  +
pop esi  +
leave   +
retn 4  +
***
push 2C6h  +
push dword ptr [ebp-14h]  +
and eax 0FFFFFFFDh +
mov ecx ebx +
mov [ebx+134h] eax +
call sub_1013A48  +
jmp loc_10133F5  +
***
mov edx 2C6h +
cmp [ebp+arg_4] edx +
jnz loc_1013AD3  +
mov [eax+8] edx +
mov eax [eax] +
push dword ptr [eax+4]  +
call sub_1013AE1  +
jmp loc_1013A6E  +
mov dword ptr [eax+8] 2C7h +
jmp loc_1013A6E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+148h] 0 +
jz loc_10155B3  +
push dword ptr [esi+4]  +
mov ecx [esi+2Ch] +
call sub_10127F8  +
pop esi  +
leave   +
retn 4  +
***
cmp eax 0FFFFFFFFh +
jz loc_1013B30  +
and dword ptr [ebp+8] 0 +
lea eax [ebp+8] +
push eax  +
push edi  +
call sub_100174E  +
mov eax [ebp+8] +
test eax eax +
jz loc_1013B30  +
mov ecx [eax] +
push ebx  +
push 1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-18h]  +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+4] +
xor ecx ecx +
mov [edi] eax +
jmp loc_10115AF  +
***
mov eax [eax] +
mov eax [eax+4] +
mov [edi] eax +
mov [ebp+var_C] 1 +
jmp loc_1013077  +
***
mov esi [ebp+Msg] +
cmp esi 2C0h +
jz loc_1002002  +
cmp esi 2C1h +
jbe loc_100200B  +
cmp esi 2C4h +
ja loc_10080AF  +
mov eax esi +
sub eax 2C3h +
jnz loc_101498F  +
lea ecx [ebx+134h] +
mov eax [ecx] +
test al 4 +
jnz loc_100200B  +
or eax 4 +
mov [ecx] eax +
lea eax [ebp+Msg] +
push eax  +
lea ecx [ebx+0CCh] +
mov [ebp+Msg] edx +
call sub_101341B  +
test eax eax +
jl loc_100200D  +
mov eax [ebp+Msg] +
test eax eax +
jz loc_1015096  +
mov ecx [ebp+wParam] +
mov [eax+8] esi +
mov eax [ebp+Msg] +
mov eax [eax] +
mov [eax+4] ecx +
mov ecx ebx +
call sub_10131E3  +
jmp loc_100200B  +
***
mov ebx 80004005h +
jmp loc_1011676  +
***
inc [ebp+var_4]  +
inc edx  +
movsx eax dx +
xor edx edx +
div  dword ptr [esi+10h] +
mov ax word ptr [ebp+var_4] +
cmp ax [esi+10h] +
mov [ebp+var_8] edx +
jge loc_101346A  +
jmp loc_101345A  +
mov edi [esi+20h] +
movsx ecx ax +
mov eax [ebp+var_8] +
shl ecx 5 +
mov [ecx+edi+16h] ax +
mov di [esi+1Ch] +
mov ecx [esi+20h] +
mov [ecx+edx+14h] di +
mov [esi+1Ch] ax +
jmp loc_10134E1  +
mov [ebp+var_C] 8007000Eh +
jmp loc_10134F2  +
***
mov edx [esi+20h] +
mov bx [eax+14h] +
movsx ecx cx +
shl ecx 5 +
mov [ecx+edx+14h] bx +
jmp loc_1013177  +
***
push 0  +
mov ecx esi +
call sub_10138FE  +
jmp loc_10130CA  +
***
push edi  +
mov ecx esi +
call sub_10138FE  +
jmp loc_10130FD  +
and [ebp+var_10] 0 +
jmp loc_1013077  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
jmp loc_10130FD  +
***
xor eax eax +
jmp loc_10124A1  +
***
mov ecx dword_1027060 +
test ecx ecx +
jz loc_1010DDA  +
mov edx [ebp+wParam] +
mov eax 200h +
sub edx eax +
jnz loc_1013F28  +
push esi  +
push eax  +
call sub_1013DE3  +
jmp loc_1010DDA  +
***
mov eax offset byte_1023A0D +
call sub_10014DD  +
sub esp 10h +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi ecx +
mov ecx [esi] +
cmp ecx [edi+130h] +
jl loc_1002517  +
mov eax [esi+4] +
cmp eax [edi+134h] +
jl loc_1002517  +
cmp ecx [edi+138h] +
jg loc_1002517  +
cmp eax [edi+13Ch] +
jg loc_1002517  +
lea eax [ebp-10h] +
push eax  +
lea ecx [edi+2E8h] +
call sub_1011A47  +
test eax eax +
jl loc_1002517  +
and dword ptr [ebp-14h] 0 +
cmp dword ptr [edi+0F0h] 0 +
jbe loc_1013D92  +
push ebx  +
xor ebx ebx +
inc ebx  +
mov eax [edi+0ECh] +
mov ecx [ebp-14h] +
mov eax [eax+ecx*8] +
cmp eax 17h +
jz loc_1013E18  +
test eax eax +
jz loc_1013F18  +
cmp eax ebx +
jz loc_1013E62  +
cmp eax 2Ch +
jz loc_1013E6B  +
cmp eax 2Eh +
jz loc_1013EA7  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [edi+0F0h] +
jnb loc_1013D91  +
mov esi [ebp+0Ch] +
jmp loc_1013D47  +
pop ebx  +
lea esi [edi+450h] +
push esi  +
call ds:EnterCriticalSection  +
mov ecx [ebp-10h] +
call sub_1011316  +
push eax  +
mov ecx edi +
call sub_10118E8  +
mov ecx [ebp-10h] +
push 0  +
call sub_1011316  +
push eax  +
push 0FFFFFFFFh  +
mov ecx edi +
call sub_1011458  +
push esi  +
mov edi eax +
call ds:LeaveCriticalSection  +
mov eax edi +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+468h] eax +
jz loc_1013DF3  +
inc eax  +
cmp dword ptr [ecx+46Ch] 0 +
jnz loc_1016B9A  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013CD6  +
pop ebp  +
retn 8  +
***
mov edi [ebp+var_10] +
jmp loc_1011778  +
***
xor esi esi +
mov [ebp-18h] esi +
lea eax [ebp-18h] +
push eax  +
push esi  +
lea eax [edi+10h] +
push eax  +
mov [ebp-4] esi +
call sub_1010FAE  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
push dword ptr [ebp-1Ch]  +
mov ecx [ebp-10h] +
push 17h  +
call sub_101131F  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax esi +
jz loc_1013D7E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1013D7E  +
push dword ptr [esi+4]  +
push ebx  +
jmp loc_1013F1B  +
cmp dword ptr [ebp+8] 201h +
jz loc_1013E7D  +
test [ebp+10h] bl +
jz loc_1013D75  +
mov ecx [ebp-10h] +
push ebx  +
push 2Ch  +
call sub_101131F  +
mov ecx [ebp-10h] +
push 3  +
call sub_1011830  +
mov esi [eax] +
mov ecx [ebp-10h] +
push 3  +
or esi ebx +
call sub_1011830  +
mov [eax] esi +
jmp loc_1013D7E  +
cmp dword ptr [ebp+8] 204h +
jz loc_1016B6C  +
test byte ptr [ebp+10h] 2 +
jz loc_1013D7E  +
jmp loc_1016B6C  +
***
mov eax ecx +
sub eax edx +
shl eax 10h +
mov ecx 8000h +
add eax ecx +
sub edi edx +
cdq   +
idiv  edi +
mov edi [ebp+arg_8] +
sub ebx [ebp+arg_4] +
mov [edi] eax +
mov eax esi +
sub eax [ebp+arg_4] +
shl eax 10h +
add eax ecx +
cdq   +
idiv  ebx +
jmp loc_1011449  +
***
mov eax [ebp+arg_28] +
sub eax [ebp+arg_20] +
imul eax ecx +
cdq   +
idiv  edi +
mov ecx [ebp+arg_8] +
add eax [ebp+arg_20] +
mov [ecx] eax +
mov eax [ebp+arg_2C] +
sub eax [ebp+arg_24] +
imul eax esi +
cdq   +
idiv  ebx +
add eax [ebp+arg_24] +
jmp loc_1011A38  +
***
push dword ptr [esi]  +
push eax  +
mov ecx [ebp-10h] +
call sub_101131F  +
jmp loc_1013D7E  +
***
dec edx  +
jz loc_1013F64  +
dec edx  +
jnz loc_1002561  +
push esi  +
push 202h  +
call sub_1013F47  +
jmp loc_1010DDA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
and dword ptr [ecx+468h] 0 +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013CD6  +
pop ebp  +
retn 8  +
***
push esi  +
push 201h  +
call sub_1013F79  +
jmp loc_1010DDA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
mov dword ptr [ecx+468h] 1 +
push [ebp+arg_0]  +
call sub_1013CD6  +
pop ebp  +
retn 8  +
***
cmp dword ptr [esi+3A4h] 1 +
mov ecx esi +
jnz loc_1008197  +
push 13h  +
push [ebp+var_4]  +
call sub_101240F  +
mov dword ptr [esi+3A8h] 6 +
jmp loc_1012240  +
***
mov eax offset byte_10227A5 +
call sub_10014DD  +
push ecx  +
mov ecx [ebp+14h] +
push ebx  +
push esi  +
xor esi esi +
cmp ecx esi +
push edi  +
mov [ebp-10h] esp +
jz loc_10140B9  +
cmp [ebp+18h] esi +
jz loc_10140B9  +
mov ebx [ebp+8] +
mov eax [ebp+10h] +
xor edx edx +
div  dword ptr [ebx+98h] +
cmp eax [ebp+0Ch] +
jb loc_1014EA5  +
cmp dword ptr [ebx+0B4h] 0FFFFFFFFh +
jz loc_10140B2  +
cmp dword ptr [ebx+0B8h] 0FFFFFFFFh +
jz loc_10140B2  +
mov [ebp+10h] esi +
mov [ebp-4] esi +
mov [ebp+8] esi +
mov eax [ebp+8] +
cmp eax [ebp+0Ch] +
jnb loc_101409E  +
mov edx [ebp+18h] +
lea eax [edx+eax*8] +
mov edx [ebx+0B4h] +
mov edx [ecx+edx*4] +
add edx [ebx+30h] +
sub esp 10h +
mov [eax] edx +
mov edx [ebx+0B8h] +
mov ecx [ecx+edx*4] +
add ecx [ebx+34h] +
mov edi esp +
mov [eax+4] ecx +
mov ecx [ebx+24h] +
lea esi [ecx+130h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ecx+140h] +
movs   +
mov edx ecx +
mov ecx [edx+0B4h] +
movs   +
and ecx 1 +
push ecx  +
push eax  +
movs   +
push eax  +
add edx 0A4h +
push edx  +
movs   +
call sub_10119D2  +
mov eax [ebx+98h] +
inc dword ptr [ebp+8]  +
add [ebp+14h] eax +
mov ecx [ebp+14h] +
jmp loc_1014027  +
***
mov eax [ebp+10h] +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 14h  +
***
mov eax 80004005h +
jmp loc_10140A1  +
***
mov eax 80004003h +
jmp loc_10140A1  +
***
mov ecx [edi+0B8h] +
mov ecx [ecx+eax*4] +
test ecx ecx +
jz loc_10140D9  +
mov edx [ebp+8] +
mov edx [edx] +
cmp dword ptr [edx+ecx*8+4] 0 +
jnz loc_101411D  +
lea ebx [eax+1] +
test bl 1Fh +
jz loc_1014F3A  +
shl dword ptr [ebp-18h] 1 +
mov eax ebx +
jmp loc_1013576  +
***
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+10h] +
call sub_10136AB  +
mov ecx [ebp-14h] +
mov [eax] ecx +
cmp dword ptr [edi] 0 +
jbe loc_1013591  +
push esi  +
mov esi [ebp+10h] +
mov ecx esi +
call sub_10136AB  +
mov eax [eax] +
mov [esi+18h] eax +
jmp loc_1013591  +
***
mov ecx [ebp-18h] +
or [ebp-14h] ecx +
jmp loc_10140D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jnb loc_1014146  +
mov ecx [ecx] +
mov edx [ebp+arg_4] +
mov [ecx+eax*8+4] edx +
xor eax eax +
pop ebp  +
retn 8  +
mov eax 80004005h +
jmp loc_1014142  +
***
mov ax [esi+18h] +
cmp ax 30h +
jz loc_10141A8  +
cmp ax 31h +
jnz loc_10141A2  +
jmp loc_10141A8  +
xor eax eax +
jmp loc_101420A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_10] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
mov al [ebx] +
push esi  +
push edi  +
mov byte ptr [ebp+arg_0+3] al +
mov edi 110000h +
jbe loc_10141E9  +
mov esi [ebp+arg_C] +
mov cx [esi] +
cmp cx 1 +
jz loc_1014158  +
cmp cx 0Dh +
jnz loc_10141DB  +
movzx edx byte ptr [ebp+arg_0+3] +
lea eax [esi+38h] +
cmp edx [eax-30h] +
jnz loc_10141DB  +
movzx edx [ebp+arg_4] +
push edx  +
push ebx  +
push [ebp+arg_14]  +
push eax  +
xor eax eax +
mov ax [esi+18h] +
push eax  +
push 0  +
push ecx  +
push [ebp+arg_8]  +
call HidP_GetUsageValue  +
cmp eax edi +
mov [esi+4] eax +
jnz loc_101416A  +
mov byte ptr [esi+0Ch] 1 +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add esi 3Ch +
cmp eax [ebp+arg_10] +
jb loc_1014199  +
movzx eax [ebp+arg_4] +
push eax  +
push ebx  +
push [ebp+arg_14]  +
push [ebp+arg_18]  +
push [ebp+arg_1C]  +
push 0  +
push 0Dh  +
push 0  +
call HidP_GetUsages  +
sub eax edi +
neg eax  +
sbb eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
xor eax eax +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp [esi+868h] ebx +
push edi  +
mov edi [esi+44Ch] +
setz al  +
cmp Data ebx +
mov dword ptr [ebp+DueTime+4] eax +
mov eax [edi+7Ch] +
mov [ebp+var_4] eax +
jnz loc_10160C0  +
push dword ptr [edi+80h]  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [edi+1Ch]  +
xor eax eax +
push dword ptr [edi+78h]  +
mov ax [edi+24h] +
push dword ptr [edi+74h]  +
push ebx  +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [edi+eax*4+6Ch]  +
call sub_1014176  +
test eax eax +
jz loc_101618B  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+2E8h] +
call sub_1011A47  +
test eax eax +
jl loc_101618B  +
push dword ptr [esi+890h]  +
mov ecx [ebp+arg_0] +
push 17h  +
call sub_101131F  +
xor eax eax +
cmp [ebp+var_4] ebx +
mov [ebp+arg_4] eax +
ja loc_10145A0  +
cmp [edi+78h] ebx +
mov [ebp+arg_4] ebx +
jbe loc_10142F8  +
xor eax eax +
mov dword ptr [ebp+PerformanceCount+4] eax +
mov ecx [edi+74h] +
cmp dword ptr [eax+ecx+14h] 0FFFFFFFFh +
jz loc_10142E4  +
add eax ecx +
push dword ptr [eax+38h]  +
movzx eax word ptr [eax+14h] +
mov ecx [ebp+arg_0] +
push eax  +
call sub_101412A  +
inc [ebp+arg_4]  +
mov eax dword ptr [ebp+PerformanceCount+4] +
mov ecx [ebp+arg_4] +
add eax 3Ch +
cmp ecx [edi+78h] +
mov dword ptr [ebp+PerformanceCount+4] eax +
jb loc_10142C8  +
mov ecx [ebp+arg_0] +
push 17h  +
call sub_1011830  +
mov ecx [eax] +
mov [ebp+arg_4] ebx +
lea eax [esi+468h] +
mov edx 80h +
cmp [eax] ecx +
jz loc_1014321  +
inc [ebp+arg_4]  +
add eax 8 +
cmp [ebp+arg_4] edx +
jb loc_1014312  +
cmp [ebp+arg_4] edx +
jz loc_1016176  +
mov ecx [ebp+arg_0] +
push 17h  +
call sub_1011830  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
cmp Data ebx +
jnz loc_1016195  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1011830  +
mov ecx [ebp+arg_0] +
mov edi [eax] +
push 1  +
call sub_1011830  +
mov eax [eax] +
push dword ptr [esi+88Ch]  +
mov [ebp+var_18] eax +
push dword ptr [esi+888h]  +
lea eax [esi+150h] +
push eax  +
mov eax [esi+0B4h] +
and eax 1 +
push eax  +
mov ecx esi +
mov [ebp+var_1C] edi +
call sub_1010E43  +
push eax  +
mov ecx esi +
call sub_1010E24  +
push eax  +
lea eax [esi+94h] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
push dword ptr [esi+11Ch]  +
push dword ptr [esi+114h]  +
call sub_101440C  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1011830  +
mov ecx [ebp+var_1C] +
mov [eax] ecx +
mov ecx [ebp+arg_0] +
push 1  +
call sub_1011830  +
mov ecx [ebp+var_18] +
mov [eax] ecx +
mov ecx [ebp+arg_0] +
call sub_1011316  +
push eax  +
mov ecx esi +
call sub_10118E8  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1011316  +
push eax  +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_1011458  +
mov ecx dword ptr [ebp+DueTime+4] +
mov edi eax +
lea eax [esi+464h] +
cmp ecx [eax] +
jnz loc_10161C2  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jz loc_101450E  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_101450E  +
mov edx [eax] +
mov ecx [ebx] +
push esi  +
mov esi [eax+4] +
mov [ebp+var_10] esi +
mov esi [eax+0Ch] +
push edi  +
mov [ebp+var_C] esi +
mov esi eax +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
mov [ebp+var_8] edx +
mov edx [eax+8] +
cmp ecx edx +
mov [ebp+var_14] edx +
movs   +
jge loc_10182F5  +
mov esi [ebp+var_8] +
cmp ecx esi +
jle loc_10182FC  +
mov ecx [ebx+4] +
mov esi [ebp+var_C] +
cmp ecx esi +
jge loc_1014506  +
mov esi [ebp+var_10] +
cmp ecx esi +
jle loc_1014506  +
mov ecx [ebx] +
mov [ebp+arg_8] ecx +
mov ecx [ebx+4] +
mov [ebp+arg_C] ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1018303  +
mov eax [ebp+arg_1C] +
test eax eax +
mov esi [ebx] +
mov edi [ebx+4] +
jz loc_10144AD  +
test byte ptr [eax+48h] 80h +
jz loc_10144AD  +
mov ecx [eax+54h] +
mov [ebp+var_4] ecx +
cmp [ebp+arg_18] 0 +
jz loc_10144D1  +
cmp [ebp+var_4] 1 +
jz loc_101832A  +
cmp [ebp+var_4] 2 +
jz loc_1018339  +
cmp [ebp+var_4] 3 +
jz loc_101834F  +
test eax eax +
mov ecx [ebx] +
mov esi [ebx+4] +
mov [ebp+arg_8] ecx +
jz loc_10144E7  +
test byte ptr [eax+4Bh] 20h +
jnz loc_101836E  +
mov eax [ebx] +
mov [ebp+arg_8] eax +
mov eax [ebx+4] +
mov [ebp+arg_C] eax +
mov eax [ebp+arg_4] +
test eax eax +
pop edi  +
pop esi  +
jnz loc_1018413  +
xor eax eax +
pop ebx  +
leave   +
retn 28h  +
mov [ebx+4] esi +
jmp loc_101447F  +
xor eax eax +
inc eax  +
jmp loc_1014501  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_4] +
xor ecx ecx +
cmp [eax+23Ch] ecx +
jnz loc_1014F84  +
xor eax eax +
cmp [ebp+arg_14] ecx +
push 1Ch  +
setnz al  +
mov [ebp+pInputs.type] ecx +
mov dword ptr [ebp+pInputs.anonymous_0+8] ecx +
mov dword ptr [ebp+pInputs.anonymous_0+10h] ecx +
or eax [ebp+arg_0] +
or eax 0C000h +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] eax +
mov eax [ebp+arg_8] +
mov dword ptr [ebp+pInputs.anonymous_0] eax +
mov eax [ebp+arg_C] +
mov dword ptr [ebp+pInputs.anonymous_0+4] eax +
mov eax [ebp+arg_10] +
and eax 0FFh +
or eax 0FF515700h +
mov dword ptr [ebp+pInputs.anonymous_0+14h] eax +
lea eax [ebp+pInputs] +
push eax  +
push 1  +
call ds:SendInput  +
leave   +
retn 18h  +
***
mov ecx [ebp+var_24] +
cmp ecx [edi+168h] +
jnz loc_10117C9  +
mov cx word ptr [ebp+var_4] +
cmp cx [edi+154h] +
jnz loc_10117C9  +
jmp loc_1011824  +
***
push 3  +
pop ebx  +
mov ecx [edi+80h] +
movzx eax word ptr [ecx+eax*2] +
sub eax 32h +
jz loc_101615E  +
sub eax 0Ah +
jz loc_1016124  +
sub eax 6 +
jnz loc_1014A01  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1011830  +
mov ecx [ebp+arg_0] +
push ebx  +
mov dword ptr [ebp+PerformanceCount+4] eax +
call sub_1011830  +
mov ecx dword ptr [ebp+PerformanceCount+4] +
mov ecx [ecx] +
or ecx 1 +
push 1  +
mov [eax] ecx +
mov ecx [ebp+arg_0] +
push 2Ch  +
call sub_101131F  +
mov ecx [ebp+arg_0] +
push 20h  +
push 17h  +
call sub_101131F  +
mov dword ptr [esi+890h] 20h +
mov eax [ebp+arg_4] +
inc eax  +
cmp eax [ebp+var_4] +
mov [ebp+arg_4] eax +
jb loc_10145A3  +
xor ebx ebx +
jmp loc_10142BB  +
***
dec ecx  +
jnz loc_10152C5  +
mov ecx [ebp+var_4] +
and ecx edx +
sub ecx eax +
jz loc_1014781  +
dec ecx  +
jnz loc_101531E  +
jmp loc_10117EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
test byte ptr [edi+34h] 80h +
jnz loc_101466B  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
lea esi [edi+15Ch] +
cmp ebx [esi] +
jnz loc_1014670  +
mov eax [ebp+Y] +
cmp eax [edi+160h] +
jnz loc_1014670  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 8  +
push [ebp+Y]  +
push ebx  +
call ds:SetCursorPos  +
mov eax [ebp+Y] +
mov [esi] ebx +
mov [edi+160h] eax +
jmp loc_1014669  +
***
cmp [ebp+var_1C] 0 +
jnz loc_101179C  +
cmp word ptr [ebp+var_8] 0Fh +
jz loc_10148B3  +
cmp word ptr [edi+158h] 0Fh +
jnz loc_10117A6  +
mov eax [edi+164h] +
mov [ebp+var_28] eax +
mov eax [edi+168h] +
mov [ebp+var_24] eax +
jmp loc_10117A6  +
mov eax [ebp+arg_0] +
push dword ptr [eax+10h]  +
lea eax [ebp+var_24] +
push [ebp+arg_8]  +
mov ecx edi +
push esi  +
push eax  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+var_20]  +
push ebx  +
call sub_101471F  +
test eax eax +
jz loc_1014BD3  +
mov eax [ebp+var_28] +
mov [edi+164h] eax +
mov eax [ebp+var_24] +
mov [edi+168h] eax +
mov ax word ptr [ebp+var_8] +
mov [edi+158h] ax +
mov ax word ptr [ebp+var_4] +
mov [edi+154h] ax +
jmp loc_1011824  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi ebx +
sar edi 10h +
test bh 2 +
mov esi ecx +
jnz loc_101510A  +
movzx eax di +
cmp eax 14h +
jle loc_1014825  +
sub eax 19h +
jz loc_101526D  +
push 2  +
pop edx  +
sub eax edx +
jz loc_10151F5  +
sub eax 3 +
jz loc_10125C2  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
push 17h  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
jmp loc_1012208  +
***
push [ebp+arg_8]  +
push esi  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push ebx  +
push 4  +
jmp loc_10117F7  +
***
cmp ebx 1 +
ja loc_10147B1  +
xor eax eax +
mov [esi+40Ch] eax +
mov [esi+410h] eax +
mov [esi+414h] eax +
jmp loc_10121E3  +
push 18h  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
jmp loc_1014798  +
***
mov eax [edi+4] +
cmp ebx [eax] +
jz loc_1008011  +
lea ecx [ebp+var_4] +
call sub_10147DF  +
mov ecx [ebp+var_4] +
jmp loc_10127D5  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_10147F8  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jz loc_1017513  +
mov eax [ecx] +
cmp eax dword_1027050 +
jnz loc_101751B  +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_1014811  +
mov [esi] eax +
pop esi  +
retn   +
mov [esi] eax +
mov ecx eax +
jmp loc_1014806  +
***
mov esi [esi] +
jmp loc_10127BA  +
***
xor esi esi +
jmp loc_1012827  +
***
jz loc_10151DE  +
sub eax 10h +
jz loc_1012585  +
dec eax  +
jz loc_1010AB0  +
dec eax  +
jz loc_1015189  +
dec eax  +
jnz loc_1014766  +
xor eax eax +
cmp [ebp+arg_20] eax +
setnz al  +
jmp loc_1014769  +
***
push dword ptr [esi+3B4h]  +
lea eax [esi+3D4h] +
push dword ptr [esi+3B0h]  +
push eax  +
call ebx  +
test eax eax +
jz loc_1014887  +
mov eax [esi+3E4h] +
cmp eax [esi+400h] +
ja loc_1014887  +
cmp [ebp+var_8] 0 +
jnz loc_1012240  +
push 13h  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
mov dword ptr [esi+3A8h] 6 +
mov dword ptr [esi+3A4h] 1 +
jmp loc_1012240  +
***
xor esi esi +
jmp loc_1012AAE  +
***
mov eax [ebp+var_28] +
mov [edi+164h] eax +
mov eax [ebp+var_24] +
mov [edi+168h] eax +
mov word ptr [edi+158h] 0Fh +
jmp loc_1011824  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp dword_102711C 0 +
push esi  +
push edi  +
mov edi 80h +
jnz loc_10173CD  +
mov eax edi +
sub eax dword_10272FC +
sub eax dword_10272F4 +
mov dword_1027304 eax +
mov eax edi +
sub eax dword_1027354 +
sub eax dword_102734C +
mov dword_102735C eax +
mov eax dword_1027300 +
mov dword_1027308 eax +
mov eax dword_1027358 +
mov esi [ebp+arg_0] +
push 0  +
mov dword_1027360 eax +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
call ds:MonitorFromPoint  +
test eax eax +
jz loc_1014989  +
lea ecx [ebp+mi] +
push ecx  +
push eax  +
mov [ebp+mi.cbSize] 28h +
call ds:GetMonitorInfoW  +
test eax eax +
jz loc_1014989  +
mov eax [esi+14h] +
mov ecx eax +
sub ecx [ebp+mi.rcMonitor.left] +
cmp ecx 50h +
mov ecx dword_102711C +
jl loc_10149D2  +
mov edx [ebp+mi.rcMonitor.right] +
sub edx eax +
cmp edx 50h +
jl loc_1002554  +
mov eax [esi+18h] +
sub eax [ebp+mi.rcMonitor.top] +
cmp eax 50h +
jl loc_1014CE2  +
pop edi  +
pop esi  +
leave   +
retn 4  +
dec eax  +
jnz loc_1013B98  +
lea ecx [ebx+134h] +
mov eax [ecx] +
test al 4 +
jz loc_100200B  +
and eax 0FFFFFFFBh +
jmp loc_1013B96  +
mov ecx [ebp+arg_4] +
push 17h  +
call sub_1011830  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [eax]  +
mov ecx ebx +
push 2C4h  +
call sub_1001FC9  +
xor eax eax +
jmp loc_1013405  +
test ecx ecx +
jz loc_101496C  +
mov eax edi +
sub eax dword_1027304 +
sub eax dword_10272F4 +
mov dword_1027304 eax +
mov eax edi +
sub eax dword_102735C +
sub eax dword_102734C +
mov dword_102735C eax +
jmp loc_101497A  +
dec eax  +
jz loc_1014A3B  +
dec eax  +
jnz loc_10160DB  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1011830  +
mov ecx [ebp+arg_0] +
push ebx  +
mov [ebp+mi.rcWork.bottom] eax +
call sub_1011830  +
mov ecx [ebp+mi.rcWork.bottom] +
mov ecx [ecx] +
or ecx 8 +
push 1  +
mov [eax] ecx +
push 2Eh  +
mov ecx [ebp+arg_0] +
call sub_101131F  +
jmp loc_1014609  +
push 1  +
push 2Dh  +
jmp loc_1014A2E  +
and [ebp+mi.rcMonitor.right] 0 +
lea ecx [ebp+mi.rcMonitor.right] +
push ecx  +
push eax  +
call sub_100174E  +
mov eax [ebp+mi.rcMonitor.right] +
test eax eax +
jz loc_1011309  +
test byte ptr [eax+134h] 1 +
jz loc_1011309  +
lea eax [ebp+mi.rcMonitor.top] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
lea ecx [ebx+32Ch] +
call sub_1011871  +
mov eax [ebx+330h] +
mov ecx [ebp+var_30] +
cmp eax ecx +
jz loc_1011309  +
mov eax [ecx+10h] +
cmp eax 0FFFFFFFFh +
jz loc_1011309  +
mov ecx dword ptr [ebp+pInputs.anonymous_0+0Ch] +
cmp [ecx] eax +
jnz loc_101150F  +
jmp loc_1011309  +
mov ecx esi +
push edi  +
call sub_10138FE  +
jmp loc_101310A  +
mov ecx [ecx+1Ch] +
cmp ecx [ebp+mi.rcWork.right] +
jnb loc_1014AC2  +
mov [ebp+mi.rcWork.top] eax +
mov [ebp+mi.rcWork.right] ecx +
inc [ebp+mi.dwFlags]  +
inc ebx  +
movsx eax bx +
xor edx edx +
div  dword ptr [esi+4] +
mov ax word ptr [ebp+mi.dwFlags] +
cmp ax [esi+4] +
mov ebx edx +
jge loc_1011A90  +
jmp loc_1011A7A  +
mov [ebp+mi.rcWork.bottom] 80004005h +
jmp loc_1011B08  +
movsx ebx word ptr [ebp+arg_0] +
jmp loc_1013713  +
mov edi [ebp+mi.rcWork.left] +
mov eax [edi] +
test byte ptr [eax+34h] 22h +
jnz loc_10137AB  +
mov eax [esi] +
push dword ptr [eax]  +
mov ecx [edi+8] +
call sub_10115D9  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
call sub_101311E  +
jmp loc_10137AB  +
push dword ptr [esi+3B4h]  +
lea eax [esi+3D4h] +
push dword ptr [esi+3B0h]  +
push eax  +
call ebx  +
test eax eax +
jz loc_1014887  +
mov eax [esi+3E4h] +
cmp eax [esi+400h] +
ja loc_1014887  +
cmp [ebp+mi.rcWork.bottom] 0 +
jz loc_1014887  +
mov eax [ebp+mi.dwFlags] +
mov ecx [eax+1Ch] +
mov edx dword_1027168 +
mov edi dword_1027178 +
sub ecx [esi+3ACh] +
add edi edx +
cmp ecx edi +
jnb loc_1011C7B  +
jmp loc_10122AD  +
mov ecx [esi+3B0h] +
sub ecx [esi+3C0h] +
sub eax [esi+3C4h] +
mov edx ecx +
imul edx ecx +
mov ecx eax +
imul ecx eax +
add edx ecx +
mov [ebp+mi.rcWork.left] edx +
fild  [ebp+mi.rcWork.left] +
fsqrt   +
call _ftol  +
add [esi+3E4h] eax +
jmp loc_1012275  +
mov edi [ebp+mi.dwFlags] +
mov dword ptr [esi+3A8h] 2 +
mov eax [edi+1Ch] +
mov [esi+3ACh] eax +
jmp loc_101227B  +
xor eax eax +
jmp loc_10117BA  +
and [ebp+mi.rcWork.right] 0 +
and [ebp+mi.rcWork.bottom] 0 +
jmp loc_1011765  +
dec ecx  +
jnz loc_10117FC  +
jmp loc_10117EB  +
dec ecx  +
jnz loc_1015342  +
cmp [ebx+23Ch] eax +
push 2  +
pop ecx  +
jnz loc_1015304  +
xor edx edx +
cmp [ebp+arg_8] eax +
mov dword ptr [ebp+pInputs.anonymous_0+10h] eax +
setnz dl  +
mov dword ptr [ebp+pInputs.anonymous_0+8] eax +
mov [ebp+pInputs.type] eax +
mov eax [ebp+mi.cbSize] +
mov dword ptr [ebp+pInputs.anonymous_0] eax +
mov eax [ebp+mi.rcMonitor.left] +
mov dword ptr [ebp+pInputs.anonymous_0+4] eax +
push 1Ch  +
lea eax [ebp+pInputs] +
or edx ecx +
and esi 0FFh +
push eax  +
or edx 0C000h +
or esi 0FF515700h +
push 1  +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] edx +
mov dword ptr [ebp+pInputs.anonymous_0+14h] esi +
call ds:SendInput  +
mov eax [ebp+arg_4] +
mov [edi+16Ch] eax +
mov eax [ebp+mi.cbSize] +
mov [edi+170h] eax +
mov eax [ebp+mi.rcMonitor.left] +
mov [edi+174h] eax +
jmp loc_10117FC  +
mov edx [ebp+arg_0] +
cmp [edx+23Ch] eax +
push 2  +
pop ecx  +
jnz loc_10151D6  +
mov [ebp+mi.rcMonitor.right] eax +
mov [ebp+mi.rcWork.top] eax +
mov [ebp+mi.rcWork.bottom] eax +
xor edx edx +
cmp [ebp+arg_1C] eax +
mov eax [ebx] +
mov [ebp+mi.rcMonitor.bottom] eax +
mov eax [edi] +
mov [ebp+mi.rcWork.left] eax +
mov eax [ebp+arg_18] +
setnz dl  +
and eax 0FFh +
or eax 0FF515700h +
mov [ebp+mi.dwFlags] eax +
push 1Ch  +
lea eax [ebp+mi.rcMonitor.right] +
push eax  +
or edx ecx +
or edx 0C000h +
push 1  +
mov [ebp+mi.rcWork.right] edx +
call ds:SendInput  +
mov eax [ebp+arg_8] +
mov [esi+16Ch] eax +
mov eax [ebx] +
mov [esi+170h] eax +
mov eax [edi] +
mov [esi+174h] eax +
jmp loc_101259E  +
mov eax edi +
sub eax dword_10272F8 +
sub edi dword_1027350 +
sub eax dword_1027308 +
sub edi dword_1027360 +
mov dword_1027308 eax +
mov dword_1027360 edi +
jmp loc_1014989  +
***
push ebx  +
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jge loc_1014D32  +
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_1014D4E  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_1014D6A  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_1014DAB  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_1014D78  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_1014DA6  +
cmp edx [esp+arg_4] +
ja loc_1014DA6  +
jb loc_1014DA7  +
cmp eax [esp+arg_0] +
jbe loc_1014DA7  +
dec esi  +
xor edx edx +
mov eax esi +
dec edi  +
jnz loc_1014DB5  +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_1014DD9  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov eax 80004003h +
jmp loc_1005FED  +
mov eax 8007000Eh +
jmp loc_1005FED  +
***
mov eax 80004003h +
jmp loc_10084EA  +
***
mov eax 80004003h +
jmp loc_1008350  +
***
mov eax 80004003h +
jmp loc_1001CDB  +
***
and [ebp+arg_0] 0 +
jmp loc_100352D  +
***
pop ecx  +
jmp loc_100CCDF  +
***
mov eax [ecx+94h] +
sub [edx] eax +
add [ecx+50h] eax +
mov eax [ecx+98h] +
sub [ecx+4Ch] eax +
add [ecx+54h] eax +
jmp locret_100205F  +
***
mov eax 80004003h +
jmp loc_100597D  +
***
mov eax 80004003h +
jmp loc_10059A0  +
***
mov eax 80004003h +
jmp loc_100612E  +
***
mov eax 80004003h +
jmp loc_1002356  +
***
mov eax 80004003h +
jmp locret_1002142  +
***
mov eax 8007007Ah +
jmp loc_10140A1  +
***
retn   +
***
mov eax [eax+20h] +
test eax eax +
jz loc_1014ECD  +
lea ecx [eax-20h] +
jmp loc_1014ECF  +
xor ecx ecx +
push dword ptr [ebp+0Ch]  +
push 1  +
call sub_101D42D  +
jmp loc_1002A49  +
***
xor esi esi +
test byte ptr [edi+134h] 2 +
jz loc_1014F22  +
lea ebx [edi+150h] +
call ds:GetTickCount  +
mov esi eax +
sub esi [ebx] +
jns loc_1014F22  +
call ds:GetTickCount  +
mov esi eax +
sub esi [ebx] +
dec esi  +
mov eax [edi+0C4h] +
mov ecx [ebp+10h] +
inc eax  +
inc eax  +
push eax  +
call sub_10136AB  +
mov [eax] esi +
jmp loc_101356D  +
***
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+10h] +
call sub_10136AB  +
mov ecx [ebp-14h] +
inc dword ptr [ebp+0Ch]  +
and dword ptr [ebp-14h] 0 +
mov [eax] ecx +
mov dword ptr [ebp-18h] 1 +
jmp loc_10140E8  +
***
add [ecx] eax +
retn   +
***
mov word ptr [ecx] 1Ah +
mov [esi+2] ax +
jmp loc_10139D0  +
***
mov eax 80004005h +
pop esi  +
retn   +
***
mov eax [ebp+arg_0] +
push 2  +
pop edx  +
sub eax edx +
jz loc_1014FC0  +
sub eax edx +
jz loc_1014FB4  +
sub eax 4 +
jz loc_1014FAC  +
sub eax 8 +
jnz loc_1014531  +
mov [ebp+arg_0] 4 +
jmp loc_1014531  +
mov [ebp+arg_0] edx +
jmp loc_1014531  +
mov [ebp+arg_0] 10h +
jmp loc_1014531  +
mov [ebp+arg_0] 8 +
jmp loc_1014531  +
***
mov eax [esi+4] +
sub eax [esi+8] +
sub edx edi +
sar edx 2 +
sar eax 2 +
dec edx  +
shl edx 0Ah +
add eax edx +
mov edx [ecx+8] +
sub edx [ecx] +
sar edx 2 +
add eax edx +
jmp loc_100292E  +
***
mov eax 3FFh +
sub eax esi +
mov ebx 0FFFFFC00h +
jmp loc_10027E5  +
mov edx eax +
shl edx 2 +
add [ecx+0Ch] edx +
mov edx [ecx+0Ch] +
mov edx [edx] +
shl eax 0Ah +
mov [ecx] edx +
add edx 1000h +
sub esi eax +
mov eax [ecx] +
lea eax [eax+esi*4] +
mov [ecx+4] edx +
mov [ecx+8] eax +
jmp loc_10027F3  +
***
add dword ptr [eax+0Ch] 4 +
mov ecx [eax+0Ch] +
mov ecx [ecx] +
mov [eax] ecx +
add ecx 1000h +
mov [eax+4] ecx +
mov ecx [eax] +
mov [eax+8] ecx +
jmp locret_10017B7  +
***
mov eax 80004003h +
jmp loc_10059D9  +
***
mov eax 80004005h +
jmp loc_100200D  +
dec ecx  +
jz loc_10150E3  +
dec ecx  +
jz loc_10150D2  +
dec ecx  +
jz loc_10150C1  +
dec ecx  +
jnz loc_100200B  +
push [ebp+wParam]  +
mov ecx [eax] +
push dword ptr [ebx+4]  +
push eax  +
call dword ptr [ecx+1Ch]  +
jmp loc_100200B  +
push [ebp+wParam]  +
mov ecx [eax] +
push dword ptr [ebx+4]  +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_100200B  +
push [ebp+wParam]  +
mov ecx [eax] +
push dword ptr [ebx+4]  +
push eax  +
call dword ptr [ecx+14h]  +
jmp loc_100200B  +
push dword ptr [ebx+4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_100200B  +
***
mov [ebp+var_4] esi +
mov ecx edi +
call sub_1003A91  +
jmp loc_10060F1  +
mov [ebp+var_4] ecx +
jmp loc_10150F4  +
and [ebp+var_4] eax +
jmp loc_10150F4  +
***
mov esi ds:SendInput +
xor eax eax +
mov word ptr [ebp+pInputs.anonymous_0] ax +
mov dword ptr [ebp+pInputs.anonymous_0+8] eax +
mov eax [ebp+arg_18] +
xor ecx ecx +
and eax 0FFh +
inc ecx  +
sar ebx 0Ah +
or eax 0FF515700h +
test bl cl +
mov [ebp+pInputs.type] ecx +
mov dword ptr [ebp+pInputs.anonymous_0+4] 8 +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] eax +
jz loc_101514C  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push ecx  +
mov word ptr [ebp+pInputs.anonymous_0+2] 1Dh +
call esi  +
test bl 2 +
jz loc_1015161  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push 1  +
mov word ptr [ebp+pInputs.anonymous_0+2] 38h +
call esi  +
test bl 4 +
jz loc_1015176  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push 1  +
mov word ptr [ebp+pInputs.anonymous_0+2] 2Ah +
call esi  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push 1  +
mov word ptr [ebp+pInputs.anonymous_0+2] di +
call esi  +
jmp loc_1014766  +
mov ecx [ebp+arg_C] +
mov ax [ecx] +
test ax ax +
jnz loc_10151C2  +
push [ebp+arg_1C]  +
mov esi [ebp+arg_14] +
push [ebp+arg_18]  +
mov edi [ebp+arg_10] +
push dword ptr [esi]  +
push dword ptr [edi]  +
push [ebp+arg_0]  +
push 8  +
call sub_1014518  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push dword ptr [esi]  +
push dword ptr [edi]  +
push [ebp+arg_0]  +
push 10h  +
jmp loc_10125AD  +
or ax 8 +
mov [ecx] ax +
jmp loc_1010B43  +
push 8  +
pop ecx  +
jmp loc_1010ADB  +
***
push 8  +
pop ecx  +
jmp loc_1014C80  +
***
mov eax [ebp+arg_C] +
or byte ptr [eax] 8 +
jmp loc_1010B43  +
mov [ebp+arg_14] 8 +
jmp loc_10125DE  +
mov esi ds:SendInput +
xor eax eax +
mov word ptr [ebp+pInputs.anonymous_0] ax +
mov word ptr [ebp+pInputs.anonymous_0+2] ax +
mov dword ptr [ebp+pInputs.anonymous_0+8] eax +
mov eax [ebp+arg_18] +
xor edi edi +
and eax 0FFh +
sar ebx 0Ah +
inc edi  +
or eax 0FF515700h +
test bl 1 +
mov [ebp+pInputs.type] edi +
mov dword ptr [ebp+pInputs.anonymous_0+4] 8 +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] eax +
jz loc_101523C  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push edi  +
mov word ptr [ebp+pInputs.anonymous_0+2] 1Dh +
call esi  +
test bl 2 +
jz loc_1015250  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push edi  +
mov word ptr [ebp+pInputs.anonymous_0+2] 38h +
call esi  +
test bl 4 +
jz loc_1010B43  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push edi  +
mov word ptr [ebp+pInputs.anonymous_0+2] 2Ah +
call esi  +
jmp loc_1010B43  +
push [ebp+arg_1C]  +
mov esi [ebp+arg_14] +
push [ebp+arg_18]  +
mov edi [ebp+arg_10] +
push dword ptr [esi]  +
push dword ptr [edi]  +
push [ebp+arg_0]  +
push 20h  +
call sub_1014518  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push dword ptr [esi]  +
push dword ptr [edi]  +
push [ebp+arg_0]  +
push 40h  +
jmp loc_10125AD  +
***
test byte ptr [ebp+var_4] 1 +
jz loc_1011778  +
or [ebp+var_4] 8 +
mov [ebp+var_8] eax +
jmp loc_1011778  +
***
mov esi [ebp+var_14] +
cmp [edi+184h] esi +
jnz loc_1011824  +
jmp loc_1011788  +
***
sub ecx 7 +
jz loc_10117DE  +
dec ecx  +
jnz loc_10117FC  +
mov ecx [ebp+var_4] +
and ecx edx +
sub ecx eax +
jz loc_101530C  +
dec ecx  +
jz loc_10152EB  +
sub ecx 7 +
jz loc_101530C  +
jmp loc_1014BE7  +
push [ebp+arg_8]  +
push esi  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push ebx  +
push 10h  +
call sub_1014518  +
xor eax eax +
jmp loc_1014BFA  +
***
push 8  +
pop ecx  +
jmp loc_1014C09  +
***
push [ebp+arg_8]  +
push esi  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push ebx  +
push 10h  +
jmp loc_10117F7  +
sub ecx 7 +
jz loc_1014781  +
dec ecx  +
jnz loc_10117FC  +
push [ebp+arg_8]  +
push esi  +
push [ebp+var_24]  +
push [ebp+var_28]  +
push ebx  +
push 4  +
call sub_1014518  +
jmp loc_1015352  +
***
sub ecx 7 +
jz loc_10117EB  +
dec ecx  +
jnz loc_10117FC  +
push [ebp+arg_8]  +
push esi  +
push [ebp+mi.rcMonitor.left]  +
push [ebp+mi.cbSize]  +
push ebx  +
push 8  +
jmp loc_10117F7  +
***
mov [ecx] eax +
jmp loc_1006499  +
***
lea ecx [ebp+arg_14] +
call sub_1018F4E  +
mov esi [eax+8] +
lea ecx [ebp+arg_24] +
call sub_1018F4E  +
mov eax [eax+8] +
mov ecx [esi] +
mov [eax] ecx +
jmp loc_1002943  +
***
push [ebp+arg_8]  +
mov ecx ebx +
call sub_10022C3  +
jmp loc_1004FB1  +
mov esi [ebx+2Ch] +
add esi 130h +
lea edi [ebx+58h] +
movs   +
movs   +
movs   +
movs   +
jmp loc_1004FB1  +
lea esi [ebp+var_14] +
jmp loc_1008C22  +
mov eax 80004005h +
jmp loc_100520F  +
mov eax 8007000Eh +
jmp loc_100520F  +
mov eax [ebp+arg_10] +
mov [ebx+0C4h] eax +
mov ecx [ebp+arg_4] +
mov eax [ebx+0B4h] +
and dword ptr [ecx+eax] 0 +
jmp loc_1005160  +
***
mov eax 80070057h +
jmp loc_100632D  +
***
mov edi 80004005h +
jmp loc_1006329  +
***
cmp [ecx+0C8h] eax +
jz loc_1015407  +
pop ebp  +
jmp loc_1019035  +
cmp dword ptr [ecx+0E0h] 1 +
jnz loc_10136DA  +
pop ebp  +
jmp loc_1018E79  +
***
call sub_1019295  +
jmp loc_1002C86  +
mov ecx esi +
pop esi  +
jmp sub_1019295  +
***
pop ecx  +
jmp loc_100CD9A  +
***
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_1003B95  +
cmp [ebp+arg_8] eax +
jnz loc_1003B95  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_1019255  +
mov ecx dword_102789C +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_1003B9E  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_10190BA  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10193C9  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1015550  +
pop edi  +
jmp loc_1003B9E  +
***
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+138h] +
call sub_1019388  +
mov eax [ebp+var_4] +
cmp [esi+13Ch] eax +
jz loc_1013A98  +
cmp dword ptr [eax+10h] 0 +
jz loc_1013A98  +
push [ebp+arg_0]  +
mov ecx [esi+2Ch] +
push dword ptr [esi+4]  +
call sub_1020F05  +
jmp loc_1013A98  +
***
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+138h] +
call sub_1019388  +
mov eax [ebp+var_4] +
cmp [esi+13Ch] eax +
jz loc_1013B02  +
cmp dword ptr [eax+10h] 0 +
jz loc_1013B02  +
push [ebp+arg_0]  +
mov ecx [esi+2Ch] +
push dword ptr [esi+4]  +
call sub_1020E05  +
jmp loc_1013B02  +
***
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1003EB0  +
jmp loc_1003D12  +
***
mov esi dword_102789C +
and dword_102789C 0 +
jmp loc_1003B66  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1003B77  +
***
or dword ptr [eax+10h] 0FFFFFFFFh +
jmp loc_1003567  +
***
mov dword ptr [ebp+8] 8007000Eh +
push dword ptr [ebp+10h]  +
mov ecx [ebx+2Ch] +
call sub_10115D9  +
push dword ptr [ebp+14h]  +
call ds:LeaveCriticalSection  +
jmp loc_1013402  +
***
cmp eax 8 +
jz loc_1015669  +
cmp esi edi +
jz loc_1013320  +
test byte ptr [ebx+134h] 2 +
jnz loc_10109F6  +
jmp loc_1013320  +
***
mov eax [ebx+134h] +
shl eax 1Eh +
xor ecx ecx +
sar eax 1Fh +
cmp esi eax +
setnz cl  +
mov [ebp+14h] ecx +
jmp loc_1013327  +
***
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebx+4]  +
call sub_1011458  +
jmp loc_1013402  +
***
mov dword ptr [ecx+0Ch] 1 +
xor eax eax +
retn   +
***
mov eax [esi] +
shl eax 5 +
movsx eax word ptr [eax+edx+16h] +
cmp eax 0FFFFFFFFh +
mov [esi] eax +
jnz loc_1012ECF  +
mov eax 80004005h +
jmp loc_1012EE2  +
***
test [ebp+arg_0] 1 +
jz loc_10156E0  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
jmp loc_10038E6  +
***
shl eax 5 +
mov edi eax +
mov eax [esi+20h] +
add eax edi +
cmp dword ptr [eax+10h] 1 +
mov bx [eax+16h] +
jnz loc_101571C  +
mov eax [esi+20h] +
mov eax [edi+eax] +
push dword ptr [eax]  +
mov ecx [esi+8] +
call sub_10115D9  +
mov eax [esi+20h] +
push dword ptr [eax+edi+0Ch]  +
mov ecx esi +
call sub_101311E  +
inc dword ptr [ebp-14h]  +
cmp bx 0FFFFh +
jz loc_1003D95  +
movsx eax bx +
jmp loc_1003D89  +
***
mov ecx [ebx+0Ch] +
mov edx [ebp+var_8] +
mov [eax+edx*4] ecx +
jmp loc_10137A0  +
***
mov ebx 80070057h +
jmp loc_100D014  +
and word ptr [edi+esi*2] 0 +
jmp loc_100D012  +
***
mov eax [ebp+arg_14] +
mov [edi] eax +
xor eax eax +
inc eax  +
jmp loc_10079E3  +
***
mov eax 80004003h +
jmp loc_1010851  +
***
cmp eax 28h +
jle loc_1008C6C  +
mov eax 80040216h +
jmp loc_1008C8C  +
***
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jz loc_10157A9  +
jmp loc_1008444  +
***
mov eax 80070057h +
pop ebp  +
retn   +
***
call ebx  +
push [ebp+hKey]  +
call ebx  +
xor eax eax +
inc eax  +
jmp loc_100A3DD  +
***
inc [ebp+var_214]  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+var_214]  +
jmp loc_100D344  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_100D3DA  +
***
mov [esi+4] edx +
jmp loc_1008CF0  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1015813  +
mov [ecx] eax +
jmp loc_1008D06  +
mov [ecx+8] eax +
jmp loc_1008D06  +
***
mov [eax] ebx +
jmp loc_1009C45  +
mov ecx [edx+8] +
cmp dword ptr [ecx+14h] 0 +
jz loc_1009CB5  +
cmp esi [eax+8] +
jnz loc_101583E  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_100AFAD  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1018942  +
jmp loc_1009C94  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_1018942  +
jmp loc_1009C73  +
***
mov eax 80004003h +
jmp loc_1010878  +
***
pop ecx  +
jmp loc_100D4AA  +
***
mov [eax] ebx +
jmp loc_1009F62  +
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jnz loc_10158FC  +
mov ecx [edx+8] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_10158CA  +
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+14h] eax +
mov [ecx+14h] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
jmp loc_1015931  +
cmp esi [eax+8] +
jnz loc_10158D9  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101A981  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101A7B5  +
jmp loc_1015931  +
cmp dword ptr [ecx+14h] 0 +
jz loc_10158AC  +
cmp esi [eax] +
jnz loc_1015910  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101A7B5  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101A981  +
mov eax [edi+4] +
cmp esi [eax+4] +
jnz loc_1009F6C  +
jmp loc_1009F79  +
***
mov esi [esi] +
jmp loc_100BD91  +
lea ecx [ebp+var_4] +
call sub_101A899  +
mov ecx [ebp+var_4] +
jmp loc_100BDA4  +
***
mov esi [esi] +
jmp loc_1009EC0  +
lea ecx [ebp+var_4] +
call sub_101A83B  +
mov ecx [ebp+var_4] +
jmp loc_1009E6F  +
***
mov eax 80004003h +
jmp loc_1008581  +
***
mov eax 80040216h +
jmp loc_1008581  +
***
test eax eax +
jz loc_10159A3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_100D6D7  +
***
lea ecx [esi-8] +
test ecx ecx +
jz loc_10109A3  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_10109A3  +
***
mov ecx [ebp-14h] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-14h] 0 +
mov [eax] ecx +
jmp loc_100D80D  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor esi esi +
jmp loc_100D801  +
***
test ebx ebx +
jz loc_1015A05  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
mov eax 80004005h +
jmp loc_100D608  +
***
inc esi  +
inc esi  +
inc eax  +
inc eax  +
cmp cl bl +
jnz loc_100AEAC  +
jmp loc_100AF27  +
push [ebp+phkResult]  +
mov esi ds:RegCloseKey +
call esi  +
push [ebp+hKey]  +
call esi  +
xor eax eax +
inc eax  +
jmp loc_100AF18  +
***
push dword ptr [esi+870h]  +
push offset aSuspendinputNo  +
call nullsub_1  +
pop ecx  +
pop ecx  +
xor ecx ecx +
inc ecx  +
lea eax [esi+874h] +
cmp [eax] ebx +
mov [esi+878h] ecx +
jnz loc_1002D2B  +
jmp loc_1002D27  +
***
push dword ptr [esi]  +
push offset aResumeinputNon  +
call nullsub_1  +
cmp [esi] ebx +
pop ecx  +
pop ecx  +
mov [edi+878h] ebx +
jnz loc_1002E12  +
lea eax [edi+874h] +
cmp [eax] ebx +
jz loc_1002E12  +
jmp loc_1002E09  +
***
mov eax [ecx+8] +
jmp loc_100DB00  +
push eax  +
call sub_101B0A0  +
jmp loc_100DB00  +
***
xor eax eax +
jmp loc_1006B79  +
***
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edi eax +
movs   +
movs   +
movs   +
add eax 10h +
cmp eax [ebp+arg_4] +
movs   +
jnz loc_1015B74  +
pop edi  +
pop esi  +
jmp loc_100A190  +
***
xor eax eax +
jmp loc_1008DEC  +
***
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_10040B6  +
***
mov [eax] ebx +
jmp loc_100BAD0  +
mov ecx [edx+8] +
cmp dword ptr [ecx+14h] 0 +
jz loc_100BA38  +
cmp esi [eax+8] +
jnz loc_1015BC2  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_1008CD1  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101A931  +
jmp loc_100BB23  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101A931  +
jmp loc_100BB02  +
***
mov ecx [ebx+28h] +
mov edx [ebx+24h] +
mov eax [ebx+20h] +
lea ecx [edx+ecx*4-4] +
cmp eax ecx +
jnb loc_1015C16  +
add eax 4 +
mov [ebx+20h] eax +
mov [eax] esi +
push dword ptr [ebx+20h]  +
push esi  +
jmp loc_1015C4D  +
sub eax [ebx+10h] +
mov ecx ebx +
sar eax 2 +
inc eax  +
mov edi eax +
lea eax [edi+edi] +
push eax  +
call sub_101B50F  +
lea ecx [eax+edi*4] +
mov [ecx] esi +
push eax  +
push dword ptr [ebx+0Ch]  +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_18] +
call sub_1008718  +
push [ebp+var_4]  +
lea edi [ebx+4] +
push [ebp+var_8]  +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
lea ecx [ebp+var_18] +
call sub_1008718  +
jmp loc_1008705  +
***
mov ecx [ebx+10h] +
cmp [ebx+24h] ecx +
jnb loc_1015C6A  +
lea eax [ecx-4] +
mov [ebx+10h] eax +
jmp loc_1015C86  +
mov eax [ebx+20h] +
cmp eax ecx +
jnz loc_1015CA2  +
lea edx [eax+4] +
mov [ebx+20h] edx +
mov ecx [ecx] +
mov [eax] ecx +
mov eax [ebx+10h] +
mov ecx [eax] +
mov [eax+4] ecx +
mov eax [ebx+10h] +
mov [eax] esi +
push dword ptr [ebx+10h]  +
add esi 1000h +
push esi  +
lea ecx [ebp+var_18] +
call sub_1008718  +
lea edi [ebx+4] +
jmp loc_100DAB2  +
sub eax ecx +
sar eax 2 +
inc eax  +
mov [ebp+var_8] eax +
add eax eax +
push eax  +
mov ecx ebx +
call sub_101B50F  +
sub eax 4 +
mov [eax] esi +
push eax  +
add esi 1000h +
push esi  +
lea ecx [ebp+var_18] +
mov [ebp+var_4] eax +
call sub_1008718  +
mov ecx [ebp+var_8] +
mov esi eax +
mov eax [ebp+var_4] +
lea edi [ebx+4] +
movs   +
movs   +
lea eax [eax+ecx*4] +
movs   +
push eax  +
push dword ptr [ebx+1Ch]  +
lea ecx [ebp+var_28] +
movs   +
call sub_1008718  +
jmp loc_100DAAF  +
***
pop ecx  +
jmp loc_100C898  +
***
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jnz loc_1015D92  +
mov ecx [edx+8] +
cmp dword ptr [ecx+1Ch] 0 +
jnz loc_1015D60  +
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+1Ch] eax +
mov [ecx+1Ch] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+1Ch] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
jmp loc_1015DC7  +
cmp esi [eax+8] +
jnz loc_1015D6F  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101B471  +
mov eax [esi+4] +
mov dword ptr [eax+1Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+1Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101B4BF  +
jmp loc_1015DC7  +
cmp dword ptr [ecx+1Ch] 0 +
jz loc_1015D42  +
cmp esi [eax] +
jnz loc_1015DA6  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101B4BF  +
mov eax [esi+4] +
mov dword ptr [eax+1Ch] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+1Ch] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101B471  +
mov eax [edi+4] +
cmp esi [eax+4] +
jnz loc_100A026  +
jmp loc_100A033  +
***
mov [eax] ebx +
jmp loc_100B6C0  +
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jnz loc_1015E41  +
mov ecx [edx+8] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_1015E0F  +
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+14h] eax +
mov [ecx+14h] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
jmp loc_1015E76  +
cmp esi [eax+8] +
jnz loc_1015E1E  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101B423  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101B050  +
jmp loc_1015E76  +
cmp dword ptr [ecx+14h] 0 +
jz loc_1015DF1  +
cmp esi [eax] +
jnz loc_1015E55  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101B050  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101B423  +
mov eax [edi+4] +
cmp esi [eax+4] +
jz loc_100B6CA  +
jmp loc_100B6E3  +
***
mov esi [esi] +
jmp loc_100BE27  +
lea ecx [ebp+var_4] +
call sub_101B134  +
mov ecx [ebp+var_4] +
jmp loc_100BE3A  +
***
call sub_10025EC  +
mov ecx esi +
call sub_10086AA  +
jmp loc_1002BBB  +
***
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_100AAA7  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101B7DF  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1015EB0  +
pop edi  +
jmp loc_100DD4F  +
***
mov esi [esi] +
jmp loc_100BF01  +
lea ecx [ebp+var_4] +
call sub_101B0C2  +
mov ecx [ebp+var_4] +
jmp loc_100BE74  +
***
test eax eax +
jz loc_1015EF5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_100DF1A  +
***
mov ebx 8007000Eh +
jmp loc_100DC73  +
***
mov esi 8000FFFFh +
jmp loc_100A9B9  +
inc edi  +
inc edi  +
jmp loc_100A49F  +
mov esi 8007000Eh +
jmp loc_100A9B9  +
cmp cx 3 +
jz loc_100A571  +
jmp loc_100A405  +
mov ecx [ebp-420h] +
fldz   +
mov eax esi +
shl eax 4 +
add eax ecx +
fstp  dword ptr [eax+0Ch] +
mov dword ptr [eax] 80000000h +
mov dword ptr [eax+4] 7FFFFFFFh +
mov [eax+8] edi +
push off_1027890  +
lea ecx [ebp-43Ch] +
push dword ptr [ebp-434h]  +
inc esi  +
call sub_100A9F5  +
fldz   +
mov eax [ebp-420h] +
shl esi 4 +
add eax esi +
fstp  dword ptr [eax+0Ch] +
mov dword ptr [eax] 80000000h +
mov dword ptr [eax+4] 7FFFFFFFh +
mov [eax+8] edi +
push off_1027894  +
lea ecx [ebp-43Ch] +
push dword ptr [ebp-434h]  +
call sub_100A9F5  +
jmp loc_100A7E4  +
xor eax eax +
jmp loc_100A813  +
xor esi esi +
jmp loc_100A84D  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebx+0BCh] edi +
mov [ebx+0C0h] edi +
jmp loc_100A8B6  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebx+0C4h] edi +
mov [ebx+0C8h] edi +
jmp loc_100A8C4  +
mov eax [ebx+0D0h] +
cmp eax edi +
jz loc_1015FF8  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebx+0DCh] +
cmp eax edi +
jz loc_1016009  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebx+0E0h] +
cmp eax edi +
jz loc_101601A  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
push 8  +
xor eax eax +
pop ecx  +
lea edi [ebx+0CCh] +
stos   +
mov eax [ebx+0C0h] +
test eax eax +
jz loc_1016038  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebx+0C8h] +
test eax eax +
jz loc_1016049  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor eax eax +
lea edi [ebx+0B8h] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov dword ptr [ebp-428h] 8007000Eh +
jmp loc_100A9B3  +
***
lea ecx [esi-8] +
test ecx ecx +
jz loc_1011171  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1011171  +
***
mov ecx [ebp-14h] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-14h] 0 +
mov [eax] ecx +
jmp loc_100E0C7  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor esi esi +
jmp loc_100E0BB  +
***
test eax eax +
jl loc_100E012  +
xor eax eax +
jmp loc_100E012  +
***
push dword ptr [edi+1Ch]  +
xor eax eax +
mov ax [edi+24h] +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [edi+eax*4+6Ch]  +
call sub_101B2A7  +
jmp loc_1014257  +
***
dec eax  +
jz loc_10160EE  +
dec eax  +
jnz loc_1014609  +
push 1  +
push 2Fh  +
jmp loc_1014A2E  +
mov ecx [ebp+arg_0] +
push 1  +
push 2Ch  +
call sub_101131F  +
mov ecx [ebp+arg_0] +
push 45h  +
push 17h  +
call sub_101131F  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1011830  +
mov ecx [ebp+arg_0] +
push ebx  +
mov [ebp+mi.rcWork.bottom] eax +
call sub_1011830  +
mov ecx [ebp+mi.rcWork.bottom] +
mov ecx [ecx] +
or ecx ebx +
jmp loc_101614D  +
***
mov ecx [ebp+arg_0] +
push 45h  +
push 17h  +
call sub_101131F  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1011830  +
mov ecx [ebp+arg_0] +
push ebx  +
mov dword ptr [ebp+PerformanceCount+4] eax +
call sub_1011830  +
mov ecx dword ptr [ebp+PerformanceCount+4] +
mov ecx [ecx] +
or ecx 2 +
mov [eax] ecx +
mov dword ptr [esi+890h] 45h +
jmp loc_1014609  +
mov ecx [ebp+arg_0] +
push 1  +
push 21h  +
call sub_101131F  +
mov dword ptr [ebp+DueTime+4] 1 +
jmp loc_1014609  +
lea eax [ebp+arg_4] +
push eax  +
push ebx  +
push ecx  +
mov ecx esi +
call sub_101C6B5  +
test eax eax +
jge loc_101432A  +
mov eax 80004005h +
jmp loc_1014400  +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov ecx [ebp+arg_0] +
push 3Ch  +
call sub_1011830  +
mov ecx dword ptr [ebp+PerformanceCount] +
mov [eax] ecx +
mov ecx [ebp+arg_0] +
push 3Dh  +
call sub_1011830  +
mov ecx dword ptr [ebp+PerformanceCount+4] +
mov [eax] ecx +
jmp loc_1014345  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
mov [eax] ecx +
cmp ecx ebx +
mov ecx esi +
jz loc_1016213  +
push 2C3h  +
call sub_10081A3  +
cmp [esi+868h] ebx +
jnz loc_10143FE  +
mov esi [esi+86Ch] +
cmp esi ebx +
jz loc_10143FE  +
or dword ptr [ebp+DueTime+4] 0FFFFFFFFh +
push ebx  +
push ebx  +
push ebx  +
push 32h  +
lea eax [ebp+DueTime] +
push eax  +
push esi  +
mov dword ptr [ebp+DueTime] 0FF676980h +
call ds:SetWaitableTimer  +
jmp loc_10143FE  +
push 2C4h  +
call sub_10081A3  +
push dword ptr [esi+86Ch]  +
call ds:CancelWaitableTimer  +
mov dword ptr [esi+890h] 20h +
jmp loc_10143FE  +
***
mov [ebp-20h] eax +
mov dword ptr [ebp-14h] 4 +
jmp loc_1001EE0  +
***
inc dword ptr [esi+39Ch]  +
jmp loc_1001F45  +
***
mov dword ptr [ebp-8] 1 +
jmp loc_101625E  +
mov [ebp-8] ecx +
mov eax [ebp+8] +
push dword ptr [eax+8]  +
call ds:CancelIo  +
jmp loc_10162C4  +
cmp eax 3 +
jnz loc_101625E  +
cmp [esi+39Ch] ebx +
jnz loc_10162A4  +
push ebx  +
push ebx  +
push ebx  +
push 2C4h  +
mov ecx esi +
call sub_10081A3  +
push dword ptr [esi+86Ch]  +
mov [esi+464h] ebx +
call ds:CancelWaitableTimer  +
mov dword ptr [esi+890h] 20h +
mov [esi+39Ch] ebx +
jmp loc_1001F0B  +
***
push 0FFFFFFFFh  +
push dword ptr [esi+450h]  +
call ds:WaitForSingleObject  +
mov dword ptr [ebp-8] 1 +
call sub_1002CAC  +
mov eax [esi+234h] +
mov [ebp-10h] eax +
call sub_1002CC8  +
jmp loc_1001EE0  +
***
push dword_102D238[edi]  +
mov esi ds:CloseHandle +
call esi  +
push dword_102D240[edi]  +
call esi  +
call sub_1002CAC  +
mov dword_102D230[edi] ebx +
mov dword_102D240[edi] ebx +
mov dword_102D238[edi] ebx +
call sub_1002CC8  +
call ds:CoUninitialize  +
push dword_102D244[edi]  +
call ds:SetEvent  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov eax 80004005h +
jmp loc_1008EE6  +
***
push dword ptr [ebx+44Ch]  +
call ??3@YAXPAX@Z  +
and dword ptr [ebx+44Ch] 0 +
pop ecx  +
mov eax 8007000Eh +
jmp loc_100B3DC  +
add edx 4 +
jmp loc_100B10E  +
push 3Ch  +
mov ecx edi +
call sub_100C72F  +
test eax eax +
jl loc_10163D1  +
push 3Dh  +
mov ecx edi +
call sub_100C72F  +
test eax eax +
jl loc_10163D1  +
jmp loc_100B17B  +
push esi  +
push esi  +
push esi  +
call ds:CreateWaitableTimerW  +
cmp eax esi +
mov [ebx+86Ch] eax +
jz loc_100B1A2  +
or dword ptr [ebp-0FCh] 0FFFFFFFFh +
push esi  +
push esi  +
push esi  +
push 32h  +
lea ecx [ebp-100h] +
push ecx  +
push eax  +
mov dword ptr [ebp-100h] 0FF676980h +
call ds:SetWaitableTimer  +
test eax eax +
jnz loc_100B1A2  +
push dword ptr [ebx+86Ch]  +
call ds:CloseHandle  +
mov [ebx+86Ch] esi +
jmp loc_100B1A2  +
mov eax 80004005h +
jmp loc_100B3DC  +
mov dword ptr [ebp-0FCh] 1 +
jmp loc_100B39D  +
or byte ptr [ebx+19Bh] 20h +
lea eax [ebp-0F8h] +
push eax  +
push offset SubKey  +
push 80000002h  +
mov dword ptr [ebx+1A8h] 2 +
call ds:RegOpenKeyW  +
test eax eax +
jnz loc_100B3DA  +
xor ebx ebx +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
push edi  +
push offset aLcdsizex  +
push dword ptr [ebp-0F8h]  +
call sub_1007995  +
mov edi eax +
cmp edi ebx +
jge loc_101644A  +
push dword ptr [ebp-0F8h]  +
call ds:RegCloseKey  +
mov eax edi +
jmp loc_100B3DC  +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
push esi  +
push offset aLcdsizey  +
push dword ptr [ebp-0F8h]  +
call sub_1007995  +
push dword ptr [ebp-0F8h]  +
mov esi eax +
call ds:RegCloseKey  +
cmp esi ebx +
jge loc_100B3DA  +
mov eax esi +
jmp loc_100B3DC  +
***
push dword ptr [esi+78h]  +
call ds:DeleteDC  +
and dword ptr [esi+78h] 0 +
jmp loc_1008307  +
***
mov eax 80004003h +
jmp loc_10033A3  +
***
mov eax 56000000h +
jmp loc_1008F5E  +
***
push 0Eh  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100E6BC  +
mov [ebp+hMenu] esi +
jmp loc_100E683  +
***
mov [esi+4] edx +
jmp loc_1008F86  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_10164F5  +
mov [ecx] eax +
jmp loc_1008F9C  +
mov [ecx+8] eax +
jmp loc_1008F9C  +
***
mov [esi+4] edx +
jmp loc_10107F5  +
mov [ecx] eax +
jmp loc_1010816  +
***
mov [esi+4] edx +
jmp loc_1008FC9  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_1016522  +
mov [ecx] eax +
jmp loc_1008FDF  +
mov [ecx+8] eax +
jmp loc_1008FDF  +
***
mov [eax] ebx +
jmp loc_100BC08  +
mov ecx [edx+8] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_101655B  +
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+14h] eax +
mov [ecx+14h] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
jmp loc_100BB9C  +
cmp esi [eax+8] +
jnz loc_101656A  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_1008FAA  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101D14D  +
jmp loc_100BB9C  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101D14D  +
jmp loc_100BB7B  +
***
mov eax 80004003h +
jmp loc_10033F0  +
***
mov [eax] ebx +
jmp loc_100BCFE  +
mov ecx [edx+8] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_10165DA  +
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+14h] eax +
mov [ecx+14h] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
jmp loc_100BC92  +
cmp esi [eax+8] +
jnz loc_10165E9  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_1008F67  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101D06A  +
jmp loc_100BC92  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101D06A  +
jmp loc_100BC71  +
***
mov esi [esi] +
jmp loc_100BF50  +
lea ecx [ebp+var_4] +
call sub_101D25E  +
mov ecx [ebp+var_4] +
jmp loc_100BF63  +
***
mov eax 80004003h +
jmp loc_10044A3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10044B3  +
***
mov eax 80004003h +
jmp loc_100454D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_100454A  +
***
mov eax 80004003h +
jmp loc_1007F37  +
***
mov esi [esi] +
jmp loc_100BFE6  +
lea ecx [ebp+var_4] +
call sub_101D1BF  +
mov ecx [ebp+var_4] +
jmp loc_100BFF9  +
***
push ecx  +
call sub_10085A2  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
jmp loc_1003FE4  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_10166B5  +
mov [esi+4] eax +
jmp loc_10166CC  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_10166DC  +
mov [ecx+4] eax +
jmp loc_10166EA  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_10166E7  +
mov [ecx] eax +
jmp loc_10166EA  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_1004048  +
mov [ecx+4] esi +
jmp loc_100401B  +
mov [ecx] esi +
jmp loc_100401B  +
mov ebx [ebx] +
cmp ebx dword_1027088 +
jnz loc_1016729  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_1004029  +
push esi  +
call sub_10085A2  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
jmp loc_1004029  +
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jnz loc_1016762  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_10107D6  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_1016775  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_101090E  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_1016794  +
mov ecx [eax] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101D0BA  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_10107D6  +
jmp loc_10108AD  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D0BA  +
mov eax [esi+4] +
mov eax [eax] +
jmp loc_10108FF  +
mov ecx [eax+8] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_10107D6  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D0BA  +
jmp loc_10108AD  +
***
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_1007EDF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1007EDF  +
***
mov eax 80004003h +
jmp loc_100669F  +
***
mov eax [esi] +
mov ecx [eax] +
jmp loc_10066E1  +
***
push dword ptr [ebp+0Ch]  +
call ds:CoTaskMemFree  +
jmp loc_100669D  +
***
push edi  +
push ebx  +
call sub_10043F1  +
cmp eax edi +
jge loc_100669D  +
mov eax 80040212h +
jmp loc_100669F  +
***
add eax 4 +
jmp loc_100860B  +
***
test eax eax +
jz loc_10168AB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_100E7F7  +
***
mov eax 80004003h +
jmp loc_1002A0C  +
***
mov eax 80004003h +
jmp loc_10029BC  +
***
mov eax 80004003h +
jmp loc_1006ABF  +
***
mov eax 80004003h +
jmp loc_1010F75  +
***
mov eax 80004003h +
jmp loc_1010FA5  +
***
mov eax 80004003h +
jmp loc_1004AE5  +
***
mov esi [esi] +
jmp loc_100568D  +
lea ecx [ebp+var_4] +
call sub_101ED52  +
mov ecx [ebp+var_4] +
jmp loc_10056A8  +
***
mov [eax] ebx +
jmp loc_1005744  +
mov ecx [edx+8] +
cmp dword ptr [ecx+14h] 0 +
jz loc_1010779  +
cmp esi [eax+8] +
jnz loc_1016940  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_10107D6  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_101D0BA  +
jmp loc_1010795  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_101D0BA  +
jmp loc_10107AE  +
***
lea ecx [esi-8] +
test ecx ecx +
jz loc_1003131  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1003131  +
***
lea ecx [esi-8] +
test ecx ecx +
jz loc_1003177  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1003177  +
***
mov ecx [ebp-14h] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-14h] 0 +
mov [eax] ecx +
jmp loc_100EB14  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor esi esi +
jmp loc_100EB08  +
***
mov ecx [ebp-14h] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-14h] 0 +
mov [eax] ecx +
jmp loc_100EC5F  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor esi esi +
jmp loc_100EC53  +
***
test eax eax +
jl loc_100EA4A  +
xor eax eax +
jmp loc_100EA4A  +
***
call sub_100B462  +
mov [ebp+arg_4] eax +
jmp loc_100EB7E  +
***
mov eax 8007000Eh +
jmp loc_100F17F  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
mov eax [esi+4] +
cmp eax ebx +
pop ecx  +
mov [esi] ebx +
jz loc_1016A48  +
push eax  +
call ds:RegCloseKey  +
mov [esi+4] ebx +
push dword ptr [esi+8]  +
mov ecx offset unk_1027098 +
call sub_10204FF  +
push dword ptr [esi+1Ch]  +
call HidD_FreePreparsedData  +
jmp loc_100F14E  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
cmp edi ebx +
pop ecx  +
mov [esi] ebx +
jz loc_100F14E  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax]  +
jmp loc_100F14E  +
mov edi [ebp-14h] +
mov [ebp-10h] eax +
xor eax eax +
mov ecx 8Ch +
stos   +
push dword_1027780  +
lea eax [ebp-10h] +
push dword_1027784  +
push eax  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
jmp loc_100F0B7  +
mov ebx 80004005h +
jmp loc_100F172  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax [ebp-14h] +
jmp loc_100E73F  +
***
cmp ecx 8004h +
ja loc_10068E9  +
jmp loc_10068F1  +
push dword ptr [eax+0Ch]  +
mov ecx esi +
call sub_101D4C3  +
jmp loc_10068E9  +
mov ecx dword_102704C +
lea eax [ecx-20h] +
neg ecx  +
sbb ecx ecx +
and ecx eax +
call sub_101CFEC  +
test eax eax +
jz loc_1016B18  +
push 1000h  +
call ds:GetSystemMetrics  +
test eax eax +
jnz loc_1016B18  +
mov ecx esi +
call sub_101F421  +
jmp loc_10068E9  +
mov ecx esi +
call sub_101D00A  +
jmp loc_10068E9  +
***
add [ecx] al +
retn   +
***
mov eax 8007000Eh +
pop esi  +
retn   +
***
push [ebp+phkResult]  +
call ebx  +
inc [ebp+var_110]  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+var_110]  +
push [ebp+hKey]  +
call esi  +
jmp loc_100ED43  +
push [ebp+hKey]  +
call ebx  +
jmp loc_100EDFF  +
***
mov ecx [ebp-10h] +
push ebx  +
push 2Ch  +
call sub_101131F  +
mov ecx [ebp-10h] +
push 3  +
call sub_1011830  +
mov esi [eax] +
mov ecx [ebp-10h] +
push 3  +
or esi 9 +
call sub_1011830  +
push ebx  +
mov [eax] esi +
push 2Eh  +
jmp loc_1013F1B  +
***
or eax 2 +
jmp loc_1013E00  +
***
push esi  +
push 205h  +
call sub_101FA34  +
jmp loc_1010DDA  +
push esi  +
push 204h  +
call sub_101FA0F  +
jmp loc_1010DDA  +
***
mov [eax] ebx +
jmp loc_10058BC  +
mov ecx [edx+8] +
cmp dword ptr [ecx+14h] 0 +
jz loc_10063E6  +
cmp esi [eax+8] +
jnz loc_1016BE5  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_1006459  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10190F0  +
jmp loc_1006402  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_10190F0  +
jmp loc_1006431  +
***
lea eax [ebp-1Ch] +
push eax  +
call ds:DispatchMessageW  +
jmp loc_100F2CA  +
***
test eax eax +
jnz loc_1016C1A  +
mov ebx [ebp+8] +
cmp ebx edi +
jz loc_1016C4A  +
mov ecx ebx +
call sub_101F998  +
mov [ebx+44Ch] edi +
add ebx 70h +
push ebx  +
call sub_1003B00  +
call ds:CoUninitialize  +
call sub_1002CAC  +
mov dword_102D230[esi] edi +
call sub_1002CC8  +
pop ebx  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov esi [esi] +
jmp loc_1005805  +
lea ecx [ebp+var_4] +
call sub_101F9CF  +
mov ecx [ebp+var_4] +
jmp loc_1005820  +
***
mov ebx 8007000Eh +
jmp loc_100F463  +
***
xor eax eax +
jmp loc_100C598  +
mov esi 8007000Eh +
jmp loc_100C711  +
xor edi edi +
jmp loc_100C5C9  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebx+0BCh] esi +
mov [ebx+0C0h] esi +
jmp loc_100C632  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebx+0C4h] esi +
mov [ebx+0C8h] esi +
jmp loc_100C640  +
***
lea ecx [esi-8] +
test ecx ecx +
jz loc_1006D7B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1006D7B  +
***
mov ecx [ebp-14h] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-14h] 0 +
mov [eax] ecx +
jmp loc_100F5DE  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor esi esi +
jmp loc_100F5D2  +
***
cmp eax ebx +
jz loc_1016D28  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax edi +
jmp loc_100CC26  +
***
lea ecx [esi-8] +
test ecx ecx +
jz loc_1011277  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1011277  +
***
mov ecx [ebp-14h] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-14h] 0 +
mov [eax] ecx +
jmp loc_100AC83  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor esi esi +
jmp loc_100AC77  +
***
call sub_100AD00  +
mov [ebp+arg_4] eax +
jmp loc_100ABB7  +
***
mov eax 80004005h +
jmp loc_100CA75  +
***
mov eax 80070057h +
jmp loc_100A262  +
dec edx  +
dec edx  +
mov eax 8007007Ah +
jmp loc_100A25E  +
***
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
jmp loc_1009047  +
push eax  +
call edi  +
pop ecx  +
mov [esi+4] ebx +
jmp loc_1009058  +
push eax  +
call edi  +
pop ecx  +
mov [esi+8] ebx +
jmp loc_1009063  +
push eax  +
call edi  +
pop ecx  +
mov [esi+0Ch] ebx +
jmp loc_100906E  +
push eax  +
call edi  +
pop ecx  +
mov [esi+10h] ebx +
jmp loc_1009079  +
mov eax 8007000Eh +
jmp loc_100909E  +
call ds:GetLastError  +
push eax  +
call sub_100FBBD  +
push dword ptr [esi]  +
mov edi eax +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
mov eax edi +
jmp loc_100909E  +
***
call ds:GetLastError  +
push eax  +
call sub_100FBBD  +
jmp loc_1009138  +
push eax  +
call edi  +
pop ecx  +
mov [esi+4] ebx +
jmp loc_10090D8  +
mov eax 80070057h +
jmp loc_1009137  +
mov eax 8007000Eh +
jmp loc_1009137  +
call ds:GetLastError  +
push eax  +
call sub_100FBBD  +
push dword ptr [esi+4]  +
mov ebx eax +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
mov eax ebx +
jmp loc_1009137  +
***
call ds:GetLastError  +
push eax  +
call sub_100FBBD  +
jmp loc_1010488  +
push eax  +
call edi  +
pop ecx  +
mov [esi+8] ebx +
jmp loc_1010428  +
mov eax 80070057h +
jmp loc_1010487  +
mov eax 8007000Eh +
jmp loc_1010487  +
call ds:GetLastError  +
push eax  +
call sub_100FBBD  +
push dword ptr [esi+8]  +
mov ebx eax +
call edi  +
and dword ptr [esi+8] 0 +
pop ecx  +
mov eax ebx +
jmp loc_1010487  +
***
mov esi 8007000Eh +
jmp loc_1016F0A  +
call edi  +
push eax  +
call sub_100FBBD  +
mov esi eax +
jmp loc_1016F0A  +
call edi  +
push eax  +
call sub_100FBBD  +
push [ebp+var_10]  +
jmp loc_1016F01  +
push eax  +
call sub_100FBBD  +
mov esi eax +
jmp loc_1016F2A  +
call edi  +
push eax  +
call sub_100FBBD  +
mov esi eax +
jmp loc_1016F1A  +
mov esi 8007000Eh +
jmp loc_1016F1A  +
call edi  +
push eax  +
call sub_100FBBD  +
push ebx  +
mov esi eax +
call ds:__imp_free  +
pop ecx  +
cmp [ebp+var_8] 0 +
jz loc_1016F1A  +
push [ebp+var_8]  +
call ds:__imp_free  +
pop ecx  +
cmp [ebp+var_C] 0 +
jz loc_1016F2A  +
push [ebp+var_C]  +
call ds:__imp_free  +
pop ecx  +
mov eax esi +
jmp loc_100FB5D  +
***
push eax  +
push eax  +
push 12h  +
push dword ptr [esi+6E4h]  +
call ds:PostThreadMessageW  +
jmp loc_1001CFE  +
***
mov eax 80004005h +
jmp loc_1007CD1  +
***
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
call ds:GetLastError  +
push eax  +
call sub_100FBBD  +
jmp loc_100FA00  +
***
push esi  +
push edi  +
push [ebp+TokenHandle]  +
call sub_100FA0B  +
push [ebp+TokenHandle]  +
mov esi eax +
call ds:CloseHandle  +
mov eax esi +
jmp loc_100FBB2  +
***
mov eax edi +
jmp loc_100798A  +
mov dword ptr [esi+0CCh] 64h +
mov dword ptr [esi+0A4h] 32h +
jmp loc_1007826  +
lea eax [esi+0D0h] +
mov ecx [eax] +
mov edx 258h +
cmp ecx edx +
ja loc_1016FC8  +
mov ebx 12Ch +
cmp ecx ebx +
jnb loc_1016FC4  +
mov ecx ebx +
jmp loc_1016FCA  +
cmp ecx edx +
jbe loc_1016FCA  +
mov ecx edx +
mov [eax] ecx +
lea eax [esi+0A8h] +
mov ecx [eax] +
lea ecx [ecx+ecx*4] +
mov [eax] ecx +
lea eax [esi+0ACh] +
mov ecx [eax] +
lea ecx [ecx+ecx*4] +
mov [eax] ecx +
jmp loc_100786B  +
mov [esi] ebx +
jmp loc_1007978  +
***
sub eax edi +
jz loc_1017083  +
dec eax  +
jz loc_10170CD  +
sub eax 101h +
jnz loc_100C115  +
mov ecx ebx +
call sub_101CFEC  +
mov ecx ebx +
call sub_101CFEC  +
test eax eax +
jz loc_100C115  +
push 2000h  +
call ds:GetSystemMetrics  +
test eax eax +
jnz loc_100C115  +
push 100h  +
push offset unk_102D8C0  +
mov ecx offset unk_1027098 +
call sub_100C1A0  +
push offset unk_102D8C0  +
push offset unk_102D5B0  +
call ds:_wcsicmp  +
test eax eax +
pop ecx  +
pop ecx  +
jz loc_100C115  +
push offset unk_102D8C0  +
push 100h  +
push offset unk_102D5B0  +
call sub_100A228  +
jmp loc_10170A4  +
call sub_101F721  +
jmp loc_100C115  +
***
mov ecx ebx +
call sub_101CFEC  +
mov ecx ebx +
call sub_101CFEC  +
test eax eax +
jz loc_100C115  +
push 2000h  +
call ds:GetSystemMetrics  +
test eax eax +
jnz loc_100C115  +
mov ecx offset unk_1027098 +
call sub_100C134  +
mov ecx ebx +
call sub_101CEFD  +
test eax eax +
mov ecx ebx +
jz loc_1017079  +
call sub_101D2CE  +
jmp loc_100C115  +
***
push dword_102D240[esi]  +
call ds:CloseHandle  +
push dword_102D23C[esi]  +
call ds:CloseHandle  +
push dword ptr [ebx+84h]  +
call ds:CloseHandle  +
call sub_1002CAC  +
mov dword_102D230[esi] edi +
mov dword_102D240[esi] edi +
mov dword_102D23C[esi] edi +
call sub_1002CC8  +
call ds:CoUninitialize  +
push dword_102D244[esi]  +
call ds:SetEvent  +
pop ebx  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
push dword ptr [esi+4]  +
and dword ptr [esi] 0 +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop ecx  +
jmp loc_10103E9  +
***
push edi  +
push esi  +
mov ecx ebx +
call sub_1007442  +
cmp eax edi +
jl loc_100673B  +
push 80000001h  +
mov ecx ebx +
call sub_101FD99  +
jmp loc_100673B  +
mov esi offset dword_102D244 +
mov dword ptr [ebp-10h] 20h +
mov eax [esi-4] +
cmp eax edi +
jz loc_1017192  +
cmp [esi] edi +
jz loc_1017192  +
push eax  +
call ds:SetEvent  +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call ds:WaitForSingleObject  +
push esi  +
call sub_1003B00  +
add esi 1Ch +
dec dword ptr [ebp-10h]  +
jnz loc_1017170  +
push offset dword_102D228  +
call sub_1003B00  +
add ebx 224h +
mov dword ptr [ebp-10h] 2 +
lea esi [ebx-58h] +
call sub_1007DE5  +
mov esi ebx +
call sub_1007DE5  +
lea esi [ebx+58h] +
call sub_1007DE5  +
add ebx 2Ch +
dec dword ptr [ebp-10h]  +
jnz loc_10171B1  +
call sub_1002CAC  +
mov dword_102D230 edi +
call sub_1002CC8  +
call sub_101FD88  +
mov esi offset unk_1027098 +
push esi  +
call ds:AtlModuleRevokeClassObjects  +
mov ecx esi +
call sub_10204DA  +
mov ecx esi +
call sub_1009364  +
call ds:CoUninitialize  +
lea ecx [ebp-28h] +
call sub_101FD3B  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn   +
***
push offset dword_1024760  +
lea eax [ebp+arg_0] +
push eax  +
mov [ebp+arg_0] 8007000Eh +
call _CxxThrowException  +
mov eax 80004003h +
jmp loc_1005B90  +
***
mov eax 8007000Eh +
jmp loc_1005B8F  +
mov eax [ebp+pv] +
mov eax [eax+4] +
test eax eax +
mov esi ds:CoTaskMemFree +
mov [ebp+var_8] 8007000Eh +
jz loc_101725F  +
push eax  +
call esi  +
mov eax [ebp+pv] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_101726C  +
push eax  +
call esi  +
mov eax [ebp+pv] +
mov eax [eax+10h] +
test eax eax +
jz loc_1017279  +
push eax  +
call esi  +
mov eax [ebp+pv] +
mov eax [eax+14h] +
test eax eax +
jz loc_1017286  +
push eax  +
call esi  +
push [ebp+pv]  +
call esi  +
jmp loc_1005B8B  +
***
mov eax 80004003h +
jmp loc_10061F8  +
mov eax 8007000Eh +
jmp loc_10061F7  +
mov eax [ebx+8] +
test eax eax +
mov esi ds:CoTaskMemFree +
mov [ebp+var_4] 8007000Eh +
jz loc_10172BB  +
push eax  +
call esi  +
mov eax [ebx+10h] +
test eax eax +
jz loc_10172C5  +
push eax  +
call esi  +
push ebx  +
call esi  +
jmp loc_10061F3  +
***
mov eax 80004003h +
jmp locret_1004D20  +
and [edx] ebx +
fld1   +
and [edx+8] ebx +
fstp  dword ptr [edx+0Ch] +
mov dword ptr [edx+4] 7FFFFFFFh +
jmp loc_1004D2D  +
***
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebx+4] edi +
mov [ebx+8] edi +
jmp loc_1004B7C  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebx+0Ch] edi +
mov [ebx+10h] edi +
jmp loc_1004B87  +
mov eax [ebx+8] +
fld1   +
mov ecx [ebp+var_4] +
lea eax [ecx+eax+10h] +
xor ecx ecx +
fstp  dword ptr [eax+0Ch] +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
jmp loc_1004BEB  +
***
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100523C  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1005247  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1005252  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100525D  +
***
mov eax 80004003h +
jmp loc_1005A4C  +
***
mov eax 80004003h +
jmp loc_100203B  +
***
mov eax 80004003h +
jmp loc_1006608  +
***
mov eax 80004003h +
jmp loc_1006018  +
***
and [ebp+var_8] 0 +
jmp loc_1005F2A  +
and [ebp+var_8] 0 +
jmp loc_1005F8C  +
***
mov eax 3E8h +
jmp loc_1007422  +
***
mov eax dword_10272FC +
mov dword_1027304 eax +
mov eax dword_1027300 +
mov dword_1027308 eax +
mov eax dword_1027354 +
mov dword_102735C eax +
jmp loc_1014924  +
***
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
lea ecx [esi+33Ch] +
call sub_10211C3  +
jmp loc_1012BA0  +
push [ebp+var_4]  +
lea ecx [esi+358h] +
call sub_101CBE9  +
jmp loc_1012BAC  +
cmp [ebp+arg_0] 3 +
mov eax [ebp+var_4] +
mov ecx [eax+14h] +
mov [esi+3B8h] ecx +
mov ecx [eax+18h] +
mov [esi+3BCh] ecx +
mov edx [eax+14h] +
lea ecx [esi+3D4h] +
mov [ecx] edx +
mov edx [eax+18h] +
mov [esi+3D8h] edx +
mov edx [eax+14h] +
mov [esi+3DCh] edx +
mov edx [eax+18h] +
mov [esi+3E0h] edx +
jz loc_1017471  +
push dword ptr [esi+3F4h]  +
push dword ptr [esi+3F0h]  +
push ecx  +
call ds:InflateRect  +
mov eax [ebp+var_4] +
cmp [ebp+arg_0] 3 +
mov dword ptr [esi+3A8h] 1 +
mov [esi+3A4h] ebx +
jz loc_1012CA2  +
push 0Fh  +
push eax  +
mov ecx esi +
call sub_101240F  +
jmp loc_1012CA2  +
***
push [ebp+var_4]  +
lea ecx [esi+33Ch] +
call sub_102120E  +
jmp loc_101291D  +
push [ebp+var_4]  +
lea ecx [esi+358h] +
call sub_101C7E1  +
jmp loc_101292A  +
push 12h  +
push [ebp+var_4]  +
mov ecx esi +
call sub_101240F  +
jmp loc_101297D  +
***
xor ebx ebx +
jmp loc_1008756  +
***
mov [esi+130h] edi +
mov [esi+134h] edi +
push edi  +
mov edi ds:GetSystemMetrics +
call edi  +
push 1  +
mov [esi+138h] eax +
call edi  +
jmp loc_1007D37  +
***
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
add eax 4 +
jmp loc_1007FAC  +
***
mov ecx [ecx+8] +
jmp loc_10118DA  +
***
mov eax [ecx+8] +
jmp loc_101480D  +
push eax  +
call sub_101D19D  +
jmp loc_101480D  +
***
pop ecx  +
jmp loc_1010528  +
***
push eax  +
push eax  +
shl edi 2 +
sub eax edi +
push eax  +
mov ecx esi +
call sub_1006BB5  +
mov eax [esi+8] +
push eax  +
sub eax edi +
push eax  +
push ebx  +
call sub_1020C35  +
push [ebp+arg_8]  +
lea eax [edi+ebx] +
push eax  +
push ebx  +
call sub_1007FA4  +
add [esi+8] edi +
jmp loc_1006CAA  +
***
mov eax 80004003h +
jmp loc_101105D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101106D  +
***
mov eax 80004003h +
jmp loc_1011104  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_1011101  +
***
mov eax 80004003h +
jmp loc_1009291  +
***
mov eax 80004003h +
jmp loc_10036D7  +
***
mov eax 80004003h +
jmp loc_100372B  +
***
mov eax 80040242h +
jmp loc_100372B  +
***
sar dh 0FFh +
***
lea esi [ebx+14h] +
mov [ebp+var_8] esi +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
cmp eax [ebp+var_10] +
jnz loc_10176D6  +
push [ebp+arg_14]  +
mov ecx ebx +
call sub_1002B84  +
mov esi [ebp+var_8] +
lea edi [ebp+arg_4] +
movs   +
movs   +
movs   +
push 1  +
push [ebp+arg_0]  +
lea ecx [ebp+arg_4] +
movs   +
call sub_1020CE1  +
mov eax [ebp+arg_0] +
jmp loc_1010D27  +
mov esi ecx +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+arg_4] +
movs   +
call sub_100290D  +
mov ecx [ebx+2Ch] +
shr ecx 1 +
cmp eax ecx +
mov [ebp+arg_10] eax +
mov ecx ebx +
jnb loc_10177A0  +
mov esi [ebp+var_4] +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
push [ebp+var_10]  +
call sub_100271D  +
mov esi [ebp+var_4] +
push [ebp+arg_10]  +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_18] +
movs   +
call sub_100278B  +
mov esi eax +
lea edi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_4] +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_4] +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
push 1  +
lea eax [ebp+var_38] +
push eax  +
lea ecx [ebp+var_18] +
movs   +
call sub_100278B  +
mov esi eax +
push 1  +
lea eax [ebp+var_48] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_100278B  +
mov ebx eax +
push 2  +
lea eax [ebp+var_58] +
push eax  +
lea ecx [ebp+var_28] +
call sub_100278B  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
mov esi ebx +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov esi eax +
mov edi esp +
movs   +
movs   +
movs   +
lea eax [ebp+var_28] +
push eax  +
movs   +
call sub_1002BFB  +
jmp loc_101782B  +
call sub_1020D59  +
push eax  +
mov ecx ebx +
call sub_1002B84  +
mov esi [ebp+var_4] +
push [ebp+arg_10]  +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
lea eax [ebp+var_58] +
push eax  +
lea ecx [ebp+var_28] +
movs   +
call sub_100278B  +
mov ebx eax +
mov esi eax +
lea edi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_8] +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_8] +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
push 1  +
lea eax [ebp+var_48] +
push eax  +
lea ecx [ebp+var_28] +
movs   +
call sub_1020CE1  +
mov esi eax +
push 2  +
lea eax [ebp+var_38] +
push eax  +
lea ecx [ebp+var_18] +
call sub_1020CE1  +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
mov esi ebx +
movs   +
movs   +
movs   +
lea eax [ebp+var_58] +
push eax  +
movs   +
call sub_1002939  +
mov eax [ebp+arg_14] +
mov eax [eax] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
lea esi [ebp+arg_4] +
jmp loc_1010D1E  +
***
mov dword ptr [ebp-10h] 80004005h +
jmp loc_1003825  +
***
push dword ptr [ebp+8]  +
call sub_1008F3A  +
mov ecx eax +
call sub_101D29E  +
jmp loc_10081CE  +
***
lea esi [ebx+128h] +
push esi  +
lea eax [ebx+12Ch] +
push eax  +
lea edi [ebx+120h] +
push edi  +
lea eax [ebx+124h] +
push eax  +
call sub_100962E  +
cmp dword ptr [ebx+22Ch] 1 +
jnz loc_101788B  +
mov eax [edi] +
jmp loc_101788D  +
mov eax [esi] +
mov [ebx+11Ch] eax +
jmp loc_10073E3  +
cmp [ebx+230h] esi +
jnz loc_1007071  +
mov dword ptr [ebp+8] 1 +
jmp loc_10070C3  +
cmp eax esi +
jnz loc_1007077  +
xor eax eax +
inc eax  +
jmp loc_100716F  +
cmp eax esi +
jnz loc_1007189  +
lea eax [ebx+0BCh] +
cmp [eax] esi +
mov [ebp-10h] esi +
mov [ebp-14h] esi +
mov [ebp+8] esi +
jbe loc_1017925  +
mov eax [eax] +
mov [ebp-18h] eax +
mov eax [ebx+0C0h] +
mov edi dword_10277A0 +
push 4  +
pop ecx  +
mov esi eax +
xor edx edx +
cmps   +
jnz loc_10178FD  +
mov ecx [ebp+8] +
mov [ebp-10h] ecx +
mov edi dword_10277A4 +
push 4  +
pop ecx  +
mov esi eax +
xor edx edx +
cmps   +
jnz loc_1017914  +
mov ecx [ebp+8] +
mov [ebp-14h] ecx +
inc dword ptr [ebp+8]  +
mov ecx [ebp+8] +
add eax 20h +
cmp ecx [ebp-18h] +
jb loc_10178E6  +
mov esi [ebp-10h] +
lea eax [ebx+0A4h] +
push eax  +
call sub_10226ED  +
mov ecx [ebx+0C0h] +
shl esi 5 +
lea edx [esi+ecx+10h] +
mov eax [ebp-14h] +
mov esi edx +
lea edi [ebp-4Ch] +
movs   +
movs   +
movs   +
movs   +
shl eax 5 +
lea esi [eax+ecx+10h] +
mov edi edx +
movs   +
movs   +
movs   +
movs   +
mov ecx [ebx+0C0h] +
lea edi [eax+ecx+10h] +
lea esi [ebp-4Ch] +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
jmp loc_1007189  +
mov eax [ebx+120h] +
jmp loc_100719C  +
fadd  ds:dbl_1017990 +
jmp loc_1007385  +
fadd  ds:dbl_1017990 +
jmp loc_10073B6  +
***
lea eax [ebp+8] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebx+254h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+244h] +
movs   +
movs   +
movs   +
lea eax [ebp-64h] +
push eax  +
movs   +
call sub_1002758  +
mov esi eax +
lea edi [ebp-44h] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebx+254h] +
lea edi [ebp-54h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp-4Ch] +
cmp eax [ebp-3Ch] +
jnz loc_1017A1C  +
lea eax [ebp+8] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebx+2B4h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+2A4h] +
movs   +
movs   +
movs   +
lea eax [ebp-64h] +
push eax  +
mov dword ptr [ebp-10h] 2 +
movs   +
call sub_1002758  +
mov esi eax +
lea edi [ebp-44h] +
movs   +
movs   +
movs   +
movs   +
push 0  +
lea eax [ebp-64h] +
push eax  +
lea ecx [ebp-44h] +
call sub_1010D89  +
jmp loc_101231C  +
***
push dword ptr [esi+7Ch]  +
call ds:SetEvent  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
xor eax eax +
jmp loc_1013233  +
***
mov ecx [ebp-14h] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-14h] 0 +
mov [eax] ecx +
jmp loc_1005E60  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor esi esi +
jmp loc_1005E54  +
***
mov eax 80040218h +
jmp loc_1005D77  +
***
cmp [ebp+2Ch] edi +
jnz loc_1005BD0  +
mov eax 80070057h +
jmp loc_1005D77  +
***
mov eax 8004021Ah +
jmp loc_1005D77  +
***
mov eax 80004003h +
jmp loc_1005D77  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
mov byte ptr [ebp-4] 0 +
call dword ptr [eax]  +
mov eax [ebp+18h] +
jmp loc_1005D77  +
***
mov eax [ebp+8] +
test eax eax +
mov byte ptr [ebp-4] 1 +
jz loc_1017AD3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi] +
push 1  +
mov ecx esi +
mov byte ptr [ebp-4] 0 +
call dword ptr [eax]  +
mov eax edi +
jmp loc_1005D77  +
***
push 0  +
lea eax [ebp-4Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1010D89  +
jmp loc_1010C85  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005D75  +
***
add [ecx] eax +
retn   +
***
mov dword ptr [ecx] 1 +
xor eax eax +
retn   +
***
mov eax [ebp+var_10] +
mov ecx [esi+10h] +
lea eax [eax+eax*8] +
mov eax [ecx+eax*4+20h] +
cmp eax 1 +
jbe loc_1011B27  +
mov ecx [esi+14h] +
push eax  +
call sub_1020ED5  +
jmp loc_1011B27  +
***
mov eax 8007000Eh +
jmp loc_10092E9  +
***
mov eax 80004005h +
jmp loc_101355B  +
***
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80004005h +
jmp loc_1009324  +
***
push eax  +
call ds:CloseDesktop  +
and dword ptr [esi] 0 +
jmp loc_1009377  +
***
lea eax [ebp+cbData] +
push eax  +
push offset Data  +
push 0  +
push 0  +
push offset aTimestamp  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp locret_10093A5  +
***
push 0  +
push 1  +
mov ecx ebx +
call sub_102053F  +
jmp loc_100B95A  +
***
push esi  +
mov esi ds:GetSystemDirectoryW +
push 0  +
push 0  +
call esi  +
test eax eax +
mov [ebp+var_4] eax +
jz loc_1017C5E  +
push ebx  +
push edi  +
push [ebp+lpLibFileName]  +
mov edi ds:__imp_wcslen +
call edi  +
add eax [ebp+var_4] +
lea eax [eax+eax+4] +
push eax  +
call ??2@YAPAXI@Z  +
mov ebx eax +
test ebx ebx +
pop ecx  +
pop ecx  +
jz loc_1017C5C  +
push [ebp+lpLibFileName]  +
call edi  +
pop ecx  +
mov ecx [ebp+var_4] +
lea eax [eax+ecx+2] +
push eax  +
push ebx  +
call esi  +
test eax eax +
jnz loc_1017C12  +
push ebx  +
jmp loc_1017C42  +
lea esi [ebx+eax*2] +
cmp word ptr [esi-2] 5Ch +
jz loc_1017C29  +
mov word ptr [esi] 5Ch +
lea esi [ebx+eax*2+2] +
and word ptr [esi] 0 +
push [ebp+lpLibFileName]  +
push [ebp+lpLibFileName]  +
call edi  +
pop ecx  +
inc eax  +
push eax  +
push esi  +
call sub_100A210  +
cmp eax 8007007Ah +
push ebx  +
jnz loc_1017C4B  +
call ??3@YAXPAX@Z  +
xor eax eax +
jmp loc_1017C5B  +
call ds:LoadLibraryW  +
push ebx  +
mov esi eax +
call ??3@YAXPAX@Z  +
mov eax esi +
pop ecx  +
pop edi  +
pop ebx  +
pop esi  +
jmp locret_100C7A1  +
***
cmp edi ebx +
jz loc_1017C6F  +
push edi  +
call ds:CloseDesktop  +
xor eax eax +
jmp loc_100C1EB  +
***
pop ecx  +
jmp loc_1009477  +
***
mov ecx [ebp+0Ch] +
jmp loc_1002466  +
***
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+1Ch] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_101CD71  +
cmp dword ptr [ebp+1Ch] 0 +
mov [edi] eax +
jz loc_1002472  +
jmp loc_10022A9  +
***
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push eax  +
call sub_101CD99  +
jmp loc_100229D  +
***
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
jmp loc_1007E3C  +
***
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp+1Ch] esi +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx ebx +
call sub_101CDB6  +
jmp loc_100229D  +
***
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push eax  +
call sub_101F833  +
jmp loc_100229D  +
***
lea ecx [ebp+1Ch] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx ebx +
push dword ptr [ebp+10h]  +
mov [ebp+1Ch] esi +
push eax  +
call sub_101DCD4  +
jmp loc_100229D  +
***
mov edi ds:GetWindowLongW +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [ebp+14h]  +
mov [ebp+0Ch] eax +
push ebx  +
push 82h  +
push dword ptr [esi+4]  +
push dword ptr [esi+1Ch]  +
call ds:CallWindowProcW  +
mov [ebp+8] eax +
mov eax [esi+1Ch] +
cmp eax ds:DefWindowProcW +
jz loc_1017D9D  +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call edi  +
cmp eax [ebp+0Ch] +
jnz loc_1017D9D  +
push dword ptr [esi+1Ch]  +
push 0FFFFFFFCh  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
mov eax [esi+4] +
mov edx [esi] +
and dword ptr [esi+4] 0 +
push eax  +
mov ecx esi +
call dword ptr [edx+8]  +
jmp loc_10023D6  +
***
mov eax 80040110h +
jmp loc_10065D2  +
***
mov eax ecx +
jmp loc_10065D2  +
***
test esi esi +
jz loc_1006517  +
push 1  +
mov ecx esi +
call sub_1022110  +
jmp loc_1006517  +
***
mov eax 0BB40h +
jmp loc_1009561  +
***
cmp eax 20Bh +
jnz loc_100B86F  +
cmp dword ptr [ecx+84h] 0Eh +
jbe loc_100B86F  +
xor eax eax +
cmp [ecx+0F8h] edi +
jmp loc_100B752  +
push offset sub_1009595  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_100B7AD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax 0FFh +
jmp loc_1017EC5  +
add esi ebx +
mov [ebp-20h] esi +
mov ax [esi] +
cmp ax di +
jz loc_1017E47  +
cmp ax 22h +
jnz loc_1017E34  +
cmp word ptr [esi] 22h +
jnz loc_100B834  +
add esi ebx +
mov [ebp-20h] esi +
jmp loc_100B834  +
cmp ax 20h +
jbe loc_1017E51  +
jmp loc_100B840  +
movzx eax word ptr [ebp-50h] +
jmp loc_100B85A  +
mov esi eax +
mov [ebp-3Ch] esi +
cmp [ebp-1Ch] edi +
jnz loc_1017E80  +
push esi  +
call ds:exit  +
call ds:_cexit  +
jmp loc_1017EBF  +
***
pop ecx  +
pop ecx  +
retn   +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call sub_10031F5  +
retn   +
***
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_102222E  +
jmp locret_100395B  +
***
push offset dword_102D818  +
push offset dword_102D81C  +
push [ebp+arg_0]  +
call __dllonexit  +
add esp 0Ch +
pop ebp  +
retn   +
***
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_102222E  +
jmp locret_1004E8E  +
***
xor eax eax +
jmp loc_100E571  +
push offset aInterlockedpus  +
push edi  +
call esi  +
push offset aInterlockedpop  +
push edi  +
mov dword_102DAC4 eax +
call esi  +
push offset aInterlockedcom  +
push edi  +
mov dword_102DAC8 eax +
call esi  +
cmp dword_102DAC4 ebx +
mov dword_102DACC eax +
jz loc_1017FA9  +
cmp dword_102DAC8 ebx +
jz loc_1017FA9  +
cmp eax ebx +
jz loc_1017FA9  +
mov eax large fs:18h +
mov esi [eax+30h] +
add esi 34h +
mov eax [esi] +
cmp eax ebx +
jnz loc_1017F9C  +
push 8  +
push ebx  +
mov ebx ds:GetProcessHeap +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_1017FA9  +
push eax  +
push edi  +
push esi  +
mov [edi] eax +
mov [edi+4] eax +
call dword_102DACC  +
test eax eax +
jz loc_1017F9A  +
push edi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [esi] +
mov dword_102D810 eax +
xor eax eax +
inc eax  +
jmp loc_100E570  +
xor eax eax +
jmp loc_100E570  +
***
push eax  +
call dword_102DAC8  +
test eax eax +
jnz loc_101806C  +
push 40h  +
mov eax 1000h +
push eax  +
push eax  +
push 0  +
call ds:VirtualAlloc  +
mov esi eax +
test esi esi +
jz loc_100E525  +
mov eax [esi] +
push edi  +
push dword_102D810  +
call dword_102DAC8  +
mov edi eax +
test edi edi +
jz loc_101804D  +
push 8000h  +
push 0  +
push esi  +
call ds:VirtualFree  +
jmp loc_1018069  +
mov edi esi +
add esi 0FF0h +
push edi  +
push dword_102D810  +
call dword_102DAC4  +
add edi 10h +
cmp edi esi +
jb loc_1018055  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
xor eax eax +
jmp loc_101070B  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] edi +
xor eax eax +
jmp loc_101070A  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi] 0 +
cmp [ebp+arg_8] 0 +
pop ecx  +
jnz loc_10180A0  +
push dword ptr [esi+8]  +
call ds:CloseHandle  +
mov edi [edi] +
test edi edi +
jz loc_10180AC  +
push edi  +
call HidD_FreePreparsedData  +
xor eax eax +
jmp loc_1010709  +
***
call ds:GetLastError  +
cmp eax 103h +
jnz loc_100B63F  +
jmp loc_100B563  +
cmp [ebp+var_60] esi +
jz loc_100B5C0  +
push [ebp+var_60]  +
lea eax [edi+4] +
push eax  +
call ds:wcscmp  +
test eax eax +
pop ecx  +
pop ecx  +
jnz loc_100B5C0  +
mov eax [ebp+var_5C] +
jmp loc_100B5C2  +
mov [ecx] esi +
jmp loc_100B5F9  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100B63F  +
***
mov eax [ebx] +
cmp eax 28h +
jb loc_1009617  +
cmp eax 0FFFFh +
ja loc_1009617  +
mov esi [ebp+arg_C] +
mov eax [esi] +
cmp eax edi +
jz loc_101812C  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] edi +
push dword ptr [ebx]  +
call ??2@YAPAXI@Z  +
mov edx eax +
cmp edx edi +
pop ecx  +
mov [esi] edx +
jnz loc_101814F  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax 80004005h +
jmp loc_1009622  +
mov ecx [ebx] +
mov edi edx +
mov edx ecx +
shr ecx 2 +
xor eax eax +
stos   +
push ebx  +
mov ecx edx +
and ecx 3 +
stos   +
push dword ptr [esi]  +
xor edi edi +
push edi  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1009617  +
mov eax [esi] +
mov ecx [eax] +
cmp ecx [ebx] +
jnz loc_1018190  +
cmp dword ptr [eax+4] 2 +
jz loc_1009617  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] edi +
jmp loc_1009617  +
***
mov edi [ebp+lpcbData] +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push offset aPentilt  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1018230  +
mov eax [edi] +
cmp eax 28h +
jb loc_1018230  +
cmp eax 0FFFFh +
ja loc_1018230  +
mov esi [ebp+arg_4] +
mov eax [esi] +
cmp eax ebx +
jz loc_10181D7  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
push dword ptr [edi]  +
call ??2@YAPAXI@Z  +
mov edx eax +
cmp edx ebx +
pop ecx  +
mov [esi] edx +
jz loc_101828F  +
mov ecx [edi] +
mov edi edx +
mov edx ecx +
shr ecx 2 +
xor eax eax +
stos   +
mov ecx edx +
and ecx 3 +
stos   +
mov edi [ebp+lpcbData] +
push edi  +
push dword ptr [esi]  +
push ebx  +
push ebx  +
push offset aPentilt  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1018230  +
mov eax [esi] +
mov ecx [eax] +
cmp ecx [edi] +
jnz loc_1018227  +
cmp dword ptr [eax+4] 2 +
jz loc_1018230  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_1009658  +
mov edi [ebp+arg_8] +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push offset aPentilt  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10182E7  +
mov eax [edi] +
cmp eax 28h +
jb loc_10182E7  +
cmp eax 0FFFFh +
ja loc_10182E7  +
mov esi [ebp+arg_C] +
mov eax [esi] +
cmp eax ebx +
jz loc_101827F  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
push dword ptr [edi]  +
call ??2@YAPAXI@Z  +
mov edx eax +
cmp edx ebx +
pop ecx  +
mov [esi] edx +
jnz loc_10182A2  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax 80004005h +
jmp loc_1009679  +
mov ecx [edi] +
mov edi edx +
mov edx ecx +
shr ecx 2 +
xor eax eax +
stos   +
mov ecx edx +
and ecx 3 +
stos   +
mov edi [ebp+arg_8] +
push edi  +
push dword ptr [esi]  +
push ebx  +
push ebx  +
push offset aPentilt  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10182E7  +
mov eax [esi] +
mov ecx [eax] +
cmp ecx [edi] +
jnz loc_10182DE  +
cmp dword ptr [eax+4] 2 +
jz loc_10182E7  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_1009677  +
***
mov [ebx] edx +
jmp loc_1014466  +
mov [ebx] esi +
jmp loc_1014466  +
push 1  +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
add ecx 10h +
push ecx  +
call sub_10223BB  +
mov eax [ebp+arg_8] +
mov edx [ebp+var_14] +
mov [ebx] eax +
mov eax [ebp+arg_C] +
mov [ebx+4] eax +
jmp loc_1014495  +
mov eax [ebp+var_C] +
sub eax edi +
add eax [ebp+var_10] +
mov [ebx+4] esi +
mov [ebx] eax +
jmp loc_101835D  +
mov ecx [ebp+var_C] +
mov eax edx +
sub eax esi +
add eax [ebp+var_8] +
sub ecx edi +
add ecx [ebp+var_10] +
mov [ebx] eax +
mov [ebx+4] ecx +
jmp loc_1018366  +
mov eax edx +
sub eax esi +
add eax [ebp+var_8] +
mov ecx edi +
mov [ebx] ecx +
mov [ebx+4] eax +
lea eax [ebp+var_24] +
push eax  +
call sub_10226ED  +
mov eax [ebp+arg_1C] +
jmp loc_10144D1  +
cmp dword ptr [eax+58h] 2 +
jnz loc_10144E7  +
mov edx [ebp+arg_10] +
cmp edx [ebp+arg_14] +
jnb loc_1018388  +
mov eax [ebp+arg_24] +
mov ecx [ebp+arg_20] +
jmp loc_101838E  +
mov eax [ebp+arg_20] +
mov ecx [ebp+arg_24] +
mov [ebp+arg_1C] ecx +
movzx ecx ax +
cmp ecx edx +
jbe loc_10183CC  +
mov eax ecx +
sub eax edx +
cdq   +
xor eax edx +
sub eax edx +
mov edx [ebp+var_14] +
sub edx [ebp+var_8] +
lea edi [ecx+ecx] +
imul eax edx +
cdq   +
idiv  edi +
mov edx eax +
mov eax [ebp+arg_8] +
cmp eax edx +
jle loc_10183C8  +
sub eax edx +
imul eax ecx +
xor edx edx +
div  [ebp+arg_10] +
mov [ebp+arg_8] eax +
jmp loc_10183CC  +
and [ebp+arg_8] 0 +
movzx ecx word ptr [ebp+arg_1C] +
cmp ecx [ebp+arg_14] +
jbe loc_1018406  +
mov eax ecx +
sub eax [ebp+arg_14] +
lea edi [ecx+ecx] +
cdq   +
xor eax edx +
sub eax edx +
mov edx [ebp+var_C] +
sub edx [ebp+var_10] +
imul eax edx +
cdq   +
idiv  edi +
mov edx eax +
cmp esi edx +
jle loc_1018404  +
mov eax esi +
sub eax edx +
imul eax ecx +
xor edx edx +
div  [ebp+arg_14] +
mov esi eax +
jmp loc_1018406  +
xor esi esi +
mov eax [ebp+arg_8] +
mov [ebx] eax +
mov [ebx+4] esi +
jmp loc_10144E7  +
push 1  +
lea ecx [ebp+var_24] +
push ecx  +
lea ecx [ebp+arg_C] +
push ecx  +
lea ecx [ebp+arg_8] +
push ecx  +
add eax 10h +
push eax  +
call sub_10223BB  +
mov eax [ebp+arg_8] +
mov [ebx] eax +
mov eax [ebp+arg_C] +
mov [ebx+4] eax +
jmp loc_10144FF  +
***
xor esi esi +
mov si [eax] +
sub si [eax-2] +
lea ecx [ecx+esi+1] +
jmp loc_100E314  +
and [ebx+80h] eax +
jmp loc_100E373  +
mov cx [edi+38h] +
jmp loc_10184C4  +
mov [esi+4] edx +
mov bx [edi] +
mov [esi] bx +
mov [esi+18h] cx +
movzx ebx byte ptr [edi+2] +
or dword ptr [esi+14h] 0FFFFFFFFh +
cmp [esi] ax +
mov [esi+8] ebx +
mov bx [edi+8] +
mov [esi+0Eh] bx +
mov bx [edi+0Ah] +
mov [esi+10h] bx +
mov ebx [edi+20h] +
mov [esi+1Ch] ebx +
mov ebx [edi+24h] +
mov [esi+20h] ebx +
mov ebx [edi+28h] +
mov [esi+24h] ebx +
mov ebx [edi+2Ch] +
mov [esi+28h] ebx +
mov ebx [edi+30h] +
mov [esi+2Ch] ebx +
mov ebx [edi+34h] +
mov [esi+30h] ebx +
jnz loc_10184C0  +
cmp cx 30h +
jnz loc_10184B7  +
mov [ebp+var_8] eax +
cmp cx 31h +
jnz loc_10184C0  +
mov [ebp+var_C] eax +
add esi 3Ch +
inc ecx  +
cmp cx [edi+3Ah] +
jbe loc_101845D  +
jmp loc_100E401  +
***
call malloc  +
jmp loc_100A1E0  +
cmp [ebp+arg_8] 0 +
push dword ptr [edi]  +
jz loc_10184E8  +
call free  +
jmp loc_10184ED  +
call ??3@YAXPAX@Z  +
and dword ptr [edi] 0 +
pop ecx  +
jmp loc_100A1FC  +
***
retf 1BEh  +
***
jmp small near ptr byte_1018695  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102D178 +
jmp loc_1018888  +
mov eax ecx +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_1018886  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102D178 +
jmp loc_10188AA  +
mov eax ecx +
mov ecx [eax] +
cmp ecx edx +
jnz loc_10188A8  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_102D178 +
jz loc_10188D7  +
push eax  +
call sub_1018898  +
jmp loc_10188E6  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jz loc_10188D3  +
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_10188E8  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_1018922  +
push esi  +
push offset sub_1018868  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 0Ch  +
push edi  +
call sub_10038F0  +
test [ebp+arg_0] 1 +
jz loc_101891D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
jmp loc_1018938  +
mov ecx edi +
call sub_1018868  +
test [ebp+arg_0] 1 +
jz loc_1018936  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_102D178 +
jz loc_1018960  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_1018974  +
mov [ecx+4] eax +
jmp loc_1018983  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1018981  +
mov [ecx+8] eax +
jmp loc_1018983  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_102D178 +
mov ebx ecx +
mov esi edi +
jz loc_10189C6  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1018992  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_102D178 +
pop ecx  +
mov edi esi +
jnz loc_10189A9  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_10188B9  +
mov esi [edi] +
mov eax dword_102D178 +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_1018A03  +
mov esi [ebx] +
jmp loc_1018A1A  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_1018A1A  +
push ecx  +
call sub_1018898  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_1018A8A  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_1018A3C  +
mov [esi+4] eax +
jmp loc_1018A53  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_1018A63  +
mov [ecx+4] eax +
jmp loc_1018A71  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1018A6E  +
mov [ecx] eax +
jmp loc_1018A71  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_1018B03  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jnz loc_1018AA0  +
mov [ecx+4] esi +
jmp loc_1018AAE  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1018AAB  +
mov [ecx] esi +
jmp loc_1018AAE  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jnz loc_1018ADA  +
mov ebx [ebx] +
cmp ebx dword_102D178 +
jnz loc_1018AC9  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_1018ADA  +
push esi  +
call sub_1018898  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_1018B00  +
mov ecx [edi] +
cmp ecx dword_102D178 +
jnz loc_1018AF4  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
jmp loc_1018B00  +
push esi  +
call sub_1018876  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jnz loc_1018C1A  +
jmp loc_1018BCD  +
cmp [esi+14h] edi +
jnz loc_1018C17  +
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jnz loc_1018B98  +
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jnz loc_1018B49  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_100AFAD  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_1018B58  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_1018BC6  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_1018B77  +
mov ecx [eax] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_1018942  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_100AFAD  +
jmp loc_1018C17  +
cmp dword ptr [eax+14h] 0 +
jnz loc_1018BB7  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1018942  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_1018BDB  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_1018BDB  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
mov eax [ebx+4] +
cmp esi [eax+4] +
jnz loc_1018B14  +
jmp loc_1018C17  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_1018BF9  +
mov ecx [eax+8] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_100AFAD  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1018942  +
mov [esi+14h] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_1018C8D  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_1018C8D  +
cmp [ebp+arg_8] eax +
jnz loc_1018C8D  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_1018992  +
mov ecx dword_102D178 +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_1018CB2  +
cmp ecx [ebp+arg_8] +
jz loc_1018CB2  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_10188B9  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10189D2  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1018C93  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
call sub_1018C43  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp-4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D17C  +
jnz loc_1018D08  +
mov esi dword_102D178 +
and dword_102D178 0 +
lea ecx [ebp-4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_1018D1C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov eax offset byte_102271F +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jnz loc_1018D6A  +
mov eax 80004003h +
jmp loc_1018D8A  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 74h +
call sub_1005A62  +
jmp loc_1018D8A  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov eax offset byte_102274D +
call sub_10014DD  +
push ecx  +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jnz loc_1018DC3  +
mov eax 80004003h +
jmp loc_1018DEC  +
and dword ptr [ecx] 0 +
mov eax [ebp+8] +
mov eax [eax+24h] +
push ecx  +
add eax 8 +
mov edx [eax] +
push offset nullsub_2  +
push eax  +
call dword ptr [edx]  +
jmp loc_1018DEC  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jnz loc_1018E16  +
mov eax 80004003h +
jmp loc_1018E24  +
push esi  +
mov esi [ebp+8] +
add esi 50h +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov eax offset byte_10227FD +
call sub_10014DD  +
push ecx  +
mov eax [ebp+8] +
mov ecx [eax+24h] +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+4]  +
jmp loc_1018E63  +
mov eax offset loc_1018E5E +
retn   +
***
mov eax 80004005h +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov ecx edi +
call sub_1013115  +
mov edx [edi+8] +
push dword ptr [esi+4]  +
mov ecx 2C5h +
cmp edx ecx +
push eax  +
jz loc_1018EA1  +
inc ecx  +
cmp edx ecx +
jnz loc_1018EA4  +
push ecx  +
jmp loc_1018EA9  +
push 2C7h  +
push dword ptr [esi+30h]  +
call ds:PostMessageW  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
pop edi  +
add eax 80004005h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102789C +
jmp loc_1018EDD  +
mov eax ecx +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_1018EDB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102789C +
jmp loc_1018EFF  +
mov eax ecx +
mov ecx [eax] +
cmp ecx edx +
jnz loc_1018EFD  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_1018F28  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jnz loc_1018F28  +
mov eax [ecx+8] +
jmp loc_1018F45  +
mov eax [ecx] +
cmp eax dword_102789C +
jz loc_1018F3E  +
push eax  +
call sub_1018ECB  +
jmp loc_1018F45  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_1018F3A  +
mov [esi] eax +
pop esi  +
retn   +
***
mov eax ecx +
mov ecx [eax+8] +
cmp ecx [eax] +
jnz loc_1018F6E  +
add dword ptr [eax+0Ch] 0FFFFFFFCh +
mov ecx [eax+0Ch] +
mov ecx [ecx] +
mov [eax] ecx +
add ecx 1000h +
mov [eax+4] ecx +
mov [eax+8] ecx +
add dword ptr [eax+8] 0FFFFFFFCh +
retn   +
***
mov eax offset byte_1022881 +
call sub_10014DD  +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov ecx [edi+24h] +
mov eax [ecx] +
xor esi esi +
mov [ebp-10h] esp +
mov [ebp-14h] esi +
call dword ptr [eax+10h]  +
lea ebx [edi-8] +
and dword ptr [ebx+78h] 0FFFFFFFEh +
mov [ebx+68h] esi +
mov [ebx+6Ch] esi +
mov [ebx+70h] esi +
mov [ebx+74h] esi +
mov eax [edi+24h] +
lea edx [ebp-24h] +
add eax 8 +
mov ecx [eax] +
push edx  +
push eax  +
mov [ebp-4] esi +
call dword ptr [ecx+18h]  +
cmp [ebp+0Ch] esi +
mov esi [ebp+0Ch] +
jnz loc_1018FCC  +
lea esi [ebp-24h] +
lea eax [edi+30h] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+8] +
mov ecx [esi+24h] +
add ecx 130h +
push ecx  +
lea ecx [ebp-24h] +
push ecx  +
lea ecx [esi+50h] +
push ecx  +
push eax  +
mov ecx ebx +
call sub_1002065  +
mov ecx ebx +
call sub_1002045  +
jmp loc_1019010  +
mov dword ptr [ebp-14h] 80004005h +
mov eax offset loc_101900D +
retn   +
***
mov esi [ebp+8] +
mov ecx [esi+24h] +
mov eax [ecx] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call dword ptr [eax+14h]  +
mov ecx [ebp-0Ch] +
mov eax [ebp-14h] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov ecx edi +
call sub_1013115  +
mov ecx [esi+0C8h] +
mov [ebp+arg_0] eax +
mov eax [edi] +
mov edx [eax+4] +
mov edi [edi+8] +
add eax 8 +
cmp edi 2C5h +
jnz loc_101907A  +
mov edi [ecx] +
push eax  +
push dword ptr [esi+0A0h]  +
push [ebp+arg_0]  +
push edx  +
push dword ptr [esi+4]  +
push ecx  +
call dword ptr [edi+20h]  +
jmp loc_10190AD  +
cmp edi 2C6h +
mov edi [ecx] +
jnz loc_1019098  +
push eax  +
push dword ptr [esi+0A0h]  +
push [ebp+arg_0]  +
push edx  +
push dword ptr [esi+4]  +
push ecx  +
call dword ptr [edi+24h]  +
jmp loc_10190AD  +
push edx  +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
push dword ptr [esi+0A0h]  +
push 1  +
push dword ptr [esi+4]  +
push ecx  +
call dword ptr [edi+28h]  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_102789C +
jz loc_10190D8  +
push eax  +
call sub_1018EED  +
jmp loc_10190E7  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jz loc_10190D4  +
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_10190E9  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_1027000 +
jz loc_101910E  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_1019122  +
mov [ecx+4] eax +
jmp loc_1019131  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101912F  +
mov [ecx+8] eax +
jmp loc_1019131  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_102789C +
cmp ecx edx +
jz loc_101916E  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jnb loc_1019165  +
mov ecx [ecx+8] +
jmp loc_1019169  +
mov eax ecx +
mov ecx [ecx] +
cmp ecx edx +
jnz loc_101915B  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_102789C +
jz loc_1019195  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_10191A9  +
mov [ecx+4] eax +
jmp loc_10191B7  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_10191B4  +
mov [ecx] eax +
jmp loc_10191B7  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_102789C +
jz loc_10191E3  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_10191F7  +
mov [ecx+4] eax +
jmp loc_1019206  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_1019204  +
mov [ecx+8] eax +
jmp loc_1019206  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_1027000 +
mov ebx ecx +
mov esi edi +
jz loc_1019249  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1019215  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_1027000 +
pop ecx  +
mov edi esi +
jnz loc_101922C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_102789C +
mov ebx ecx +
mov esi edi +
jz loc_1019289  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1019255  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_102789C +
pop ecx  +
mov edi esi +
jnz loc_101926C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx ecx +
mov eax [ebx+20h] +
push esi  +
lea ecx [eax-4] +
push edi  +
mov [ebx+20h] ecx +
push dword ptr [eax]  +
call ??3@YAXPAX@Z  +
xor esi esi +
cmp [ebx+2Ch] esi +
pop ecx  +
jnz loc_10192F5  +
mov eax [ebx+10h] +
cmp eax [ebx+20h] +
jnz loc_10192CA  +
push dword ptr [eax]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
lea edi [ebx+4] +
lea esi [ebp+var_10] +
movs   +
movs   +
push dword ptr [ebx+24h]  +
movs   +
movs   +
lea edi [ebx+14h] +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1019312  +
mov eax [ebx+20h] +
push eax  +
mov eax [eax] +
add eax 1000h +
push eax  +
lea ecx [ebp+var_10] +
call sub_1008718  +
lea edi [ebx+14h] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx ecx +
mov eax [ebx+10h] +
push esi  +
lea ecx [eax+4] +
push edi  +
mov [ebx+10h] ecx +
push dword ptr [eax]  +
call ??3@YAXPAX@Z  +
xor eax eax +
cmp [ebx+2Ch] eax +
pop ecx  +
jnz loc_1019367  +
mov [ebp-10h] eax +
mov [ebp-0Ch] eax +
mov [ebp-8] eax +
mov [ebp-4] eax +
lea edi [ebx+4] +
lea esi [ebp-10h] +
movs   +
movs   +
push dword ptr [ebx+24h]  +
movs   +
movs   +
lea edi [ebx+14h] +
lea esi [ebp-10h] +
movs   +
movs   +
movs   +
movs   +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_101937E  +
mov eax [ebx+10h] +
push eax  +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_1008718  +
lea edi [ebx+4] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_1019140  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jz loc_10193B1  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_10193B1  +
lea eax [ebp+arg_4] +
jmp loc_10193B7  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_10190BA  +
mov esi [edi] +
mov eax dword_102789C +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_10193FA  +
mov esi [ebx] +
jmp loc_1019411  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_1019411  +
push ecx  +
call sub_1018EED  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_1019481  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_1019433  +
mov [esi+4] eax +
jmp loc_101944A  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_101945A  +
mov [ecx+4] eax +
jmp loc_1019468  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1019465  +
mov [ecx] eax +
jmp loc_1019468  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_10194FA  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jnz loc_1019497  +
mov [ecx+4] esi +
jmp loc_10194A5  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_10194A2  +
mov [ecx] esi +
jmp loc_10194A5  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jnz loc_10194D1  +
mov ebx [ebx] +
cmp ebx dword_102789C +
jnz loc_10194C0  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_10194D1  +
push esi  +
call sub_1018EED  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_10194F7  +
mov ecx [edi] +
cmp ecx dword_102789C +
jnz loc_10194EB  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
jmp loc_10194F7  +
push esi  +
call sub_1018ECB  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jnz loc_1019611  +
jmp loc_10195C4  +
cmp [esi+14h] edi +
jnz loc_101960E  +
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jnz loc_101958F  +
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jnz loc_1019540  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1019177  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101954F  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_10195BD  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101956E  +
mov ecx [eax] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_10191C5  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1019177  +
jmp loc_101960E  +
cmp dword ptr [eax+14h] 0 +
jnz loc_10195AE  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_10191C5  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_10195D2  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_10195D2  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
mov eax [ebx+4] +
cmp esi [eax+4] +
jnz loc_101950B  +
jmp loc_101960E  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_10195F0  +
mov ecx [eax+8] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_1019177  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_10191C5  +
mov [esi+14h] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 0  +
push esi  +
mov edi ecx +
call sub_10034FB  +
push [ebp+arg_C]  +
mov ebx eax +
mov eax dword_102789C +
mov [ebx] eax +
mov eax dword_102789C +
mov [ebx+8] eax +
lea eax [ebx+0Ch] +
push eax  +
call sub_10034D9  +
inc dword ptr [edi+0Ch]  +
cmp esi [edi+4] +
jz loc_1019699  +
mov eax [ebp+arg_4] +
cmp eax dword_102789C +
jnz loc_1019699  +
mov eax [ebp+arg_C] +
mov eax [eax] +
cmp eax [esi+0Ch] +
jb loc_1019699  +
mov [esi+8] ebx +
mov eax [edi+4] +
cmp esi [eax+8] +
jnz loc_10196B0  +
mov [eax+8] ebx +
jmp loc_10196B0  +
mov [esi] ebx +
mov eax [edi+4] +
cmp esi eax +
jnz loc_10196AA  +
mov [eax+4] ebx +
mov eax [edi+4] +
jmp loc_1019694  +
cmp esi [eax] +
jnz loc_10196B0  +
mov [eax] ebx +
mov eax [edi+4] +
cmp ebx [eax+4] +
mov esi ebx +
jz loc_101976E  +
mov eax [esi+4] +
cmp dword ptr [eax+14h] 0 +
jnz loc_101976E  +
mov edx [eax+4] +
mov ecx [edx] +
cmp eax ecx +
jnz loc_101972D  +
mov ecx [edx+8] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_10196FB  +
mov edx [esi+4] +
xor eax eax +
inc eax  +
mov [edx+14h] eax +
mov [ecx+14h] eax +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
mov esi [eax+4] +
jmp loc_1019762  +
cmp esi [eax+8] +
jnz loc_101970A  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_1019177  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_10191C5  +
jmp loc_1019762  +
cmp dword ptr [ecx+14h] 0 +
jz loc_10196DD  +
cmp esi [eax] +
jnz loc_1019741  +
mov esi eax +
push esi  +
mov ecx edi +
call sub_10191C5  +
mov eax [esi+4] +
mov dword ptr [eax+14h] 1 +
mov eax [esi+4] +
mov eax [eax+4] +
and dword ptr [eax+14h] 0 +
mov eax [esi+4] +
push dword ptr [eax+4]  +
mov ecx edi +
call sub_1019177  +
mov eax [edi+4] +
cmp esi [eax+4] +
jnz loc_10196BE  +
mov eax [edi+4] +
mov eax [eax+4] +
mov dword ptr [eax+14h] 1 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+24h] +
mov eax [ecx] +
xor ebx ebx +
call dword ptr [eax+10h]  +
test byte ptr [esi+2Ch] 22h +
jz loc_10197AD  +
mov ebx 80004005h +
jmp loc_10197DD  +
mov ecx [esi+134h] +
push edi  +
xor edi edi +
inc edi  +
mov [esi+140h] edi +
mov eax [ecx] +
mov [ebp+8] eax +
jmp loc_10197D8  +
lea ecx [ebp+8] +
mov [eax+10h] edi +
call sub_10190BA  +
mov ecx [esi+134h] +
mov eax [ebp+8] +
cmp ecx eax +
jnz loc_10197C4  +
pop edi  +
mov ecx [esi+24h] +
mov eax [ecx] +
call dword ptr [eax+14h]  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+24h] +
mov eax [ecx] +
push edi  +
xor edi edi +
call dword ptr [eax+10h]  +
test byte ptr [esi+2Ch] 22h +
jz loc_1019813  +
mov edi 80004005h +
jmp loc_101983E  +
mov ecx [esi+134h] +
mov [esi+140h] edi +
mov eax [ecx] +
mov [ebp+8] eax +
jmp loc_101983A  +
lea ecx [ebp+8] +
mov [eax+10h] edi +
call sub_10190BA  +
mov ecx [esi+134h] +
mov eax [ebp+8] +
cmp ecx eax +
jnz loc_1019826  +
mov ecx [esi+24h] +
mov eax [ecx] +
call dword ptr [eax+14h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_101989D  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_101989D  +
cmp [ebp+arg_8] eax +
jnz loc_101989D  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_1019215  +
mov ecx dword_1027000 +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_10198C2  +
cmp ecx [ebp+arg_8] +
jz loc_10198C2  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1003F8C  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1003EB0  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_10198A3  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
mov esi [eax+4] +
mov ebx eax +
mov eax dword_102789C +
cmp esi eax +
mov dl 1 +
jz loc_101990B  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
cmp ecx [esi+0Ch] +
mov ebx esi +
setb dl  +
test dl dl +
jz loc_1019904  +
mov esi [esi] +
jmp loc_1019907  +
mov esi [esi+8] +
cmp esi eax +
jnz loc_10198F4  +
cmp byte ptr [edi+8] 0 +
jz loc_1019916  +
push [ebp+arg_4]  +
jmp loc_101993C  +
test dl dl +
mov ecx ebx +
mov [ebp+var_4] ecx +
jz loc_1019931  +
mov eax [edi+4] +
cmp ebx [eax] +
jz loc_1019911  +
lea ecx [ebp+var_4] +
call sub_1018F0E  +
mov ecx [ebp+var_4] +
mov edx [ecx+0Ch] +
mov eax [ebp+arg_4] +
cmp edx [eax] +
jnb loc_1019954  +
push eax  +
push ebx  +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
mov ecx edi +
call sub_101963A  +
mov ecx [eax] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 1 +
jmp loc_101995B  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+4] 0 +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
call sub_1019853  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp-4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D1A8  +
jnz loc_10199B0  +
mov esi dword_1027000 +
and dword_1027000 0 +
lea ecx [ebp-4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_10199C4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_10198D1  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov cl [ebp+var_4] +
mov [eax+4] cl +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003CCC  +
test byte ptr [ebp+8] 1 +
jz loc_1019A10  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+8] +
mov eax [eax] +
and dword ptr [ebp-4] 0 +
mov [ebp-8] eax +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-10h] +
push eax  +
call sub_10199CC  +
mov eax [eax] +
add eax 10h +
leave   +
retn 4  +
***
mov eax offset byte_1022A81 +
call sub_10014DD  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+24h] +
mov eax [ecx] +
push edi  +
mov [ebp-10h] esp +
xor edi edi +
call dword ptr [eax+10h]  +
test byte ptr [esi+2Ch] 22h +
mov [ebp-4] edi +
jz loc_1019A86  +
mov edi 80004005h +
jmp loc_1019ACA  +
cmp [ebp+0Ch] edi +
jbe loc_1019ABD  +
cmp dword ptr [ebp+0Ch] 80h +
jnb loc_1019ABD  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+130h] +
call near ptr byte_1019A28+1  +
mov dword ptr [eax] 1 +
jmp loc_1019ACA  +
mov dword ptr [ebp+0Ch] 80004005h +
mov eax offset loc_1019AC4 +
retn   +
***
mov edi 80070057h +
jmp loc_1019ACA  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
mov ecx [esi+24h] +
mov eax [ecx] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call dword ptr [eax+14h]  +
mov ecx [ebp-0Ch] +
mov eax edi +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov eax offset byte_1022AAD +
call sub_10014DD  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+24h] +
mov eax [ecx] +
push edi  +
mov [ebp-10h] esp +
xor edi edi +
call dword ptr [eax+10h]  +
test byte ptr [esi+2Ch] 22h +
mov [ebp-4] edi +
jz loc_1019B1C  +
mov edi 80004005h +
jmp loc_1019B5C  +
cmp [ebp+0Ch] edi +
jbe loc_1019B4F  +
cmp dword ptr [ebp+0Ch] 80h +
jnb loc_1019B4F  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+130h] +
call near ptr byte_1019A28+1  +
mov [eax] edi +
jmp loc_1019B5C  +
add [ecx] eax +
retn   +
***
mov edi 80070057h +
jmp loc_1019B5C  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
mov ecx [esi+24h] +
mov eax [ecx] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call dword ptr [eax+14h]  +
mov ecx [ebp-0Ch] +
mov eax edi +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jz loc_1019C01  +
mov ebx [ebp+lpCriticalSection] +
test ebx ebx +
jz loc_1019C01  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_1019C01  +
lea eax [esi+24h] +
push eax  +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
mov ax [esi+1Ah] +
cmp ax 0FFFFh +
jz loc_1019BE9  +
cmp word ptr [esi+1Ch] 0FFFFh +
jz loc_1019BE9  +
cmp dword ptr [esi+14h] 0 +
jz loc_1019BE9  +
mov ecx [esi+20h] +
movsx eax ax +
shl eax 5 +
mov eax [eax+ecx+0Ch] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
movsx eax word ptr [esi+1Ch] +
mov ecx [esi+20h] +
shl eax 5 +
mov eax [eax+ecx+0Ch] +
mov [ebx] eax +
mov eax [esi+14h] +
jmp loc_1019BF2  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] eax +
mov [ebx] eax +
push [ebp+lpCriticalSection]  +
mov [edi] eax +
call ds:LeaveCriticalSection  +
xor eax eax +
jmp loc_1019C06  +
mov eax 80004003h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+10h] +
test eax eax +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jz loc_1019C32  +
push dword ptr [eax]  +
mov ecx [ebp+0Ch] +
push 17h  +
call sub_101131F  +
mov eax [ebx+4] +
and dword ptr [ebp-8] 0 +
cmp dword ptr [eax+4] 0 +
jbe loc_1019CCF  +
mov dword ptr [ebp-4] 8 +
mov ecx [ebx] +
mov eax [ecx+0B4h] +
mov edx [ebp-4] +
mov eax [edx+eax] +
test eax eax +
mov [ebp-0Ch] eax +
jz loc_1019CB5  +
mov edx [ebp+8] +
mov edx [edx] +
lea esi [ecx+48h] +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+0Ch] +
mov esi eax +
mov eax [edi] +
shl esi 3 +
cmp dword ptr [esi+eax] 0 +
mov [ebp+10h] edx +
jnz loc_1019C8F  +
call sub_10123FE  +
test eax eax +
jz loc_1019C8F  +
mov eax [ebp-1Ch] +
jmp loc_1019CA5  +
mov eax [edi] +
cmp dword ptr [esi+eax] 1 +
jnz loc_1019CA8  +
mov ecx [ebx] +
call sub_10123FE  +
test eax eax +
jz loc_1019CA8  +
mov eax [ebp-18h] +
add [ebp+10h] eax +
push dword ptr [ebp+10h]  +
mov ecx edi +
push dword ptr [ebp-0Ch]  +
call sub_101412A  +
inc dword ptr [ebp-8]  +
mov eax [ebx+4] +
mov ecx [ebp-8] +
add dword ptr [ebp-4] 4 +
add dword ptr [ebp+8] 4 +
cmp ecx [eax+4] +
jb loc_1019C4A  +
mov eax [ebx+4] +
xor edi edi +
xor esi esi +
inc edi  +
cmp [eax+0Ch] esi +
jbe loc_1019D1F  +
mov eax [ebx] +
mov eax [eax+0B8h] +
mov eax [eax+esi*4] +
test eax eax +
jz loc_1019D02  +
mov ecx [ebp+8] +
mov ecx [ecx] +
and ecx edi +
neg ecx  +
sbb ecx ecx +
neg ecx  +
push ecx  +
mov ecx [ebp+0Ch] +
push eax  +
call sub_101412A  +
mov eax esi +
and eax 1Fh +
cmp al 1Fh +
jnb loc_1019D0F  +
shl edi 1 +
jmp loc_1019D16  +
add dword ptr [ebp+8] 4 +
xor edi edi +
inc edi  +
mov eax [ebx+4] +
inc esi  +
cmp esi [eax+0Ch] +
jb loc_1019CDC  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+lpCriticalSection] +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_1019D59  +
cmp dword ptr [edx] 0 +
jnz loc_1019D52  +
lea eax [ebp+lpCriticalSection] +
push eax  +
push edx  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1019B80  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
cmp dword ptr [edx] 0 +
jnz loc_1019D65  +
lea eax [ebp+lpCriticalSection] +
push eax  +
push edx  +
jmp loc_1019D71  +
test eax eax +
jnz loc_1019D44  +
lea eax [ebp+lpCriticalSection] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
jmp loc_1019D4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+10h]  +
add ecx 0C4h +
push dword ptr [ebp+0Ch]  +
call sub_1019B80  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+lpCriticalSection] +
test edi edi +
mov esi ecx +
jnz loc_1019DB5  +
mov eax 80004003h +
jmp loc_1019E1D  +
lea eax [esi+24h] +
push ebx  +
push eax  +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
and dword ptr [edi] 0 +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1019D2D  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx 3FFFFFh +
and edx ecx +
shr eax 16h +
jmp loc_1019E01  +
mov ebx [esi+20h] +
add eax ebx +
cmp dword ptr [eax+10h] 1 +
mov bx [eax+16h] +
jnz loc_1019DF8  +
inc dword ptr [edi]  +
cmp bx 0FFFFh +
jz loc_1019E11  +
movsx eax bx +
mov ebx [esi+20h] +
shl eax 5 +
mov ebx [ebx+eax+0Ch] +
and ebx ecx +
cmp ebx edx +
jbe loc_1019DE7  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax offset byte_1022AD9 +
call sub_10014DD  +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
push edi  +
xor edi edi +
cmp ebx edi +
mov esi ecx +
mov [ebp-10h] esp +
mov [ebp-14h] esi +
jz loc_1019F46  +
cmp [ebp+14h] edi +
jz loc_1019F46  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [ebp+8] +
imul eax ecx +
cmp [ebp+0Ch] eax +
jnb loc_1019E6F  +
mov eax 80070057h +
jmp loc_1019F4B  +
mov eax [esi] +
mov eax [eax+2Ch] +
mov eax [eax+2F0h] +
add eax ecx +
mov ecx [esi+10h] +
shr ecx 1 +
cmp ecx eax +
ja loc_1019E8F  +
mov eax 8007000Eh +
jmp loc_1019F4B  +
lea eax [esi+24h] +
push eax  +
call ds:EnterCriticalSection  +
and dword ptr [ebp+0Ch] 0 +
mov [ebp-4] edi +
mov eax [ebp+0Ch] +
cmp eax [ebp+8] +
jnb loc_1019F38  +
mov ecx [esi+8] +
and dword ptr [ebp+10h] 0 +
lea eax [ebp+10h] +
push eax  +
add ecx 2E8h +
call sub_1011A47  +
cmp dword ptr [ebp+10h] 0 +
jz loc_1019F38  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
push ebx  +
call near ptr dword_1019C10+2  +
mov ecx [ebp+10h] +
push 3  +
call sub_1011830  +
mov edi [eax] +
mov ecx [ebp+10h] +
push 3  +
and edi 0FFh +
call sub_1011830  +
mov [eax] edi +
mov ecx [ebp+10h] +
call sub_1011316  +
mov ecx [esi+8] +
push 0  +
push eax  +
mov eax [esi] +
push dword ptr [eax+4]  +
call sub_1011458  +
mov edi eax +
test edi edi +
jl loc_1019F38  +
mov eax [esi+4] +
inc dword ptr [ebp+0Ch]  +
add dword ptr [ebp+14h] 4 +
add ebx [eax] +
jmp loc_1019EA0  +
add esi 24h +
push esi  +
call ds:LeaveCriticalSection  +
mov eax edi +
jmp loc_1019F4B  +
mov eax 80004003h +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 10h  +
***
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+10h]  +
add ecx 0C4h +
push dword ptr [ebp+0Ch]  +
call sub_1019D9E  +
pop ebp  +
retn 10h  +
***
mov eax offset byte_1022B75 +
call sub_10014DD  +
push ecx  +
mov eax [ebp+8] +
test byte ptr [eax+2Ch] 22h +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jnz loc_101A14C  +
mov eax 8000FFFFh +
jmp loc_101A179  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
lea ecx [eax+0C4h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1019E28  +
jmp loc_101A179  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 14h  +
***
jnb loc_101A196  +
call dword ptr [ecx-75h]  +
inc ebp  +
or dh dh +
inc eax  +
sub al 22h +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jz loc_101A1D1  +
push dword ptr [ebp+18h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
lea ecx [eax+0C4h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call near ptr dword_1019F5C+5  +
***
jmp loc_101A1D6  +
retn   +
***
mov eax 80004005h +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 14h  +
***
pop ebx  +
leave   +
retn 1Ch  +
***
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102D1AC +
jmp loc_101A762  +
mov eax ecx +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_101A760  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102D1AC +
jmp loc_101A784  +
mov eax ecx +
mov ecx [eax] +
cmp ecx edx +
jnz loc_101A782  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027094 +
jmp loc_101A7A5  +
mov eax ecx +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_101A7A3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_1027094 +
jz loc_101A7D3  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101A7E7  +
mov [ecx+4] eax +
jmp loc_101A7F6  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101A7F4  +
mov [ecx+8] eax +
jmp loc_101A7F6  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_102D1AC +
jz loc_101A823  +
push eax  +
call sub_101A772  +
jmp loc_101A832  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jz loc_101A81F  +
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_101A834  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_101A855  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jnz loc_101A855  +
mov eax [ecx+8] +
jmp loc_101A872  +
mov eax [ecx] +
cmp eax dword_1027094 +
jz loc_101A86B  +
push eax  +
call sub_101A793  +
jmp loc_101A872  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_101A867  +
mov [esi] eax +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
mov ecx [eax] +
push offset nullsub_2  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_101A8B3  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jnz loc_101A8B3  +
mov eax [ecx+8] +
jmp loc_101A8D0  +
mov eax [ecx] +
cmp eax dword_102D178 +
jz loc_101A8C9  +
push eax  +
call sub_1018876  +
jmp loc_101A8D0  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_101A8C5  +
mov [esi] eax +
pop esi  +
retn   +
***
mov eax offset byte_1022D9D +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp-10h] esp +
jnz loc_101A8FB  +
mov eax 80004003h +
jmp loc_101A91B  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
push dword ptr [eax+34h]  +
call near ptr dword_101A878+3  +
jmp loc_101A91B  +
mov eax offset loc_101A916 +
retn   +
***
mov eax 80004005h +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_102D1AC +
jz loc_101A94F  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101A963  +
mov [ecx+4] eax +
jmp loc_101A972  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101A970  +
mov [ecx+8] eax +
jmp loc_101A972  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_1027094 +
jz loc_101A99F  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101A9B3  +
mov [ecx+4] eax +
jmp loc_101A9C1  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_101A9BE  +
mov [ecx] eax +
jmp loc_101A9C1  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_102D1AC +
mov ebx ecx +
mov esi edi +
jz loc_101AA03  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_101A9CF  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_102D1AC +
pop ecx  +
mov edi esi +
jnz loc_101A9E6  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_101A805  +
mov esi [edi] +
mov eax dword_102D1AC +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_101AA40  +
mov esi [ebx] +
jmp loc_101AA57  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_101AA57  +
push ecx  +
call sub_101A772  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_101AAC7  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_101AA79  +
mov [esi+4] eax +
jmp loc_101AA90  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_101AAA0  +
mov [ecx+4] eax +
jmp loc_101AAAE  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101AAAB  +
mov [ecx] eax +
jmp loc_101AAAE  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_101AB40  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jnz loc_101AADD  +
mov [ecx+4] esi +
jmp loc_101AAEB  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101AAE8  +
mov [ecx] esi +
jmp loc_101AAEB  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jnz loc_101AB17  +
mov ebx [ebx] +
cmp ebx dword_102D1AC +
jnz loc_101AB06  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_101AB17  +
push esi  +
call sub_101A772  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_101AB3D  +
mov ecx [edi] +
cmp ecx dword_102D1AC +
jnz loc_101AB31  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
jmp loc_101AB3D  +
push esi  +
call sub_101A750  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jnz loc_101AC57  +
jmp loc_101AC0A  +
cmp [esi+14h] edi +
jnz loc_101AC54  +
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jnz loc_101ABD5  +
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jnz loc_101AB86  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1008CD1  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101AB95  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_101AC03  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101ABB4  +
mov ecx [eax] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101A931  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1008CD1  +
jmp loc_101AC54  +
cmp dword ptr [eax+14h] 0 +
jnz loc_101ABF4  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101A931  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101AC18  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101AC18  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
mov eax [ebx+4] +
cmp esi [eax+4] +
jnz loc_101AB51  +
jmp loc_101AC54  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101AC36  +
mov ecx [eax+8] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_1008CD1  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101A931  +
mov [esi+14h] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_101ACCA  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_101ACCA  +
cmp [ebp+arg_8] eax +
jnz loc_101ACCA  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_101A9CF  +
mov ecx dword_102D1AC +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_101ACEF  +
cmp ecx [ebp+arg_8] +
jz loc_101ACEF  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_101A805  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101AA0F  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_101ACD0  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
call sub_101AC80  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp-4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D1B0  +
jnz loc_101AD45  +
mov esi dword_102D1AC +
and dword_102D1AC 0 +
lea ecx [ebp-4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_101AD59  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
mov edi offset stru_102D190 +
push edi  +
mov dword ptr [esi] offset off_100D40C +
call ds:EnterCriticalSection  +
mov eax [esi+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
mov esi offset unk_102D180 +
push eax  +
mov ecx esi +
call sub_10098A5  +
mov eax [ebp+var_8] +
cmp dword_102D184 eax +
jz loc_101ADAF  +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_10189D2  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax offset byte_1022E19 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+3Ch]  +
and dword ptr [ebp-4] 0 +
call ds:SysFreeString  +
mov ecx esi +
call sub_101AD61  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101AD61  +
test byte ptr [ebp+8] 1 +
jz loc_101AE1A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+44h] +
push eax  +
mov dword ptr [esi] offset off_100D73C +
mov dword ptr [esi+8] offset off_1001CA4 +
mov dword ptr [esi+0Ch] 1 +
call ds:DeleteCriticalSection  +
mov ecx esi +
pop esi  +
jmp loc_101ADBF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+3Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 4 +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jnz loc_101AE86  +
push offset Addend  +
call edi  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+3Ch] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+4] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jnz loc_101AED7  +
lea ecx [esi-8] +
test ecx ecx +
jz loc_101AEE6  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_101AEE6  +
cmp edi 1 +
jnz loc_101AEE6  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101AE26  +
test byte ptr [ebp+8] 1 +
jz loc_101AF0E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101AE26  +
test byte ptr [ebp+8] 1 +
jz loc_101AF34  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+44Ch] +
mov eax [eax] +
test eax eax +
jz loc_101AF58  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+44Ch] +
push dword ptr [eax+8]  +
mov ecx offset unk_1027098 +
call sub_10204FF  +
mov eax [esi+44Ch] +
mov eax [eax+4] +
test eax eax +
jz loc_101AF89  +
push eax  +
call ds:RegCloseKey  +
mov eax [esi+44Ch] +
and dword ptr [eax+4] 0 +
mov eax [esi+44Ch] +
mov eax [eax+1Ch] +
test eax eax +
jz loc_101AF9C  +
push eax  +
call HidD_FreePreparsedData  +
push edi  +
push 6Ch  +
pop edi  +
mov eax [esi+44Ch] +
mov eax [edi+eax] +
test eax eax +
jz loc_101AFB4  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
add edi 4 +
cmp edi 74h +
jl loc_101AFA0  +
mov eax [esi+44Ch] +
mov eax [eax+74h] +
test eax eax +
pop edi  +
jz loc_101AFD1  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+44Ch] +
mov eax [eax+84h] +
test eax eax +
jz loc_101AFE8  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+44Ch] +
mov eax [eax+88h] +
test eax eax +
jz loc_101AFFF  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+44Ch] +
mov eax [eax+80h] +
test eax eax +
jz loc_101B016  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov esi [esi+44Ch] +
test esi esi +
jz loc_101B027  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027058 +
jmp loc_101B040  +
mov eax ecx +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_101B03E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_1027058 +
jz loc_101B06E  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101B082  +
mov [ecx+4] eax +
jmp loc_101B091  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101B08F  +
mov [ecx+8] eax +
jmp loc_101B091  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102D1DC +
jmp loc_101B0B2  +
mov eax ecx +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_101B0B0  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_101B0DC  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jnz loc_101B0DC  +
mov eax [ecx+8] +
jmp loc_101B0F9  +
mov eax [ecx] +
cmp eax dword_1027058 +
jz loc_101B0F2  +
push eax  +
call sub_101B02E  +
jmp loc_101B0F9  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_101B0EE  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_101B128  +
push esi  +
push edi  +
sub [ebp+arg_8] 10h +
mov edi [ebp+arg_8] +
sub eax 10h +
cmp eax [ebp+arg_0] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
jnz loc_101B111  +
pop edi  +
pop esi  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_101B14E  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jnz loc_101B14E  +
mov eax [ecx+8] +
jmp loc_101B16B  +
mov eax [ecx] +
cmp eax dword_102D1AC +
jz loc_101B164  +
push eax  +
call sub_101A750  +
jmp loc_101B16B  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_101B160  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1020C61  +
mov ecx esi +
call sub_101AF40  +
lea eax [esi+450h] +
push eax  +
call sub_1003B00  +
lea eax [esi+454h] +
push eax  +
call sub_1003B00  +
lea eax [esi+86Ch] +
push eax  +
call sub_1003B00  +
lea eax [esi+87Ch] +
push eax  +
call sub_1003B00  +
lea eax [esi+880h] +
push eax  +
call sub_1003B00  +
lea eax [esi+884h] +
push eax  +
call sub_1003B00  +
mov eax [esi+114h] +
test eax eax +
jz loc_101B1DE  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+120h] +
test eax eax +
jz loc_101B1EF  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+128h] +
test eax eax +
jz loc_101B200  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
lea ecx [esi+2E8h] +
pop esi  +
jmp loc_1021050  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1027090 +
mov [ebp+var_4] eax +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
lea eax [ebp+var_204] +
push 100h  +
push eax  +
call sub_100CFD8  +
test eax eax +
jl loc_101B272  +
push esi  +
push offset aA  +
push offset aDriverperf_txt  +
call ds:_wfopen  +
mov esi eax +
test esi esi +
pop ecx  +
pop ecx  +
jz loc_101B271  +
lea eax [ebp+var_204] +
push esi  +
push eax  +
call ds:fputws  +
push esi  +
call ds:fclose  +
add esp 0Ch +
pop esi  +
mov ecx [ebp+var_4] +
call sub_1007DC7  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_102D7B8 +
or eax dword_102D7BC +
jz locret_101B3BD  +
push ebx  +
push esi  +
push edi  +
movzx edi word ptr [ebp+arg_4] +
push edi  +
push [ebp+arg_0]  +
lea eax [ebp+var_8] +
push [ebp+arg_8]  +
xor ebx ebx +
push eax  +
push 80h  +
push ebx  +
mov esi 0FF00h +
push esi  +
push ebx  +
call HidP_GetUsageValue  +
push edi  +
push [ebp+arg_0]  +
mov [ebp+arg_4] eax +
push [ebp+arg_8]  +
lea eax [ebp+var_4] +
push eax  +
push 81h  +
push ebx  +
push esi  +
push ebx  +
call HidP_GetUsageValue  +
mov ecx 110000h +
cmp [ebp+arg_4] ecx +
jnz loc_101B3BA  +
cmp eax ecx +
jnz loc_101B3BA  +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
test eax eax +
jz loc_101B3BA  +
mov eax dword ptr [ebp+PerformanceCount] +
sub eax [ebp+var_8] +
mov ecx dword ptr [ebp+PerformanceCount+4] +
sbb ecx [ebp+var_4] +
push ebx  +
push 0F4240h  +
push ecx  +
push eax  +
call sub_1014DC0  +
push dword_102D7BC  +
push dword_102D7B8  +
push edx  +
push eax  +
call sub_1014D11  +
cmp eax dword_102D82C +
jnb loc_101B362  +
mov dword_102D82C eax +
cmp eax dword_102D8B8 +
jbe loc_101B36F  +
mov dword_102D8B8 eax +
add dword_102D8B4 eax +
inc dword_102D8B0  +
cmp dword_102D8B0 85h +
jb loc_101B3BA  +
mov eax dword_102D8B4 +
xor edx edx +
div  dword_102D8B0 +
push eax  +
push dword_102D8B8  +
push dword_102D82C  +
push offset aMintimeDusMaxt  +
call sub_101B211  +
add esp 10h +
mov dword_102D8B4 ebx +
mov dword_102D8B0 ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_1027058 +
jz loc_101B441  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101B455  +
mov [ecx+4] eax +
jmp loc_101B463  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_101B460  +
mov [ecx] eax +
jmp loc_101B463  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_102D1DC +
jz loc_101B48F  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101B4A3  +
mov [ecx+4] eax +
jmp loc_101B4B1  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_101B4AE  +
mov [ecx] eax +
jmp loc_101B4B1  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_102D1DC +
jz loc_101B4DD  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101B4F1  +
mov [ecx+4] eax +
jmp loc_101B500  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101B4FE  +
mov [ecx+8] eax +
jmp loc_101B500  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
push 0  +
shl eax 2 +
push eax  +
mov esi ecx +
call sub_100351E  +
mov ebx eax +
mov eax edi +
shr eax 2 +
lea eax [ebx+eax*4] +
push eax  +
mov [ebp+arg_0] eax +
mov eax [esi+20h] +
add eax 4 +
push eax  +
push dword ptr [esi+10h]  +
call sub_101D235  +
push dword ptr [esi+24h]  +
call ??3@YAXPAX@Z  +
mov eax [ebp+arg_0] +
pop ecx  +
mov [esi+28h] edi +
pop edi  +
mov [esi+24h] ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_1008424  +
mov esi [edi] +
mov eax dword_1027094 +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_101B595  +
mov esi [ebx] +
jmp loc_101B5AC  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_101B5AC  +
push ecx  +
call sub_1008452  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_101B61C  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_101B5CE  +
mov [esi+4] eax +
jmp loc_101B5E5  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_101B5F5  +
mov [ecx+4] eax +
jmp loc_101B603  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101B600  +
mov [ecx] eax +
jmp loc_101B603  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_101B695  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jnz loc_101B632  +
mov [ecx+4] esi +
jmp loc_101B640  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101B63D  +
mov [ecx] esi +
jmp loc_101B640  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jnz loc_101B66C  +
mov ebx [ebx] +
cmp ebx dword_1027094 +
jnz loc_101B65B  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_101B66C  +
push esi  +
call sub_1008452  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_101B692  +
mov ecx [edi] +
cmp ecx dword_1027094 +
jnz loc_101B686  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
jmp loc_101B692  +
push esi  +
call sub_101A793  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jnz loc_101B7AC  +
jmp loc_101B75F  +
cmp [esi+14h] edi +
jnz loc_101B7A9  +
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jnz loc_101B72A  +
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jnz loc_101B6DB  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101A981  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101B6EA  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_101B758  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101B709  +
mov ecx [eax] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101A7B5  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101A981  +
jmp loc_101B7A9  +
cmp dword ptr [eax+14h] 0 +
jnz loc_101B749  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101A7B5  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101B76D  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101B76D  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
mov eax [ebx+4] +
cmp esi [eax+4] +
jnz loc_101B6A6  +
jmp loc_101B7A9  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101B78B  +
mov ecx [eax+8] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101A981  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101A7B5  +
mov [esi+14h] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
mov esi [ebp+var_4] +
lea eax [esi+0Ch] +
push eax  +
call sub_1004087  +
push esi  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_100AAA7  +
mov esi [edi] +
mov eax dword_102D1DC +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_101B810  +
mov esi [ebx] +
jmp loc_101B827  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_101B827  +
push ecx  +
call sub_1008D89  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_101B897  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_101B849  +
mov [esi+4] eax +
jmp loc_101B860  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_101B870  +
mov [ecx+4] eax +
jmp loc_101B87E  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101B87B  +
mov [ecx] eax +
jmp loc_101B87E  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+1Ch] +
mov edx [edi+1Ch] +
mov [eax+1Ch] edx +
mov [edi+1Ch] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_101B910  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jnz loc_101B8AD  +
mov [ecx+4] esi +
jmp loc_101B8BB  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101B8B8  +
mov [ecx] esi +
jmp loc_101B8BB  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jnz loc_101B8E7  +
mov ebx [ebx] +
cmp ebx dword_102D1DC +
jnz loc_101B8D6  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_101B8E7  +
push esi  +
call sub_1008D89  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_101B90D  +
mov ecx [edi] +
cmp ecx dword_102D1DC +
jnz loc_101B901  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
jmp loc_101B90D  +
push esi  +
call sub_101B0A0  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+1Ch] edi +
jnz loc_101BA27  +
jmp loc_101B9DA  +
cmp [esi+1Ch] edi +
jnz loc_101BA24  +
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jnz loc_101B9A5  +
mov eax [ecx+8] +
cmp dword ptr [eax+1Ch] 0 +
jnz loc_101B956  +
mov [eax+1Ch] edi +
mov eax [esi+4] +
and dword ptr [eax+1Ch] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101B471  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+1Ch] edi +
jnz loc_101B965  +
mov ecx [eax+8] +
cmp [ecx+1Ch] edi +
jz loc_101B9D3  +
mov ecx [eax+8] +
cmp [ecx+1Ch] edi +
jnz loc_101B984  +
mov ecx [eax] +
mov [ecx+1Ch] edi +
and dword ptr [eax+1Ch] 0 +
push eax  +
mov ecx ebx +
call sub_101B4BF  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+1Ch] +
mov [eax+1Ch] ecx +
mov ecx [esi+4] +
mov [ecx+1Ch] edi +
mov eax [eax+8] +
mov [eax+1Ch] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101B471  +
jmp loc_101BA24  +
cmp dword ptr [eax+1Ch] 0 +
jnz loc_101B9C4  +
mov [eax+1Ch] edi +
mov eax [esi+4] +
and dword ptr [eax+1Ch] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101B4BF  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [eax+8] +
cmp [ecx+1Ch] edi +
jnz loc_101B9E8  +
mov ecx [eax] +
cmp [ecx+1Ch] edi +
jnz loc_101B9E8  +
and dword ptr [eax+1Ch] 0 +
mov esi [esi+4] +
mov eax [ebx+4] +
cmp esi [eax+4] +
jnz loc_101B921  +
jmp loc_101BA24  +
mov ecx [eax] +
cmp [ecx+1Ch] edi +
jnz loc_101BA06  +
mov ecx [eax+8] +
mov [ecx+1Ch] edi +
and dword ptr [eax+1Ch] 0 +
push eax  +
mov ecx ebx +
call sub_101B471  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+1Ch] +
mov [eax+1Ch] ecx +
mov ecx [esi+4] +
mov [ecx+1Ch] edi +
mov eax [eax] +
mov [eax+1Ch] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101B4BF  +
mov [esi+1Ch] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_1027094 +
mov ebx ecx +
mov esi edi +
jz loc_101BA8D  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_101BA50  +
mov esi [esi] +
lea eax [edi+0Ch] +
push eax  +
call sub_1004087  +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_1027094 +
pop ecx  +
mov edi esi +
jnz loc_101BA67  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_101BAE3  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_101BAE3  +
cmp [ebp+arg_8] eax +
jnz loc_101BAE3  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_101BA50  +
mov ecx dword_1027094 +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_101BB08  +
cmp ecx [ebp+arg_8] +
jz loc_101BB08  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1008424  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101B564  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_101BAE9  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
mov edi offset stru_102D1C4 +
push edi  +
mov dword ptr [esi] offset off_100DF9C +
call ds:EnterCriticalSection  +
mov eax [esi+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
mov esi offset unk_102D1B4 +
push eax  +
mov ecx esi +
call sub_100AA33  +
mov eax [ebp+var_8] +
cmp dword_102D1B8 eax +
jz loc_101BB65  +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_101AA0F  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101BB17  +
test byte ptr [ebp+8] 1 +
jz loc_101BB8F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101BA99  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp+var_4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D1E0  +
jnz loc_101BBE7  +
mov esi dword_1027094 +
and dword_1027094 0 +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_101BBFB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_101BC17  +
mov eax 80004003h +
jmp loc_101BC77  +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
call sub_101BE5D  +
mov esi eax +
test esi esi +
jl loc_101BC5E  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:AtlComPtrAssign  +
lea eax [edi+4] +
mov [esi+8] eax +
mov eax [eax+4] +
mov eax [eax] +
push ebx  +
mov [esi+0Ch] eax +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jz loc_101BC73  +
mov ecx [ebp+arg_4] +
test ecx ecx +
mov edi ecx +
jz loc_101BC73  +
call sub_101BC81  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax offset byte_1022F75 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10184F8 +
and dword ptr [ebp-4] 0 +
mov ecx offset unk_1027098 +
mov dword ptr [esi+10h] 1 +
call sub_1001CE4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101BCCA  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+10h] +
and eax ecx +
add eax 4 +
push eax  +
call ds:DeleteCriticalSection  +
mov esi [esi+4] +
test esi esi +
jz loc_101BCF1  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_1018524  +
push dword ptr [ebp+8]  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+10h] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
push edi  +
jz loc_101BDD2  +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_101BD3E  +
cmp [ebp+14h] ebx +
jz loc_101BDD2  +
mov edi [ebp+8] +
cmp [edi+8] ebx +
jnz loc_101BD50  +
mov eax 80004005h +
jmp loc_101BDD7  +
push esi  +
mov [ebp-4] ebx +
mov [ebp+8] eax +
lea esi [edi+0Ch] +
mov eax [esi] +
mov ecx [edi+8] +
cmp eax [ecx+4] +
jz loc_101BDB1  +
cmp ebx [ebp+0Ch] +
jnb loc_101BDB1  +
add eax 0Ch +
push eax  +
push dword ptr [ebp+8]  +
call sub_1003365  +
test eax eax +
mov [ebp-4] eax +
jge loc_101BD9F  +
mov eax [ebp+10h] +
jmp loc_101BD96  +
mov eax [eax] +
test eax eax +
jz loc_101BD8D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+10h] +
add eax 4 +
mov [ebp+10h] eax +
cmp eax [ebp+8] +
jb loc_101BD81  +
xor ebx ebx +
jmp loc_101BDAB  +
add dword ptr [ebp+8] 4 +
mov ecx esi +
call sub_1008424  +
inc ebx  +
cmp dword ptr [ebp-4] 0 +
jge loc_101BD5A  +
mov eax [ebp+14h] +
test eax eax +
pop esi  +
jz loc_101BDBB  +
mov [eax] ebx +
cmp dword ptr [ebp-4] 0 +
jl loc_101BDCD  +
cmp ebx [ebp+0Ch] +
jnb loc_101BDCD  +
mov dword ptr [ebp-4] 1 +
mov eax [ebp-4] +
jmp loc_101BDD7  +
mov eax 80004003h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jz loc_101BE18  +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [edi+0Ch] +
mov eax [edi+8] +
mov ecx [esi] +
dec dword ptr [ebp+0Ch]  +
cmp ecx [eax+4] +
jz loc_101BE13  +
mov ecx esi +
call sub_1008424  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101BDF7  +
jmp loc_101BE16  +
xor ebx ebx +
inc ebx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_101BE50  +
test esi esi +
jz loc_101BE50  +
mov ecx esi +
call sub_101BC81  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1022FB9 +
call sub_10014DD  +
push ecx  +
push esi  +
push edi  +
push 2Ch  +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
test esi esi +
jz loc_101BEA6  +
mov ecx esi +
call sub_101EA4E  +
lea ecx [esi+10h] +
call sub_10049A5  +
push offset Addend  +
mov dword ptr [esi] offset off_10184F8 +
call ds:InterlockedIncrement  +
jmp loc_101BEA8  +
xor esi esi +
test esi esi +
jz loc_101BEAE  +
xor edi edi +
mov eax [ebp+8] +
mov ecx [ebp-0Ch] +
mov [eax] esi +
mov eax edi +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
test eax eax +
push edi  +
mov edi 80004003h +
jz loc_101BF42  +
and dword ptr [eax] 0 +
lea eax [ebp-4] +
push eax  +
call sub_101BE5D  +
mov edi eax +
test edi edi +
jl loc_101BF42  +
mov edi [ebp+8] +
push ebx  +
mov ebx [edi+8] +
push esi  +
push dword ptr [edi+4]  +
mov esi [ebp-4] +
lea eax [esi+4] +
push eax  +
call ds:AtlComPtrAssign  +
push dword ptr [ebp+0Ch]  +
mov [esi+8] ebx +
mov eax [ebx+4] +
mov eax [eax] +
push offset dword_1018514  +
mov [esi+0Ch] eax +
mov eax [edi+0Ch] +
push offset off_1018524  +
push esi  +
mov [esi+0Ch] eax +
call ds:AtlInternalQueryInterface  +
mov edi eax +
test edi edi +
jge loc_101BF40  +
mov ecx esi +
call sub_101BC81  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_101BF62  +
mov eax 80004003h +
jmp loc_101BF9D  +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [edi+4] +
call sub_101BFA7  +
mov eax [ebp+arg_8] +
cmp [edi+8] eax +
pop edi  +
jz loc_101BF98  +
mov ecx [eax+10h] +
mov [esi] ecx +
mov eax [eax+10h] +
test eax eax +
jz loc_101BF94  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_101BF9D  +
mov eax 80004005h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_101BFE8  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jz loc_101BFD0  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_101BFD0  +
lea eax [ebp+arg_4] +
jmp loc_101BFD6  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_1027094 +
cmp ecx edx +
jz loc_101C016  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jnb loc_101C00D  +
mov ecx [ecx+8] +
jmp loc_101C011  +
mov eax ecx +
mov ecx [ecx] +
cmp ecx edx +
jnz loc_101C003  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
lea edi [esi+4] +
push eax  +
mov ecx edi +
call sub_101BFA7  +
mov eax [ebp+arg_0] +
cmp [esi+8] eax +
jz loc_101C053  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_101B564  +
xor eax eax +
jmp loc_101C058  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax offset byte_1023103 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+40h]  +
mov dword ptr [ebp-4] 1 +
call ds:SysFreeString  +
lea ecx [esi+10h] +
call sub_101BB9B  +
mov ecx esi +
mov byte ptr [ebp-4] 0 +
call sub_101BB17  +
add esi 24h +
push esi  +
call ds:DeleteCriticalSection  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+14h] 0 +
mov eax 80004003h +
jz loc_101C0EC  +
push dword ptr [ebp+14h]  +
mov ecx offset off_102D830 +
push dword ptr [ebp+10h]  +
call sub_101C0F5  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
xor eax eax +
cmp [esi+0Ch] eax +
jnz loc_101C10C  +
push [ebp+arg_0]  +
call sub_101C12F  +
mov ecx [esi+0Ch] +
mov edx [ebp+arg_4] +
mov [edx] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_101C125  +
mov esi [esi+0Ch] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax offset dword_1023158 +
call sub_10014DD  +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jz loc_101C14E  +
xor eax eax +
jmp loc_101C243  +
push edi  +
mov edi offset stru_10270B4 +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
xor eax eax +
mov ax [esi+0Ah] +
push eax  +
xor eax eax +
mov ax [esi+8] +
push eax  +
push dword ptr [esi+4]  +
call ds:LoadRegTypeLib  +
cmp eax ebx +
mov [ebp-1Ch] eax +
jl loc_101C227  +
mov [ebp-10h] ebx +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push dword ptr [esi]  +
mov [ebp-4] ebx +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
mov [ebp-1Ch] eax +
jl loc_101C20D  +
mov eax [ebp-10h] +
cmp eax ebx +
mov [ebp+8] eax +
jz loc_101C1B3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp-10h] +
mov [ebp-14h] ebx +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push offset dword_101C254  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx]  +
test eax eax +
jl loc_101C1D9  +
push dword ptr [ebp-14h]  +
lea eax [ebp+8] +
push eax  +
call ds:AtlComPtrAssign  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_101C269  +
mov eax [ebp+8] +
mov [esi+0Ch] eax +
mov eax [ebp-14h] +
cmp eax ebx +
mov [ebp+8] ebx +
mov byte ptr [ebp-4] 1 +
jz loc_101C1FD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
cmp eax ebx +
mov [ebp-4] bl +
jz loc_101C20D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101C227  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push edi  +
call ds:LeaveCriticalSection  +
push esi  +
push offset loc_101C3A8  +
push offset unk_1027098  +
call ds:AtlModuleAddTermFunc  +
mov eax [ebp-1Ch] +
pop edi  +
mov ecx [ebp-0Ch] +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
mov eax offset byte_10231A1 +
call sub_10014DD  +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+8] +
mov eax [ebx] +
push esi  +
mov esi ecx +
lea ecx [ebp-18h] +
push ecx  +
push ebx  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_101C386  +
mov eax [ebp-18h] +
push edi  +
movzx edi word ptr [eax+2Ch] +
test edi edi +
mov [esi+18h] edi +
jnz loc_101C2A2  +
xor eax eax +
jmp loc_101C2E3  +
lea eax [edi+edi*2] +
lea eax ds:4[eax*4] +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-14h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_101C2DD  +
push offset sub_1018868  +
push offset loc_101C39D  +
push edi  +
lea ebx [eax+4] +
push 0Ch  +
push ebx  +
mov [eax] edi +
call sub_1004E26  +
mov eax ebx +
mov ebx [ebp+8] +
jmp loc_101C2DF  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor edi edi +
cmp [esi+18h] edi +
mov [esi+14h] eax +
mov [ebp-10h] edi +
jle loc_101C37C  +
mov eax [ebx] +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp-10h]  +
push ebx  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_101C36A  +
xor eax eax +
mov [ebp+8] eax +
mov ecx [ebx] +
push eax  +
push eax  +
push eax  +
lea eax [ebp+8] +
push eax  +
mov eax [ebp-14h] +
push dword ptr [eax]  +
mov dword ptr [ebp-4] 1 +
push ebx  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_101C354  +
mov eax [esi+14h] +
mov ecx [ebp+8] +
and dword ptr [ebp+8] 0 +
add eax edi +
mov [eax] ecx +
mov eax [esi+14h] +
push dword ptr [edi+eax]  +
call ds:SysStringLen  +
mov ecx [esi+14h] +
mov [ecx+edi+4] eax +
mov ecx [ebp-14h] +
mov eax [esi+14h] +
mov ecx [ecx] +
mov [eax+edi+8] ecx +
push dword ptr [ebp-14h]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+50h]  +
push dword ptr [ebp+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:SysFreeString  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
add edi 0Ch +
cmp eax [esi+18h] +
jl loc_101C2F4  +
push dword ptr [ebp-18h]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4Ch]  +
pop edi  +
mov ecx [ebp-0Ch] +
pop esi  +
xor eax eax +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
mov eax ecx +
and dword ptr [eax] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+0Ch] +
test eax eax +
jz loc_101C3BE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
and dword ptr [esi+0Ch] 0 +
test ecx ecx +
jz loc_101C3D0  +
push 3  +
call sub_10188EF  +
and dword ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_102D830 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101C405  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi ecx +
xor eax eax +
cmp [esi+0Ch] eax +
mov [ebp+var_C] esi +
jnz loc_101C422  +
push [ebp+arg_C]  +
call sub_101C12F  +
cmp dword ptr [esi+0Ch] 0 +
mov [ebp+var_10] eax +
jz loc_101C4EB  +
and [ebp+var_4] 0 +
cmp [ebp+arg_8] 0 +
jle loc_101C4EB  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_10] +
sub ecx eax +
push ebx  +
mov [ebp+arg_C] eax +
mov [ebp+var_18] ecx +
push edi  +
mov eax [ebp+arg_C] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edx [esi+18h] +
dec edx  +
mov [ebp+var_14] eax +
js loc_101C4BD  +
mov ecx [esi+14h] +
lea eax [edx+edx*2] +
shl eax 2 +
lea ecx [ecx+eax+4] +
mov [ebp+var_8] ecx +
mov edi [ebp+var_14] +
cmp edi [ecx] +
jnz loc_101C493  +
mov ecx [esi+14h] +
mov edi [ebp+arg_C] +
mov edi [edi] +
lea esi [eax+ecx] +
mov ecx [esi+4] +
mov esi [esi] +
shl ecx 1 +
xor ebx ebx +
cmps   +
mov esi [ebp+var_C] +
jz loc_101C4A6  +
mov ecx [ebp+var_8] +
dec edx  +
sub ecx 0Ch +
sub eax 0Ch +
test edx edx +
mov [ebp+var_8] ecx +
jge loc_101C471  +
jmp loc_101C4B9  +
mov eax [esi+14h] +
mov edi [ebp+arg_C] +
lea ecx [edx+edx*2] +
mov eax [eax+ecx*4+8] +
mov ecx [ebp+var_18] +
mov [ecx+edi] eax +
test edx edx +
jge loc_101C4D6  +
push [ebp+arg_10]  +
mov eax [esi+0Ch] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+28h]  +
test eax eax +
mov [ebp+var_10] eax +
jl loc_101C4E9  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add [ebp+arg_C] 4 +
cmp eax [ebp+arg_8] +
jl loc_101C44D  +
pop edi  +
pop ebx  +
mov eax [ebp+var_10] +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_102D83C +
xor eax eax +
test ecx ecx +
jnz loc_101C520  +
push dword ptr [ebp+14h]  +
mov ecx offset off_102D830 +
call sub_101C12F  +
mov ecx dword_102D83C +
test ecx ecx +
jz loc_101C53B  +
push dword ptr [ebp+28h]  +
mov eax [ecx] +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push ecx  +
call dword ptr [eax+2Ch]  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+4Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 18h +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jnz loc_101C574  +
push offset Addend  +
call edi  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+4Ch] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+18h] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jnz loc_101C5C5  +
lea ecx [esi-8] +
test ecx ecx +
jz loc_101C5D4  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_101C5D4  +
cmp edi 1 +
jnz loc_101C5D4  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101C544  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101C58A  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1003635  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C063  +
test byte ptr [ebp+8] 1 +
jz loc_101C626  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+54h] +
push eax  +
mov dword ptr [esi] offset off_100DFD4 +
mov dword ptr [esi+8] offset off_1001BC4 +
mov dword ptr [esi+0Ch] offset off_1006910 +
mov dword ptr [esi+20h] 1 +
call ds:DeleteCriticalSection  +
mov ecx esi +
pop esi  +
jmp sub_101C063  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C632  +
test byte ptr [ebp+8] 1 +
jz loc_101C683  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C632  +
test byte ptr [ebp+8] 1 +
jz loc_101C6A9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_102327D +
call sub_10014DD  +
sub esp 10h +
and dword ptr [ebp-14h] 0 +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+8] +
mov [ebp-1Ch] eax +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov [ebp-18h] edi +
call sub_100DFDD  +
test eax eax +
jge loc_101C6F1  +
mov eax 80004005h +
jmp loc_101C7CC  +
mov eax edi +
imul eax eax +
push ebx  +
mov ebx [ebp-14h] +
add eax offset aDigitizer +
push eax  +
push edi  +
push dword ptr [esi+44Ch]  +
lea eax [esi+8] +
push eax  +
mov ecx ebx +
call sub_1009CD8  +
and dword ptr [ebp+8] 0 +
and dword ptr [ebp-4] 0 +
lea edx [ebp+8] +
push edx  +
lea eax [ebx+8] +
mov ecx [eax] +
push offset dword_10035F0  +
push eax  +
call dword ptr [ecx]  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
push dword ptr [ebp+8]  +
lea eax [esi+10h] +
push dword ptr [ebp-10h]  +
push eax  +
call sub_100DE75  +
mov [ebp-14h] eax +
mov eax [ebp-10h] +
cmp eax 80h +
jb loc_101C777  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101C770  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_101C7CB  +
mov ecx [ebp+0Ch] +
mov [esi+eax*8+46Ch] ecx +
mov eax [ebp-10h] +
mov ecx [ebp+10h] +
mov [esi+eax*8+468h] edi +
mov eax [ebp-10h] +
xor edi edi +
push edi  +
push edi  +
push eax  +
mov [ecx] eax +
push 2C2h  +
mov ecx esi +
call sub_10081A3  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_101C7B5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp-14h] edi +
mov ecx ebx +
jge loc_101C7C4  +
mov eax [ebx] +
push 1  +
call dword ptr [eax]  +
jmp loc_101C770  +
call sub_100D1B5  +
xor eax eax +
pop ebx  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
***
and dword ptr [ecx+2Ch] 0FFFFFFFEh +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi ecx +
xor eax eax +
test byte ptr [esi+2Ch] 1 +
jz loc_101C9DB  +
mov ecx [ebp+arg_0] +
push edi  +
push eax  +
call sub_1011830  +
mov ecx [ebp+arg_0] +
mov edi [eax] +
push 1  +
call sub_1011830  +
mov ecx [eax] +
mov eax edi +
sub eax [esi+14h] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 3 +
jg loc_101C83A  +
mov eax ecx +
sub eax [esi+18h] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 3 +
jle loc_101C83D  +
inc dword ptr [esi+10h]  +
mov eax [esi+1Ch] +
cmp eax edi +
mov [esi+14h] edi +
mov [esi+18h] ecx +
mov [ebp+var_8] eax +
jl loc_101C850  +
mov [ebp+var_8] edi +
mov eax [ebp+var_8] +
mov [esi+1Ch] eax +
mov eax [esi+20h] +
cmp eax edi +
mov [ebp+var_4] eax +
jg loc_101C863  +
mov [ebp+var_4] edi +
mov eax [ebp+var_4] +
mov [esi+20h] eax +
mov eax [esi+24h] +
cmp eax ecx +
mov [ebp+var_C] eax +
jl loc_101C876  +
mov [ebp+var_C] ecx +
mov edi [esi+28h] +
cmp edi ecx +
mov eax [ebp+var_C] +
mov [esi+24h] eax +
jg loc_101C885  +
mov edi ecx +
inc dword ptr [esi]  +
mov eax [ebp+arg_0] +
mov [esi+28h] edi +
mov eax [eax+1Ch] +
sub eax [esi+0Ch] +
push ebx  +
cmp eax 1 +
mov ebx [esi] +
mov [ebp+var_14] ebx +
jnb loc_101C8A1  +
xor eax eax +
inc eax  +
cmp ebx 1 +
jz loc_101C9D6  +
imul eax eax +
test eax eax +
lea ecx [ebx-1] +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
mov [ebp+arg_0] eax +
fmul  ds:flt_101CBE0 +
fild  [ebp+arg_0] +
jge loc_101C8CF  +
fadd  ds:flt_101CBDC +
fdivp st(1) st +
fadd  ds:flt_101CBD8 +
call _ftol  +
add eax [esi+4] +
cmp ebx eax +
jl loc_101C9D6  +
mov eax [esi+10h] +
xor edx edx +
inc edx  +
cmp eax edx +
mov [esi+4] ebx +
mov [ebp+arg_0] edx +
jl loc_101C8FA  +
mov [ebp+arg_0] eax +
fild  [ebp+var_14] +
mov ebx [esi+8] +
fidiv  [ebp+arg_0] +
fcom  ds:dbl_101C9F0[ebx*8] +
fnstsw  ax +
test ah 5 +
jp loc_101C91A  +
fstp  st +
xor eax eax +
jmp loc_101C9CB  +
fcom  ds:dbl_101CA40[ebx*8] +
fnstsw  ax +
test ah 41h +
jnz loc_101C931  +
fstp  st +
mov eax edx +
jmp loc_101C9CB  +
mov eax [ebp+var_4] +
sub eax [ebp+var_8] +
sub edi [ebp+var_C] +
inc eax  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
inc edi  +
mov [ebp+var_14] edi +
fstp  qword ptr [ebp-10h] +
fild  [ebp+var_14] +
fst  qword ptr [ebp-18h] +
fdivr  qword ptr [ebp-10h] +
fld  qword ptr [ebp-18h] +
fdiv  qword ptr [ebp-10h] +
fmul  ds:dbl_101CBD0 +
fstp  qword ptr [ebp-18h] +
fcom  qword ptr [ebp-18h] +
fnstsw  ax +
test ah 41h +
jz loc_101C96F  +
fstp  st +
fld  qword ptr [ebp-18h] +
mov eax ebx +
shl eax 2 +
mov ecx eax +
shl ecx 3 +
fld  qword ptr [ecx+101CA90h] +
fld  st(1) +
fcomp  st(1) +
fnstsw  ax +
test ah 5 +
jp loc_101C990  +
fstp  st +
fstp  st +
jmp loc_101C928  +
fld  qword ptr [ecx+101CAA8h] +
fsub  qword ptr [ecx+101CA98h] +
fmul st st(2) +
fld  qword ptr [ecx+101CAA0h] +
fsub st st(2) +
fdivp st(1) st +
call _ftol  +
fstp  st +
fstp  st +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fld  st(1) +
fcompp st(1) st +
fnstsw  ax +
fstp  st +
test ah 5 +
jnp loc_101C913  +
xor eax eax +
inc eax  +
cmp ebx 9 +
jge loc_101C9D9  +
inc ebx  +
mov [esi+8] ebx +
jmp loc_101C9D9  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
mov ecx [ebp+arg_4] +
test ecx ecx +
pop esi  +
jz locret_101C9E5  +
mov [ecx] eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
or dword ptr [ecx+2Ch] 1 +
xor eax eax +
mov edx 7FFFFFFFh +
mov [ecx+24h] edx +
mov [ecx+1Ch] edx +
add edx 2 +
push esi  +
mov [ecx+28h] edx +
mov [ecx+20h] edx +
mov edx [ebp+arg_0] +
mov [ecx] eax +
mov [ecx+4] eax +
mov [ecx+8] eax +
mov [ecx+10h] eax +
mov [ecx+14h] eax +
mov [ecx+18h] eax +
mov esi [edx+1Ch] +
push eax  +
push edx  +
mov [ecx+0Ch] esi +
call sub_101C7ED  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
mov eax 80h +
push eax  +
push eax  +
mov eax [ebp+arg_4] +
add eax 0FFFFFFC0h +
push eax  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFC0h +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call ds:MoveWindow  +
push 5  +
push dword ptr [esi+4]  +
call ds:ShowWindow  +
mov eax [esi+4] +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
mov ebx [ebp+hdc] +
push esi  +
xor esi esi +
cmp [ebx+4] esi +
push edi  +
mov edi ecx +
jz loc_101CD65  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_101CC34  +
mov ecx edi +
mov [ebp+var_8] eax +
call sub_1012A68  +
push esi  +
mov [ebp+hdc] eax +
call ds:GetDC  +
sub [ebp+arg_8] 40h +
sub [ebp+arg_C] 40h +
mov [ebp+hDC] eax +
mov eax 80h +
mov edi 0FF00h +
push edi  +
mov [ebp+rc.left] esi +
mov [ebp+rc.top] esi +
mov [ebp+rc.right] eax +
mov [ebp+rc.bottom] eax +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+var_1C] eax +
mov [ebp+var_18] eax +
call ds:CreateSolidBrush  +
cmp [ebp+var_8] esi +
mov [ebp+var_C] eax +
jz loc_101CD5B  +
cmp [ebp+hdc] esi +
jz loc_101CD5B  +
cmp [ebp+hDC] esi +
jz loc_101CD5B  +
cmp eax esi +
jz loc_101CD5B  +
cmp [ebp+arg_10] esi +
jnz loc_101CD0B  +
push eax  +
lea eax [ebp+rc] +
push eax  +
push [ebp+hdc]  +
call ds:FillRect  +
mov eax [ebx+8] +
mov ecx [ebp+arg_4] +
push 3  +
push esi  +
push esi  +
push dword ptr [ebx+10h]  +
push dword ptr [ebx+0Ch]  +
push dword ptr [eax+ecx*8+4]  +
push dword ptr [ebx+20h]  +
push dword ptr [ebx+1Ch]  +
push [ebp+hdc]  +
call ds:DrawIconEx  +
cmp [ebp+arg_10] esi +
jz loc_101CD52  +
push 1  +
push esi  +
push edi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+hdc]  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+hDC]  +
push [ebp+var_8]  +
call ds:UpdateLayeredWindow  +
push [ebp+var_C]  +
call ds:DeleteObject  +
push [ebp+hDC]  +
push esi  +
call ds:ReleaseDC  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_102723C +
mov ecx [ebp+arg_4] +
cmp eax ecx +
mov dword_1027178 eax +
jb loc_101CD8D  +
mov dword_1027178 ecx +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+Handle]  +
call ds:UnregisterDeviceNotification  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 10h  +
***
cmp hEvent 0 +
pop ecx  +
jz loc_101CE06  +
cmp hHandle 0 +
jz loc_101CE06  +
push offset aCmanagerOnen_0  +
call nullsub_1  +
pop ecx  +
push hEvent  +
call ds:SetEvent  +
push 0BB8h  +
push hHandle  +
call ds:WaitForSingleObject  +
push offset aAcknowledged  +
call nullsub_1  +
pop ecx  +
xor eax eax +
inc eax  +
retn 10h  +
***
mov edi edi +
push esi  +
push 202h  +
mov esi offset unk_102D5B0 +
push esi  +
mov ecx offset unk_1027098 +
call sub_100C1A0  +
push esi  +
push offset aCmanagerIsonwi  +
call nullsub_1  +
push offset aWinlogon_0  +
push esi  +
call ds:_wcsicmp  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002CAC  +
mov eax [ebp+arg_0] +
mov [esi+88h] eax +
call sub_1002CC8  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1002CAC  +
mov esi [esi+88h] +
call sub_1002CC8  +
mov eax esi +
pop esi  +
retn   +
***
push ecx  +
call ds:InterlockedExchange  +
retn   +
***
add ecx 8Ch +
push ecx  +
call ds:InterlockedCompareExchange  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102708C +
jmp loc_101D05A  +
mov eax ecx +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_101D058  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_102708C +
jz loc_101D088  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101D09C  +
mov [ecx+4] eax +
jmp loc_101D0AB  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101D0A9  +
mov [ecx+8] eax +
jmp loc_101D0AB  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_1027088 +
jz loc_101D0D8  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101D0EC  +
mov [ecx+4] eax +
jmp loc_101D0FB  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101D0F9  +
mov [ecx+8] eax +
jmp loc_101D0FB  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102D1F0 +
jmp loc_101D11C  +
mov eax ecx +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_101D11A  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_102D1F0 +
jmp loc_101D13E  +
mov eax ecx +
mov ecx [eax] +
cmp ecx edx +
jnz loc_101D13C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_102D1F0 +
jz loc_101D16B  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101D17F  +
mov [ecx+4] eax +
jmp loc_101D18E  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101D18C  +
mov [ecx+8] eax +
jmp loc_101D18E  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx dword_1027050 +
jmp loc_101D1AF  +
mov eax ecx +
mov ecx [eax+8] +
cmp ecx edx +
jnz loc_101D1AD  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_101D1D9  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jnz loc_101D1D9  +
mov eax [ecx+8] +
jmp loc_101D1F6  +
mov eax [ecx] +
cmp eax dword_102708C +
jz loc_101D1EF  +
push eax  +
call sub_101D048  +
jmp loc_101D1F6  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_101D1EB  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [ecx+8] +
cmp eax dword_102D1F0 +
jz loc_101D21D  +
push eax  +
call sub_101D12C  +
jmp loc_101D22C  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax+8] +
jz loc_101D219  +
mov ecx [esi] +
cmp [ecx+8] eax +
jz loc_101D22E  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_101D24D  +
mov ecx [eax] +
mov edx [ebp+arg_8] +
add [ebp+arg_8] 4 +
mov [edx] ecx +
add eax 4 +
cmp eax [ebp+arg_4] +
jnz loc_101D23F  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_101D278  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jnz loc_101D278  +
mov eax [ecx+8] +
jmp loc_101D295  +
mov eax [ecx] +
cmp eax dword_102D1F0 +
jz loc_101D28E  +
push eax  +
call sub_101D10A  +
jmp loc_101D295  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_101D28A  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+58h] +
jmp loc_101D2BE  +
push 0  +
push 0  +
push [ebp+Msg]  +
push dword ptr [esi]  +
call ds:PostMessageW  +
add esi 4 +
cmp [edi+5Ch] esi +
jnz loc_101D2AC  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1023305 +
call sub_10014DD  +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
lea ecx [ebp-18h] +
lea esi [edi+20h] +
mov eax [esi] +
push ecx  +
push esi  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-18h]  +
push offset aCmanagerSuspen  +
call nullsub_1  +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [ebp-18h] 0 +
pop ecx  +
pop ecx  +
jbe loc_101D349  +
and dword ptr [ebp-14h] 0 +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp-10h]  +
push esi  +
call dword ptr [eax+14h]  +
mov ecx [ebp-14h] +
lea eax [ecx-8] +
neg ecx  +
sbb ecx ecx +
and ecx eax +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101D33E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
cmp eax [ebp-18h] +
jb loc_101D305  +
push dword ptr [edi+84h]  +
mov dword ptr [edi+80h] 7D0h +
call ds:SetEvent  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov eax offset byte_1023349 +
call sub_10014DD  +
push ecx  +
push ecx  +
push esi  +
lea esi [ecx+20h] +
mov eax [esi] +
push edi  +
lea ecx [ebp-14h] +
push ecx  +
push esi  +
call dword ptr [eax+10h]  +
xor edi edi +
cmp [ebp-14h] edi +
jbe loc_101D41A  +
and dword ptr [ebp-10h] 0 +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-10h] +
push ecx  +
push edi  +
push esi  +
call dword ptr [eax+14h]  +
mov ecx [ebp-10h] +
lea eax [ecx-8] +
neg ecx  +
sbb ecx ecx +
and ecx eax +
call sub_1020C61  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101D414  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc edi  +
cmp edi [ebp-14h] +
jb loc_101D3DF  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov eax offset byte_1023349 +
call sub_10014DD  +
sub esp 10h +
push ebx  +
push esi  +
lea esi [ecx+20h] +
mov eax [esi] +
push edi  +
lea ecx [ebp-18h] +
push ecx  +
xor edi edi +
push esi  +
xor ebx ebx +
mov [ebp-18h] edi +
call dword ptr [eax+10h]  +
cmp [ebp-18h] edi +
mov [ebp-14h] edi +
jbe loc_101D4AB  +
mov [ebp-10h] edi +
mov eax [esi] +
lea ecx [ebp-10h] +
push ecx  +
push dword ptr [ebp-14h]  +
mov [ebp-4] edi +
push esi  +
call dword ptr [eax+14h]  +
cmp ebx edi +
jge loc_101D474  +
mov ebx eax +
jmp loc_101D48F  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-10h] +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ecx-8] +
neg ecx  +
sbb ecx ecx +
and ecx eax +
call sub_1002A5F  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jz loc_101D4A0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [ebp-18h] +
jb loc_101D459  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 8  +
***
mov eax offset byte_1023349 +
call sub_10014DD  +
sub esp 14h +
push ebx  +
push edi  +
lea edi [ecx+20h] +
mov eax [edi] +
mov [ebp-20h] ecx +
lea ecx [ebp-18h] +
push ecx  +
xor ebx ebx +
push edi  +
mov [ebp-18h] ebx +
call dword ptr [eax+10h]  +
cmp [ebp-18h] ebx +
mov [ebp-14h] ebx +
jbe loc_101D62D  +
push esi  +
mov [ebp-10h] ebx +
mov eax [edi] +
lea ecx [ebp-10h] +
push ecx  +
push dword ptr [ebp-14h]  +
mov [ebp-4] ebx +
push edi  +
call dword ptr [eax+14h]  +
cmp eax ebx +
mov eax [ebp-10h] +
jl loc_101D642  +
mov ecx eax +
neg ecx  +
lea edx [eax-8] +
sbb ecx ecx +
and ecx edx +
jz loc_101D642  +
mov eax [ecx] +
lea edx [ebp-1Ch] +
push edx  +
call dword ptr [eax+4]  +
cmp eax ebx +
jl loc_101D63F  +
cmp dword ptr [ebp-1Ch] 2 +
jnz loc_101D63F  +
mov eax [ebp-10h] +
mov esi eax +
neg esi  +
lea ecx [eax-8] +
sbb esi esi +
and esi ecx +
jz loc_101D642  +
mov ecx [esi+44Ch] +
mov ecx [ecx+8] +
cmp ecx [ebp+8] +
jnz loc_101D642  +
cmp [esi+234h] ebx +
jz loc_101D642  +
cmp [esi+70h] ebx +
jz loc_101D5A2  +
push dword ptr [esi+458h]  +
mov edi ds:SetEvent +
call edi  +
push dword ptr [esi+450h]  +
call edi  +
push 0FFFFFFFFh  +
push dword ptr [esi+45Ch]  +
call ds:WaitForSingleObject  +
lea eax [esi+70h] +
push eax  +
call sub_1003B00  +
call sub_1002CAC  +
mov [esi+234h] ebx +
call sub_1002CC8  +
push dword ptr [esi+460h]  +
mov eax [ebp-20h] +
mov edi ds:PostMessageW +
push ebx  +
push 401h  +
push dword ptr [eax+4]  +
call edi  +
push ebx  +
push dword ptr [ebp-14h]  +
push 2C9h  +
push 0FFFFh  +
call edi  +
mov eax [esi+44Ch] +
mov eax [eax+8] +
cmp eax 0FFFFFFFFh +
jz loc_101D61B  +
push eax  +
mov ecx offset unk_1027098 +
call sub_10204FF  +
mov eax [esi+44Ch] +
mov [eax+8] ebx +
mov eax [esi+44Ch] +
mov eax [eax+4] +
cmp eax ebx +
jz loc_101D61B  +
push eax  +
call ds:RegCloseKey  +
mov eax [esi+44Ch] +
mov [eax+4] ebx +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101D62C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov ecx [ebp-0Ch] +
pop edi  +
xor eax eax +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 4  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101D650  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax [ebp-18h] +
jb loc_101D4F4  +
jmp loc_101D62C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push esi  +
mov esi [eax] +
mov [edx+8] esi +
mov esi [eax] +
cmp esi dword_1027050 +
jz loc_101D684  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101D698  +
mov [ecx+4] eax +
jmp loc_101D6A6  +
mov ecx [edx+4] +
cmp edx [ecx] +
jnz loc_101D6A3  +
mov [ecx] eax +
jmp loc_101D6A6  +
mov [ecx+8] eax +
mov [eax] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax+8] +
mov [edx] esi +
mov esi [eax+8] +
cmp esi dword_1027050 +
jz loc_101D6D2  +
mov [esi+4] edx +
mov esi [edx+4] +
mov [eax+4] esi +
mov ecx [ecx+4] +
cmp edx [ecx+4] +
pop esi  +
jnz loc_101D6E6  +
mov [ecx+4] eax +
jmp loc_101D6F5  +
mov ecx [edx+4] +
cmp edx [ecx+8] +
jnz loc_101D6F3  +
mov [ecx+8] eax +
jmp loc_101D6F5  +
mov [ecx] eax +
mov [eax+8] edx +
mov [edx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101D3BD  +
mov eax [esi+64h] +
test eax eax +
jz loc_101D71C  +
push eax  +
call ds:UnregisterDeviceNotification  +
cmp dword ptr [esi+68h] 0 +
jz loc_101D72E  +
mov eax [esi+6Ch] +
test eax eax +
jz loc_101D72E  +
push dword ptr [esi+4]  +
call eax  +
mov eax [esi+70h] +
test eax eax +
jz loc_101D73C  +
push eax  +
call ds:FreeLibrary  +
mov eax [esi+74h] +
test eax eax +
jz loc_101D74A  +
push eax  +
call ds:DeleteObject  +
mov eax [esi+4] +
test eax eax +
jz loc_101D758  +
push eax  +
call ds:DestroyWindow  +
mov esi [esi+78h] +
test esi esi +
jz loc_101D766  +
push esi  +
call ds:DeleteDC  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_1027050 +
mov ebx ecx +
mov esi edi +
jz loc_101D7A1  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_101D76D  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_1027050 +
pop ecx  +
mov edi esi +
jnz loc_101D784  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
push dword ptr [esi+8]  +
lea eax [edi+4] +
push eax  +
call sub_101D235  +
add dword ptr [esi+8] 0FFFFFFFCh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_101D7E5  +
mov ecx esi +
call sub_1002963  +
cmp dword ptr [esi+2Ch] 0 +
jnz loc_101D7DE  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_101D1FF  +
mov esi [edi] +
mov eax dword_102D1F0 +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_101D823  +
mov esi [ebx] +
jmp loc_101D83A  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_101D83A  +
push ecx  +
call sub_101D12C  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_101D8AA  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_101D85C  +
mov [esi+4] eax +
jmp loc_101D873  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_101D883  +
mov [ecx+4] eax +
jmp loc_101D891  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101D88E  +
mov [ecx] eax +
jmp loc_101D891  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_101D923  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jnz loc_101D8C0  +
mov [ecx+4] esi +
jmp loc_101D8CE  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101D8CB  +
mov [ecx] esi +
jmp loc_101D8CE  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jnz loc_101D8FA  +
mov ebx [ebx] +
cmp ebx dword_102D1F0 +
jnz loc_101D8E9  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_101D8FA  +
push esi  +
call sub_101D12C  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_101D920  +
mov ecx [edi] +
cmp ecx dword_102D1F0 +
jnz loc_101D914  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
jmp loc_101D920  +
push esi  +
call sub_101D10A  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jnz loc_101DA3A  +
jmp loc_101D9ED  +
cmp [esi+14h] edi +
jnz loc_101DA37  +
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jnz loc_101D9B8  +
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jnz loc_101D969  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1008FAA  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101D978  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_101D9E6  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101D997  +
mov ecx [eax] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101D14D  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1008FAA  +
jmp loc_101DA37  +
cmp dword ptr [eax+14h] 0 +
jnz loc_101D9D7  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D14D  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101D9FB  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101D9FB  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
mov eax [ebx+4] +
cmp esi [eax+4] +
jnz loc_101D934  +
jmp loc_101DA37  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101DA19  +
mov ecx [eax+8] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_1008FAA  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D14D  +
mov [esi+14h] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_100358C  +
mov esi [edi] +
mov eax dword_1027050 +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_101DA94  +
mov esi [ebx] +
jmp loc_101DAAB  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_101DAAB  +
push ecx  +
call sub_100353F  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_101DB1B  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_101DACD  +
mov [esi+4] eax +
jmp loc_101DAE4  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_101DAF4  +
mov [ecx+4] eax +
jmp loc_101DB02  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101DAFF  +
mov [ecx] eax +
jmp loc_101DB02  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_101DB94  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jnz loc_101DB31  +
mov [ecx+4] esi +
jmp loc_101DB3F  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101DB3C  +
mov [ecx] esi +
jmp loc_101DB3F  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jnz loc_101DB6B  +
mov ebx [ebx] +
cmp ebx dword_1027050 +
jnz loc_101DB5A  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_101DB6B  +
push esi  +
call sub_100353F  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_101DB91  +
mov ecx [edi] +
cmp ecx dword_1027050 +
jnz loc_101DB85  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
jmp loc_101DB91  +
push esi  +
call sub_101D19D  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jnz loc_101DCAB  +
jmp loc_101DC5E  +
cmp [esi+14h] edi +
jnz loc_101DCA8  +
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jnz loc_101DC29  +
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jnz loc_101DBDA  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D666  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101DBE9  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_101DC57  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101DC08  +
mov ecx [eax] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101D6B4  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D666  +
jmp loc_101DCA8  +
cmp dword ptr [eax+14h] 0 +
jnz loc_101DC48  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D6B4  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101DC6C  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101DC6C  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
mov eax [ebx+4] +
cmp esi [eax+4] +
jnz loc_101DBA5  +
jmp loc_101DCA8  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101DC8A  +
mov ecx [eax+8] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101D666  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D6B4  +
mov [esi+14h] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
push [ebp+var_4]  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+58h] +
mov edx [ecx+5Ch] +
push esi  +
jmp loc_101DCEC  +
mov esi [eax] +
cmp esi [ebp+arg_8] +
jz loc_101DCF2  +
add eax 4 +
cmp edx eax +
jnz loc_101DCE2  +
jmp loc_101DCFB  +
push eax  +
add ecx 54h +
call sub_101D7AD  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_10111DF  +
mov esi [edi] +
mov eax dword_1027058 +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_101DD39  +
mov esi [ebx] +
jmp loc_101DD50  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_101DD50  +
push ecx  +
call sub_1011204  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_101DDC0  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_101DD72  +
mov [esi+4] eax +
jmp loc_101DD89  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_101DD99  +
mov [ecx+4] eax +
jmp loc_101DDA7  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101DDA4  +
mov [ecx] eax +
jmp loc_101DDA7  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_101DE39  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jnz loc_101DDD6  +
mov [ecx+4] esi +
jmp loc_101DDE4  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_101DDE1  +
mov [ecx] esi +
jmp loc_101DDE4  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jnz loc_101DE10  +
mov ebx [ebx] +
cmp ebx dword_1027058 +
jnz loc_101DDFF  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_101DE10  +
push esi  +
call sub_1011204  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_101DE36  +
mov ecx [edi] +
cmp ecx dword_1027058 +
jnz loc_101DE2A  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
jmp loc_101DE36  +
push esi  +
call sub_101B02E  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jnz loc_101DF50  +
jmp loc_101DF03  +
cmp [esi+14h] edi +
jnz loc_101DF4D  +
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jnz loc_101DECE  +
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jnz loc_101DE7F  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101B423  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101DE8E  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_101DEFC  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101DEAD  +
mov ecx [eax] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101B050  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101B423  +
jmp loc_101DF4D  +
cmp dword ptr [eax+14h] 0 +
jnz loc_101DEED  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101B050  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_101DF11  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101DF11  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
mov eax [ebx+4] +
cmp esi [eax+4] +
jnz loc_101DE4A  +
jmp loc_101DF4D  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_101DF2F  +
mov ecx [eax+8] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101B423  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101B050  +
mov [esi+14h] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
mov esi [ebp+var_4] +
lea eax [esi+0Ch] +
push eax  +
call sub_1004087  +
push esi  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_101DFCD  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_101DFCD  +
cmp [ebp+arg_8] eax +
jnz loc_101DFCD  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_101D76D  +
mov ecx dword_1027050 +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_101DFF2  +
cmp ecx [ebp+arg_8] +
jz loc_101DFF2  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_100358C  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101DA63  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_101DFD3  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_1027088 +
mov ebx ecx +
mov esi edi +
jz loc_101E03E  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_101E001  +
mov esi [esi] +
lea eax [edi+0Ch] +
push eax  +
call sub_1004087  +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_1027088 +
pop ecx  +
mov edi esi +
jnz loc_101E018  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_1027058 +
mov ebx ecx +
mov esi edi +
jz loc_101E087  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_101E04A  +
mov esi [esi] +
lea eax [edi+0Ch] +
push eax  +
call sub_1004087  +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_1027058 +
pop ecx  +
mov edi esi +
jnz loc_101E061  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
mov edi offset stru_102D7DC +
push edi  +
mov dword ptr [esi] offset off_10087D0 +
call ds:EnterCriticalSection  +
mov eax [esi+4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
mov esi offset unk_102D7CC +
push eax  +
mov ecx esi +
call sub_100AF3C  +
mov eax [ebp+var_8] +
cmp dword_102D7D0 eax +
jz loc_101E0E1  +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_101D7F2  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101E093  +
test byte ptr [ebp+8] 1 +
jz loc_101E10B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101DF83  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp+var_4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D1FC  +
jnz loc_101E163  +
mov esi dword_1027050 +
and dword_1027050 0 +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_101E177  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_101E1C9  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_101E1C9  +
cmp [ebp+arg_8] eax +
jnz loc_101E1C9  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_101E001  +
mov ecx dword_1027088 +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_101E1EE  +
cmp ecx [ebp+arg_8] +
jz loc_101E1EE  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1003E2B  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1003FB1  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_101E1CF  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_101E247  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_101E247  +
cmp [ebp+arg_8] eax +
jnz loc_101E247  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_101E04A  +
mov ecx dword_1027058 +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_101E26C  +
cmp ecx [ebp+arg_8] +
jz loc_101E26C  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_10111DF  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101DD08  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_101E24D  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
test esi esi +
jnz loc_101E28F  +
mov eax 80004003h +
jmp loc_101E2B1  +
and dword ptr [esi] 0 +
lea eax [ebp+10h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_100ACA7  +
test eax eax +
jl loc_101E2B1  +
mov eax [ebp+10h] +
push esi  +
push dword ptr [ebp+0Ch]  +
add eax 8 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101E17F  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp+var_4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D1F4  +
jnz loc_101E307  +
mov esi dword_1027088 +
and dword_1027088 0 +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_101E31B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101E1FD  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp+var_4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D1F8  +
jnz loc_101E36F  +
mov esi dword_1027058 +
and dword_1027058 0 +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_101E383  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov eax offset byte_1023479 +
call sub_10014DD  +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
mov esi [ebp+10h] +
test esi esi +
push edi  +
mov [ebp-10h] esp +
jnz loc_101E3AE  +
mov eax 80004003h +
jmp loc_101E3E1  +
push esi  +
push offset dword_10035F0  +
lea eax [ebp+0Ch] +
push eax  +
call near ptr dword_101E278+3  +
test eax eax +
jl loc_101E3CA  +
cmp dword ptr [esi] 0 +
jz loc_101E3CA  +
xor eax eax +
jmp loc_101E3E1  +
mov eax 80040242h +
jmp loc_101E3E1  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_101E40B  +
mov eax 80004003h +
jmp loc_101E46B  +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
call sub_101E64C  +
mov esi eax +
test esi esi +
jl loc_101E452  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:AtlComPtrAssign  +
lea eax [edi+4] +
mov [esi+8] eax +
mov eax [eax+4] +
mov eax [eax] +
push ebx  +
mov [esi+0Ch] eax +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jz loc_101E467  +
mov ecx [ebp+arg_4] +
test ecx ecx +
mov edi ecx +
jz loc_101E467  +
call sub_101E475  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax offset byte_10234BD +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_101853C +
and dword ptr [ebp-4] 0 +
mov ecx offset unk_1027098 +
mov dword ptr [esi+10h] 1 +
call sub_1001CE4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101BCCA  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_1018568  +
push dword ptr [ebp+8]  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+8] +
test eax eax +
jnz loc_101E4F6  +
mov eax 80004005h +
jmp loc_101E500  +
mov eax [eax+4] +
mov eax [eax] +
mov [ecx+0Ch] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+10h] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
push edi  +
jz loc_101E5C1  +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_101E52D  +
cmp [ebp+14h] ebx +
jz loc_101E5C1  +
mov edi [ebp+8] +
cmp [edi+8] ebx +
jnz loc_101E53F  +
mov eax 80004005h +
jmp loc_101E5C6  +
push esi  +
mov [ebp-4] ebx +
mov [ebp+8] eax +
lea esi [edi+0Ch] +
mov eax [esi] +
mov ecx [edi+8] +
cmp eax [ecx+4] +
jz loc_101E5A0  +
cmp ebx [ebp+0Ch] +
jnb loc_101E5A0  +
add eax 0Ch +
push eax  +
push dword ptr [ebp+8]  +
call sub_1010F7E  +
test eax eax +
mov [ebp-4] eax +
jge loc_101E58E  +
mov eax [ebp+10h] +
jmp loc_101E585  +
mov eax [eax] +
test eax eax +
jz loc_101E57C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+10h] +
add eax 4 +
mov [ebp+10h] eax +
cmp eax [ebp+8] +
jb loc_101E570  +
xor ebx ebx +
jmp loc_101E59A  +
add dword ptr [ebp+8] 4 +
mov ecx esi +
call sub_10111DF  +
inc ebx  +
cmp dword ptr [ebp-4] 0 +
jge loc_101E549  +
mov eax [ebp+14h] +
test eax eax +
pop esi  +
jz loc_101E5AA  +
mov [eax] ebx +
cmp dword ptr [ebp-4] 0 +
jl loc_101E5BC  +
cmp ebx [ebp+0Ch] +
jnb loc_101E5BC  +
mov dword ptr [ebp-4] 1 +
mov eax [ebp-4] +
jmp loc_101E5C6  +
mov eax 80004003h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jz loc_101E607  +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [edi+0Ch] +
mov eax [edi+8] +
mov ecx [esi] +
dec dword ptr [ebp+0Ch]  +
cmp ecx [eax+4] +
jz loc_101E602  +
mov ecx esi +
call sub_10111DF  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101E5E6  +
jmp loc_101E605  +
xor ebx ebx +
inc ebx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_101E63F  +
test esi esi +
jz loc_101E63F  +
mov ecx esi +
call sub_101E475  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1023501 +
call sub_10014DD  +
push ecx  +
push esi  +
push edi  +
push 2Ch  +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
test esi esi +
jz loc_101E695  +
mov ecx esi +
call sub_101EA4E  +
lea ecx [esi+10h] +
call sub_10049A5  +
push offset Addend  +
mov dword ptr [esi] offset off_101853C +
call ds:InterlockedIncrement  +
jmp loc_101E697  +
xor esi esi +
test esi esi +
jz loc_101E69D  +
xor edi edi +
mov eax [ebp+8] +
mov ecx [ebp-0Ch] +
mov [eax] esi +
mov eax edi +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
test eax eax +
push edi  +
mov edi 80004003h +
jz loc_101E731  +
and dword ptr [eax] 0 +
lea eax [ebp-4] +
push eax  +
call sub_101E64C  +
mov edi eax +
test edi edi +
jl loc_101E731  +
mov edi [ebp+8] +
push ebx  +
mov ebx [edi+8] +
push esi  +
push dword ptr [edi+4]  +
mov esi [ebp-4] +
lea eax [esi+4] +
push eax  +
call ds:AtlComPtrAssign  +
push dword ptr [ebp+0Ch]  +
mov [esi+8] ebx +
mov eax [ebx+4] +
mov eax [eax] +
push offset dword_1018558  +
mov [esi+0Ch] eax +
mov eax [edi+0Ch] +
push offset off_1018568  +
push esi  +
mov [esi+0Ch] eax +
call ds:AtlInternalQueryInterface  +
mov edi eax +
test edi edi +
jge loc_101E72F  +
mov ecx esi +
call sub_101E475  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jnz loc_101E74F  +
mov eax 80004003h +
jmp loc_101E791  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax+8] +
mov eax [esi] +
push edi  +
mov edi 80004005h +
mov [ebp+arg_0] eax +
jmp loc_101E774  +
cmp [ebp+arg_4] 0 +
jle loc_101E77B  +
lea ecx [ebp+arg_0] +
call sub_1003E2B  +
mov eax [ebp+arg_0] +
dec [ebp+arg_4]  +
cmp eax esi +
jnz loc_101E763  +
cmp eax esi +
jz loc_101E78D  +
add eax 0Ch +
push eax  +
push [ebp+arg_8]  +
call sub_1010F7E  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_101E7AE  +
mov eax 80004003h +
jmp loc_101E80E  +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
call sub_101E9E1  +
mov esi eax +
test esi esi +
jl loc_101E7F5  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:AtlComPtrAssign  +
lea eax [edi+4] +
mov [esi+8] eax +
mov eax [eax+4] +
mov eax [eax] +
push ebx  +
mov [esi+0Ch] eax +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jz loc_101E80A  +
mov ecx [ebp+arg_4] +
test ecx ecx +
mov edi ecx +
jz loc_101E80A  +
call sub_101E818  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax offset byte_10234BD +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1018580 +
and dword ptr [ebp-4] 0 +
mov ecx offset unk_1027098 +
mov dword ptr [esi+10h] 1 +
call sub_1001CE4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101BCCA  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 10h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_10185AC  +
push dword ptr [ebp+8]  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+10h] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
push edi  +
jz loc_101E956  +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_101E8C2  +
cmp [ebp+14h] ebx +
jz loc_101E956  +
mov edi [ebp+8] +
cmp [edi+8] ebx +
jnz loc_101E8D4  +
mov eax 80004005h +
jmp loc_101E95B  +
push esi  +
mov [ebp-4] ebx +
mov [ebp+8] eax +
lea esi [edi+0Ch] +
mov eax [esi] +
mov ecx [edi+8] +
cmp eax [ecx+4] +
jz loc_101E935  +
cmp ebx [ebp+0Ch] +
jnb loc_101E935  +
add eax 0Ch +
push eax  +
push dword ptr [ebp+8]  +
call sub_1010F7E  +
test eax eax +
mov [ebp-4] eax +
jge loc_101E923  +
mov eax [ebp+10h] +
jmp loc_101E91A  +
mov eax [eax] +
test eax eax +
jz loc_101E911  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+10h] +
add eax 4 +
mov [ebp+10h] eax +
cmp eax [ebp+8] +
jb loc_101E905  +
xor ebx ebx +
jmp loc_101E92F  +
add dword ptr [ebp+8] 4 +
mov ecx esi +
call sub_1003E2B  +
inc ebx  +
cmp dword ptr [ebp-4] 0 +
jge loc_101E8DE  +
mov eax [ebp+14h] +
test eax eax +
pop esi  +
jz loc_101E93F  +
mov [eax] ebx +
cmp dword ptr [ebp-4] 0 +
jl loc_101E951  +
cmp ebx [ebp+0Ch] +
jnb loc_101E951  +
mov dword ptr [ebp-4] 1 +
mov eax [ebp-4] +
jmp loc_101E95B  +
mov eax 80004003h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jz loc_101E99C  +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [edi+0Ch] +
mov eax [edi+8] +
mov ecx [esi] +
dec dword ptr [ebp+0Ch]  +
cmp ecx [eax+4] +
jz loc_101E997  +
mov ecx esi +
call sub_1003E2B  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101E97B  +
jmp loc_101E99A  +
xor ebx ebx +
inc ebx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_101E9D4  +
test esi esi +
jz loc_101E9D4  +
mov ecx esi +
call sub_101E818  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1023501 +
call sub_10014DD  +
push ecx  +
push esi  +
push edi  +
push 2Ch  +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
test esi esi +
jz loc_101EA2A  +
mov ecx esi +
call sub_101EA4E  +
lea ecx [esi+10h] +
call sub_10049A5  +
push offset Addend  +
mov dword ptr [esi] offset off_1018580 +
call ds:InterlockedIncrement  +
jmp loc_101EA2C  +
xor esi esi +
test esi esi +
jz loc_101EA32  +
xor edi edi +
mov eax [ebp+8] +
mov ecx [ebp-0Ch] +
mov [eax] esi +
mov eax edi +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
test eax eax +
push edi  +
mov edi 80004003h +
jz loc_101EAD2  +
and dword ptr [eax] 0 +
lea eax [ebp-4] +
push eax  +
call sub_101E9E1  +
mov edi eax +
test edi edi +
jl loc_101EAD2  +
mov edi [ebp+8] +
push ebx  +
mov ebx [edi+8] +
push esi  +
push dword ptr [edi+4]  +
mov esi [ebp-4] +
lea eax [esi+4] +
push eax  +
call ds:AtlComPtrAssign  +
push dword ptr [ebp+0Ch]  +
mov [esi+8] ebx +
mov eax [ebx+4] +
mov eax [eax] +
push offset dword_101859C  +
mov [esi+0Ch] eax +
mov eax [edi+0Ch] +
push offset off_10185AC  +
push esi  +
mov [esi+0Ch] eax +
call ds:AtlInternalQueryInterface  +
mov edi eax +
test edi edi +
jge loc_101EAD0  +
mov ecx esi +
call sub_101E818  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
inc eax  +
push eax  +
push [ebp+arg_0]  +
call sub_1010F2D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_101EB10  +
mov eax 80004003h +
jmp loc_101EB4B  +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [edi+4] +
call sub_101EB55  +
mov eax [ebp+arg_8] +
cmp [edi+8] eax +
pop edi  +
jz loc_101EB46  +
mov ecx [eax+10h] +
mov [esi] ecx +
mov eax [eax+10h] +
test eax eax +
jz loc_101EB42  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_101EB4B  +
mov eax 80004005h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_101EB96  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jz loc_101EB7E  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_101EB7E  +
lea eax [ebp+arg_4] +
jmp loc_101EB84  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_1027058 +
cmp ecx edx +
jz loc_101EBC4  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jnb loc_101EBBB  +
mov ecx [ecx+8] +
jmp loc_101EBBF  +
mov eax ecx +
mov ecx [ecx] +
cmp ecx edx +
jnz loc_101EBB1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
lea edi [esi+4] +
push eax  +
mov ecx edi +
call sub_101EB55  +
mov eax [ebp+arg_0] +
cmp [esi+8] eax +
jz loc_101EC01  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_101DD08  +
xor eax eax +
jmp loc_101EC06  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
inc eax  +
push eax  +
push [ebp+arg_0]  +
call sub_101E73D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
lea edi [esi+4] +
push eax  +
mov ecx edi +
call sub_100320B  +
mov eax [ebp+arg_0] +
cmp [esi+8] eax +
jz loc_101EC63  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_1003FB1  +
xor eax eax +
jmp loc_101EC68  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax offset dword_1023554 +
call sub_10014DD  +
sub esp 18h +
push ebx  +
push edi  +
mov edi [ebp+10h] +
xor ebx ebx +
cmp edi ebx +
mov [ebp-10h] edi +
jz loc_101EC94  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
push esi  +
mov esi ds:AtlComPtrAssign +
push edi  +
lea eax [ebp+10h] +
push eax  +
mov [ebp-4] ebx +
mov [ebp+10h] ebx +
call esi  +
mov eax [ebp+0Ch] +
push dword ptr [ebp+10h]  +
mov [ebp-1Ch] eax +
lea eax [ebp-18h] +
push eax  +
mov [ebp-18h] ebx +
call esi  +
mov eax [ebp+10h] +
cmp eax ebx +
mov byte ptr [ebp-4] 1 +
jz loc_101ECCB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi ebx +
mov byte ptr [ebp-4] 2 +
jz loc_101ECD9  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [ebp-1Ch] +
push dword ptr [ebp-18h]  +
mov [ebp-14h] eax +
lea eax [ebp-10h] +
push eax  +
mov [ebp-10h] ebx +
call esi  +
mov ecx [ebp+8] +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
add ecx 4 +
mov byte ptr [ebp-4] 3 +
call sub_1005657  +
mov eax [ebp-10h] +
cmp eax ebx +
mov byte ptr [ebp-4] 2 +
pop esi  +
jz loc_101ED14  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-20h] bl +
mov eax [ebp-18h] +
jnz loc_101ED31  +
cmp eax ebx +
jz loc_101ED2A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_101ED3D  +
cmp eax ebx +
jz loc_101ED3B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
mov ecx [ebp-0Ch] +
pop edi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_101ED6C  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jnz loc_101ED6C  +
mov eax [ecx+8] +
jmp loc_101ED89  +
mov eax [ecx] +
cmp eax dword_1027088 +
jz loc_101ED82  +
push eax  +
call sub_101094C  +
jmp loc_101ED89  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_101ED7E  +
mov [esi] eax +
pop esi  +
retn   +
***
mov eax offset byte_10237D1 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
push edi  +
mov [ebp-10h] esi +
lea ecx [esi+358h] +
mov dword ptr [ebp-4] 0Dh +
call nullsub_1  +
lea ecx [esi+33Ch] +
mov byte ptr [ebp-4] 0Ch +
call nullsub_1  +
lea ecx [esi+32Ch] +
mov byte ptr [ebp-4] 0Bh +
call sub_101E117  +
lea ecx [esi+318h] +
call sub_1006CCE  +
lea ecx [esi+2E8h] +
mov byte ptr [ebp-4] 9 +
call sub_1020FB6  +
push offset loc_101D7D7  +
push 3  +
push 30h  +
lea eax [esi+240h] +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_10038F0  +
lea ecx [esi+0ECh] +
mov byte ptr [ebp-4] 7 +
call sub_1020FC6  +
lea ecx [esi+0CCh] +
mov byte ptr [ebp-4] 6 +
call sub_1003741  +
lea ecx [esi+0B8h] +
mov byte ptr [ebp-4] 5 +
call sub_100377F  +
push dword ptr [esi+90h]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [esi+8Ch]  +
call edi  +
lea ecx [esi+28h] +
mov byte ptr [ebp-4] 2 +
call sub_101E2BB  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 1 +
call sub_101E323  +
mov ecx esi +
mov byte ptr [ebp-4] 0 +
call sub_101E093  +
add esi 54h +
push esi  +
call ds:DeleteCriticalSection  +
mov ecx [ebp-0Ch] +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+88Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 48h +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jnz loc_101EED7  +
push offset Addend  +
call edi  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+88Ch] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+48h] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jnz loc_101EF2B  +
lea ecx [esi-8] +
test ecx ecx +
jz loc_101EF3A  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_101EF3A  +
cmp edi 1 +
jnz loc_101EF3A  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101EEA4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101EEED  +
***
sub dword ptr [esp+4] 8 +
jmp loc_101EEA4  +
***
sub dword ptr [esp+4] 8 +
jmp loc_101EEED  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_101EEA4  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_101EEED  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1004365  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+14h] 0 +
mov eax 80004003h +
jz loc_101EFCE  +
push dword ptr [ebp+14h]  +
mov ecx offset off_102D84C +
push dword ptr [ebp+10h]  +
call sub_101C0F5  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_102D84C +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101C405  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_102D858 +
xor eax eax +
test ecx ecx +
jnz loc_101F026  +
push dword ptr [ebp+14h]  +
mov ecx offset off_102D84C +
call sub_101C12F  +
mov ecx dword_102D858 +
test ecx ecx +
jz loc_101F041  +
push dword ptr [ebp+28h]  +
mov eax [ecx] +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push ecx  +
call dword ptr [eax+2Ch]  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+14h] 0 +
mov eax 80004003h +
jz loc_101F06A  +
push dword ptr [ebp+14h]  +
mov ecx offset off_102D868 +
push dword ptr [ebp+10h]  +
call sub_101C0F5  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_102D868 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101C405  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_102D874 +
xor eax eax +
test ecx ecx +
jnz loc_101F0C2  +
push dword ptr [ebp+14h]  +
mov ecx offset off_102D868 +
call sub_101C12F  +
mov ecx dword_102D874 +
test ecx ecx +
jz loc_101F0DD  +
push dword ptr [ebp+28h]  +
mov eax [ecx] +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push ecx  +
call dword ptr [eax+2Ch]  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+468h] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 48h +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jnz loc_101F119  +
push offset Addend  +
call edi  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+468h] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+48h] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jnz loc_101F16D  +
lea ecx [esi-8] +
test ecx ecx +
jz loc_101F17C  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_101F17C  +
cmp edi 1 +
jnz loc_101F17C  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 8 +
jmp loc_101F0E6  +
***
sub dword ptr [esp+4] 8 +
jmp loc_101F12F  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_101F12F  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1004365  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_1004365  +
***
mov eax offset byte_102381D +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001688 +
mov dword ptr [esi+8] offset off_10019D4 +
mov dword ptr [esi+0Ch] offset off_100E9A4 +
mov dword ptr [esi+10h] offset off_1010E70 +
mov dword ptr [esi+24h] offset off_100303C +
xor eax eax +
inc eax  +
mov [ebp-4] eax +
mov [esi+50h] eax +
call sub_101B174  +
lea eax [esi+894h] +
push eax  +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101EDAC  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov eax offset byte_1023869 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001A5C +
mov dword ptr [esi+8] offset off_1001A08 +
mov dword ptr [esi+0Ch] offset off_100E9FC +
mov dword ptr [esi+10h] offset off_1010EA4 +
mov dword ptr [esi+24h] offset off_1003070 +
xor eax eax +
inc eax  +
mov [ebp-4] eax +
mov [esi+50h] eax +
call sub_101F93D  +
lea eax [esi+470h] +
push eax  +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101EDAC  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F1FF  +
test byte ptr [ebp+8] 1 +
jz loc_101F2EF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F26A  +
test byte ptr [ebp+8] 1 +
jz loc_101F315  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1003283  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10030F9  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1003283  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10030F9  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_1003283  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_10030F9  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10032C9  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100313F  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10032C9  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100313F  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_10032C9  +
***
sub dword ptr [esp+4] 1Ch +
jmp loc_100313F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F1FF  +
test byte ptr [ebp+8] 1 +
jz loc_101F3EF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101F26A  +
test byte ptr [ebp+8] 1 +
jz loc_101F415  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_102399B +
call sub_10014DD  +
sub esp 2Ch +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
push 230h  +
mov [ebp-18h] esi +
mov [ebp-28h] ebx +
mov [ebp-20h] ebx +
mov [ebp-34h] ebx +
call ??2@YAPAXI@Z  +
mov edx eax +
cmp edx ebx +
pop ecx  +
mov [ebp-24h] edx +
jnz loc_101F45E  +
mov eax 8007000Eh +
jmp loc_101F70E  +
push edi  +
lea ecx [ebp-28h] +
lea eax [esi+24h] +
push ecx  +
push eax  +
call sub_1006AA5  +
push ebx  +
xor eax eax +
mov edi edx +
mov dword ptr [ebp-14h] 4 +
mov ecx 8Ch +
push ebx  +
stos   +
lea eax [ebp-14h] +
push eax  +
push ebx  +
push edx  +
call sub_100B4A6  +
cmp eax ebx +
jl loc_101F6FD  +
cmp [ebp-14h] ebx +
mov esi [ebp-24h] +
mov [ebp-30h] ebx +
jbe loc_101F6CA  +
cmp [esi] ebx +
jz loc_101F6B5  +
cmp [ebp-28h] ebx +
mov [ebp-1Ch] ebx +
jle loc_101F52C  +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp-1Ch]  +
mov eax [ebp-18h] +
add eax 24h +
push eax  +
mov [ebp-4] ebx +
call sub_1007F03  +
cmp eax ebx +
mov eax [ebp-10h] +
jl loc_101F513  +
mov edi eax +
neg edi  +
sbb edi edi +
lea ecx [eax-8] +
and edi ecx +
cmp edi ebx +
jz loc_101F513  +
mov eax [edi] +
lea ecx [ebp-38h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
cmp eax ebx +
jl loc_101F510  +
cmp dword ptr [ebp-38h] 2 +
jnz loc_101F510  +
cmp edi ebx +
jz loc_101F510  +
mov eax [edi+44Ch] +
push dword ptr [eax]  +
push dword ptr [esi]  +
call ds:wcscmp  +
test eax eax +
pop ecx  +
pop ecx  +
jz loc_101F577  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101F521  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-1Ch]  +
mov eax [ebp-1Ch] +
cmp eax [ebp-28h] +
jl loc_101F4B2  +
push dword ptr [esi]  +
lea eax [ebp-1Ch] +
push eax  +
mov [ebp-1Ch] ebx +
call sub_100EA15  +
test eax eax +
jge loc_101F614  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
mov eax [esi+4] +
cmp eax ebx +
pop ecx  +
mov [esi] ebx +
jz loc_101F55D  +
push eax  +
call ds:RegCloseKey  +
mov [esi+4] ebx +
push dword ptr [esi+8]  +
mov ecx offset unk_1027098 +
call sub_10204FF  +
push dword ptr [esi+1Ch]  +
call HidD_FreePreparsedData  +
jmp loc_101F6B5  +
lea eax [edi+234h] +
cmp [eax] ebx +
jnz loc_101F5F2  +
mov dword ptr [eax] 1 +
mov edx [esi+8] +
lea eax [edi+44Ch] +
mov ecx [eax] +
mov [ecx+8] edx +
mov ecx [esi+4] +
mov eax [eax] +
mov [eax+4] ecx +
mov ecx [ebp-18h] +
push edi  +
call sub_100F191  +
lea eax [ebp-20h] +
push eax  +
mov eax [ebp-18h] +
add eax 24h +
push eax  +
call sub_10044D3  +
mov eax [ebp-20h] +
push ebx  +
dec eax  +
push eax  +
push 2C8h  +
push 0FFFFh  +
call ds:PostMessageW  +
mov ecx edi +
call sub_1008E70  +
cmp eax ebx +
jge loc_101F602  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101F5E8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_101F70D  +
push dword ptr [esi+8]  +
mov ecx offset unk_1027098 +
call sub_10204FF  +
mov [esi+8] ebx +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
mov eax [ebp-10h] +
pop ecx  +
mov [esi] ebx +
jmp loc_101F6A7  +
mov edi [ebp-1Ch] +
push esi  +
mov ecx edi +
call sub_100AFFF  +
cmp eax ebx +
jge loc_101F63F  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
cmp edi ebx +
pop ecx  +
mov [esi] ebx +
jz loc_101F6B5  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax]  +
jmp loc_101F6B5  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] ebx +
mov [ebp-2Ch] ebx +
lea edx [ebp-2Ch] +
push edx  +
lea eax [edi+8] +
mov ecx [eax] +
push offset nullsub_2  +
push eax  +
mov dword ptr [ebp-4] 1 +
call dword ptr [ecx]  +
push dword ptr [ebp-2Ch]  +
mov eax [ebp-18h] +
push dword ptr [edi+4]  +
add eax 24h +
push eax  +
call sub_100E752  +
push edi  +
mov edi [ebp-18h] +
mov ecx edi +
call sub_100F191  +
lea eax [ebp-20h] +
push eax  +
lea eax [edi+24h] +
push eax  +
call sub_10044D3  +
mov eax [ebp-20h] +
push ebx  +
dec eax  +
push eax  +
push 2C8h  +
push 0FFFFh  +
call ds:PostMessageW  +
mov eax [ebp-2Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_101F6B5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add esi 8Ch +
inc dword ptr [ebp-30h]  +
mov eax [ebp-30h] +
cmp eax [ebp-14h] +
jb loc_101F4A2  +
push 4  +
pop eax  +
add [ebp-34h] eax +
cmp [ebp-14h] eax +
jb loc_101F702  +
mov edi [ebp-24h] +
mov [ebp-14h] eax +
push ebx  +
xor eax eax +
mov ecx 8Ch +
push ebx  +
stos   +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-34h]  +
push dword ptr [ebp-24h]  +
call sub_100B4A6  +
test eax eax +
jge loc_101F493  +
mov ebx 80004005h +
push dword ptr [ebp-24h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax ebx +
pop edi  +
mov ecx [ebp-0Ch] +
pop esi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov eax offset byte_1023305 +
call sub_10014DD  +
sub esp 0Ch +
push ebx  +
push edi  +
mov ebx ecx +
lea ecx [ebp-18h] +
lea edi [ebx+20h] +
mov eax [edi] +
push ecx  +
push edi  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-18h]  +
push offset aCmanagerResume  +
call nullsub_1  +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [ebp-18h] 0 +
pop ecx  +
pop ecx  +
jbe loc_101F7B1  +
push esi  +
and dword ptr [ebp-14h] 0 +
mov eax [edi] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
push ecx  +
push dword ptr [ebp-10h]  +
push edi  +
call dword ptr [eax+14h]  +
mov esi [ebp-14h] +
lea eax [esi-8] +
neg esi  +
sbb esi esi +
and esi eax +
mov eax [esi+80h] +
test eax eax +
jz loc_101F78B  +
push eax  +
call ds:SetEvent  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101F7A5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
cmp eax [ebp-18h] +
jb loc_101F759  +
pop esi  +
mov ecx ebx +
call sub_101D01F  +
test eax eax +
jz loc_101F7C3  +
mov ecx ebx +
call sub_101F421  +
push dword ptr [ebx+84h]  +
or dword ptr [ebx+80h] 0FFFFFFFFh +
call ds:SetEvent  +
mov ecx [ebp-0Ch] +
pop edi  +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aCmanagerOnuser  +
mov esi ecx +
call nullsub_1  +
mov eax [ebp+arg_4] +
dec eax  +
pop ecx  +
jz loc_101F87C  +
dec eax  +
jz loc_101F85F  +
sub eax 3 +
jnz loc_101F897  +
push 1  +
mov ecx esi +
call sub_1007E62  +
jmp loc_101F897  +
push 0  +
mov ecx esi +
call sub_101CFC7  +
mov ecx esi +
call sub_101CEFD  +
test eax eax +
jnz loc_101F897  +
mov ecx esi +
call sub_101D2CE  +
jmp loc_101F897  +
push 1  +
mov ecx esi +
call sub_101CFC7  +
mov ecx esi +
call sub_101CEFD  +
test eax eax +
jnz loc_101F897  +
mov ecx esi +
call sub_101F721  +
push offset aCmanagerOnus_0  +
call nullsub_1  +
pop ecx  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1020C61  +
lea eax [esi+450h] +
push eax  +
call ds:DeleteCriticalSection  +
mov eax [esi+114h] +
test eax eax +
jz loc_101F965  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+120h] +
test eax eax +
jz loc_101F976  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+128h] +
test eax eax +
jz loc_101F987  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
lea ecx [esi+2E8h] +
pop esi  +
jmp loc_1021050  +
***
mov eax hhk +
test eax eax +
jz loc_101F9A8  +
push eax  +
call ds:UnhookWindowsHookEx  +
and hhk 0 +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
cmp dword ptr [ecx+14h] 0 +
jnz loc_101F9E9  +
mov eax [ecx+4] +
cmp [eax+4] ecx +
jnz loc_101F9E9  +
mov eax [ecx+8] +
jmp loc_101FA06  +
mov eax [ecx] +
cmp eax dword_1027000 +
jz loc_101F9FF  +
push eax  +
call sub_10041CC  +
jmp loc_101FA06  +
mov [esi] eax +
mov ecx eax +
mov eax [ecx+4] +
cmp ecx [eax] +
jz loc_101F9FB  +
mov [esi] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
mov dword ptr [ecx+46Ch] 1 +
push [ebp+arg_0]  +
call sub_1013CD6  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
and dword ptr [ecx+46Ch] 0 +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1013CD6  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+188h] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 4 +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jnz loc_101FA89  +
push offset Addend  +
call edi  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+188h] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+4] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jnz loc_101FADD  +
lea ecx [esi-8] +
test ecx ecx +
jz loc_101FAEC  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_101FAEC  +
cmp edi 1 +
jnz loc_101FAEC  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
lea eax [ecx+8] +
retn   +
***
mov eax offset byte_1023AFD +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1012458 +
mov dword ptr [esi+8] offset off_10017B8 +
xor eax eax +
inc eax  +
mov [ebp-4] eax +
mov [esi+0Ch] eax +
call sub_1019A1C  +
lea eax [esi+190h] +
push eax  +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1003C28  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FB03  +
test byte ptr [ebp+8] 1 +
jz loc_101FB73  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FB03  +
test byte ptr [ebp+8] 1 +
jz loc_101FB99  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+48h] +
push ebx  +
call ds:EnterCriticalSection  +
mov edi ds:InterlockedIncrement +
add esi 18h +
push esi  +
call edi  +
cmp dword ptr [esi] 2 +
mov [ebp+8] eax +
jnz loc_101FBD5  +
push offset Addend  +
call edi  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea ebx [esi+48h] +
push ebx  +
call ds:EnterCriticalSection  +
lea edi [esi+18h] +
push edi  +
call ds:InterlockedDecrement  +
mov edi [edi] +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jnz loc_101FC26  +
lea ecx [esi-8] +
test ecx ecx +
jz loc_101FC35  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_101FC35  +
cmp edi 1 +
jnz loc_101FC35  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+50h] +
push eax  +
mov dword ptr [esi] offset off_100F630 +
mov dword ptr [esi+8] offset off_1001BE8 +
mov dword ptr [esi+0Ch] offset off_1006944 +
mov dword ptr [esi+20h] 1 +
call ds:DeleteCriticalSection  +
mov ecx esi +
pop esi  +
jmp sub_101C063  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FC5E  +
test byte ptr [ebp+8] 1 +
jz loc_101FCAF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101FC5E  +
test byte ptr [ebp+8] 1 +
jz loc_101FCD5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_101FCF8  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101FD31  +
mov ecx esi +
call sub_101FCE1  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
push edi  +
jz loc_101FD4E  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [esi+4] +
test eax eax +
mov edi ds:__imp_free +
jz loc_101FD5F  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+8] +
test eax eax +
jz loc_101FD6A  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_101FD75  +
push eax  +
call edi  +
pop ecx  +
mov esi [esi+10h] +
test esi esi +
jz loc_101FD80  +
push esi  +
call edi  +
pop ecx  +
pop edi  +
pop esi  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
push offset SubKey  +
push [ebp+hKey]  +
mov edi ecx +
call ds:RegCreateKeyW  +
test eax eax +
jnz loc_1020484  +
cmp [ebp+hKey] 80000002h +
push ebx  +
push esi  +
mov esi ds:RegSetValueExW +
push 4  +
pop ebx  +
jnz loc_10201AF  +
push ebx  +
lea eax [edi+104h] +
push eax  +
push ebx  +
push 0  +
push offset aShakeangle_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+110h] +
push eax  +
push ebx  +
push 0  +
push offset aShakerate_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+164h] +
push eax  +
push ebx  +
push 0  +
push offset aShakesize_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+170h] +
push eax  +
push ebx  +
push 0  +
push offset aShakecount_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+17Ch] +
push eax  +
push ebx  +
push 0  +
push offset aShaketime_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+14Ch] +
push eax  +
push ebx  +
push 0  +
push offset aHoverlimit_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+11Ch] +
push eax  +
push ebx  +
push 0  +
push offset aSplash_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+128h] +
push eax  +
push ebx  +
push 0  +
push offset aCancel_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+134h] +
push eax  +
push ebx  +
push 0  +
push offset aMove_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+140h] +
push eax  +
push ebx  +
push 0  +
push offset aDbldist_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+158h] +
push eax  +
push ebx  +
push 0  +
push offset aHovercount_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+188h] +
push eax  +
push ebx  +
push 0  +
push offset aDbltime_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+194h] +
push eax  +
push ebx  +
push 0  +
push offset aTaptime_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+1A0h] +
push eax  +
push ebx  +
push 0  +
push offset aWaittime_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+1ACh] +
push eax  +
push ebx  +
push 0  +
push offset aOpentime_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+1B8h] +
push eax  +
push ebx  +
push 0  +
push offset aHoldtime_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+1C4h] +
push eax  +
push ebx  +
push 0  +
push offset aClosetime_min  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+108h] +
push eax  +
push ebx  +
push 0  +
push offset aShakeangle_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+114h] +
push eax  +
push ebx  +
push 0  +
push offset aShakerate_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+168h] +
push eax  +
push ebx  +
push 0  +
push offset aShakesize_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+174h] +
push eax  +
push ebx  +
push 0  +
push offset aShakecount_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+180h] +
push eax  +
push ebx  +
push 0  +
push offset aShaketime_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+150h] +
push eax  +
push ebx  +
push 0  +
push offset aHoverlimit_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+120h] +
push eax  +
push ebx  +
push 0  +
push offset aSplash_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+12Ch] +
push eax  +
push ebx  +
push 0  +
push offset aCancel_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+138h] +
push eax  +
push ebx  +
push 0  +
push offset aMove_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+144h] +
push eax  +
push ebx  +
push 0  +
push offset aDbldist_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+15Ch] +
push eax  +
push ebx  +
push 0  +
push offset aHovercount_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+18Ch] +
push eax  +
push ebx  +
push 0  +
push offset aDbltime_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+198h] +
push eax  +
push ebx  +
push 0  +
push offset aTaptime_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+1A4h] +
push eax  +
push ebx  +
push 0  +
push offset aWaittime_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+1B0h] +
push eax  +
push ebx  +
push 0  +
push offset aOpentime_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+1BCh] +
push eax  +
push ebx  +
push 0  +
push offset aHoldtime_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+1C8h] +
push eax  +
push ebx  +
push 0  +
push offset aClosetime_max  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+9Ch] +
push eax  +
push ebx  +
push 0  +
push offset aShakeangle  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0A0h] +
push eax  +
push ebx  +
push 0  +
push offset aShakerate  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0BCh] +
push eax  +
push ebx  +
push 0  +
push offset aShakesize  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0C0h] +
push eax  +
push ebx  +
push 0  +
push offset aShakecount  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0C4h] +
push eax  +
push ebx  +
push 0  +
push offset aShaketime  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0B4h] +
push eax  +
push ebx  +
push 0  +
push offset aHoverlimit  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0A4h] +
push eax  +
push ebx  +
push 0  +
push offset aSplash  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0A8h] +
push eax  +
push ebx  +
push 0  +
push offset aCancel  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0ACh] +
push eax  +
push ebx  +
push 0  +
push offset aMove  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0B0h] +
push eax  +
push ebx  +
push 0  +
push offset aDbldist  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0B8h] +
push eax  +
push ebx  +
push 0  +
push offset aHovercount  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0C8h] +
push eax  +
push ebx  +
push 0  +
push offset aDbltime  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0E4h] +
push eax  +
push ebx  +
push 0  +
push offset aLagtime  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0CCh] +
push eax  +
push ebx  +
push 0  +
push offset aTaptime  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0D0h] +
push eax  +
push ebx  +
push 0  +
push offset aWaittime  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0D4h] +
push eax  +
push ebx  +
push 0  +
push offset aOpentime  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0D8h] +
push eax  +
push ebx  +
push 0  +
push offset aHoldtime  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+0DCh] +
push eax  +
push ebx  +
push 0  +
push offset aClosetime  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+2D4h] +
push eax  +
push ebx  +
push 0  +
push offset aV2_singleclick  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+2D8h] +
push eax  +
push ebx  +
push 0  +
push offset aV2_doubleclick  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+2DCh] +
push eax  +
push ebx  +
push 0  +
push offset aV2_holdmode  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+8Ch] +
push eax  +
push ebx  +
push 0  +
push offset aEraseenable  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+98h] +
push eax  +
push ebx  +
push 0  +
push offset aRightmaskenabl  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
push ebx  +
lea eax [edi+94h] +
push eax  +
push ebx  +
push 0  +
push offset aShakeenable  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1020479  +
mov eax [edi+90h] +
neg eax  +
sbb eax eax +
add eax 3 +
push ebx  +
mov dword ptr [ebp+Data] eax +
lea eax [ebp+Data] +
push eax  +
push ebx  +
push 0  +
push offset aHoldmode  +
push [ebp+phkResult]  +
call esi  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
pop esi  +
pop ebx  +
xor eax eax +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
mov edi ecx +
call ds:CoInitializeEx  +
cmp eax esi +
jl loc_10204D2  +
push esi  +
push esi  +
push esi  +
push 64h  +
push edi  +
call ds:AtlModuleUpdateRegistryFromResourceD  +
push esi  +
push 1  +
push edi  +
call ds:AtlModuleUnregisterServerEx  +
push offset SubKey  +
push 80000001h  +
call ds:RegDeleteKeyW  +
call ds:CoUninitialize  +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
and dword ptr [ecx+6ECh] 0 +
push esi  +
lea esi [ecx+6E8h] +
mov eax [esi] +
test eax eax +
jz loc_10204F8  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hObject] +
cmp eax [ecx+6ECh] +
jz loc_1020516  +
push eax  +
call ds:CloseHandle  +
pop ebp  +
retn 4  +
***
pop ecx  +
or dword ptr [eax-58h] 0FFFFFFFFh +
or dword ptr [eax] 0FFFFFFFFh +
or dword ptr [eax+58h] 0FFFFFFFFh +
add eax 2Ch +
dec ecx  +
jnz loc_1020528  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1027090 +
push ebx  +
push edi  +
push 2  +
xor edi edi +
push edi  +
mov [ebp+var_4] eax +
mov ebx ecx +
call ds:CoInitializeEx  +
cmp eax edi +
jl loc_102066B  +
push esi  +
push edi  +
push edi  +
push 1  +
push 64h  +
push ebx  +
call ds:AtlModuleUpdateRegistryFromResourceD  +
mov esi 20006h +
push esi  +
push offset aAppid  +
push 80000000h  +
lea ecx [ebp+var_208] +
mov [ebp+var_208] edi +
call sub_101FCFF  +
cmp eax edi +
jz loc_10205A3  +
mov edi eax +
jmp loc_102065D  +
push esi  +
push offset a7f42962016d147  +
push [ebp+var_208]  +
lea ecx [ebp+var_210] +
mov [ebp+var_210] edi +
call sub_101FCFF  +
cmp eax edi +
jz loc_10205CB  +
mov edi eax +
jmp loc_1020652  +
push edi  +
push [ebp+arg_0]  +
push ebx  +
call ds:AtlModuleRegisterServer  +
mov esi 80000002h +
push esi  +
mov ecx ebx +
call sub_101FD99  +
cmp eax edi +
jl loc_10205C4  +
lea eax [ebp+hKey] +
push eax  +
push offset SubKey  +
push esi  +
call ds:RegCreateKeyW  +
test eax eax +
jz loc_1020605  +
mov edi 80004005h +
jmp loc_1020652  +
lea eax [ebp+Data] +
push offset aMicrosoftPenSy  +
push eax  +
call ds:wcscpy  +
lea eax [ebp+Data] +
push eax  +
call ds:__imp_wcslen  +
add esp 0Ch +
shl eax 1 +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 1  +
push edi  +
push [ebp+hKey]  +
call ds:RegSetValueW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
call ds:CoUninitialize  +
lea ecx [ebp+var_210] +
call sub_101FCE1  +
lea ecx [ebp+var_208] +
call sub_101FCE1  +
mov eax edi +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop ebx  +
call sub_1007DC7  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_1020760  +
push dword ptr [ebp+8]  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_102078F  +
mov eax 80004003h +
jmp loc_10207A0  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 84h +
call sub_1005FA9  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
push esi  +
jnz loc_10207C0  +
mov eax 80004003h +
jmp loc_1020846  +
cmp dword ptr [ebp+0Ch] 1 +
push edi  +
jnz loc_10207FC  +
mov edx [ebp+8] +
mov ecx [edx+10Ch] +
cmp [eax] ecx +
jnz loc_10207F3  +
mov edi [ebp+14h] +
test edi edi +
jz loc_10207F3  +
mov esi [edx+108h] +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
xor eax eax +
jmp loc_1020845  +
mov [eax] ecx +
mov eax 8007007Ah +
jmp loc_1020845  +
cmp dword ptr [ebp+0Ch] 2 +
jnz loc_102081E  +
mov edx [ebp+8] +
mov ecx [edx+118h] +
cmp [eax] ecx +
jnz loc_10207F3  +
mov edi [ebp+14h] +
test edi edi +
jz loc_10207F3  +
mov esi [edx+114h] +
jmp loc_10207E1  +
***
cmp dword ptr [ebp+0Ch] 4 +
jnz loc_1020840  +
mov edx [ebp+8] +
mov ecx [edx+120h] +
cmp [eax] ecx +
jnz loc_10207F3  +
mov edi [ebp+14h] +
test edi edi +
jz loc_10207F3  +
mov esi [edx+11Ch] +
jmp loc_10207E1  +
***
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
lea edi [ebx-0Ch] +
mov eax [edi] +
lea ecx [ebp-8] +
push ecx  +
mov ecx edi +
mov [ebp-4] edi +
call dword ptr [eax+4]  +
cmp dword ptr [ebp-8] 2 +
jnz loc_1020A23  +
test byte ptr [ebx+0A8h] 1 +
jz loc_1020A23  +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_1020A23  +
cmp dword ptr [ebp+0Ch] 2 +
jnz loc_1020947  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
mov eax [ebx+114h] +
test eax eax +
jz loc_10208B8  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [ebx+114h] 0 +
pop ecx  +
mov eax [ebp+10h] +
test eax eax +
mov [ebx+118h] eax +
jz loc_102090B  +
mov esi [ebp+14h] +
test esi esi +
jz loc_102090B  +
push eax  +
call ??2@YAPAXI@Z  +
test eax eax +
pop ecx  +
mov [ebx+114h] eax +
jnz loc_10208F0  +
mov esi 8007000Eh +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+14h]  +
mov eax esi +
jmp loc_1020A28  +
mov ecx [ebx+118h] +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov edi [ebp-4] +
jmp loc_1020912  +
and dword ptr [ebx+114h] 0 +
lea eax [ebp+8] +
push eax  +
push offset aControlPanel_1  +
push 80000001h  +
call ds:RegCreateKeyW  +
test eax eax +
jnz loc_10209FF  +
mov eax [ebx+114h] +
test eax eax +
jz loc_10209F6  +
push dword ptr [ebx+118h]  +
jmp loc_10209E3  +
cmp dword ptr [ebp+0Ch] 4 +
jnz loc_1020A23  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
mov eax [ebx+11Ch] +
test eax eax +
jz loc_1020970  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [ebx+11Ch] 0 +
pop ecx  +
mov eax [ebp+10h] +
test eax eax +
mov [ebx+120h] eax +
jz loc_10209B4  +
mov esi [ebp+14h] +
test esi esi +
jz loc_10209B4  +
push eax  +
call ??2@YAPAXI@Z  +
test eax eax +
pop ecx  +
mov [ebx+11Ch] eax +
jz loc_10208DD  +
mov ecx [ebx+120h] +
mov edi eax +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov edi [ebp-4] +
jmp loc_10209BB  +
and dword ptr [ebx+11Ch] 0 +
lea eax [ebp+8] +
push eax  +
push offset aControlPanel_2  +
push 80000001h  +
call ds:RegCreateKeyW  +
test eax eax +
jnz loc_10209FF  +
mov eax [ebx+11Ch] +
test eax eax +
jz loc_10209F6  +
push dword ptr [ebx+120h]  +
push eax  +
push 0  +
push 0  +
push offset aPentilt  +
push dword ptr [ebp+8]  +
call ds:RegSetValueExW  +
push dword ptr [ebp+8]  +
call ds:RegCloseKey  +
cmp dword ptr [ebx+220h] 1 +
jnz loc_1020A10  +
mov eax [ebx+114h] +
jmp loc_1020A16  +
mov eax [ebx+11Ch] +
mov [ebx+110h] eax +
xor esi esi +
jmp loc_10208E2  +
***
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+ppv] 0 +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 4  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
mov esi [ebp+arg_0] +
jl loc_1020B51  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1020B78  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1020B51  +
push dword ptr [esi+444h]  +
mov eax [ebp+var_4] +
push dword ptr [esi+440h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov eax [ebp+var_4] +
test eax eax +
mov byte ptr [esi+448h] 1 +
pop esi  +
jz loc_1020B66  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppv] +
test eax eax +
jz locret_1020B73  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn 4  +
***
mov edi edi +
push ecx  +
push hThread  +
push offset sub_1020AED  +
call ds:QueueUserAPC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
test eax eax +
jz loc_1020BD1  +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_8] +
cmp edx esi +
jb loc_1020BC4  +
lea edx [esi-1] +
imul eax edx +
xor edx edx +
div  esi +
pop esi  +
cmp eax [ecx+28h] +
jnz loc_1020BD6  +
or eax 0FFFFFFFFh +
jmp loc_1020BD9  +
mov [ecx+28h] eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+74h] 0 +
jz loc_1020C10  +
mov eax [esi+78h] +
test eax eax +
jz loc_1020C10  +
cmp dword ptr [esi+7Ch] 0 +
jz loc_1020C10  +
push eax  +
call ds:SetEvent  +
push 0FFFFFFFFh  +
push dword ptr [esi+7Ch]  +
call ds:WaitForSingleObject  +
and dword ptr [esi+74h] 0 +
lea eax [esi+78h] +
push eax  +
call sub_1003B00  +
lea eax [esi+7Ch] +
push eax  +
call sub_1003B00  +
add esi 80h +
push esi  +
call sub_1003B00  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp [ebp+arg_0] eax +
jz loc_1020C55  +
sub [ebp+arg_8] 4 +
mov edx [ebp+arg_8] +
sub eax 4 +
cmp eax [ebp+arg_0] +
mov ecx [eax] +
mov [edx] ecx +
jnz loc_1020C42  +
mov eax [ebp+arg_8] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
xor eax eax +
mov ax [esi+404h] +
test ax ax +
push edi  +
jz loc_1020C7C  +
push eax  +
call ds:GlobalDeleteAtom  +
mov edi ds:DeleteCriticalSection +
lea eax [esi+2D0h] +
push eax  +
call edi  +
lea eax [esi+38h] +
push eax  +
call edi  +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_1020BE2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+hdc]  +
call sub_1020BA7  +
cmp eax 0FFFFFFFFh +
jz loc_1020CD8  +
push [ebp+arg_14]  +
mov ecx dword_102704C +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push eax  +
push [ebp+hdc]  +
lea eax [ecx-20h] +
neg ecx  +
sbb ecx ecx +
and ecx eax +
call sub_101CC74  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
neg eax  +
push eax  +
lea ecx [ebp+var_10] +
movs   +
call sub_10027C0  +
mov eax [ebp+arg_0] +
lea esi [ebp+var_10] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_102D1F0 +
mov ebx ecx +
mov esi edi +
jz loc_1020D4D  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1020D19  +
mov esi [esi] +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_102D1F0 +
pop ecx  +
mov edi esi +
jnz loc_1020D30  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea esi [ecx+14h] +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push 1  +
lea eax [ebp+var_20] +
push eax  +
lea ecx [ebp+var_10] +
movs   +
call sub_1020CE1  +
mov eax [eax+8] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_1020DD1  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_1020DD1  +
cmp [ebp+arg_8] eax +
jnz loc_1020DD1  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_1020D19  +
mov ecx dword_102D1F0 +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_1020DF6  +
cmp ecx [ebp+arg_8] +
jz loc_1020DF6  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_101D1FF  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_101D7F2  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_1020DD7  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edi +
neg esi  +
sbb esi esi +
lea eax [edi+10h] +
and esi eax +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_4] +
add esi 4 +
push eax  +
mov ecx esi +
call sub_101EB55  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jnz loc_1020E3B  +
mov eax 80070057h +
jmp loc_1020E67  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [edi+32Ch] +
call sub_1011871  +
mov eax [ebp+var_4] +
cmp [edi+330h] eax +
jnz loc_1020E61  +
mov ecx [ebp+arg_0] +
cmp ecx [eax+10h] +
jnz loc_1020E65  +
or dword ptr [eax+10h] 0FFFFFFFFh +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp-4] +
push eax  +
mov ecx esi +
call sub_1020D87  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp-4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D7C8  +
jnz loc_1020EB9  +
mov esi dword_102D1F0 +
and dword_102D1F0 0 +
lea ecx [ebp-4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_1020ECD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_100174E  +
mov eax [ebp+var_4] +
test eax eax +
jz locret_1020EFC  +
add eax 8 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+58h]  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edi +
neg esi  +
sbb esi esi +
lea eax [edi+10h] +
and esi eax +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_4] +
add esi 4 +
push eax  +
mov ecx esi +
call sub_101EB55  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
jnz loc_1020F3B  +
mov eax 80070057h +
jmp loc_1020F51  +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [edi+32Ch] +
call sub_101272B  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1020F83  +
lea ecx [esi-8] +
test ecx ecx +
jz loc_1020F83  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003BD3  +
test byte ptr [ebp+8] 1 +
jz loc_1020FAA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 18h +
push ecx  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_1020FDD  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+18h] edi +
mov [esi+14h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_1021030  +
push esi  +
push offset sub_1020FC6  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 24h  +
push edi  +
call sub_10038F0  +
test [ebp+arg_0] 1 +
jz loc_102102B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
jmp loc_1021046  +
mov ecx edi +
call sub_1020FC6  +
test [ebp+arg_0] 1 +
jz loc_1021044  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+10h] +
test eax eax +
jz loc_1021094  +
mov eax [eax] +
test eax eax +
jz loc_1021069  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor ecx ecx +
cmp [esi+4] ecx +
jbe loc_1021082  +
xor eax eax +
mov edx [esi+10h] +
and dword ptr [eax+edx] 0 +
inc ecx  +
add eax 24h +
cmp ecx [esi+4] +
jb loc_1021072  +
mov ecx [esi+10h] +
test ecx ecx +
jz loc_1021094  +
push 3  +
call sub_1020FFD  +
and dword ptr [esi+10h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
test byte ptr [esi+18h] 2 +
jz loc_10210F3  +
mov ecx [ebp+arg_0] +
push edi  +
push 0  +
call sub_1011830  +
mov ecx [ebp+arg_0] +
mov edi [eax] +
push 1  +
call sub_1011830  +
mov ecx [eax] +
mov eax [esi+8] +
cmp eax edi +
jl loc_10210CB  +
mov eax edi +
mov [esi+8] eax +
mov eax [esi+0Ch] +
cmp eax ecx +
jl loc_10210D7  +
mov eax ecx +
mov [esi+0Ch] eax +
mov eax [esi+10h] +
cmp eax edi +
jg loc_10210E3  +
mov eax edi +
mov [esi+10h] eax +
mov eax [esi+14h] +
cmp eax ecx +
pop edi  +
jg loc_10210F0  +
mov eax ecx +
mov [esi+14h] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
test byte ptr [esi+18h] 1 +
jnz loc_1021113  +
xor eax eax +
jmp loc_10211B9  +
mov ecx [esi+4] +
and [ebp+var_4] 0 +
mov edx ecx +
sub edx [esi] +
mov eax 12Ch +
cmp edx eax +
jg loc_10211B6  +
push ebx  +
mov ebx [ebp+arg_0] +
mov edx [ebx+1Ch] +
sub edx ecx +
cmp edx eax +
jg loc_10211B5  +
mov ecx [esi+10h] +
sub ecx [esi+8] +
mov eax 0AAh +
cmp ecx eax +
jg loc_10211B5  +
mov ecx [esi+14h] +
sub ecx [esi+0Ch] +
cmp ecx eax +
jg loc_10211B5  +
push edi  +
push 0  +
mov ecx ebx +
call sub_1011830  +
mov edi [eax] +
push 1  +
mov ecx ebx +
call sub_1011830  +
mov ecx [eax] +
mov eax [esi+8] +
cmp edi eax +
jge loc_1021173  +
sub eax edi +
jmp loc_1021182  +
mov eax [esi+10h] +
cmp eax edi +
jge loc_1021180  +
sub edi eax +
mov eax edi +
jmp loc_1021182  +
xor eax eax +
mov edx [esi+0Ch] +
cmp ecx edx +
pop edi  +
jge loc_1021190  +
sub edx ecx +
mov ecx edx +
jmp loc_102119D  +
mov edx [esi+14h] +
cmp edx ecx +
jge loc_102119B  +
sub ecx edx +
jmp loc_102119D  +
xor ecx ecx +
mov ebx 0C8h +
cmp eax ebx +
jg loc_10211B5  +
cmp ecx ebx +
jg loc_10211B5  +
and dword ptr [esi+18h] 0FFFFFFFEh +
mov [ebp+var_4] 1 +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
jz loc_10211DF  +
push edi  +
call sub_10210FD  +
mov [ebx] eax +
or dword ptr [esi+18h] 2 +
mov eax 7FFFFFFFh +
mov [esi+8] eax +
mov [esi+0Ch] eax +
inc eax  +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov eax [edi+1Ch] +
push edi  +
mov ecx esi +
mov [esi] eax +
call sub_102109B  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_102109B  +
mov eax [edi+1Ch] +
mov [esi+4] eax +
mov eax [esi+18h] +
and eax 0FFFFFFFDh +
or eax 1 +
pop edi  +
mov [esi+18h] eax +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push dword ptr [ebp+8]  +
push 65h  +
push offset unk_1027098  +
call ds:AtlModuleUpdateRegistryFromResourceD  +
pop ebp  +
retn 4  +
***
mov eax ecx +
add ecx 4 +
neg eax  +
sbb eax eax +
and eax ecx +
add eax 4 +
push eax  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+14h] +
xor edx edx +
cmp ecx edx +
mov eax 80004003h +
jz loc_10212CE  +
cmp [ebp+0Ch] edx +
mov eax [ebp+10h] +
mov [ecx] edx +
jz loc_10212C3  +
cmp [eax] edx +
jnz loc_10212BC  +
cmp [eax+4] edx +
jnz loc_10212BC  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_10212BC  +
cmp dword ptr [eax+0Ch] 46000000h +
jz loc_10212C3  +
mov eax 80040110h +
jmp loc_10212CE  +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
call dword ptr [eax+20h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10212EF  +
push offset Addend  +
call ds:InterlockedIncrement  +
jmp loc_10212F9  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi dword_102708C +
mov ebx ecx +
mov esi edi +
jz loc_1021354  +
push dword ptr [esi+8]  +
mov ecx ebx +
call sub_1021317  +
mov esi [esi] +
lea eax [edi+0Ch] +
push eax  +
call sub_1004087  +
push edi  +
call ??3@YAXPAX@Z  +
cmp esi dword_102708C +
pop ecx  +
mov edi esi +
jnz loc_102132E  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
call sub_1003406  +
mov esi [edi] +
mov eax dword_102708C +
cmp esi eax +
lea ebx [edi+8] +
mov [ebp+var_4] edi +
mov [ebp+var_C] ebx +
jnz loc_1021391  +
mov esi [ebx] +
jmp loc_10213A8  +
mov ecx [ebx] +
cmp ecx eax +
jz loc_10213A8  +
push ecx  +
call sub_100343E  +
mov [ebp+var_4] eax +
add eax 8 +
mov esi [eax] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_10] +
call ds:??0_Lockit@std@@QAE@XZ  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_1021418  +
mov ecx [edi] +
mov [ecx+4] eax +
mov ecx [edi] +
mov [eax] ecx +
cmp eax [ebx] +
jnz loc_10213CA  +
mov [esi+4] eax +
jmp loc_10213E1  +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
mov [esi+4] ecx +
mov ecx [eax+4] +
mov [ecx] esi +
mov ecx [ebx] +
mov [edx] ecx +
mov ecx [ebx] +
mov [ecx+4] eax +
mov ebx [ebp+var_8] +
mov ecx [ebx+4] +
cmp [ecx+4] edi +
jnz loc_10213F1  +
mov [ecx+4] eax +
jmp loc_10213FF  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_10213FC  +
mov [ecx] eax +
jmp loc_10213FF  +
mov [ecx+8] eax +
mov ecx [edi+4] +
mov [eax+4] ecx +
mov ecx [eax+14h] +
mov edx [edi+14h] +
mov [eax+14h] edx +
mov [edi+14h] ecx +
mov [ebp+var_4] edi +
mov eax edi +
jmp loc_1021491  +
mov ecx [eax+4] +
mov edx [ebp+var_8] +
mov [esi+4] ecx +
mov ecx [edx+4] +
cmp [ecx+4] edi +
jnz loc_102142E  +
mov [ecx+4] esi +
jmp loc_102143C  +
mov ecx [edi+4] +
cmp [ecx] edi +
jnz loc_1021439  +
mov [ecx] esi +
jmp loc_102143C  +
mov [ecx+8] esi +
mov ecx [edx+4] +
cmp [ecx] edi +
mov [ebp+var_C] ecx +
jnz loc_1021468  +
mov ebx [ebx] +
cmp ebx dword_102708C +
jnz loc_1021457  +
mov ebx [edi+4] +
mov [ecx] ebx +
jmp loc_1021468  +
push esi  +
call sub_100343E  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebx [edx+4] +
cmp [ebx+8] edi +
jnz loc_102148E  +
mov ecx [edi] +
cmp ecx dword_102708C +
jnz loc_1021482  +
mov ecx [edi+4] +
mov [ebx+8] ecx +
jmp loc_102148E  +
push esi  +
call sub_101D048  +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov ebx [ebp+var_8] +
xor edi edi +
inc edi  +
cmp [eax+14h] edi +
jnz loc_10215A8  +
jmp loc_102155B  +
cmp [esi+14h] edi +
jnz loc_10215A5  +
mov ecx [esi+4] +
mov eax [ecx] +
cmp esi eax +
jnz loc_1021526  +
mov eax [ecx+8] +
cmp dword ptr [eax+14h] 0 +
jnz loc_10214D7  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1008F67  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_10214E6  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jz loc_1021554  +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_1021505  +
mov ecx [eax] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_101D06A  +
mov eax [esi+4] +
mov eax [eax+8] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax+8] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_1008F67  +
jmp loc_10215A5  +
cmp dword ptr [eax+14h] 0 +
jnz loc_1021545  +
mov [eax+14h] edi +
mov eax [esi+4] +
and dword ptr [eax+14h] 0 +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D06A  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [eax+8] +
cmp [ecx+14h] edi +
jnz loc_1021569  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_1021569  +
and dword ptr [eax+14h] 0 +
mov esi [esi+4] +
mov eax [ebx+4] +
cmp esi [eax+4] +
jnz loc_10214A2  +
jmp loc_10215A5  +
mov ecx [eax] +
cmp [ecx+14h] edi +
jnz loc_1021587  +
mov ecx [eax+8] +
mov [ecx+14h] edi +
and dword ptr [eax+14h] 0 +
push eax  +
mov ecx ebx +
call sub_1008F67  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [esi+4] +
mov ecx [ecx+14h] +
mov [eax+14h] ecx +
mov ecx [esi+4] +
mov [ecx+14h] edi +
mov eax [eax] +
mov [eax+14h] edi +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_101D06A  +
mov [esi+14h] edi +
lea ecx [ebp+var_10] +
call ds:??1_Lockit@std@@QAE@XZ  +
mov esi [ebp+var_4] +
lea eax [esi+0Ch] +
push eax  +
call sub_1004087  +
push esi  +
call ??3@YAXPAX@Z  +
dec dword ptr [ebx+0Ch]  +
mov eax [ebp+arg_0] +
pop ecx  +
mov ecx [ebp+arg_4] +
pop edi  +
pop esi  +
mov [eax] ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
mov ecx [ebp+arg_4] +
jz loc_1021625  +
mov eax [esi+4] +
cmp ecx [eax] +
jnz loc_1021625  +
cmp [ebp+arg_8] eax +
jnz loc_1021625  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_1021317  +
mov ecx dword_102708C +
mov eax [esi+4] +
mov [eax+4] ecx +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
mov [eax] eax +
mov eax [esi+4] +
mov [eax+8] eax +
mov eax [esi+4] +
mov ecx [eax] +
jmp loc_102164A  +
cmp ecx [ebp+arg_8] +
jz loc_102164A  +
push edi  +
mov edi ecx +
lea ecx [ebp+arg_4] +
call sub_1003406  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1021360  +
mov ecx [ebp+arg_4] +
cmp ecx [ebp+arg_8] +
jnz loc_102162B  +
pop edi  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [eax] +
push eax  +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10215DB  +
push dword ptr [esi+4]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
pop ecx  +
lea ecx [ebp+var_4] +
xor esi esi +
call ds:??0_Lockit@std@@QAE@XZ  +
dec dword_102D7FC  +
jnz loc_10216A5  +
mov esi dword_102708C +
and dword_102708C 0 +
lea ecx [ebp+var_4] +
call ds:??1_Lockit@std@@QAE@XZ  +
test esi esi +
jz loc_10216B9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_10216D5  +
mov eax 80004003h +
jmp loc_1021735  +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
call sub_10218ED  +
mov esi eax +
test esi esi +
jl loc_102171C  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:AtlComPtrAssign  +
lea eax [edi+4] +
mov [esi+8] eax +
mov eax [eax+4] +
mov eax [eax] +
push ebx  +
mov [esi+0Ch] eax +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jz loc_1021731  +
mov ecx [ebp+arg_4] +
test ecx ecx +
mov edi ecx +
jz loc_1021731  +
call sub_102173F  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax offset byte_1024165 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1018624 +
and dword ptr [ebp-4] 0 +
mov ecx offset unk_1027098 +
mov dword ptr [esi+10h] 1 +
call sub_1001CE4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101BCCA  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_1018650  +
push dword ptr [ebp+8]  +
call ds:AtlInternalQueryInterface  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+10h] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
push edi  +
jz loc_1021862  +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_10217CE  +
cmp [ebp+14h] ebx +
jz loc_1021862  +
mov edi [ebp+8] +
cmp [edi+8] ebx +
jnz loc_10217E0  +
mov eax 80004005h +
jmp loc_1021867  +
push esi  +
mov [ebp-4] ebx +
mov [ebp+8] eax +
lea esi [edi+0Ch] +
mov eax [esi] +
mov ecx [edi+8] +
cmp eax [ecx+4] +
jz loc_1021841  +
cmp ebx [ebp+0Ch] +
jnb loc_1021841  +
add eax 0Ch +
push eax  +
push dword ptr [ebp+8]  +
call sub_1003365  +
test eax eax +
mov [ebp-4] eax +
jge loc_102182F  +
mov eax [ebp+10h] +
jmp loc_1021826  +
mov eax [eax] +
test eax eax +
jz loc_102181D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+10h] +
add eax 4 +
mov [ebp+10h] eax +
cmp eax [ebp+8] +
jb loc_1021811  +
xor ebx ebx +
jmp loc_102183B  +
add dword ptr [ebp+8] 4 +
mov ecx esi +
call sub_1003406  +
inc ebx  +
cmp dword ptr [ebp-4] 0 +
jge loc_10217EA  +
mov eax [ebp+14h] +
test eax eax +
pop esi  +
jz loc_102184B  +
mov [eax] ebx +
cmp dword ptr [ebp-4] 0 +
jl loc_102185D  +
cmp ebx [ebp+0Ch] +
jnb loc_102185D  +
mov dword ptr [ebp-4] 1 +
mov eax [ebp-4] +
jmp loc_1021867  +
mov eax 80004003h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jz loc_10218A8  +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [edi+0Ch] +
mov eax [edi+8] +
mov ecx [esi] +
dec dword ptr [ebp+0Ch]  +
cmp ecx [eax+4] +
jz loc_10218A3  +
mov ecx esi +
call sub_1003406  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1021887  +
jmp loc_10218A6  +
xor ebx ebx +
inc ebx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10218E0  +
test esi esi +
jz loc_10218E0  +
mov ecx esi +
call sub_102173F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax offset byte_1024311 +
call sub_10014DD  +
push ecx  +
push esi  +
push edi  +
push 2Ch  +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
test esi esi +
jz loc_1021936  +
mov ecx esi +
call sub_101EA4E  +
lea ecx [esi+10h] +
call sub_10049A5  +
push offset Addend  +
mov dword ptr [esi] offset off_1018624 +
call ds:InterlockedIncrement  +
jmp loc_1021938  +
xor esi esi +
test esi esi +
jz loc_102193E  +
xor edi edi +
mov eax [ebp+8] +
mov ecx [ebp-0Ch] +
mov [eax] esi +
mov eax edi +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
test eax eax +
push edi  +
mov edi 80004003h +
jz loc_10219D2  +
and dword ptr [eax] 0 +
lea eax [ebp-4] +
push eax  +
call sub_10218ED  +
mov edi eax +
test edi edi +
jl loc_10219D2  +
mov edi [ebp+8] +
push ebx  +
mov ebx [edi+8] +
push esi  +
push dword ptr [edi+4]  +
mov esi [ebp-4] +
lea eax [esi+4] +
push eax  +
call ds:AtlComPtrAssign  +
push dword ptr [ebp+0Ch]  +
mov [esi+8] ebx +
mov eax [ebx+4] +
mov eax [eax] +
push offset dword_1018640  +
mov [esi+0Ch] eax +
mov eax [edi+0Ch] +
push offset off_1018650  +
push esi  +
mov [esi+0Ch] eax +
call ds:AtlInternalQueryInterface  +
mov edi eax +
test edi edi +
jge loc_10219D0  +
mov ecx esi +
call sub_102173F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebx  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
inc eax  +
push eax  +
push [ebp+arg_0]  +
call sub_10033AC  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_1021A10  +
mov eax 80004003h +
jmp loc_1021A4B  +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [edi+4] +
call sub_1021A55  +
mov eax [ebp+arg_8] +
cmp [edi+8] eax +
pop edi  +
jz loc_1021A46  +
mov ecx [eax+10h] +
mov [esi] ecx +
mov eax [eax+10h] +
test eax eax +
jz loc_1021A42  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1021A4B  +
mov eax 80004005h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
mov esi ecx +
call sub_1021A96  +
mov esi [esi+4] +
cmp eax esi +
mov [ebp+arg_4] eax +
jz loc_1021A7E  +
mov ecx [edi] +
cmp ecx [eax+0Ch] +
jb loc_1021A7E  +
lea eax [ebp+arg_4] +
jmp loc_1021A84  +
mov [ebp+var_4] esi +
lea eax [ebp+var_4] +
mov ecx [eax] +
mov eax [ebp+arg_0] +
pop edi  +
mov [eax] ecx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov ecx [eax+4] +
mov edx dword_102708C +
cmp ecx edx +
jz loc_1021AC4  +
push esi  +
mov esi [ebp+arg_0] +
mov esi [esi] +
cmp [ecx+0Ch] esi +
jnb loc_1021ABB  +
mov ecx [ecx+8] +
jmp loc_1021ABF  +
mov eax ecx +
mov ecx [ecx] +
cmp ecx edx +
jnz loc_1021AB1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
lea edi [esi+4] +
push eax  +
mov ecx edi +
call sub_1021A55  +
mov eax [ebp+arg_0] +
cmp [esi+8] eax +
jz loc_1021B01  +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_1021360  +
xor eax eax +
jmp loc_1021B06  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax offset byte_10241FF +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+54h] +
mov dword ptr [ebp-4] 1 +
call sub_1006CCE  +
mov eax esi +
neg eax  +
lea ecx [esi+24h] +
sbb eax eax +
and eax ecx +
lea ecx [eax+4] +
call sub_1021659  +
mov eax [esi+14h] +
test eax eax +
mov byte ptr [ebp-4] 0 +
jz loc_1021B55  +
push eax  +
call sub_10223A3  +
mov eax esi +
add esi 38h +
neg eax  +
sbb eax eax +
and eax esi +
add eax 4 +
push eax  +
call ds:DeleteCriticalSection  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1021B7C  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1021B96  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi [ebp+8] +
mov eax [esi+18h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_1021BFD  +
cmp esi [esi+18h] +
jz loc_1021BFD  +
push dword ptr [ebp+10h]  +
add esi 0FFFFFFE0h +
push dword ptr [ebp+0Ch]  +
push offset off_100422C  +
push esi  +
call ds:AtlInternalQueryInterface  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1021BC8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+14h] 0 +
mov eax 80004003h +
jz loc_1021C33  +
push dword ptr [ebp+14h]  +
mov ecx offset off_102D894 +
push dword ptr [ebp+10h]  +
call sub_101C0F5  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_102D894 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101C405  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_102D8A0 +
xor eax eax +
test ecx ecx +
jnz loc_1021C8B  +
push dword ptr [ebp+14h]  +
mov ecx offset off_102D894 +
call sub_101C12F  +
mov ecx dword_102D8A0 +
test ecx ecx +
jz loc_1021CA6  +
push dword ptr [ebp+28h]  +
mov eax [ecx] +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push ecx  +
call dword ptr [eax+2Ch]  +
pop ebp  +
retn 24h  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001D76  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001D64  +
***
mov eax offset byte_1024245 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10023E0 +
mov dword ptr [esi+20h] offset off_1001A3C +
mov dword ptr [esi+24h] offset off_10042A8 +
and dword ptr [ebp-4] 0 +
call sub_101D704  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1021B11  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100949D  +
push offset Addend  +
mov dword ptr [esi] offset off_10023E0 +
mov dword ptr [esi+20h] offset off_100268C +
mov dword ptr [esi+24h] offset off_10042DC +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 18h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1021D4C  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006571  +
***
mov eax offset byte_1024245 +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10023E0 +
mov dword ptr [esi+20h] offset off_100268C +
mov dword ptr [esi+24h] offset off_10042DC +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+38h] 1 +
call sub_101D704  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1021B11  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_100258C +
call sub_1002608  +
push offset Addend  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
xor esi esi +
cmp [eax] esi +
jnz loc_1021E53  +
cmp [eax+4] esi +
jnz loc_1021E53  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_1021E53  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_1021E53  +
mov ecx [ebp+10h] +
cmp ecx esi +
jnz loc_1021E46  +
mov eax 80004003h +
jmp loc_1021E6D  +
mov eax [ebp+8] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1021E6B  +
push dword ptr [ebp+10h]  +
push eax  +
mov eax [ebp+8] +
push offset off_100422C  +
add eax 0Ch +
push eax  +
call ds:AtlInternalQueryInterface  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax offset byte_1024289 +
call sub_10014DD  +
push ecx  +
push esi  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_100258C +
and dword ptr [ebp-4] 0 +
lea esi [ecx+0Ch] +
mov dword ptr [ecx+4] 1 +
mov ecx esi +
call sub_101D704  +
mov ecx offset unk_1027098 +
call sub_1001CE4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1021B11  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov eax offset byte_10242CD +
call sub_10014DD  +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+24h] +
call sub_1021CCD  +
mov ecx esi +
call sub_1021269  +
mov ecx [ebp-0Ch] +
pop esi  +
mov large fs:0 ecx +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1021D82  +
test [ebp+arg_0] 1 +
jz loc_1021F18  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1021E77  +
test [ebp+arg_0] 1 +
jz loc_1021F3E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+18h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1021F72  +
lea ecx [esi-20h] +
test ecx ecx +
jz loc_1021F72  +
push 1  +
call sub_1021EFE  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1021FA6  +
test esi esi +
jz loc_1021FA6  +
push 1  +
mov ecx esi +
call sub_1021F24  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1021F4A  +
***
mov dword ptr [ecx] offset off_1002578 +
mov dword ptr [ecx+4] 1 +
jmp loc_1021EC8  +
***
mov eax offset byte_1024311 +
call sub_10014DD  +
push ecx  +
push ebx  +
push esi  +
push 90h  +
mov ebx 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-10h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_102200C  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1021D18  +
mov esi eax +
jmp loc_102200E  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1022053  +
push edi  +
lea edi [esi+38h] +
push edi  +
call ds:InterlockedIncrement  +
mov ecx esi +
call sub_100EE64  +
push edi  +
mov ebx eax +
call ds:InterlockedDecrement  +
test ebx ebx +
pop edi  +
jnz loc_102204A  +
push dword ptr [ebp+10h]  +
lea eax [esi+20h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jz loc_1022053  +
push 1  +
mov ecx esi +
call sub_1021EFE  +
mov ecx [ebp-0Ch] +
pop esi  +
mov eax ebx +
pop ebx  +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
***
mov eax offset byte_1024311 +
call sub_10014DD  +
push ecx  +
push esi  +
push edi  +
push 9Ch  +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_10220A0  +
push dword ptr [ebp+8]  +
call sub_1021DDE  +
mov esi eax +
jmp loc_10220A2  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_10220D2  +
lea ecx [esi+0Ch] +
call sub_100EE64  +
mov edi eax +
test edi edi +
jnz loc_10220C9  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_10220D2  +
push 1  +
mov ecx esi +
call sub_1021F24  +
mov ecx [ebp-0Ch] +
mov eax edi +
pop edi  +
pop esi  +
mov large fs:0 ecx +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_1022105  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_1021FD6  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_102206A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1021FBF  +
test [ebp+arg_0] 1 +
jz loc_102212A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 330h +
push edi  +
mov [ebp-228h] eax +
mov [ebp-22Ch] ecx +
mov [ebp-230h] edx +
mov [ebp-234h] ebx +
mov [ebp-238h] esi +
mov [ebp-23Ch] edi +
mov word ptr [ebp-210h] ss +
mov word ptr [ebp-21Ch] cs +
mov word ptr [ebp-240h] ds +
mov word ptr [ebp-244h] es +
mov word ptr [ebp-248h] fs +
mov [ebp-24Ch] gs +
pushf   +
pop dword ptr [ebp-218h]  +
mov dword ptr [ebp-2D8h] 10001h +
mov eax [ebp+4] +
mov [ebp-220h] eax +
lea eax [ebp+4] +
mov [ebp-214h] eax +
lea eax [ebp+4] +
mov eax [eax-4] +
mov [ebp-224h] eax +
push 14h  +
pop ecx  +
xor eax eax +
lea edi [ebp-330h] +
stos   +
mov dword ptr [ebp-330h] 0C0000409h +
mov eax [ebp+4] +
mov [ebp-324h] eax +
lea eax [ebp-330h] +
mov [ebp-8] eax +
lea eax [ebp-2D8h] +
mov [ebp-4] eax +
mov eax dword_1027090 +
mov [ebp-2E0h] eax +
mov eax dword_102D038 +
mov [ebp-2DCh] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
lea eax [ebp-8] +
push eax  +
call ds:UnhandledExceptionFilter  +
push 502h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
pop edi  +
leave   +
retn   +
***
call sub_10031B5  +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_1022251  +
mov ecx [ebp+8] +
sub ecx [ebp+0Ch] +
mov [ebp+8] ecx +
call dword ptr [ebp+14h]  +
jmp loc_102223E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_10031F5  +
retn 10h  +
***
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_1022290  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
***
call ?terminate@@YAXXZ  +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 2 +
push edi  +
mov edi ecx +
jz loc_10222E7  +
push esi  +
push offset ??1type_info@@UAE@XZ  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 0Ch  +
push edi  +
call sub_10038F0  +
test byte ptr [ebp+8] 1 +
jz loc_10222E2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
jmp loc_10222FD  +
mov ecx edi +
call ??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_10222FB  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov ah 22h +
jmp ds:_purecall  +
***
jmp ds:_except_handler3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_102D810 +
cmp eax 1 +
push [ebp+lpMem]  +
jnz loc_1022393  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_102239A  +
push eax  +
call dword_102DAC4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1022370  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_4] +
test eax eax +
push esi  +
push edi  +
jz loc_10226DF  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_10226DF  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10226DF  +
mov esi [ecx] +
mov edx 8000h +
cmp esi edx +
ja loc_10226DF  +
cmp [ecx+4] edx +
ja loc_10226DF  +
mov esi [ebp+arg_C] +
test esi esi +
mov eax [eax] +
push ebx  +
jz loc_1022433  +
mov edx [esi] +
mov ebx [esi+8] +
sub eax edx +
imul eax [ecx] +
sub ebx edx +
xor edx edx +
inc ebx  +
div  ebx +
mov edx [esi+4] +
mov esi [esi+0Ch] +
sub esi edx +
inc esi  +
mov [ebp+var_4] eax +
mov eax [edi] +
sub eax edx +
imul eax [ecx+4] +
xor edx edx +
div  esi +
jmp loc_1022438  +
mov [ebp+var_4] eax +
mov eax [edi] +
movzx esi word ptr [ecx+0Ch] +
movzx ebx word ptr [ecx+8] +
and [ebp+var_14] 0 +
mov [ebp+var_8] eax +
movzx eax word ptr [ecx+0Ah] +
mov edi esi +
lea edx [eax+1] +
imul edi eax +
imul edx esi +
add edi ebx +
mov [ebp+arg_0] ebx +
add edx ebx +
movzx ebx word ptr [ecx+0Eh] +
add ebx esi +
mov [ebp+var_C] eax +
mov [ebp+var_20] edi +
js loc_1022542  +
movzx ebx word ptr [ecx+edi*8+14h] +
mov esi [ebp+var_4] +
cmp esi ebx +
jge loc_1022490  +
movzx ebx word ptr [ecx+edx*8+14h] +
cmp esi ebx +
jge loc_1022490  +
mov esi [ebp+arg_0] +
neg esi  +
sbb esi esi +
mov [ebp+var_10] esi +
jmp loc_10224BF  +
movzx ebx word ptr [ecx+edi*8+1Ch] +
cmp esi ebx +
jl loc_10224BB  +
movzx ebx word ptr [ecx+edx*8+1Ch] +
cmp esi ebx +
jl loc_10224BB  +
mov eax [ebp+arg_0] +
movzx esi word ptr [ecx+0Ch] +
add eax 2 +
xor ebx ebx +
cmp eax esi +
mov eax [ebp+var_C] +
setl bl  +
mov [ebp+var_10] ebx +
jmp loc_10224BF  +
and [ebp+var_10] 0 +
movzx ebx word ptr [ecx+edi*8+16h] +
mov esi [ebp+var_8] +
cmp esi ebx +
jge loc_10224DC  +
movzx ebx word ptr [ecx+edi*8+1Eh] +
cmp esi ebx +
jge loc_10224DC  +
mov esi eax +
neg esi  +
sbb esi esi +
jmp loc_1022505  +
movzx ebx word ptr [ecx+edx*8+16h] +
cmp esi ebx +
jl loc_1022503  +
movzx ebx word ptr [ecx+edx*8+1Eh] +
cmp esi ebx +
jl loc_1022503  +
movzx esi word ptr [ecx+0Eh] +
add eax 2 +
xor ebx ebx +
cmp eax esi +
mov eax [ebp+var_C] +
setl bl  +
mov esi ebx +
jmp loc_1022505  +
xor esi esi +
mov ebx [ebp+var_10] +
test ebx ebx +
jnz loc_1022510  +
test esi esi +
jz loc_1022542  +
add [ebp+arg_0] ebx +
movzx ebx word ptr [ecx+0Eh] +
add eax esi +
movzx esi word ptr [ecx+0Ch] +
inc [ebp+var_14]  +
mov edi esi +
imul edi eax +
add edi [ebp+arg_0] +
lea edx [eax+1] +
imul edx esi +
add edx [ebp+arg_0] +
add ebx esi +
cmp [ebp+var_14] ebx +
mov [ebp+var_C] eax +
mov [ebp+var_20] edi +
jle loc_102246F  +
lea esi [ecx+edx*8] +
movzx edx word ptr [esi+14h] +
lea edi [ecx+edi*8] +
movzx eax word ptr [edi+14h] +
movzx ebx word ptr [edi+16h] +
mov [ebp+var_14] eax +
sub edx [ebp+var_14] +
mov eax [ebp+var_8] +
sub eax ebx +
imul eax edx +
movzx edx word ptr [esi+16h] +
mov ebx edx +
movzx edx word ptr [edi+16h] +
sub ebx edx +
cdq   +
idiv  ebx +
xor edx edx +
mov dx [edi+14h] +
movzx ebx word ptr [edi+1Eh] +
mov [ebp+var_10] ebx +
add eax edx +
movzx edx word ptr [esi+1Ch] +
mov [ebp+var_2C] ax +
movzx eax word ptr [edi+1Ch] +
mov [ebp+var_18] eax +
movzx eax word ptr [esi+1Eh] +
mov [ebp+var_1C] eax +
mov eax [ebp+var_8] +
sub eax ebx +
mov [ebp+var_24] edx +
sub edx [ebp+var_18] +
mov ebx [ebp+var_1C] +
imul eax edx +
sub ebx [ebp+var_10] +
cdq   +
idiv  ebx +
movzx ebx word ptr [edi+16h] +
xor edx edx +
mov dx [edi+1Ch] +
add eax edx +
mov edx [ebp+var_10] +
sub edx ebx +
mov ebx [ebp+var_18] +
sub ebx [ebp+var_14] +
mov [ebp+var_28] ax +
mov eax [ebp+var_4] +
sub eax [ebp+var_14] +
imul eax edx +
cdq   +
idiv  ebx +
movzx ebx word ptr [esi+16h] +
xor edx edx +
mov dx [edi+16h] +
add eax edx +
movzx edx word ptr [esi+14h] +
mov [ebp+var_2A] ax +
mov eax [ebp+var_4] +
sub eax edx +
mov edx [ebp+var_1C] +
sub edx ebx +
mov ebx [ebp+var_24] +
imul eax edx +
movzx edx word ptr [esi+14h] +
sub ebx edx +
cdq   +
idiv  ebx +
movzx ebx [ebp+var_2C] +
xor edx edx +
mov dx [esi+16h] +
add eax edx +
mov [ebp+var_26] ax +
mov ax word ptr [ebp+arg_0] +
mov [ecx+8] ax +
mov ax word ptr [ebp+var_C] +
mov [ecx+0Ah] ax +
mov eax [ebp+var_20] +
movzx edx word ptr [ecx+eax*8+10h] +
movzx eax word ptr [ecx+eax*8+18h] +
mov [ebp+var_24] edx +
sub eax edx +
mov edx [ebp+var_4] +
sub edx ebx +
imul eax edx +
movzx edx [ebp+var_28] +
sub edx ebx +
mov ebx edx +
cdq   +
idiv  ebx +
movzx edi word ptr [edi+12h] +
mov edx [ebp+var_8] +
mov ebx eax +
movzx eax word ptr [esi+12h] +
movzx esi [ebp+var_2A] +
sub edx esi +
sub eax edi +
imul eax edx +
movzx edx [ebp+var_26] +
sub edx esi +
mov esi edx +
cdq   +
idiv  esi +
add ebx [ebp+var_24] +
mov esi eax +
add esi edi +
test ebx ebx +
jge loc_1022678  +
xor ebx ebx +
jmp loc_1022681  +
mov eax [ecx] +
cmp ebx eax +
jl loc_1022681  +
lea ebx [eax-1] +
test esi esi +
jge loc_1022689  +
xor esi esi +
jmp loc_1022693  +
mov eax [ecx+4] +
cmp esi eax +
jl loc_1022693  +
lea esi [eax-1] +
cmp [ebp+arg_10] 0 +
jz loc_10226D0  +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_10226D0  +
mov edx [edi] +
mov eax [edi+8] +
sub eax edx +
inc eax  +
imul eax ebx +
xor edx edx +
div  dword ptr [ecx] +
mov edx [ebp+arg_4] +
add eax [edi] +
mov [edx] eax +
mov ebx [edi+4] +
mov eax [edi+0Ch] +
sub eax ebx +
inc eax  +
imul eax esi +
xor edx edx +
div  dword ptr [ecx+4] +
mov ecx [ebp+arg_8] +
add eax ebx +
mov [ecx] eax +
jmp loc_10226DA  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
mov eax [ebp+arg_8] +
mov [eax] esi +
xor eax eax +
pop ebx  +
jmp loc_10226E2  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
xor [eax+4] ecx +
mov ecx [eax+4] +
xor [eax] ecx +
mov ecx [eax] +
xor [eax+4] ecx +
mov ecx [eax+8] +
xor [eax+0Ch] ecx +
mov ecx [eax+0Ch] +
xor [eax+8] ecx +
mov ecx [eax+8] +
xor [eax+0Ch] ecx +
pop ebp  +
retn 4  +
***
mov ecx offset unk_102D180 +
jmp loc_1018CBC  +
***
mov ecx offset unk_1027004 +
jmp loc_1019964  +
***
mov ecx offset unk_102D1B4 +
jmp loc_101ACF9  +
***
mov ecx offset unk_102D7CC +
jmp loc_1020E6D  +
***
retf   +
***
retf 236h  +
***
retf 23Fh  +
***
retf 25Eh  +
***
mov dl 64h +
add al [eax] +
retf 264h  +
***
