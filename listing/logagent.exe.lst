add bh bh +
xor edi edi +
adc eax offset SysFreeString +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpCriticalSection] +
push esi  +
mov esi ecx +
push eax  +
mov [esi] eax +
call ds:EnterCriticalSection  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
xor edi edi +
adc eax offset LeaveCriticalSection +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100274C  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_ultow  +
add esp 0Ch +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_0] +
push esi  +
test eax eax +
jnz loc_10027C4  +
movzx ecx word ptr [edx] +
xor esi esi +
cmp si cx +
jz loc_10027C0  +
movzx ecx cx +
push 2Fh  +
pop esi  +
cmp si cx +
jz loc_10027BC  +
push 5Ch  +
pop esi  +
cmp si cx +
jz loc_10027BC  +
inc eax  +
movzx ecx word ptr [edx+eax*2] +
xor esi esi +
cmp si cx +
jnz loc_10027A0  +
test eax eax +
jnz loc_10027C4  +
xor eax eax +
jmp loc_10027F2  +
push edi  +
test eax eax +
jbe loc_10027EF  +
lea ecx [edx+eax*2-2] +
movzx esi word ptr [ecx] +
push 3Ah  +
pop edi  +
cmp di si +
jz loc_10027F7  +
push 5Dh  +
pop edi  +
cmp di si +
jz loc_10027EF  +
push 40h  +
pop edi  +
cmp di si +
jz loc_10027EF  +
dec eax  +
dec ecx  +
dec ecx  +
test eax eax +
ja loc_10027CD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
lea eax [edx+eax*2] +
jmp loc_10027F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push esi  +
lea ecx [ebp+lpCriticalSection] +
call sub_1002713  +
push [ebp+lpCriticalSection]  +
xor eax eax +
cmp [esi+18h] eax +
setnz al  +
mov esi eax +
call ds:LeaveCriticalSection  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push esi  +
lea ecx [ebp+lpCriticalSection] +
call sub_1002713  +
push [ebp+lpCriticalSection]  +
mov esi [esi+18h] +
call ds:LeaveCriticalSection  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
lea eax [esi+4] +
push eax  +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn   +
***
adc eax offset DeleteCriticalSection +
retn   +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ??_V@YAXPAX@Z  +
push dword ptr [esi+4]  +
call ??_V@YAXPAX@Z  +
mov eax [esi+8] +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10028B4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+50h] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_10028E3  +
cmp [esi+4Ch] eax +
jz loc_10028DF  +
push eax  +
push 1  +
push dword ptr [esi+48h]  +
call ds:ReleaseSemaphore  +
xor eax eax +
pop esi  +
retn   +
mov eax 0BADh +
pop esi  +
retn   +
***
cmp dword_1016548 0 +
push esi  +
mov esi ecx +
jnz loc_1002904  +
push 1  +
push 0  +
call sub_100A25B  +
cmp dword_1016550 0 +
push esi  +
jz loc_100291B  +
push dword_1016544  +
call sub_1009180  +
jmp loc_1002921  +
call ds:InitializeCriticalSection  +
mov dword ptr [esi+18h] 1 +
mov eax esi +
pop esi  +
retn   +
***
cmp dword ptr [ecx+18h] 0 +
jz locret_1002947  +
cmp dword_1016550 0 +
jnz locret_1002947  +
push ecx  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1002969  +
lea ecx [esi+4] +
cmp eax ecx +
jz loc_1002969  +
push eax  +
call ??_V@YAXPAX@Z  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1002997  +
lea ecx [esi+10h] +
cmp eax ecx +
jz loc_1002993  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi+0Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 8  +
call sub_1008B7B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jl loc_10029E6  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_10029DB  +
mov ecx [esi+0Ch] +
xor edx edx +
mov [ecx+eax*2] dx +
jmp loc_10029E3  +
push dword ptr [esi+0Ch]  +
call sub_1002741  +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jl loc_1002A98  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jge loc_1002A16  +
mov eax 8000FFFFh +
mov [esi] eax +
jmp loc_1002A97  +
lea eax [edi+1] +
cmp eax [esi+8] +
push ebx  +
jle loc_1002A94  +
cmp edi 1FFFFFFFh +
jl loc_1002A2E  +
mov eax 8007007Ah +
jmp loc_1002A58  +
mov ebx ds:GetProcessHeap +
add edi 81h +
lea eax [edi+edi] +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_1002A5C  +
and [esi+4] eax +
mov eax 8007000Eh +
mov [esi] eax +
jmp loc_1002A96  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1002A8B  +
mov ecx [esi+4] +
add ecx ecx +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call memcpy  +
mov eax [esi+0Ch] +
lea ecx [esi+10h] +
add esp 0Ch +
cmp eax ecx +
jz loc_1002A8B  +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+arg_0] +
mov [esi+0Ch] eax +
mov [esi+8] edi +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx] 0 +
jl loc_1002AD0  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1002ABC  +
mov edx [ecx+0Ch] +
mov byte ptr [eax+edx] 0 +
jmp loc_1002ACD  +
mov eax [ecx+0Ch] +
push esi  +
lea esi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1002AC3  +
sub eax esi +
pop esi  +
mov [ecx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jl loc_1002B77  +
mov eax [ebp+arg_0] +
test eax eax +
jge loc_1002AFB  +
mov eax 8000FFFFh +
mov [esi] eax +
jmp loc_1002B77  +
lea ecx [eax+1] +
cmp ecx [esi+8] +
push ebx  +
push edi  +
jle loc_1002B73  +
cmp eax 1FFFFFFFh +
jl loc_1002B13  +
mov eax 8007007Ah +
jmp loc_1002B3A  +
mov edi ds:GetProcessHeap +
lea ebx [eax+81h] +
push ebx  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_1002B3E  +
and [esi+4] eax +
mov eax 8007000Eh +
mov [esi] eax +
jmp loc_1002B75  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1002B6A  +
push dword ptr [esi+4]  +
push eax  +
push [ebp+arg_0]  +
call memcpy  +
mov eax [esi+0Ch] +
lea ecx [esi+10h] +
add esp 0Ch +
cmp eax ecx +
jz loc_1002B6A  +
push eax  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+arg_0] +
mov [esi+0Ch] eax +
mov [esi+8] ebx +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jl loc_1002BE0  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 1FFFFFFEh +
ja loc_1002BD8  +
mov eax [esi+4] +
add eax edi +
push eax  +
call sub_10029F0  +
test eax eax +
jge loc_1002BAE  +
mov eax [esi] +
jmp loc_1002BDF  +
mov ecx [esi+0Ch] +
lea eax [edi+edi] +
push eax  +
mov eax [esi+4] +
push [ebp+arg_0]  +
lea eax [ecx+eax*2] +
push eax  +
call memcpy  +
mov eax [esi+4] +
add esp 0Ch +
add eax edi +
push eax  +
mov ecx esi +
call sub_10029BC  +
xor eax eax +
jmp loc_1002BDF  +
mov eax 80004005h +
mov [esi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100149C +
and dword ptr [esi+4] 0 +
lea eax [esi+8] +
mov [esi+0Ch] eax +
mov [eax] eax +
and dword ptr [esi+10h] 0 +
lea ecx [esi+18h] +
call sub_10028EF  +
and dword ptr [esi+38h] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 10h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100149C +
and dword ptr [ebp-4] 0 +
jmp loc_1002C6D  +
mov eax [esi+8] +
dec dword ptr [esi+4]  +
mov ecx [eax] +
mov edx [eax+4] +
mov [edx] ecx +
add eax 0FFFFFCA0h +
mov [ecx+4] edx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [esi+4] 0 +
jnz loc_1002C52  +
lea ecx [esi+18h] +
call sub_1002931  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002C35  +
test [ebp+arg_0] 1 +
jz loc_1002CA0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002CC2  +
cmp ecx 7FFFFFFFh +
jbe loc_1002CC7  +
mov eax 80070057h +
test eax eax +
jl loc_1002D12  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1002D02  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1002CFD  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1002CFD  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1002CE5  +
pop edi  +
test esi esi +
jnz loc_1002D09  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002D31  +
cmp ecx 7FFFFFFFh +
jbe loc_1002D36  +
mov eax 80070057h +
test eax eax +
jl loc_1002D73  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1002D63  +
cmp eax esi +
ja loc_1002D63  +
jnz loc_1002D6E  +
jmp loc_1002D68  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
mov eax [esi+18h] +
add eax 50h +
push eax  +
call ds:InterlockedIncrement  +
push esi  +
call ds:LeaveCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
mov ecx [esi+18h] +
call sub_10028BB  +
test eax eax +
jnz loc_1002DBC  +
and [esi+18h] eax +
push esi  +
call ds:LeaveCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx offset CriticalSection +
call sub_1002DA1  +
cmp dword ptr [esi+24h] 0 +
jz loc_1002DE5  +
call ds:CoUninitialize  +
add esi 0Ch +
push esi  +
call ds:DeleteCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100288D  +
test [ebp+arg_0] 1 +
jz loc_1002E10  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+8] edi +
mov ebx 0FFAh +
cmp eax edi +
jz loc_1002E7B  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1002E3F  +
sub eax edx +
sar eax 1 +
lea edi [eax+1] +
cmp edi ebx +
jnb loc_1002E7B  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_1002E7B  +
push [ebp+arg_0]  +
push edi  +
push eax  +
call sub_1002CAC  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1002EC2  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1002E85  +
sub eax edx +
sar eax 1 +
lea edi [eax+1] +
cmp edi ebx +
jnb loc_1002EC2  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_1002EC2  +
push [ebp+arg_4]  +
push edi  +
push eax  +
call sub_1002CAC  +
mov eax [ebp+arg_8] +
mov [esi+8] eax +
test eax eax +
jz loc_1002ED2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
jmp sub_1008B71  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
mov edi ds:CloseHandle +
test eax eax +
jz loc_1002F0E  +
push eax  +
call edi  +
mov eax [esi+48h] +
test eax eax +
jz loc_1002F18  +
push eax  +
call edi  +
mov ecx offset unk_1016148 +
call sub_1005B68  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_1008B71  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002EEA  +
test [ebp+arg_0] 1 +
jz loc_1002F53  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1008993  +
and dword ptr [esi+40h] 0 +
and dword ptr [esi+3Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
cmp dword ptr [ecx] 0 +
jge loc_1002F8D  +
xor ecx ecx +
jmp loc_1002F90  +
mov ecx [ecx+4] +
xor eax eax +
test ecx ecx +
setz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi [esi+204h] +
jle loc_1002FDD  +
call sub_100294D  +
cmp edi 7FFFFFFFh +
ja loc_1002FD7  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
mov [esi+204h] edi +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+40h] ebx +
jz loc_1003001  +
mov eax 8000FFFFh +
jmp loc_1003037  +
cmp [ebp+arg_0] ebx +
jnz loc_100300D  +
mov eax 80070057h +
jmp loc_1003037  +
push [ebp+arg_4]  +
push 1  +
push [ebp+arg_0]  +
call sub_100299E  +
test eax eax +
jge loc_1003025  +
mov eax 8007000Eh +
jmp loc_1003037  +
mov [esi+34h] ebx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov dword ptr [esi+40h] 1 +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_1008C4E  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1003066  +
mov eax 8007000Eh +
jmp loc_1003088  +
and dword ptr [eax+4] 0 +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
mov [eax] ecx +
mov ecx [esi+38h] +
test ecx ecx +
jz loc_100307D  +
mov [ecx+4] eax +
jmp loc_1003080  +
mov [esi+34h] eax +
inc dword ptr [esi+3Ch]  +
mov [esi+38h] eax +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+34h] +
test eax eax +
jz loc_10030C9  +
mov eax [eax] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [esi+34h] +
push edi  +
mov edi [eax+4] +
push eax  +
mov ecx esi +
call sub_1008D28  +
mov [esi+34h] edi +
test edi edi +
pop edi  +
jnz loc_10030C3  +
and dword ptr [esi+38h] 0 +
dec dword ptr [esi+3Ch]  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
lea ecx [eax+10h] +
mov [eax+0Ch] ecx +
mov dword ptr [eax+8] 80h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
add eax 20h +
push eax  +
call sub_10029F0  +
test eax eax +
jge loc_100310B  +
mov eax [esi] +
jmp loc_1003133  +
push [ebp+arg_4]  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
lea eax [ecx+eax*2] +
push eax  +
push [ebp+arg_0]  +
call sub_1002763  +
push eax  +
call sub_1002741  +
add eax [esi+4] +
mov ecx esi +
push eax  +
call sub_10029BC  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpWideCharStr] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
test eax eax +
jz loc_10031E7  +
mov ebx [ebp+arg_8] +
lea ecx [ebx+1] +
cmp ecx 1FFFFFFFh +
ja loc_10031F0  +
cmp ebx 0FFFFFFFFh +
jnz loc_100317C  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100316C  +
sub eax edx +
sar eax 1 +
mov ebx eax +
mov eax [esi+4] +
mov edi ebx +
imul edi edi +
add eax edi +
push eax  +
mov ecx esi +
call sub_1002AD9  +
test eax eax +
jge loc_1003196  +
mov eax [esi] +
jmp loc_10031E9  +
mov eax [esi+0Ch] +
add eax [esi+4] +
xor ecx ecx +
push ecx  +
push ecx  +
push edi  +
push eax  +
push ebx  +
push [ebp+lpWideCharStr]  +
push ecx  +
push [ebp+CodePage]  +
call ds:WideCharToMultiByte  +
test eax eax +
jnz loc_10031DA  +
test ebx ebx +
jz loc_10031DA  +
call ds:GetLastError  +
test eax eax +
jle loc_10031CC  +
and eax 0FFFFh +
or eax 80070000h +
mov [esi] eax +
test eax eax +
jl loc_1003192  +
mov dword ptr [esi] 8000FFFFh +
jmp loc_1003192  +
mov ecx [esi+4] +
add ecx eax +
push ecx  +
mov ecx esi +
call sub_1002AA2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80004005h +
mov [esi] eax +
jmp loc_10031E9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+lpWideCharStr]  +
push 0  +
call sub_100313D  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi ecx +
jz loc_1003258  +
mov eax [ebp+arg_8] +
lea ecx [eax+1] +
cmp ecx 1FFFFFFFh +
ja loc_100324F  +
cmp eax 0FFFFFFFFh +
jnz loc_1003242  +
push [ebp+arg_4]  +
call sub_1002741  +
push eax  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_1002B81  +
jmp loc_100325A  +
mov eax 80004005h +
mov [esi] eax +
jmp loc_100325A  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov esi ecx +
jz loc_1003304  +
mov edi [ebp+arg_8] +
lea eax [edi+1] +
cmp eax 1FFFFFFFh +
ja loc_100330C  +
cmp edi 0FFFFFFFFh +
jnz loc_100329E  +
mov eax [ebp+lpMultiByteStr] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1003293  +
sub eax edx +
mov edi eax +
mov eax [esi+4] +
add eax edi +
push eax  +
mov ecx esi +
call sub_10029F0  +
test eax eax +
jge loc_10032B3  +
mov eax [esi] +
jmp loc_1003306  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
push edi  +
lea eax [ecx+eax*2] +
push eax  +
push edi  +
push [ebp+lpMultiByteStr]  +
push 0  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_10032F7  +
test edi edi +
jz loc_10032F7  +
call ds:GetLastError  +
test eax eax +
jle loc_10032E9  +
and eax 0FFFFh +
or eax 80070000h +
mov [esi] eax +
test eax eax +
jl loc_10032AF  +
mov dword ptr [esi] 8000FFFFh +
jmp loc_10032AF  +
mov ecx [esi+4] +
add ecx eax +
push ecx  +
mov ecx esi +
call sub_10029BC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax 80004005h +
mov [esi] eax +
jmp loc_1003306  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_1003340  +
test esi esi +
jz loc_100333E  +
push 1  +
mov ecx esi +
call sub_1002C86  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi offset CriticalSection +
push esi  +
mov edi ecx +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [edi+4] +
call sub_1003042  +
push 0  +
push 1  +
push dword ptr [edi]  +
call ds:ReleaseSemaphore  +
push esi  +
call ds:LeaveCriticalSection  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1002F84  +
test eax eax +
mov eax offset unk_1016128 +
jnz loc_10033A1  +
mov eax [esi+0Ch] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1002F84  +
test eax eax +
mov eax offset unk_101612A +
jnz loc_10033BE  +
mov eax [esi+0Ch] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+4] +
mov dword ptr [esi+204h] 100h +
mov [esi] eax +
call sub_1002F9D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call sub_1003219  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+lpMultiByteStr]  +
push 0  +
call sub_1003264  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1003438  +
mov eax 80070057h +
jmp loc_10034AB  +
push edi  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1003459  +
push dword ptr [ebp+8]  +
mov ecx eax +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1002E1C  +
mov edi eax +
jmp loc_100345B  +
xor edi edi +
test edi edi +
jnz loc_1003466  +
mov eax 8007000Eh +
jmp loc_10034AA  +
push esi  +
mov esi offset CriticalSection +
push esi  +
call ds:EnterCriticalSection  +
mov ecx esi +
call sub_1002801  +
test eax eax +
jz loc_1003493  +
push edi  +
mov ecx esi +
call sub_1002830  +
mov ecx eax +
call sub_100334A  +
test eax eax +
jl loc_1003493  +
xor edi edi +
test edi edi +
jz loc_10034A0  +
push 1  +
mov ecx edi +
call sub_1002DF6  +
push esi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
lea eax [esi+10h] +
mov [esi+0Ch] eax +
mov dword ptr [esi+8] 80h +
call sub_10033F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+lpMultiByteStr]  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
lea eax [esi+10h] +
mov [esi+0Ch] eax +
mov dword ptr [esi+8] 80h +
call sub_100340B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp [ecx] eax +
jl loc_100352E  +
mov eax [ecx+4] +
push eax  +
call sub_100338B  +
push eax  +
mov ecx esi +
call sub_10033F0  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_10134E9  +
mov eax large fs:0 +
push eax  +
mov eax 14ECh +
call __alloca_probe  +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_0] +
mov esi [ebp+arg_C] +
mov ebx [ebp+arg_4] +
mov [ebp+hInternet] eax +
mov eax [ebp+arg_8] +
xor edi edi +
mov [eax] edi +
push 3Ch  +
mov [ebp+var_14B4] eax +
lea eax [ebp+nServerPort] +
push edi  +
push eax  +
mov [esi+4] edi +
mov [esi] edi +
call memset  +
mov eax 0FFFFh +
mov word ptr [ebp+var_14E0] ax +
lea eax [ebp+var_50] +
mov [ebp+var_14F4] eax +
lea eax [ebp+szServerName] +
mov [ebp-14E8h] eax +
add esp 0Ch +
lea eax [ebp+var_1298] +
mov [ebp+lpWideCharStr] eax +
lea eax [ebp+nServerPort] +
push eax  +
push edi  +
push edi  +
push ebx  +
mov [ebp+nServerPort] 3Ch +
mov dword ptr [ebp-14F0h] 20h +
mov dword ptr [ebp-14E4h] 100h +
mov [ebp+var_14C8] 824h +
call ds:InternetCrackUrlW  +
test eax eax +
jnz loc_1003631  +
call ds:GetLastError  +
cmp eax edi +
jle loc_100362A  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_100374B  +
lea eax [ebp+var_50] +
push offset aHttp  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003650  +
mov ebx 80004005h +
jmp loc_100374F  +
mov eax [ebp+lpWideCharStr] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1003659  +
sub eax edx +
sar eax 1 +
imul eax eax +
inc eax  +
push eax  +
lea ecx [ebp+lpMultiByteStr] +
mov [ebp+var_14B8] eax +
call sub_100BE24  +
mov [ebp+var_4] edi +
cmp [ebp+lpMultiByteStr] edi +
jnz loc_10036A1  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+lpMultiByteStr] +
mov ebx 8007000Eh +
call sub_100294D  +
jmp loc_100374F  +
lea eax [ebp+var_14B8] +
push eax  +
push [ebp+lpMultiByteStr]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
call sub_100A473  +
mov ebx eax +
cmp ebx edi +
jl loc_100373C  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
lea ecx [ebp+var_14B0] +
call sub_10034E7  +
mov ebx [ebp+var_14B0] +
cmp ebx edi +
jl loc_1003731  +
push edi  +
push edi  +
push 3  +
push edi  +
push edi  +
push [ebp+var_14E0]  +
lea eax [ebp+szServerName] +
push eax  +
push [ebp+hInternet]  +
call ds:InternetConnectW  +
mov ecx [ebp+var_14B4] +
mov [ecx] eax +
cmp eax edi +
jnz loc_1003721  +
call ds:GetLastError  +
cmp eax edi +
jle loc_100371D  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_1003731  +
lea eax [ebp+var_14B0] +
push eax  +
mov ecx esi +
call sub_100351A  +
mov ebx [esi] +
lea ecx [ebp+var_14B0] +
call sub_1002970  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+lpMultiByteStr] +
call sub_100294D  +
cmp ebx edi +
jge loc_1003764  +
mov esi [ebp+var_14B4] +
mov eax [esi] +
cmp eax edi +
jz loc_1003764  +
push eax  +
call ds:InternetCloseHandle  +
mov [esi] edi +
mov eax ebx +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn 10h  +
***
call __EH_prolog3_GS  +
mov eax [ebp+8] +
mov esi [ebp+0Ch] +
mov [ebp-978h] eax +
mov eax [ebp+14h] +
mov [ebp-964h] eax +
mov eax [ebp+18h] +
mov [ebp-960h] eax +
mov eax [ebp+1Ch] +
mov [ebp-980h] eax +
lea eax [ebp-428h] +
xor ebx ebx +
mov [ebp-42Ch] eax +
mov eax 80h +
mov [ebp-970h] ebx +
mov [ebp-95Ch] ebx +
mov [ebp-438h] ebx +
mov [ebp-430h] eax +
mov [ebp-434h] ebx +
lea ecx [ebp-538h] +
mov [ebp-4] ebx +
mov [ebp-96Ch] esi +
mov [ebp-548h] ebx +
mov [ebp-53Ch] ecx +
mov [ebp-540h] eax +
mov [ebp-544h] ebx +
push 3Ch  +
pop edi  +
push edi  +
lea eax [ebp-9BCh] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-218h] +
mov [ebp-9ACh] eax +
lea eax [ebp-9BCh] +
push eax  +
push ebx  +
push ebx  +
push esi  +
mov [ebp-9BCh] edi +
mov dword ptr [ebp-9A8h] 104h +
call ds:InternetCrackUrlW  +
cmp eax ebx +
jnz loc_1003883  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100386D  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
lea ecx [ebp-548h] +
call sub_1002970  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1003C1D  +
push dword ptr [ebp-9A8h]  +
lea ecx [ebp-328h] +
push dword ptr [ebp-9ACh]  +
call sub_10034B4  +
mov esi [ebp-328h] +
cmp esi ebx +
mov byte ptr [ebp-4] 2 +
jge loc_10038B5  +
lea ecx [ebp-328h] +
call sub_1002970  +
jmp loc_100386F  +
lea eax [ebp-974h] +
push eax  +
lea eax [ebp-968h] +
push eax  +
lea eax [ebp-438h] +
push eax  +
push dword ptr [ebp+10h]  +
mov [ebp-968h] ebx +
push dword ptr [ebp-978h]  +
mov [ebp-974h] ebx +
call sub_100ACD4  +
mov esi eax +
cmp esi ebx +
jl loc_10038A8  +
cmp [ebp-974h] ebx +
jz loc_10038F9  +
mov esi 80070005h +
jmp loc_10038A8  +
or edi 0FFFFFFFFh +
cmp [ebp-968h] ebx +
jnz loc_1003926  +
push edi  +
lea ecx [ebp-328h] +
call sub_100338B  +
push eax  +
lea ecx [ebp-438h] +
call sub_10033F0  +
mov dword ptr [ebp-968h] 1 +
mov esi [ebp-438h] +
cmp esi ebx +
jl loc_1003C04  +
cmp [ebp+10h] ebx +
jz loc_1003AAE  +
lea eax [ebp-548h] +
push eax  +
push offset aHttp_0  +
push ebx  +
call sub_100AF05  +
test eax eax +
jl loc_10039C6  +
lea ecx [ebp-548h] +
call sub_100338B  +
push edi  +
push eax  +
lea ecx [ebp-328h] +
mov [ebp-324h] ebx +
mov [ebp-328h] ebx +
call sub_10033F0  +
mov esi [ebp-328h] +
cmp esi ebx +
lea ecx [ebp-328h] +
jl loc_1003C0A  +
call sub_100338B  +
mov esi eax +
push ebx  +
push esi  +
call sub_1002783  +
cmp eax ebx +
jz loc_10039A5  +
sub eax esi +
dec eax  +
dec eax  +
sar eax 1 +
jmp loc_10039AB  +
mov eax [ebp-324h] +
push eax  +
push esi  +
lea ecx [ebp-438h] +
mov [ebp-434h] ebx +
mov [ebp-438h] ebx +
call sub_10033F0  +
jmp loc_10039E4  +
push edi  +
push offset aProxy80  +
push ebx  +
lea ecx [ebp-328h] +
mov [ebp-324h] ebx +
mov [ebp-328h] ebx +
call sub_1003219  +
push edi  +
push offset aProxy  +
push ebx  +
lea ecx [ebp-438h] +
call sub_1003219  +
mov esi [ebp-438h] +
cmp esi ebx +
lea ecx [ebp-328h] +
jl loc_1003C0A  +
call sub_100338B  +
push 7  +
mov esi offset aHttp_1 +
mov edi eax +
push esi  +
push edi  +
call ds:_wcsnicmp  +
add esp 0Ch +
lea ecx [ebp-328h] +
test eax eax +
jz loc_1003A39  +
call sub_100338B  +
mov edi eax +
add edi 0Eh +
jmp loc_1003A63  +
push 8  +
push offset aHttps  +
call sub_100338B  +
push eax  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1003A63  +
lea ecx [ebp-328h] +
call sub_100338B  +
mov edi eax +
add edi 10h +
push 0FFFFFFFFh  +
push esi  +
push ebx  +
lea ecx [ebp-548h] +
mov [ebp-544h] ebx +
mov [ebp-548h] ebx +
call sub_1003219  +
push 0FFFFFFFFh  +
push edi  +
lea ecx [ebp-548h] +
call sub_10033F0  +
mov esi [ebp-548h] +
cmp esi ebx +
jl loc_10038A8  +
lea ecx [ebp-548h] +
call sub_100338B  +
mov [ebp-96Ch] eax +
or edi 0FFFFFFFFh +
mov eax [ebp-96Ch] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1003AB7  +
sub eax edx +
sar eax 1 +
lea esi [eax+1] +
push esi  +
lea ecx [ebp-958h] +
call sub_10033C5  +
push esi  +
lea ecx [ebp-750h] +
mov byte ptr [ebp-4] 3 +
call sub_10033C5  +
mov byte ptr [ebp-4] 4 +
cmp [ebp-750h] ebx +
jz loc_1003BE1  +
cmp [ebp-958h] ebx +
jz loc_1003BE1  +
lea eax [ebp-97Ch] +
push eax  +
push esi  +
push dword ptr [ebp-750h]  +
mov dword ptr [ebp-97Ch] 50h +
push esi  +
push dword ptr [ebp-958h]  +
push dword ptr [ebp-96Ch]  +
call sub_100A57A  +
mov esi eax +
cmp esi ebx +
jl loc_1003BE6  +
push 40h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-978h] eax +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_1003B55  +
mov ecx eax +
call sub_1002BEA  +
mov esi eax +
jmp loc_1003B57  +
xor esi esi +
mov byte ptr [ebp-4] 4 +
mov [ebp-970h] esi +
cmp esi ebx +
jz loc_1003BE1  +
mov ecx esi +
call sub_100B47B  +
lea eax [ebp-95Ch] +
push eax  +
lea ecx [ebp-438h] +
call sub_100338B  +
push eax  +
push dword ptr [ebp-750h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
call sub_100CF9E  +
test eax eax +
jge loc_1003B9A  +
mov esi 80070002h +
jmp loc_1003BE6  +
mov ecx [ebp-95Ch] +
mov eax [ecx] +
push 1  +
push dword ptr [ebp-964h]  +
call dword ptr [eax+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1003BE6  +
mov ecx [ebp-95Ch] +
push dword ptr [ebp-960h]  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_1003BE6  +
mov ecx [ebp-95Ch] +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
mov ecx [ebp-980h] +
mov [ecx] eax +
xor esi esi +
jmp loc_1003BE6  +
mov esi 8007000Eh +
lea ecx [ebp-750h] +
mov byte ptr [ebp-4] 3 +
call sub_100294D  +
lea ecx [ebp-958h] +
mov byte ptr [ebp-4] 2 +
call sub_100294D  +
lea ecx [ebp-328h] +
call sub_1002970  +
lea ecx [ebp-548h] +
call sub_1002970  +
mov [ebp-4] edi +
lea ecx [ebp-438h] +
call sub_1002970  +
mov eax [ebp-95Ch] +
cmp eax ebx +
jz loc_1003C3E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-95Ch] ebx +
mov ecx [ebp-970h] +
cmp ecx ebx +
jz loc_1003C4F  +
push 1  +
call sub_1002C86  +
cmp esi ebx +
jge loc_1003CBB  +
mov eax [ebp-964h] +
cmp [eax] ebx +
jge loc_1003C61  +
xor eax eax +
jmp loc_1003C64  +
mov eax [eax+4] +
mov ecx [ebp-964h] +
lea edi [eax+eax] +
call sub_100338B  +
cmp edi ebx +
jz loc_1003C7C  +
mov [eax] bl +
inc eax  +
dec edi  +
jnz loc_1003C76  +
mov eax [ebp-960h] +
cmp [eax] ebx +
jge loc_1003C8A  +
xor eax eax +
jmp loc_1003C8D  +
mov eax [eax+4] +
mov ecx [ebp-960h] +
lea edi [eax+eax] +
call sub_100338B  +
cmp edi ebx +
jz loc_1003CA5  +
mov [eax] bl +
inc eax  +
dec edi  +
jnz loc_1003C9F  +
mov eax [ebp-964h] +
mov [eax+4] ebx +
mov [eax] ebx +
mov eax [ebp-960h] +
mov [eax+4] ebx +
mov [eax] ebx +
mov eax esi +
call sub_100836C  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
push ebx  +
push esi  +
mov ebx [ebp+lpszUrl] +
push edi  +
xor edi edi +
xor ecx ecx +
push 2  +
mov esi 400h +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov [ebp+var_4] edi +
mov [ebx+4] edi +
mov [ebx] edi +
mov [ebp+var_8] edi +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
jmp loc_1003D65  +
lea eax [esi+esi] +
push edi  +
mov [ebp+dwBufferLength] eax +
lea eax [ebp+dwBufferLength] +
push eax  +
push [ebp+lpszUrl]  +
push 21h  +
push [ebp+hRequest]  +
call ds:HttpQueryInfoW  +
test eax eax +
jnz loc_1003D72  +
cmp [ebp+var_8] edi +
jnz loc_1003DE9  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_1003DE9  +
mov esi [ebp+dwBufferLength] +
push [ebp+lpszUrl]  +
shr esi 1 +
call ??_V@YAXPAX@Z  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov [ebp+var_8] 1 +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp+lpszUrl] eax +
pop ecx  +
cmp eax edi +
jnz loc_1003D05  +
jmp loc_1003EBD  +
cmp [ebp+arg_8] edi +
jnz loc_1003D95  +
push 0FFFFFFFFh  +
push [ebp+lpszUrl]  +
mov ecx ebx +
mov [ebx+4] edi +
mov [ebx] edi +
call sub_10033F0  +
mov eax [ebx] +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_1003F23  +
push 3Ch  +
pop esi  +
push esi  +
lea eax [ebp+UrlComponents] +
push edi  +
push eax  +
call memset  +
or dword ptr [ebp-34h] 0FFFFFFFFh +
mov [ebp+UrlComponents] esi +
mov esi 0FFFFh +
add esp 0Ch +
mov eax esi +
mov [ebp-30h] ax +
lea eax [ebp+UrlComponents] +
push eax  +
push edi  +
push edi  +
push [ebp+lpszUrl]  +
call ds:InternetCrackUrlW  +
test eax eax +
jnz loc_1003DE2  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1003DDC  +
and eax esi +
or eax 80070000h +
mov [ebp+var_4] eax +
mov [ebp-38h] edi +
mov eax [ebp-38h] +
cmp eax edi +
jnz loc_1003DF5  +
mov [ebp+var_4] 0C00D2EE3h +
jmp loc_1003F23  +
mov edx [ebp-34h] +
xor ecx ecx +
mov [eax+edx*2] cx +
cmp [ebp+arg_8] edi +
jnz loc_1003EA8  +
push 3Ch  +
lea eax [ebp+var_84] +
push edi  +
push eax  +
call memset  +
or [ebp+var_70] 0FFFFFFFFh +
add esp 0Ch +
lea eax [ebp+var_84] +
push eax  +
push edi  +
push edi  +
push [ebp+arg_C]  +
mov [ebp+var_84] 3Ch +
mov [ebp+var_6C] si +
call ds:InternetCrackUrlW  +
test eax eax +
jz loc_1003E79  +
mov eax [ebp+var_74] +
cmp eax edi +
jz loc_1003E79  +
mov edx [ebp+var_70] +
xor ecx ecx +
mov [eax+edx*2] cx +
mov eax [ebp-34h] +
cmp eax [ebp+var_70] +
jnz loc_1003E79  +
push [ebp+var_74]  +
push dword ptr [ebp-38h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1003E79  +
mov ax [ebp-30h] +
cmp ax [ebp+var_6C] +
jz loc_1003F23  +
mov esi [ebp+arg_18] +
mov eax [ebp+arg_14] +
mov [esi+4] edi +
mov [esi] edi +
push dword ptr [eax]  +
call ds:InternetCloseHandle  +
mov eax [ebp+arg_14] +
push esi  +
push eax  +
mov ecx ebx +
mov [eax] edi +
call sub_100338B  +
push eax  +
push [ebp+hInternet]  +
call sub_1003546  +
mov [ebp+var_4] eax +
jmp loc_1003F23  +
mov eax [ebp-34h] +
lea eax [eax+eax+34h] +
push eax  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
cmp ebx edi +
jnz loc_1003EC6  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1003F23  +
movzx ecx word ptr [ebp-30h] +
push ecx  +
push dword ptr [ebp-38h]  +
mov ecx [ebp-34h] +
push offset aSU  +
add ecx 14h +
lea eax [ebx+2] +
push ecx  +
push eax  +
call sub_1002D1B  +
add esp 14h +
push 0Ch  +
push ebx  +
push 26h  +
push [ebp+hInternet]  +
lea eax [ebx+2] +
mov dword ptr [ebx] 3 +
mov [ebx+4] eax +
mov [ebx+8] edi +
call ds:InternetSetOptionA  +
test eax eax +
jnz loc_1003F1B  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1003F18  +
and eax esi +
or eax 80070000h +
mov [ebp+var_4] eax +
push ebx  +
call ds:free  +
pop ecx  +
cmp [ebp+lpszUrl] edi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1003F34  +
push [ebp+lpszUrl]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+var_4] +
leave   +
retn 1Ch  +
***
call __EH_prolog3_GS  +
mov edi [ebp+8] +
mov ecx [ebp+0Ch] +
mov esi [ebp+10h] +
lea eax [ebp-110h] +
xor ebx ebx +
mov [ebp-114h] eax +
mov eax 80h +
mov [ebp-120h] ebx +
mov [ebp-118h] eax +
mov [ebp-11Ch] ebx +
lea edx [ebp-220h] +
mov [ebp-4] ebx +
mov [ebp-230h] ebx +
mov [ebp-224h] edx +
mov [ebp-228h] eax +
mov [ebp-22Ch] ebx +
push ebx  +
push 0Fh  +
push 2EEEh  +
push ecx  +
push ebx  +
mov byte ptr [ebp-4] 1 +
mov [ebp-234h] ebx +
call ds:InternetErrorDlg  +
cmp eax 2F00h +
jnz loc_1003FDF  +
lea ecx [ebp-230h] +
call sub_1002970  +
lea ecx [ebp-120h] +
call sub_1002970  +
mov eax ebx +
call sub_100836C  +
retn 10h  +
lea eax [ebp-234h] +
push eax  +
lea eax [ebp-230h] +
push eax  +
lea eax [ebp-120h] +
push eax  +
push dword ptr [ebp+14h]  +
push edi  +
push esi  +
call sub_1003787  +
cmp eax ebx +
jl loc_100407D  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-230h] +
call sub_100338B  +
push eax  +
lea ecx [ebp-120h] +
call sub_100338B  +
push eax  +
push esi  +
call sub_100B10B  +
cmp eax ebx +
jl loc_100407D  +
cmp [ebp-120h] ebx +
jge loc_1004033  +
xor eax eax +
jmp loc_1004039  +
mov eax [ebp-11Ch] +
lea ecx [ebp-120h] +
lea esi [eax+eax] +
call sub_100338B  +
cmp esi ebx +
jz loc_1004051  +
mov [eax] bl +
inc eax  +
dec esi  +
jnz loc_100404B  +
cmp [ebp-230h] ebx +
jge loc_100405D  +
xor eax eax +
jmp loc_1004063  +
mov eax [ebp-22Ch] +
lea ecx [ebp-230h] +
lea esi [eax+eax] +
call sub_100338B  +
cmp esi ebx +
jz loc_100407B  +
mov [eax] bl +
inc eax  +
dec esi  +
jnz loc_1004075  +
xor eax eax +
mov ebx eax +
jmp loc_1003FBF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7F4h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+hInternet] +
mov [ebp+var_7EC] eax +
mov eax [ebp+arg_4] +
xor ebx ebx +
push edi  +
mov [ebp+var_7F0] eax +
mov [ebp+var_7D8] ebx +
mov [ebp+var_7E0] 3 +
mov edi 197h +
push 4  +
lea eax [ebp+Buffer] +
push eax  +
push 6  +
push esi  +
mov [ebp+Buffer] 7530h +
call ds:InternetSetOptionA  +
test eax eax +
jnz loc_10040F3  +
call ds:GetLastError  +
push ebx  +
push 4  +
push ebx  +
lea eax [ebp+BuffersIn] +
push eax  +
push esi  +
call ds:HttpSendRequestExW  +
test eax eax +
jz loc_10041F6  +
push ebx  +
push 4  +
push ebx  +
push esi  +
call ds:HttpEndRequestA  +
test eax eax +
jnz loc_100413F  +
call ds:GetLastError  +
cmp eax 2F00h +
jz loc_10040CD  +
cmp eax ebx +
jle loc_1004134  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_7D8] eax +
jmp loc_100425B  +
push ebx  +
lea eax [ebp+dwBufferLength] +
push eax  +
lea eax [ebp+var_7E4] +
push eax  +
push 20000013h  +
push esi  +
mov [ebp+var_7E4] ebx +
mov [ebp+dwBufferLength] 4 +
call ds:HttpQueryInfoA  +
test eax eax +
jz loc_10041F6  +
mov eax [ebp+var_7E4] +
cmp eax 191h +
jz loc_1004183  +
cmp eax edi +
jnz loc_1004201  +
mov ecx [ebp+var_7E0] +
dec [ebp+var_7E0]  +
test ecx ecx +
jbe loc_100425B  +
xor ecx ecx +
cmp eax edi +
setz cl  +
push ecx  +
push esi  +
push [ebp+var_7F0]  +
push [ebp+var_7EC]  +
call sub_1003F40  +
cmp eax ebx +
mov [ebp+var_7D8] eax +
jl loc_100425B  +
mov [ebp+dwNumberOfBytesRead] ebx +
jmp loc_10041D3  +
cmp [ebp+dwNumberOfBytesRead] ebx +
jz loc_10040CD  +
lea eax [ebp+dwNumberOfBytesRead] +
push eax  +
push 7D0h  +
lea eax [ebp+var_7D4] +
push eax  +
push esi  +
call ds:InternetReadFile  +
test eax eax +
jnz loc_10041C7  +
jmp loc_10040CD  +
call ds:GetLastError  +
jmp loc_1004126  +
cmp eax 12Ch +
jz loc_1004251  +
cmp eax 12Dh +
jz loc_1004251  +
cmp eax 12Eh +
jz loc_1004251  +
cmp eax 12Fh +
jz loc_1004251  +
cmp eax 133h +
jz loc_1004251  +
cmp eax 131h +
jnz loc_1004237  +
mov [ebp+var_7D8] 0C00D2EE1h +
jmp loc_100425B  +
cmp eax 0C8h +
jb loc_1004245  +
cmp eax 12Bh +
jbe loc_100425B  +
mov [ebp+var_7D8] 80004005h +
jmp loc_100425B  +
mov [ebp+var_7D8] 0C00D1388h +
mov ecx [ebp+var_4] +
mov eax [ebp+var_7D8] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 34h  +
***
call __EH_prolog3_GS  +
mov ecx [ebp+14h] +
mov eax [ebp+10h] +
mov esi [ebp+0Ch] +
mov edi [ebp+8] +
xor ebx ebx +
mov [ecx] ebx +
push 0FFFFFFFFh  +
mov [ebp-360h] ecx +
push esi  +
lea ecx [ebp-120h] +
mov [ebp-354h] edi +
mov [ebp-358h] eax +
mov [ebp-348h] ebx +
mov dword ptr [eax] 9 +
call sub_10034B4  +
lea eax [ebp-220h] +
mov [ebp-224h] eax +
mov eax 80h +
mov [ebp-4] ebx +
mov [ebp-230h] ebx +
mov [ebp-228h] eax +
mov [ebp-22Ch] ebx +
lea ecx [ebp-330h] +
mov [ebp-34Ch] ebx +
mov dword ptr [ebp-350h] 0Ah +
mov [ebp-340h] ebx +
mov [ebp-334h] ecx +
mov [ebp-338h] eax +
mov [ebp-33Ch] ebx +
lea eax [ebp-340h] +
push eax  +
lea eax [ebp-348h] +
push eax  +
push esi  +
push edi  +
mov byte ptr [ebp-4] 2 +
call sub_1003546  +
mov esi eax +
cmp esi ebx +
lea ecx [ebp-340h] +
jge loc_10044B6  +
call sub_1002970  +
lea ecx [ebp-230h] +
call sub_1002970  +
lea ecx [ebp-120h] +
call sub_1002970  +
mov eax esi +
jmp loc_10046EF  +
sub esp 28h +
push 0Ah  +
pop ecx  +
mov edi esp +
push dword ptr [ebp-344h]  +
lea esi [ebp-38Ch] +
push dword ptr [ebp-348h]  +
mov dword ptr [ebp-38Ch] 28h +
mov [ebp-388h] ebx +
mov dword ptr [ebp-384h] offset Class +
mov [ebp-380h] ebx +
mov [ebp-37Ch] ebx +
mov [ebp-378h] ebx +
mov [ebp-374h] ebx +
mov [ebp-370h] ebx +
mov [ebp-36Ch] ebx +
mov [ebp-368h] ebx +
movs   +
lea ecx [ebp-120h] +
call sub_100338B  +
push eax  +
call sub_1004089  +
mov edi eax +
cmp edi ebx +
jge loc_10044FB  +
cmp edi 0C00D1388h +
jz loc_10043F0  +
cmp edi 0C00D2EE1h +
jnz loc_10046A4  +
mov eax [ebp-350h] +
dec dword ptr [ebp-350h]  +
test eax eax +
jbe loc_10046A4  +
lea eax [ebp-340h] +
push eax  +
lea eax [ebp-348h] +
push eax  +
lea eax [ebp-230h] +
push eax  +
lea ecx [ebp-120h] +
call sub_100338B  +
push eax  +
xor eax eax +
cmp edi 0C00D2EE1h +
setz al  +
push eax  +
push dword ptr [ebp-344h]  +
push dword ptr [ebp-354h]  +
call sub_1003CCA  +
mov edi eax +
cmp edi ebx +
jl loc_10046A4  +
push dword ptr [ebp-344h]  +
call ds:InternetCloseHandle  +
cmp [ebp-230h] ebx +
mov [ebp-344h] ebx +
jl loc_10044A2  +
cmp [ebp-22Ch] ebx +
jz loc_10044A2  +
lea eax [ebp-230h] +
push eax  +
lea ecx [ebp-120h] +
mov [ebp-11Ch] ebx +
mov [ebp-120h] ebx +
call sub_100351A  +
mov [ebp-22Ch] ebx +
mov [ebp-230h] ebx +
mov dword ptr [ebp-34Ch] 1 +
mov edi [ebp-120h] +
cmp edi ebx +
jl loc_10046A4  +
lea ecx [ebp-340h] +
push ebx  +
push 4600300h  +
push ebx  +
push ebx  +
push offset szVersion  +
call sub_100338B  +
push eax  +
push offset szVerb  +
push dword ptr [ebp-348h]  +
call ds:HttpOpenRequestW  +
mov [ebp-344h] eax +
cmp eax ebx +
jnz loc_1004361  +
jmp loc_1004514  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_10046A4  +
push ebx  +
push ebx  +
lea eax [ebp-35Ch] +
push eax  +
push dword ptr [ebp-344h]  +
call ds:InternetQueryDataAvailable  +
test eax eax +
jnz loc_1004520  +
call ds:GetLastError  +
cmp eax ebx +
jg loc_10044EA  +
jmp loc_10044F4  +
mov eax [ebp-35Ch] +
inc eax  +
push eax  +
call ??_U@YAPAXI@Z  +
mov esi eax +
pop ecx  +
mov [ebp-354h] esi +
cmp esi ebx +
jnz loc_1004544  +
mov edi 8007000Eh +
jmp loc_10046A4  +
lea eax [ebp-364h] +
push eax  +
push dword ptr [ebp-35Ch]  +
push esi  +
push dword ptr [ebp-344h]  +
call ds:InternetReadFile  +
test eax eax +
jnz loc_1004584  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1004576  +
and eax 0FFFFh +
or eax 80070000h +
push esi  +
mov edi eax +
call ??_V@YAXPAX@Z  +
pop ecx  +
jmp loc_10046A4  +
mov eax [ebp-364h] +
push offset aBodyH1  +
push esi  +
mov [eax+esi] bl +
mov edi 80004005h +
call sub_100B2E6  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_1004620  +
add esi 0Ah +
push offset aH1  +
push esi  +
call sub_100B2E6  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_1004620  +
push offset aNetshowIsapiLo  +
push esi  +
mov [eax] bl +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10045DB  +
mov eax [ebp-358h] +
mov dword ptr [eax] 4 +
jmp loc_100461E  +
push offset aWmsIsapiLogDll  +
push esi  +
call sub_100B2E6  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_1004620  +
lea ecx [ebp-358h] +
push ecx  +
lea ecx [ebp-350h] +
push ecx  +
lea ecx [ebp-390h] +
push ecx  +
push dword ptr [ebp-358h]  +
add eax 12h +
push offset aD_D_D_D  +
push eax  +
call ds:sscanf  +
add esp 18h +
cmp eax 4 +
jnz loc_1004620  +
xor edi edi +
push dword ptr [ebp-354h]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
cmp [ebp-34Ch] ebx +
jz loc_10046A4  +
cmp [ebp-120h] ebx +
jge loc_1004640  +
xor eax eax +
jmp loc_1004646  +
mov eax [ebp-11Ch] +
xor ecx ecx +
push 2  +
inc eax  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
mov esi eax +
mov eax [ebp-360h] +
pop ecx  +
mov [eax] esi +
cmp esi ebx +
jz loc_100453A  +
cmp [ebp-120h] ebx +
jge loc_100467E  +
mov [ebp-34Ch] ebx +
jmp loc_100468A  +
mov eax [ebp-11Ch] +
mov [ebp-34Ch] eax +
lea ecx [ebp-120h] +
call sub_100338B  +
push eax  +
mov eax [ebp-34Ch] +
inc eax  +
push eax  +
push esi  +
call sub_1002CAC  +
cmp [ebp-348h] ebx +
jz loc_10046B8  +
push dword ptr [ebp-348h]  +
call ds:InternetCloseHandle  +
cmp [ebp-344h] ebx +
jz loc_10046CC  +
push dword ptr [ebp-344h]  +
call ds:InternetCloseHandle  +
lea ecx [ebp-340h] +
call sub_1002970  +
lea ecx [ebp-230h] +
call sub_1002970  +
lea ecx [ebp-120h] +
call sub_1002970  +
mov eax edi +
call sub_100836C  +
retn 10h  +
***
call __EH_prolog3_GS  +
mov edx [ebp+10h] +
mov ecx [ebp+0Ch] +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-2CCh] edx +
lea edx [ebp-2B0h] +
mov esi 80h +
mov [ebp-2D0h] ecx +
mov [ebp-2C4h] ebx +
mov [ebp-2C8h] ebx +
mov [ebp-2C0h] ebx +
mov [ebp-2B4h] edx +
mov [ebp-2B8h] esi +
mov [ebp-2BCh] ebx +
lea edx [ebp-2C0h] +
push edx  +
lea edx [ebp-2C4h] +
push edx  +
push ecx  +
push eax  +
mov [ebp-4] ebx +
call sub_1003546  +
mov edi eax +
cmp edi ebx +
jl loc_10049B4  +
push ebx  +
push 4600300h  +
push ebx  +
push ebx  +
push offset szVersion  +
lea ecx [ebp-2C0h] +
call sub_100338B  +
push eax  +
push offset aPost  +
push dword ptr [ebp-2C4h]  +
call ds:HttpOpenRequestW  +
mov [ebp-2C8h] eax +
cmp eax ebx +
jnz loc_10047C2  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10047BB  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_10049B4  +
lea eax [ebp-1A0h] +
mov [ebp-1B0h] ebx +
mov [ebp-1A4h] eax +
mov [ebp-1A8h] esi +
mov [ebp-1ACh] ebx +
lea eax [ebp-90h] +
mov [ebp-0A0h] ebx +
mov [ebp-94h] eax +
mov [ebp-98h] esi +
mov [ebp-9Ch] ebx +
or edi 0FFFFFFFFh +
push edi  +
push offset MultiByteStr  +
push ebx  +
lea ecx [ebp-1B0h] +
mov byte ptr [ebp-4] 2 +
call sub_1003264  +
push edi  +
push offset asc_10015B4  +
push ebx  +
lea ecx [ebp-1B0h] +
call sub_1003264  +
push edi  +
push offset aTextPlain  +
push ebx  +
lea ecx [ebp-1B0h] +
call sub_1003264  +
cmp dword ptr [ebp+14h] 9 +
push edi  +
jb loc_100486C  +
push offset aCharsetUtf8  +
push ebx  +
lea ecx [ebp-1B0h] +
call sub_1003264  +
push edi  +
push dword ptr [ebp-2CCh]  +
lea ecx [ebp-0A0h] +
push 0FDE9h  +
call sub_100313D  +
jmp loc_100487D  +
push dword ptr [ebp-2CCh]  +
lea ecx [ebp-0A0h] +
call sub_10031FE  +
push edi  +
mov esi offset asc_1001594 +
push esi  +
push ebx  +
lea ecx [ebp-1B0h] +
call sub_1003264  +
push edi  +
push offset aHttp_msghdr_fi  +
push ebx  +
lea ecx [ebp-1B0h] +
call sub_1003264  +
push edi  +
push offset asc_10015B4  +
push ebx  +
lea ecx [ebp-1B0h] +
call sub_1003264  +
cmp [ebp-0A0h] ebx +
jge loc_10048C0  +
xor eax eax +
jmp loc_10048C6  +
mov eax [ebp-9Ch] +
push 0Ah  +
push eax  +
lea ecx [ebp-1B0h] +
call sub_10030EF  +
push edi  +
push esi  +
push ebx  +
lea ecx [ebp-1B0h] +
call sub_1003264  +
lea ecx [ebp-1B0h] +
call sub_100338B  +
mov esi eax +
cmp esi ebx +
jz loc_1004999  +
lea ecx [ebp-0A0h] +
call sub_10033A8  +
cmp eax ebx +
jz loc_1004999  +
cmp [ebp-1B0h] ebx +
mov dword ptr [ebp-2F8h] 28h +
mov [ebp-2F4h] ebx +
mov [ebp-2F0h] esi +
jge loc_100492C  +
xor ecx ecx +
jmp loc_1004932  +
mov ecx [ebp-1ACh] +
cmp [ebp-0A0h] ebx +
mov [ebp-2ECh] ecx +
mov [ebp-2E8h] ecx +
mov [ebp-2E4h] eax +
jge loc_1004950  +
xor eax eax +
jmp loc_1004956  +
mov eax [ebp-9Ch] +
sub esp 28h +
push 0Ah  +
pop ecx  +
mov edi esp +
push dword ptr [ebp-2C8h]  +
mov [ebp-2E0h] eax +
push dword ptr [ebp-2C4h]  +
mov [ebp-2DCh] eax +
push dword ptr [ebp-2D0h]  +
lea esi [ebp-2F8h] +
mov [ebp-2D8h] ebx +
mov [ebp-2D4h] ebx +
movs   +
call sub_1004089  +
mov edi eax +
jmp loc_100499E  +
mov edi 8007000Eh +
lea ecx [ebp-0A0h] +
call sub_1002970  +
lea ecx [ebp-1B0h] +
call sub_1002970  +
mov esi ds:InternetCloseHandle +
cmp [ebp-2C4h] ebx +
jz loc_10049CA  +
push dword ptr [ebp-2C4h]  +
call esi  +
cmp [ebp-2C8h] ebx +
jz loc_10049DA  +
push dword ptr [ebp-2C8h]  +
call esi  +
lea ecx [ebp-2C0h] +
call sub_1002970  +
mov eax edi +
call sub_100836C  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push edi  +
push offset szAgent  +
mov [ebp+var_8] 9 +
mov [ebp+var_4] edi +
call ds:InternetOpenW  +
mov ebx eax +
cmp ebx edi +
jnz loc_1004A39  +
call ds:GetLastError  +
cmp eax edi +
jg loc_1004A2D  +
mov esi eax +
jmp loc_1004A70  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1004A29  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
push ebx  +
call sub_1004277  +
mov esi eax +
cmp esi edi +
jl loc_1004A69  +
mov eax [ebp+var_4] +
cmp eax edi +
jnz loc_1004A5A  +
mov eax [ebp+arg_0] +
push [ebp+var_8]  +
push [ebp+arg_4]  +
push eax  +
push ebx  +
call sub_10046FC  +
mov esi eax +
push ebx  +
call ds:InternetCloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
xor esi esi +
mov [ebp+Handles] eax +
mov eax [edi+48h] +
push esi  +
push esi  +
mov [ebp+var_8] edi +
mov [ebp+var_4] esi +
mov [ebp+var_14] eax +
mov [ebp+var_C] esi +
call ds:CoInitializeEx  +
cmp eax esi +
mov [ebp+var_10] eax +
jl loc_1004AB8  +
mov [ebp+var_C] 1 +
jmp loc_1004AC2  +
cmp eax 80010106h +
jnz loc_1004B2E  +
mov [ebp+var_10] esi +
push ebx  +
mov ebx ds:WaitForMultipleObjects +
push 0FFFFFFFFh  +
push esi  +
lea eax [ebp+Handles] +
push eax  +
push 2  +
call ebx  +
test eax eax +
jnz loc_1004B22  +
mov esi offset CriticalSection +
push esi  +
call ds:EnterCriticalSection  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [edi+4] +
call sub_1003092  +
push esi  +
call ds:LeaveCriticalSection  +
mov edi [ebp+var_4] +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
call sub_10049F4  +
push 1  +
mov ecx edi +
call sub_1002DF6  +
push 0FFFFFFFFh  +
push 0  +
lea eax [ebp+Handles] +
push eax  +
push 2  +
call ebx  +
mov edi [ebp+var_8] +
test eax eax +
jz loc_1004ADD  +
xor esi esi +
pop ebx  +
cmp [ebp+var_C] esi +
jz loc_1004B2E  +
call ds:CoUninitialize  +
push 1  +
mov ecx edi +
call sub_1002F39  +
mov eax [ebp+var_10] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_1004A7E  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ebx [esi+4] +
xor edi edi +
mov ecx ebx +
mov [esi] edi +
call sub_1002F5F  +
push offset Addend  +
mov [ebp-4] edi +
mov [esi+48h] edi +
mov [esi+4Ch] edi +
mov [esi+50h] edi +
call ds:InterlockedIncrement  +
push edi  +
push 0Ah  +
mov ecx ebx +
call sub_1002FEA  +
cmp eax edi +
mov ecx [ebp+8] +
mov [ecx] eax +
jl loc_1004BFD  +
mov ebx ds:CreateSemaphoreA +
push edi  +
push 64h  +
push edi  +
push edi  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jnz loc_1004BD0  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1004BC9  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx [ebp+8] +
mov [ecx] eax +
jmp loc_1004BFD  +
push edi  +
push 1  +
push edi  +
push edi  +
call ebx  +
mov [esi+48h] eax +
cmp eax edi +
jz loc_1004BB5  +
lea eax [ebp-14h] +
push eax  +
push edi  +
push esi  +
push offset StartAddress  +
push edi  +
push edi  +
call ds:CreateThread  +
mov [esi+4Ch] eax +
cmp eax edi +
jz loc_1004BB5  +
mov eax [ebp+8] +
mov [eax] edi +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
push esi  +
lea ecx [ebp-14h] +
call sub_1002713  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [esi+18h] 0 +
jnz loc_1004C70  +
push 54h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-18h] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1004C51  +
lea eax [ebp-10h] +
push eax  +
call sub_1004B59  +
jmp loc_1004C53  +
xor eax eax +
mov [esi+18h] eax +
test eax eax +
jnz loc_1004C70  +
mov esi 8007000Eh +
push dword ptr [ebp-14h]  +
call ds:LeaveCriticalSection  +
mov eax esi +
call __EH_epilog3  +
retn   +
mov ecx esi +
call sub_1002D7A  +
cmp dword ptr [ebp-10h] 0 +
jge loc_1004C84  +
mov ecx esi +
call sub_1002DA1  +
mov esi [ebp-10h] +
jmp loc_1004C5F  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+8] +
call sub_1002858  +
and dword ptr [ebp-4] 0 +
and dword ptr [esi+24h] 0 +
mov ecx offset CriticalSection +
call sub_1004C0C  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push 94h  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
mov eax [ebp+VersionInformation.dwPlatformId] +
mov ecx [ebp+var_4] +
mov dword_1016110 eax +
xor eax eax +
xor ecx ebp +
inc eax  +
call sub_10082CB  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp-4] eax +
test byte ptr dword_10161D4 1 +
push ebx  +
push esi  +
push edi  +
jnz loc_1004D56  +
or dword_10161D4 1 +
call sub_1004CC6  +
mov dword_10161D0 eax +
push 4  +
pop eax  +
call __alloca_probe  +
mov esi esp +
push 1Ch  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
call ds:VirtualQuery  +
test eax eax +
jnz loc_1004D78  +
xor eax eax +
jmp loc_1004E35  +
mov ebx [ebp-28h] +
lea eax [ebp-50h] +
push eax  +
call ds:GetSystemInfo  +
mov eax [ebp-4Ch] +
lea edi [eax-1] +
not edi  +
and edi esi +
sub edi eax +
mov [ebp-0Ch] eax +
mov eax dword_1016110 +
mov esi eax +
dec esi  +
neg esi  +
sbb esi esi +
and esi 0FFFF1000h +
add esi 11000h +
add esi ebx +
cmp edi esi +
jb loc_1004D71  +
cmp eax 1 +
jz loc_1004E16  +
mov [ebp-8] ebx +
mov ebx 1000h +
push 1Ch  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-8]  +
call ds:VirtualQuery  +
test eax eax +
jz loc_1004D71  +
mov eax [ebp-20h] +
add [ebp-8] eax +
test [ebp-1Ch] ebx +
jz loc_1004DBF  +
test dword ptr [ebp-18h] 100h +
mov eax [ebp-2Ch] +
mov [ebp-8] eax +
jz loc_1004DF1  +
xor eax eax +
inc eax  +
jmp loc_1004E35  +
cmp edi eax +
jb loc_1004D71  +
cmp eax esi +
jnb loc_1004E00  +
mov [ebp-8] esi +
push 4  +
push ebx  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-8]  +
call ds:VirtualAlloc  +
mov eax dword_1016110 +
jmp loc_1004E19  +
mov [ebp-8] edi +
dec eax  +
neg eax  +
sbb eax eax +
and eax 103h +
lea ecx [ebp-10h] +
push ecx  +
inc eax  +
push eax  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-8]  +
call ds:VirtualProtect  +
lea esp [ebp-5Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn   +
***
call __SEH_prolog4_GS  +
mov bl 1 +
mov ecx [ebp+arg_0] +
lea eax [ecx+2000h] +
cmp eax ecx +
jnb loc_1004E6B  +
xor al al +
jmp loc_1004EA0  +
and [ebp+ms_exc.disabled] 0 +
call __alloca_probe_16  +
mov [ebp+ms_exc.old_esp] esp +
jmp loc_1004E97  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C00000FDh +
setz cl  +
mov eax ecx +
retn   +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov al bl +
lea esp [ebp-2Ch] +
call __SEH_epilog4_GS  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpWideCharStr] +
test esi esi +
jz loc_1004F13  +
cmp [ebp+lpMultiByteStr] 0 +
jz loc_1004F13  +
push [ebp+cchWideChar]  +
xor eax eax +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
mov [esi] ax +
push eax  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
neg eax  +
sbb eax eax +
and eax esi +
jmp loc_1004F15  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpMultiByteStr] +
xor eax eax +
cmp esi eax +
jz loc_1004F52  +
cmp [ebp+lpWideCharStr] eax +
jz loc_1004F52  +
push eax  +
push eax  +
push [ebp+cchMultiByte]  +
mov [esi] al +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push eax  +
push [ebp+CodePage]  +
call ds:WideCharToMultiByte  +
neg eax  +
sbb eax eax +
and eax esi +
jmp loc_1004F54  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+cchWideChar]  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpWideCharStr]  +
call sub_1004EE0  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+cchMultiByte]  +
push [ebp+lpWideCharStr]  +
push [ebp+lpMultiByteStr]  +
call sub_1004F1F  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
push [ebp+arg_0]  +
call memcpy  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp word ptr [eax] 0 +
jz loc_1004FD5  +
add eax 2 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+14h]  +
call ds:CoRevokeClassObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pUnk] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
test eax eax +
jz loc_1005049  +
push edi  +
lea ecx [ebp+pUnk] +
push ecx  +
push offset dword_1001944  +
push dword ptr [esi+0Ch]  +
call eax  +
mov edi eax +
test edi edi +
jl loc_1005039  +
lea eax [esi+14h] +
push eax  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push [ebp+pUnk]  +
push dword ptr [esi]  +
call ds:CoRegisterClassObject  +
mov edi eax +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_1005046  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
call ds:GetLastError  +
test eax eax +
jle locret_1005067  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1005080  +
mov edx [ebp+arg_0] +
test edx edx +
jnz loc_100509E  +
mov eax 80070057h +
pop ebp  +
retn 8  +
mov [edx] ax +
inc edx  +
inc edx  +
cmp word ptr [ecx] 27h +
jnz loc_100509C  +
push 27h  +
pop eax  +
mov [edx] ax +
inc edx  +
inc edx  +
inc ecx  +
inc ecx  +
movzx eax word ptr [ecx] +
test ax ax +
jnz loc_1005089  +
xor eax eax +
mov [edx] ax +
jmp loc_1005085  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_1005104  +
cmp dword ptr [esi+8] 0 +
jnz loc_1005104  +
push offset ModuleName  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10050E6  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov [esi+4] eax +
jmp loc_1005104  +
push offset LibFileName  +
call ds:LoadLibraryA  +
test eax eax +
jz loc_1005104  +
push offset aRegdeletekeya  +
push eax  +
call ds:GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_1005118  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_100512E  +
mov eax [esi+8] +
test eax eax +
jz loc_1005128  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_100512E  +
call ds:GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_100514F  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExA  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1005191  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_10051A1  +
mov ecx esi +
call sub_1005138  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push [ebp+ulOptions]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_10051DE  +
mov ecx esi +
call sub_1005138  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpData]  +
mov esi ecx +
call ds:lstrlenA  +
inc eax  +
push eax  +
push [ebp+lpData]  +
push 1  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExA  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push 28h  +
mov dword ptr [esi+8] 0Ah +
call ds:malloc  +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
retn   +
***
call ds:free  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
push esi  +
push edi  +
push 8  +
mov edi ecx +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1005295  +
mov eax 8007000Eh +
jmp loc_1005366  +
push ebx  +
push [ebp+lpString]  +
mov ebx ds:lstrlenW +
call ebx  +
push [ebp+arg_4]  +
lea eax [eax+eax+2] +
mov [ebp+cb] eax +
call ebx  +
push [ebp+cb]  +
mov ebx ds:CoTaskMemAlloc +
lea eax [eax+eax+2] +
mov [ebp+var_8] eax +
call ebx  +
push [ebp+var_8]  +
mov [esi] eax +
call ebx  +
mov ecx [esi] +
mov [esi+4] eax +
test ecx ecx +
jz loc_100534B  +
test eax eax +
jz loc_100534B  +
push [ebp+cb]  +
push [ebp+lpString]  +
push ecx  +
call memcpy  +
push [ebp+var_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call memcpy  +
mov eax [edi+8] +
add esp 18h +
cmp [edi+4] eax +
jnz loc_100533B  +
add eax eax +
mov [edi+8] eax +
shl eax 2 +
push eax  +
push dword ptr [edi]  +
call ds:realloc  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005339  +
push dword ptr [esi]  +
mov ebx ds:CoTaskMemFree +
call ebx  +
push dword ptr [esi+4]  +
call ebx  +
push esi  +
call ??3@YAXPAX@Z  +
mov eax [edi+8] +
cdq   +
sub eax edx +
sar eax 1 +
pop ecx  +
mov [edi+8] eax +
mov [ebp+var_C] 8007000Eh +
jmp loc_1005346  +
mov [edi] eax +
mov eax [edi+4] +
mov ecx [edi] +
mov [ecx+eax*4] esi +
inc dword ptr [edi+4]  +
mov eax [ebp+var_C] +
jmp loc_1005365  +
mov edi ds:CoTaskMemFree +
push ecx  +
call edi  +
push dword ptr [esi+4]  +
call edi  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax 8007000Eh +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jle loc_10053B1  +
push ebx  +
mov ebx ds:CoTaskMemFree +
push edi  +
mov eax [esi] +
mov ecx [ebp+var_4] +
mov edi [eax+ecx*4] +
push dword ptr [edi+4]  +
call ebx  +
push dword ptr [edi]  +
call ebx  +
push edi  +
call ??3@YAXPAX@Z  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
pop ecx  +
jl loc_100538C  +
pop edi  +
pop ebx  +
and dword ptr [esi+4] 0 +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov eax [ecx] +
cmp byte ptr [eax] 27h +
jnz loc_10053D6  +
push eax  +
call ds:CharNextA  +
cmp byte ptr [eax] 27h +
jz loc_10053D6  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+cb] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
push eax  +
mov [esi+4] eax +
call ds:CoTaskMemAlloc  +
mov [esi+8] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:IsDBCSLeadByte +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
movzx eax byte ptr [edi] +
push eax  +
mov esi ecx +
call ebx  +
mov edx [esi] +
xor ecx ecx +
test eax eax +
mov eax [esi+4] +
setnz cl  +
inc ecx  +
add edx ecx +
cmp edx eax +
jle loc_1005447  +
add eax eax +
push eax  +
push dword ptr [esi+8]  +
call ds:CoTaskMemRealloc  +
test eax eax +
jz loc_100546D  +
shl dword ptr [esi+4] 1 +
mov [esi+8] eax +
mov eax [esi+8] +
mov ecx [esi] +
mov dl [edi] +
mov [eax+ecx] dl +
inc dword ptr [esi]  +
movzx eax byte ptr [edi] +
push eax  +
call ebx  +
test eax eax +
jz loc_100546A  +
mov ecx [esi] +
mov dl [edi+1] +
mov eax [esi+8] +
mov [eax+ecx] dl +
inc dword ptr [esi]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_10161F0 1 +
jnz loc_10054C7  +
or dword_10161F0 1 +
push 8  +
pop eax  +
push 13h  +
mov word_10161DC ax +
pop eax  +
push 11h  +
mov word_10161E4 ax +
pop eax  +
mov lpString2 offset aS +
mov dword_10161E0 offset aD +
mov dword_10161E8 offset aB +
mov word_10161EC ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_10054EB  +
inc esi  +
cmp esi 3 +
jb loc_10054CA  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_10161DC[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_10054E6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
cmp al 30h +
jl loc_100553B  +
cmp al 39h +
jle loc_1005533  +
cmp al 40h +
jle loc_100553B  +
cmp al 46h +
jle loc_100552B  +
cmp al 60h +
jle loc_100553B  +
cmp al 66h +
jg loc_100553B  +
movsx eax al +
sub eax 57h +
jmp loc_100553D  +
movsx eax al +
sub eax 37h +
jmp loc_100553D  +
movsx eax al +
sub eax 30h +
jmp loc_100553D  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1001640[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_100556F  +
inc esi  +
cmp esi 0Eh +
jb loc_100554E  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_1001644[esi*8] +
jmp loc_100556A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_100559A  +
jmp loc_10055A6  +
cmp cl [ebp+arg_4] +
jz loc_10055A2  +
push eax  +
call ds:CharNextA  +
mov cl [eax] +
test cl cl +
jnz loc_100558E  +
jmp loc_10055A4  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
cmp byte ptr [ecx] 0 +
mov eax [ebp+lpsz] +
mov [ebp+lpsz] eax +
jz locret_100562D  +
cmp byte ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1005628  +
mov ebx ds:CharNextA +
mov esi [ebp+lpsz] +
mov edi [ebp+arg_4] +
jmp loc_1005611  +
mov al [edi] +
test al al +
jz loc_1005631  +
movsx ecx byte ptr [esi] +
movsx eax al +
sub ecx eax +
jnz loc_1005616  +
push esi  +
call ebx  +
push edi  +
mov [ebp+var_4] eax +
call ebx  +
mov ecx [ebp+var_4] +
sub eax edi +
sub ecx esi +
cmp ecx eax +
jnz loc_1005616  +
jmp loc_100560C  +
inc esi  +
movsx ecx byte ptr [esi] +
inc edi  +
movsx eax byte ptr [edi] +
sub ecx eax +
jz loc_1005611  +
cmp esi [ebp+var_4] +
jb loc_1005600  +
cmp byte ptr [esi] 0 +
jnz loc_10055DA  +
cmp byte ptr [edi] 0 +
jz loc_1005631  +
push [ebp+lpsz]  +
call ebx  +
cmp byte ptr [eax] 0 +
mov [ebp+lpsz] eax +
jnz loc_10055D2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax [ebp+lpsz] +
jmp loc_100562A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
cmp al 9 +
jl loc_1005658  +
cmp al 0Ah +
jle loc_1005653  +
cmp al 0Dh +
jz loc_1005653  +
cmp al 20h +
jnz loc_1005658  +
xor eax eax +
inc eax  +
jmp loc_100565A  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1005676  +
push dword ptr [esi]  +
call ds:CharNextA  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax byte ptr [eax] +
push eax  +
call sub_100563B  +
test eax eax +
jnz loc_100566A  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_1005663  +
mov eax [esi] +
mov cl [eax] +
test cl cl +
jnz loc_10056AC  +
mov eax 80020009h +
jmp loc_1005770  +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov [ebp+var_4] ebx +
cmp cl 27h +
jnz loc_1005727  +
mov edi ds:CharNextA +
push eax  +
call edi  +
mov [esi] eax +
jmp loc_1005710  +
mov ecx esi +
call sub_10053BF  +
test eax eax +
jnz loc_1005715  +
mov eax [esi] +
cmp byte ptr [eax] 27h +
jnz loc_10056DD  +
push eax  +
call edi  +
mov [esi] eax +
mov ebx [esi] +
push ebx  +
call edi  +
mov edx [ebp+var_4] +
mov ecx eax +
sub ecx ebx +
add ecx [ebp+arg_0] +
add edx 1000h +
mov [esi] eax +
cmp ecx edx +
jnb loc_1005775  +
cmp ebx eax +
jnb loc_100570B  +
mov al [ebx] +
mov ecx [ebp+arg_0] +
inc ebx  +
inc [ebp+arg_0]  +
mov [ecx] al +
cmp ebx [esi] +
jb loc_10056FC  +
mov eax [esi] +
mov ebx [ebp+arg_0] +
cmp byte ptr [eax] 0 +
jnz loc_10056C6  +
mov eax [esi] +
cmp byte ptr [eax] 0 +
jz loc_1005775  +
mov byte ptr [ebx] 0 +
push dword ptr [esi]  +
call edi  +
mov [esi] eax +
jmp loc_100576C  +
mov edi [esi] +
movzx eax byte ptr [edi] +
push eax  +
mov ecx esi +
call sub_100563B  +
test eax eax +
jnz loc_1005769  +
push edi  +
call ds:CharNextA  +
mov edx [ebp+var_4] +
mov ecx eax +
sub ecx edi +
add ecx ebx +
add edx 1000h +
mov [esi] eax +
cmp ecx edx +
jnb loc_1005775  +
cmp edi eax +
jnb loc_1005762  +
mov al [edi] +
mov [ebx] al +
inc edi  +
inc ebx  +
cmp edi [esi] +
jb loc_1005758  +
mov eax [esi] +
cmp byte ptr [eax] 0 +
jnz loc_1005727  +
mov byte ptr [ebx] 0 +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_100576E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_1016010 +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_10057AE  +
add esi 4 +
cmp esi offset dword_1016018 +
jl loc_100578C  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_10057A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyA  +
test eax eax +
jge loc_10057E1  +
xor eax eax +
jmp locret_10057EA  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cValues] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
mov [ebp+cValues] ebx +
call ds:RegQueryInfoKeyA  +
test eax eax +
jz loc_1005820  +
xor eax eax +
jmp loc_100586F  +
cmp [ebp+cValues] 1 +
jnz loc_1005866  +
mov eax 1000h +
push eax  +
mov [ebp+cbValueName] eax +
call ds:malloc  +
mov esi eax +
pop ecx  +
cmp esi ebx +
jz loc_100581C  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
push esi  +
push ebx  +
push [ebp+hKey]  +
call ds:RegEnumValueA  +
test eax eax +
jnz loc_100585A  +
cmp [esi] bl +
jz loc_100585A  +
xor ebx ebx +
inc ebx  +
push esi  +
call ds:free  +
pop ecx  +
mov eax ebx +
jmp loc_100586F  +
xor eax eax +
cmp eax [ebp+cValues] +
sbb eax eax +
neg eax  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
push 1000h  +
mov edi ecx +
call ds:malloc  +
pop ecx  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_100589D  +
mov eax 8007000Eh +
jmp loc_10058EA  +
push ebx  +
mov ebx [ebp+arg_0] +
cmp byte ptr [ebx] 3Dh +
push esi  +
jnz loc_10058DA  +
push ebx  +
mov ecx edi +
call sub_100568C  +
mov esi eax +
test esi esi +
jl loc_10058DC  +
mov ecx edi +
call sub_1005663  +
push [ebp+var_4]  +
mov ecx edi +
call sub_100568C  +
mov esi eax +
test esi esi +
jl loc_10058DC  +
push ebx  +
mov ecx edi +
call sub_100568C  +
mov esi eax +
test esi esi +
jl loc_10058DC  +
xor esi esi +
push [ebp+var_4]  +
call ds:free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
test edi edi +
jnz loc_10058FB  +
xor eax eax +
retn   +
cmp word ptr [edi] 0 +
push ebx  +
push esi  +
mov ebx edi +
mov esi edi +
jz loc_100592C  +
push esi  +
call sub_1004FC4  +
movzx ecx word ptr [esi] +
cmp cx 5Ch +
jz loc_1005922  +
cmp cx 2Fh +
jz loc_1005922  +
cmp cx 3Ah +
jnz loc_1005924  +
mov ebx eax +
cmp word ptr [eax] 0 +
mov esi eax +
jnz loc_1005907  +
mov eax ebx +
sub eax edi +
pop esi  +
sar eax 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 64h +
mov eax [ebp+arg_4] +
jnz loc_100594F  +
add eax 1Ch +
jmp loc_1005952  +
add eax 24h +
pop ebp  +
retn 8  +
***
call __SEH_prolog4  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jnz loc_100597A  +
mov eax 80070057h +
jmp loc_1005AAF  +
mov eax [ebp+arg_4] +
mov [esi+10h] eax +
mov eax [ebp+arg_8] +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+4] eax +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [esi+1Ch] +
push eax  +
mov edi ds:InitializeCriticalSection +
call edi  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
lea eax [esi+34h] +
push eax  +
call edi  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 2 +
lea eax [esi+4Ch] +
push eax  +
call edi  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [esi+68h] ebx +
mov byte ptr [esi+6Ch] 1 +
mov [esi+74h] ebx +
mov [esi+7Ch] ebx +
mov [esi+78h] ebx +
mov [esi+80h] ebx +
mov edi [esi+10h] +
cmp edi ebx +
jz loc_1005A01  +
jmp loc_10059FD  +
push 1  +
call dword ptr [edi+20h]  +
push edi  +
push esi  +
call sub_100593A  +
mov edi eax +
cmp [edi] ebx +
jnz loc_10059EF  +
xor eax eax +
jmp loc_1005AAF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov esi [ebp+8] +
lea ebx [esi+34h] +
push ebx  +
mov edi ds:DeleteCriticalSection +
call edi  +
lea eax [esi+1Ch] +
mov [ebp+arg_0] eax +
push eax  +
call edi  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [esi+4Ch] +
stos   +
push 6  +
pop ecx  +
mov edi ebx +
stos   +
mov edi [ebp+arg_0] +
jmp loc_1005A9E  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov esi [ebp+8] +
lea ebx [esi+1Ch] +
push ebx  +
call ds:DeleteCriticalSection  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [esi+34h] +
stos   +
mov edi ebx +
jmp loc_1005A9E  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov edi [ebp+8] +
add edi 1Ch +
push 6  +
pop ecx  +
stos   +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0C0000017h +
call __SEH_epilog4  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_1005AD3  +
mov eax 80070057h +
jmp loc_1005B06  +
push esi  +
mov esi [ebx+10h] +
cmp esi edi +
jnz loc_1005ADF  +
xor eax eax +
jmp loc_1005B05  +
cmp [esi] edi +
jz loc_1005B03  +
test edi edi +
jnz loc_1005B03  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push esi  +
call sub_1004FF8  +
push esi  +
push ebx  +
mov edi eax +
call sub_100593A  +
mov esi eax +
cmp dword ptr [esi] 0 +
jnz loc_1005AE3  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_1005B28  +
mov eax 80070057h +
jmp loc_1005B55  +
push esi  +
mov esi [ebx+10h] +
cmp esi edi +
jnz loc_1005B34  +
xor eax eax +
jmp loc_1005B54  +
cmp [esi] edi +
jz loc_1005B52  +
test edi edi +
jnz loc_1005B52  +
push esi  +
call sub_1004FDE  +
push esi  +
push ebx  +
mov edi eax +
call sub_100593A  +
mov esi eax +
cmp dword ptr [esi] 0 +
jnz loc_1005B38  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+14h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005B98  +
call ds:CoSuspendClassObjects  +
test eax eax +
jnz loc_1005B98  +
push eax  +
push eax  +
push 12h  +
push dword ptr [esi+84h]  +
call ds:PostThreadMessageA  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov al [esi] +
push edi  +
test al al +
jz loc_1005BD1  +
mov edi [ebp+arg_4] +
mov dl [edi] +
mov ecx edi +
test dl dl +
jz loc_1005BCA  +
mov bl [ecx] +
inc ecx  +
cmp al bl +
jz loc_1005BDA  +
cmp byte ptr [ecx] 0 +
jnz loc_1005BBE  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_1005BB8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
lea eax [esi+1] +
jmp loc_1005BD3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+pSid] +
xor ebx ebx +
mov [ebp+var_10] eax +
mov [ebp+var_14] ecx +
cmp edi ebx +
jz loc_1005CA7  +
cmp eax ebx +
jz loc_1005CA7  +
cmp ecx ebx +
jz loc_1005CA7  +
mov esi ds:AllocateAndInitializeSid +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call esi  +
test eax eax +
jz loc_1005CA7  +
push [ebp+var_10]  +
lea eax [ebp+pIdentifierAuthority] +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
push eax  +
call esi  +
test eax eax +
jnz loc_1005C77  +
push dword ptr [edi]  +
call ds:FreeSid  +
jmp loc_1005CA5  +
push [ebp+var_14]  +
lea eax [ebp+pIdentifierAuthority] +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push 1  +
push eax  +
call esi  +
test eax eax +
jnz loc_1005CBA  +
mov eax [ebp+var_10] +
push dword ptr [eax]  +
mov esi ds:FreeSid +
call esi  +
mov eax [ebp+var_10] +
mov [eax] ebx +
push dword ptr [edi]  +
call esi  +
mov [edi] ebx +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_1005CA9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
mov [ebp+pSid] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
call sub_1005BE4  +
test eax eax +
jz loc_1005D5F  +
push esi  +
push edi  +
xor edi edi +
inc edi  +
push edi  +
push edi  +
push [ebp+pSid]  +
mov esi offset aF808df63604911 +
push esi  +
call sub_100DDD7  +
push edi  +
push edi  +
push [ebp+var_8]  +
push esi  +
call sub_100DDD7  +
push edi  +
push edi  +
push [ebp+var_C]  +
push esi  +
call sub_100DDD7  +
push edi  +
push edi  +
push [ebp+pSid]  +
push esi  +
call sub_100DE83  +
push edi  +
push edi  +
push [ebp+var_8]  +
push esi  +
call sub_100DE83  +
push edi  +
push edi  +
push [ebp+var_C]  +
push esi  +
call sub_100DE83  +
mov esi ds:FreeSid +
cmp [ebp+pSid] ebx +
jz loc_1005D49  +
push [ebp+pSid]  +
call esi  +
cmp [ebp+var_8] ebx +
jz loc_1005D53  +
push [ebp+var_8]  +
call esi  +
cmp [ebp+var_C] ebx +
jz loc_1005D5D  +
push [ebp+var_C]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1005D7A  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_1004EC8  +
cmp dword ptr [esi] 0 +
jnz loc_1005D6E  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004C8E  +
push offset Addend  +
mov dword ptr [esi] offset off_10017C8 +
mov dword ptr [esi+4] offset off_10017B8 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_1005DF3  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_1005DF3  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_1005DF3  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_1005DF3  +
xor eax eax +
inc eax  +
jmp loc_1005DF5  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1005E28  +
cmp dword ptr [eax+4] 0 +
jnz loc_1005E28  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_1005E28  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_1005E28  +
xor eax eax +
inc eax  +
jmp loc_1005E2A  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1005EC8  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1005EC8  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_1005E5A  +
mov eax 80004003h +
jmp loc_1005ECD  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_1005DFE  +
test eax eax +
jz loc_1005EBA  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_1005ECD  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_1005E98  +
push [ebp+arg_8]  +
push eax  +
call sub_1005DC5  +
test eax eax +
jz loc_1005EB7  +
cmp edi 1 +
jz loc_1005E69  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_1005ECD  +
cmp [ebp+arg_4] 0 +
jnz loc_1005EB7  +
test eax eax +
jl loc_1005ECD  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_1005E7B  +
mov eax 80004002h +
jmp loc_1005ECD  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx offset unk_1016148 +
mov dword ptr [esi] offset off_10017C8 +
mov dword ptr [esi+4] offset off_10017B8 +
mov dword ptr [esi+8] 1 +
call sub_1005B68  +
mov ecx esi +
pop esi  +
jmp loc_1002DCA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004C8E  +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov dword ptr [esi] offset off_100182C +
mov dword ptr [esi+4] offset off_100181C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005F6A  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005F09  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005F50  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov dword ptr [ecx+70h] offset unk_1016000 +
push [ebp+arg_0]  +
mov dword_1016114 ecx +
push ecx  +
mov dword ptr [ecx] 84h +
mov dword ptr [ecx+64h] 300h +
call sub_100595B  +
test eax eax +
jl loc_1005FF6  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1005FF3  +
push edi  +
mov edi offset unk_1016118 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3_GS  +
mov eax ecx +
mov ecx [ebp+8] +
xor esi esi +
mov [ebp-124h] eax +
mov [ebp-128h] ecx +
mov [ebp-120h] esi +
mov [ebp-11Ch] esi +
mov [ebp-118h] esi +
push esi  +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
lea ecx [ebp-120h] +
mov [ebp-4] esi +
call sub_10051AB  +
mov edi eax +
cmp edi esi +
jz loc_100606F  +
lea ecx [ebp-120h] +
call sub_1005138  +
mov eax edi +
call sub_100836C  +
retn 4  +
mov edi ds:RegEnumKeyExA +
jmp loc_100608D  +
lea eax [ebp-110h] +
push eax  +
lea ecx [ebp-120h] +
call sub_1006009  +
cmp eax esi +
jnz loc_10060D8  +
lea eax [ebp-130h] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp-114h] +
push eax  +
lea eax [ebp-110h] +
push eax  +
push esi  +
push dword ptr [ebp-120h]  +
mov dword ptr [ebp-114h] 100h +
call edi  +
test eax eax +
jz loc_1006077  +
lea ecx [ebp-120h] +
call sub_1005138  +
push dword ptr [ebp-128h]  +
mov ecx [ebp-124h] +
call sub_10050B2  +
lea ecx [ebp-120h] +
mov esi eax +
call sub_1005138  +
mov eax esi +
jmp loc_1006067  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call sub_1005371  +
push dword ptr [esi]  +
call ds:free  +
pop ecx  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_GS  +
mov eax [ebp+8] +
mov esi [ebp+0Ch] +
xor edi edi +
mov [ebp-28h] eax +
mov [ebp-24h] edi +
mov [ebp-4] edi +
cmp esi edi +
jz loc_10061DD  +
lea eax [ebp-24h] +
push eax  +
push offset riid  +
push 1  +
push edi  +
push offset rclsid  +
call ds:CoCreateInstance  +
cmp eax edi +
jge loc_100616A  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax edi +
jmp loc_10061D5  +
mov ebx esi +
cmp [esi] edi +
jz loc_10061CC  +
cmp dword ptr [ebp+10h] 0 +
mov esi [ebx+4] +
mov eax [ebp-24h] +
lea edi [ebp-20h] +
movs   +
movs   +
lea edx [ebp-20h] +
push edx  +
movs   +
push 1  +
push dword ptr [ebp-28h]  +
movs   +
mov ecx [eax] +
push eax  +
jz loc_10061B7  +
cmp dword ptr [ebx] 1 +
jnz loc_1006199  +
call dword ptr [ecx+14h]  +
jmp loc_100619C  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_10061C4  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10061B3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_10061DF  +
cmp dword ptr [ebx] 1 +
jnz loc_10061C1  +
call dword ptr [ecx+18h]  +
jmp loc_10061C4  +
call dword ptr [ecx+20h]  +
add ebx 8 +
cmp dword ptr [ebx] 0 +
jnz loc_1006170  +
mov eax [ebp-24h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10061DD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_100836C  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10017D8  +
push ecx  +
call sub_1005E33  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea eax [ecx+8] +
cmp eax ecx +
jnb loc_1006221  +
xor eax eax +
jmp loc_1006234  +
push eax  +
call sub_1004EB0  +
test eax eax +
jz loc_100621D  +
mov ecx [esi] +
mov [eax] ecx +
mov [esi] eax +
add eax 8 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005ED9  +
test [ebp+arg_0] 1 +
jz loc_1006258  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_100628B  +
test esi esi +
jz loc_100628B  +
push 1  +
mov ecx esi +
call sub_100623E  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10061EC  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_100183C +
call sub_1005F24  +
push offset Addend  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx offset unk_1016148 +
mov dword ptr [esi] offset off_100183C +
mov dword ptr [esi+4] 1 +
call sub_1005B68  +
lea ecx [esi+0Ch] +
pop esi  +
jmp loc_1002DCA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
xor esi esi +
call sub_1005DFE  +
test eax eax +
jz loc_1006341  +
mov ecx [ebp+10h] +
test ecx ecx +
jnz loc_1006334  +
mov eax 80004003h +
jmp loc_1006356  +
mov eax [ebp+8] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1006354  +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0Ch +
call sub_10061EC  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi [ebp+8] +
mov eax [esi+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_100638D  +
cmp esi [esi+8] +
jz loc_100638D  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_10061EC  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006298  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006360  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006264  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor eax eax +
push edi  +
mov edi ecx +
cmp [edi+4] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
jle loc_100644C  +
mov eax [edi] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx*4] +
mov ebx [eax] +
test ebx ebx +
jz loc_100644C  +
push ebx  +
call ds:lstrlenW  +
lea esi [eax+eax+2] +
cmp esi 400h +
jg loc_100641E  +
push esi  +
call sub_1004E4C  +
test al al +
jz loc_100641E  +
mov eax esi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_1006427  +
push esi  +
lea ecx [ebp+var_C] +
call sub_100620B  +
push esi  +
push ebx  +
push eax  +
call sub_1004F7C  +
test eax eax +
jz loc_100644C  +
push [ebp+lpString2]  +
push eax  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_100646C  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [edi+4] +
jl loc_10063E8  +
xor esi esi +
lea ecx [ebp+var_C] +
call sub_1005D67  +
mov eax esi +
lea esp [ebp-18h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn 4  +
mov eax [edi] +
mov ecx [ebp+var_8] +
mov eax [eax+ecx*4] +
mov esi [eax+4] +
jmp loc_100644E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_8] 0 +
cmp [ebp+lpWideCharStr] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_10064E0  +
push [ebp+lpWideCharStr]  +
call ds:lstrlenW  +
lea esi [eax+eax+2] +
cmp esi 400h +
jg loc_10064C7  +
push esi  +
call sub_1004E4C  +
test al al +
jz loc_10064C7  +
mov eax esi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_10064D0  +
push esi  +
lea ecx [ebp+var_8] +
call sub_100620B  +
push esi  +
push [ebp+lpWideCharStr]  +
push eax  +
call sub_1004F7C  +
mov esi eax +
test esi esi +
jnz loc_100650A  +
lea ecx [ebp+var_8] +
call sub_1005D67  +
xor eax eax +
lea esp [ebp-10h] +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn 4  +
push esi  +
mov ecx edi +
call sub_1005405  +
test eax eax +
jz loc_1006514  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_10064FD  +
xor esi esi +
inc esi  +
jmp loc_1006516  +
xor esi esi +
lea ecx [ebp+var_8] +
call sub_1005D67  +
mov eax esi +
jmp loc_10064EA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_1C] 0 +
push ebx  +
push esi  +
mov esi ds:malloc +
push edi  +
mov edi 1000h +
push edi  +
mov [ebp+var_14] ecx +
call esi  +
mov ebx eax +
pop ecx  +
mov [ebp+var_C] ebx +
test ebx ebx +
jnz loc_100657E  +
mov esi 8007000Eh +
lea ecx [ebp+var_1C] +
call sub_1005D67  +
mov eax esi +
lea esp [ebp-34h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn 10h  +
mov ecx [ebp+var_14] +
push ebx  +
call sub_100568C  +
mov [ebp+var_10] eax +
test eax eax +
jge loc_100659B  +
push ebx  +
call ds:free  +
mov esi [ebp+var_10] +
pop ecx  +
jmp loc_1006560  +
lea eax [ebp+lpWideCharStr] +
push eax  +
push ebx  +
call sub_1005479  +
test eax eax +
jnz loc_10065B8  +
push ebx  +
call ds:free  +
pop ecx  +
mov esi 80020009h +
jmp loc_1006560  +
push edi  +
call esi  +
mov ebx eax +
xor edi edi +
pop ecx  +
mov [ebp+var_28] ebx +
cmp ebx edi +
jnz loc_10065D3  +
push [ebp+var_C]  +
call ds:free  +
pop ecx  +
jmp loc_100655B  +
mov ecx [ebp+var_14] +
call sub_1005663  +
mov ecx [ebp+var_14] +
push ebx  +
call sub_100568C  +
cmp eax edi +
mov [ebp+var_10] eax +
jge loc_10065FC  +
mov edi ds:free +
push ebx  +
call edi  +
push [ebp+var_C]  +
call edi  +
pop ecx  +
jmp loc_1006595  +
movzx eax word ptr [ebp+lpWideCharStr] +
sub eax 8 +
jz loc_1006725  +
sub eax 9 +
jz loc_100667B  +
dec eax  +
dec eax  +
jnz loc_1006862  +
push ebx  +
call ds:lstrlenA  +
mov esi eax +
inc esi  +
lea edi [esi+esi] +
cmp edi 400h +
ja loc_1006640  +
push edi  +
call sub_1004E4C  +
test al al +
jz loc_1006640  +
mov eax edi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_1006649  +
push edi  +
lea ecx [ebp+var_1C] +
call sub_100620B  +
push esi  +
push ebx  +
push eax  +
call sub_1004F5E  +
test eax eax +
jz loc_1006768  +
lea ecx [ebp+Data] +
push ecx  +
push 0  +
push 0  +
push eax  +
call ds:VarUI4FromStr  +
push [ebp+lpValueName]  +
mov ecx [ebp+arg_0] +
push dword ptr [ebp+Data]  +
call sub_10051E8  +
jmp loc_1006862  +
push ebx  +
call ds:lstrlenA  +
mov [ebp+var_10] eax +
test al 1 +
jnz loc_1006740  +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
mov [ebp+lpData] esi +
cmp esi 400h +
ja loc_10066B5  +
push esi  +
call sub_1004E4C  +
test al al +
jz loc_10066B5  +
mov eax esi +
call __alloca_probe_16  +
mov [ebp+lpWideCharStr] esp +
jmp loc_10066C1  +
push esi  +
lea ecx [ebp+var_1C] +
call sub_100620B  +
mov [ebp+lpWideCharStr] eax +
cmp [ebp+lpWideCharStr] edi +
jz loc_1006740  +
push esi  +
push edi  +
push [ebp+lpWideCharStr]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_10] edi +
jle loc_1006709  +
mov ecx [ebp+lpWideCharStr] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax byte ptr [edi+ebx] +
push eax  +
call sub_1005503  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_10] +
jl loc_10066D8  +
mov esi [ebp+lpData] +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push [ebp+lpWideCharStr]  +
push 3  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegSetValueExA  +
jmp loc_1006862  +
cmp [ebp+arg_C] 0 +
mov [ebp+lpData] ebx +
jz loc_1006848  +
push ebx  +
call ds:lstrlenA  +
cmp eax 0FFEh +
jle loc_100675A  +
mov esi ds:free +
push ebx  +
call esi  +
push [ebp+var_C]  +
call esi  +
pop ecx  +
pop ecx  +
mov esi 80004005h +
jmp loc_1006560  +
push 1000h  +
call esi  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_100677C  +
mov esi ds:free +
push ebx  +
call esi  +
push [ebp+var_C]  +
call esi  +
pop ecx  +
jmp loc_10065D0  +
mov eax [ebp+var_14] +
mov ecx [eax+4] +
and [ebp+var_10] 0 +
push offset aModule  +
call sub_10063C4  +
mov [ebp+lpWideCharStr] eax +
test eax eax +
jz loc_1006840  +
push eax  +
call ds:lstrlenW  +
lea esi [eax+eax+2] +
cmp esi 400h +
jg loc_10067C3  +
push esi  +
call sub_1004E4C  +
test al al +
jz loc_10067C3  +
mov eax esi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_10067CC  +
push esi  +
lea ecx [ebp+var_10] +
call sub_100620B  +
push esi  +
push [ebp+lpWideCharStr]  +
push eax  +
call sub_1004F7C  +
mov [ebp+lpWideCharStr] eax +
test eax eax +
jz loc_1006888  +
push eax  +
push ebx  +
call sub_10055B0  +
mov esi eax +
mov [ebp+var_20] esi +
test esi esi +
jz loc_1006840  +
cmp esi [ebp+arg_8] +
jz loc_1006803  +
push esi  +
push ebx  +
call ds:CharPrevA  +
cmp byte ptr [eax] 22h +
jz loc_1006840  +
sub esi ebx +
push esi  +
push ebx  +
push edi  +
mov byte ptr [edi] 0 +
call ds:lstrcpynA  +
mov esi ds:lstrcatA +
mov ebx offset String2 +
push ebx  +
push edi  +
call esi  +
push [ebp+lpWideCharStr]  +
push edi  +
call esi  +
push ebx  +
push edi  +
call esi  +
push [ebp+lpWideCharStr]  +
call ds:lstrlenA  +
add eax [ebp+var_20] +
push eax  +
push edi  +
call esi  +
mov ebx [ebp+var_28] +
mov [ebp+lpData] edi +
lea ecx [ebp+var_10] +
call sub_1005D67  +
push [ebp+lpValueName]  +
mov ecx [ebp+arg_0] +
push [ebp+lpData]  +
call sub_100520B  +
test edi edi +
jz loc_1006862  +
push edi  +
call ds:free  +
pop ecx  +
push [ebp+arg_8]  +
mov ecx [ebp+var_14] +
call sub_100568C  +
mov esi eax +
push ebx  +
test esi esi +
jge loc_10068A9  +
mov edi ds:free +
call edi  +
push [ebp+var_C]  +
call edi  +
pop ecx  +
pop ecx  +
jmp loc_1006560  +
mov esi ds:free +
push edi  +
call esi  +
push ebx  +
call esi  +
push [ebp+var_C]  +
call esi  +
add esp 0Ch +
lea ecx [ebp+var_10] +
call sub_1005D67  +
jmp loc_100655B  +
mov esi ds:free +
call esi  +
push [ebp+var_C]  +
call esi  +
pop ecx  +
pop ecx  +
xor esi esi +
jmp loc_1006560  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_28] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
mov [ebp+var_2C] ebx +
test edi edi +
jz loc_1006A1B  +
test ebx ebx +
jz loc_1006A1B  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenA  +
lea eax [eax+eax+2] +
push eax  +
lea ecx [ebp+var_38] +
call sub_10053DE  +
cmp [ebp+pv] 0 +
jnz loc_100692F  +
push 0  +
call ds:CoTaskMemFree  +
lea ecx [ebp+var_28] +
call sub_1005D67  +
mov eax 8007000Eh +
jmp loc_1006A28  +
mov [esi] edi +
cmp byte ptr [edi] 0 +
jz loc_10069DC  +
mov edi ds:CharNextA +
mov eax [esi] +
cmp byte ptr [eax] 25h +
push eax  +
jnz loc_1006952  +
call edi  +
mov [esi] eax +
cmp byte ptr [eax] 25h +
jnz loc_100697B  +
push eax  +
lea ecx [ebp+var_38] +
call sub_1005405  +
test eax eax +
jnz loc_10069CD  +
mov esi 8007000Eh +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
lea ecx [ebp+var_28] +
call sub_1005D67  +
mov eax esi +
jmp loc_1006A28  +
push 25h  +
push eax  +
call sub_100557D  +
mov ebx eax +
test ebx ebx +
jz loc_1006A07  +
mov ecx [esi] +
sub eax ecx +
cmp eax 1Fh +
jg loc_1006A11  +
inc eax  +
push eax  +
push ecx  +
lea eax [ebp+String2] +
push eax  +
call ds:lstrcpynA  +
mov ecx [esi+4] +
lea eax [ebp+String2] +
push eax  +
call sub_10063C4  +
test eax eax +
jz loc_1006A07  +
push eax  +
lea ecx [ebp+var_38] +
call sub_100647E  +
test eax eax +
jz loc_100695E  +
cmp [esi] ebx +
jz loc_10069CA  +
push dword ptr [esi]  +
call edi  +
mov [esi] eax +
cmp eax ebx +
jnz loc_10069C0  +
mov ebx [ebp+var_2C] +
push dword ptr [esi]  +
call edi  +
mov [esi] eax +
cmp byte ptr [eax] 0 +
jnz loc_1006940  +
push dword ptr [esi]  +
lea ecx [ebp+var_38] +
call sub_1005405  +
test eax eax +
jz loc_100695E  +
mov eax [ebp+pv] +
push 0  +
mov [ebx] eax +
call ds:CoTaskMemFree  +
lea ecx [ebp+var_28] +
call sub_1005D67  +
xor eax eax +
jmp loc_1006A28  +
mov esi 80020009h +
jmp loc_1006963  +
mov esi 80004005h +
jmp loc_1006963  +
lea ecx [ebp+var_28] +
call sub_1005D67  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 8  +
***
call __EH_prolog3_GS  +
mov eax [ebp+0Ch] +
mov edi [ebp+8] +
xor ebx ebx +
mov [ebp-118h] ecx +
mov [ebp-120h] eax +
mov [ebp-140h] ebx +
mov [ebp-4] ebx +
mov [ebp-12Ch] ebx +
mov [ebp-128h] ebx +
mov [ebp-124h] ebx +
mov eax [ebp+14h] +
mov byte ptr [ebp-4] 1 +
mov [ebp-11Ch] ebx +
mov dword ptr [ebp-13Ch] 1 +
mov [ebp-170h] eax +
push edi  +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jge loc_1007022  +
lea ecx [ebp-12Ch] +
call sub_1005138  +
lea ecx [ebp-140h] +
call sub_1005D67  +
mov eax esi +
lea esp [ebp-180h] +
call sub_100836C  +
retn 10h  +
push offset aDelete  +
push edi  +
call ds:lstrcmpiA  +
mov esi eax +
neg esi  +
sbb esi esi +
push offset aForceremove  +
inc esi  +
push edi  +
mov [ebp-160h] esi +
call ds:lstrcmpiA  +
test eax eax +
jz loc_1006B00  +
cmp esi ebx +
jz loc_1006BC6  +
mov ecx [ebp-118h] +
push edi  +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
cmp [ebp+10h] ebx +
jz loc_1006BC6  +
mov [ebp-138h] ebx +
mov [ebp-134h] ebx +
mov [ebp-130h] ebx +
push 5Ch  +
push edi  +
mov byte ptr [ebp-4] 2 +
call sub_100557D  +
test eax eax +
jnz loc_1007030  +
mov ecx [ebp-118h] +
push edi  +
call sub_1005781  +
test eax eax +
jz loc_1006B6F  +
mov eax [ebp-120h] +
push edi  +
lea ecx [ebp-138h] +
mov [ebp-138h] eax +
call sub_1006009  +
mov [ebp-138h] ebx +
cmp [ebp-160h] ebx +
jz loc_1006BB7  +
mov ecx [ebp-118h] +
push edi  +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jl loc_1007045  +
mov ecx [ebp-118h] +
push edi  +
call sub_100587A  +
mov esi eax +
cmp esi ebx +
lea ecx [ebp-138h] +
jl loc_1007063  +
mov byte ptr [ebp-4] 1 +
call sub_1005138  +
jmp loc_1006FE1  +
lea ecx [ebp-138h] +
mov byte ptr [ebp-4] 1 +
call sub_1005138  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiA  +
test eax eax +
jnz loc_1006BF2  +
mov ecx [ebp-118h] +
push edi  +
mov [ebp-13Ch] ebx +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
mov esi ds:lstrcmpiA +
push offset aVal  +
push edi  +
call esi  +
test eax eax +
jnz loc_1006D06  +
mov ecx [ebp-118h] +
lea eax [ebp-114h] +
push eax  +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
mov ecx [ebp-118h] +
push edi  +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
cmp byte ptr [edi] 3Dh +
jnz loc_100703B  +
cmp [ebp+10h] ebx +
jz loc_1006C93  +
mov eax [ebp-120h] +
mov ecx [ebp-118h] +
push ebx  +
mov [ebp-15Ch] eax +
push edi  +
lea eax [ebp-114h] +
push eax  +
lea eax [ebp-15Ch] +
push eax  +
mov [ebp-158h] ebx +
mov [ebp-154h] ebx +
call sub_1006527  +
lea ecx [ebp-15Ch] +
mov esi eax +
mov [ebp-15Ch] ebx +
call sub_1005138  +
jmp loc_1006FD9  +
cmp [ebp+14h] ebx +
jnz loc_1006CF5  +
push ebx  +
push 20006h  +
push ebx  +
push dword ptr [ebp-120h]  +
lea ecx [ebp-150h] +
mov [ebp-150h] ebx +
mov [ebp-14Ch] ebx +
mov [ebp-148h] ebx +
call sub_10051AB  +
cmp eax ebx +
jnz loc_100704F  +
lea eax [ebp-114h] +
push eax  +
push dword ptr [ebp-150h]  +
call ds:RegDeleteValueA  +
cmp eax ebx +
jz loc_1006CEA  +
cmp eax 2 +
jnz loc_100704D  +
lea ecx [ebp-150h] +
call sub_1005138  +
mov ecx [ebp-118h] +
push edi  +
call sub_100587A  +
jmp loc_1006A9F  +
push 5Ch  +
push edi  +
call sub_100557D  +
test eax eax +
jnz loc_100703B  +
cmp [ebp+10h] ebx +
jz loc_1006DDB  +
push ebx  +
push 0F003Fh  +
push edi  +
push dword ptr [ebp-120h]  +
lea ecx [ebp-12Ch] +
call sub_10051AB  +
test eax eax +
jz loc_1006D7A  +
push ebx  +
push 20019h  +
push edi  +
push dword ptr [ebp-120h]  +
lea ecx [ebp-12Ch] +
call sub_10051AB  +
test eax eax +
jz loc_1006D7A  +
push ebx  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push edi  +
push dword ptr [ebp-120h]  +
lea ecx [ebp-12Ch] +
call sub_1005156  +
test eax eax +
jnz loc_100703B  +
mov al [edi] +
mov [ebp-144h] bl +
cmp al 4Ch +
jz loc_1006D8A  +
cmp al 6Ch +
jnz loc_1006D9D  +
push offset aLocalserver32  +
push edi  +
call esi  +
test eax eax +
jnz loc_1006D9D  +
mov byte ptr [ebp-144h] 1 +
mov ecx [ebp-118h] +
push edi  +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
cmp byte ptr [edi] 3Dh +
jnz loc_1006FE1  +
push dword ptr [ebp-144h]  +
mov ecx [ebp-118h] +
push edi  +
push ebx  +
lea eax [ebp-12Ch] +
push eax  +
call sub_1006527  +
jmp loc_1006FD7  +
cmp [ebp+14h] ebx +
jnz loc_1006E03  +
push ebx  +
push 20019h  +
push edi  +
push dword ptr [ebp-120h]  +
lea ecx [ebp-12Ch] +
call sub_10051AB  +
test eax eax +
jz loc_1006E03  +
mov dword ptr [ebp+14h] 1 +
mov esi 104h +
cmp [ebp-11Ch] ebx +
jnz loc_1006E47  +
push esi  +
call sub_1004E4C  +
test al al +
jz loc_1006E29  +
mov eax esi +
call __alloca_probe_16  +
mov [ebp-11Ch] esp +
jmp loc_1006E3B  +
push esi  +
lea ecx [ebp-140h] +
call sub_100620B  +
mov [ebp-11Ch] eax +
cmp [ebp-11Ch] ebx +
jz loc_100706D  +
push esi  +
push edi  +
push dword ptr [ebp-11Ch]  +
call ds:lstrcpynA  +
cmp [ebp+14h] ebx +
jnz loc_1006E88  +
push dword ptr [ebp-12Ch]  +
mov ecx [ebp-118h] +
call sub_10057B7  +
test eax eax +
jnz loc_1006E88  +
push dword ptr [ebp-12Ch]  +
mov ecx [ebp-118h] +
call sub_10057F3  +
test eax eax +
jz loc_1006F58  +
mov ecx [ebp-118h] +
push edi  +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
mov ecx [ebp-118h] +
push edi  +
call sub_100587A  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
cmp byte ptr [edi] 7Bh +
jnz loc_1006F02  +
push dword ptr [ebp+14h]  +
mov ecx [ebp-118h] +
push ebx  +
push dword ptr [ebp-12Ch]  +
push edi  +
call sub_1006A3E  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
cmp [ebp+14h] ebx +
jz loc_1006F0B  +
mov eax [ebp-170h] +
mov ecx [ebp-118h] +
push edi  +
mov [ebp+14h] eax +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
jmp loc_1006CF5  +
cmp [ebp+14h] ebx +
jnz loc_1007022  +
push dword ptr [ebp-12Ch]  +
mov ecx [ebp-118h] +
call sub_10057B7  +
test eax eax +
jz loc_1006F4F  +
push dword ptr [ebp-11Ch]  +
mov ecx [ebp-118h] +
call sub_1005781  +
test eax eax +
jz loc_1007017  +
push dword ptr [ebp-11Ch]  +
lea ecx [ebp-12Ch] +
call sub_1006009  +
jmp loc_1007017  +
cmp [ebp+14h] ebx +
jnz loc_1007022  +
lea ecx [ebp-12Ch] +
call sub_1005138  +
test eax eax +
jnz loc_100703B  +
cmp [ebp-13Ch] ebx +
jz loc_1006FB5  +
mov [ebp-168h] ebx +
mov [ebp-164h] ebx +
mov eax [ebp-120h] +
push dword ptr [ebp-11Ch]  +
lea ecx [ebp-16Ch] +
mov byte ptr [ebp-4] 3 +
mov [ebp-16Ch] eax +
call sub_10050B2  +
lea ecx [ebp-16Ch] +
mov [ebp-16Ch] ebx +
mov byte ptr [ebp-4] 1 +
call sub_1005138  +
mov ecx [ebp-118h] +
push edi  +
call sub_100568C  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
mov ecx [ebp-118h] +
push edi  +
call sub_100587A  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
cmp [ebp+10h] ebx +
jz loc_1007022  +
cmp byte ptr [edi] 7Bh +
jnz loc_1007022  +
push edi  +
call ds:lstrlenA  +
cmp eax 1 +
jnz loc_1007022  +
mov ecx [ebp-118h] +
push ebx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-12Ch]  +
push edi  +
call sub_1006A3E  +
mov esi eax +
cmp esi ebx +
jl loc_1006AA9  +
mov ecx [ebp-118h] +
jmp loc_1006A99  +
cmp byte ptr [edi] 7Dh +
jnz loc_1006ACF  +
jmp loc_1006AA9  +
lea ecx [ebp-138h] +
call sub_1005138  +
mov esi 80020009h +
jmp loc_1006AA9  +
lea ecx [ebp-138h] +
jmp loc_1007063  +
cmp eax ebx +
jle loc_100705B  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
lea ecx [ebp-150h] +
call sub_1005138  +
jmp loc_1006AA9  +
mov esi 8007000Eh +
jmp loc_1006AA9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 128h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_C] +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_128] ecx +
mov [ebp+pptlib] edx +
cmp ecx esi +
jnz loc_10070CE  +
mov eax 80004003h +
lea esp [ebp-134h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn 10h  +
mov [ecx] esi +
cmp edx esi +
jz loc_10070B2  +
mov [edx] esi +
cmp eax esi +
jnz loc_10070E1  +
mov eax 80070057h +
jmp loc_10070B7  +
mov [ebp+var_120] esi +
mov esi 104h +
push esi  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
push dword ptr [eax+0Ch]  +
call ds:GetModuleFileNameA  +
mov ebx eax +
cmp ebx esi +
jnz loc_1007117  +
mov edi 8007006Fh +
lea ecx [ebp+var_120] +
call sub_1005D67  +
mov eax edi +
jmp loc_10070B7  +
test ebx ebx +
jnz loc_1007124  +
call sub_1005053  +
mov edi eax +
jmp loc_1007108  +
test edi edi +
jz loc_1007197  +
push edi  +
call ds:lstrlenW  +
lea esi [eax+eax+2] +
cmp esi 400h +
jg loc_1007150  +
push esi  +
call sub_1004E4C  +
test al al +
jz loc_1007150  +
mov eax esi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_100715C  +
push esi  +
lea ecx [ebp+var_120] +
call sub_100620B  +
push esi  +
push edi  +
push eax  +
call sub_1004F7C  +
mov esi eax +
test esi esi +
jnz loc_1007171  +
mov edi 8007000Eh +
jmp loc_1007108  +
push esi  +
call ds:lstrlenA  +
add eax ebx +
cmp eax 10Eh +
jl loc_1007188  +
mov edi 80004005h +
jmp loc_1007108  +
push esi  +
lea eax [ebp+ebx+MultiByteStr] +
push eax  +
call ds:lstrcpyA  +
lea eax [ebp+MultiByteStr] +
push eax  +
call ds:lstrlenA  +
mov esi eax +
inc esi  +
lea edi [esi+esi] +
cmp edi 400h +
ja loc_10071C7  +
push edi  +
call sub_1004E4C  +
test al al +
jz loc_10071C7  +
mov eax edi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_10071D3  +
push edi  +
lea ecx [ebp+var_120] +
call sub_100620B  +
push esi  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
push eax  +
call sub_1004F5E  +
mov esi eax +
test esi esi +
jz loc_100716A  +
push [ebp+pptlib]  +
push esi  +
call ds:LoadTypeLib  +
mov edi eax +
test edi edi +
jge loc_10072D0  +
mov cl [ebp+MultiByteStr] +
xor ebx ebx +
lea eax [ebp+MultiByteStr] +
test cl cl +
jz loc_1007236  +
cmp cl 5Ch +
jz loc_1007223  +
cmp cl 2Fh +
jz loc_1007223  +
cmp cl 2Eh +
jnz loc_1007225  +
mov ebx eax +
jmp loc_1007225  +
xor ebx ebx +
push eax  +
call ds:CharNextA  +
mov cl [eax] +
test cl cl +
jnz loc_1007210  +
test ebx ebx +
jnz loc_1007238  +
mov ebx eax +
mov esi offset a_tlb +
lea edi [ebp+String2] +
mov eax ebx +
lea ecx [ebp+MultiByteStr] +
sub eax ecx +
movs   +
add eax 5 +
movs   +
cmp eax 104h +
ja loc_1007181  +
lea eax [ebp+String2] +
push eax  +
push ebx  +
call ds:lstrcpyA  +
lea eax [ebp+MultiByteStr] +
push eax  +
call ds:lstrlenA  +
mov esi eax +
inc esi  +
lea edi [esi+esi] +
cmp edi 400h +
ja loc_1007295  +
push edi  +
call sub_1004E4C  +
test al al +
jz loc_1007295  +
mov eax edi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_10072A1  +
push edi  +
lea ecx [ebp+var_120] +
call sub_100620B  +
push esi  +
lea ecx [ebp+MultiByteStr] +
push ecx  +
push eax  +
call sub_1004F5E  +
mov esi eax +
test esi esi +
jz loc_100716A  +
push [ebp+pptlib]  +
push esi  +
call ds:LoadTypeLib  +
mov edi eax +
test edi edi +
jl loc_1007108  +
push esi  +
call ds:SysAllocString  +
mov ecx [ebp+var_128] +
mov [ecx] eax +
jmp loc_1007108  +
***
call __EH_prolog3  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+8]  +
call sub_100707C  +
mov edi eax +
test edi edi +
jl loc_100737D  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
test edi edi +
jl loc_100737D  +
push offset aOleaut32_dll  +
call ds:LoadLibraryA  +
mov esi eax +
test esi esi +
jz loc_1007371  +
push offset aUnregistertype  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100736A  +
mov ecx [ebp+0Ch] +
push dword ptr [ecx+14h]  +
movzx edx word ptr [ecx+1Ah] +
push dword ptr [ecx+10h]  +
push edx  +
movzx edx word ptr [ecx+18h] +
push edx  +
push ecx  +
call eax  +
mov edi eax +
push esi  +
call ds:FreeLibrary  +
mov eax [ebp-10h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_100738E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax edi +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_GS  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
xor ebx ebx +
mov [ebp-228h] ebx +
mov [ebp-4] ebx +
mov [ebp-220h] ebx +
lea edx [ebp-220h] +
push edx  +
lea edx [ebp-228h] +
push edx  +
push ecx  +
push eax  +
call sub_100707C  +
mov esi [ebp-228h] +
mov edi eax +
cmp edi ebx +
jl loc_10074B0  +
mov [ebp-224h] ebx +
mov eax [ebp-220h] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+24h]  +
cmp eax ebx +
jl loc_1007494  +
cmp [ebp-224h] ebx +
jz loc_1007494  +
push esi  +
call ds:SysStringLen  +
cmp eax 104h +
jbe loc_1007462  +
push dword ptr [ebp-224h]  +
call ds:SysFreeString  +
mov eax [ebp-220h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_100744C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi 80010135h +
push esi  +
call ds:SysFreeString  +
mov eax edi +
call sub_100836C  +
retn 8  +
push esi  +
lea eax [ebp-21Ch] +
push eax  +
call sub_1004F9A  +
lea edi [ebp-21Ch] +
call sub_10058F4  +
cmp eax 105h +
jnb loc_100748B  +
xor ecx ecx +
mov [ebp+eax*2-21Ch] cx +
lea eax [ebp-21Ch] +
push eax  +
jmp loc_1007495  +
push ebx  +
push esi  +
push dword ptr [ebp-220h]  +
call ds:RegisterTypeLib  +
push dword ptr [ebp-224h]  +
mov edi eax +
call ds:SysFreeString  +
mov eax [ebp-220h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1007451  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1007451  +
***
mov dword ptr [ecx] offset off_1001890 +
mov dword ptr [ecx+4] 1 +
add ecx 8 +
push ecx  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+14h] +
mov eax 80004003h +
test esi esi +
jz loc_1007522  +
and dword ptr [esi] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1007515  +
push dword ptr [ebp+10h]  +
call sub_1005DFE  +
test eax eax +
jnz loc_1007515  +
mov eax 80040110h +
jmp loc_1007522  +
mov eax [ebp+8] +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+20h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10018A4  +
push ecx  +
call sub_1005E33  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1007563  +
push offset Addend  +
call ds:InterlockedIncrement  +
jmp loc_100756D  +
mov ecx offset unk_1016148 +
call sub_1005B68  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_100752C  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
mov edi [ebp+10h] +
xor esi esi +
cmp edi esi +
jnz loc_10075CB  +
mov eax 80004003h +
jmp loc_1007612  +
push 28h  +
mov [edi] esi +
mov ebx 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+10h] ecx +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_10075F0  +
push dword ptr [ebp+8]  +
call sub_1005D98  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1007610  +
mov eax [esi] +
push edi  +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_1007610  +
push 1  +
mov ecx esi +
call sub_100623E  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1002858  +
mov dword ptr [esi] offset off_10018CC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10062E8  +
test [ebp+arg_0] 1 +
jz loc_1007655  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1007688  +
test esi esi +
jz loc_1007688  +
push 1  +
mov ecx esi +
call sub_100763B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+pv] 0 +
push ebx  +
push esi  +
push 1000h  +
mov esi ecx +
call ds:malloc  +
mov ebx eax +
pop ecx  +
mov [ebp+var_4] ebx +
test ebx ebx +
jnz loc_10076C3  +
mov eax 8007000Eh +
jmp loc_100778C  +
push edi  +
lea eax [ebp+pv] +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_10068C4  +
mov edi eax +
test edi edi +
jl loc_1007781  +
mov eax [ebp+pv] +
mov [esi] eax +
jmp loc_1007754  +
push ebx  +
mov ecx esi +
call sub_100568C  +
mov edi eax +
test edi edi +
jl loc_1007778  +
push ebx  +
call sub_1005546  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_100775B  +
push ebx  +
mov ecx esi +
call sub_100568C  +
mov edi eax +
xor eax eax +
cmp edi eax +
jl loc_1007778  +
cmp byte ptr [ebx] 7Bh +
jnz loc_100775B  +
mov ecx esi +
cmp [ebp+arg_4] eax +
jz loc_100773A  +
mov ebx [esi] +
push eax  +
push [ebp+arg_4]  +
push [ebp+lpString]  +
push [ebp+var_4]  +
call sub_1006A3E  +
mov edi eax +
test edi edi +
jl loc_1007762  +
mov ebx [ebp+var_4] +
jmp loc_100774B  +
push eax  +
push eax  +
push [ebp+lpString]  +
push ebx  +
call sub_1006A3E  +
mov edi eax +
test edi edi +
jl loc_1007778  +
mov ecx esi +
call sub_1005663  +
mov eax [esi] +
cmp byte ptr [eax] 0 +
jnz loc_10076E3  +
jmp loc_1007778  +
mov edi 80020009h +
jmp loc_1007778  +
push 0  +
push 0  +
push [ebp+lpString]  +
mov ecx esi +
push [ebp+var_4]  +
mov [esi] ebx +
call sub_1006A3E  +
mov ebx [ebp+var_4] +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
push ebx  +
call ds:free  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10077AE  +
mov eax 80070057h +
jmp locret_1007840  +
push ebx  +
mov ebx [eax+10h] +
test ebx ebx +
jnz loc_10077BD  +
xor eax eax +
jmp loc_100783F  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_1007827  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_10077DD  +
mov eax [ebx+18h] +
test eax eax +
jz loc_10077E6  +
call eax  +
test eax eax +
jmp loc_10077E4  +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_1007811  +
push 1  +
call dword ptr [ebx+4]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100783A  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 84h +
jnz loc_1007811  +
push 1  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_100611F  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100783A  +
push ebx  +
push [ebp+arg_0]  +
call sub_100593A  +
mov ebx eax +
mov edi [ebx] +
test edi edi +
jnz loc_10077C9  +
cmp [ebp+var_4] edi +
jl loc_100783A  +
cmp [ebp+arg_4] 0 +
jz loc_100783A  +
push 0  +
push [ebp+arg_0]  +
call sub_10073A6  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100785C  +
mov eax 80070057h +
jmp loc_10078D2  +
push ebx  +
mov ebx [eax+10h] +
test ebx ebx +
jz loc_10078CF  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_10078BE  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_1007880  +
mov eax [ebx+18h] +
test eax eax +
jz loc_1007889  +
call eax  +
test eax eax +
jmp loc_1007887  +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_10078AC  +
push 0  +
call dword ptr [ebx+4]  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 84h +
jnz loc_10078AC  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_10078AC  +
push 0  +
call eax  +
push eax  +
push dword ptr [ebx]  +
call sub_100611F  +
push ebx  +
push [ebp+arg_0]  +
call sub_100593A  +
mov ebx eax +
mov edi [ebx] +
test edi edi +
jnz loc_100786C  +
pop esi  +
cmp [ebp+arg_4] 0 +
pop edi  +
jz loc_10078CF  +
push 0  +
push [ebp+arg_0]  +
call sub_10072E9  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10074CA  +
test [ebp+arg_0] 1 +
jz loc_10078F5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100761F  +
mov dword ptr [esi] offset off_1001890 +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1007943  +
test esi esi +
jz loc_1007943  +
push 1  +
mov ecx esi +
call sub_10078DB  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push 0  +
mov eax offset loc_1013861 +
call __EH_prolog3  +
mov edi [ebp+arg_8] +
xor esi esi +
cmp edi esi +
jnz loc_100796C  +
mov eax 80004003h +
jmp loc_10079B3  +
push 34h  +
mov [edi] esi +
mov ebx 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp+arg_8] ecx +
mov [ebp+var_4] esi +
cmp ecx esi +
jz loc_1007991  +
push [ebp+arg_0]  +
call sub_10062B4  +
mov esi eax +
or [ebp+var_4] 0FFFFFFFFh +
test esi esi +
jz loc_10079B1  +
mov eax [esi] +
push edi  +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_10079B1  +
push 1  +
mov ecx esi +
call sub_100763B  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_GS  +
xor edi edi +
mov [ebp-14h] edi +
mov [ebp-4] edi +
mov [ebp-1Ch] ecx +
mov [ebp-20h] edi +
cmp [ebp+8] edi +
jz loc_1007A20  +
push dword ptr [ebp+8]  +
call ds:lstrlenW  +
lea esi [eax+eax+2] +
cmp esi 400h +
jg loc_1007A09  +
push esi  +
call sub_1004E4C  +
test al al +
jz loc_1007A09  +
mov eax esi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_1007A12  +
push esi  +
lea ecx [ebp-14h] +
call sub_100620B  +
push esi  +
push dword ptr [ebp+8]  +
push eax  +
call sub_1004F7C  +
cmp eax edi +
jnz loc_1007A3A  +
mov esi 8007000Eh +
lea ecx [ebp-14h] +
call sub_1005D67  +
mov eax esi +
lea esp [ebp-30h] +
call sub_100836C  +
retn 10h  +
push 2  +
push edi  +
push eax  +
call ds:LoadLibraryExA  +
mov ebx eax +
mov [ebp-18h] ebx +
cmp ebx edi +
jnz loc_1007A67  +
call ds:GetLastError  +
cmp eax edi +
jg loc_1007A5B  +
mov esi eax +
jmp loc_1007A25  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1007A57  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call ds:FindResourceA  +
mov esi eax +
cmp esi edi +
jnz loc_1007A94  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1007B0E  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1007B0E  +
push esi  +
push ebx  +
call ds:LoadResource  +
mov ebx eax +
cmp ebx edi +
jz loc_1007A7A  +
push esi  +
push dword ptr [ebp-18h]  +
call ds:SizeofResource  +
mov esi eax +
cmp byte ptr [esi+ebx] 0 +
mov edi ebx +
jz loc_1007AFE  +
lea edi [esi+1] +
cmp edi 400h +
ja loc_1007AD6  +
push edi  +
call sub_1004E4C  +
test al al +
jz loc_1007AD6  +
mov eax edi +
call __alloca_probe_16  +
mov edi esp +
jmp loc_1007AE1  +
push edi  +
lea ecx [ebp-14h] +
call sub_100620B  +
mov edi eax +
test edi edi +
jnz loc_1007AEC  +
mov esi 8007000Eh +
jmp loc_1007B10  +
lea eax [esi+1] +
push eax  +
push ebx  +
push edi  +
call memcpy  +
add esp 0Ch +
mov byte ptr [edi+esi] 0 +
test edi edi +
jz loc_1007AE5  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-20h] +
push edi  +
call sub_1007695  +
mov esi eax +
push dword ptr [ebp-18h]  +
call ds:FreeLibrary  +
jmp loc_1007A25  +
***
call __EH_prolog3_GS  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+14h] 0 +
jz loc_1007B7E  +
push dword ptr [ebp+14h]  +
call ds:lstrlenW  +
lea esi [eax+eax+2] +
cmp esi 400h +
jg loc_1007B67  +
push esi  +
call sub_1004E4C  +
test al al +
jz loc_1007B67  +
mov eax esi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_1007B70  +
push esi  +
lea ecx [ebp-14h] +
call sub_100620B  +
push esi  +
push dword ptr [ebp+14h]  +
push eax  +
call sub_1004F7C  +
test eax eax +
jnz loc_1007B98  +
mov esi 8007000Eh +
lea ecx [ebp-14h] +
call sub_1005D67  +
mov eax esi +
lea esp [ebp-24h] +
call sub_100836C  +
retn 10h  +
mov ecx [ebp+8] +
push 1  +
push eax  +
movzx eax word ptr [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_10079C0  +
mov esi eax +
jmp loc_1007B83  +
***
call __EH_prolog3_GS  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+14h] 0 +
jz loc_1007C0F  +
push dword ptr [ebp+14h]  +
call ds:lstrlenW  +
lea esi [eax+eax+2] +
cmp esi 400h +
jg loc_1007BF8  +
push esi  +
call sub_1004E4C  +
test al al +
jz loc_1007BF8  +
mov eax esi +
call __alloca_probe_16  +
mov eax esp +
jmp loc_1007C01  +
push esi  +
lea ecx [ebp-14h] +
call sub_100620B  +
push esi  +
push dword ptr [ebp+14h]  +
push eax  +
call sub_1004F7C  +
test eax eax +
jnz loc_1007C29  +
mov esi 8007000Eh +
lea ecx [ebp-14h] +
call sub_1005D67  +
mov eax esi +
lea esp [ebp-24h] +
call sub_100836C  +
retn 10h  +
mov ecx [ebp+8] +
push 0  +
push eax  +
movzx eax word ptr [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_10079C0  +
mov esi eax +
jmp loc_1007C14  +
***
call __EH_prolog3_GS  +
mov edi [ebp+14h] +
xor ebx ebx +
mov [ebp-534h] ebx +
lea ecx [ebp-544h] +
mov [ebp-4] ebx +
call sub_100523A  +
mov esi 104h +
push esi  +
lea eax [ebp-117h] +
push ebx  +
push eax  +
mov byte ptr [ebp-4] 1 +
mov [ebp-118h] bl +
call memset  +
mov eax dword_1016114 +
mov eax [eax+4] +
add esp 0Ch +
push esi  +
lea ecx [ebp-118h] +
push ecx  +
push eax  +
call ds:GetModuleFileNameA  +
cmp eax esi +
jnz loc_1007CD7  +
mov esi 8007006Fh +
lea ecx [ebp-544h] +
mov byte ptr [ebp-4] 0 +
call sub_10060F1  +
lea ecx [ebp-534h] +
call sub_1005D67  +
mov eax esi +
lea esp [ebp-554h] +
call sub_100836C  +
retn 10h  +
cmp eax ebx +
jnz loc_1007CE4  +
call sub_1005053  +
mov esi eax +
jmp loc_1007CAD  +
lea eax [ebp-118h] +
push eax  +
call ds:lstrlenA  +
mov esi eax +
inc esi  +
lea ebx [esi+esi] +
cmp ebx 400h +
ja loc_1007D14  +
push ebx  +
call sub_1004E4C  +
test al al +
jz loc_1007D14  +
mov eax ebx +
call __alloca_probe_16  +
mov eax esp +
jmp loc_1007D20  +
push ebx  +
lea ecx [ebp-534h] +
call sub_100620B  +
push esi  +
lea ecx [ebp-118h] +
push ecx  +
push eax  +
call sub_1004F5E  +
mov esi eax +
test esi esi +
jnz loc_1007D3E  +
mov esi 8007000Eh +
jmp loc_1007CAD  +
push esi  +
lea eax [ebp-530h] +
push eax  +
call sub_100506D  +
lea eax [ebp-530h] +
push eax  +
push offset String  +
lea ecx [ebp-544h] +
call sub_100526D  +
test eax eax +
jl loc_1007CE0  +
test edi edi +
jz loc_1007D90  +
jmp loc_1007D8A  +
push dword ptr [edi+4]  +
lea ecx [ebp-544h] +
push eax  +
call sub_100526D  +
test eax eax +
jl loc_1007CE0  +
add edi 8 +
mov eax [edi] +
test eax eax +
jnz loc_1007D70  +
cmp dword ptr [ebp+10h] 0 +
push offset aRegistry  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-544h] +
push esi  +
push eax  +
jz loc_1007DB0  +
call sub_1007B23  +
jmp loc_1007CE0  +
call sub_1007BB4  +
jmp loc_1007CE0  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 65h  +
push offset unk_1016148  +
call sub_1007C45  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
call ds:GetCommandLineA  +
push 0  +
mov [ebp+lpCmdLine] eax +
call ds:CoInitialize  +
push 0  +
push [ebp+hInstance]  +
mov ebx offset unk_1016148 +
push offset off_1016020  +
mov ecx ebx +
call sub_1005FB1  +
call ds:GetCurrentThreadId  +
mov esi offset asc_100191C +
lea edi [ebp+hInstance] +
movs   +
movs   +
xor esi esi +
push esi  +
push esi  +
push 1  +
push esi  +
mov dword_10161CC eax +
call ds:HeapSetInformation  +
lea eax [ebp+hInstance] +
push eax  +
push [ebp+lpCmdLine]  +
mov [ebp+var_4] esi +
jmp loc_1007E64  +
push offset aUnregserver  +
push edi  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_1007E81  +
push offset aRegserver  +
push edi  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_1007E98  +
lea eax [ebp+hInstance] +
push eax  +
push edi  +
call sub_1005BA2  +
mov edi eax +
cmp edi esi +
jnz loc_1007E3F  +
push 1  +
push 4  +
push ebx  +
call sub_1005ABC  +
mov edi ds:GetMessageA +
jmp loc_1007EBF  +
push esi  +
push esi  +
push 64h  +
push ebx  +
call sub_1007C45  +
push esi  +
push esi  +
push ebx  +
call sub_1007849  +
mov [ebp+var_4] eax +
jmp loc_1007ED2  +
push esi  +
push 1  +
push 64h  +
push ebx  +
call sub_1007C45  +
push esi  +
push esi  +
push ebx  +
call sub_1007797  +
mov [ebp+var_4] eax +
call sub_1005CC4  +
jmp loc_1007ED2  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_1007EB5  +
push ebx  +
call sub_1005B11  +
call ds:CoUninitialize  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+10h] +
xor esi esi +
cmp edi esi +
jnz loc_1007EFE  +
mov eax 80004003h +
jmp loc_1007F45  +
push ebx  +
push 24h  +
mov [edi] esi +
mov dword ptr [ebp+10h] 8007000Eh +
call ??2@YAPAXI@Z  +
mov ebx [ebp+8] +
pop ecx  +
cmp eax esi +
jz loc_1007F21  +
push ebx  +
mov ecx eax +
call sub_1007901  +
mov esi eax +
test esi esi +
jz loc_1007F41  +
mov eax [esi] +
push edi  +
push dword ptr [ebp+0Ch]  +
mov [esi+20h] ebx +
push esi  +
call dword ptr [eax]  +
mov [ebp+10h] eax +
test eax eax +
jz loc_1007F41  +
push 1  +
mov ecx esi +
call sub_10078DB  +
mov eax [ebp+10h] +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1007F6C  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
call sub_10075AF  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp loc_1007950  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1007F93  +
test eax eax +
jnz loc_1007F98  +
mov ecx [esi] +
test ecx ecx +
jz loc_1007F90  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1007F84  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1016218 +
push offset dword_1016208  +
push dword_1016214  +
mov dword_1016208 eax +
push offset unk_10161F8  +
push offset unk_10161FC  +
push offset unk_10161F4  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1016204 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1008038  +
cmp eax esi +
jnz loc_100802B  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_100803B  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1008012  +
xor esi esi +
inc esi  +
mov eax dword_1016934 +
cmp eax esi +
jnz loc_100804E  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100807D  +
mov eax dword_1016934 +
test eax eax +
jnz loc_1008077  +
mov dword_1016934 esi +
push offset dword_10013D0  +
push offset dword_10013C4  +
call sub_1007F77  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100807D  +
jmp loc_10081A5  +
mov dword_1016210 esi +
mov eax dword_1016934 +
cmp eax esi +
jnz loc_10080A1  +
push offset dword_10013C0  +
push offset dword_1001394  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1016934 2 +
test ebx ebx +
jnz loc_10080AD  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1016944 0 +
jz loc_10080D1  +
push offset dword_1016944  +
call sub_1008699  +
pop ecx  +
test eax eax +
jz loc_10080D1  +
push 0  +
push 2  +
push 0  +
call dword_1016944  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_10080EB  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_10080FB  +
cmp al 20h +
ja loc_10080FB  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_10080EB  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1008107  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_100810A  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_101620C eax +
cmp dword_1016200 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_100813C  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_100814F  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_10080D8  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_101620C eax +
cmp dword_1016200 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_1016210 0 +
jnz loc_1008190  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_101620C +
jmp loc_10081B1  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10081CE  +
xor eax eax +
jmp loc_100821B  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10081CA  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1008208  +
cmp ecx 20Bh +
jnz loc_10081CA  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10081CA  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1008216  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10081CA  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1016200 eax +
call sub_10087A7  +
push eax  +
call ds:__set_app_type  +
or dword_101693C 0FFFFFFFFh +
or dword_1016940 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1016220 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_101621C +
mov [eax] ecx +
call sub_1008739  +
cmp dword_1016078 0 +
jnz loc_1008274  +
push offset sub_1008739  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1008721  +
xor eax eax +
retn   +
***
call sub_10087E6  +
jmp ___tmainCRTStartup  +
***
jmp ds:__CxxFrameHandler3  +
***
cmp ecx dword_1016068 +
jnz loc_10082D6  +
retn 0  +
jmp loc_100887C  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1016068 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1016068 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_10082CB  +
jmp __EH_epilog3  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_10083D0  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10082CB  +
jmp __SEH_epilog4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10082CB  +
push offset dword_1016068  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
jmp ds:_purecall  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10085DA  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10085DA  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10085D4  +
cmp eax 19930521h +
jz loc_10085D4  +
cmp eax 19930522h +
jz loc_10085D4  +
cmp eax 1994000h +
jnz loc_10085DA  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_100859C+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1008626  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1008622  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100868D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1008685  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100868F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1008675  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1008610  +
pop ecx  +
test eax eax +
jz loc_10086F6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1008650  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10086F6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10086FF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100879A  +
cmp ecx 0FFFFFFFFh +
jz loc_100879A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1008793  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1008793  +
cmp edx 10000000h +
jnb loc_1008793  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1008793  +
jmp loc_100878E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10087DC  +
push eax  +
call sub_1008741  +
test eax eax +
jz loc_10087DC  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10087D1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10087DC  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1016068 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1008818  +
test eax ebx +
jz loc_1008818  +
not eax  +
mov dword_101606C eax +
jmp loc_1008873  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100885F  +
test dword_1016068 ebx +
jnz loc_1008864  +
mov esi 0BB40E64Fh +
mov dword_1016068 esi +
not esi  +
mov dword_101606C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1016328 eax +
mov dword_1016324 ecx +
mov dword_1016320 edx +
mov dword_101631C ebx +
mov dword_1016318 esi +
mov dword_1016314 edi +
mov word_1016340 ss +
mov word_1016334 cs +
mov word_1016310 ds +
mov word_101630C es +
mov word_1016308 fs +
mov word_1016304 gs +
pushf   +
pop dword_1016338  +
mov eax [ebp+0] +
mov dword_101632C eax +
mov eax [ebp+4] +
mov dword_1016330 eax +
lea eax [ebp+8] +
mov dword_101633C eax +
mov eax [ebp-320h] +
mov dword_1016278 10001h +
mov eax dword_1016330 +
mov dword_1016234 eax +
mov dword_1016228 0C0000409h +
mov dword_101622C 1 +
mov eax dword_1016068 +
mov [ebp-328h] eax +
mov eax dword_101606C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push 34h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+30h] 0 +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push dword ptr [esi+0Ch]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx eax +
test ecx ecx +
jz loc_1008A39  +
mov eax [esi+0Ch] +
add [esi+30h] eax +
xor eax eax +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
mov edi [esi+28h] +
mov eax ecx +
cdq   +
add edi eax +
mov eax [ebp+var_4] +
adc eax edx +
add edi 1Fh +
push 0  +
pop ebx  +
adc eax ebx +
shrd edi eax +
shl edi 5 +
mov [ecx] edi +
shr eax 5 +
xor edx edx +
xor edi edi +
cmp [esi+10h] ebx +
jbe loc_1008A26  +
mov eax [esi+18h] +
imul eax edi +
add eax [esi+14h] +
add eax [ecx] +
inc edi  +
mov [eax+4] edx +
mov [eax] ecx +
mov edx eax +
cmp edi [esi+10h] +
jb loc_1008A0E  +
mov [ecx+0Ch] ebx +
mov [ecx+10h] ebx +
mov [ecx+4] ebx +
pop edi  +
mov [ecx+8] edx +
inc dword ptr [esi+1Ch]  +
mov eax ecx +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpMem]  +
mov esi ecx +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
dec dword ptr [esi+1Ch]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
mov edx [ebp+arg_0] +
cmp eax [edx] +
jnz loc_1008A7E  +
mov eax [eax+0Ch] +
mov [edx] eax +
mov eax [ecx] +
mov edx [eax+10h] +
test edx edx +
jz loc_1008A8D  +
mov eax [eax+0Ch] +
mov [edx+0Ch] eax +
mov eax [ecx] +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_1008A9C  +
mov eax [eax+10h] +
mov [ecx+10h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax ecx +
xor edx edx +
jmp loc_1008ABF  +
inc edx  +
cmp edx 1 +
ja loc_1008AC3  +
mov eax [eax+0Ch] +
test eax eax +
jnz loc_1008AB6  +
mov [ebp+lpMem] ecx +
cmp edx 1 +
jbe loc_1008AE6  +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
mov ecx esi +
call sub_1008A68  +
push [ebp+lpMem]  +
mov ecx esi +
call sub_1008A41  +
xor eax eax +
inc eax  +
jmp loc_1008AE8  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov eax [ebp+arg_4] +
test edx edx +
jz loc_1008B1B  +
push edi  +
mov edi [eax] +
mov [edx+10h] edi +
mov edx [eax] +
mov edi [ecx] +
mov [edx+0Ch] edi +
mov edx [eax] +
and dword ptr [edx+10h] 0 +
mov eax [eax] +
mov [ecx] eax +
pop edi  +
jmp loc_1008B2B  +
mov edx [eax] +
mov [ecx] edx +
mov ecx [eax] +
and dword ptr [ecx+10h] 0 +
mov eax [eax] +
and dword ptr [eax+0Ch] 0 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor ebx ebx +
mov eax [edi+ebx*4] +
test eax eax +
jz loc_1008B55  +
mov esi [eax+0Ch] +
push eax  +
mov ecx edi +
call sub_1008A41  +
mov eax esi +
test esi esi +
jnz loc_1008B44  +
inc ebx  +
cmp ebx 3 +
jl loc_1008B3D  +
push 34h  +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
inc ebx  +
mov esi ecx +
cmp edi ebx +
jb loc_1008C3D  +
cmp [ebp+arg_4] ebx +
jb loc_1008C3D  +
cmp [ebp+arg_8] ebx +
jb loc_1008C3D  +
cmp dword ptr [esi+24h] 0 +
jz loc_1008BB0  +
call sub_1008B34  +
mov eax [ebp+arg_C] +
mov [esi+20h] eax +
test eax eax +
jz loc_1008BC2  +
cmp [ebp+arg_8] ebx +
jbe loc_1008BC2  +
mov [ebp+arg_8] ebx +
mov ecx [ebp+arg_4] +
and dword ptr [esi+1Ch] 0 +
lea eax [edi+3] +
shr eax 2 +
shl eax 2 +
mov [esi+14h] eax +
lea eax [edi+27h] +
shr eax 5 +
shl eax 5 +
mov [esi+18h] eax +
imul eax ecx +
add eax 30h +
mov dword ptr [esi+28h] 14h +
mov dword ptr [esi+2Ch] 8 +
mov [esi+10h] ecx +
mov [esi+0Ch] eax +
mov [esi+24h] ebx +
jmp loc_1008C1D  +
dec [ebp+arg_8]  +
mov ecx esi +
call sub_10089B6  +
mov [ebp+arg_4] eax +
mov ecx esi +
test eax eax +
jz loc_1008C25  +
lea eax [ebp+arg_4] +
push eax  +
push esi  +
call sub_1008AF0  +
cmp [ebp+arg_8] 0 +
jnz loc_1008C00  +
jmp loc_1008C2A  +
call sub_1008B34  +
mov eax [esi+24h] +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
jmp loc_1008C42  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push edi  +
mov edi ecx +
test eax eax +
jnz loc_1008C65  +
mov eax 80070057h +
jmp loc_1008CCE  +
and dword ptr [eax] 0 +
cmp dword ptr [edi+24h] 0 +
jz loc_1008CBB  +
push ebx  +
lea ebx [edi+4] +
push esi  +
mov esi [ebx] +
test esi esi +
jz loc_1008CD3  +
inc dword ptr [esi+4]  +
mov eax [esi+4] +
mov [ebp+var_4] esi +
cmp eax [edi+10h] +
jnz loc_1008CA0  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
call sub_1008A68  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
lea eax [edi+8] +
push eax  +
call sub_1008AF0  +
mov eax [esi+8] +
test eax eax +
jz loc_1008CB9  +
mov ecx [eax+4] +
mov [esi+8] ecx +
and dword ptr [eax+4] 0 +
sub eax [edi+14h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
pop esi  +
pop ebx  +
mov eax [ebp+arg_0] +
mov eax [eax] +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
pop edi  +
leave   +
retn 4  +
mov esi [edi] +
test esi esi +
jz loc_1008CFA  +
inc dword ptr [esi+4]  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
mov [ebp+var_4] esi +
call sub_1008A68  +
mov eax [esi+4] +
cmp eax [edi+10h] +
lea eax [ebp+var_4] +
mov ecx edi +
push eax  +
jz loc_1008C97  +
push ebx  +
jmp loc_1008C9B  +
call sub_10089B6  +
mov esi eax +
mov [ebp+var_4] esi +
test esi esi +
jz loc_1008CB9  +
inc dword ptr [esi+4]  +
mov eax [esi+4] +
cmp eax [edi+10h] +
jz loc_1008C91  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
mov ecx edi +
jmp loc_1008C9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_4] ebx +
cmp [esi+24h] ebx +
jnz loc_1008D45  +
mov [ebp+var_4] 8000FFFFh +
jmp loc_1008DB6  +
mov eax [esi+14h] +
add eax [ebp+arg_0] +
push edi  +
mov edi [eax] +
mov ecx [edi+8] +
mov [eax+4] ecx +
mov [edi+8] eax +
mov eax [edi+4] +
cmp eax [esi+10h] +
dec dword ptr [edi+4]  +
mov [ebp+arg_0] edi +
jnb loc_1008D7E  +
jnz loc_1008DB5  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [esi+4] +
push eax  +
mov ecx esi +
call sub_1008A68  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
jmp loc_1008D98  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [esi+8] +
push eax  +
mov ecx esi +
call sub_1008A68  +
lea eax [ebp+arg_0] +
mov ecx esi +
push eax  +
cmp [edi+4] ebx +
jnz loc_1008DAC  +
push esi  +
call sub_1008AF0  +
cmp [esi+20h] ebx +
jz loc_1008DB5  +
mov ecx esi +
call sub_1008AA5  +
jmp loc_1008DB5  +
lea eax [esi+4] +
push eax  +
call sub_1008AF0  +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push esi  +
mov eax [esp+arg_C] +
mov edx [esp+arg_10] +
mov ebx [esp+arg_4] +
mov ecx [esp+arg_8] +
mov esi [esp+arg_0] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
pop esi  +
pop ebx  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi [esp+arg_0] +
test esi esi +
jg loc_1008E11  +
xor eax eax +
pop esi  +
retn 8  +
cmp [esp+arg_4] 0 +
jnz loc_1008E2C  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop esi  +
retn 8  +
push edi  +
call ds:GetProcessHeap  +
push esi  +
mov edi eax +
push 0  +
push edi  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_1008E63  +
push esi  +
push 0  +
push edi  +
call ds:HeapSize  +
mov [esp+4+arg_0] eax +
test eax eax +
jle loc_1008E63  +
mov eax [esp+4+arg_0] +
mov edx [esp+4+arg_4] +
xadd [edx] eax +
pop edi  +
mov eax esi +
pop esi  +
retn 8  +
***
mov edi edi +
push ecx  +
cmp [esp+4+arg_0] 0 +
jnz loc_1008E8E  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ecx  +
retn 4  +
test edi edi +
jz loc_1008EC6  +
push esi  +
call ds:GetProcessHeap  +
push edi  +
mov esi eax +
push 0  +
push esi  +
call ds:HeapSize  +
test eax eax +
jle loc_1008EBB  +
neg eax  +
mov [esp+8+var_4] eax +
mov eax [esp+8+var_4] +
mov edx [esp+8+arg_0] +
xadd [edx] eax +
push edi  +
push 0  +
push esi  +
call ds:HeapFree  +
pop esi  +
pop ecx  +
retn 4  +
***
sub esp 18h +
push ebx  +
push ebp  +
mov ebp [esp+20h+arg_0] +
mov eax [ebp+14h] +
push esi  +
push edi  +
cmp eax 8000h +
jz loc_100910C  +
lea eax [ebp+28h] +
mov [esp+28h+var_18] eax +
test eax eax +
jnz loc_1008F0C  +
push 10h  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [esp+28h+var_18] esi +
jmp loc_1008F47  +
call ds:GetProcessHeap  +
push 10h  +
mov edi eax +
push 0  +
push edi  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_1008F43  +
push esi  +
push 0  +
push edi  +
call ds:HeapSize  +
mov [esp+28h+var_14] eax +
test eax eax +
jle loc_1008F43  +
mov eax [esp+28h+var_14] +
mov edx [esp+28h+var_18] +
xadd [edx] eax +
mov [esp+28h+var_18] esi +
test esi esi +
jz loc_10090E6  +
push 0  +
push 7FFFFFFFh  +
push 0  +
push 0  +
call ds:CreateSemaphoreA  +
mov [esi] eax +
test eax eax +
jz loc_10090DB  +
push 0  +
push 0  +
push 0  +
push 0  +
call ds:CreateEventA  +
mov [esi+4] eax +
test eax eax +
jz loc_10090D1  +
mov ebx [ebp+10h] +
mov edi [ebp+14h] +
lea ecx [ebp+10h] +
mov [esp+28h+var_8] ebx +
mov [esp+28h+var_4] edi +
cmp edi 8000h +
jz loc_10090C8  +
jmp loc_1008FA6  +
mov esi [esp+28h+var_18] +
cmp edi 20h +
jb loc_1009052  +
lea eax [edi-1] +
test eax edi +
jnz loc_1009052  +
lea eax [ebp+28h] +
push eax  +
lea ecx ds:0[edi*8] +
push ecx  +
call sub_1008E00  +
mov ebp eax +
test ebp ebp +
jz loc_10090C0  +
lea esi ds:0[edi*4] +
push esi  +
push ebx  +
push ebp  +
call memcpy  +
mov edx [esp+34h+var_18] +
lea eax [edi-1] +
add eax eax +
add eax eax +
push eax  +
lea ecx [esi+ebp+4] +
push 0  +
push ecx  +
mov [esi+ebp] edx +
call memset  +
mov eax [esp+40h+arg_0] +
lea edx [edi+1] +
add eax 10h +
add esp 18h +
mov [esp+28h+var_10] ebp +
mov [esp+28h+var_C] edx +
mov [esp+28h+var_14] eax +
push esi  +
mov eax [esp+2Ch+var_8] +
mov edx [esp+2Ch+var_4] +
mov ebx [esp+2Ch+var_10] +
mov ecx [esp+2Ch+var_C] +
mov esi [esp+2Ch+var_14] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
test al al +
jnz loc_1009118  +
mov eax [esp+28h+arg_0] +
add eax 28h +
push eax  +
mov edi ebp +
call sub_1008E70  +
mov ebp [esp+28h+arg_0] +
jmp loc_10090A1  +
lea eax [edi+1] +
lea edx [ebx+edi*4] +
mov [esp+28h+var_10] ebx +
mov [esp+28h+var_C] eax +
mov [esp+28h+var_14] edx +
mov eax 0 +
mov edx [esp+28h+var_18] +
mov ebx [esp+28h+var_14] +
cmpxchg [ebx] edx +
setz al  +
test al al +
jnz loc_1009141  +
mov [esp+28h+var_14] ecx +
push esi  +
mov eax [esp+2Ch+var_8] +
mov edx [esp+2Ch+var_4] +
mov ebx [esp+2Ch+var_10] +
mov ecx [esp+2Ch+var_C] +
mov esi [esp+2Ch+var_14] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
mov ebx [ebp+10h] +
mov edi [ebp+14h] +
lea ecx [ebp+10h] +
mov [esp+28h+var_8] ebx +
mov [esp+28h+var_4] edi +
cmp edi 8000h +
jnz loc_1008FA2  +
jmp loc_10090C4  +
mov ebp [esp+28h+arg_0] +
mov esi [esp+28h+var_18] +
mov eax [esi] +
push eax  +
call ds:CloseHandle  +
mov ecx [esi+4] +
push ecx  +
call ds:CloseHandle  +
lea eax [ebp+28h] +
push eax  +
mov edi esi +
call sub_1008E70  +
lea esi [ebp+10h] +
lea esp [esp+0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx 8000h +
cmp ecx edx +
jz loc_100910C  +
push ecx  +
push eax  +
push edx  +
push eax  +
push esi  +
call sub_1008DD0  +
test al al +
jz loc_10090F0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 18h +
retn 4  +
mov eax [esp+28h+var_18] +
xor edx edx +
lea ecx [edx+1] +
mov [eax+8] edi +
cmp edi ecx +
jz loc_100912F  +
inc edx  +
rol ecx 1 +
cmp edi ecx +
jnz loc_1009128  +
mov ecx [esp+28h+arg_0] +
mov [ecx+edx*4+34h] ebp +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 18h +
retn 4  +
mov [esi+8] edi +
mov [esp+28h+arg_0] ecx +
push esi  +
mov eax [esp+2Ch+var_8] +
mov edx [esp+2Ch+var_4] +
mov ebx [esp+2Ch+var_10] +
mov ecx [esp+2Ch+var_C] +
mov esi [esp+2Ch+arg_0] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
mov eax [esp+28h+var_18] +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 18h +
retn 4  +
***
mov eax [esp+arg_0] +
xor ecx ecx +
cmp eax ecx +
jz loc_10091D0  +
mov eax [eax+8] +
cmp eax 4C66506Ch +
jnz loc_10091D0  +
mov eax [esp+arg_4] +
cmp eax ecx +
jz loc_10091D0  +
test al 7 +
jnz loc_10091D0  +
mov [eax] ecx +
mov [eax+4] ecx +
or dword ptr [eax+4] 10000h +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
lea ecx [esp+arg_0] +
mov [esp+arg_4] ecx +
mov eax 1 +
mov edx [esp+arg_4] +
xadd [edx] eax +
inc eax  +
mov eax 1 +
retn 8  +
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_1009D54  +
mov eax [esi+8] +
cmp eax 4C66506Ch +
jnz loc_1009D54  +
mov ebx [ebp+arg_4] +
mov [ebp+var_8] ebx +
cmp ebx edi +
jz loc_1009D54  +
test bl 3 +
jnz loc_1009D54  +
mov ecx [ebp+arg_8] +
mov [ebp+var_4] edi +
test ecx 0FFFFFFF7h +
jnz loc_1009618  +
cmp [esi+0Ch] edi +
jl loc_1009296  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
cmp ecx eax +
jnz loc_1009296  +
cmp [esi+0Ch] edi +
jnz loc_1009254  +
mov eax 0E0000004h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov edi [ebp+arg_C] +
mov eax [ebx] +
mov ecx [ebx+4] +
mov edx eax +
mov esi ecx +
test edi edi +
jnz loc_100926C  +
and ecx 0FFFF7FFFh +
jmp loc_1009279  +
test eax 7FFFh +
jnz loc_1009279  +
or ecx 8000h +
push esi  +
push edx  +
push ecx  +
inc eax  +
push eax  +
push ebx  +
call sub_1008DD0  +
test al al +
jz loc_1009257  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov edi [ebx+4] +
mov [ebp+var_20] eax +
mov [ebp+var_1C] edi +
mov [ebp+var_18] eax +
mov [ebp+var_14] edi +
test eax 0FFFF0000h +
jnz loc_1009316  +
cmp [ebp+arg_C] 0 +
jnz loc_10092BC  +
and edi 0FFFF7FFFh +
jmp loc_10092C9  +
test eax 7FFFh +
jnz loc_10092CC  +
or edi 8000h +
mov [ebp+var_1C] edi +
inc eax  +
mov [ebp+var_20] eax +
push esi  +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
mov esi [ebp+var_8] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
test al al +
jz loc_1009293  +
cmp [ebp+var_4] 0 +
jz loc_100930B  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009301  +
pop esi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_10095EB  +
mov edx edi +
and edx 8000h +
or edx [ebp+dwMilliseconds] +
jz loc_10095EB  +
test edi 0FFFE0000h +
jnz loc_1009382  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_100937A  +
mov eax [ebp+arg_0] +
mov [ebp+var_C] eax +
push esi  +
mov esi [ebp+var_C] +
mov edx [esi+4] +
mov eax [esi] +
test eax eax +
lea ecx [edx+1] +
jz loc_100935F  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_100934F  +
mov [ebp+var_4] eax +
pop esi  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_100937A  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_1008ED0  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10093C0  +
mov edx [eax+8] +
shl edx 11h +
add edi edx +
inc edi  +
mov [ebp+var_1C] edi +
push esi  +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
mov esi [ebp+var_8] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
test al al +
jz loc_1009293  +
mov eax [ebp+var_4] +
mov ecx edi +
shr ecx 11h +
test eax eax +
jnz loc_10093CE  +
mov edx [ebp+arg_0] +
mov eax [edx+10h] +
mov ecx [eax+ecx*4] +
mov [ebp+var_4] ecx +
jmp loc_10093F5  +
mov eax 8 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
cmp [eax+8] ecx +
jz loc_10093F5  +
mov edx [ebp+arg_0] +
mov [ebp+arg_8] edx +
push esi  +
mov esi [ebp+arg_8] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10093E2  +
pop esi  +
mov edx [edx+10h] +
mov eax [edx+ecx*4] +
mov [ebp+var_4] eax +
test edi 8000h +
jz loc_10094A0  +
mov [ebp+arg_8] 3E8h +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov esi [ebx+4] +
mov ecx eax +
mov [ebp+var_14] esi +
test eax 0FFFF0000h +
jnz loc_1009464  +
cmp [ebp+arg_C] 0 +
jnz loc_100942A  +
and esi 0FFFF7FFFh +
jmp loc_1009437  +
test eax 7FFFh +
jnz loc_1009437  +
or esi 8000h +
inc eax  +
dec esi  +
mov edx eax +
mov edi esi +
and edx 0FFFE0000h +
and edi 7FFFh +
or edx edi +
jnz loc_1009453  +
and esi 1FFFFh +
mov edx [ebp+var_14] +
push edx  +
push ecx  +
push esi  +
push eax  +
push ebx  +
call sub_1008DD0  +
test al al +
jnz loc_1009474  +
sub [ebp+arg_8] 1 +
jz loc_10094A3  +
test esi 8000h +
jnz loc_1009408  +
jmp loc_10094A3  +
test esi 0FFFE0000h +
jnz loc_1009495  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_100948B  +
pop esi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov ebx [ebp+arg_4] +
mov esi [ebp+dwMilliseconds] +
mov ecx [ebp+var_4] +
mov eax [ecx] +
test esi esi +
jz loc_1009557  +
mov edx [ebp+bAlertable] +
push edx  +
push esi  +
push eax  +
call ds:WaitForSingleObjectEx  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_100955E  +
mov eax [ebx] +
mov edi [ebx+4] +
mov [ebp+var_18] eax +
mov [ebp+var_14] edi +
test eax 0FFFF0000h +
jnz loc_10094A6  +
lea esp [esp+0] +
cmp [ebp+arg_C] 0 +
jnz loc_10094EE  +
and edi 0FFFF7FFFh +
jmp loc_10094FB  +
test eax 7FFFh +
jnz loc_10094FB  +
or edi 8000h +
dec edi  +
inc eax  +
mov [ebp+var_20] eax +
mov ecx edi +
and eax 0FFFE0000h +
and ecx 7FFFh +
or eax ecx +
mov [ebp+var_1C] edi +
jnz loc_100951D  +
and edi 1FFFFh +
mov [ebp+var_1C] edi +
push esi  +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
mov esi [ebp+var_8] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
test al al +
jnz loc_10095BF  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
mov edi [ecx+4] +
mov [ebp+var_18] eax +
mov [ebp+var_14] edi +
test eax 0FFFF0000h +
jz loc_10094E0  +
jmp loc_10094A0  +
mov [ebp+arg_8] 102h +
mov eax [ebx] +
mov esi [ebx+4] +
mov [ebp+var_14] esi +
dec esi  +
mov edx eax +
mov ecx esi +
and edx 0FFFE0000h +
and ecx 7FFFh +
or edx ecx +
jnz loc_1009581  +
and esi 1FFFFh +
mov edx [ebp+var_14] +
push edx  +
push eax  +
push esi  +
push eax  +
push ebx  +
call sub_1008DD0  +
test al al +
jz loc_100955E  +
test esi 0FFFE0000h +
jnz loc_10095B3  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10095A9  +
pop esi  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
test edi 0FFFE0000h +
jnz loc_10095E0  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_0] ecx +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10095D6  +
pop esi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
cmp [ebp+var_4] 0 +
jz loc_100960A  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009600  +
pop esi  +
mov eax 102h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
lea eax [ecx-1] +
test eax 0FFFFFFF7h +
jnz loc_1009A6D  +
cmp [esi+0Ch] edi +
mov [ebp+var_C] edi +
jl loc_1009690  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
mov [ebp+var_C] eax +
cmp ecx eax +
jnz loc_1009690  +
cmp [esi+0Ch] edi +
jz loc_1009246  +
inc dword ptr [ebx+0Ch]  +
cmp [ebp+arg_C] edi +
jnz loc_100967E  +
mov edx [ebx+4] +
test edx 8000h +
jz loc_100967E  +
lea ebx [ebx+0] +
mov edx [ebx] +
mov eax [ebx+4] +
mov ecx eax +
and ecx 0FFFF7FFFh +
push ecx  +
push edx  +
push eax  +
push edx  +
push ebx  +
mov [ebp+var_14] eax +
call sub_1008DD0  +
test al al +
jz loc_1009660  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov eax [ebx] +
mov edi [ebx+4] +
mov [ebp+var_20] eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] edi +
test eax eax +
jnz loc_10096E5  +
and edi 0FFFF7FFFh +
mov [ebp+var_20] 10000h +
mov [ebp+var_1C] edi +
cmp [ebp+arg_C] eax +
jz loc_10096C0  +
or edi 8000h +
mov [ebp+var_1C] edi +
push esi  +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
mov esi [ebp+var_8] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
test al al +
jnz loc_100978F  +
mov ebx [ebp+arg_4] +
jmp loc_1009690  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_1009A40  +
mov ecx edi +
and ecx 8000h +
or ecx [ebp+dwMilliseconds] +
jz loc_1009A40  +
test edi 0FFFE0000h +
jnz loc_100975B  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1009750  +
mov edx [ebp+arg_0] +
mov [ebp+var_10] edx +
push esi  +
mov esi [ebp+var_10] +
mov edx [esi+4] +
mov eax [esi] +
test eax eax +
lea ecx [edx+1] +
jz loc_100972E  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_100971E  +
mov [ebp+var_4] eax +
pop esi  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_100974D  +
mov eax [ebp+arg_0] +
push eax  +
call sub_1008ED0  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10093C0  +
mov ebx [ebp+arg_4] +
mov ecx [eax+8] +
mov eax [ebp+var_20] +
shl ecx 11h +
add edi ecx +
mov edx [ebp+var_14] +
mov ecx [ebp+var_18] +
push edx  +
push ecx  +
push edi  +
add eax 20000h +
push eax  +
push ebx  +
call sub_1008DD0  +
test al al +
jz loc_1009690  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_10097CB  +
mov ecx [ebp+arg_0] +
mov edx [ecx+10h] +
mov eax edi +
shr eax 11h +
mov eax [edx+eax*4] +
jmp loc_10097F7  +
cmp [ebp+var_4] 0 +
jz loc_10097AE  +
mov edx [ebp+arg_0] +
mov [ebp+arg_C] edx +
push esi  +
mov esi [ebp+arg_C] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10097A4  +
pop esi  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+0Ch] 0 +
jl loc_10097C0  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_C] +
mov [ecx+8] edx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov ecx edi +
shr ecx 11h +
cmp [eax+8] ecx +
jz loc_10097FA  +
mov edx [ebp+arg_0] +
mov [ebp+arg_8] edx +
push esi  +
mov esi [ebp+arg_8] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10097E4  +
pop esi  +
mov edx [edx+10h] +
mov eax [edx+ecx*4] +
mov ebx [ebp+arg_4] +
mov [ebp+var_4] eax +
test edi 8000h +
jz loc_100987A  +
mov [ebp+arg_8] 3E8h +
lea esp [esp+0] +
mov eax [ebx] +
mov esi [ebx+4] +
mov ecx eax +
mov [ebp+var_14] esi +
test eax 1FFFFh +
jnz loc_100986C  +
or eax 10000h +
sub eax 20000h +
and esi 0FFFF7FFFh +
cmp [ebp+arg_C] 0 +
jz loc_100983D  +
or esi 8000h +
mov edx eax +
mov edi esi +
and edx 0FFFE0000h +
and edi 7FFFh +
or edx edi +
jnz loc_1009857  +
and esi 1FFFFh +
mov edx [ebp+var_14] +
push edx  +
push ecx  +
push esi  +
push eax  +
push ebx  +
call sub_1008DD0  +
test al al +
jnz loc_1009941  +
sub [ebp+arg_8] 1 +
jz loc_100987A  +
test esi 8000h +
jnz loc_1009810  +
mov ecx [ebp+dwMilliseconds] +
mov eax [ebp+var_4] +
mov eax [eax+4] +
test ecx ecx +
jz loc_100997F  +
mov edx [ebp+bAlertable] +
push edx  +
push ecx  +
push eax  +
call ds:WaitForSingleObjectEx  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_1009986  +
mov eax [ebx] +
mov edi [ebx+4] +
test eax 1FFFFh +
jnz loc_1009924  +
mov [ebp+var_18] eax +
or eax 10000h +
mov [ebp+var_14] edi +
sub eax 20000h +
and edi 0FFFF7FFFh +
cmp [ebp+arg_C] 0 +
mov [ebp+var_20] eax +
mov [ebp+var_1C] edi +
jz loc_10098D9  +
or edi 8000h +
mov [ebp+var_1C] edi +
mov ecx edi +
and eax 0FFFE0000h +
and ecx 7FFFh +
or eax ecx +
jnz loc_10098F3  +
and edi 1FFFFh +
mov [ebp+var_1C] edi +
push esi  +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
mov esi [ebp+var_8] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
test al al +
jnz loc_1009A16  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
mov edi [ecx+4] +
test eax 1FFFFh +
jz loc_10098AE  +
mov ebx ecx +
test eax 8000h +
jz loc_100987A  +
mov edx [ebp+var_4] +
mov eax [edx+4] +
push eax  +
call ds:SetEvent  +
jmp loc_100987A  +
test esi 0FFFE0000h +
jnz loc_1009965  +
mov eax [ebp+arg_0] +
mov [ebp+arg_C] eax +
push esi  +
mov esi [ebp+arg_C] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009958  +
pop esi  +
mov ebx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+0Ch] 0 +
jl loc_1009974  +
mov edx [ebp+var_C] +
mov [ebx+8] edx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov [ebp+arg_8] 102h +
mov edi [ebx] +
mov esi [ebx+4] +
mov eax edi +
sub edi 20000h +
mov ecx edi +
mov edx esi +
and ecx 0FFFE0000h +
and edx 7FFFh +
or ecx edx +
mov [ebp+var_1C] esi +
mov [ebp+var_14] esi +
jnz loc_10099B6  +
and esi 1FFFFh +
mov [ebp+var_1C] esi +
mov ecx [ebp+var_14] +
push ecx  +
push eax  +
push esi  +
push edi  +
push ebx  +
call sub_1008DD0  +
test al al +
jz loc_1009986  +
test esi 0FFFE0000h +
jnz loc_10099EB  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10099DE  +
pop esi  +
mov esi [ebp+var_1C] +
test edi 0FFFF0000h +
jnz loc_1009A0A  +
and esi 7FFFh +
jz loc_1009A0A  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push 0  +
push esi  +
push ecx  +
call ds:ReleaseSemaphore  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
test edi 0FFFE0000h +
jnz loc_10097AE  +
mov edx [ebp+arg_0] +
mov [ebp+arg_C] edx +
push esi  +
mov esi [ebp+arg_C] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009A31  +
pop esi  +
jmp loc_10097AE  +
cmp [ebp+var_4] 0 +
jz loc_1009A5F  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009A55  +
pop esi  +
mov eax 102h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
lea edx [ecx-2] +
test edx 0FFFFFFF7h +
jnz loc_1009B57  +
cmp [esi+0Ch] edi +
jl loc_1009AA4  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
cmp ecx eax +
jz loc_1009A9C  +
mov eax 0E0000001h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
cmp [ebx+0Ch] edi +
jnz loc_1009AA4  +
mov [ebx+8] edi +
mov eax [ebx] +
mov edi [ebx+4] +
cmp dword ptr [ebx+0Ch] 0 +
mov [ebp+var_18] eax +
mov [ebp+var_14] edi +
jnz loc_1009AC1  +
test eax 10000h +
jz loc_1009A8E  +
and eax 0FFFEFFFFh +
and edi 0FFFF7FFFh +
cmp [ebp+arg_C] 0 +
mov [ebp+var_1C] edi +
jz loc_1009AD9  +
or edi 8000h +
mov [ebp+var_1C] edi +
inc eax  +
mov [ebp+var_20] eax +
push esi  +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
mov esi [ebp+var_8] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
test al al +
jnz loc_1009AFE  +
mov ebx [ebp+arg_4] +
jmp loc_1009AA4  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
test eax eax +
jz loc_1009B17  +
dec eax  +
mov [ecx+0Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
test [ebp+var_20] 0FFFE0000h +
jnz loc_10097C0  +
mov eax edi +
and eax 7FFFh +
jz loc_10097C0  +
mov edx [ebp+arg_0] +
mov ecx [edx+10h] +
shr edi 11h +
mov edi [ecx+edi*4] +
push 0  +
mov [ebp+var_4] edi +
mov edx [edi] +
push eax  +
push edx  +
call ds:ReleaseSemaphore  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
lea eax [ecx-3] +
and eax 0FFFFFFF7h +
mov [ebp+var_10] eax +
jz loc_1009B71  +
add ecx 0FFFFFFFCh +
test ecx 0FFFFFFF7h +
jnz loc_1009D54  +
cmp [esi+0Ch] edi +
mov [ebp+var_C] edi +
jl loc_1009BCB  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
mov [ebp+var_C] eax +
cmp ecx eax +
jnz loc_1009BCB  +
mov edi [ebp+arg_C] +
lea esp [esp+0] +
mov eax [ebx] +
mov ecx [ebx+4] +
mov edx eax +
mov esi ecx +
test eax 7FFFh +
jz loc_1009D54  +
dec eax  +
test edi edi +
jnz loc_1009BAF  +
and ecx 0FFFF7FFFh +
push esi  +
push edx  +
push ecx  +
push eax  +
push ebx  +
call sub_1008DD0  +
test al al +
jz loc_1009B90  +
inc dword ptr [ebx+0Ch]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov edi [ebx] +
mov eax [ebx+4] +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
mov [ebp+var_14] eax +
test edi 7FFFh +
jz loc_1009D35  +
test edi 8000h +
jnz loc_1009D62  +
test edi 0FFFE0000h +
jz loc_1009C03  +
cmp [ebp+var_10] 0 +
jz loc_1009D8F  +
dec edi  +
test edi 17FFFh +
jnz loc_1009C7D  +
mov eax [ebp+var_1C] +
or edi 10000h +
and eax 0FFFF7FFFh +
cmp [ebp+arg_C] 0 +
jz loc_1009C25  +
or eax 8000h +
mov edx [ebp+var_14] +
mov ecx [ebp+var_18] +
push edx  +
push ecx  +
push eax  +
push edi  +
push ebx  +
call sub_1008DD0  +
test al al +
jz loc_1009D1B  +
cmp [ebp+var_4] 0 +
jz loc_1009C5F  +
mov edx [ebp+arg_0] +
mov [ebp+arg_C] edx +
push esi  +
mov esi [ebp+arg_C] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009C52  +
pop esi  +
mov ebx [ebp+arg_4] +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+0Ch] 0 +
jl loc_10097C0  +
mov ecx [ebp+var_C] +
mov [ebx+8] ecx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_100A000  +
mov esi [ebp+var_1C] +
mov edx esi +
and edx 8000h +
or edx [ebp+dwMilliseconds] +
jz loc_100A000  +
test esi 0FFFE0000h +
jnz loc_1009CF7  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1009CEB  +
mov eax [ebp+arg_0] +
mov [ebp+var_8] eax +
push esi  +
mov esi [ebp+var_8] +
mov edx [esi+4] +
mov eax [esi] +
test eax eax +
lea ecx [edx+1] +
jz loc_1009CC9  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_1009CB9  +
mov [ebp+var_4] eax +
pop esi  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1009CE8  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_1008ED0  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10093C0  +
mov ebx [ebp+arg_4] +
mov edx [eax+8] +
shl edx 11h +
add [ebp+var_1C] edx +
mov esi [ebp+var_1C] +
mov eax [ebp+var_14] +
mov ecx [ebp+var_18] +
push eax  +
push ecx  +
or edi 8000h +
push esi  +
add edi 20000h +
push edi  +
push ebx  +
call sub_1008DD0  +
test al al +
jnz loc_1009DBC  +
mov edi [ebx] +
mov eax [ebx+4] +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
mov [ebp+var_14] eax +
test edi 7FFFh +
jnz loc_1009BE5  +
cmp [ebp+var_4] 0 +
jz loc_1009D54  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009D4A  +
pop esi  +
mov eax 57h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
cmp [ebp+var_4] 0 +
jz loc_1009D81  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009D77  +
pop esi  +
mov eax 0E0000002h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
cmp [ebp+var_4] 0 +
jz loc_1009DAE  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_0] ecx +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009DA4  +
pop esi  +
mov eax 0E0000003h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov eax [ebp+var_4] +
mov edx esi +
shr edx 11h +
test eax eax +
jnz loc_1009DD6  +
mov eax [ebp+arg_0] +
mov ecx [eax+10h] +
mov edx [ecx+edx*4] +
mov [ebp+var_4] edx +
jmp loc_1009E03  +
cmp [eax+8] edx +
jz loc_1009E03  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_8] ecx +
push esi  +
mov esi [ebp+arg_8] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009DEA  +
pop esi  +
mov eax [ecx+10h] +
mov ecx [eax+edx*4] +
mov ebx [ebp+arg_4] +
mov esi [ebp+var_1C] +
mov [ebp+var_4] ecx +
test esi 8000h +
jz loc_1009E81  +
mov [ebp+arg_8] 3E8h +
mov eax [ebx] +
mov esi [ebx+4] +
mov ecx eax +
mov [ebp+var_14] esi +
test eax 17FFFh +
jnz loc_1009E73  +
or eax 10000h +
sub eax 20000h +
and eax 0FFFF7FFFh +
and esi 0FFFF7FFFh +
cmp [ebp+arg_C] 0 +
jz loc_1009E44  +
or esi 8000h +
mov edx eax +
mov edi esi +
and edx 0FFFE0000h +
and edi 7FFFh +
or edx edi +
jnz loc_1009E5E  +
and esi 1FFFFh +
mov edx [ebp+var_14] +
push edx  +
push ecx  +
push esi  +
push eax  +
push ebx  +
call sub_1008DD0  +
test al al +
jnz loc_1009F1B  +
sub [ebp+arg_8] 1 +
jz loc_1009E81  +
test esi 8000h +
jnz loc_1009E12  +
mov edi [ebp+dwMilliseconds] +
mov eax [ebp+var_4] +
mov eax [eax+4] +
test edi edi +
jz loc_1009F5D  +
mov ecx [ebp+bAlertable] +
push ecx  +
push edi  +
push eax  +
call ds:WaitForSingleObjectEx  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_1009F64  +
mov eax [ebx] +
mov esi [ebx+4] +
test eax 17FFFh +
jnz loc_1009E84  +
mov ecx eax +
or eax 10000h +
sub eax 20000h +
mov [ebp+var_14] esi +
and eax 0FFFF7FFFh +
and esi 0FFFF7FFFh +
cmp [ebp+arg_C] 0 +
jz loc_1009EDB  +
or esi 8000h +
mov edx eax +
mov edi esi +
and edx 0FFFE0000h +
and edi 7FFFh +
or edx edi +
jnz loc_1009EF5  +
and esi 1FFFFh +
mov edx [ebp+var_14] +
push edx  +
push ecx  +
push esi  +
push eax  +
push ebx  +
call sub_1008DD0  +
test al al +
jnz loc_1009FD6  +
mov eax [ebx] +
mov esi [ebx+4] +
test eax 17FFFh +
jz loc_1009EB5  +
jmp loc_1009E81  +
test esi 0FFFE0000h +
jnz loc_1009F3F  +
mov eax [ebp+arg_0] +
mov [ebp+arg_C] eax +
push esi  +
mov esi [ebp+arg_C] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009F32  +
pop esi  +
mov ebx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+0Ch] 0 +
jl loc_10097C0  +
mov edx [ebp+var_C] +
mov [ebx+8] edx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
mov [ebp+arg_8] 102h +
mov edi [ebx] +
mov esi [ebx+4] +
mov eax edi +
add edi 0FFFE0000h +
and edi 0FFFF7FFFh +
inc edi  +
mov ecx edi +
mov edx esi +
and ecx 0FFFE0000h +
and edx 7FFFh +
or ecx edx +
mov [ebp+var_1C] esi +
mov [ebp+var_14] esi +
jnz loc_1009F9B  +
and esi 1FFFFh +
mov [ebp+var_1C] esi +
mov ecx [ebp+var_14] +
push ecx  +
push eax  +
push esi  +
push edi  +
push ebx  +
call sub_1008DD0  +
test al al +
jz loc_1009F64  +
test esi 0FFFE0000h +
jnz loc_10099EB  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009FC7  +
pop esi  +
jmp loc_10099E8  +
test esi 0FFFE0000h +
jnz loc_1009C5F  +
mov edx [ebp+arg_0] +
mov [ebp+arg_C] edx +
push esi  +
mov esi [ebp+arg_C] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1009FF1  +
pop esi  +
jmp loc_1009C5C  +
cmp [ebp+var_4] 0 +
jz loc_100A01F  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
mov eax [esi] +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_100A015  +
pop esi  +
pop edi  +
pop esi  +
mov eax 102h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
***
mov eax [esp+arg_0] +
sub esp 14h +
push ebx  +
push ebp  +
push esi  +
push edi  +
test eax eax +
jz loc_100A23B  +
mov ecx [eax+8] +
cmp ecx 4C66506Ch +
jnz loc_100A23B  +
mov ebx [esp+24h+arg_4] +
mov [esp+24h+var_14] ebx +
test ebx ebx +
jz loc_100A23B  +
test bl 3 +
jnz loc_100A23B  +
cmp [esp+24h+arg_8] 0 +
jnz loc_100A126  +
mov edi [ebx] +
mov ebp [ebx+4] +
mov [esp+24h+var_C] ebp +
mov [esp+24h+var_8] edi +
mov [esp+24h+var_4] ebp +
test edi 7FFFh +
jz loc_100A0CB  +
dec edi  +
mov [esp+24h+var_10] edi +
push esi  +
mov eax [esp+28h+var_8] +
mov edx [esp+28h+var_4] +
mov ebx [esp+28h+var_10] +
mov ecx [esp+28h+var_C] +
mov esi [esp+28h+var_14] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
test al al +
jnz loc_100A0DA  +
mov ebx [esp+24h+arg_4] +
jmp loc_100A086  +
mov eax 0E0000001h +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 14h +
retn 10h  +
test edi 17FFFh +
jnz loc_100A22F  +
and edi 0FFFE0000h +
jz loc_100A22F  +
mov edx [esp+24h+arg_0] +
mov eax [edx+10h] +
shr ebp 11h +
mov ebp [eax+ebp*4] +
mov ecx [ebp+4] +
push ecx  +
call ds:SetEvent  +
cmp [esp+24h+arg_C] 0 +
jz loc_100A22F  +
mov edx [esp+24h+arg_4] +
mov eax [edx] +
and eax 0FFFE0000h +
cmp eax edi +
jmp loc_100A225  +
cmp dword ptr [eax+0Ch] 0 +
jl loc_100A157  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
cmp ecx eax +
jnz loc_100A0CB  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_100A150  +
dec eax  +
mov [ebx+0Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 14h +
retn 10h  +
mov dword ptr [ebx+8] 0 +
mov ebp [ebx] +
mov edi [ebx+4] +
mov [esp+24h+var_C] edi +
mov [esp+24h+var_8] ebp +
mov [esp+24h+var_4] edi +
test ebp 10000h +
jz loc_100A0CB  +
and ebp 0FFFEFFFFh +
mov [esp+24h+var_10] ebp +
push esi  +
mov eax [esp+28h+var_8] +
mov edx [esp+28h+var_4] +
mov ebx [esp+28h+var_10] +
mov ecx [esp+28h+var_C] +
mov esi [esp+28h+var_14] +
cmpxchg8b qword ptr [esi]  +
setz al  +
pop esi  +
test al al +
jnz loc_100A1A5  +
mov ebx [esp+24h+arg_4] +
jmp loc_100A157  +
mov esi ebp +
and esi 0FFFE0000h +
jz loc_100A1E4  +
test ebp 7FFFh +
jnz loc_100A22F  +
mov edx [esp+24h+arg_0] +
mov eax [edx+10h] +
shr edi 11h +
mov edi [eax+edi*4] +
mov ecx [edi+4] +
push ecx  +
call ds:SetEvent  +
cmp [esp+24h+arg_C] 0 +
jz loc_100A22F  +
mov edx [esp+24h+arg_4] +
mov eax [edx] +
and eax 0FFFE0000h +
cmp eax esi +
jmp loc_100A225  +
mov esi edi +
and esi 7FFFh +
jz loc_100A22F  +
mov ecx [esp+24h+arg_0] +
mov edx [ecx+10h] +
shr edi 11h +
mov edi [edx+edi*4] +
mov eax [edi] +
push 0  +
push esi  +
push eax  +
call ds:ReleaseSemaphore  +
cmp [esp+24h+arg_C] 0 +
jz loc_100A22F  +
test ebp 7FFFh +
jnz loc_100A22F  +
mov ecx [esp+24h+arg_4] +
mov edx [ecx+4] +
and edx 7FFFh +
cmp edx esi +
jnz loc_100A22F  +
push 1  +
call ds:Sleep  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 14h +
retn 10h  +
pop edi  +
pop esi  +
pop ebp  +
mov eax 57h +
pop ebx  +
add esp 14h +
retn 10h  +
***
retn   +
***
mov edi edi +
push esi  +
push 0  +
xor esi esi +
inc esi  +
push esi  +
push offset dword_101654C  +
call ds:InterlockedCompareExchange  +
test eax eax +
jnz loc_100A290  +
and dword_1016550 eax +
and dword_101654C eax +
mov dword_1016548 esi +
pop esi  +
retn 8  +
push esi  +
call ds:Sleep  +
cmp dword_101654C esi +
jz loc_100A289  +
jmp loc_100A285  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100A2B5  +
cmp ecx 7FFFFFFFh +
jbe loc_100A2BA  +
mov eax 80070057h +
test eax eax +
jl loc_100A2F7  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100A2EA  +
cmp eax esi +
ja loc_100A2EA  +
jnz loc_100A2F2  +
mov [esi+edi] bl +
jmp loc_100A2F2  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100A3C4  +
cmp [ebp+arg_8] 0 +
jz loc_100A3C4  +
mov edx [ebp+arg_C] +
test edx edx +
jz loc_100A3C4  +
mov ebx [ebp+arg_4] +
and [ebp+var_4] 0 +
cmp ebx 0FFFFFFFFh +
jnz loc_100A34A  +
mov eax edi +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100A338  +
sub eax esi +
mov ebx eax +
mov [ebp+var_4] 1 +
cmp [ebp+var_4] 1 +
mov eax ebx +
jnz loc_100A355  +
lea eax [ebx+1] +
cmp [edx] eax +
jnb loc_100A360  +
mov eax 8007000Eh +
jmp loc_100A3C9  +
and [ebp+arg_0] 0 +
mov esi [ebp+arg_8] +
test ebx ebx +
jle loc_100A3B1  +
lea edx [eax+1] +
mov cl [edi] +
movzx eax cl +
inc edi  +
inc [ebp+arg_0]  +
cmp ds:dword_1001978[eax*4] 1 +
jnz loc_100A3A6  +
mov ecx [ebp+arg_C] +
inc edx  +
inc edx  +
mov [ebp+arg_4] edx +
cmp [ecx] edx +
jb loc_100A359  +
push eax  +
push offset dword_1001D78  +
push 4  +
push esi  +
call sub_100A29F  +
mov edx [ebp+arg_4] +
add esp 10h +
add esi 3 +
jmp loc_100A3A9  +
mov [esi] cl +
inc esi  +
cmp [ebp+arg_0] ebx +
jl loc_100A36E  +
mov edx [ebp+arg_C] +
cmp [ebp+var_4] 1 +
jnz loc_100A3BB  +
mov byte ptr [esi] 0 +
inc esi  +
sub esi [ebp+arg_8] +
xor eax eax +
mov [edx] esi +
jmp loc_100A3C9  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
inc eax  +
push eax  +
call sub_1002AD9  +
test eax eax +
jge loc_100A3EF  +
mov eax [esi] +
jmp loc_100A409  +
mov eax [esi+0Ch] +
mov ecx [esi+4] +
mov dl [ebp+arg_0] +
mov [eax+ecx] dl +
mov eax [esi+4] +
inc eax  +
push eax  +
mov ecx esi +
call sub_1002AA2  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jge loc_100A424  +
xor eax eax +
jmp loc_100A439  +
cmp [ebp+arg_0] 0 +
jle loc_100A436  +
push [ebp+arg_0]  +
call sub_1002AD9  +
test eax eax +
jl loc_100A420  +
mov eax [esi+0Ch] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jge loc_100A454  +
xor eax eax +
jmp loc_100A469  +
cmp [ebp+arg_0] 0 +
jle loc_100A466  +
push [ebp+arg_0]  +
call sub_10029F0  +
test eax eax +
jl loc_100A450  +
mov eax [esi+0Ch] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
push esi  +
mov esi [ebp+lpWideCharStr] +
push edi  +
mov [ebp+var_98] eax +
mov [ebp+var_9C] ecx +
test esi esi +
jz loc_100A560  +
test eax eax +
jz loc_100A560  +
test ecx ecx +
jz loc_100A560  +
mov eax [ebp+arg_4] +
xor edi edi +
cmp eax 0FFFFFFFFh +
jnz loc_100A4D7  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A4C6  +
sub eax edx +
xor edi edi +
sar eax 1 +
inc edi  +
and [ebp+var_94] 0 +
and [ebp+var_90] 0 +
push eax  +
lea ecx [ebp+var_84] +
push esi  +
mov [ebp+var_88] ecx +
push 0FDE9h  +
lea ecx [ebp+var_94] +
mov [ebp+var_8C] 80h +
call sub_100313D  +
mov esi eax +
test esi esi +
jge loc_100A522  +
lea ecx [ebp+var_94] +
call sub_1002970  +
mov eax esi +
jmp loc_100A565  +
test edi edi +
jz loc_100A52B  +
or eax 0FFFFFFFFh +
jmp loc_100A53E  +
cmp [ebp+var_94] 0 +
jge loc_100A538  +
xor eax eax +
jmp loc_100A53E  +
mov eax [ebp+var_90] +
push [ebp+var_9C]  +
lea ecx [ebp+var_94] +
push [ebp+var_98]  +
push eax  +
call sub_10033A8  +
push eax  +
call sub_100A2FE  +
mov esi eax +
jmp loc_100A513  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10082CB  +
leave   +
retn 10h  +
***
call __EH_prolog3_GS  +
mov eax [ebp+0Ch] +
mov edi [ebp+8] +
mov ecx [ebp+14h] +
mov edx [ebp+1Ch] +
xor esi esi +
mov [ebp-230h] edi +
mov [ebp-240h] eax +
mov [ebp-238h] ecx +
mov [ebp-23Ch] edx +
cmp eax esi +
jnz loc_100A5B8  +
cmp [ebp+10h] esi +
ja loc_100A5BD  +
cmp [ebp+10h] esi +
jnz loc_100A5CA  +
mov eax 80070057h +
call sub_100836C  +
retn 18h  +
cmp ecx esi +
jnz loc_100A5D3  +
cmp [ebp+18h] esi +
ja loc_100A5BD  +
cmp [ebp+18h] esi +
jz loc_100A5BD  +
cmp eax esi +
jz loc_100A5E1  +
xor edx edx +
mov [eax] dx +
cmp ecx esi +
jz loc_100A5EA  +
xor eax eax +
mov [ecx] ax +
cmp edi esi +
jnz loc_100A5F2  +
xor eax eax +
jmp loc_100A5C2  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_100A5F7  +
sub eax edx +
sar eax 1 +
lea ebx [eax+1] +
cmp ebx esi +
jz loc_100A5EE  +
push ebx  +
lea ecx [ebp-218h] +
call sub_10033C5  +
mov esi [ebp-218h] +
xor eax eax +
cmp esi eax +
jnz loc_100A63C  +
mov esi 8007000Eh +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-218h] +
call sub_100294D  +
mov eax esi +
jmp loc_100A5C2  +
mov ecx [ebp-230h] +
and dword ptr [ebp-220h] 0 +
and dword ptr [ebp-224h] 0 +
mov [ebp-21Ch] eax +
mov [ebp-228h] eax +
mov [ebp-22Ch] eax +
movzx eax word ptr [ecx] +
push 2Fh  +
pop edx  +
cmp dx ax +
jnz loc_100A678  +
lea eax [esi+2] +
mov [ebp-21Ch] eax +
jmp loc_100A68E  +
push 2Ah  +
pop edx  +
cmp dx ax +
jz loc_100A688  +
push 5Ch  +
pop edx  +
cmp dx ax +
jnz loc_100A698  +
mov [ebp-21Ch] esi +
mov dword ptr [ebp-220h] 5 +
lea ebx [ecx+ebx*2] +
mov [ebp-234h] ebx +
cmp ecx ebx +
jb loc_100A6C3  +
xor esi esi +
cmp [ebp-21Ch] esi +
jnz loc_100A629  +
mov esi 80004005h +
jmp loc_100A629  +
mov ecx [ebp-230h] +
mov ax [edi] +
mov [esi] ax +
mov eax [ebp-220h] +
xor edx edx +
sub eax edx +
jz loc_100A903  +
dec eax  +
jz loc_100A8E7  +
dec eax  +
jz loc_100A8B0  +
dec eax  +
jz loc_100A7D8  +
dec eax  +
jz loc_100A75B  +
dec eax  +
jnz loc_100A940  +
movzx eax word ptr [edi] +
push 23h  +
pop ecx  +
cmp cx ax +
jz loc_100A716  +
push 3Fh  +
pop ecx  +
cmp cx ax +
jz loc_100A716  +
xor ecx ecx +
cmp cx ax +
jnz loc_100A940  +
xor eax eax +
mov [esi] ax +
mov eax [ebp-21Ch] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A724  +
sub eax edx +
sar eax 1 +
inc eax  +
cmp eax [ebp+18h] +
ja loc_100A955  +
push dword ptr [ebp-21Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-238h]  +
call sub_1002CAC  +
mov ax [edi] +
mov [esi] ax +
jmp loc_100A6A5  +
movzx eax word ptr [edi] +
push 2Fh  +
pop ecx  +
cmp cx ax +
jz loc_100A779  +
push 5Ch  +
pop ecx  +
cmp cx ax +
jz loc_100A779  +
xor ecx ecx +
cmp cx ax +
jnz loc_100A940  +
xor ecx ecx +
cmp cx ax +
jz loc_100A78B  +
lea eax [esi+2] +
mov [ebp-21Ch] eax +
jmp loc_100A795  +
mov dword ptr [ebp-21Ch] offset Class +
mov ebx [ebp-23Ch] +
cmp ebx edx +
jz loc_100A936  +
push ebx  +
push offset aU  +
push dword ptr [ebp-22Ch]  +
xor eax eax +
mov [esi] ax +
call ds:swscanf  +
mov cx [edi] +
add esp 0Ch +
mov [esi] cx +
test eax eax +
jz loc_100A7D0  +
cmp eax 0FFFFFFFFh +
jnz loc_100A936  +
and dword ptr [ebx] 0 +
jmp loc_100A936  +
movzx eax word ptr [edi] +
push 5Bh  +
pop ecx  +
cmp cx ax +
jnz loc_100A7F2  +
mov dword ptr [ebp-224h] 1 +
jmp loc_100A940  +
push 5Dh  +
pop ecx  +
cmp cx ax +
jnz loc_100A805  +
mov [ebp-224h] edx +
jmp loc_100A940  +
push 3Ah  +
pop ecx  +
cmp cx ax +
jnz loc_100A82A  +
cmp [ebp-224h] edx +
jnz loc_100A82A  +
lea eax [esi+2] +
mov [ebp-22Ch] eax +
mov dword ptr [ebp-220h] 4 +
jmp loc_100A86B  +
push 2Fh  +
pop ecx  +
cmp cx ax +
jz loc_100A845  +
push 5Ch  +
pop ecx  +
cmp cx ax +
jz loc_100A845  +
xor ecx ecx +
cmp cx ax +
jnz loc_100A940  +
xor ecx ecx +
cmp cx ax +
jz loc_100A857  +
lea eax [esi+2] +
mov [ebp-21Ch] eax +
jmp loc_100A861  +
mov dword ptr [ebp-21Ch] offset Class +
mov dword ptr [ebp-220h] 5 +
xor eax eax +
mov [esi] ax +
mov eax [ebp-228h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A879  +
sub eax edx +
sar eax 1 +
inc eax  +
cmp eax [ebp+10h] +
ja loc_100A955  +
push dword ptr [ebp-228h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-240h]  +
call sub_1002CAC  +
mov ax [edi] +
mov [esi] ax +
jmp loc_100A940  +
push 2Fh  +
pop eax  +
cmp ax [edi] +
jnz loc_100A8E2  +
push 7  +
push ecx  +
push offset aFile  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_100A8E2  +
lea eax [esi+2] +
mov [ebp-228h] eax +
mov dword ptr [ebp-220h] 3 +
jmp loc_100A940  +
lea eax [esi+2] +
jmp loc_100A930  +
push 2Fh  +
pop eax  +
cmp ax [edi] +
jnz loc_100A8FB  +
mov dword ptr [ebp-220h] 2 +
jmp loc_100A940  +
mov [ebp-21Ch] esi +
jmp loc_100A936  +
movzx eax word ptr [edi] +
push 3Ah  +
pop ecx  +
cmp cx ax +
jnz loc_100A91A  +
mov dword ptr [ebp-220h] 1 +
jmp loc_100A940  +
push 2Fh  +
pop ecx  +
cmp cx ax +
jz loc_100A92A  +
push 5Ch  +
pop ecx  +
cmp cx ax +
jnz loc_100A940  +
mov eax [ebp-218h] +
mov [ebp-21Ch] eax +
mov dword ptr [ebp-220h] 5 +
inc edi  +
inc edi  +
inc esi  +
inc esi  +
cmp edi [ebp-234h] +
jb loc_100A6BD  +
jmp loc_100A6A5  +
mov esi 8007007Ah +
jmp loc_100A629  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 128h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor ebx ebx +
push ebx  +
push offset SubKey  +
push 80000001h  +
mov dword ptr [ebp+Data] ebx +
mov [ebp+hKey] ebx +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jz loc_100A9BD  +
jle loc_100A9B6  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_100AA53  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
cmp eax ebx +
jz loc_100AA40  +
jle loc_100A9FE  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_100AA53  +
xor eax eax +
inc eax  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
ja loc_100AA36  +
jnz loc_100AA53  +
cmp [ebp+VersionInformation.dwMinorVersion] eax +
jb loc_100AA53  +
mov dword ptr [ebp+Data] eax +
xor esi esi +
jmp loc_100AA53  +
mov esi [ebp+Type] +
sub esi 4 +
neg esi  +
sbb esi esi +
and esi 8000FFFFh +
cmp [ebp+hKey] ebx +
jz loc_100AA67  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp esi ebx +
jge loc_100AA71  +
mov dword ptr [ebp+Data] ebx +
mov ecx [ebp+var_4] +
xor eax eax +
cmp dword ptr [ebp+Data] ebx +
pop esi  +
setnz al  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
inc eax  +
push eax  +
call sub_10029F0  +
test eax eax +
jge loc_100AAA9  +
mov eax [esi] +
jmp loc_100AAC5  +
mov eax [esi+4] +
mov ecx [esi+0Ch] +
mov dx [ebp+arg_0] +
mov [ecx+eax*2] dx +
mov eax [esi+4] +
inc eax  +
push eax  +
mov ecx esi +
call sub_10029BC  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
xor edx edx +
mov [eax+4] edx +
mov [eax] edx +
mov ecx [ebp+arg_0] +
mov esi offset asc_1001E90 +
lea edi [ebp+var_C] +
movs   +
movs   +
mov esi offset asc_1001E84 +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
mov esi offset aRealm +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
mov [ebp+var_28] ecx +
mov [ebp+var_34] eax +
mov edi ecx +
mov [ebp+var_30] edx +
mov [ebp+var_2C] edx +
push offset asc_1001E70  +
push edi  +
call ds:wcscspn  +
lea ebx [edi+eax*2] +
movzx eax word ptr [ebx] +
pop ecx  +
pop ecx  +
xor ecx ecx +
cmp cx ax +
jz loc_100AB58  +
push 22h  +
pop ecx  +
cmp cx ax +
jnz loc_100AB6D  +
cmp ebx [ebp+var_28] +
jbe loc_100AB60  +
push 5Ch  +
pop eax  +
cmp ax [ebx-2] +
jnz loc_100AB60  +
cmp [ebp+var_2C] 0 +
jnz loc_100ABD2  +
xor eax eax +
inc eax  +
jmp loc_100AC8B  +
xor eax eax +
cmp [ebp+var_2C] eax +
setz al  +
mov [ebp+var_2C] eax +
jmp loc_100ABD2  +
cmp [ebp+var_2C] 0 +
jnz loc_100ABD2  +
lea esi [ebx-2] +
jmp loc_100AB8E  +
movzx eax word ptr [esi] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100AB93  +
dec esi  +
dec esi  +
cmp esi [ebp+var_28] +
jnb loc_100AB78  +
lea eax [esi-8] +
cmp eax edi +
jb loc_100ABD2  +
add esi 0FFFFFFF8h +
cmp esi [ebp+var_28] +
jz loc_100ABB7  +
movzx eax word ptr [esi-2] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100ABD2  +
push 5  +
lea eax [ebp+var_24] +
push eax  +
push esi  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100ABD2  +
mov [ebp+var_30] 1 +
cmp [ebp+var_30] 0 +
lea edi [ebx+2] +
jz loc_100AB21  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
call ds:wcsspn  +
pop ecx  +
pop ecx  +
lea ebx [edi+eax*2] +
push 22h  +
pop eax  +
cmp ax [ebx] +
jnz loc_100AB58  +
inc ebx  +
inc ebx  +
and [ebp+var_28] 0 +
movzx esi word ptr [ebx] +
mov edi ebx +
jmp loc_100AC67  +
cmp [ebp+var_28] 0 +
push esi  +
jz loc_100AC24  +
call ds:iswascii  +
pop ecx  +
test eax eax +
jz loc_100AB58  +
and [ebp+var_28] 0 +
jmp loc_100AC62  +
call ds:iswcntrl  +
pop ecx  +
test eax eax +
jz loc_100AC4B  +
push 9  +
pop eax  +
cmp ax si +
jz loc_100AC4B  +
push 0Dh  +
pop eax  +
cmp ax si +
jz loc_100AC4B  +
push 0Ah  +
pop eax  +
cmp ax si +
jnz loc_100AB58  +
push 22h  +
pop eax  +
cmp ax si +
jz loc_100AC73  +
push 5Ch  +
pop eax  +
cmp ax si +
jnz loc_100AC62  +
mov [ebp+var_28] 1 +
inc edi  +
inc edi  +
movzx esi word ptr [edi] +
xor eax eax +
cmp ax si +
jnz loc_100AC08  +
jmp loc_100AB58  +
mov esi [ebp+var_34] +
sub edi ebx +
sar edi 1 +
push edi  +
push ebx  +
mov ecx esi +
call sub_10033F0  +
mov eax [esi] +
test eax eax +
jl loc_100AC8B  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+lpWideCharStr]  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
lea eax [esi+10h] +
mov [esi+0Ch] eax +
mov dword ptr [esi+8] 80h +
call sub_10031FE  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 13Ch +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_10] +
push ebx  +
xor ebx ebx +
mov [ebp+hRequest] eax +
mov eax [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_134] eax +
mov [esi+4] ebx +
mov [esi] ebx +
mov [eax] ebx +
xor eax eax +
cmp [ebp+arg_4] ebx +
push edi  +
setnz al  +
lea edx [ebp+var_104] +
mov edi 80h +
mov [ebp+var_138] ecx +
mov [ebp+var_118] ebx +
mov [ebp+var_114] ebx +
mov [ebp+var_108] edx +
add eax 28h +
mov [ebp+var_10C] edi +
mov [ebp+var_110] ebx +
mov [ecx] ebx +
mov [ebp+var_124] ebx +
mov [ebp+var_11C] 100h +
mov [ebp+dwInfoLevel] eax +
mov [ebp+dwIndex] ebx +
call sub_100A964  +
mov [ebp+var_130] eax +
push edi  +
jmp loc_100AEA5  +
mov edi [ebp+var_11C] +
mov eax edi +
shr eax 1 +
push eax  +
lea ecx [ebp+var_114] +
call sub_10029BC  +
lea eax [ebp+dwIndex] +
push eax  +
lea eax [ebp+dwBufferLength] +
mov [ebp+dwBufferLength] edi +
mov edi [ebp+dwIndex] +
push eax  +
lea ecx [ebp+var_114] +
call sub_100338B  +
push eax  +
push [ebp+dwInfoLevel]  +
push [ebp+hRequest]  +
call ds:HttpQueryInfoW  +
test eax eax +
jz loc_100AE85  +
mov eax [ebp+dwBufferLength] +
shr eax 1 +
push eax  +
lea ecx [ebp+var_114] +
call sub_10029BC  +
push 6  +
push offset aBasic  +
lea ecx [ebp+var_114] +
call sub_100338B  +
push eax  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100AE0C  +
mov eax [ebp+var_138] +
mov dword ptr [eax] 1 +
cmp [ebp+var_130] ebx +
jnz loc_100AE31  +
push offset aNegotiate  +
lea ecx [ebp+var_114] +
call sub_100338B  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100AE9C  +
mov ecx esi +
mov [ebp+var_124] 1 +
call sub_1002F84  +
test eax eax +
jz loc_100AE9C  +
push 20h  +
lea ecx [ebp+var_114] +
call sub_100338B  +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_100AE9C  +
push esi  +
add eax 2 +
push eax  +
call sub_100AACF  +
cmp eax ebx +
mov [ebp+var_118] eax +
jl loc_100AEDE  +
xor ecx ecx +
cmp eax ebx +
mov eax [ebp+var_134] +
setz cl  +
mov [eax] ecx +
jmp loc_100AE9C  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_100AEC4  +
shl [ebp+var_11C] 1 +
mov [ebp+dwIndex] edi +
mov eax [ebp+var_11C] +
shr eax 1 +
push eax  +
lea ecx [ebp+var_114] +
call sub_100A443  +
test eax eax +
jnz loc_100AD76  +
mov eax [ebp+var_114] +
mov [ebp+var_118] eax +
cmp [ebp+var_118] ebx +
jl loc_100AEDE  +
cmp [ebp+var_124] ebx +
jnz loc_100AEDE  +
mov [ebp+var_118] 80070005h +
lea ecx [ebp+var_114] +
call sub_1002970  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_118] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 14h  +
***
call __EH_prolog3_GS  +
mov eax [ebp+0Ch] +
mov ebx [ebp+8] +
mov edi [ebp+10h] +
mov [ebp-13Ch] eax +
xor ecx ecx +
mov eax 3F4h +
lea edx [ebp-90h] +
mov [ebp-138h] eax +
mov [ebp-0A0h] ecx +
mov [ebp-94h] edx +
mov dword ptr [ebp-98h] 80h +
mov [ebp-9Ch] ecx +
mov [ebp-4] ecx +
push eax  +
lea ecx [ebp-0A0h] +
call sub_100A413  +
test eax eax +
jnz loc_100AF76  +
mov eax [ebp-0A0h] +
mov [ebp-134h] eax +
jmp loc_100B0ED  +
push dword ptr [ebp-138h]  +
lea ecx [ebp-0A0h] +
call sub_1002AA2  +
lea ecx [ebp-0A0h] +
call sub_10033A8  +
mov esi eax +
lea eax [ebp-138h] +
push eax  +
push esi  +
push 26h  +
push ebx  +
call ds:InternetQueryOptionA  +
test eax eax +
jnz loc_100AFBF  +
call ds:GetLastError  +
test eax eax +
jle loc_100AF6B  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100AF6B  +
cmp dword ptr [esi] 3 +
jnz loc_100B0E3  +
mov ebx [esi+4] +
test ebx ebx +
jz loc_100B0E3  +
and dword ptr [ebp-134h] 0 +
push 0FFFFFFFFh  +
push dword ptr [ebp-13Ch]  +
lea ecx [ebp-130h] +
call sub_100ACA1  +
push 3Dh  +
lea ecx [ebp-130h] +
mov byte ptr [ebp-4] 1 +
call sub_100A3D5  +
mov eax [ebp-130h] +
lea ecx [ebp-130h] +
test eax eax +
jge loc_100B01E  +
mov [ebp-134h] eax +
call sub_1002970  +
jmp loc_100B0ED  +
call sub_10033A8  +
push eax  +
push ebx  +
call sub_100B2E6  +
mov esi eax +
xor eax eax +
pop ecx  +
pop ecx  +
cmp esi eax +
jnz loc_100B066  +
mov esi ds:strchr +
push 3Dh  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B054  +
push 20h  +
push ebx  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B054  +
mov esi ebx +
jmp loc_100B085  +
mov dword ptr [ebp-134h] 80004005h +
lea ecx [ebp-130h] +
jmp loc_100B014  +
cmp [ebp-130h] eax +
jl loc_100B074  +
mov eax [ebp-12Ch] +
add esi eax +
push 20h  +
push esi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B095  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B08A  +
sub eax edx +
add eax esi +
and dword ptr [edi+4] 0 +
and dword ptr [edi] 0 +
push 8  +
sub eax esi +
push offset aHttps_0  +
push esi  +
mov ebx eax +
call ds:_strnicmp  +
add esp 0Ch +
mov ecx edi +
test eax eax +
jnz loc_100B0CB  +
push 0FFFFFFFFh  +
push offset aHttp_1  +
call sub_10033F0  +
add ebx 0FFFFFFF8h +
add esi 8 +
mov ecx edi +
push ebx  +
push esi  +
call sub_100340B  +
mov edi [edi] +
test edi edi +
jge loc_100B05E  +
mov [ebp-134h] edi +
jmp loc_100B05E  +
mov dword ptr [ebp-134h] 80004005h +
lea ecx [ebp-0A0h] +
call sub_1002970  +
mov eax [ebp-134h] +
call sub_100836C  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 124h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpWideCharStr] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
push 0FFFFFFFFh  +
push eax  +
lea ecx [ebp+var_124] +
xor ebx ebx +
call sub_100ACA1  +
push 0FFFFFFFFh  +
push esi  +
lea ecx [ebp+var_94] +
call sub_100ACA1  +
cmp [ebp+var_124] ebx +
mov esi 80h +
jl loc_100B173  +
cmp [ebp+var_120] esi +
jle loc_100B16B  +
push esi  +
lea ecx [ebp+var_124] +
call sub_1002AA2  +
cmp [ebp+var_124] ebx +
jge loc_100B17E  +
mov ebx [ebp+var_124] +
jmp loc_100B269  +
cmp [ebp+var_94] ebx +
jl loc_100B19A  +
cmp [ebp+var_90] esi +
jle loc_100B19A  +
push esi  +
lea ecx [ebp+var_94] +
call sub_1002AA2  +
xor eax eax +
cmp [ebp+var_94] eax +
jge loc_100B1AF  +
mov ebx [ebp+var_94] +
jmp loc_100B269  +
cmp [ebp+arg_C] eax +
jz loc_100B201  +
cmp [ebp+var_124] eax +
jl loc_100B1C2  +
mov eax [ebp+var_120] +
inc eax  +
push eax  +
lea ecx [ebp+var_124] +
call sub_10033A8  +
mov esi ds:InternetSetOptionA +
push eax  +
push 2Bh  +
push edi  +
call esi  +
test eax eax +
jz loc_100B253  +
xor eax eax +
cmp [ebp+var_94] eax +
jl loc_100B1EF  +
mov eax [ebp+var_90] +
inc eax  +
push eax  +
lea ecx [ebp+var_94] +
call sub_10033A8  +
push eax  +
push 2Ch  +
jmp loc_100B24C  +
cmp [ebp+var_124] eax +
jl loc_100B20F  +
mov eax [ebp+var_120] +
inc eax  +
push eax  +
lea ecx [ebp+var_124] +
call sub_10033A8  +
mov esi ds:InternetSetOptionA +
push eax  +
push 1Ch  +
push edi  +
call esi  +
test eax eax +
jz loc_100B253  +
xor eax eax +
cmp [ebp+var_94] eax +
jl loc_100B23C  +
mov eax [ebp+var_90] +
inc eax  +
push eax  +
lea ecx [ebp+var_94] +
call sub_10033A8  +
push eax  +
push 1Dh  +
push edi  +
call esi  +
test eax eax +
jnz loc_100B269  +
call ds:GetLastError  +
test eax eax +
jle loc_100B267  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
xor esi esi +
cmp [ebp+var_124] esi +
jl loc_100B279  +
mov esi [ebp+var_120] +
lea ecx [ebp+var_124] +
call sub_10033A8  +
test esi esi +
jz loc_100B28F  +
mov byte ptr [eax] 0 +
inc eax  +
dec esi  +
jnz loc_100B288  +
cmp [ebp+var_94] 0 +
jge loc_100B29C  +
xor esi esi +
jmp loc_100B2A2  +
mov esi [ebp+var_90] +
lea ecx [ebp+var_94] +
call sub_10033A8  +
test esi esi +
jz loc_100B2B8  +
mov byte ptr [eax] 0 +
inc eax  +
dec esi  +
jnz loc_100B2B1  +
lea ecx [ebp+var_94] +
call sub_1002970  +
lea ecx [ebp+var_124] +
call sub_1002970  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
cmp byte ptr [ebx] 0 +
mov [ebp+arg_0] eax +
jz loc_100B362  +
mov cl [eax] +
push esi  +
push edi  +
test cl cl +
jz loc_100B35E  +
sub eax ebx +
mov edi eax +
mov esi ebx +
test cl cl +
jz loc_100B34C  +
mov al [esi] +
test al al +
jz loc_100B34C  +
mov cl [edi+esi] +
cmp cl al +
jz loc_100B345  +
cmp cl 41h +
jl loc_100B32B  +
cmp cl 5Ah +
jg loc_100B32B  +
movsx edx cl +
add edx 20h +
jmp loc_100B32E  +
movsx edx cl +
cmp al 41h +
jl loc_100B33E  +
cmp al 5Ah +
jg loc_100B33E  +
movsx ecx al +
add ecx 20h +
jmp loc_100B341  +
movsx ecx al +
cmp edx ecx +
jnz loc_100B34C  +
inc esi  +
cmp byte ptr [edi+esi] 0 +
jnz loc_100B30C  +
cmp byte ptr [esi] 0 +
jz loc_100B365  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
mov cl [eax] +
inc edi  +
test cl cl +
jnz loc_100B306  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
jmp loc_100B360  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:wcsncmp  +
add esp 0Ch +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_wcsnicmp  +
add esp 0Ch +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ecx+8] +
cmp eax ecx +
jnb loc_100B3CC  +
xor eax eax +
jmp loc_100B3ED  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_100B3C8  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] 54525341h +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+3Ch] +
test eax eax +
jz loc_100B40C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+3Ch] 0 +
mov eax [esi+40h] +
test eax eax +
jz loc_100B41D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+40h] 0 +
mov eax [esi+44h] +
test eax eax +
jz loc_100B42F  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi+44h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100B459  +
cmp dword ptr [esi+0Ch] 1 +
push eax  +
jnz loc_100B450  +
call ds:LocalFree  +
jmp loc_100B456  +
call ??3@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call sub_100D33D  +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100B49D  +
push eax  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
sub esp 0Ch +
test eax eax +
jnz loc_100B4B9  +
mov eax 80004005h +
jmp locret_100B507  +
and dword ptr [ebp+Data] 0 +
and [ebp+Type] 0 +
lea ecx [ebp+cbData] +
push ecx  +
lea ecx [ebp+Data] +
push ecx  +
lea ecx [ebp+Type] +
push ecx  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jle loc_100B4F0  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl locret_100B507  +
cmp [ebp+Type] 4 +
jz loc_100B4FF  +
mov eax 0C00D002Fh +
jmp locret_100B507  +
mov ecx [ebp+arg_4] +
mov edx dword ptr [ebp+Data] +
mov [ecx] edx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jnz loc_100B522  +
mov eax 80004005h +
jmp loc_100B544  +
push 4  +
lea ecx [ebp+Data] +
push ecx  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegSetValueExW  +
test eax eax +
jle loc_100B544  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jnz loc_100B55F  +
mov eax 80004005h +
jmp loc_100B581  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push 3  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegSetValueExW  +
test eax eax +
jle loc_100B581  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 360h +
lea edx [ecx+4] +
push esi  +
mov esi [edx+4] +
mov [eax+4] esi +
mov [eax] edx +
mov [esi] eax +
mov [edx+4] eax +
inc dword ptr [ecx]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
lea edi [ecx+4] +
mov ebx esi +
sub ebx edi +
neg ebx  +
sbb ebx ebx +
and ebx esi +
mov [edx] ebx +
dec dword ptr [ecx]  +
mov ecx [eax] +
mov edx [eax+4] +
pop edi  +
pop esi  +
mov [edx] ecx +
mov [ecx+4] edx +
add eax 0FFFFFCA0h +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx] +
push esi  +
mov esi [eax] +
push edi  +
add ecx 4 +
mov edi esi +
sub edi ecx +
neg edi  +
sbb edi edi +
and edi esi +
mov [edx] edi +
pop edi  +
add eax 0FFFFFCA0h +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
cmp dword_1016550 eax +
jz loc_100B639  +
push eax  +
push 0FFFFFFFFh  +
push eax  +
push 1  +
push ecx  +
push dword_1016544  +
call sub_10091E0  +
retn   +
push ecx  +
call ds:EnterCriticalSection  +
xor eax eax +
retn   +
***
cmp dword_1016550 0 +
jz loc_100B662  +
push 0  +
push 1  +
push ecx  +
push dword_1016544  +
call sub_100A040  +
retn   +
push ecx  +
call ds:LeaveCriticalSection  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100B682  +
xor eax eax +
jmp loc_100B6A1  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_100B690  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_100B69C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
and dword ptr [ecx+1Ch] 0 +
or dword ptr [ecx+20h] 0FFFFFFFFh +
and dword ptr [ecx+24h] 0 +
push edi  +
xor eax eax +
mov dword ptr [ecx] offset off_1001F34 +
lea edi [ecx+8] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax ecx +
pop edi  +
retn   +
***
mov dword ptr [ecx] offset off_1001F34 +
mov ecx [ecx+1Ch] +
test ecx ecx +
jz locret_100B6E4  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B6D1  +
test byte ptr [ebp+8] 1 +
jz loc_100B704  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+8] +
mov dword ptr [esi] offset off_1001F3C +
mov dword ptr [edi] offset off_1001F38 +
call sub_100B3F6  +
mov eax [esi+30h] +
test eax eax +
jz loc_100B73B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+30h] 0 +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_100B6D1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 48h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
lea eax [esi+48h] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_100B78A  +
test esi esi +
jz loc_100B788  +
lea ecx [esi+8] +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF8h +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov eax [ecx+24h] +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
lea esi [ecx+44h] +
xor edi edi +
cmp [esi] edi +
jnz loc_100B832  +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:CreateEventW  +
mov ebx eax +
cmp ebx edi +
jnz loc_100B81E  +
call ds:GetLastError  +
cmp eax edi +
jle loc_100B834  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100B834  +
push edi  +
push ebx  +
push esi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_100B832  +
push ebx  +
call ds:CloseHandle  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B710  +
test byte ptr [ebp+8] 1 +
jz loc_100B856  +
push esi  +
call sub_100B7BC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+114h] +
call sub_100B436  +
lea ecx [esi+4] +
pop esi  +
jmp sub_1002970  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_100B8B6  +
push 40h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100B89F  +
mov ecx eax +
call sub_1002BEA  +
jmp loc_100B8A1  +
xor eax eax +
mov [esi] eax +
test eax eax +
jnz loc_100B8A9  +
pop esi  +
retn   +
call sub_100D33D  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi [esi+104h] +
jle loc_100B8EC  +
call sub_100294D  +
cmp edi 0FFFFFFFFh +
ja loc_100B8E6  +
push edi  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
mov [esi+104h] edi +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_100338B  +
mov edi [ebp+arg_0] +
test eax eax +
jnz loc_100B917  +
test edi edi +
jnz loc_100B917  +
xor eax eax +
inc eax  +
jmp loc_100B95C  +
cmp dword ptr [esi] 0 +
jge loc_100B920  +
xor eax eax +
jmp loc_100B923  +
mov eax [esi+4] +
cmp eax [ebp+arg_4] +
jnz loc_100B95A  +
mov ecx esi +
call sub_100338B  +
test eax eax +
jz loc_100B95A  +
test edi edi +
jz loc_100B95A  +
push [ebp+arg_4]  +
mov ecx esi +
push edi  +
call sub_100338B  +
cmp [ebp+arg_8] 0 +
push eax  +
jz loc_100B953  +
call sub_100B394  +
movzx eax al +
jmp loc_100B95C  +
call sub_100B36F  +
jmp loc_100B94E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
and dword ptr [esi] 0 +
mov ecx [eax+4] +
test ecx ecx +
jz loc_100B98B  +
push ecx  +
push dword ptr [eax+0Ch]  +
mov ecx esi +
call sub_1002B81  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B7E9  +
test eax eax +
jge loc_100B9AD  +
or eax 0FFFFFFFFh +
jmp loc_100B9B9  +
push dword ptr [ebp+8]  +
push dword ptr [esi+44h]  +
call ds:WaitForSingleObject  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1001F5C +
call sub_10030D3  +
xor ecx ecx +
lea eax [esi+114h] +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [esi+124h] ecx +
mov [esi+128h] ecx +
mov [esi+12Ch] ecx +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 12Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ecx+124h] eax +
pop ebp  +
retn 4  +
***
mov eax [ecx+124h] +
retn   +
***
mov eax [ecx+128h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B862  +
test [ebp+arg_0] 1 +
jz loc_100BA6A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100B9C3  +
xor eax eax +
lea ecx [esi+140h] +
mov dword ptr [esi] offset off_1001F84 +
mov [esi+130h] eax +
mov dword ptr [esi+134h] 1 +
mov [esi+138h] eax +
mov [esi+13Ch] eax +
call sub_10030D3  +
lea ecx [esi+250h] +
call sub_10030D3  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_10021D0 +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jnz loc_100BAE9  +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
xor eax eax +
jmp loc_100BAF4  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10030D3  +
mov eax [ebp+arg_0] +
push 3Ch  +
mov [esi+14Ch] eax +
lea eax [esi+110h] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
xor ebx ebx +
mov eax [ebp+arg_0] +
mov eax [eax] +
cmp eax ebx +
jz loc_100BC65  +
mov ecx [ebp+arg_C] +
cmp ecx ebx +
jz loc_100BB57  +
mov [ecx] eax +
mov ecx [ebp+var_8] +
push [ebp+arg_0]  +
add ecx 4 +
call sub_100B5EF  +
lea esi [eax+140h] +
cmp [esi] ebx +
mov [ebp+var_4] eax +
jge loc_100BB76  +
xor ecx ecx +
jmp loc_100BB79  +
mov ecx [esi+4] +
mov edi [ebp+arg_4] +
cmp [edi] ebx +
jge loc_100BB84  +
xor eax eax +
jmp loc_100BB87  +
mov eax [edi+4] +
cmp ecx eax +
jnz loc_100BBF6  +
mov ecx esi +
call sub_100338B  +
test eax eax +
jnz loc_100BBA1  +
mov ecx edi +
call sub_100338B  +
test eax eax +
jz loc_100BC06  +
mov ecx esi +
call sub_100338B  +
test eax eax +
jz loc_100BBF6  +
mov ecx edi +
call sub_100338B  +
test eax eax +
jz loc_100BBF6  +
mov ecx edi +
call sub_100338B  +
mov ecx esi +
mov edi eax +
call sub_100338B  +
mov cx [eax] +
cmp cx [edi] +
jnz loc_100BBED  +
cmp cx bx +
jz loc_100BBE9  +
mov cx [eax+2] +
cmp cx [edi+2] +
jnz loc_100BBED  +
add eax 4 +
add edi 4 +
cmp cx bx +
jnz loc_100BBC7  +
xor eax eax +
jmp loc_100BBF2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_100BC06  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+var_4] ebx +
cmp eax ebx +
jnz loc_100BB4E  +
mov esi [ebp+var_4] +
cmp esi ebx +
jz loc_100BC65  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_100BC5C  +
cmp [eax] ebx +
jge loc_100BC1C  +
xor edx edx +
jmp loc_100BC1F  +
mov edx [eax+4] +
lea ecx [esi+250h] +
cmp [ecx] ebx +
jge loc_100BC2D  +
xor eax eax +
jmp loc_100BC30  +
mov eax [ecx+4] +
cmp edx eax +
jl loc_100BB41  +
cmp [ecx] ebx +
jge loc_100BC40  +
xor eax eax +
jmp loc_100BC43  +
mov eax [ecx+4] +
push 1  +
push eax  +
call sub_100338B  +
mov ecx [ebp+arg_8] +
push eax  +
call sub_100B8F9  +
test eax eax +
jz loc_100BB41  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
xor eax eax +
jmp loc_100BC5E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_100338B  +
push eax  +
push 80000001h  +
call ds:RegDeleteKeyW  +
test eax eax +
jle loc_100BC95  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B488  +
mov ecx [ebp+arg_0] +
push esi  +
push 20019h  +
push 0  +
call sub_100338B  +
push eax  +
push 80000001h  +
call ds:RegOpenKeyExW  +
pop esi  +
test eax eax +
jle loc_100BCD6  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
call sub_100B488  +
mov ecx [ebp+arg_0] +
xor esi esi +
push esi  +
push edi  +
push esi  +
push 0F003Fh  +
push esi  +
push esi  +
push esi  +
call sub_100338B  +
push eax  +
push 80000001h  +
call ds:RegCreateKeyExW  +
pop edi  +
cmp eax esi +
pop esi  +
jle loc_100BD1E  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
push ebx  +
xor ebx ebx +
mov [ebp+var_8] ecx +
cmp eax ebx +
jnz loc_100BD44  +
mov eax 80004005h +
jmp loc_100BDC7  +
push esi  +
mov esi ds:RegQueryValueExW +
push edi  +
mov edi [ebp+lpcbData] +
push edi  +
push ebx  +
lea ecx [ebp+Type] +
push ecx  +
push ebx  +
push [ebp+lpValueName]  +
mov [ebp+Type] ebx +
push eax  +
call esi  +
cmp eax ebx +
jle loc_100BD6F  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jl loc_100BDC5  +
cmp [ebp+Type] 3 +
jz loc_100BD7E  +
mov eax 0C00D002Fh +
jmp loc_100BDC5  +
mov ebx [ebp+arg_4] +
push dword ptr [edi]  +
mov ecx ebx +
call sub_100B8BF  +
mov eax [ebx] +
test eax eax +
jnz loc_100BD97  +
mov eax 8007000Eh +
jmp loc_100BDC5  +
push dword ptr [edi]  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push edi  +
push dword ptr [ebx]  +
lea eax [ebp+Type] +
push eax  +
mov eax [ebp+var_8] +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [eax]  +
call esi  +
test eax eax +
jle loc_100BDC5  +
and eax 0FFFFh +
or eax 80070000h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx] +
test esi esi +
jnz loc_100BDE4  +
mov eax 80004005h +
jmp loc_100BE1A  +
mov ecx [ebp+arg_4] +
cmp dword ptr [ecx] 0 +
jge loc_100BDF0  +
xor eax eax +
jmp loc_100BDF3  +
mov eax [ecx+4] +
lea eax [eax+eax+2] +
push eax  +
call sub_100338B  +
push eax  +
push 1  +
push 0  +
push [ebp+lpValueName]  +
push esi  +
call ds:RegSetValueExW  +
test eax eax +
jle loc_100BE1A  +
and eax 0FFFFh +
or eax 80070000h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+4] +
mov dword ptr [esi+104h] 100h +
mov [esi] eax +
call sub_100B8BF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
lea eax [esi+12Ch] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_100BE78  +
test esi esi +
jz loc_100BE76  +
push 1  +
mov ecx esi +
call sub_100BA50  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_100BF17  +
push ebx  +
push esi  +
movzx esi word ptr [ecx] +
push edi  +
xor ebx ebx +
xor edi edi +
xor edx edx +
cmp bx si +
jz loc_100BEC1  +
movzx esi si +
push 3Fh  +
pop ebx  +
cmp bx si +
jz loc_100BEC1  +
push 3Bh  +
pop ebx  +
cmp bx si +
jz loc_100BEC1  +
inc edx  +
movzx esi word ptr [ecx+edx*2] +
xor ebx ebx +
cmp bx si +
jnz loc_100BEA5  +
lea esi [ecx+edx*2] +
lea edx [esi-2] +
jmp loc_100BED3  +
push 2Fh  +
pop ebx  +
cmp bx [edx] +
jz loc_100BED9  +
dec edx  +
dec edx  +
cmp edx ecx +
jnb loc_100BEC9  +
jmp loc_100BF14  +
mov eax ecx +
cmp ecx esi +
jnb loc_100BEF1  +
push 2Fh  +
pop ebx  +
cmp bx [eax] +
jz loc_100BEEF  +
inc eax  +
inc eax  +
cmp eax esi +
jb loc_100BEDF  +
jmp loc_100BEF1  +
mov edi eax +
add edi 2 +
cmp edi edx +
jnz loc_100BF0D  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100BEFD  +
sub eax esi +
sar eax 1 +
jmp loc_100BF14  +
sub edx ecx +
sar edx 1 +
inc edx  +
mov eax edx +
pop edi  +
pop esi  +
pop ebx  +
push eax  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_10033F0  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 368h  +
mov ebx ecx +
mov [ebp+var_4] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_100BF54  +
mov ecx eax +
call sub_100BA76  +
jmp loc_100BF56  +
xor eax eax +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_100B671  +
mov esi [ebp+var_4] +
cmp esi edi +
jnz loc_100BF71  +
mov eax 8007000Eh +
jmp loc_100C016  +
mov ecx [ebp+arg_0] +
cmp [ecx] edi +
jge loc_100BF7C  +
xor eax eax +
jmp loc_100BF7F  +
mov eax [ecx+4] +
push eax  +
call sub_100338B  +
push eax  +
lea ecx [esi+140h] +
call sub_10033F0  +
mov ecx [ebp+arg_8] +
cmp [ecx] edi +
jge loc_100BF9C  +
xor eax eax +
jmp loc_100BF9F  +
mov eax [ecx+4] +
push eax  +
call sub_100338B  +
push eax  +
lea ecx [esi+4] +
call sub_10033F0  +
mov ecx [ebp+arg_4] +
cmp [ecx] edi +
jge loc_100BFB9  +
xor eax eax +
jmp loc_100BFBC  +
mov eax [ecx+4] +
push eax  +
call sub_100338B  +
push eax  +
lea ecx [esi+250h] +
call sub_10033F0  +
mov ecx [ebp+arg_C] +
cmp [ecx] edi +
jge loc_100BFD9  +
xor eax eax +
jmp loc_100BFDC  +
mov eax [ecx+4] +
add eax eax +
push eax  +
call sub_100338B  +
push eax  +
lea ecx [esi+114h] +
call sub_100DA64  +
mov eax [ebp+arg_10] +
mov [esi+124h] eax +
mov eax [ebp+arg_14] +
mov [esi+134h] eax +
mov eax [ebp+arg_18] +
push esi  +
lea ecx [ebx+4] +
mov [esi+13Ch] eax +
call sub_100B58A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push 368h  +
mov ebx ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100C048  +
mov ecx eax +
call sub_100BA76  +
jmp loc_100C04A  +
xor eax eax +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_100B671  +
mov esi [ebp+var_4] +
test esi esi +
jnz loc_100C065  +
mov eax 8007000Eh +
jmp loc_100C0FE  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0 +
jge loc_100C071  +
xor eax eax +
jmp loc_100C074  +
mov eax [ecx+4] +
push eax  +
call sub_100338B  +
push eax  +
lea ecx [esi+140h] +
call sub_10033F0  +
mov ecx [ebp+arg_8] +
cmp dword ptr [ecx] 0 +
jge loc_100C092  +
xor eax eax +
jmp loc_100C095  +
mov eax [ecx+4] +
push eax  +
call sub_100338B  +
push eax  +
lea ecx [esi+4] +
call sub_10033F0  +
mov ecx [ebp+arg_4] +
cmp dword ptr [ecx] 0 +
jge loc_100C0B0  +
xor eax eax +
jmp loc_100C0B3  +
mov eax [ecx+4] +
push eax  +
call sub_100338B  +
push eax  +
lea ecx [esi+250h] +
call sub_10033F0  +
push [ebp+arg_10]  +
mov eax [ebp+arg_C] +
push dword ptr [eax]  +
lea ecx [esi+114h] +
call sub_100DBEE  +
mov eax [ebp+arg_14] +
mov [esi+124h] eax +
mov eax [ebp+arg_18] +
mov [esi+134h] eax +
mov eax [ebp+arg_1C] +
push esi  +
lea ecx [ebx+4] +
mov [esi+13Ch] eax +
call sub_100B58A  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 15Ch +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_C] +
push 1  +
lea ecx [ebp+var_154] +
call sub_100BAFD  +
and [ebp+var_158] 0 +
cmp [ebp+arg_0] 0 +
jnz loc_100C1C0  +
test esi esi +
jz loc_100C1C0  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C14D  +
sub eax edx +
sar eax 1 +
jz loc_100C1C0  +
push esi  +
lea ecx [ebp+var_154] +
call sub_101209B  +
mov ecx edi +
test eax eax +
jl loc_100C1AE  +
push [ebp+var_3C]  +
push [ebp+var_40]  +
call sub_10033F0  +
push 0FFFFFFFFh  +
push offset asc_1001FB8  +
mov ecx edi +
call sub_10033F0  +
push [ebp+var_30]  +
mov ecx edi +
push [ebp+var_34]  +
call sub_10033F0  +
push 3Ah  +
mov ecx edi +
call sub_100AA8F  +
movzx eax [ebp+var_2C] +
push 0Ah  +
push eax  +
mov ecx edi +
call sub_10030EF  +
jmp loc_100C1B6  +
push 0FFFFFFFFh  +
push esi  +
call sub_10033F0  +
mov [ebp+var_158] 1 +
test ebx ebx +
jz loc_100C1F5  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C1C9  +
sub eax edx +
sar eax 1 +
jz loc_100C1F5  +
cmp [ebp+var_158] 0 +
jz loc_100C1EB  +
push 2Fh  +
mov ecx edi +
call sub_100AA8F  +
push 0FFFFFFFFh  +
push ebx  +
mov ecx edi +
call sub_10033F0  +
cmp [ebp+arg_0] 0 +
jz loc_100C209  +
push 0FFFFFFFFh  +
push offset dword_1001FAC  +
mov ecx edi +
call sub_100340B  +
xor esi esi +
cmp [edi] esi +
jge loc_100C212  +
push 0Eh  +
pop esi  +
lea ecx [ebp+var_154] +
call sub_1002970  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp [ecx] eax +
jl loc_100C246  +
mov eax [ecx+4] +
push eax  +
call sub_100338B  +
mov ecx [ebp+arg_8] +
push eax  +
call sub_10033F0  +
mov ecx [ebp+arg_8] +
push 5Fh  +
call sub_100AA8F  +
mov ecx [ebp+arg_8] +
push 0Ah  +
push [ebp+arg_4]  +
call sub_10030EF  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_4] +
mov eax ecx +
mov ecx [ebp+lpValueName] +
push edi  +
mov [ebp+var_120] eax +
mov eax [eax] +
xor edi edi +
mov [ebp+var_118] ecx +
mov [ebp+var_11C] edx +
cmp eax edi +
jnz loc_100C2B9  +
mov eax 80004005h +
jmp loc_100C3AD  +
push ebx  +
push esi  +
mov esi ds:RegQueryValueExW +
lea edx [ebp+cbData] +
push edx  +
push edi  +
lea edx [ebp+Type] +
push edx  +
push edi  +
push ecx  +
push eax  +
mov [ebp+cbData] edi +
mov [ebp+Type] edi +
call esi  +
cmp eax edi +
jle loc_100C2EF  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
cmp ebx edi +
jl loc_100C3A9  +
cmp [ebp+Type] 1 +
jz loc_100C30C  +
mov ebx 0C00D002Fh +
jmp loc_100C3A9  +
mov eax [ebp+cbData] +
add eax 2 +
push eax  +
lea ecx [ebp+lpData] +
call sub_100BE24  +
cmp [ebp+lpData] edi +
jnz loc_100C330  +
mov ebx 8007000Eh +
jmp loc_100C39E  +
mov eax [ebp+cbData] +
add eax 2 +
push eax  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
mov eax [ebp+var_120] +
push edi  +
push [ebp+var_118]  +
push dword ptr [eax]  +
call esi  +
cmp eax edi +
jle loc_100C37C  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
cmp ebx edi +
jl loc_100C39E  +
mov esi [ebp+var_11C] +
push 0FFFFFFFFh  +
push [ebp+lpData]  +
mov ecx esi +
mov [esi+4] edi +
mov [esi] edi +
call sub_10033F0  +
mov ebx [esi] +
lea ecx [ebp+lpData] +
call sub_100294D  +
pop esi  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10082CB  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+8] +
mov ecx edi +
call sub_100B6AB  +
mov dword ptr [edi] offset off_1001F38 +
xor edi edi +
mov dword ptr [esi] offset off_1001F3C +
mov [esi+48h] edi +
mov eax dword_10166BC +
mov [esi+30h] eax +
cmp eax edi +
jz loc_100C3F7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp+arg_0] +
mov [esi+34h] edi +
mov [esi+44h] edi +
mov [esi+3Ch] eax +
cmp eax edi +
jz loc_100C40D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp+arg_8] +
mov [esi+40h] eax +
cmp eax edi +
jz loc_100C41D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp+arg_4] +
mov [esi+24h] eax +
cmp eax edi +
jz loc_100C42C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+38h] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 124h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov [ebp+var_120] eax +
mov eax [ebp+arg_8] +
push 0FFFFFFFFh  +
xor edi edi +
mov [ebp+var_124] eax +
push offset aSoftwareMicros  +
lea eax [ebp+var_104] +
push edi  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] edi +
mov [ebp+var_108] eax +
mov [ebp+var_10C] 80h +
mov [ebp+var_110] edi +
call sub_1003264  +
mov eax [ebp+var_114] +
cmp eax edi +
mov [ebp+var_11C] eax +
lea ecx [ebp+var_114] +
jge loc_100C4CF  +
call sub_1002970  +
mov eax [ebp+var_11C] +
jmp loc_100C5BA  +
push 0FFFFFFFFh  +
push offset asc_100200C  +
push edi  +
call sub_1003264  +
mov eax [ebp+var_114] +
cmp eax edi +
mov [ebp+var_11C] eax +
lea ecx [ebp+var_114] +
jl loc_100C4BF  +
push ebx  +
call sub_100351A  +
mov ebx [ebp+var_114] +
cmp ebx edi +
jge loc_100C514  +
lea ecx [ebp+var_114] +
call sub_1002970  +
mov eax ebx +
jmp loc_100C5BA  +
lea eax [ebp+var_114] +
push eax  +
lea ecx [ebp+var_118] +
mov [ebp+var_118] edi +
call sub_100BCDF  +
mov ebx eax +
cmp ebx edi +
lea ecx [ebp+var_118] +
jge loc_100C53F  +
call sub_100B488  +
jmp loc_100C502  +
push [ebp+var_120]  +
push offset aHtap  +
call sub_100BDD1  +
mov ebx eax +
cmp ebx edi +
lea ecx [ebp+var_118] +
jl loc_100C538  +
push [ebp+var_124]  +
push offset aResu  +
call sub_100BDD1  +
mov ebx eax +
cmp ebx edi +
lea ecx [ebp+var_118] +
jl loc_100C538  +
push dword ptr [esi+8]  +
mov eax [esi] +
push eax  +
push offset aDrowssap  +
call sub_100B54D  +
mov esi eax +
cmp esi edi +
lea ecx [ebp+var_118] +
jl loc_100C5A8  +
push dword ptr [ebp+Data]  +
push offset aDoog  +
call sub_100B510  +
mov esi eax +
lea ecx [ebp+var_118] +
call sub_100B488  +
lea ecx [ebp+var_114] +
call sub_1002970  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 12Ch +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+var_12C] eax +
mov eax [ebp+arg_C] +
push esi  +
mov [ebp+var_128] eax +
mov eax [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+lpcbData] eax +
mov eax [ebp+arg_14] +
push 0FFFFFFFFh  +
xor esi esi +
mov [ebp+var_124] eax +
push offset aSoftwareMicros  +
lea eax [ebp+var_104] +
push esi  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] esi +
mov [ebp+var_108] eax +
mov [ebp+var_10C] 80h +
mov [ebp+var_110] esi +
call sub_1003264  +
mov eax [ebp+var_114] +
cmp eax esi +
mov [ebp+var_11C] eax +
lea ecx [ebp+var_114] +
jge loc_100C66F  +
call sub_1002970  +
mov eax [ebp+var_11C] +
jmp loc_100C749  +
push 0FFFFFFFFh  +
push offset asc_100200C  +
push esi  +
call sub_1003264  +
mov eax [ebp+var_114] +
cmp eax esi +
mov [ebp+var_11C] eax +
lea ecx [ebp+var_114] +
jl loc_100C65F  +
push edi  +
call sub_100351A  +
mov edi [ebp+var_114] +
cmp edi esi +
jl loc_100C73C  +
lea eax [ebp+var_114] +
push eax  +
lea ecx [ebp+var_118] +
mov [ebp+var_118] esi +
call sub_100BC9E  +
mov edi eax +
cmp edi esi +
lea ecx [ebp+var_118] +
jl loc_100C737  +
push ebx  +
push offset aHtap  +
call sub_100C277  +
mov edi eax +
cmp edi esi +
lea ecx [ebp+var_118] +
jl loc_100C737  +
push [ebp+var_12C]  +
push offset aResu  +
call sub_100C277  +
mov edi eax +
cmp edi esi +
lea ecx [ebp+var_118] +
jl loc_100C737  +
push [ebp+lpcbData]  +
push [ebp+var_128]  +
push offset aDrowssap  +
call sub_100BD27  +
mov edi eax +
cmp edi esi +
lea ecx [ebp+var_118] +
jl loc_100C737  +
push [ebp+var_124]  +
push offset aDoog  +
call sub_100B4A4  +
mov edi eax +
lea ecx [ebp+var_118] +
call sub_100B488  +
lea ecx [ebp+var_114] +
call sub_1002970  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_114] 0 +
and [ebp+var_110] 0 +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 0FFFFFFFFh  +
push offset aSoftwareMicros  +
lea eax [ebp+var_104] +
push 0  +
lea ecx [ebp+var_114] +
mov [ebp+var_108] eax +
mov [ebp+var_10C] 80h +
call sub_1003264  +
mov ebx [ebp+var_114] +
lea ecx [ebp+var_114] +
test ebx ebx +
jge loc_100C7CA  +
call sub_1002970  +
mov eax ebx +
jmp loc_100C813  +
push 0FFFFFFFFh  +
push offset asc_100200C  +
push 0  +
call sub_1003264  +
mov ebx [ebp+var_114] +
lea ecx [ebp+var_114] +
test ebx ebx +
jl loc_100C7C1  +
push edi  +
call sub_100351A  +
mov edi [ebp+var_114] +
test edi edi +
jl loc_100C806  +
lea eax [ebp+var_114] +
push eax  +
call sub_100BC6E  +
mov edi eax +
lea ecx [ebp+var_114] +
call sub_1002970  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E6Ch +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_8] +
push esi  +
push edi  +
lea eax [ebp+var_C34] +
mov [ebp+var_C38] eax +
mov eax 80h +
mov [ebp+var_C3C] eax +
mov [ebp+var_B2C] eax +
mov [ebp+var_A1C] eax +
mov [ebp+var_90C] eax +
mov [ebp+var_D4C] eax +
lea eax [ebp+var_E58] +
lea edi [ebp+var_B24] +
mov [ebp+var_B28] edi +
mov [ebp+var_E5C] eax +
xor esi esi +
lea eax [ebp+var_C44] +
push eax  +
lea edi [ebp+var_A14] +
mov [ebp+var_E68] ecx +
mov ecx [ebp+arg_4] +
mov [ebp+var_A18] edi +
push edx  +
lea edi [ebp+var_904] +
push ecx  +
push [ebp+arg_0]  +
mov [ebp+var_908] edi +
lea edi [ebp+var_D44] +
mov [ebp+var_C44] esi +
mov [ebp+var_C40] esi +
mov [ebp+var_B34] esi +
mov [ebp+var_B30] esi +
mov [ebp+var_A24] esi +
mov [ebp+var_A20] esi +
mov [ebp+var_914] esi +
mov [ebp+var_910] esi +
mov [ebp+var_D54] esi +
mov [ebp+var_D48] edi +
mov [ebp+var_D50] esi +
mov [ebp+var_D58] 100h +
call sub_100C109  +
mov edi eax +
cmp edi esi +
jge loc_100C95E  +
lea ecx [ebp+var_E5C] +
call sub_100294D  +
lea ecx [ebp+var_D54] +
call sub_1002970  +
lea ecx [ebp+var_914] +
call sub_1002970  +
lea ecx [ebp+var_A24] +
call sub_1002970  +
lea ecx [ebp+var_B34] +
call sub_1002970  +
lea ecx [ebp+var_C44] +
call sub_1002970  +
mov eax edi +
jmp loc_100CBE4  +
mov [ebp+var_E64] esi +
push ebx  +
lea eax [ebp+var_B34] +
push eax  +
push [ebp+var_E64]  +
lea eax [ebp+var_C44] +
push eax  +
mov [ebp+var_B30] esi +
mov [ebp+var_B34] esi +
call sub_100C235  +
cmp dword_1016090 3 +
jnz loc_100CA28  +
mov ecx [ebp+var_E68] +
lea eax [ebp+var_E60] +
push eax  +
lea eax [ebp+var_E6C] +
push eax  +
lea eax [ebp+var_E5C] +
push eax  +
lea eax [ebp+var_914] +
push eax  +
lea eax [ebp+var_A24] +
push eax  +
lea eax [ebp+var_B34] +
push eax  +
mov [ebp+var_A20] esi +
mov [ebp+var_A24] esi +
mov [ebp+var_910] esi +
mov [ebp+var_914] esi +
call sub_100C5D0  +
test eax eax +
jl loc_100CB8D  +
mov ecx [ebp+var_E68] +
push esi  +
push 1  +
push esi  +
push [ebp+var_E6C]  +
lea eax [ebp+var_E5C] +
push eax  +
lea eax [ebp+var_914] +
push eax  +
lea eax [ebp+var_A24] +
push eax  +
lea eax [ebp+var_C44] +
push eax  +
mov [ebp+var_E60] esi +
call sub_100C022  +
jmp loc_100CB7E  +
cmp [ebp+var_B34] esi +
jge loc_100CA34  +
xor eax eax +
jmp loc_100CA3A  +
mov eax [ebp+var_B30] +
push 400h  +
lea ecx [ebp+var_804] +
push ecx  +
push eax  +
lea ecx [ebp+var_B34] +
call sub_100338B  +
push eax  +
call sub_100D949  +
test eax eax +
jnz loc_100CB8D  +
mov edi ds:wcschr +
lea eax [ebp+var_804] +
push 3Fh  +
push eax  +
call edi  +
mov ebx eax +
pop ecx  +
pop ecx  +
cmp ebx esi +
jz loc_100CB82  +
cmp [ebx+2] si +
jz loc_100CB82  +
add ebx 4 +
push 3Fh  +
push ebx  +
call edi  +
mov edi eax +
pop ecx  +
pop ecx  +
cmp edi esi +
jz loc_100CB82  +
cmp [edi+2] si +
jz loc_100CB82  +
add edi 4 +
push 3Ah  +
push edi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_100CB82  +
cmp [eax+2] si +
jz loc_100CB82  +
xor ecx ecx +
add eax 4 +
mov [ebx-4] cx +
mov [edi-6] cx +
mov [ebp+var_E60] eax +
mov [eax-6] cx +
lea eax [ebp+var_804] +
push eax  +
call ds:_wtoi  +
pop ecx  +
push 0FFFFFFFFh  +
push ebx  +
lea ecx [ebp+var_A24] +
mov [ebp+var_A20] esi +
mov [ebp+var_A24] esi +
call sub_10033F0  +
test eax eax +
jl loc_100CB8D  +
push 0FFFFFFFFh  +
push edi  +
lea ecx [ebp+var_914] +
mov [ebp+var_910] esi +
mov [ebp+var_914] esi +
call sub_10033F0  +
test eax eax +
jl loc_100CB8D  +
push 0FFFFFFFFh  +
push [ebp+var_E60]  +
lea ecx [ebp+var_D54] +
mov [ebp+var_D50] esi +
mov [ebp+var_D54] esi +
call sub_10033F0  +
test eax eax +
jl loc_100CB8D  +
mov ecx [ebp+var_E68] +
push esi  +
push 1  +
push esi  +
lea eax [ebp+var_D54] +
push eax  +
lea eax [ebp+var_914] +
push eax  +
lea eax [ebp+var_A24] +
push eax  +
lea eax [ebp+var_C44] +
push eax  +
mov [ebp+var_E60] esi +
call sub_100BF2C  +
cmp eax esi +
jl loc_100CB8D  +
inc [ebp+var_E64]  +
jmp loc_100C965  +
lea ecx [ebp+var_E5C] +
call sub_100294D  +
lea ecx [ebp+var_D54] +
call sub_1002970  +
lea ecx [ebp+var_914] +
call sub_1002970  +
lea ecx [ebp+var_A24] +
call sub_1002970  +
lea ecx [ebp+var_B34] +
call sub_1002970  +
lea ecx [ebp+var_C44] +
call sub_1002970  +
mov eax [ebp+var_E64] +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10082CB  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 230h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ecx +
lea ecx [ebx+8] +
mov edx [ecx] +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_214] +
mov [ebp+var_218] eax +
push edi  +
xor edi edi +
mov eax edx +
sub eax ecx +
neg eax  +
push edi  +
sbb eax eax +
and eax edx +
push edi  +
mov [ebp+var_230] esi +
mov [ebp+var_224] edi +
mov [ebp+var_21C] 80h +
mov [ebp+var_220] edi +
mov [ebp+var_22C] eax +
mov [ebp+var_228] edi +
push esi  +
jmp loc_100CDA1  +
lea eax [ebp+var_224] +
push eax  +
push [ebp+var_228]  +
mov [ebp+var_220] edi +
push [ebp+var_230]  +
mov [ebp+var_224] edi +
call sub_100C235  +
cmp dword_1016090 3 +
jnz loc_100CCBB  +
push dword ptr [esi+124h]  +
lea eax [esi+114h] +
push eax  +
lea eax [esi+4] +
push eax  +
add esi 250h +
push esi  +
lea eax [ebp+var_224] +
push eax  +
mov ecx ebx +
call sub_100C442  +
jmp loc_100CD93  +
push 0Ah  +
push dword ptr [esi+124h]  +
lea eax [ebp+var_104] +
lea ecx [ebp+var_114] +
mov [ebp+var_108] eax +
mov [ebp+var_10C] 80h +
mov [ebp+var_110] edi +
mov [ebp+var_114] edi +
call sub_10030EF  +
push 0FFFFFFFFh  +
push offset a?  +
push edi  +
lea ecx [ebp+var_114] +
call sub_1003219  +
lea eax [esi+250h] +
push eax  +
lea ecx [ebp+var_114] +
call sub_100351A  +
push 0FFFFFFFFh  +
push offset a?_0  +
push edi  +
lea ecx [ebp+var_114] +
call sub_1003219  +
lea eax [esi+4] +
push eax  +
lea ecx [ebp+var_114] +
call sub_100351A  +
push 0FFFFFFFFh  +
push offset asc_1002044  +
push edi  +
lea ecx [ebp+var_114] +
call sub_1003219  +
mov eax [esi] +
lea ecx [ebp+var_114] +
push ecx  +
mov ecx esi +
call dword ptr [eax+14h]  +
cmp [ebp+var_224] edi +
jge loc_100CD64  +
xor esi esi +
jmp loc_100CD6A  +
mov esi [ebp+var_220] +
lea ecx [ebp+var_114] +
call sub_100338B  +
push eax  +
push esi  +
lea ecx [ebp+var_224] +
call sub_100338B  +
push eax  +
call sub_100D8DB  +
lea ecx [ebp+var_114] +
call sub_1002970  +
inc [ebp+var_228]  +
push edi  +
push edi  +
push [ebp+var_230]  +
lea eax [ebp+var_22C] +
push eax  +
mov ecx ebx +
call sub_100BB32  +
mov esi eax +
cmp esi edi +
jnz loc_100CC63  +
lea ecx [ebp+var_224] +
call sub_1002970  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_10082CB  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_114] 0 +
and [ebp+var_110] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
lea ecx [esi+4] +
mov edx [ecx] +
lea eax [ebp+var_104] +
mov [ebp+var_108] eax +
mov eax edx +
sub eax ecx +
neg eax  +
sbb eax eax +
and eax edx +
and [ebp+var_120] 0 +
mov [ebp+var_10C] 80h +
mov [ebp+var_11C] eax +
jmp loc_100CEC9  +
cmp [ebp+arg_4] 0 +
jnz loc_100CE67  +
lea eax [ebp+var_118] +
push eax  +
mov ecx esi +
call sub_100B5B4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_118] +
mov [ebp+var_11C] eax +
and [ebp+var_110] 0 +
and [ebp+var_114] 0 +
lea eax [ebp+var_114] +
push eax  +
push [ebp+var_120]  +
push ebx  +
call sub_100C235  +
cmp dword_1016090 3 +
jnz loc_100CEA1  +
lea eax [ebp+var_114] +
push eax  +
mov ecx edi +
call sub_100C75F  +
jmp loc_100CEC3  +
xor eax eax +
cmp [ebp+var_114] eax +
jl loc_100CEB1  +
mov eax [ebp+var_110] +
push eax  +
lea ecx [ebp+var_114] +
call sub_100338B  +
push eax  +
call sub_100D9AE  +
inc [ebp+var_120]  +
lea eax [ebp+var_118] +
push eax  +
push 0  +
push ebx  +
lea eax [ebp+var_11C] +
push eax  +
mov ecx edi +
call sub_100BB32  +
test eax eax +
jnz loc_100CE41  +
lea ecx [ebp+var_114] +
call sub_1002970  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_10082CB  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov [esi+124h] eax +
mov [esi+138h] eax +
test eax eax +
jz loc_100CF4C  +
cmp dword ptr [esi+134h] 0 +
jz loc_100CF4C  +
mov ecx offset unk_1016568 +
call sub_100B880  +
test eax eax +
jz loc_100CF4C  +
add esi 140h +
push esi  +
mov ecx eax +
call sub_100CBF9  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax esi +
push edi  +
mov edi ecx +
and eax 1 +
mov [edi+134h] eax +
jnz loc_100CF93  +
mov ecx offset unk_1016568 +
call sub_100B880  +
test eax eax +
jz loc_100CF93  +
shr esi 1 +
not esi  +
and esi 1 +
push esi  +
add edi 140h +
push edi  +
mov ecx eax +
call sub_100CDDC  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_C] +
mov [ebp+var_234] eax +
push esi  +
lea eax [ebp+var_104] +
mov [ebp+var_108] eax +
push edi  +
mov eax 80h +
mov [ebp+var_10C] eax +
mov [ebp+var_21C] eax +
lea eax [ebp+var_114] +
push eax  +
push [ebp+var_234]  +
mov esi ecx +
mov ecx [ebp+arg_4] +
xor edi edi +
push ecx  +
push [ebp+arg_0]  +
lea edx [ebp+var_214] +
mov [ebp+var_238] ecx +
mov [ebp+var_114] edi +
mov [ebp+var_110] edi +
mov [ebp+var_224] edi +
mov [ebp+var_218] edx +
mov [ebp+var_220] edi +
call sub_100C109  +
cmp eax edi +
mov [ebp+var_22C] eax +
jge loc_100D05D  +
lea ecx [ebp+var_224] +
call sub_1002970  +
lea ecx [ebp+var_114] +
call sub_1002970  +
mov eax [ebp+var_22C] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 10h  +
mov ecx [ebp+var_238] +
lea eax [ebp+var_224] +
push eax  +
call sub_100BE82  +
cmp eax edi +
jge loc_100D08F  +
mov edi eax +
lea ecx [ebp+var_224] +
call sub_1002970  +
lea ecx [ebp+var_114] +
call sub_1002970  +
mov eax edi +
jmp loc_100D04C  +
mov [ebp+var_230] edi +
lea ecx [esi+8] +
mov edx [ecx] +
mov eax edx +
sub eax ecx +
neg eax  +
sbb eax eax +
and eax edx +
mov [ebp+var_228] eax +
push edi  +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_114] +
push eax  +
lea eax [ebp+var_228] +
push eax  +
mov ecx esi +
call sub_100BB32  +
cmp eax edi +
jnz loc_100D1AB  +
cmp [ebp+var_230] edi +
jnz loc_100D14E  +
lea ecx [esi+8] +
mov edx [ecx] +
mov eax edx +
sub eax ecx +
neg eax  +
sbb eax eax +
and eax edx +
push edi  +
mov [ebp+var_228] eax +
push edi  +
lea eax [ebp+var_114] +
push eax  +
lea eax [ebp+var_228] +
push eax  +
mov ecx esi +
call sub_100BB32  +
cmp eax edi +
jnz loc_100D161  +
mov ecx dword_10166BC +
mov [ebp+var_22C] edi +
cmp ecx edi +
jz loc_100D134  +
mov eax [ecx] +
lea edx [ebp+var_22C] +
push edx  +
push offset aLoadcredential  +
call dword ptr [eax+34h]  +
test eax eax +
jnz loc_100D134  +
cmp [ebp+var_22C] edi +
jz loc_100D161  +
push [ebp+var_234]  +
mov ecx esi +
push [ebp+var_238]  +
push [ebp+arg_0]  +
call sub_100C828  +
test eax eax +
jnz loc_100D161  +
inc [ebp+var_230]  +
cmp [ebp+var_230] 2 +
jl loc_100D095  +
lea ecx [esi+8] +
mov edx [ecx] +
mov eax edx +
sub eax ecx +
neg eax  +
sbb eax eax +
and eax edx +
push edi  +
mov [ebp+var_228] eax +
push edi  +
lea eax [ebp+var_114] +
push eax  +
lea eax [ebp+var_228] +
push eax  +
mov ecx esi +
call sub_100BB32  +
cmp eax edi +
jnz loc_100D1AB  +
push 368h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_100D1B8  +
mov ecx eax +
call sub_100BA76  +
mov esi eax +
jmp loc_100D1BA  +
mov [ebx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_100D075  +
xor esi esi +
cmp esi edi +
jnz loc_100D1C8  +
mov edi 8007000Eh +
jmp loc_100D075  +
lea eax [ebp+var_114] +
push eax  +
lea ecx [esi+140h] +
mov dword ptr [esi+130h] 1 +
mov [esi+134h] edi +
call sub_100B967  +
lea eax [ebp+var_224] +
push eax  +
lea ecx [esi+250h] +
call sub_100B967  +
mov [ebx] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor edi edi +
inc edi  +
jmp loc_100D075  +
***
cmp VersionInformation.dwPlatformId 2 +
jnz loc_100D237  +
mov eax VersionInformation.dwMajorVersion +
cmp eax 4 +
jbe loc_100D22D  +
cmp VersionInformation.dwMinorVersion 0 +
ja loc_100D232  +
cmp eax 5 +
jbe loc_100D237  +
xor eax eax +
inc eax  +
jmp loc_100D239  +
xor eax eax +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
retn   +
***
cmp hModule 0 +
push ebx  +
jz loc_100D257  +
xor ebx ebx +
inc ebx  +
jmp loc_100D2D1  +
push offset aMpr_dll  +
call ds:LoadLibraryA  +
xor ebx ebx +
mov hModule eax +
test eax eax +
jz loc_100D2D1  +
push esi  +
mov esi ds:GetProcAddress +
push offset aWnetgetcachedp  +
push eax  +
inc ebx  +
call esi  +
push offset aWnetcachepassw  +
push hModule  +
mov dword_1016690 eax +
call esi  +
push offset aWnetremovecach  +
push hModule  +
mov dword_1016694 eax +
call esi  +
cmp dword_1016690 0 +
mov dword_1016698 eax +
pop esi  +
jz loc_100D2BD  +
cmp dword_1016694 0 +
jz loc_100D2BD  +
test eax eax +
jnz loc_100D2D1  +
push hModule  +
xor ebx ebx +
call ds:FreeLibrary  +
and hModule ebx +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 10h  +
pop ecx  +
mov edx offset unk_10166A0 +
mov edi offset dword_10021D0 +
mov esi edx +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jz loc_100D2FD  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
neg eax  +
push 0  +
sbb eax eax +
push 0  +
and eax edx +
push eax  +
push [ebp+arg_0]  +
call dword_101669C  +
test eax eax +
jl loc_100D319  +
xor eax eax +
jmp loc_100D31C  +
push 5  +
pop eax  +
pop ebp  +
retn 4  +
***
test eax eax +
jz loc_100D332  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
retn   +
mov eax 80004003h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push offset VersionInformation  +
mov [ebp+var_10] esi +
mov VersionInformation.dwOSVersionInfoSize 114h +
call ds:GetVersionExW  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 1  +
push esi  +
push esi  +
push esi  +
push offset aSoftwareMicr_2  +
push 80000001h  +
mov [ebp+hKey] esi +
call ds:RegCreateKeyExA  +
test eax eax +
jnz loc_100D3CB  +
push 4  +
pop edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset aDisablepasswor  +
push [ebp+hKey]  +
mov dword ptr [ebp+Data] esi +
mov [ebp+Type] edi +
mov [ebp+cbData] edi +
call ds:RegQueryValueExA  +
push [ebp+hKey]  +
mov ebx eax +
call ds:RegCloseKey  +
cmp ebx esi +
jnz loc_100D3CB  +
cmp [ebp+Type] edi +
jnz loc_100D3CB  +
cmp dword ptr [ebp+Data] esi +
jz loc_100D3CB  +
mov ebx esi +
jmp loc_100D420  +
call sub_100D211  +
test eax eax +
jnz loc_100D3D9  +
push 3  +
pop edi  +
jmp loc_100D43E  +
push offset aPstorec_dll  +
call ds:LoadLibraryA  +
mov ebx eax +
cmp ebx esi +
jz loc_100D420  +
push offset aPstorecreatein  +
push ebx  +
call ds:GetProcAddress  +
mov dword_101669C eax +
cmp eax esi +
jz loc_100D420  +
lea eax [ebp+var_10] +
push eax  +
call sub_100D2DA  +
test eax eax +
jl loc_100D41A  +
mov eax [ebp+var_10] +
cmp eax esi +
jz loc_100D41A  +
call sub_100D325  +
jmp loc_100D42B  +
mov dword_101669C esi +
xor edi edi +
cmp VersionInformation.dwPlatformId 1 +
jnz loc_100D42E  +
xor edi edi +
inc edi  +
cmp ebx esi +
jz loc_100D43E  +
cmp edi 1 +
jz loc_100D43E  +
push ebx  +
call ds:FreeLibrary  +
mov dword_1016090 edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_2C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_30] eax +
xor eax eax +
lea edi [ebp+var_44] +
stos   +
stos   +
stos   +
mov esi offset dword_1002098 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_10021D0 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
lea eax [ebp+var_28] +
push eax  +
mov [ebp+var_28] esi +
mov [ebp+var_38] 8 +
mov [ebp+var_34] offset aWmsdkcachecred +
mov [ebp+var_48] 10h +
mov [ebp+var_44] esi +
mov [ebp+var_40] esi +
mov [ebp+var_3C] esi +
call sub_100D2DA  +
mov edi eax +
cmp edi esi +
jl loc_100D55D  +
mov eax [ebp+var_28] +
mov ecx [eax] +
push ebx  +
push esi  +
lea edx [ebp+var_38] +
push edx  +
lea edx [ebp+var_14] +
push edx  +
push esi  +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
cmp edi esi +
mov ebx 800C0004h +
jge loc_100D4E9  +
cmp edi ebx +
jnz loc_100D55C  +
mov eax [ebp+var_28] +
mov ecx [eax] +
push esi  +
push esi  +
lea edx [ebp+var_38] +
push edx  +
lea edx [ebp+var_24] +
push edx  +
lea edx [ebp+var_14] +
push edx  +
push esi  +
push eax  +
call dword ptr [ecx+24h]  +
mov edi eax +
cmp edi esi +
jge loc_100D50B  +
cmp edi ebx +
jnz loc_100D55C  +
cmp [ebp+var_30] esi +
jz loc_100D540  +
mov ecx [ebp+arg_8] +
cmp ecx esi +
jz loc_100D540  +
cmp [ebp+arg_C] esi +
jnz loc_100D540  +
mov eax [ebp+var_28] +
mov edx [eax] +
push esi  +
push 1  +
lea edi [ebp+var_48] +
push edi  +
push [ebp+var_30]  +
add ecx ecx +
push ecx  +
push [ebp+var_2C]  +
lea ecx [ebp+var_24] +
push ecx  +
lea ecx [ebp+var_14] +
push ecx  +
push esi  +
push eax  +
call dword ptr [edx+48h]  +
jmp loc_100D55A  +
mov eax [ebp+var_28] +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_48] +
push edx  +
push [ebp+var_2C]  +
lea edx [ebp+var_24] +
push edx  +
lea edx [ebp+var_14] +
push edx  +
push esi  +
push eax  +
call dword ptr [ecx+40h]  +
mov edi eax +
pop ebx  +
mov eax [ebp+var_28] +
call sub_100D325  +
cmp edi esi +
jl loc_100D56D  +
xor eax eax +
jmp loc_100D570  +
push 5  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10082CB  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_34] eax +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov [ebp+var_38] eax +
mov eax [ebx] +
add eax eax +
mov [ebp+var_30] eax +
xor eax eax +
lea edi [ebp+var_44] +
stos   +
stos   +
stos   +
mov esi offset dword_1002098 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_10021D0 +
lea edi [ebp+var_14] +
movs   +
movs   +
xor ecx ecx +
movs   +
lea eax [ebp+var_2C] +
push eax  +
mov [ebp+pv] ecx +
movs   +
mov [ebp+var_2C] ecx +
mov [ebp+var_48] 10h +
mov [ebp+var_44] ecx +
mov [ebp+var_40] ecx +
mov [ebp+var_3C] ecx +
call sub_100D2DA  +
mov edi eax +
test edi edi +
jl loc_100D640  +
mov eax [ebp+var_2C] +
mov ecx [eax] +
push 0  +
lea edx [ebp+var_48] +
push edx  +
lea edx [ebp+pv] +
push edx  +
lea edx [ebp+var_30] +
push edx  +
push [ebp+var_34]  +
lea edx [ebp+var_14] +
push edx  +
lea edx [ebp+var_24] +
push edx  +
push 0  +
push eax  +
call dword ptr [ecx+44h]  +
mov edi eax +
test edi edi +
jl loc_100D640  +
mov eax [ebx] +
mov esi [ebp+var_30] +
add eax eax +
cmp eax esi +
jnb loc_100D62D  +
push 7Ah  +
pop edi  +
jmp loc_100D640  +
push esi  +
push [ebp+pv]  +
push [ebp+var_38]  +
call memcpy  +
add esp 0Ch +
shr esi 1 +
mov [ebx] esi +
cmp [ebp+pv] 0 +
jz loc_100D653  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
and [ebp+pv] 0 +
mov eax [ebp+var_2C] +
call sub_100D325  +
test edi edi +
pop edi  +
pop esi  +
jl loc_100D665  +
xor eax eax +
jmp loc_100D668  +
push 5  +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 124h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi ecx +
mov edi edx +
call sub_100D248  +
test eax eax +
jnz loc_100D6B2  +
push 5  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10082CB  +
leave   +
retn 8  +
push [ebp+arg_0]  +
lea ecx [ebp+var_94] +
push esi  +
call sub_100ACA1  +
xor esi esi +
cmp [ebp+var_94] esi +
jge loc_100D6DA  +
lea ecx [ebp+var_94] +
call sub_1002970  +
push 0Eh  +
jmp loc_100D6A1  +
push [ebp+arg_4]  +
lea ecx [ebp+var_124] +
push edi  +
call sub_100ACA1  +
cmp [ebp+var_124] esi +
jge loc_100D70E  +
push 0Eh  +
pop esi  +
lea ecx [ebp+var_124] +
call sub_1002970  +
lea ecx [ebp+var_94] +
call sub_1002970  +
mov eax esi +
jmp loc_100D6A2  +
cmp [ebp+var_94] esi +
jge loc_100D71A  +
xor edi edi +
jmp loc_100D720  +
mov edi [ebp+var_90] +
push esi  +
push 13h  +
push [ebp+var_120]  +
lea ecx [ebp+var_124] +
call sub_10033A8  +
push eax  +
push edi  +
lea ecx [ebp+var_94] +
call sub_10033A8  +
push eax  +
call dword_1016694  +
mov esi eax +
jmp loc_100D6F4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1A4h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push edi  +
mov edi ecx +
mov [ebp+lpWideCharStr] eax +
call sub_100D248  +
test eax eax +
jnz loc_100D78D  +
push 5  +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10082CB  +
leave   +
retn 8  +
push [ebp+arg_0]  +
lea ecx [ebp+var_94] +
push edi  +
call sub_100ACA1  +
xor edi edi +
cmp [ebp+var_94] edi +
jge loc_100D7B5  +
lea ecx [ebp+var_94] +
call sub_1002970  +
push 0Eh  +
jmp loc_100D77D  +
mov ax [esi] +
add ax ax +
movzx eax ax +
mov [ebp+var_1A0] eax +
movzx eax ax +
push ebx  +
push eax  +
lea ecx [ebp+lpMultiByteStr] +
call sub_100BE24  +
cmp [ebp+lpMultiByteStr] edi +
jnz loc_100D7FA  +
push 0Eh  +
pop ebx  +
lea ecx [ebp+lpMultiByteStr] +
call sub_100294D  +
lea ecx [ebp+var_94] +
call sub_1002970  +
mov eax ebx +
pop ebx  +
jmp loc_100D77E  +
cmp [ebp+var_94] edi +
jge loc_100D806  +
xor eax eax +
jmp loc_100D80C  +
mov eax [ebp+var_90] +
push 13h  +
lea ecx [ebp+var_1A0] +
push ecx  +
push [ebp+lpMultiByteStr]  +
lea ecx [ebp+var_94] +
push eax  +
call sub_10033A8  +
push eax  +
call dword_1016690  +
mov ebx eax +
cmp ebx edi +
jnz loc_100D7DF  +
push dword ptr [esi]  +
movzx eax word ptr [ebp+var_1A0] +
push [ebp+lpWideCharStr]  +
push eax  +
push [ebp+lpMultiByteStr]  +
push edi  +
push edi  +
call ds:MultiByteToWideChar  +
mov [esi] eax +
jmp loc_100D7DF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
call sub_100D248  +
test eax eax +
jnz loc_100D88E  +
push 5  +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10082CB  +
leave   +
retn 4  +
push [ebp+arg_0]  +
lea ecx [ebp+var_94] +
push esi  +
call sub_100ACA1  +
cmp [ebp+var_94] 0 +
jge loc_100D8B8  +
push 0Eh  +
pop esi  +
lea ecx [ebp+var_94] +
call sub_1002970  +
mov eax esi +
jmp loc_100D87F  +
push 13h  +
push [ebp+var_90]  +
lea ecx [ebp+var_94] +
call sub_10033A8  +
push eax  +
call dword_1016698  +
mov esi eax +
jmp loc_100D8A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1016090 2 +
jnz loc_100D8F3  +
call sub_100D33D  +
cmp eax 1 +
jnz loc_100D8FC  +
cmp dword_1016090 1 +
jz loc_100D901  +
push 5  +
pop eax  +
jmp loc_100D940  +
mov eax [ebp+arg_8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100D907  +
sub eax edx +
sar eax 1 +
inc eax  +
cmp dword_101669C 0 +
jnz loc_100D932  +
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
inc eax  +
push eax  +
call sub_100D67B  +
jmp loc_100D940  +
push 0  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100D450  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1016090 2 +
jnz loc_100D961  +
call sub_100D33D  +
cmp eax 1 +
jnz loc_100D96A  +
cmp dword_1016090 1 +
jz loc_100D96F  +
push 5  +
pop eax  +
jmp loc_100D9A5  +
cmp dword_101669C 0 +
mov eax [ebp+arg_C] +
mov [ebp+arg_C] eax +
jnz loc_100D995  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
inc eax  +
push eax  +
lea esi [ebp+arg_C] +
call sub_100D751  +
pop esi  +
jmp loc_100D9A5  +
push ebx  +
push [ebp+arg_8]  +
lea ebx [ebp+arg_C] +
push [ebp+arg_0]  +
call sub_100D585  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1016090 2 +
jnz loc_100D9C6  +
call sub_100D33D  +
cmp eax 1 +
jnz loc_100D9CF  +
cmp dword_1016090 1 +
jz loc_100D9D4  +
push 5  +
pop eax  +
jmp loc_100D9F9  +
xor eax eax +
cmp dword_101669C eax +
jnz loc_100D9ED  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
inc eax  +
push eax  +
call sub_100D85B  +
jmp loc_100D9F9  +
push 1  +
push eax  +
push eax  +
push [ebp+arg_0]  +
call sub_100D450  +
pop ebp  +
retn 8  +
***
mov edi edi +
push edi  +
push offset aCrypt32_dll  +
call ds:LoadLibraryW  +
mov edi eax +
test edi edi +
jz loc_100DA53  +
push esi  +
mov esi ds:GetProcAddress +
push offset aCryptprotectda  +
push edi  +
call esi  +
push offset aCryptunprotect  +
push edi  +
mov dword_10166B4 eax +
call esi  +
cmp dword_10166B4 0 +
mov dword_10166B8 eax +
pop esi  +
jz loc_100DA45  +
test eax eax +
jnz loc_100DA53  +
and dword_10166B4 0 +
and dword_10166B8 0 +
mov dword_10166B0 1 +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
cmp dword_10166B0 ebx +
jnz loc_100DA80  +
call sub_100DA02  +
mov ecx esi +
call sub_100B436  +
mov edi [ebp+arg_4] +
mov [esi+8] edi +
mov [esi+4] edi +
mov [esi+0Ch] ebx +
cmp edi ebx +
jz loc_100DB1F  +
mov eax dword_10166B4 +
cmp eax ebx +
jz loc_100DAE7  +
mov ecx [ebp+arg_0] +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_10] +
push ecx  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
push offset Class  +
lea ecx [ebp+var_8] +
push ecx  +
mov [ebp+var_8] edi +
call eax  +
test eax eax +
jnz loc_100DAFB  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100DAD9  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax 80090010h +
jz loc_100DAE7  +
cmp eax 80070725h +
jnz loc_100DB21  +
push edi  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jnz loc_100DB0F  +
mov eax 8007000Eh +
jmp loc_100DB21  +
mov eax [ebp+var_C] +
mov [esi] eax +
mov eax [ebp+var_10] +
mov dword ptr [esi+0Ch] 1 +
mov [esi+8] eax +
jmp loc_100DB1F  +
push edi  +
push [ebp+arg_0]  +
push eax  +
call memcpy  +
add esp 0Ch +
mov [esi+8] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp dword_10166B0 ebx +
jnz loc_100DB48  +
call sub_100DA02  +
mov ecx [esi+8] +
cmp ecx ebx +
jnz loc_100DB59  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
jmp loc_100DBE1  +
mov eax dword_10166B8 +
cmp eax ebx +
jz loc_100DBCB  +
cmp dword ptr [esi+0Ch] 1 +
jnz loc_100DBCB  +
mov edx [esi] +
mov [ebp+var_10] ecx +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp+var_10] +
push ecx  +
mov [ebp+var_C] edx +
call eax  +
test eax eax +
jz loc_100DBB5  +
mov esi [ebp+var_8] +
push esi  +
push [ebp+hMem]  +
push [ebp+arg_0]  +
call memcpy  +
mov eax [ebp+arg_4] +
add esp 0Ch +
mov [eax] esi +
mov eax [ebp+hMem] +
mov ecx esi +
cmp esi ebx +
jz loc_100DBAA  +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_100DBA4  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_100DBE1  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100DBE3  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100DBE3  +
push ecx  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call memcpy  +
mov eax [esi+8] +
mov ecx [ebp+arg_4] +
add esp 0Ch +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp dword_10166B0 ebx +
jnz loc_100DC09  +
call sub_100DA02  +
mov eax dword_10166B8 +
cmp eax ebx +
jnz loc_100DC1C  +
mov eax 80004005h +
jmp loc_100DCAB  +
mov ecx [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_C] ecx +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp+var_10] +
push ecx  +
mov [ebp+var_10] edi +
call eax  +
test eax eax +
jnz loc_100DC53  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100DCAA  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100DCAA  +
mov ecx [ebp+var_8] +
mov eax [ebp+hMem] +
cmp ecx ebx +
jz loc_100DC63  +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_100DC5D  +
push [ebp+hMem]  +
call ds:LocalFree  +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100DC82  +
mov eax 8007000Eh +
jmp loc_100DCAA  +
push edi  +
push [ebp+arg_0]  +
push ebx  +
call memcpy  +
add esp 0Ch +
mov ecx esi +
call sub_100B436  +
mov eax [ebp+var_8] +
mov [esi+4] eax +
mov [esi+8] edi +
mov dword ptr [esi+0Ch] 1 +
mov [esi] ebx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx+4] +
mov ecx esi +
call sub_100338B  +
test eax eax +
jz loc_100DD01  +
cmp dword ptr [ebp+0Ch] 0 +
mov ecx esi +
jnz loc_100DCF1  +
push 5Ch  +
call sub_100338B  +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
push 0FFFFFFFFh  +
test eax eax +
jz loc_100DCED  +
add eax 2 +
jmp loc_100DCF8  +
mov ecx esi +
jmp loc_100DCF3  +
push 0FFFFFFFFh  +
call sub_100338B  +
mov ecx [ebp+8] +
push eax  +
call sub_10033F0  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
lea edi [ecx+4] +
mov ecx edi +
call sub_100338B  +
test eax eax +
jz loc_100DD59  +
push esi  +
push 5Ch  +
mov ecx edi +
call sub_100338B  +
push eax  +
call ds:wcschr  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_100DD56  +
mov ecx edi +
call sub_100338B  +
sub esi eax +
sar esi 1 +
push esi  +
mov ecx edi +
call sub_100338B  +
mov ecx [ebp+8] +
push eax  +
call sub_10033F0  +
jmp loc_100DD58  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
cmp dword ptr [ebx] 0 +
push esi  +
push edi  +
mov edi ecx +
jge loc_100DD79  +
xor esi esi +
jmp loc_100DD7C  +
mov esi [ebx+4] +
mov eax [edi+118h] +
mov [ebp+8] eax +
test eax eax +
jnz loc_100DD8C  +
inc eax  +
jmp loc_100DDCB  +
shr eax 1 +
add eax esi +
push eax  +
mov ecx ebx +
call sub_100A443  +
test eax eax +
jnz loc_100DDA3  +
mov eax 8007000Eh +
jmp loc_100DDCB  +
lea ecx [ebp+8] +
push ecx  +
lea eax [eax+esi*2] +
push eax  +
lea ecx [edi+114h] +
call sub_100DB2D  +
test eax eax +
jl loc_100DDCB  +
mov eax [ebp+8] +
shr eax 1 +
add eax esi +
push eax  +
mov ecx ebx +
call sub_10029BC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
test eax eax +
jnz loc_100DDFC  +
push 57h  +
pop eax  +
jmp loc_100DE6F  +
cmp word ptr [eax] 7Bh +
push eax  +
lea eax [ebp+SubKey] +
jnz loc_100DE10  +
push offset aAppidS  +
jmp loc_100DE15  +
push offset aAppidS_0  +
push 100h  +
push eax  +
call sub_1002D1B  +
add esp 10h +
test eax eax +
jl loc_100DE6F  +
cmp [ebp+arg_8] 0 +
lea eax [ebp+SubKey] +
jz loc_100DE5E  +
push esi  +
push edi  +
push ebx  +
mov edi offset aAccesspermissi +
push edi  +
push eax  +
mov esi 80000000h +
push esi  +
call sub_100E47F  +
push [ebp+arg_C]  +
lea eax [ebp+SubKey] +
push ebx  +
push edi  +
push eax  +
push esi  +
call sub_100E342  +
pop edi  +
pop esi  +
jmp loc_100DE6F  +
push ebx  +
push offset aAccesspermissi  +
push eax  +
push 80000000h  +
call sub_100E47F  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
test eax eax +
jnz loc_100DEA8  +
push 57h  +
pop eax  +
jmp loc_100DF1B  +
cmp word ptr [eax] 7Bh +
push eax  +
lea eax [ebp+SubKey] +
jnz loc_100DEBC  +
push offset aAppidS  +
jmp loc_100DEC1  +
push offset aAppidS_0  +
push 100h  +
push eax  +
call sub_1002D1B  +
add esp 10h +
test eax eax +
jl loc_100DF1B  +
cmp [ebp+arg_8] 0 +
lea eax [ebp+SubKey] +
jz loc_100DF0A  +
push esi  +
push edi  +
push ebx  +
mov edi offset aLaunchpermissi +
push edi  +
push eax  +
mov esi 80000000h +
push esi  +
call sub_100E47F  +
push [ebp+arg_C]  +
lea eax [ebp+SubKey] +
push ebx  +
push edi  +
push eax  +
push esi  +
call sub_100E342  +
pop edi  +
pop esi  +
jmp loc_100DF1B  +
push ebx  +
push offset aLaunchpermissi  +
push eax  +
push 80000000h  +
call sub_100E47F  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+pSid] ebx +
cmp edi ebx +
jnz loc_100DF4C  +
push 57h  +
pop eax  +
jmp loc_100E053  +
push esi  +
lea eax [ebp+pSid] +
push eax  +
mov [edi] ebx +
call sub_100E5A3  +
mov [ebp+arg_0] eax +
cmp eax ebx +
jnz loc_100E030  +
cmp [ebp+pSid] ebx +
jnz loc_100DF74  +
mov [ebp+arg_0] 1 +
jmp loc_100E030  +
push [ebp+pSid]  +
call ds:GetLengthSid  +
mov esi eax +
lea eax [esi+esi+1Ch] +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [edi] eax +
cmp eax ebx +
jnz loc_100DF9C  +
mov [ebp+arg_0] 0Eh +
jmp loc_100E030  +
lea ebx [eax+14h] +
push 1  +
lea ecx [ebx+esi] +
push eax  +
mov [ebp+pOwner] ecx +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jnz loc_100DFBB  +
call ds:GetLastError  +
mov [ebp+arg_0] eax +
mov eax [ebp+pOwner] +
push 2  +
push 8  +
add eax esi +
push eax  +
call ds:InitializeAcl  +
test eax eax +
jz loc_100E021  +
mov eax [ebp+pOwner] +
push 0  +
add eax esi +
push eax  +
push 1  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_100E021  +
push esi  +
push [ebp+pSid]  +
push ebx  +
call memcpy  +
add esp 0Ch +
push 0  +
push ebx  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_100E021  +
push esi  +
push [ebp+pSid]  +
push [ebp+pOwner]  +
call memcpy  +
add esp 0Ch +
push 0  +
push [ebp+pOwner]  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jnz loc_100E02A  +
call ds:GetLastError  +
mov [ebp+arg_0] eax +
cmp [ebp+arg_0] 0 +
jz loc_100E040  +
mov eax [edi] +
test eax eax +
jz loc_100E040  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [edi] 0 +
pop ecx  +
cmp [ebp+pSid] 0 +
pop esi  +
jz loc_100E050  +
push [ebp+pSid]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+arg_0] +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push edi  +
xor edi edi +
mov [ebp+dwAbsoluteSecurityDescriptorSize] edi +
mov [ebp+dwDaclSize] edi +
mov [ebp+dwSaclSize] edi +
mov [ebp+dwOwnerSize] edi +
mov [ebp+dwPrimaryGroupSize] edi +
mov [ebp+pDacl] edi +
mov [ebp+pSacl] edi +
mov [ebp+pOwner] edi +
mov [ebp+pPrimaryGroup] edi +
mov [ebp+bDaclPresent] edi +
mov [ebp+bGroupDefaulted] edi +
cmp [ebp+arg_4] edi +
jnz loc_100E097  +
push 57h  +
pop eax  +
jmp loc_100E1D5  +
push ebx  +
mov ebx [ebp+pSelfRelativeSecurityDescriptor] +
cmp ebx edi +
jnz loc_100E0A7  +
push 57h  +
pop eax  +
jmp loc_100E1D4  +
lea eax [ebp+bGroupDefaulted] +
push eax  +
lea eax [ebp+pSacl] +
push eax  +
lea eax [ebp+bDaclPresent] +
push eax  +
push ebx  +
call ds:GetSecurityDescriptorSacl  +
test eax eax +
jz loc_100E118  +
mov eax [ebp+pSacl] +
cmp eax edi +
jz loc_100E0D3  +
cmp [ebp+bDaclPresent] edi +
jz loc_100E0D3  +
movzx eax word ptr [eax+2] +
mov [ebp+dwSaclSize] eax +
jmp loc_100E0D6  +
mov [ebp+dwSaclSize] edi +
lea eax [ebp+bGroupDefaulted] +
push eax  +
lea eax [ebp+pDacl] +
push eax  +
lea eax [ebp+bDaclPresent] +
push eax  +
push ebx  +
call ds:GetSecurityDescriptorDacl  +
test eax eax +
jz loc_100E118  +
mov eax [ebp+pDacl] +
cmp eax edi +
jz loc_100E102  +
cmp [ebp+bDaclPresent] edi +
jz loc_100E102  +
movzx eax word ptr [eax+2] +
mov [ebp+dwDaclSize] eax +
jmp loc_100E105  +
mov [ebp+dwDaclSize] edi +
lea eax [ebp+bGroupDefaulted] +
push eax  +
lea eax [ebp+pOwner] +
push eax  +
push ebx  +
call ds:GetSecurityDescriptorOwner  +
test eax eax +
jnz loc_100E123  +
call ds:GetLastError  +
jmp loc_100E1D4  +
push esi  +
push [ebp+pOwner]  +
mov esi ds:GetLengthSid +
call esi  +
mov [ebp+dwOwnerSize] eax +
lea eax [ebp+bGroupDefaulted] +
push eax  +
lea eax [ebp+pPrimaryGroup] +
push eax  +
push ebx  +
call ds:GetSecurityDescriptorGroup  +
test eax eax +
jz loc_100E1C4  +
push [ebp+pPrimaryGroup]  +
call esi  +
mov [ebp+dwPrimaryGroupSize] eax +
mov esi ds:MakeAbsoluteSD +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push [ebp+pPrimaryGroup]  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push [ebp+pOwner]  +
lea eax [ebp+dwSaclSize] +
push eax  +
push [ebp+pSacl]  +
lea eax [ebp+dwDaclSize] +
push eax  +
push [ebp+pDacl]  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push edi  +
push ebx  +
mov [ebp+dwAbsoluteSecurityDescriptorSize] edi +
call esi  +
push 14h  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
cmp ebx edi +
jnz loc_100E18D  +
push 0Eh  +
pop eax  +
jmp loc_100E1D3  +
push 1  +
push ebx  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_100E1C4  +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push [ebp+pPrimaryGroup]  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push [ebp+pOwner]  +
lea eax [ebp+dwSaclSize] +
push eax  +
push [ebp+pSacl]  +
lea eax [ebp+dwDaclSize] +
push eax  +
push [ebp+pDacl]  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push ebx  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
call esi  +
test eax eax +
jnz loc_100E1CC  +
call ds:GetLastError  +
jmp loc_100E1D3  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+dwDisposition] +
push eax  +
xor esi esi +
lea eax [ebp+phkResult] +
push eax  +
push esi  +
push 20006h  +
push esi  +
push offset Class  +
push esi  +
push [ebp+lpSubKey]  +
mov [ebp+dwDisposition] esi +
push [ebp+hKey]  +
mov [ebp+phkResult] esi +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi esi +
jnz loc_100E235  +
push [ebp+lpData]  +
call ds:GetSecurityDescriptorLength  +
push eax  +
push [ebp+lpData]  +
push 3  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
mov edi eax +
cmp [ebp+phkResult] esi +
jz loc_100E243  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_C] +
mov [ebp+phkResult] ebx +
mov [ebp+Type] ebx +
mov [ebp+cbData] ebx +
cmp esi ebx +
jnz loc_100E274  +
push 57h  +
pop eax  +
jmp loc_100E337  +
mov eax [ebp+arg_10] +
cmp eax ebx +
jz loc_100E26C  +
push edi  +
mov [eax] ebx +
lea eax [ebp+phkResult] +
push eax  +
push 0F003Fh  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi ebx +
jz loc_100E2B5  +
cmp edi 2 +
jnz loc_100E326  +
push esi  +
mov [esi] ebx +
call sub_100DF2F  +
mov edi eax +
cmp edi ebx +
jnz loc_100E326  +
xor edi edi +
jmp loc_100E31D  +
mov edi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call edi  +
cmp eax ebx +
jz loc_100E2D6  +
cmp eax 7Ah +
jnz loc_100E30F  +
push [ebp+cbData]  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jnz loc_100E2EA  +
push 0Eh  +
pop edi  +
jmp loc_100E326  +
lea ecx [ebp+cbData] +
push ecx  +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call edi  +
mov edi eax +
cmp edi ebx +
jz loc_100E326  +
mov eax [esi] +
cmp eax ebx +
jz loc_100E30F  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
push esi  +
mov [esi] ebx +
call sub_100DF2F  +
mov edi eax +
cmp edi ebx +
jnz loc_100E326  +
mov eax [ebp+arg_10] +
mov dword ptr [eax] 1 +
cmp [ebp+phkResult] ebx +
jz loc_100E334  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+pSelfRelativeSecurityDescriptor] +
push eax  +
push [ebp+lpValueName]  +
xor esi esi +
push [ebp+lpSubKey]  +
mov [ebp+pSelfRelativeSecurityDescriptor] esi +
push [ebp+hKey]  +
xor ebx ebx +
mov [ebp+pAbsoluteSecurityDescriptor] esi +
mov [ebp+dwBufferLength] esi +
mov [ebp+bDaclPresent] esi +
mov [ebp+bDaclDefaulted] esi +
mov [ebp+pDacl] esi +
mov [ebp+var_14] esi +
call sub_100E250  +
mov edi eax +
cmp edi esi +
jnz loc_100E445  +
lea eax [ebp+bDaclDefaulted] +
push eax  +
lea eax [ebp+pDacl] +
push eax  +
lea eax [ebp+bDaclPresent] +
push eax  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
call ds:GetSecurityDescriptorDacl  +
test eax eax +
jz loc_100E42A  +
push [ebp+pSid]  +
lea eax [ebp+pDacl] +
cmp [ebp+arg_10] esi +
jz loc_100E3B8  +
push 1  +
push eax  +
call sub_100E794  +
jmp loc_100E3C3  +
push 10000000h  +
push eax  +
call sub_100E6ED  +
mov edi eax +
cmp edi esi +
jnz loc_100E445  +
cmp [ebp+var_14] esi +
jnz loc_100E3DC  +
lea eax [ebp+pAbsoluteSecurityDescriptor] +
push eax  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
call sub_100E05E  +
jmp loc_100E3E2  +
mov eax [ebp+pSelfRelativeSecurityDescriptor] +
mov [ebp+pAbsoluteSecurityDescriptor] eax +
push esi  +
push [ebp+pDacl]  +
push 1  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_100E42A  +
mov edi ds:MakeSelfRelativeSD +
lea eax [ebp+dwBufferLength] +
push eax  +
push esi  +
push [ebp+pAbsoluteSecurityDescriptor]  +
mov [ebp+dwBufferLength] esi +
call edi  +
push [ebp+dwBufferLength]  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
cmp ebx esi +
jnz loc_100E41C  +
push 0Eh  +
pop edi  +
jmp loc_100E445  +
lea eax [ebp+dwBufferLength] +
push eax  +
push ebx  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call edi  +
test eax eax +
jnz loc_100E434  +
call ds:GetLastError  +
mov edi eax +
jmp loc_100E445  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call sub_100E1DF  +
xor edi edi +
cmp [ebp+pSelfRelativeSecurityDescriptor] esi +
jz loc_100E453  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp ebx esi +
jz loc_100E45E  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+pAbsoluteSecurityDescriptor] esi +
jz loc_100E471  +
cmp [ebp+var_14] esi +
jnz loc_100E471  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+pSelfRelativeSecurityDescriptor] +
push eax  +
push [ebp+lpValueName]  +
xor esi esi +
push [ebp+lpSubKey]  +
mov [ebp+pSelfRelativeSecurityDescriptor] esi +
push [ebp+hKey]  +
xor ebx ebx +
mov [ebp+pAbsoluteSecurityDescriptor] esi +
mov [ebp+dwBufferLength] esi +
mov [ebp+bDaclPresent] esi +
mov [ebp+bDaclDefaulted] esi +
mov [ebp+pAcl] esi +
mov [ebp+var_14] esi +
call sub_100E250  +
mov edi eax +
cmp edi esi +
jnz loc_100E569  +
lea eax [ebp+bDaclDefaulted] +
push eax  +
lea eax [ebp+pAcl] +
push eax  +
lea eax [ebp+bDaclPresent] +
push eax  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
call ds:GetSecurityDescriptorDacl  +
test eax eax +
jz loc_100E54E  +
push [ebp+pSid1]  +
push [ebp+pAcl]  +
call sub_100E839  +
mov edi eax +
cmp edi esi +
jnz loc_100E569  +
cmp [ebp+var_14] esi +
jnz loc_100E500  +
lea eax [ebp+pAbsoluteSecurityDescriptor] +
push eax  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
call sub_100E05E  +
jmp loc_100E506  +
mov eax [ebp+pSelfRelativeSecurityDescriptor] +
mov [ebp+pAbsoluteSecurityDescriptor] eax +
push esi  +
push [ebp+pAcl]  +
push 1  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_100E54E  +
mov edi ds:MakeSelfRelativeSD +
lea eax [ebp+dwBufferLength] +
push eax  +
push esi  +
push [ebp+pAbsoluteSecurityDescriptor]  +
mov [ebp+dwBufferLength] esi +
call edi  +
push [ebp+dwBufferLength]  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
cmp ebx esi +
jnz loc_100E540  +
push 0Eh  +
pop edi  +
jmp loc_100E569  +
lea eax [ebp+dwBufferLength] +
push eax  +
push ebx  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call edi  +
test eax eax +
jnz loc_100E558  +
call ds:GetLastError  +
mov edi eax +
jmp loc_100E569  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call sub_100E1DF  +
xor edi edi +
cmp [ebp+pSelfRelativeSecurityDescriptor] esi +
jz loc_100E577  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp ebx esi +
jz loc_100E582  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+pAbsoluteSecurityDescriptor] esi +
jz loc_100E595  +
cmp [ebp+var_14] esi +
jnz loc_100E595  +
push [ebp+pAbsoluteSecurityDescriptor]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
mov [ebp+hObject] esi +
mov [ebp+ReturnLength] esi +
mov [ebp+var_8] esi +
cmp ebx esi +
jnz loc_100E5C7  +
push 57h  +
pop eax  +
jmp loc_100E669  +
push edi  +
lea eax [ebp+hObject] +
push eax  +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_100E642  +
mov edi ds:GetTokenInformation +
lea eax [ebp+ReturnLength] +
push eax  +
push esi  +
push esi  +
push 1  +
push [ebp+hObject]  +
call edi  +
push [ebp+ReturnLength]  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_100E62B  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push esi  +
push 1  +
push [ebp+hObject]  +
call edi  +
test eax eax +
jz loc_100E642  +
push dword ptr [esi]  +
call ds:GetLengthSid  +
mov edi eax +
push edi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebx] eax +
test eax eax +
jnz loc_100E634  +
mov [ebp+var_8] 0Eh +
jmp loc_100E64B  +
push edi  +
push dword ptr [esi]  +
push eax  +
call memcpy  +
add esp 0Ch +
jmp loc_100E64B  +
call ds:GetLastError  +
mov [ebp+var_8] eax +
pop edi  +
test esi esi +
jz loc_100E657  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+hObject] 0 +
jz loc_100E666  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
mov [ebp+pAceList] esi +
cmp [ebp+pAcl] esi +
jnz loc_100E68C  +
push 57h  +
pop eax  +
jmp loc_100E6DB  +
cmp [ebp+arg_4] esi +
jz loc_100E687  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+pAcl]  +
call ds:GetAclInformation  +
cmp [ebp+pAclInformation] esi +
jbe loc_100E6D9  +
lea eax [ebp+pAceList] +
push eax  +
push esi  +
push [ebp+pAcl]  +
call ds:GetAce  +
test eax eax +
jz loc_100E6E0  +
mov eax [ebp+pAceList] +
movzx ecx word ptr [eax+2] +
push ecx  +
push eax  +
push 0FFFFFFFFh  +
push 2  +
push [ebp+arg_4]  +
call ds:AddAce  +
test eax eax +
jz loc_100E6E0  +
inc esi  +
cmp esi [ebp+pAclInformation] +
jb loc_100E6A7  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
call ds:GetLastError  +
jmp loc_100E6DB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 0Ch +
test eax eax +
jnz loc_100E704  +
push 57h  +
pop eax  +
jmp locret_100E78B  +
cmp [ebp+pSid] 0 +
jz loc_100E6FC  +
push ebx  +
mov ebx [eax] +
push esi  +
push edi  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push ebx  +
call ds:GetAclInformation  +
push [ebp+pSid]  +
call ds:GetLengthSid  +
mov ecx [ebp+var_8] +
lea edi [eax+ecx+10h] +
push edi  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100E740  +
push 0Eh  +
pop edi  +
jmp loc_100E786  +
push 2  +
push edi  +
push esi  +
call ds:InitializeAcl  +
test eax eax +
jz loc_100E761  +
push [ebp+pSid]  +
push [ebp+AccessMask]  +
push 2  +
push esi  +
call ds:AddAccessDeniedAce  +
test eax eax +
jnz loc_100E76B  +
call ds:GetLastError  +
mov edi eax +
jmp loc_100E778  +
push esi  +
push ebx  +
call sub_100E674  +
mov edi eax +
test edi edi +
jz loc_100E781  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100E786  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 0Ch +
test eax eax +
jnz loc_100E7AB  +
push 57h  +
pop eax  +
jmp locret_100E830  +
cmp [ebp+pSid] 0 +
jz loc_100E7A3  +
push ebx  +
mov ebx [eax] +
push esi  +
push edi  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push ebx  +
call ds:GetAclInformation  +
push [ebp+pSid]  +
call ds:GetLengthSid  +
mov ecx [ebp+var_8] +
lea edi [eax+ecx+10h] +
push edi  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100E7E7  +
push 0Eh  +
pop edi  +
jmp loc_100E82B  +
push 2  +
push edi  +
push esi  +
call ds:InitializeAcl  +
test eax eax +
jz loc_100E815  +
push esi  +
push ebx  +
call sub_100E674  +
mov edi eax +
test edi edi +
jnz loc_100E81D  +
push [ebp+pSid]  +
push [ebp+AccessMask]  +
push 2  +
push esi  +
call ds:AddAccessAllowedAce  +
test eax eax +
jnz loc_100E826  +
call ds:GetLastError  +
mov edi eax +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_100E82B  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
xor esi esi +
mov [ebp+pAce] esi +
mov [ebp+var_4] esi +
cmp [ebp+pAcl] esi +
jnz loc_100E857  +
push 57h  +
pop eax  +
jmp loc_100E8DA  +
cmp [ebp+pSid1] esi +
jz loc_100E84F  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+pAcl]  +
call ds:GetAclInformation  +
mov eax [ebp+pAclInformation] +
cmp eax esi +
jbe loc_100E8D7  +
mov esi ds:DeleteAce +
push ebx  +
mov ebx ds:EqualSid +
push edi  +
lea edi [eax-1] +
mov [ebp+var_C] eax +
lea eax [ebp+pAce] +
push eax  +
push edi  +
push [ebp+pAcl]  +
call ds:GetAce  +
test eax eax +
jnz loc_100E8A5  +
call ds:GetLastError  +
mov [ebp+var_4] eax +
jmp loc_100E8CF  +
mov eax [ebp+pAce] +
mov cl [eax] +
test cl cl +
jz loc_100E8B8  +
cmp cl 1 +
jz loc_100E8B8  +
cmp cl 2 +
jnz loc_100E8CF  +
add eax 8 +
push eax  +
push [ebp+pSid1]  +
call ebx  +
test eax eax +
jz loc_100E8CF  +
push edi  +
push [ebp+pAcl]  +
call esi  +
and [ebp+var_4] 0 +
dec edi  +
dec [ebp+var_C]  +
jnz loc_100E888  +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi+34h] eax +
mov eax [esi] +
push edi  +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_100E920  +
mov ecx [esi+30h] +
lea edx [ebp+arg_0] +
xor edi edi +
push edx  +
mov [ebp+arg_0] edi +
mov eax [ecx] +
push edi  +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+arg_0] +
cmp ecx edi +
jz loc_100E934  +
mov eax [ecx] +
push edi  +
push edi  +
push edi  +
push esi  +
call dword ptr [eax+0Ch]  +
jmp loc_100E934  +
mov ecx esi +
call sub_100B7E9  +
test eax eax +
jl loc_100E934  +
push dword ptr [esi+44h]  +
call ds:SetEvent  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 28h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001944 +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jnz loc_100E986  +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_100E991  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov edx eax +
and edx 40h +
jz loc_100E9B4  +
test al al +
jns loc_100E9B4  +
mov eax 80070057h +
jmp loc_100E9D6  +
test edx edx +
jz loc_100E9BD  +
mov eax [ecx+1Ch] +
jmp loc_100E9CF  +
test al al +
js loc_100E9CC  +
test al 20h +
jz loc_100E9CC  +
mov eax 80004001h +
jmp loc_100E9D6  +
mov eax [ecx+20h] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100F3D3  +
test eax eax +
jl loc_100E9FB  +
xor eax eax +
pop ebp  +
retn 10h  +
***
add dword ptr [ecx] 2 +
mov edx [ecx] +
mov eax [ecx+4] +
push ebx  +
push esi  +
mov esi [ecx+0Ch] +
inc edx  +
push edi  +
cmp edx [eax+esi*8+4] +
jbe loc_100EA39  +
mov esi [ecx+8] +
inc dword ptr [ecx+0Ch]  +
mov edx [ecx+0Ch] +
cmp edx esi +
jnb loc_100EA3F  +
mov edx [eax+edx*8] +
mov [ecx] edx +
mov ebx [ecx] +
mov edx [ecx+0Ch] +
mov edi eax +
inc ebx  +
cmp ebx [edi+edx*8+4] +
ja loc_100EA1C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
mov eax 80004005h +
jmp loc_100EA3B  +
***
mov eax 80004001h +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CoCreateGuid  +
***
xor eax eax +
xor edx edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+34h] +
test eax eax +
jl loc_100EA94  +
mov eax [ecx+50h] +
mov edx [ebp+0Ch] +
mov [edx] eax +
mov eax [ecx+54h] +
mov ecx [ebp+10h] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+8] ebx +
jz loc_100EB28  +
mov edi [ebp+14h] +
cmp edi ebx +
jz loc_100EB28  +
mov esi [ebp+10h] +
cmp esi ebx +
jnz loc_100EAC4  +
mov dword ptr [edi] 95h +
xor eax eax +
jmp loc_100EB2D  +
test byte ptr [ebp+0Ch] 1 +
mov eax [edi] +
jz loc_100EAF9  +
cmp eax 14h +
jnb loc_100EAD8  +
mov eax 8007007Ah +
jmp loc_100EB2D  +
push eax  +
push esi  +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
call sub_101313A  +
cmp eax ebx +
jl loc_100EB2D  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100EAED  +
jmp loc_100EB1F  +
cmp eax 80h +
jb loc_100EAD1  +
push ebx  +
push ebx  +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
call sub_101313A  +
cmp eax ebx +
jl loc_100EB2D  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100EB15  +
sub eax edx +
sar eax 1 +
inc eax  +
mov [edi] eax +
jmp loc_100EAC0  +
***
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+0Ch] +
and dword ptr [esi] 0 +
mov eax [ecx+38h] +
test eax eax +
jz loc_100EB7F  +
lea ecx [ebp+0Ch] +
push ecx  +
lea ecx [ebp-4] +
push ecx  +
lea ecx [ebp+8] +
push ecx  +
push 0  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp+0Ch] 4 +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100EB7F  +
cmp dword ptr [ebp+8] 4 +
jnz loc_100EB7F  +
mov eax [ebp-4] +
mov [esi] eax +
xor eax eax +
jmp loc_100EB84  +
mov eax 80004005h +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+38h] +
xor ecx ecx +
cmp eax ecx +
jnz loc_100EBA4  +
mov eax 80004005h +
jmp locret_100EC1E  +
push esi  +
cmp [ebp+0Ch] ecx +
jnz loc_100EBDD  +
lea edx [ebp-4] +
push edx  +
push ecx  +
lea edx [ebp+0Ch] +
push edx  +
push ecx  +
push dword ptr [ebp+8]  +
mov [ebp-4] ecx +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100EC18  +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_100EBD1  +
cmp dword ptr [ebp+0Ch] 2 +
jnz loc_100EC18  +
mov eax [ebp-4] +
mov ecx [ebp+10h] +
shr eax 1 +
mov [ecx] eax +
jmp loc_100EC14  +
mov esi [ebp+10h] +
mov edx [esi] +
add edx edx +
mov [ebp-4] edx +
lea edx [ebp-4] +
push edx  +
push dword ptr [ebp+0Ch]  +
lea edx [ebp+0Ch] +
push edx  +
push ecx  +
push dword ptr [ebp+8]  +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100EC18  +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_100EC0D  +
cmp dword ptr [ebp+0Ch] 2 +
jnz loc_100EC18  +
mov eax [ebp-4] +
shr eax 1 +
mov [esi] eax +
xor eax eax +
jmp loc_100EC1D  +
mov eax 80004005h +
pop esi  +
leave   +
retn 0Ch  +
***
xor eax eax +
retn 0Ch  +
***
xor eax eax +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
xor ecx ecx +
mov [ebp+var_4] ecx +
mov eax edi +
cmp edi ecx +
jz loc_100EC68  +
cmp [eax+18h] ecx +
jz loc_100EC61  +
cmp [eax+10h] ecx +
jbe loc_100EC61  +
inc dword ptr [esi+54h]  +
mov eax [eax+1Ch] +
cmp eax ecx +
jnz loc_100EC54  +
mov ebx [esi+54h] +
cmp ebx ecx +
jle loc_100ECCD  +
xor ecx ecx +
mov eax ebx +
mov edx 80h +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi+50h] eax +
test eax eax +
jnz loc_100EC96  +
mov eax 8007000Eh +
jmp loc_100ECD7  +
and dword ptr [esi+54h] 0 +
jmp loc_100ECC7  +
mov ecx [edi+18h] +
test ecx ecx +
jz loc_100ECC4  +
mov eax [edi+10h] +
test eax eax +
jbe loc_100ECC4  +
push eax  +
mov eax [esi+54h] +
cdq   +
idiv  ebx +
push ecx  +
shl edx 7 +
add edx [esi+50h] +
push edx  +
call memcpy  +
add esp 0Ch +
inc dword ptr [esi+54h]  +
mov edi [edi+1Ch] +
test edi edi +
jnz loc_100EC9C  +
jmp loc_100ECD4  +
mov [ebp+var_4] 80004005h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_0] edi +
jz loc_100ED76  +
mov eax [esi+14h] +
cmp eax edi +
jz loc_100ED36  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+14h] edi +
mov eax [esi+18h] +
cmp eax edi +
jz loc_100ED46  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+18h] edi +
mov eax [esi+0Ch] +
cmp eax edi +
jz loc_100ED56  +
mov [esi+0Ch] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+8] +
cmp eax edi +
jz loc_100ED66  +
mov [esi+8] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+10h] +
cmp eax edi +
jz loc_100ED76  +
mov [esi+10h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C8h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp-4] eax +
cmp dword ptr [ebp+1Ch] 1 +
mov eax [ebp+8] +
mov [ebp-0B8h] eax +
mov eax [ebp+18h] +
mov [ebp-0A4h] eax +
mov eax [ebp+20h] +
push esi  +
mov esi [ebp+28h] +
mov [ebp-90h] eax +
mov eax [ebp+24h] +
push edi  +
mov edi [ebp+10h] +
mov [ebp-9Ch] ecx +
mov [ebp-0A0h] eax +
mov [ebp-0BCh] esi +
jz loc_100EDE4  +
cmp dword ptr [ebp+1Ch] 2 +
jz loc_100EDE4  +
mov eax 80070057h +
jmp loc_100F178  +
xor ecx ecx +
push ebx  +
xor ebx ebx +
cmp dword ptr [ebp+1Ch] 2 +
mov [ebp-88h] ebx +
setz cl  +
mov [ebp-8Ch] ebx +
mov [ebp-0C0h] ecx +
mov ecx [ebp-90h] +
cmp ecx ebx +
jz loc_100EE27  +
cmp eax ebx +
jz loc_100EE27  +
cmp esi ebx +
jz loc_100EE27  +
call ?__uncaught_exception@@YA_NXZ  +
mov dword ptr [ebp-94h] 1 +
test eax eax +
jnz loc_100EE2D  +
mov [ebp-94h] ebx +
mov [ebp-98h] ebx +
mov eax [ebp-88h] +
cmp eax ebx +
jz loc_100EE49  +
mov [ebp-88h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8Ch] +
cmp eax ebx +
jz loc_100EE5F  +
mov [ebp-8Ch] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp-94h] ebx +
jz loc_100EE90  +
cmp [esi] ebx +
jz loc_100EE77  +
mov ecx [ebp-90h] +
push esi  +
call sub_101102E  +
cmp dword ptr [ebp+1Ch] 2 +
jnz loc_100EE90  +
lea eax [esi+4] +
cmp [eax] ebx +
jz loc_100EE90  +
mov ecx [ebp-90h] +
push eax  +
call sub_101102E  +
cmp [ebp-98h] ebx +
jnz loc_100EF74  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jnz loc_100EF52  +
mov ecx [ebp-9Ch] +
lea edx [ebp-88h] +
push edx  +
push dword ptr [ebp+14h]  +
xor eax eax +
push edi  +
mov [edi+2] ax +
mov eax [ecx] +
push 11h  +
call dword ptr [eax+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_100F029  +
mov ecx [ebp-88h] +
mov eax [ecx] +
lea edx [ebp-84h] +
push edx  +
call dword ptr [eax+40h]  +
push dword ptr [ebp-82h]  +
call ds:ntohs  +
xor esi esi +
movzx ebx ax +
cmp [ebp-0C0h] esi +
jz loc_100EF16  +
test bl 1 +
jz loc_100EF16  +
mov eax [ebp-88h] +
inc ebx  +
cmp eax esi +
jz loc_100EF16  +
mov [ebp-88h] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-0C8h] +
mov [ebp-0C8h] ebx +
mov [ebp-0B4h] ebx +
mov [ebp-0A8h] esi +
mov esi [ebp-0BCh] +
mov dword ptr [ebp-0C4h] 0FFFFh +
mov [ebp-0B0h] eax +
mov dword ptr [ebp-0ACh] 1 +
xor ebx ebx +
jmp loc_100EF87  +
mov ecx [ebp-0B8h] +
mov [ebp-0ACh] eax +
mov eax [ecx] +
mov [ebp-0B0h] ecx +
mov [ebp-0B4h] eax +
mov [ebp-0A8h] ebx +
jmp loc_100EF87  +
lea ecx [ebp-0B4h] +
call sub_100EA04  +
test eax eax +
jl loc_100F050  +
cmp [ebp-88h] ebx +
jnz loc_100EFC2  +
push dword ptr [ebp-0B4h]  +
call ds:htons  +
mov ecx [ebp-9Ch] +
lea edx [ebp-88h] +
push edx  +
push dword ptr [ebp+14h]  +
mov [edi+2] ax +
mov eax [ecx] +
push edi  +
push 11h  +
call dword ptr [eax+14h]  +
test eax eax +
jge loc_100EFC2  +
cmp [esi] ebx +
jz loc_100F01D  +
push esi  +
jmp loc_100F012  +
cmp dword ptr [ebp+1Ch] 2 +
jnz loc_100F07A  +
cmp [ebp-8Ch] ebx +
jnz loc_100F07A  +
mov eax [ebp-0B4h] +
inc eax  +
push eax  +
call ds:htons  +
mov ecx [ebp-9Ch] +
lea edx [ebp-8Ch] +
push edx  +
mov edx [ebp+14h] +
and edx 0FFFFFFF7h +
push edx  +
push edi  +
mov [edi+2] ax +
mov eax [ecx] +
push 11h  +
call dword ptr [eax+14h]  +
test eax eax +
jge loc_100F07A  +
lea eax [esi+4] +
cmp [eax] ebx +
jz loc_100F01D  +
push eax  +
mov ecx [ebp-90h] +
call sub_101102E  +
add dword ptr [ebp-98h] 2 +
jmp loc_100EE33  +
***
mov eax [ebp-8Ch] +
cmp eax ebx +
jz loc_100F039  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-88h] +
cmp eax ebx +
jz loc_100F049  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_100F177  +
mov eax [ebp-8Ch] +
cmp eax ebx +
jz loc_100F060  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-88h] +
cmp eax ebx +
jz loc_100F070  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 0C00D0028h +
jmp loc_100F177  +
cmp [ebp-94h] ebx +
jz loc_100F0B7  +
cmp [esi] ebx +
jnz loc_100F0B7  +
mov ecx [ebp-88h] +
mov eax [ecx] +
lea edx [ebp-84h] +
push edx  +
call dword ptr [eax+40h]  +
mov ecx [ebp-90h] +
push esi  +
push dword ptr [ebp-0A0h]  +
lea eax [ebp-84h] +
push ebx  +
push ebx  +
push eax  +
call sub_1010F70  +
test eax eax +
jl loc_100F119  +
cmp dword ptr [ebp+1Ch] 2 +
mov eax [ebp-88h] +
mov ecx [ebp-0A4h] +
mov [ebp-88h] ebx +
mov [ecx] eax +
jnz loc_100F155  +
cmp [ebp-94h] ebx +
jz loc_100F140  +
add esi 4 +
cmp [esi] ebx +
jnz loc_100F140  +
mov ecx [ebp-8Ch] +
mov eax [ecx] +
lea edx [ebp-84h] +
push edx  +
call dword ptr [eax+40h]  +
mov eax [ebp-0A0h] +
mov ecx [ebp-90h] +
push esi  +
sub eax 0FFFFFF80h +
push eax  +
push ebx  +
push ebx  +
lea eax [ebp-84h] +
push eax  +
call sub_1010F70  +
test eax eax +
jge loc_100F140  +
mov eax [ebp-8Ch] +
cmp eax ebx +
jz loc_100F129  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-88h] +
cmp eax ebx +
jz loc_100F139  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 0C00D2EF9h +
jmp loc_100F177  +
mov eax [ebp-8Ch] +
mov ecx [ebp-0A4h] +
mov [ebp-8Ch] ebx +
mov [ecx+4] eax +
mov eax [ebp-8Ch] +
cmp eax ebx +
jz loc_100F165  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-88h] +
cmp eax ebx +
jz loc_100F175  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop ebx  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10082CB  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
mov esi [ebp+14h] +
test eax eax +
jl loc_100F1A7  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_100EC3B  +
push eax  +
mov ecx esi +
call sub_100E8E4  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100E93F  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100E95A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
lea eax [esi+28h] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_100F208  +
push dword ptr [esi+24h]  +
call ds:SetEvent  +
push 1  +
mov ecx esi +
call sub_100ED16  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100F1DF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_100C3C1  +
push [ebp+arg_4]  +
and dword ptr [esi+50h] 0 +
push [ebp+arg_0]  +
and dword ptr [esi+54h] 0 +
lea ecx [esi+58h] +
mov dword ptr [esi] offset off_1001F3C +
mov dword ptr [esi+8] offset off_1002238 +
call sub_10034B4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
sub ecx 8 +
jmp loc_100F2AA  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+50h] +
mov dword ptr [esi] offset off_1001F3C +
mov dword ptr [esi+8] offset off_1002238 +
test eax eax +
jz loc_100F295  +
push eax  +
call ??_V@YAXPAX@Z  +
pop ecx  +
lea ecx [esi+58h] +
call sub_1002970  +
mov ecx esi +
pop esi  +
jmp sub_100B710  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F275  +
test byte ptr [ebp+8] 1 +
jz loc_100F2C3  +
push esi  +
call sub_100B7BC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
xor ebx ebx +
mov edi ecx +
mov [ebp-4] ebx +
cmp [edi+10h] ebx +
jnz loc_100F2ED  +
mov eax 80004005h +
jmp loc_100F391  +
push esi  +
push 168h  +
call sub_100B3B9  +
cmp eax ebx +
jz loc_100F324  +
mov edx [ebp+8] +
lea esi [edx+2] +
mov cx [edx] +
inc edx  +
inc edx  +
cmp cx bx +
jnz loc_100F302  +
push dword ptr [ebp+10h]  +
sub edx esi +
push dword ptr [ebp+0Ch]  +
sar edx 1 +
push edi  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_100F223  +
jmp loc_100F326  +
xor eax eax +
push eax  +
lea eax [ebp-4] +
push eax  +
call sub_100B671  +
mov esi [ebp-4] +
cmp esi ebx +
jz loc_100F38B  +
cmp [esi+58h] ebx +
mov eax [esi] +
push esi  +
jl loc_100F388  +
call dword ptr [eax+4]  +
mov ecx [edi+10h] +
mov ebx [ecx] +
mov eax esi +
cdq   +
push edx  +
push eax  +
add edi 4 +
push edi  +
push dword ptr [ebp+8]  +
push ecx  +
call dword ptr [ebx+0Ch]  +
mov edi eax +
test edi edi +
jge loc_100F36D  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
jmp loc_100F390  +
mov ecx [ebp+14h] +
test ecx ecx +
jz loc_100F37A  +
mov eax esi +
xor esi esi +
mov [ecx] eax +
test esi esi +
jz loc_100F384  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
xor eax eax +
jmp loc_100F390  +
call dword ptr [eax+8]  +
mov eax 8007000Eh +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1010B59  +
mov dword ptr [esi] offset off_1002258 +
mov dword ptr [esi+4] offset off_10023D4 +
mov eax esi +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_1002258 +
mov dword ptr [ecx+4] offset off_10023D4 +
jmp sub_1010BC9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 230h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100F3F3  +
mov ecx eax +
call sub_100F39C  +
mov esi eax +
jmp loc_100F3F5  +
xor esi esi +
test esi esi +
jnz loc_100F400  +
mov eax 8007000Eh +
jmp loc_100F429  +
push edi  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+name]  +
push [ebp+argp]  +
call sub_1010895  +
mov edi eax +
test edi edi +
jge loc_100F421  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
jmp loc_100F428  +
mov eax [ebp+arg_C] +
mov [eax] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
mov eax [edx+34h] +
test eax eax +
jl loc_100F46A  +
cmp dword ptr [edx+50h] 2 +
jnz loc_100F468  +
cmp dword_10166E8 0 +
jz loc_100F468  +
push 0  +
push 0  +
push 7010h  +
push 0FFFFh  +
push dword ptr [ecx+0Ch]  +
call ds:setsockopt  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jnz loc_100F4B4  +
call ds:WSAGetLastError  +
cmp eax 3E5h +
jz loc_100F4B0  +
cmp eax 2738h +
jnz loc_100F4A0  +
cmp [ebp+arg_0] 0Ch +
jz loc_100F4B0  +
cmp [ebp+arg_0] 0Dh +
jz loc_100F4B0  +
test eax eax +
jle loc_100F4BD  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100F4BD  +
xor eax eax +
jmp loc_100F4BD  +
neg eax  +
sbb eax eax +
and eax 80004005h +
pop ebp  +
retn 8  +
***
sub dword ptr [esp+4] 4 +
jmp loc_101012B  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10100F7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F3BC  +
test byte ptr [ebp+8] 1 +
jz loc_100F4FE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
xor ebx ebx +
mov [ebp-10h] eax +
mov eax [ebp+8] +
push edi  +
mov edi ecx +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
mov [ebp-0Ch] eax +
cmp esi ebx +
jz loc_100F538  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov dword ptr [esi+38h] offset loc_10106CE +
push ebx  +
cmp [ebp+10h] ebx +
jnz loc_100F562  +
lea eax [esi+10h] +
push eax  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
push eax  +
push 1  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [edi+0Ch]  +
call dword_1016820  +
jmp loc_100F58A  +
lea ecx [esi+10h] +
push ecx  +
lea eax [esi+54h] +
push eax  +
push dword ptr [ebp+10h]  +
mov dword ptr [eax] 80h +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
push eax  +
push 1  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [edi+0Ch]  +
call dword_1016824  +
push eax  +
push dword ptr [esi+50h]  +
mov ecx edi +
call sub_100F473  +
mov edi eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi [esi+104h] +
jle loc_100F5EB  +
call sub_100294D  +
cmp edi 1FFFFFFFh +
ja loc_100F5E5  +
xor ecx ecx +
push 8  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [esi] eax +
mov [esi+104h] edi +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+4] +
mov dword ptr [esi+104h] 20h +
mov [esi] eax +
call sub_100F5AB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [ebp+0Ch] +
push edi  +
mov edi ecx +
test ebx ebx +
jnz loc_100F648  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
push esi  +
push ebx  +
lea ecx [ebp-10Ch] +
call sub_100F5F8  +
cmp dword ptr [ebp-10Ch] 0 +
jnz loc_100F673  +
mov esi 8007000Eh +
lea ecx [ebp-10Ch] +
call sub_100294D  +
mov eax esi +
pop esi  +
jmp loc_100F642  +
***
xor ecx ecx +
test ebx ebx +
jbe loc_100F69C  +
mov eax [ebp+8] +
mov edx [eax+4] +
mov esi [ebp-10Ch] +
mov [esi+ecx*8] edx +
mov edx [eax] +
mov esi [ebp-10Ch] +
mov [esi+ecx*8+4] edx +
inc ecx  +
add eax 0Ch +
cmp ecx ebx +
jb loc_100F67C  +
mov esi [ebp+14h] +
test esi esi +
jz loc_100F6A9  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [ebp+10h] +
test eax eax +
jnz loc_100F6D5  +
push eax  +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+10h] +
and eax ecx +
push eax  +
push 0  +
lea eax [ebp-4] +
push eax  +
push ebx  +
push dword ptr [ebp-10Ch]  +
push dword ptr [edi+0Ch]  +
call dword_1016810  +
jmp loc_100F720  +
movzx ecx word ptr [eax] +
push 2  +
pop edx  +
cmp dx cx +
jnz loc_100F6E9  +
mov dword ptr [ebp+0Ch] 10h +
jmp loc_100F6F8  +
push 17h  +
pop edx  +
cmp dx cx +
jnz loc_100F72F  +
mov dword ptr [ebp+0Ch] 1Ch +
push 0  +
mov ecx esi +
neg ecx  +
lea edx [esi+10h] +
sbb ecx ecx +
and ecx edx +
push ecx  +
push dword ptr [ebp+0Ch]  +
push eax  +
push 0  +
lea eax [ebp-4] +
push eax  +
push ebx  +
push dword ptr [ebp-10Ch]  +
push dword ptr [edi+0Ch]  +
call dword_1016814  +
push eax  +
push dword ptr [esi+50h]  +
mov ecx edi +
call sub_100F473  +
mov edi eax +
jmp loc_100F734  +
mov edi 80070057h +
test esi esi +
jz loc_100F73E  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov esi edi +
jmp loc_100F663  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100C3C1  +
mov eax [ebp+arg_0] +
mov [esi+50h] eax +
xor eax eax +
mov [esi+60h] eax +
mov [esi+64h] eax +
mov [esi+78h] eax +
mov dword ptr [esi] offset off_1001F3C +
mov dword ptr [esi+8] offset off_10022B4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
sub ecx 8 +
jmp loc_100F7E6  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+50h] +
mov dword ptr [esi] offset off_1001F3C +
mov dword ptr [esi+8] offset off_10022B4 +
cmp eax 0Ah +
jz loc_100F7B6  +
cmp eax 0Bh +
jnz loc_100F7C8  +
mov eax [esi+60h] +
test eax eax +
jz loc_100F7C8  +
push eax  +
call ??3@YAXPAX@Z  +
and dword ptr [esi+60h] 0 +
pop ecx  +
mov eax [esi+78h] +
test eax eax +
jz loc_100F7D9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
and dword ptr [esi+78h] 0 +
mov ecx esi +
pop esi  +
jmp sub_100B710  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F797  +
test byte ptr [ebp+8] 1 +
jz loc_100F7FF  +
push esi  +
call sub_100B7BC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0FFFFFFFFh +
mov [ebp-8] edi +
mov [ebp-0Ch] edi +
jnz loc_100F82F  +
mov eax 80070006h +
jmp loc_100F9E3  +
cmp [ebp+0Ch] edi +
jnz loc_100F83E  +
mov eax 80070057h +
jmp loc_100F9E3  +
push 80h  +
mov [ebp-4] edi +
call sub_100B3B9  +
cmp eax edi +
jz loc_100F861  +
push dword ptr [ebp+10h]  +
mov ecx eax +
push dword ptr [ebp+0Ch]  +
push esi  +
push 1  +
call sub_100F74A  +
jmp loc_100F863  +
xor eax eax +
push ebx  +
push eax  +
lea eax [ebp-0Ch] +
push eax  +
call sub_100B671  +
mov ebx [ebp-0Ch] +
cmp ebx edi +
jnz loc_100F87F  +
mov eax 8007000Eh +
jmp loc_100F9E2  +
cmp dword ptr [esi+10h] 6 +
jz loc_100F894  +
mov ecx [ebp+8] +
push 16h  +
pop eax  +
cmp ax [ecx] +
jnz loc_100F921  +
cmp dword_10166E8 edi +
jnz loc_100F909  +
lea edi [esi+11Ch] +
mov ecx [edi] +
test ecx ecx +
jnz loc_100F8BF  +
push edi  +
call sub_1012D72  +
mov ecx eax +
call sub_10125E3  +
test eax eax +
jl loc_100F8D1  +
mov ecx [edi] +
test ecx ecx +
jz loc_100F8D1  +
lea eax [esi+4] +
push eax  +
push 10h  +
push dword ptr [esi+0Ch]  +
call sub_1012982  +
test eax eax +
jge loc_100F8E1  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax 80004005h +
jmp loc_100F9E2  +
lea edi [esi+210h] +
mov ecx edi +
call sub_100B61C  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
push ebx  +
lea ecx [esi+120h] +
call sub_1012332  +
mov ecx edi +
call sub_100B648  +
xor edi edi +
mov ecx [ebp+8] +
mov dword ptr [ebx+50h] 2 +
and dword ptr [esi+118h] 0FFFFFFEFh +
mov dword ptr [ebp-8] 1 +
movzx eax word ptr [ecx] +
push 2  +
pop edx  +
cmp dx ax +
jnz loc_100F948  +
push dword ptr [ecx+4]  +
mov dword ptr [ebp-4] 10h +
call ds:ntohl  +
and eax 0F0000000h +
cmp eax 0E0000000h +
jmp loc_100F95F  +
push 17h  +
pop edx  +
cmp dx ax +
jnz loc_100F9EC  +
cmp byte ptr [ecx+8] 0FFh +
mov dword ptr [ebp-4] 1Ch +
jnz loc_100F9E9  +
test byte ptr [esi+118h] 2 +
jz loc_100F979  +
lea eax [esi+18h] +
push eax  +
mov ecx esi +
call sub_10103BF  +
push 1  +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-4]  +
push dword ptr [ebp+8]  +
push dword ptr [esi+0Ch]  +
call dword_1016828  +
cmp eax 0FFFFFFFFh +
jz loc_100FA45  +
mov eax 80h +
cmp [ebp-4] eax +
jnb loc_100F9A4  +
mov eax [ebp-4] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [esi+98h] +
push eax  +
call memcpy  +
add esp 0Ch +
or dword ptr [esi+118h] 4 +
cmp [ebp-8] edi +
jnz loc_100F9CB  +
push edi  +
mov ecx ebx +
call sub_100E8E4  +
mov eax [ebp+14h] +
cmp eax edi +
jz loc_100F9DA  +
mov [eax] ebx +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov ecx [ebp+8] +
cmp [ebp-8] edi +
jz loc_100FA1E  +
cmp dword_10166E8 edi +
jz loc_100FA1E  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
lea eax [ebx+10h] +
push eax  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-4]  +
push dword ptr [ebp+8]  +
push dword ptr [esi+0Ch]  +
call dword_10166E8  +
neg eax  +
sbb eax eax +
neg eax  +
dec eax  +
jmp loc_100FA3C  +
test byte ptr [esi+118h] 10h +
jnz loc_100FA3A  +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-4]  +
push ecx  +
push dword ptr [esi+0Ch]  +
call dword_101681C  +
jmp loc_100FA3C  +
xor eax eax +
cmp eax 0FFFFFFFFh +
jnz loc_100F9BE  +
call ds:WSAGetLastError  +
cmp dword ptr [esi+10h] 6 +
jz loc_100FA5C  +
mov edx [ebp+8] +
push 16h  +
pop ecx  +
cmp cx [edx] +
jnz loc_100FA72  +
cmp eax 2733h +
jz loc_100F9BE  +
cmp eax 3E5h +
jz loc_100F9BE  +
cmp eax edi +
jle loc_100FA80  +
and eax 0FFFFh +
or eax 80070000h +
cmp dword ptr [ebp-8] 1 +
mov [ebp+8] eax +
jnz loc_100FAD5  +
cmp dword_10166E8 edi +
jnz loc_100FACF  +
mov ecx [esi+11Ch] +
push edi  +
push edi  +
push dword ptr [esi+0Ch]  +
call sub_1012982  +
lea edi [esi+210h] +
mov ecx edi +
call sub_100B61C  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [esi+120h] +
call sub_10123D9  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx edi +
call sub_100B648  +
jmp loc_100FAD5  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
mov eax [ebp+8] +
jmp loc_100F9E2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov eax edi +
or eax [ebp+arg_8] +
mov esi ecx +
jnz loc_100FB1C  +
mov edi [ebp+arg_0] +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov esi [esi+8] +
mov eax [esi] +
push 0FFFFFFFFh  +
lea ecx [edi+8] +
push ecx  +
push 0  +
push 0  +
push esi  +
call dword ptr [eax+18h]  +
jmp loc_100FB8F  +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jz loc_100FB9F  +
cmp [ebp+arg_8] ebx +
jg loc_100FB53  +
jl loc_100FB2E  +
cmp edi ebx +
jnb loc_100FB53  +
mov eax [esi+0Ch] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
push 0FFFFFFFFh  +
push 0FFFFD8F0h  +
push [ebp+arg_8]  +
push edi  +
call __allmul  +
add [ebp+var_8] eax +
adc [ebp+var_4] edx +
jmp loc_100FB68  +
push ebx  +
push 2710h  +
push [ebp+arg_8]  +
push edi  +
call __allmul  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
mov edi [ebp+arg_0] +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov ecx [esi+0Ch] +
push ebx  +
push [ebp+arg_C]  +
mov eax edi +
push ebx  +
push ebx  +
cdq   +
push edx  +
push eax  +
mov eax [ecx] +
add esi 4 +
push esi  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push ecx  +
call dword ptr [eax+10h]  +
mov esi eax +
test esi esi +
jge loc_100FB9B  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax esi +
jmp loc_100FBA4  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+0Ch] 0 +
jz loc_100FBE1  +
mov eax [ecx+0Ch] +
mov ecx [eax] +
push 0  +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_100FBE6  +
mov eax [ebp+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
jmp loc_100FBE6  +
mov eax 80070057h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+1Ch] +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
mov edx [eax] +
xor ecx ecx +
add esi 8 +
push esi  +
push ecx  +
push ecx  +
push ecx  +
mov ecx eax +
call dword ptr [edx+8]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100FAE8  +
pop ebp  +
retn 10h  +
***
mov dword ptr [eax] offset off_10022C8 +
mov dword ptr [eax+4] offset off_10022B8 +
retn   +
***
xor eax eax +
inc eax  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100FC62  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100FC57  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 50h  +
mov edi ecx +
call sub_100B3B9  +
test eax eax +
jz loc_100FCBF  +
push dword ptr [ebp+0Ch]  +
mov ecx eax +
push dword ptr [ebp+8]  +
push edi  +
call sub_100C3C1  +
mov esi eax +
jmp loc_100FCC1  +
xor esi esi +
test esi esi +
jnz loc_100FCCC  +
mov eax 8007000Eh +
jmp loc_100FCEC  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
push 0  +
push dword ptr [ebp+14h]  +
mov ecx edi +
push dword ptr [ebp+10h]  +
push esi  +
call sub_100FAE8  +
mov edi eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi ds:GetCurrentThreadId +
mov esi ecx +
inc ebx  +
jmp loc_100FD2E  +
cmp dword ptr [esi] 0 +
jz loc_100FD1F  +
push ebx  +
call ds:Sleep  +
add ebx ebx +
cmp ebx 64h +
jbe loc_100FD1F  +
push 64h  +
pop ebx  +
push 0  +
push 1  +
push esi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_100FD3A  +
call edi  +
cmp [esi+8] eax +
jnz loc_100FD09  +
inc dword ptr [esi+4]  +
jmp loc_100FD46  +
mov dword ptr [esi+4] 1 +
call edi  +
mov [esi+8] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
cmp [esi+8] eax +
jnz loc_100FD6F  +
dec dword ptr [esi+4]  +
jnz loc_100FD6F  +
and dword ptr [esi+8] 0 +
push esi  +
call ds:InterlockedDecrement  +
pop esi  +
retn   +
***
call __SEH_prolog4_GS  +
and [ebp+ms_exc.disabled] 0 +
lea eax [ebp+WSAData] +
push eax  +
push 202h  +
call ds:WSAStartup  +
mov [ebp+var_1B0] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
test eax eax +
jz loc_100FDC2  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_100FDD9  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100FDD9  +
xor eax eax +
jmp loc_100FDD9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 80004005h +
call __SEH_epilog4_GS  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
call ds:WSACleanup  +
jmp loc_100FE03  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx offset unk_101684C +
push esi  +
mov ecx ebx +
call sub_100FCF7  +
xor esi esi +
mov [ebp+var_4] esi +
cmp dword_101683C esi +
jnz loc_100FE50  +
call sub_100FD76  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_100FF14  +
mov dword_101683C 1 +
cmp dword_1016840 esi +
jnz loc_100FF14  +
push edi  +
push offset stru_10166F0  +
mov stru_10166F0.dwOSVersionInfoSize 114h +
call ds:GetVersionExW  +
push offset aWs2_32  +
call ds:LoadLibraryA  +
mov edi eax +
cmp edi esi +
jz loc_100FF22  +
mov esi ds:GetProcAddress +
push offset aWsaenumprotoco  +
push edi  +
call esi  +
push offset aWsaioctl  +
push edi  +
mov dword_1016808 eax +
call esi  +
push offset aWsasend  +
push edi  +
mov dword_101680C eax +
call esi  +
push offset aWsasendto  +
push edi  +
mov dword_1016810 eax +
call esi  +
push offset aWsasocketa  +
push edi  +
mov dword_1016814 eax +
call esi  +
push offset aWsaconnect  +
push edi  +
mov dword_1016818 eax +
call esi  +
push offset aWsarecv  +
push edi  +
mov dword_101681C eax +
call esi  +
push offset aWsarecvfrom  +
push edi  +
mov dword_1016820 eax +
call esi  +
push offset aWsajoinleaf  +
push edi  +
mov dword_1016824 eax +
call esi  +
push edi  +
mov dword_1016828 eax +
call ds:FreeLibrary  +
mov dword_1016840 1 +
pop edi  +
mov ecx ebx +
call sub_100FD4F  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp stru_10166F0.dwPlatformId 2 +
jnz loc_100FF09  +
cmp stru_10166F0.dwMajorVersion 4 +
jb loc_100FF09  +
call ds:GetLastError  +
cmp eax esi +
jle loc_100FF48  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_100FF13  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ecx offset unk_101684C +
call sub_100FCF7  +
xor eax eax +
inc eax  +
xor ebx ebx +
mov dword_1016838 eax +
cmp dword_101680C ebx +
jz loc_10100D9  +
push esi  +
push edi  +
mov edi eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
push offset aSoftwareMicr_3  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov esi 0C8000006h +
test eax eax +
jnz loc_100FFF0  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aUseTransmitpac  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100FFE3  +
cmp [ebp+Type] 4 +
jnz loc_100FFE3  +
cmp dword ptr [ebp+Data] ebx +
setnz al  +
mov edi eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp edi ebx +
jz loc_1010021  +
push ebx  +
push ebx  +
lea eax [ebp+var_2C] +
push eax  +
push 4  +
push offset dword_1016834  +
push 10h  +
push offset unk_10160FC  +
push esi  +
push [ebp+arg_0]  +
call dword_101680C  +
mov dword ptr [ebp+Data] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1010027  +
call ds:WSAGetLastError  +
mov dword ptr [ebp+Data] eax +
jmp loc_1010027  +
mov dword_1016834 ebx +
push ebx  +
mov eax 0CBACh +
mov [ebp+var_20] ax +
push ebx  +
mov edi 11CFh +
mov eax edi +
mov [ebp+var_1E] ax +
lea eax [ebp+var_2C] +
push eax  +
push 4  +
push offset unk_101682C  +
push 10h  +
lea eax [ebp+var_24] +
push eax  +
push esi  +
push [ebp+arg_0]  +
mov [ebp+var_24] 0B5367DF1h +
mov [ebp+var_1C] 95h +
mov [ebp+var_1B] 0CAh +
mov [ebp+var_1A] bl +
mov [ebp+var_19] 80h +
mov [ebp+var_18] 5Fh +
mov [ebp+var_17] 48h +
mov [ebp+var_16] 0A1h +
mov [ebp+var_15] 92h +
call dword_101680C  +
push ebx  +
mov dword ptr [ebp+Data] eax +
push ebx  +
mov eax 0CBACh +
mov [ebp+var_10] ax +
lea eax [ebp+var_2C] +
push eax  +
push 4  +
push offset unk_1016830  +
push 10h  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
push [ebp+arg_0]  +
mov [ebp+var_14] 0B5367DF2h +
mov [ebp+var_E] di +
mov [ebp+var_C] 95h +
mov [ebp+var_B] 0CAh +
mov [ebp+var_A] bl +
mov [ebp+var_9] 80h +
mov [ebp+var_8] 5Fh +
mov [ebp+var_7] 48h +
mov [ebp+var_6] 0A1h +
mov [ebp+var_5] 92h +
call dword_101680C  +
pop edi  +
mov dword_10166E8 ebx +
pop esi  +
mov ecx offset unk_101684C +
call sub_100FD4F  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_101011E  +
test esi esi +
jz loc_101011E  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+50h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_1001944 +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jnz loc_1010157  +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1010162  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+argp] +
push esi  +
mov esi ecx +
cmp eax 100h +
jz loc_1010180  +
mov [esi+10h] eax +
mov eax [ebp+arg_4] +
and dword ptr [esi+118h] 0FFFFFFFEh +
mov [esi+14h] eax +
lea eax [ebp+argp] +
push eax  +
push 8004667Eh  +
push dword ptr [esi+0Ch]  +
mov [ebp+argp] 1 +
call ds:ioctlsocket  +
cmp eax 0FFFFFFFFh +
jnz loc_10101B2  +
mov eax 80004005h +
jmp loc_10101D6  +
mov eax dword_10166BC +
mov eax [eax+14h] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push 0  +
push dword ptr [esi+0Ch]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
mov eax dword_10166BC +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push ebx  +
mov ebx ecx +
mov [ebp-88h] eax +
test eax eax +
jnz loc_101020F  +
mov eax 80070057h +
jmp loc_10102A5  +
mov eax [ebx+0Ch] +
cmp eax 0FFFFFFFFh +
jnz loc_1010221  +
mov eax 80070006h +
jmp loc_10102A5  +
test byte ptr [ebx+118h] 8 +
push esi  +
push edi  +
jnz loc_1010293  +
lea ecx [ebp-8Ch] +
push ecx  +
lea ecx [ebp-84h] +
push ecx  +
push eax  +
mov dword ptr [ebp-8Ch] 80h +
call ds:getsockname  +
cmp eax 0FFFFFFFFh +
jnz loc_1010266  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_10102A3  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10102A3  +
push 16h  +
pop eax  +
cmp ax [ebp-84h] +
jnz loc_101027E  +
mov eax [ebx+5Ch] +
mov [ebp-40h] eax +
mov eax [ebx+60h] +
mov [ebp-3Ch] eax +
or dword ptr [ebx+118h] 8 +
push 20h  +
lea edi [ebx+18h] +
pop ecx  +
lea esi [ebp-84h] +
movs   +
mov edi [ebp-88h] +
push 20h  +
lea esi [ebx+18h] +
pop ecx  +
movs   +
xor eax eax +
pop edi  +
pop esi  +
mov ecx [ebp-4] +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jnz loc_10102D0  +
mov eax 80070057h +
jmp loc_1010330  +
mov eax [esi+0Ch] +
cmp eax 0FFFFFFFFh +
jnz loc_10102DF  +
mov eax 80070006h +
jmp loc_1010330  +
test byte ptr [esi+118h] 4 +
jnz loc_1010323  +
lea ecx [ebp+8] +
push ecx  +
lea ecx [esi+98h] +
push ecx  +
push eax  +
mov dword ptr [ebp+8] 80h +
call ds:getpeername  +
cmp eax 0FFFFFFFFh +
jnz loc_101031C  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_1010330  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1010330  +
or dword ptr [esi+118h] 4 +
push 20h  +
add esi 98h +
pop ecx  +
movs   +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
cmp [eax] cx +
jnz loc_1010378  +
cmp [eax+2] cx +
jnz loc_1010378  +
cmp [eax+4] cx +
jnz loc_1010378  +
cmp [eax+6] cx +
jnz loc_1010378  +
cmp [eax+8] cx +
jnz loc_1010378  +
cmp [eax+0Ah] cx +
jnz loc_1010378  +
cmp [eax+0Ch] cx +
jnz loc_1010378  +
cmp [eax+0Eh] cx +
jnz loc_1010378  +
mov al 1 +
jmp loc_101037A  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+34h] +
test eax eax +
jl loc_1010394  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+34h] +
test eax eax +
jl loc_10103B6  +
mov eax [ecx+58h] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
movzx edx word ptr [eax] +
push esi  +
push 2  +
pop esi  +
cmp si dx +
jnz loc_10103FB  +
mov eax [eax+4] +
push 4  +
mov dword ptr [ebp+optval] eax +
lea eax [ebp+optval] +
push eax  +
push 9  +
push 0  +
push dword ptr [ecx+0Ch]  +
call ds:setsockopt  +
jmp loc_1010422  +
push 17h  +
pop esi  +
cmp si dx +
jnz loc_1010441  +
push edi  +
lea esi [eax+8] +
lea edi [ebp+var_14] +
movs   +
push 10h  +
movs   +
lea eax [ebp+var_14] +
push eax  +
push 9  +
movs   +
push 29h  +
push dword ptr [ecx+0Ch]  +
movs   +
call ds:setsockopt  +
pop edi  +
cmp eax 0FFFFFFFFh +
jnz loc_101043D  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_1010446  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1010446  +
xor eax eax +
jmp loc_1010446  +
mov eax 80004001h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10082CB  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_10104FF  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_10104FF  +
mov eax [ebp+8] +
cmp eax 1 +
jnz loc_1010486  +
mov eax 80070032h +
jmp loc_1010504  +
test eax eax +
jz loc_101047F  +
cmp eax 2 +
jnz loc_10104E4  +
push 4  +
pop esi  +
cmp [ebx] esi +
jnb loc_101049F  +
mov [ebx] esi +
mov eax 8007007Ah +
jmp loc_1010504  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp+8] +
push eax  +
push 2003h  +
mov edi 0FFFFh +
push edi  +
push dword ptr [ecx+0Ch]  +
mov [ebp+10h] esi +
call ds:getsockopt  +
cmp eax 0FFFFFFFFh +
jnz loc_10104D6  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_1010504  +
and eax edi +
or eax 80070000h +
jmp loc_1010504  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov [ebx] esi +
xor eax eax +
jmp loc_1010504  +
cmp eax 3 +
jz loc_101047F  +
xor ecx ecx +
cmp eax 64h +
setnz cl  +
dec ecx  +
and ecx 0FFFFFFDBh +
add ecx 80070057h +
mov eax ecx +
jmp loc_1010504  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 0Ch +
push esi  +
push edi  +
xor esi esi +
cmp eax 64h +
mov edi ecx +
mov ecx [ebp+0Ch] +
jge loc_1010535  +
cmp dword ptr [ebp+10h] 4 +
jnz loc_10106BE  +
mov esi [ecx] +
cmp eax 1 +
jnz loc_1010576  +
push 4  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
push 1002h  +
mov esi 0FFFFh +
push esi  +
push dword ptr [edi+0Ch]  +
call ds:setsockopt  +
cmp eax 0FFFFFFFFh +
jnz loc_10105B2  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_10106C3  +
and eax esi +
or eax 80070000h +
jmp loc_10106C3  +
test eax eax +
jnz loc_10105B9  +
test esi esi +
setz al  +
mov [ebp+10h] eax +
lea eax [ebp+10h] +
push eax  +
push 8004667Eh  +
push dword ptr [edi+0Ch]  +
call ds:ioctlsocket  +
cmp eax 0FFFFFFFFh +
jnz loc_10105A3  +
mov eax 80004005h +
jmp loc_10106C3  +
lea eax [edi+118h] +
mov ecx [eax] +
xor ecx esi +
and ecx 1 +
xor [eax] ecx +
xor eax eax +
jmp loc_10106C3  +
cmp eax 2 +
jnz loc_10105C8  +
mov eax 80070032h +
jmp loc_10106C3  +
cmp eax 3 +
jnz loc_1010600  +
push 4  +
lea eax [ebp+10h] +
push eax  +
mov [ebp+10h] esi +
push 1  +
push 6  +
push dword ptr [edi+0Ch]  +
call ds:setsockopt  +
cmp eax 0FFFFFFFFh +
jnz loc_10105B2  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_10106C3  +
and eax 0FFFFh +
jmp loc_101056C  +
***
cmp eax 4 +
jnz loc_1010619  +
xor eax eax +
test esi esi +
setnz al  +
push 4  +
mov [ebp+10h] eax +
lea eax [ebp+10h] +
push eax  +
push 9  +
jmp loc_10105D8  +
***
cmp eax 64h +
jnz loc_10106BE  +
cmp dword ptr [ebp+10h] 8 +
jnz loc_10106BE  +
mov eax [ecx] +
xor edx edx +
test eax eax +
setnz dl  +
mov [ebp-8] eax +
mov eax [ecx+4] +
mov [ebp-4] eax +
mov eax dword_101680C +
push ebx  +
xor ecx ecx +
xor ebx ebx +
mov [ebp-0Ch] edx +
mov esi 0FFFFh +
cmp eax ecx +
jz loc_1010686  +
push ecx  +
push ecx  +
lea edx [ebp+10h] +
push edx  +
push ecx  +
push ecx  +
push 0Ch  +
lea ecx [ebp-0Ch] +
push ecx  +
push 98000004h  +
push dword ptr [edi+0Ch]  +
call eax  +
cmp eax 0FFFFFFFFh +
jnz loc_10106B9  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_1010682  +
and eax esi +
or eax 80070000h +
mov ebx eax +
jmp loc_101068B  +
mov ebx 80004005h +
test ebx ebx +
jge loc_10106B9  +
push 4  +
lea eax [ebp-0Ch] +
push eax  +
push 8  +
push esi  +
push dword ptr [edi+0Ch]  +
call ds:setsockopt  +
cmp eax 0FFFFFFFFh +
jnz loc_10106B9  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_10106B7  +
and eax esi +
or eax 80070000h +
mov ebx eax +
mov eax ebx +
pop ebx  +
jmp loc_10106C3  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov edx [ebp+10h] +
lea eax [ecx-10h] +
neg ecx  +
sbb ecx ecx +
and ecx eax +
mov eax [ebp+0Ch] +
mov [ecx+58h] eax +
neg eax  +
sbb eax eax +
and eax 3FF2FFEBh +
mov [ecx+5Ch] edx +
add eax 0C00D0015h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call ds:GetProcessHeap  +
cmp dword ptr [esi+4] 0 +
mov [ebp+hHeap] eax +
jz loc_101073B  +
push edi  +
mov eax [esi+4] +
mov edi [eax] +
lea ecx [esi+0Ch] +
cmp eax ecx +
jz loc_1010733  +
push eax  +
push 0  +
push [ebp+hHeap]  +
call ds:HeapFree  +
mov [esi+4] edi +
test edi edi +
jnz loc_101071B  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [eax] +
push esi  +
mov esi ecx +
cmp ebx 0FFFFFFFFh +
jz loc_10107D1  +
or dword ptr [eax] 0FFFFFFFFh +
push edi  +
lea edi [esi+210h] +
mov ecx edi +
call sub_100B61C  +
jmp loc_1010796  +
and [ebp+arg_0] 0 +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+120h] +
call sub_1012386  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1010796  +
push 800705B4h  +
call sub_100E8E4  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [esi+208h] 0 +
ja loc_1010769  +
mov ecx edi +
call sub_100B648  +
push 1  +
push ebx  +
call ds:shutdown  +
push ebx  +
call ds:closesocket  +
mov eax dword_10166BC +
mov eax [eax+14h] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+20h]  +
mov eax dword_10166BC +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+10h] 10h +
jz loc_10107F5  +
mov eax 80004005h +
jmp locret_1010862  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea edi [esi+20Ch] +
mov ecx edi +
call sub_100B61C  +
cmp dword ptr [esi+204h] 0 +
jbe loc_101081F  +
lea eax [ebp-4] +
push eax  +
lea ecx [esi+11Ch] +
call sub_1012386  +
mov ecx edi +
call sub_100B648  +
mov eax [ebp+0Ch] +
cmp eax [esi+8] +
jnz loc_1010846  +
lea ecx [esi-4] +
neg ecx  +
sbb ecx ecx +
and ecx esi +
push ecx  +
mov ecx [esi+118h] +
push 0  +
push eax  +
call sub_1012982  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
test ecx ecx +
jz loc_1010860  +
push dword ptr [ebp+14h]  +
call sub_100E8E4  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
leave   +
retn 10h  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0E8h] ecx +
mov [eax+0E4h] ecx +
mov [eax+0E0h] ecx +
mov [eax+0DCh] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
cmp [ebp+name] 0 +
push esi  +
mov esi ecx +
jnz loc_10108B0  +
mov eax 80070057h +
jmp loc_1010B40  +
call sub_100FE15  +
test eax eax +
jl loc_1010B40  +
push ebx  +
push edi  +
push 0  +
push 3  +
lea ecx [esi+120h] +
call sub_1012465  +
mov ecx [esi+118h] +
mov eax [esi+0Ch] +
mov edi [ebp+arg_8] +
mov ebx [esi+118h] +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
shr edi 3 +
mov [ebp+var_4] eax +
shl edi 4 +
mov eax ecx +
xor edi ecx +
shl eax 1Eh +
sar eax 1Fh +
and edi 10h +
xor edi ecx +
mov [ebp+var_14] eax +
mov eax [ebp+name] +
shl ebx 1Bh +
mov [esi+118h] edi +
movzx ecx word ptr [eax] +
sar ebx 1Fh +
dec ecx  +
dec ecx  +
jz loc_101094D  +
sub ecx 15h +
jz loc_1010924  +
mov edi 80070057h +
jmp loc_1010AF2  +
xor ecx ecx +
cmp [ebp+argp] 6 +
mov [ebp+namelen] 1Ch +
setnz cl  +
add eax 8 +
push eax  +
inc ecx  +
mov [ebp+type] ecx +
call sub_101033B  +
xor ecx ecx +
test al al +
mov eax [ebp+name] +
setz cl  +
jmp loc_1010969  +
xor ecx ecx +
cmp [ebp+argp] 6 +
mov [ebp+namelen] 10h +
setnz cl  +
inc ecx  +
mov [ebp+type] ecx +
xor ecx ecx +
cmp [eax+4] ecx +
setnz cl  +
add ecx ecx +
xor ecx edi +
and ecx 2 +
xor edx edx +
xor ecx edi +
inc edx  +
cmp [ebp+argp] 11h +
mov [esi+118h] ecx +
jnz loc_1010984  +
push 15h  +
pop edx  +
mov ecx dword_1016818 +
movzx eax word ptr [eax] +
test ecx ecx +
jz loc_10109A1  +
push edx  +
push 0  +
push 0  +
push [ebp+argp]  +
push [ebp+type]  +
push eax  +
call ecx  +
jmp loc_10109AE  +
push [ebp+argp]  +
push [ebp+type]  +
push eax  +
call ds:socket  +
mov [esi+0Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10109C7  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_1010A0A  +
and eax 0FFFFh +
jmp loc_1010A05  +
mov ecx [ebp+arg_8] +
mov edx [ebp+name] +
shr ecx 1 +
not ecx  +
and ecx 1 +
push 16h  +
mov dword ptr [ebp+optval] ecx +
pop ecx  +
mov edi 0FFFFh +
cmp cx [edx] +
jz loc_1010A11  +
push 4  +
lea ecx [ebp+optval] +
push ecx  +
push 4  +
push edi  +
push eax  +
call ds:setsockopt  +
cmp eax 0FFFFFFFFh +
jnz loc_1010A11  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_1010A0A  +
and eax edi +
or eax 80070000h +
mov edi eax +
jmp loc_1010AF2  +
cmp [ebp+argp] 11h +
jnz loc_1010A36  +
test byte ptr [ebp+arg_8] 4 +
jz loc_1010A36  +
push 4  +
lea eax [ebp+arg_8] +
push eax  +
push 0FFFFFFFBh  +
push edi  +
push dword ptr [esi+0Ch]  +
mov [ebp+arg_8] 1 +
call ds:setsockopt  +
push [ebp+namelen]  +
push [ebp+name]  +
push dword ptr [esi+0Ch]  +
call ds:bind  +
cmp eax 0FFFFFFFFh +
jnz loc_1010AA2  +
call ds:WSAGetLastError  +
cmp eax 271Dh +
jz loc_1010A5E  +
cmp eax 2740h +
jnz loc_10109F9  +
cmp [ebp+var_4] 0FFFFFFFFh +
jz loc_10109F9  +
cmp dword ptr [ebp+optval] 0 +
jz loc_10109F9  +
push dword ptr [esi+0Ch]  +
call ds:closesocket  +
mov eax [ebp+var_4] +
mov [esi+0Ch] eax +
mov eax [ebp+var_14] +
and ebx 1 +
and eax 1 +
shl ebx 3 +
or ebx eax +
mov eax [esi+118h] +
and eax 0FFFFFFEDh +
add ebx ebx +
or ebx eax +
xor eax eax +
mov [esi+118h] ebx +
inc eax  +
jmp loc_1010B3E  +
lea eax [ebp+var_18] +
push eax  +
lea eax [esi+18h] +
push eax  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_18] 80h +
call ds:getsockname  +
cmp eax 0FFFFFFFFh +
jz loc_10109F9  +
and dword ptr [esi+118h] 0FFFFFFF7h +
cmp [ebp+argp] 5 +
jnz loc_1010ADF  +
mov eax [ebp+name] +
mov ecx [eax+44h] +
mov [esi+5Ch] ecx +
mov eax [eax+48h] +
mov [esi+60h] eax +
push [ebp+type]  +
mov ecx esi +
push [ebp+argp]  +
call sub_101016B  +
mov edi eax +
test edi edi +
jge loc_1010B1A  +
cmp [ebp+var_4] 0FFFFFFFFh +
jz loc_1010B03  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1010743  +
mov eax [esi+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_1010B16  +
push eax  +
call ds:closesocket  +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
mov eax edi +
jmp loc_1010B3E  +
cmp dword_1016838 0 +
jnz loc_1010B2B  +
push dword ptr [esi+0Ch]  +
call sub_100FF55  +
cmp [ebp+var_4] 0FFFFFFFFh +
jz loc_1010B3C  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1010743  +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
lea eax [ecx+0Ch] +
push eax  +
call sub_1010743  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
or dword ptr [esi+14h] 0FFFFFFFFh +
and dword ptr [esi+118h] 0 +
and dword ptr [esi+11Ch] 0 +
push edi  +
lea ecx [esi+120h] +
mov dword ptr [esi] offset off_10023E8 +
mov dword ptr [esi+4] offset off_10023D4 +
mov dword ptr [esi+8] 1 +
mov dword ptr [esi+10h] 100h +
call sub_101086B  +
lea ecx [esi+210h] +
call sub_10028EF  +
mov edi offset unk_101684C +
mov ecx edi +
call sub_100FCF7  +
inc dword_1016804  +
mov ecx edi +
call sub_100FD4F  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+0Ch] +
push eax  +
mov dword ptr [esi] offset off_10023E8 +
mov dword ptr [esi+4] offset off_10023D4 +
call sub_1010743  +
mov edi offset unk_101684C +
mov ecx edi +
call sub_100FCF7  +
dec dword_1016804  +
jnz loc_1010C0E  +
cmp dword_101683C 0 +
jz loc_1010C0E  +
call sub_100FDE4  +
and dword_101683C 0 +
mov ecx edi +
call sub_100FD4F  +
lea ecx [esi+210h] +
call sub_1002931  +
add esi 120h +
mov ecx esi +
call sub_10122F9  +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_1010702  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1010BC9  +
test byte ptr [ebp+8] 1 +
jz loc_1010C55  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+0Ch] 0FFFFFFFFh +
jnz loc_1010C7C  +
mov eax 80070006h +
jmp loc_1010D00  +
push edi  +
mov edi [ebp+8] +
test edi edi +
jnz loc_1010C8B  +
mov eax 80070057h +
jmp loc_1010CFF  +
push esi  +
push 80h  +
call sub_100B3B9  +
test eax eax +
jz loc_1010CAE  +
push dword ptr [ebp+14h]  +
mov ecx eax +
push dword ptr [ebp+10h]  +
push ebx  +
push 0Ah  +
call sub_100F74A  +
mov esi eax +
jmp loc_1010CB0  +
xor esi esi +
test esi esi +
jnz loc_1010CBB  +
mov eax 8007000Eh +
jmp loc_1010CFE  +
mov eax [ebp+0Ch] +
mov [ebp-0Ch] edi +
xor edi edi +
inc edi  +
mov [ebp-8] eax +
mov [ebp-4] edi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [ebx] +
push esi  +
push 0  +
push edi  +
lea ecx [ebp-0Ch] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+54h]  +
mov edi eax +
test edi edi +
jge loc_1010CED  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1010CFC  +
mov eax [ebp+18h] +
test eax eax +
jz loc_1010CFC  +
mov [eax] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
cmp dword ptr [edi+0Ch] 0FFFFFFFFh +
jnz loc_1010D20  +
mov eax 80070006h +
jmp loc_1010D97  +
cmp dword ptr [ebp+8] 0 +
jz loc_1010D92  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1010D92  +
push 80h  +
call sub_100B3B9  +
test eax eax +
jz loc_1010D4E  +
push dword ptr [ebp+14h]  +
mov ecx eax +
push dword ptr [ebp+10h]  +
push edi  +
push 0Ah  +
call sub_100F74A  +
mov esi eax +
jmp loc_1010D50  +
xor esi esi +
test esi esi +
jnz loc_1010D5B  +
mov eax 8007000Eh +
jmp loc_1010D97  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [edi] +
push esi  +
push 0  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call dword ptr [eax+54h]  +
mov edi eax +
test edi edi +
jge loc_1010D7F  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1010D8E  +
mov eax [ebp+18h] +
test eax eax +
jz loc_1010D8E  +
mov [eax] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
jmp loc_1010D97  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
cmp dword ptr [edi+14h] 1 +
jnz loc_1010DBB  +
mov eax 80004005h +
jmp loc_1010E40  +
cmp dword ptr [edi+0Ch] 0FFFFFFFFh +
jnz loc_1010DC8  +
mov eax 80070006h +
jmp loc_1010E40  +
cmp dword ptr [ebp+8] 0 +
jz loc_1010E3B  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1010E3B  +
push 80h  +
call sub_100B3B9  +
test eax eax +
jz loc_1010DF6  +
push dword ptr [ebp+18h]  +
mov ecx eax +
push dword ptr [ebp+14h]  +
push edi  +
push 0Bh  +
call sub_100F74A  +
mov esi eax +
jmp loc_1010DF8  +
xor esi esi +
test esi esi +
jnz loc_1010E03  +
mov eax 8007000Eh +
jmp loc_1010E40  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [edi] +
push esi  +
push dword ptr [ebp+10h]  +
mov ecx edi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call dword ptr [eax+54h]  +
mov edi eax +
test edi edi +
jge loc_1010E28  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1010E37  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_1010E37  +
mov [eax] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
jmp loc_1010E40  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
cmp dword ptr [edi+0Ch] 0FFFFFFFFh +
jnz loc_1010E60  +
mov eax 80070006h +
jmp loc_1010ED3  +
cmp dword ptr [ebp+8] 0 +
jnz loc_1010E6D  +
mov eax 80070057h +
jmp loc_1010ED3  +
push esi  +
push 80h  +
call sub_100B3B9  +
test eax eax +
jz loc_1010E90  +
push dword ptr [ebp+14h]  +
mov ecx eax +
push dword ptr [ebp+10h]  +
push edi  +
push 0Ch  +
call sub_100F74A  +
mov esi eax +
jmp loc_1010E92  +
xor esi esi +
test esi esi +
jnz loc_1010E9D  +
mov eax 8007000Eh +
jmp loc_1010ED2  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [edi] +
push esi  +
push 0  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call dword ptr [eax+58h]  +
mov edi eax +
test edi edi +
jge loc_1010EC1  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1010ED0  +
mov eax [ebp+18h] +
test eax eax +
jz loc_1010ED0  +
mov [eax] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
cmp dword ptr [edi+0Ch] 0FFFFFFFFh +
jnz loc_1010EF2  +
mov eax 80070006h +
jmp loc_1010F55  +
cmp dword ptr [ebp+8] 0 +
jnz loc_1010EFF  +
mov eax 80070057h +
jmp loc_1010F55  +
push esi  +
push 80h  +
call sub_100B3B9  +
test eax eax +
jz loc_1010F22  +
push dword ptr [ebp+18h]  +
mov ecx eax +
push dword ptr [ebp+14h]  +
push edi  +
push 0Dh  +
call sub_100F74A  +
mov esi eax +
jmp loc_1010F24  +
xor esi esi +
test esi esi +
jnz loc_1010F2F  +
mov eax 8007000Eh +
jmp loc_1010F54  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [edi] +
push esi  +
push dword ptr [ebp+10h]  +
mov ecx edi +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call dword ptr [eax+58h]  +
mov edi eax +
test edi edi +
jge loc_1010F52  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn 18h  +
***
xor eax eax +
cmp dword_101610C eax +
setnz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
mov [ebp+var_8] ecx +
mov [ebp+var_4] esi +
cmp [ebp+arg_0] esi +
jz loc_101101E  +
cmp [ebp+arg_C] esi +
jz loc_101101E  +
cmp [ebp+arg_10] esi +
jz loc_101101E  +
push 108h  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
cmp ebx esi +
jnz loc_1010FB4  +
mov eax 8007000Eh +
jmp loc_1011023  +
mov esi [ebp+arg_0] +
push edi  +
push 20h  +
pop ecx  +
mov edi ebx +
movs   +
mov esi [ebp+arg_4] +
mov ecx [ebp+var_8] +
mov [ebx+100h] esi +
call sub_1011088  +
test eax eax +
jz loc_1010FEF  +
push [ebp+arg_C]  +
mov ecx [ebp+var_8] +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_1011235  +
test eax eax +
jge loc_1010FF8  +
mov [ebp+var_4] eax +
jmp loc_101100D  +
mov [ebp+var_4] 80004005h +
jmp loc_101100D  +
mov esi [ebp+arg_C] +
mov eax [ebp+arg_10] +
push 20h  +
lea edi [ebx+80h] +
pop ecx  +
movs   +
mov [eax] ebx +
xor ebx ebx +
pop edi  +
test ebx ebx +
jz loc_1011019  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+var_4] +
jmp loc_1011023  +
mov eax 80070057h +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
mov ebx ecx +
jnz loc_1011043  +
xor eax eax +
jmp loc_101107D  +
push edi  +
mov edi 80004005h +
call sub_1011088  +
test eax eax +
jz loc_1011067  +
mov eax [esi] +
push dword ptr [eax+100h]  +
sub eax 0FFFFFF80h +
push eax  +
mov ecx ebx +
call sub_10110B5  +
mov edi eax +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
and dword ptr [esi] 0 +
pop ecx  +
test edi edi +
jge loc_101107A  +
mov eax edi +
jmp loc_101107C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
xor eax eax +
cmp [ecx+4] eax +
setnz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [ebp+var_108] ebx +
mov eax offset aTcp +
cmp [ebp+arg_4] ebx +
jnz loc_10110E9  +
mov eax offset aUdp +
push eax  +
lea ecx [ebp+var_10C] +
call sub_1011096  +
cmp edi ebx +
jnz loc_101111F  +
push [ebp+var_10C]  +
call ds:SysFreeString  +
mov eax [ebp+var_108] +
cmp eax ebx +
jz loc_1011115  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80070057h +
jmp loc_101121F  +
lea ecx [esi+4] +
cmp [ecx] ebx +
jnz loc_101114C  +
push [ebp+var_10C]  +
call ds:SysFreeString  +
mov eax [ebp+var_108] +
cmp eax ebx +
jz loc_1011142  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 80004005h +
jmp loc_101121F  +
lea eax [ebp+var_108] +
push eax  +
push offset dword_1002460  +
call sub_1013324  +
mov esi eax +
cmp esi ebx +
jge loc_1011186  +
push [ebp+var_10C]  +
call ds:SysFreeString  +
mov eax [ebp+var_108] +
cmp eax ebx +
jz loc_101117F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_101121F  +
cmp [ebp+var_10C] ebx +
jnz loc_10111AC  +
push ebx  +
call ds:SysFreeString  +
mov eax [ebp+var_108] +
cmp eax ebx +
jz loc_10111A5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 8007000Eh +
jmp loc_101121F  +
movzx eax word ptr [edi+2] +
push eax  +
call ds:ntohs  +
push ebx  +
push ebx  +
movzx esi ax +
push 80h  +
lea eax [ebp+var_104] +
push eax  +
push edi  +
call sub_101313A  +
push [ebp+var_10C]  +
mov edi eax +
cmp edi ebx +
jl loc_1011207  +
mov eax [ebp+var_108] +
mov ecx [eax] +
movzx edx si +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
push [ebp+arg_4]  +
mov edi eax +
push esi  +
lea eax [ebp+var_104] +
push eax  +
push offset aSoftwareMicr_0  +
call sub_10119C4  +
push [ebp+var_10C]  +
call ds:SysFreeString  +
mov eax [ebp+var_108] +
cmp eax ebx +
jz loc_101121D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 140h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_138] eax +
mov [ebp+var_11C] ebx +
cmp esi ebx +
jz loc_1011541  +
cmp eax ebx +
jz loc_1011541  +
add ecx 4 +
cmp [ecx] ebx +
jnz loc_1011285  +
mov eax 80004005h +
jmp loc_1011546  +
lea eax [ebp+var_11C] +
push eax  +
push offset dword_1002460  +
mov [ebp+var_120] ebx +
call sub_1013324  +
cmp eax ebx +
mov [ebp+var_124] eax +
jge loc_10112CD  +
push [ebp+var_120]  +
call ds:SysFreeString  +
mov eax [ebp+var_11C] +
cmp eax ebx +
jz loc_10112C2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_124] +
jmp loc_1011546  +
lea eax [ebp+var_120] +
push eax  +
push esi  +
call sub_1011B04  +
cmp eax ebx +
mov [ebp+var_124] eax +
jl loc_10112A6  +
mov eax offset aTcp +
cmp [ebp+arg_4] ebx +
jnz loc_10112F3  +
mov eax offset aUdp +
push eax  +
lea ecx [ebp+var_12C] +
call sub_1011096  +
cmp [ebp+var_12C] ebx +
jnz loc_1011332  +
mov esi ds:SysFreeString +
push ebx  +
call esi  +
push [ebp+var_120]  +
call esi  +
mov eax [ebp+var_11C] +
cmp eax ebx +
jz loc_1011328  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 8007000Eh +
jmp loc_1011546  +
lea eax [ebp+var_104] +
mov [ebp+var_114] ebx +
mov [ebp+var_108] eax +
mov [ebp+var_10C] 80h +
mov [ebp+var_110] ebx +
cmp edi ebx +
jz loc_101135F  +
xor eax eax +
cmp ax [edi] +
jnz loc_1011378  +
lea eax [ebp+var_114] +
push eax  +
call sub_1011775  +
lea ecx [ebp+var_114] +
call sub_100338B  +
mov edi eax +
push edi  +
lea ecx [ebp+var_134] +
call sub_1011096  +
cmp [ebp+var_134] ebx +
jnz loc_10113AB  +
mov esi ds:SysFreeString +
push ebx  +
call esi  +
lea ecx [ebp+var_114] +
call sub_1002970  +
push [ebp+var_12C]  +
jmp loc_101130E  +
movzx eax word ptr [esi+2] +
push eax  +
call ds:ntohs  +
movzx eax ax +
mov [ebp+var_13C] eax +
movzx edi ax +
mov [ebp+var_130] ebx +
mov eax [ebp+var_11C] +
lea edx [ebp+var_118] +
push edx  +
push [ebp+var_12C]  +
movzx edx di +
push edx  +
mov [ebp+var_118] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov esi ds:SysFreeString +
test eax eax +
jl loc_1011454  +
mov eax [ebp+var_118] +
or [ebp+var_140] 0FFFFFFFFh +
mov ecx [eax] +
lea edx [ebp+var_140] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov [ebp+var_124] eax +
cmp word ptr [ebp+var_140] bx +
jnz loc_1011422  +
cmp eax ebx +
jge loc_1011447  +
inc [ebp+var_130]  +
mov eax [ebp+var_118] +
inc edi  +
cmp eax ebx +
jz loc_1011439  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_130] 64h +
jb loc_10113C8  +
jmp loc_1011519  +
push ebx  +
lea eax [ebp+var_118] +
push eax  +
call sub_100B671  +
mov eax [ebp+var_11C] +
mov ecx [eax] +
lea edx [ebp+var_118] +
push edx  +
push [ebp+var_134]  +
movzx edx word ptr [ebp+var_13C] +
push 0FFFFFFFFh  +
push [ebp+var_120]  +
push edx  +
push [ebp+var_12C]  +
movzx edx di +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov [ebp+var_124] eax +
cmp eax ebx +
mov eax [ebp+var_118] +
jl loc_101150F  +
lea edx [ebp+var_128] +
push edx  +
mov [ebp+var_128] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax ebx +
mov [ebp+var_124] eax +
jl loc_1011501  +
push [ebp+var_138]  +
push [ebp+var_128]  +
push ebx  +
call sub_1012EC9  +
cmp eax ebx +
mov [ebp+var_124] eax +
jl loc_1011501  +
push edi  +
call ds:htons  +
push [ebp+var_13C]  +
mov ecx [ebp+var_138] +
push [ebp+var_120]  +
mov [ecx+2] ax +
push [ebp+arg_4]  +
push edi  +
push [ebp+var_128]  +
push offset aSoftwareMicr_0  +
call sub_101182C  +
push [ebp+var_128]  +
call esi  +
mov eax [ebp+var_118] +
cmp eax ebx +
jz loc_1011519  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_134]  +
call esi  +
lea ecx [ebp+var_114] +
call sub_1002970  +
push [ebp+var_12C]  +
call esi  +
push [ebp+var_120]  +
call esi  +
jmp loc_10112B2  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:SysFreeString  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call ds:GetCurrentProcessId  +
push eax  +
push offset aXSU  +
push [ebp+arg_C]  +
push [ebp+lpString]  +
call sub_1002D1B  +
add esp 18h +
test eax eax +
jl loc_10115BB  +
push [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jge loc_10115C2  +
mov eax 8007007Ah +
jmp loc_10115C4  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 140h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
xor esi esi +
push edi  +
push offset aWs2_32_dll  +
mov [ebp+var_120] eax +
mov [ebp+var_10C] esi +
mov [ebp+var_110] esi +
mov [ebx+4] esi +
mov [ebx] esi +
mov [ebp+var_114] esi +
call ds:LoadLibraryW  +
mov edi eax +
mov [ebp+hLibModule] edi +
cmp edi esi +
jnz loc_1011630  +
mov [ebp+var_10C] 80004005h +
jmp loc_1011727  +
mov esi ds:GetProcAddress +
push offset aGetaddrinfow  +
push edi  +
call esi  +
push offset aFreeaddrinfow  +
push edi  +
mov [ebp+var_118] eax +
call esi  +
cmp [ebp+var_118] 0 +
mov [ebp+var_114] eax +
mov esi 80004005h +
jz loc_1011707  +
test eax eax +
jz loc_1011707  +
push 8  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_140] +
stos   +
lea eax [ebp+var_110] +
push eax  +
lea eax [ebp+var_140] +
push eax  +
push 0  +
push [ebp+var_120]  +
call [ebp+var_118]  +
test eax eax +
jz loc_10116AD  +
jle loc_10116A5  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_10C] eax +
jmp loc_101170D  +
mov eax [ebp+var_110] +
test eax eax +
jz loc_1011716  +
mov edx [ebp+arg_4] +
xor ecx ecx +
cmp [eax+18h] ecx +
jz loc_10116CA  +
cmp [eax+4] edx +
jz loc_10116D3  +
cmp edx ecx +
jz loc_10116D3  +
mov eax [eax+1Ch] +
cmp eax ecx +
jnz loc_10116BA  +
jmp loc_1011716  +
push ecx  +
push ecx  +
push 81h  +
lea ecx [ebp+var_108] +
push ecx  +
push dword ptr [eax+18h]  +
call sub_101313A  +
mov [ebp+var_10C] eax +
xor eax eax +
mov [ebp+var_8] ax +
push 0FFFFFFFFh  +
lea eax [ebp+var_108] +
push eax  +
mov ecx ebx +
call sub_10033F0  +
jmp loc_101170D  +
mov [ebp+var_10C] esi +
cmp [ebp+var_10C] 0 +
jl loc_1011727  +
mov ecx ebx +
call sub_1002F84  +
test eax eax +
jz loc_1011727  +
mov [ebp+var_10C] esi +
xor esi esi +
cmp [ebp+var_110] esi +
jz loc_1011745  +
cmp [ebp+var_114] esi +
jz loc_1011745  +
push [ebp+var_110]  +
call [ebp+var_114]  +
cmp [ebp+hLibModule] esi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_101175C  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_10C] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 468h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi+4] 0 +
and dword ptr [esi] 0 +
push 105h  +
lea eax [ebp+Filename] +
push eax  +
push 0  +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_10117F7  +
lea eax [ebp+Filename] +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10117C6  +
inc eax  +
inc eax  +
jmp loc_10117CC  +
lea eax [ebp+Filename] +
push eax  +
push offset aWindowsMediaFo  +
lea eax [ebp+String] +
push 12Ch  +
push eax  +
call sub_1002D1B  +
add esp 10h +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
test eax eax +
jge loc_1011800  +
xor eax eax +
mov [ebp+String] ax +
push 0FFFFFFFFh  +
lea eax [ebp+String] +
push eax  +
mov ecx esi +
call sub_10033F0  +
mov eax [esi] +
pop esi  +
test eax eax +
jl loc_1011819  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3B0h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 148h  +
lea ecx [ebp+String] +
push ecx  +
push dword ptr [ebp+arg_14]  +
push eax  +
call sub_1011583  +
xor esi esi +
cmp eax esi +
mov [ebp+var_3A8] eax +
jl loc_1011906  +
push 0FFFFFFFFh  +
lea eax [ebp+var_394] +
push edi  +
lea ecx [ebp+var_3A4] +
mov [ebp+var_3A4] esi +
mov [ebp+var_398] eax +
mov [ebp+var_39C] 80h +
mov [ebp+var_3A0] esi +
call sub_10033F0  +
push 20h  +
lea ecx [ebp+var_3A4] +
call sub_100AA8F  +
movzx eax [ebp+arg_8] +
push 0Ah  +
push eax  +
lea ecx [ebp+var_3A4] +
call sub_10030EF  +
push 20h  +
lea ecx [ebp+var_3A4] +
call sub_100AA8F  +
mov eax offset aTcp +
cmp [ebp+arg_C] esi +
jnz loc_10118DD  +
mov eax offset aUdp +
push 0FFFFFFFFh  +
push eax  +
lea ecx [ebp+var_3A4] +
call sub_10033F0  +
cmp [ebp+var_3A4] esi +
jge loc_1011917  +
mov esi [ebp+var_3A4] +
lea ecx [ebp+var_3A4] +
call sub_1002970  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 18h  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 2001Fh  +
push esi  +
push esi  +
push esi  +
push ebx  +
push 80000001h  +
mov [ebp+hKey] esi +
call ds:RegCreateKeyExW  +
cmp eax esi +
jz loc_1011954  +
jle loc_1011950  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_10118F9  +
lea eax [ebp+String] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_101195D  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
lea eax [ebp+String] +
push eax  +
push 1  +
push esi  +
lea ecx [ebp+var_3A4] +
call sub_100338B  +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
cmp eax esi +
jz loc_10119A8  +
jle loc_10119A2  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_3A8] eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov esi [ebp+var_3A8] +
jmp loc_10118F9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_104] +
push 0FFFFFFFFh  +
xor esi esi +
mov [ebp+var_108] ecx +
push eax  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] esi +
mov [ebp+var_10C] 80h +
mov [ebp+var_110] esi +
call sub_10033F0  +
push 20h  +
lea ecx [ebp+var_114] +
call sub_100AA8F  +
movzx eax [ebp+arg_8] +
push 0Ah  +
push eax  +
lea ecx [ebp+var_114] +
call sub_10030EF  +
push 20h  +
lea ecx [ebp+var_114] +
call sub_100AA8F  +
mov eax offset aTcp +
cmp [ebp+arg_C] esi +
jnz loc_1011A4E  +
mov eax offset aUdp +
push 0FFFFFFFFh  +
push eax  +
lea ecx [ebp+var_114] +
call sub_10033F0  +
cmp [ebp+var_114] esi +
jge loc_1011A87  +
mov esi [ebp+var_114] +
lea ecx [ebp+var_114] +
call sub_1002970  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10082CB  +
leave   +
retn 10h  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 20006h  +
push esi  +
push esi  +
push esi  +
push edi  +
push 80000001h  +
mov [ebp+hKey] esi +
call ds:RegCreateKeyExW  +
cmp eax esi +
jz loc_1011AC4  +
jle loc_1011AC0  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1011A6A  +
lea ecx [ebp+var_114] +
call sub_100338B  +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax esi +
jz loc_1011AEE  +
jle loc_1011AEC  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_1011A6A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
mov [ebp+var_240] edi +
cmp esi ebx +
jz loc_1011D4C  +
cmp edi ebx +
jz loc_1011D4C  +
mov [edi] ebx +
movzx eax word ptr [esi] +
push 2  +
pop ecx  +
mov [ebp+var_23C] ebx +
cmp cx ax +
jnz loc_1011B52  +
cmp [esi+4] ebx +
jnz loc_1011B67  +
push 17h  +
pop ecx  +
cmp cx ax +
jnz loc_1011BAC  +
lea eax [esi+8] +
push eax  +
call sub_101033B  +
test al al +
jnz loc_1011BAC  +
push ebx  +
push ebx  +
push 81h  +
lea eax [ebp+var_128] +
push eax  +
push esi  +
call sub_101313A  +
mov esi eax +
cmp esi ebx +
jge loc_1011B8F  +
push ebx  +
call ds:SysFreeString  +
mov eax esi +
jmp loc_1011D51  +
xor eax eax +
mov [ebp+var_28] ax +
lea eax [ebp+var_128] +
push eax  +
lea ecx [ebp+var_23C] +
call sub_101155C  +
jmp loc_1011D2B  +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
mov [ebp+nSize] 10h +
call ds:GetComputerNameW  +
test eax eax +
jnz loc_1011BE3  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011BDF  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1011B81  +
lea eax [ebp+var_228] +
mov [ebp+var_22C] eax +
lea eax [ebp+var_238] +
push eax  +
movzx eax word ptr [esi] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
mov [ebp+var_238] ebx +
mov [ebp+var_230] 80h +
mov [ebp+var_234] ebx +
call sub_10115CD  +
mov esi eax +
cmp esi ebx +
lea ecx [ebp+var_238] +
jge loc_1011C2F  +
call sub_1002970  +
jmp loc_1011B81  +
call sub_100338B  +
push 4  +
mov edx offset a127_0_0_1 +
mov ecx eax +
pop edi  +
mov si [ecx] +
cmp si [edx] +
jnz loc_1011C62  +
cmp si bx +
jz loc_1011C5E  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_1011C62  +
add ecx edi +
add edx edi +
cmp si bx +
jnz loc_1011C3E  +
xor ecx ecx +
jmp loc_1011C67  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
cmp ecx ebx +
jz loc_1011D0B  +
mov edx offset a0_0_0_0 +
mov ecx eax +
mov si [ecx] +
cmp si [edx] +
jnz loc_1011C9A  +
cmp si bx +
jz loc_1011C96  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_1011C9A  +
add ecx edi +
add edx edi +
cmp si bx +
jnz loc_1011C76  +
xor ecx ecx +
jmp loc_1011C9F  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
cmp ecx ebx +
jz loc_1011D0B  +
mov edx offset a1 +
mov ecx eax +
mov si [ecx] +
cmp si [edx] +
jnz loc_1011CCE  +
cmp si bx +
jz loc_1011CCA  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_1011CCE  +
add ecx edi +
add edx edi +
cmp si bx +
jnz loc_1011CAA  +
xor ecx ecx +
jmp loc_1011CD3  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
cmp ecx ebx +
jz loc_1011D0B  +
mov edx offset asc_1002578 +
mov ecx eax +
mov si [ecx] +
cmp si [edx] +
jnz loc_1011D02  +
cmp si bx +
jz loc_1011CFE  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_1011D02  +
add ecx edi +
add edx edi +
cmp si bx +
jnz loc_1011CDE  +
xor ecx ecx +
jmp loc_1011D07  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
cmp ecx ebx +
jnz loc_1011D0E  +
lea eax [ebp+Buffer] +
push eax  +
lea ecx [ebp+var_23C] +
call sub_101155C  +
lea ecx [ebp+var_238] +
call sub_1002970  +
mov edi [ebp+var_240] +
mov eax [ebp+var_23C] +
cmp eax ebx +
jnz loc_1011D3F  +
mov esi 8007000Eh +
jmp loc_1011B81  +
push ebx  +
mov [edi] eax +
call ds:SysFreeString  +
xor eax eax +
jmp loc_1011D51  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 8  +
***
mov edx [ecx+4] +
cmp edx [ecx+8] +
jnb loc_1011D79  +
movzx eax word ptr [edx] +
add edx 2 +
mov [ecx+4] edx +
retn   +
mov dword ptr [ecx] 80004005h +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
mov eax [esi+4] +
push edi  +
lea edi [ecx+ecx] +
lea edx [eax+edi-2] +
cmp edx [esi+8] +
jnb loc_1011DC8  +
cmp [ebp+arg_8] 0 +
push ecx  +
push [ebp+arg_0]  +
push eax  +
jz loc_1011DB5  +
call ds:_wcsnicmp  +
jmp loc_1011DBB  +
call ds:wcsncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1011DC8  +
add [esi+4] edi +
inc eax  +
jmp loc_1011DCA  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push esi  +
mov esi [ecx+8] +
push edi  +
cmp eax esi +
jnb loc_1011E13  +
cmp [ebp+arg_4] 0 +
mov edx eax +
jz loc_1011E04  +
mov di [edx] +
cmp di [ebp+arg_0] +
jz loc_1011DFF  +
inc edx  +
inc edx  +
cmp edx esi +
jb loc_1011DEE  +
jmp loc_1011E13  +
mov [ecx+4] edx +
jmp loc_1011E1E  +
mov di [edx] +
cmp di [ebp+arg_0] +
jnz loc_1011DFF  +
inc edx  +
inc edx  +
cmp edx esi +
jb loc_1011E04  +
cmp [ebp+arg_8] 0 +
jz loc_1011E1C  +
mov [ecx+4] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
push ebx  +
push esi  +
push edi  +
cmp eax [ecx+8] +
jnb loc_1011E8D  +
cmp [ebp+arg_8] 0 +
mov edx eax +
jz loc_1011E68  +
xor esi esi +
cmp [ebp+arg_4] esi +
jle loc_1011E5A  +
movzx edi word ptr [edx] +
mov ebx [ebp+arg_0] +
cmp di [ebx+esi*2] +
jz loc_1011E63  +
inc esi  +
cmp esi [ebp+arg_4] +
jl loc_1011E4B  +
inc edx  +
inc edx  +
cmp edx [ecx+8] +
jb loc_1011E41  +
jmp loc_1011E8D  +
mov [ecx+4] edx +
jmp loc_1011E8F  +
xor esi esi +
cmp esi [ebp+arg_4] +
jge loc_1011E84  +
movzx edi word ptr [edx] +
mov ebx [ebp+arg_0] +
cmp di [ebx+esi*2] +
jz loc_1011E81  +
inc esi  +
cmp esi [ebp+arg_4] +
jl loc_1011E72  +
cmp esi [ebp+arg_4] +
jz loc_1011E63  +
inc edx  +
inc edx  +
cmp edx [ecx+8] +
jb loc_1011E68  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax [ecx+4] +
cmp eax [ecx+8] +
jnb loc_1011EA7  +
mov ax [eax] +
retn   +
mov dword ptr [ecx] 80004005h +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx+4] +
lea eax [eax+edx*2] +
mov edx [ecx+8] +
cmp eax edx +
ja loc_1011ECF  +
mov [ecx+4] eax +
jmp loc_1011ED2  +
mov [ecx+4] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor eax eax +
push esi  +
mov esi ecx +
mov ebx [esi+4] +
mov [ebp+var_4] eax +
mov [esi] eax +
cmp [ebp+arg_0] eax +
jnz loc_1011EFF  +
mov dword ptr [esi] 80070057h +
jmp loc_1011F82  +
push edi  +
cmp ebx [esi+8] +
jnb loc_1011F5C  +
mov eax [esi+4] +
movzx edi word ptr [eax] +
push edi  +
call ds:iswdigit  +
pop ecx  +
test eax eax +
jz loc_1011F1F  +
movzx eax di +
sub eax 30h +
jmp loc_1011F39  +
push edi  +
call ds:iswalpha  +
pop ecx  +
test eax eax +
jz loc_1011F5C  +
push edi  +
call ds:towupper  +
movzx eax ax +
pop ecx  +
sub eax 37h +
cmp eax [ebp+arg_4] +
jnb loc_1011F5C  +
mov ecx [ebp+var_4] +
mov edx ecx +
imul edx [ebp+arg_4] +
add edx eax +
mov [ebp+var_4] edx +
cmp edx ecx +
jb loc_1011F6B  +
add dword ptr [esi+4] 2 +
mov eax [esi+4] +
cmp eax [esi+8] +
jb loc_1011F05  +
cmp ebx [esi+4] +
jnz loc_1011F76  +
mov dword ptr [esi] 80004005h +
xor eax eax +
jmp loc_1011F81  +
mov dword ptr [esi] 80070216h +
mov [esi+4] ebx +
jmp loc_1011F67  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
mov eax [ebp+var_10] +
mov ebx ecx +
mov [ebx+120h] eax +
cmp eax [ebp+var_C] +
jnb loc_1012024  +
xor edi edi +
inc edi  +
lea ecx [ebp+var_14] +
call sub_1011E9B  +
cmp [ebp+var_4] 0 +
movzx eax ax +
jnz loc_1012049  +
cmp ax 5Bh +
jnz loc_1011FDB  +
mov [ebp+var_4] edi +
jmp loc_101205D  +
cmp ax 3Ah +
jnz loc_1011FE9  +
mov eax [ebp+var_10] +
mov [ebp+var_8] eax +
jmp loc_101205D  +
cmp ax 40h +
jnz loc_1012014  +
mov esi [ebp+var_10] +
sub esi [ebx+120h] +
mov ecx [ebp+arg_0] +
inc esi  +
inc esi  +
sar esi 1 +
push esi  +
call sub_1011EB5  +
lea eax [esi+esi] +
add [ebx+120h] eax +
and [ebp+var_8] 0 +
jmp loc_101205D  +
cmp ax 2Fh +
jnz loc_101205D  +
mov eax [ebp+var_10] +
mov ecx [ebp+var_8] +
test ecx ecx +
jnz loc_1012029  +
mov [ebp+var_8] eax +
mov ecx eax +
sub ecx [ebx+120h] +
sar ecx 1 +
mov [ebx+124h] ecx +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1011EB5  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
cmp ax 5Bh +
jnz loc_1012054  +
inc [ebp+var_4]  +
jmp loc_101205D  +
cmp ax 5Dh +
jnz loc_101205D  +
dec [ebp+var_4]  +
push edi  +
lea ecx [ebp+var_14] +
call sub_1011EB5  +
mov eax [ebp+var_10] +
cmp eax [ebp+var_C] +
jb loc_1011FBC  +
jmp loc_101201D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_1011EDB  +
mov eax [ebp+var_4] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+14Ch] edi +
jz loc_10120DE  +
cmp [ebp+arg_0] edi +
jz loc_10120CD  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
mov [esi+4] edi +
mov [esi] edi +
call sub_10033F0  +
cmp eax edi +
jl loc_1012243  +
push ebx  +
cmp [esi+14Ch] edi +
jz loc_10120F2  +
cmp [esi] edi +
jge loc_10120ED  +
xor ebx ebx +
jmp loc_1012108  +
cmp [ebp+arg_0] edi +
jnz loc_10120CD  +
mov eax 80070057h +
jmp loc_1012243  +
mov ebx [esi+4] +
jmp loc_1012108  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10120F8  +
sub eax edx +
sar eax 1 +
mov ebx eax +
cmp [esi+14Ch] edi +
jz loc_101211B  +
mov ecx esi +
call sub_100338B  +
mov edi eax +
jmp loc_101211E  +
mov edi [ebp+arg_0] +
lea eax [edi+ebx*2] +
xor ebx ebx +
push 3Ch  +
mov [ebp+var_4] eax +
lea eax [esi+110h] +
push ebx  +
push eax  +
mov [ebp+var_8] edi +
mov [ebp+var_C] ebx +
call memset  +
add esp 0Ch +
push ebx  +
push 1  +
push 3Ah  +
lea ecx [ebp+var_C] +
mov [esi+114h] edi +
call sub_1011DD5  +
test eax eax +
jz loc_10121D2  +
push 1  +
push 3  +
push offset asc_1001FB8  +
lea ecx [ebp+var_C] +
call sub_1011D87  +
test eax eax +
jz loc_10121D2  +
mov eax [ebp+var_8] +
sub eax [esi+114h] +
mov ecx esi +
sar eax 1 +
sub eax 3 +
mov [esi+118h] eax +
lea eax [ebp+var_C] +
push eax  +
call sub_1011F8D  +
cmp eax ebx +
jl loc_1012242  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jnb loc_1012240  +
lea ecx [ebp+var_C] +
call sub_1011D67  +
cmp ax 3Ah +
jnz loc_10121D9  +
push 0Ah  +
lea ecx [ebp+var_C] +
call sub_1012079  +
lea ecx [ebp+var_C] +
mov [esi+128h] ax +
call sub_1011D67  +
movzx eax ax +
cmp ax 2Fh +
jz loc_10121D9  +
cmp ax bx +
jz loc_10121D9  +
mov eax 80070057h +
jmp loc_1012242  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jnb loc_1012240  +
push 1  +
push 2  +
push offset a?_1  +
lea ecx [ebp+var_C] +
mov [esi+13Ch] eax +
call sub_1011E29  +
test eax eax +
jnz loc_1012215  +
mov eax [ebp+var_4] +
sub eax [ebp+var_8] +
lea ecx [ebp+var_C] +
sar eax 1 +
push eax  +
mov [esi+140h] eax +
call sub_1011EB5  +
jmp loc_1012226  +
mov eax [ebp+var_8] +
sub eax [esi+13Ch] +
sar eax 1 +
mov [esi+140h] eax +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
cmp ecx eax +
jnb loc_1012240  +
sub eax ecx +
sar eax 1 +
mov [esi+144h] ecx +
mov [esi+148h] eax +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_1012269  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jnz loc_10122DE  +
mov eax [esi+8] +
dec eax  +
imul eax eax +
add eax 10h +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
cmp eax edi +
jnz loc_10122BC  +
mov eax 8007000Eh +
jmp loc_10122EE  +
xor edx edx +
cmp [esi+8] edi +
jbe loc_10122D6  +
lea ecx [eax+4] +
mov edi [esi] +
mov [ecx+4] edi +
mov [esi] ecx +
inc edx  +
add ecx 0Ch +
cmp edx [esi+8] +
jb loc_10122C6  +
mov ecx [esi+4] +
mov [eax] ecx +
mov [esi+4] eax +
mov eax [esi] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [esi] +
mov eax [eax+4] +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+0E0h] 0 +
jz loc_101231E  +
push edi  +
mov eax [ecx+0E0h] +
mov edx [eax+4] +
mov edi [ecx] +
mov [eax+4] edi +
mov [ecx] eax +
mov [ecx+0E0h] edx +
test edx edx +
jnz loc_1012303  +
pop edi  +
and dword ptr [ecx+0E8h] 0 +
and dword ptr [ecx+0E4h] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_1012289  +
test eax eax +
jge loc_101234C  +
xor eax eax +
jmp loc_101237C  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
and dword ptr [eax+4] 0 +
lea ecx [esi+0E4h] +
mov edx [ecx] +
mov [eax+8] edx +
mov edx [ecx] +
test edx edx +
jz loc_101236E  +
mov [edx+4] eax +
jmp loc_1012374  +
mov [esi+0E0h] eax +
inc dword ptr [esi+0E8h]  +
mov [ecx] eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
test edx edx +
jz loc_10123CD  +
lea esi [ecx+0E0h] +
mov eax [esi] +
test eax eax +
jz loc_10123CD  +
push edi  +
mov edi [eax] +
mov [edx] edi +
mov edx [eax+4] +
mov [esi] edx +
pop edi  +
test edx edx +
jz loc_10123B4  +
and dword ptr [edx+8] 0 +
jmp loc_10123BB  +
and dword ptr [ecx+0E4h] 0 +
mov edx [ecx] +
mov [eax+4] edx +
dec dword ptr [ecx+0E8h]  +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_10123CF  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
test edx edx +
jz loc_1012420  +
lea esi [ecx+0E4h] +
mov eax [esi] +
test eax eax +
jz loc_1012420  +
push edi  +
mov edi [eax] +
mov [edx] edi +
mov edx [eax+8] +
mov [esi] edx +
pop edi  +
test edx edx +
jz loc_1012407  +
and dword ptr [edx+4] 0 +
jmp loc_101240E  +
and dword ptr [ecx+0E0h] 0 +
mov edx [ecx] +
mov [eax+4] edx +
dec dword ptr [ecx+0E8h]  +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1012422  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+8] eax +
lea eax [ecx+0Ch] +
xor edx edx +
mov [ecx+4] eax +
mov [eax] edx +
push esi  +
mov eax [ecx+4] +
mov esi [ecx] +
lea eax [eax+edx+4] +
add edx 0Ch +
mov [eax+4] esi +
mov [ecx] eax +
cmp edx 0C0h +
jb loc_1012442  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov [ecx+0DCh] eax +
call sub_101242C  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword_1016018 +
cmp eax 0FFFFFFFFh +
jnz loc_10124C7  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
mov eax [ebp+VersionInformation.dwPlatformId] +
mov dword_1016018 eax +
xor ecx ecx +
cmp eax 2 +
setz cl  +
mov eax ecx +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10082CB  +
leave   +
retn   +
***
call ds:PostMessageA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
xor ecx ecx +
test eax eax +
jz loc_101251A  +
mov edx [ebp+arg_0] +
mov edx [edx] +
cmp [eax] edx +
jz loc_1012520  +
mov eax [eax+8] +
inc ecx  +
test eax eax +
jnz loc_101250E  +
xor eax eax +
pop ebp  +
retn 0Ch  +
mov edx [ebp+arg_4] +
mov [edx] ecx +
mov eax [eax+4] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_101251C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi] edi +
jnz loc_101258C  +
mov eax [esi+8] +
dec eax  +
shl eax 4 +
add eax 14h +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
cmp eax edi +
jnz loc_101256A  +
mov eax 8007000Eh +
jmp loc_101259C  +
xor edx edx +
cmp [esi+8] edi +
jbe loc_1012584  +
lea ecx [eax+4] +
mov edi [esi] +
mov [ecx+8] edi +
mov [esi] ecx +
inc edx  +
add ecx 10h +
cmp edx [esi+8] +
jb loc_1012574  +
mov ecx [esi+4] +
mov [eax] ecx +
mov [esi+4] eax +
mov eax [esi] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [esi] +
mov eax [eax+8] +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push edi  +
call ds:DeleteCriticalSection  +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+84h] +
push eax  +
lea ecx [ebp+lpCriticalSection] +
call sub_1002713  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_101261B  +
mov esi 80070057h +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax [esi+4] +
test eax eax +
jnz loc_1012629  +
mov esi 8007000Eh +
jmp loc_1012609  +
mov [ecx] eax +
xor eax eax +
inc eax  +
cmp [esi] eax +
mov [ebp+arg_0] eax +
jle loc_1012657  +
lea edx [esi+8] +
mov eax [edx] +
test eax eax +
jz loc_1012622  +
mov edi [ecx] +
mov ebx [eax+30h] +
cmp ebx [edi+30h] +
jnb loc_101264A  +
mov [ecx] eax +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add edx 4 +
cmp eax [esi] +
jl loc_1012638  +
xor esi esi +
jmp loc_1012609  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp [ebp+Msg] 465h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jnz loc_10126FD  +
movzx eax word ptr [ebp+lParam] +
mov esi [ebp+lParam] +
mov edi [ebp+wParam] +
push ebx  +
mov [ebp+Msg] edi +
shr esi 10h +
mov [ebp+lParam] eax +
call ds:EnterCriticalSection  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+Msg] +
push eax  +
lea ecx [ebx+24h] +
call sub_10124FC  +
test eax eax +
jnz loc_10126C8  +
cmp [ebp+lParam] 20h +
jz loc_10126BD  +
push eax  +
push eax  +
push [ebp+hWnd]  +
push edi  +
call ds:WSAAsyncSelect  +
push ebx  +
call ds:LeaveCriticalSection  +
xor eax eax +
jmp loc_101270F  +
mov edi [ebp+var_4] +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
push ebx  +
call ds:LeaveCriticalSection  +
test esi esi +
jle loc_10126E8  +
and esi 0FFFFh +
or esi 80070000h +
mov eax [edi] +
push esi  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
jmp loc_10126C4  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push [ebp+hWnd]  +
call ds:DefWindowProcA  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
cmp esi 10h +
jnz loc_1012736  +
push dword ptr [ebp+8]  +
call ds:DestroyWindow  +
xor eax eax +
jmp loc_101276D  +
cmp esi 2 +
jnz loc_1012745  +
push 0  +
call ds:PostQuitMessage  +
jmp loc_1012732  +
***
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongA  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push esi  +
push dword ptr [ebp+8]  +
test eax eax +
jz loc_1012767  +
mov ecx eax +
call sub_1012660  +
jmp loc_101276D  +
call ds:DefWindowProcA  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+8] ecx +
mov [eax+4] ecx +
mov [eax] ecx +
mov [eax+0Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
lea ecx [esi+10h] +
call sub_1012537  +
test eax eax +
jge loc_10127B2  +
xor eax eax +
jmp loc_10127F8  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_0] +
mov ecx [edx] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov [eax+4] ecx +
and dword ptr [eax+8] 0 +
and dword ptr [eax+0Ch] 0 +
mov ecx [esi] +
test ecx ecx +
jnz loc_10127D6  +
mov [esi] eax +
jmp loc_10127EF  +
mov edx [edx] +
cmp [ecx] edx +
ja loc_10127FD  +
mov ecx [ecx+8] +
test ecx ecx +
jnz loc_10127D8  +
mov ecx [esi+4] +
mov [eax+0Ch] ecx +
mov ecx [esi+4] +
mov [ecx+8] eax +
mov [esi+4] eax +
inc dword ptr [esi+0Ch]  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
mov [eax+8] ecx +
mov edx [ecx+0Ch] +
mov [eax+0Ch] edx +
mov edx [ecx+0Ch] +
test edx edx +
jz loc_1012810  +
mov [edx+8] eax +
mov [ecx+0Ch] eax +
cmp ecx [esi] +
jnz loc_10127F2  +
mov [esi] eax +
jmp loc_10127F2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
xor edx edx +
cmp [ebp+arg_0] edx +
jle loc_101283B  +
test eax eax +
jz loc_101283F  +
mov eax [eax+8] +
inc edx  +
cmp edx [ebp+arg_0] +
jl loc_101282E  +
test eax eax +
jnz loc_1012843  +
xor eax eax +
jmp loc_101289A  +
cmp [ecx+8] eax +
jnz loc_101284C  +
and dword ptr [ecx+8] 0 +
mov edx [eax] +
push esi  +
mov esi [ebp+arg_4] +
mov [esi] edx +
mov edx [eax+4] +
mov esi [ebp+arg_8] +
mov [esi] edx +
cmp eax [ecx+4] +
jnz loc_1012867  +
mov edx [eax+0Ch] +
mov [ecx+4] edx +
cmp eax [ecx] +
jnz loc_1012870  +
mov edx [eax+8] +
mov [ecx] edx +
mov edx [eax+8] +
test edx edx +
jz loc_101287D  +
mov esi [eax+0Ch] +
mov [edx+0Ch] esi +
mov edx [eax+0Ch] +
test edx edx +
jz loc_101288A  +
mov esi [eax+8] +
mov [edx+8] esi +
mov edx [ecx+10h] +
mov [eax+8] edx +
mov [ecx+10h] eax +
dec dword ptr [ecx+0Ch]  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+8] eax +
lea eax [ecx+0Ch] +
xor edx edx +
mov [ecx+4] eax +
mov [eax] edx +
push esi  +
mov eax [ecx+4] +
mov esi [ecx] +
lea eax [eax+edx+4] +
add edx 10h +
mov [eax+8] esi +
mov [ecx] eax +
cmp edx 100h +
jb loc_10128B9  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
xor eax eax +
lea ecx [esi+24h] +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
call sub_1012777  +
push esi  +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push esi  +
call ds:EnterCriticalSection  +
lea edi [esi+24h] +
xor ebx ebx +
jmp loc_101292E  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_101292E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
mov ecx edi +
call sub_1012820  +
test eax eax +
jnz loc_101291E  +
push esi  +
call ds:LeaveCriticalSection  +
mov eax [esi+18h] +
mov edi ds:CloseHandle +
cmp eax ebx +
jz loc_101295C  +
push eax  +
call edi  +
mov [esi+18h] ebx +
mov eax [esi+1Ch] +
cmp eax ebx +
jz loc_1012969  +
push eax  +
call edi  +
mov [esi+1Ch] ebx +
push esi  +
call ds:DeleteCriticalSection  +
lea ecx [esi+34h] +
call sub_1010702  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
push edi  +
push esi  +
lea ecx [ebp+lpCriticalSection] +
call sub_1002713  +
cmp dword ptr [esi+20h] 0 +
jnz loc_10129B2  +
mov esi 80004005h +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1012A69  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+s] +
lea edi [esi+24h] +
push eax  +
mov ecx edi +
call sub_10124FC  +
test eax eax +
jz loc_10129E7  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+s] +
push eax  +
push [ebp+var_C]  +
mov ecx edi +
call sub_1012820  +
mov eax [ebp+var_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+lEvent] 0 +
jnz loc_1012A04  +
push 0  +
push 0  +
push dword ptr [esi+20h]  +
push [ebp+s]  +
call ds:WSAAsyncSelect  +
cmp eax 0FFFFFFFFh +
jz loc_1012A1D  +
jmp loc_1012A5E  +
push [ebp+lEvent]  +
push 465h  +
push dword ptr [esi+20h]  +
push [ebp+s]  +
call ds:WSAAsyncSelect  +
cmp eax 0FFFFFFFFh +
jnz loc_1012A38  +
call ds:WSAGetLastError  +
test eax eax +
jle loc_1012A31  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_10129A2  +
lea eax [ebp+arg_8] +
push eax  +
lea eax [ebp+s] +
push eax  +
mov ecx edi +
call sub_1012795  +
test eax eax +
jnz loc_1012A55  +
mov esi 8007000Eh +
jmp loc_10129A2  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 10h +
call sub_10128A3  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1012904  +
test [ebp+arg_0] 1 +
jz loc_1012AA9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
mov esi ecx +
call ds:CoInitializeEx  +
cmp eax ebx +
jge loc_1012AEC  +
mov edi eax +
push dword ptr [esi+1Ch]  +
call ds:SetEvent  +
mov eax edi +
jmp loc_1012C11  +
call ds:GetCurrentProcessId  +
push eax  +
call ds:GetTickCount  +
push eax  +
push esi  +
push offset dword_10025E8  +
lea eax [ebp+ClassName] +
push 20h  +
push eax  +
call sub_100A29F  +
add esp 18h +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp+WndClass] +
stos   +
mov edi ds:GetModuleHandleA +
push ebx  +
mov [ebp+var_5] bl +
mov [ebp+WndClass.lpfnWndProc] offset loc_101271B +
call edi  +
mov [ebp+WndClass.hInstance] eax +
lea eax [ebp+ClassName] +
mov [ebp+WndClass.lpszClassName] eax +
lea eax [ebp+WndClass] +
push eax  +
call ds:RegisterClassA  +
test ax ax +
jnz loc_1012B4A  +
mov edi 80004005h +
jmp loc_1012ADC  +
push ebx  +
push ebx  +
call edi  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 80000000h  +
push offset WindowName  +
lea eax [ebp+ClassName] +
push eax  +
push ebx  +
call ds:CreateWindowExA  +
mov [esi+20h] eax +
cmp eax ebx +
jnz loc_1012B7B  +
mov edi 8007000Eh +
jmp loc_1012ADC  +
push esi  +
push 0FFFFFFEBh  +
push eax  +
call ds:SetWindowLongA  +
call sub_1012486  +
test eax eax +
jnz loc_1012B9D  +
push 2  +
call ds:GetCurrentThread  +
push eax  +
call ds:SetThreadPriority  +
push dword ptr [esi+1Ch]  +
call ds:SetEvent  +
push offset aWmnetmgr_dll  +
call ds:LoadLibraryA  +
mov edi ds:GetMessageA +
push ebx  +
mov [ebp+hLibModule] eax +
mov eax [esi+20h] +
push ebx  +
mov [ebp+var_2C] eax +
push eax  +
jmp loc_1012BD9  +
cmp eax 0FFFFFFFFh +
jz loc_1012BE3  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push ebx  +
push ebx  +
push [ebp+var_2C]  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
cmp eax ebx +
jnz loc_1012BC5  +
push ebx  +
mov ecx esi +
call sub_1012A8F  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
call ds:CoUninitialize  +
cmp [ebp+hLibModule] ebx +
jz loc_1012C0F  +
push ebx  +
push [ebp+hLibModule]  +
call ds:FreeLibraryAndExitThread  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
call sub_1012AB5  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push 0Ah  +
lea ecx [esi+24h] +
call sub_1012A74  +
test eax eax +
jge loc_1012C5B  +
mov eax 8007000Eh +
jmp loc_1012CBC  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push edi  +
push edi  +
call ds:CreateEventA  +
mov [esi+1Ch] eax +
cmp eax edi +
jnz loc_1012C85  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1012CBB  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1012CBB  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push esi  +
push offset loc_1012C25  +
push edi  +
push edi  +
call ds:_beginthreadex  +
add esp 18h +
mov [esi+18h] eax +
cmp eax edi +
jz loc_1012CB2  +
push 0FFFFFFFFh  +
push dword ptr [esi+1Ch]  +
call ds:WaitForSingleObject  +
cmp [esi+20h] edi +
jnz loc_1012CB9  +
mov eax 8007000Eh +
jmp loc_1012CBB  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+84h] +
push eax  +
call ds:InitializeCriticalSection  +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
push 80h  +
xor edi edi +
lea ebx [esi+4] +
push edi  +
push ebx  +
call memset  +
mov [ebp+var_4] ebx +
mov ebx ds:GetProcessHeap +
add esp 0Ch +
mov dword ptr [esi] 1 +
push 154h  +
push 0  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1012D28  +
mov ecx eax +
call sub_10128DC  +
jmp loc_1012D2A  +
xor eax eax +
mov ecx [ebp+var_4] +
mov [ecx] eax +
test eax eax +
jz loc_1012D66  +
mov ecx eax +
call sub_1012C3D  +
test eax eax +
jl loc_1012D49  +
add [ebp+var_4] 4 +
inc edi  +
cmp edi [esi] +
jl loc_1012D0B  +
jmp loc_1012D66  +
lea edi [esi+edi*4+4] +
mov ecx [edi] +
push 0  +
call sub_1012A8F  +
push dword ptr [edi]  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
and dword ptr [edi] 0 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi offset stru_1016918 +
push esi  +
call ds:EnterCriticalSection  +
test byte ptr dword_1016914 1 +
mov edi offset unk_1016878 +
jnz loc_1012DA9  +
or dword_1016914 1 +
mov ecx edi +
call sub_1012CC4  +
push offset byte_1013AEF  +
call sub_100845A  +
pop ecx  +
push esi  +
call ds:LeaveCriticalSection  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
xor ecx ecx +
push edi  +
test ebx ebx +
jz loc_1012E67  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1012E67  +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1012DDF  +
sub eax edi +
sar eax 1 +
cmp eax 28h +
jnz loc_1012E67  +
mov edi [ebp+arg_4] +
movzx edx word ptr [edi] +
shl ecx 4 +
cmp dx 30h +
jb loc_1012E10  +
cmp dx 39h +
ja loc_1012E10  +
movzx edx dx +
lea ecx [ecx+edx-30h] +
jmp loc_1012E38  +
cmp dx 61h +
jb loc_1012E25  +
cmp dx 66h +
ja loc_1012E25  +
movzx edx dx +
lea ecx [ecx+edx-57h] +
jmp loc_1012E38  +
cmp dx 41h +
jb loc_1012E56  +
cmp dx 46h +
ja loc_1012E56  +
movzx edx dx +
lea ecx [ecx+edx-37h] +
mov edx eax +
and edx 80000001h +
jns loc_1012E47  +
dec edx  +
or edx 0FFFFFFFEh +
inc edx  +
jz loc_1012E4F  +
mov [esi+ebx] cl +
inc esi  +
xor ecx ecx +
dec eax  +
inc edi  +
inc edi  +
test eax eax +
jnz loc_1012DF5  +
sub esi 14h +
neg esi  +
sbb esi esi +
and esi 80004005h +
mov eax esi +
jmp loc_1012E6C  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
cmp ebx 29h +
jnb loc_1012E8D  +
mov eax 8007007Ah +
jmp loc_1012EBF  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp ebx 1 +
jbe loc_1012EBB  +
mov eax [ebp+arg_8] +
movzx eax byte ptr [esi+eax] +
push eax  +
push offset a02x  +
push ebx  +
push edi  +
call sub_1002D1B  +
add esp 10h +
add edi 4 +
dec ebx  +
dec ebx  +
inc esi  +
cmp esi 14h +
jl loc_1012E94  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3_GS  +
mov eax [ebp+0Ch] +
mov edi [ebp+10h] +
xor ebx ebx +
lea ecx [ebp-110h] +
mov [ebp-128h] eax +
mov [ebp-120h] ebx +
mov [ebp-114h] ecx +
mov dword ptr [ebp-118h] 80h +
mov [ebp-11Ch] ebx +
mov [ebp-4] ebx +
cmp edi ebx +
jnz loc_1012F19  +
mov esi 80070057h +
jmp loc_1013120  +
cmp dword ptr [ebp+8] 16h +
jnz loc_1012F3E  +
push eax  +
lea eax [edi+0Ch] +
push eax  +
call sub_1012DBA  +
mov esi eax +
cmp esi ebx +
jl loc_1013120  +
push 16h  +
pop eax  +
mov [edi] ax +
jmp loc_1013120  +
push offset aWs2_32_dll  +
call ds:LoadLibraryW  +
mov [ebp-12Ch] eax +
cmp eax ebx +
jz loc_1013107  +
mov esi ds:GetProcAddress +
push offset aGetaddrinfow  +
push eax  +
call esi  +
push offset aFreeaddrinfow  +
push dword ptr [ebp-12Ch]  +
mov [ebp-124h] eax +
call esi  +
mov [ebp-138h] eax +
cmp [ebp-124h] ebx +
jz loc_1013107  +
cmp eax ebx +
jz loc_1013107  +
mov esi [ebp-128h] +
cmp esi ebx +
jz loc_1012FF6  +
push 5Bh  +
pop eax  +
cmp ax [esi] +
jnz loc_1012FF6  +
lea eax [esi+2] +
mov [ebp-134h] eax +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1012FB0  +
sub eax edx +
sar eax 1 +
dec eax  +
cmp eax ebx +
jle loc_1012FF6  +
push eax  +
push dword ptr [ebp-134h]  +
lea ecx [ebp-120h] +
call sub_10033F0  +
mov esi [ebp-120h] +
cmp esi ebx +
jl loc_101310C  +
lea ecx [ebp-120h] +
call sub_100338B  +
mov [ebp-128h] eax +
mov esi eax +
mov eax [ebp+8] +
mov [ebp-154h] eax +
lea eax [ebp-130h] +
push eax  +
lea eax [ebp-158h] +
push eax  +
push ebx  +
push esi  +
mov dword ptr [ebp-158h] 4 +
mov [ebp-150h] ebx +
mov [ebp-14Ch] ebx +
mov [ebp-148h] ebx +
mov [ebp-144h] ebx +
mov [ebp-140h] ebx +
mov [ebp-13Ch] ebx +
mov [ebp-130h] ebx +
call dword ptr [ebp-124h]  +
mov [ebp-124h] eax +
cmp eax ebx +
jz loc_10130E9  +
cmp [ebp+8] ebx +
jnz loc_1013083  +
push esi  +
lea eax [edi+0Ch] +
push eax  +
call sub_1012DBA  +
mov esi eax +
cmp esi ebx +
jl loc_1013077  +
push 16h  +
pop eax  +
mov [edi] ax +
jmp loc_101310C  +
mov esi [ebp-128h] +
mov eax [ebp-124h] +
cmp esi ebx +
jz loc_10130D7  +
mov ecx esi +
mov eax offset a255_255_255_25 +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10130B4  +
cmp dx bx +
jz loc_10130B0  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10130B4  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_101308E  +
xor eax eax +
jmp loc_10130B9  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_10130D1  +
push 2  +
pop eax  +
mov [edi] ax +
xor eax eax +
or dword ptr [edi+4] 0FFFFFFFFh +
mov [edi+2] ax +
xor esi esi +
jmp loc_101310C  +
mov eax [ebp-124h] +
cmp eax ebx +
jle loc_10130E5  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_101310C  +
mov esi [ebp-130h] +
push dword ptr [esi+10h]  +
push dword ptr [esi+18h]  +
push edi  +
call memcpy  +
add esp 0Ch +
push esi  +
call dword ptr [ebp-138h]  +
jmp loc_10130CD  +
mov esi 80004005h +
cmp [ebp-12Ch] ebx +
jz loc_1013120  +
push dword ptr [ebp-12Ch]  +
call ds:FreeLibrary  +
lea ecx [ebp-120h] +
call sub_1002970  +
mov eax esi +
call sub_100836C  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1016068 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
test esi esi +
jnz loc_1013175  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10082CB  +
leave   +
retn 14h  +
movzx eax word ptr [esi] +
push 2  +
pop ecx  +
cmp cx ax +
jnz loc_10131FC  +
test edi edi +
jz loc_101318A  +
cmp [ebp+arg_8] 10h +
jb loc_1013194  +
test ebx ebx +
jz loc_101319B  +
cmp [ebp+arg_10] 0Ah +
jnb loc_101319B  +
mov eax 8007007Ah +
jmp loc_1013164  +
test edi edi +
jz loc_10131D6  +
push 0FFFFFFFFh  +
push dword ptr [esi+4]  +
call ds:inet_ntoa  +
push eax  +
lea ecx [ebp+var_114] +
call sub_10034E7  +
lea ecx [ebp+var_114] +
call sub_100338B  +
push eax  +
push [ebp+arg_8]  +
push edi  +
call sub_1002CAC  +
lea ecx [ebp+var_114] +
call sub_1002970  +
test ebx ebx +
jz loc_10131F5  +
movzx eax word ptr [esi+2] +
push 0Ah  +
push ebx  +
push eax  +
call ds:ntohs  +
movzx eax ax +
push eax  +
call ds:_ultow  +
add esp 0Ch +
xor eax eax +
jmp loc_1013164  +
push 16h  +
pop ecx  +
cmp cx ax +
jnz loc_1013254  +
test ebx ebx +
jz loc_1013223  +
push dword ptr [esi+48h]  +
call ds:ntohl  +
push eax  +
push offset aU  +
push [ebp+arg_10]  +
push ebx  +
call sub_1002D1B  +
add esp 10h +
add esi 0Ch +
push esi  +
push [ebp+arg_8]  +
push edi  +
call sub_1012E78  +
test eax eax +
jge loc_1013164  +
test edi edi +
jz loc_1013164  +
cmp [ebp+arg_8] 0 +
jbe loc_1013164  +
xor ecx ecx +
mov [edi] cx +
jmp loc_1013164  +
push offset aWs2_32_dll  +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
test eax eax +
jnz loc_1013273  +
mov eax 80004005h +
jmp loc_1013164  +
push offset aGetnameinfow  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jnz loc_101329B  +
mov esi 80004005h +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov eax esi +
jmp loc_1013164  +
push 2  +
pop edx  +
test ebx ebx +
jz loc_10132A5  +
push 0Ah  +
pop edx  +
movzx ecx word ptr [esi] +
dec ecx  +
dec ecx  +
jz loc_10132C3  +
sub ecx 14h +
jz loc_10132BF  +
dec ecx  +
jz loc_10132BB  +
mov ecx 80h +
jmp loc_10132C6  +
push 1Ch  +
jmp loc_10132C5  +
push 4Ch  +
jmp loc_10132C5  +
push 10h  +
pop ecx  +
push edx  +
push [ebp+arg_10]  +
push ebx  +
push [ebp+arg_8]  +
push edi  +
push ecx  +
push esi  +
call eax  +
mov esi eax +
test esi esi +
jz loc_1013318  +
test edi edi +
jz loc_10132E8  +
cmp [ebp+arg_8] 0 +
jbe loc_10132E8  +
xor eax eax +
mov [edi] ax +
test ebx ebx +
jz loc_10132F7  +
cmp [ebp+arg_10] 0 +
jbe loc_10132F7  +
xor eax eax +
mov [ebx] ax +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
test esi esi +
jle loc_1013294  +
and esi 0FFFFh +
or esi 80070000h +
jmp loc_1013294  +
xor esi esi +
jmp loc_1013288  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
test ecx ecx +
jnz loc_1013336  +
mov eax 80004003h +
jmp loc_1013348  +
push [ebp+arg_4]  +
mov eax dword_1016930 +
push [ebp+arg_0]  +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+14h]  +
pop ebp  +
retn 8  +
***
push ebx  +
mov eax [esp+14h] +
or eax eax +
jnz loc_1013381  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov eax [esp+8] +
div  ecx +
mov eax edx +
xor edx edx +
jmp loc_10133D1  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_101338F  +
div  ebx +
mov ecx eax +
mul  dword ptr [esp+14h] +
xchg eax ecx +
mul  dword ptr [esp+10h] +
add edx ecx +
jb loc_10133BA  +
cmp edx [esp+0Ch] +
ja loc_10133BA  +
jb loc_10133C2  +
cmp eax [esp+8] +
jbe loc_10133C2  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
retn 10h  +
***
cmp cl 40h +
jnb loc_10133FA  +
cmp cl 20h +
jnb loc_10133F0  +
shld edx eax +
shl eax cl +
retn   +
***
mov edx eax +
xor eax eax +
and cl 1Fh +
shl edx cl +
retn   +
***
xor eax eax +
xor edx edx +
retn   +
***
push ebx  +
push esi  +
mov eax [esp+18h] +
or eax eax +
jnz loc_1013432  +
mov ecx [esp+14h] +
mov eax [esp+10h] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+0Ch] +
div  ecx +
mov edx ebx +
jmp loc_1013473  +
mov ecx eax +
mov ebx [esp+14h] +
mov edx [esp+10h] +
mov eax [esp+0Ch] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_1013440  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+18h] +
mov ecx eax +
mov eax [esp+14h] +
mul  esi +
add edx ecx +
jb loc_101346E  +
cmp edx [esp+10h] +
ja loc_101346E  +
jb loc_101346F  +
cmp eax [esp+0Ch] +
jbe loc_101346F  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013B08 +
jmp loc_10082C0  +
***
mov ecx [ebp-10h] +
add ecx 4 +
jmp loc_1002EE0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013B34 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14FCh] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013B68 +
jmp loc_10082C0  +
***
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-9C0h] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013B8C +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-238h] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013BF0 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-394h] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013C2C +
jmp loc_10082C0  +
***
lea ecx [ebp-2C0h] +
jmp sub_1002970  +
***
lea ecx [ebp-1B0h] +
jmp sub_1002970  +
***
lea ecx [ebp-0A0h] +
jmp sub_1002970  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2FCh] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013C68 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013C94 +
jmp loc_10082C0  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013CC8 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013CF4 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-134h] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013D74 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013DA0 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013DCC +
jmp loc_10082C0  +
***
lea ecx [ebp-140h] +
jmp sub_1005D67  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-174h] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013E10 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013E44 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-22Ch] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013E80 +
jmp loc_10082C0  +
***
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-10h] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013EAC +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013ED8 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013F04 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-548h] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013F38 +
jmp loc_10082C0  +
***
idiv  dh +
dec dword ptr [ebx-72F7DBACh]  +
inc edx  +
or al 8Bh +
mov bh [ebp+edi*8-37CC0001h] +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1013FEC +
jmp loc_10082C0  +
***
lea ecx [ebp-0A0h] +
jmp sub_1002970  +
***
lea ecx [ebp-130h] +
jmp sub_1002970  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-140h] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_1014020 +
jmp loc_10082C0  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-15Ch] +
xor ecx eax +
call sub_10082CB  +
mov ecx [edx-4] +
xor ecx eax +
call sub_10082CB  +
mov eax offset dword_101408C +
jmp loc_10082C0  +
***
push offset CriticalSection  +
call ds:InitializeCriticalSection  +
push offset loc_1013A94  +
call sub_100845A  +
pop ecx  +
retn   +
***
call sub_100A250  +
push offset nullsub_2  +
call sub_100845A  +
pop ecx  +
retn   +
***
push offset byte_1013AAB  +
call sub_100845A  +
pop ecx  +
retn   +
***
push offset loc_1013ABA  +
call sub_100845A  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi offset dword_10021D0 +
mov edi offset unk_10166A0 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
retn   +
***
push offset byte_1013ACF  +
call sub_100845A  +
pop ecx  +
retn   +
***
push offset stru_1016918  +
call ds:InitializeCriticalSection  +
push offset loc_1013ADE  +
call sub_100845A  +
pop ecx  +
retn   +
***
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
retn   +
***
mov eax dword_101656C +
test eax eax +
jz locret_1013AC9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
push offset stru_1016918  +
call ds:DeleteCriticalSection  +
retn   +
***
arpl [eax+eax+0] si +
jmp near ptr 736A9D39h  +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756F9863h  +
***
retf 6904h  +
***
