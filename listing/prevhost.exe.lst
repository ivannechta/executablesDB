call ds:GetLastError  +
test eax eax +
jle loc_100548B  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl locret_1005492  +
mov eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
cmp eax 104h +
jz loc_10054D1  +
cmp eax 105h +
jz loc_10054D1  +
cmp eax 106h +
jz loc_10054D1  +
cmp eax 100h +
jz loc_10054D1  +
cmp eax 101h +
jz loc_10054D1  +
cmp eax 102h +
jz loc_10054D1  +
xor eax eax +
jmp loc_10054D4  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1008000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebp+arg_10] +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
mov eax ecx +
movs   +
mov ecx [ebp+arg_20] +
lea edi [eax+8] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
lea edi [eax+18h] +
lea esi [ebp+var_24] +
movs   +
movs   +
movs   +
mov [eax+28h] ecx +
xor ecx ecx +
mov [eax+2Ch] ecx +
mov [eax+34h] ecx +
mov [eax+38h] ecx +
mov ecx [ebp+var_4] +
movs   +
pop edi  +
xor ecx ebp +
mov dword ptr [eax] offset off_100116C +
mov dword ptr [eax+4] 1 +
mov dword ptr [eax+30h] 8000FFFFh +
pop esi  +
call sub_100624C  +
leave   +
retn 24h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+34h] +
mov dword ptr [esi] offset off_100116C +
test eax eax +
jz loc_100556D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+38h] +
test esi esi +
jz loc_100557A  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_1001178  +
push dword ptr [ebp+8]  +
call QISearch  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005555  +
test [ebp+arg_0] 1 +
jz loc_10055BC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
and dword ptr [edx] 0 +
mov ecx [ecx+34h] +
mov eax 80004005h +
test ecx ecx +
jz loc_10055E9  +
mov [edx] ecx +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+2Ch] 0 +
mov eax 80004005h +
jz loc_100561D  +
mov ecx [esi+38h] +
test ecx ecx +
jz loc_100561D  +
push [ebp+ppv]  +
push [ebp+iid]  +
push ecx  +
call ds:CoGetInterfaceAndReleaseStream  +
and dword ptr [esi+38h] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+2Ch] 0 +
mov [ebp+var_4] 80004005h +
jnz loc_1005682  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jge loc_100564E  +
and [ebp+var_4] 0 +
mov [esi+30h] ebx +
jmp loc_100567A  +
push edi  +
mov edi [ebp+pUnk] +
lea eax [esi+38h] +
push eax  +
push edi  +
lea eax [esi+18h] +
push eax  +
call ds:CoMarshalInterThreadInterfaceInStream  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1005676  +
mov [esi+30h] ebx +
mov [esi+34h] edi +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
jmp loc_1005679  +
mov [esi+30h] eax +
pop edi  +
mov dword ptr [esi+2Ch] 1 +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_10011B0  +
push dword ptr [ebp+8]  +
call QISearch  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10056F2  +
test esi esi +
jz loc_10056F2  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx ds:PeekMessageW +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] 1 +
mov [ebp+var_8] esi +
cmp [ebp+var_4] esi +
jz loc_10057C8  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
push 4FFh  +
push 0FFFFFFFFh  +
push esi  +
lea eax [ebp+pHandles] +
push eax  +
push 1  +
call ds:MsgWaitForMultipleObjects  +
cmp eax esi +
jz loc_10057AF  +
cmp eax 1 +
jz loc_100579E  +
cmp eax 0FFFFFFFFh +
jz loc_1005763  +
mov [ebp+var_8] 8000FFFFh +
jmp loc_10057B2  +
call sub_1005475  +
mov [ebp+var_8] eax +
jmp loc_10057B2  +
cmp [ebp+Msg.message] 12h +
jz loc_10057AF  +
lea eax [ebp+Msg] +
push eax  +
call sub_1005498  +
test eax eax +
jz loc_100578A  +
mov eax [edi] +
lea ecx [ebp+Msg] +
push ecx  +
push edi  +
call dword ptr [eax+24h]  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push 1  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+Msg] +
push eax  +
call ebx  +
test eax eax +
jnz loc_100576D  +
jmp loc_10057B2  +
mov [ebp+var_4] esi +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
test eax eax +
jnz loc_10057BF  +
mov [ebp+var_4] esi +
cmp [ebp+var_8] esi +
jge loc_1005729  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
cmp dword ptr [esi+30h] 0 +
jl loc_1005806  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_10055C8  +
test eax eax +
jl loc_1005806  +
push edi  +
push dword ptr [esi+28h]  +
mov edi [ebp+8] +
push edi  +
call sub_1005709  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
pop edi  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push dword ptr [esi+4]  +
call ds:CoRevokeClassObject  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:CreateEventW +
xor ebx ebx +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov esi ecx +
call edi  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov [esi+4] eax +
call edi  +
mov [esi+8] eax +
cmp [esi+4] ebx +
jz loc_100586F  +
cmp eax ebx +
jz loc_100586F  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
retn   +
pop edi  +
pop esi  +
pop ebx  +
jmp sub_1005475  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 10h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_10011D0  +
push dword ptr [ebp+8]  +
call QISearch  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
call ds:SetEvent  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:COMCTL32_328  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi] eax +
pop esi  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 7FFFFFFFh  +
push dword ptr [ecx]  +
call ds:COMCTL32_334  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1005918  +
mov [ecx] eax +
cmp eax 0FFFFFFFFh +
jz loc_1005921  +
xor eax eax +
jmp loc_1005926  +
mov eax 8007000Eh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100594D  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call ds:COMCTL32_386  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jl locret_100598F  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 2  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset dword_100120C  +
push dword ptr [ebp+8]  +
call QISearch  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi] offset off_1001200 +
call ds:SHELL32_176  +
push dword ptr [esi+8]  +
call ds:SetEvent  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10059D2  +
test [ebp+arg_0] 1 +
jz loc_1005A0F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005A42  +
test esi esi +
jz loc_1005A42  +
push 1  +
mov ecx esi +
call sub_10059F5  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005A76  +
test esi esi +
jz loc_1005A76  +
push 1  +
mov ecx esi +
call sub_10055A2  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov eax ecx +
mov ecx [ebp+arg_4] +
mov dword ptr [eax] offset off_1001198 +
mov dword ptr [eax+8] 1 +
lea edi [eax+0Ch] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
mov [eax+1Ch] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001198 +
jz loc_1005ACF  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+8] +
mov eax [ebx] +
push esi  +
push edi  +
push ebx  +
call dword ptr [eax+4]  +
and dword ptr [ebp+8] 0 +
lea esi [ebx+8] +
lea edi [ebp-10h] +
movs   +
movs   +
lea eax [ebp+8] +
push eax  +
push offset dword_1001214  +
push 1  +
movs   +
push 0  +
lea eax [ebp-10h] +
push eax  +
movs   +
call ds:CoCreateInstance  +
push dword ptr [ebp+8]  +
mov esi eax +
push esi  +
mov ecx ebx +
call sub_1005627  +
pop edi  +
test esi esi +
pop esi  +
pop ebx  +
jl loc_1005B31  +
mov eax [ebp+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+14h] +
push ebx  +
push esi  +
push edi  +
mov dword ptr [ebp-4] 80070057h +
test eax eax +
jz loc_1005C0A  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1005C0A  +
and dword ptr [eax] 0 +
mov ebx [ebp+8] +
lea eax [ebx+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_10044EC +
mov esi eax +
xor edx edx +
cmps   +
mov [ebp+0Ch] eax +
jnz loc_1005B92  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 1  +
push edx  +
push eax  +
call ds:CoCreateInstance  +
mov [ebp-4] eax +
jmp loc_1005C0A  +
push 3Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1005BC4  +
push dword ptr [ebx+1Ch]  +
mov esi [ebp+10h] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+0Ch] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
mov ecx eax +
movs   +
call sub_10054DD  +
mov esi eax +
jmp loc_1005BC6  +
xor esi esi +
test esi esi +
jz loc_1005C03  +
push offset loc_1005ADB  +
push 0Ch  +
push esi  +
push offset loc_10057D4  +
call ds:SHCreateThread  +
test eax eax +
jz loc_1005BFB  +
mov eax [esi+30h] +
mov [ebp-4] eax +
test eax eax +
jl loc_1005BFB  +
push dword ptr [ebp+14h]  +
mov ecx esi +
push dword ptr [ebp+10h]  +
call sub_10055F2  +
mov [ebp-4] eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1005C0A  +
mov dword ptr [ebp-4] 8007000Eh +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea edi [esi+0Ch] +
cmp dword ptr [edi] 0 +
jnz loc_1005C39  +
push 8  +
mov ecx edi +
call sub_10058D4  +
test eax eax +
jz loc_1005C88  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1005C56  +
push dword ptr [esi+4]  +
mov ecx eax +
push dword ptr [ebp+0Ch]  +
call sub_1005A83  +
mov esi eax +
jmp loc_1005C58  +
xor esi esi +
test esi esi +
jz loc_1005C88  +
lea eax [esi+4] +
push eax  +
push 8  +
push 4  +
push esi  +
push dword ptr [ebp+0Ch]  +
call ds:CoRegisterClassObject  +
mov ebx eax +
test ebx ebx +
jl loc_1005C80  +
push 0  +
push esi  +
mov ecx edi +
call sub_10058FA  +
jmp loc_1005C8D  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1005C8D  +
mov ebx 8007000Eh +
call ds:CoFreeUnusedLibraries  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
xor eax eax +
inc eax  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
inc eax  +
test ecx ecx +
jz loc_1005CD6  +
push 0  +
push offset loc_1005CA1  +
push ecx  +
call ds:COMCTL32_386  +
and dword ptr [esi] 0 +
push 0  +
call ds:COMCTL32_329  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1005CF8  +
call sub_1006AD1  +
test al al +
jnz loc_1005CF8  +
mov ecx esi +
pop esi  +
jmp loc_1005CAC  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_1005CDD  +
test [ebp+arg_0] 1 +
jz loc_1005D1C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
mov eax dword_1008000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpCmdLine] +
push ebx  +
push edi  +
xor edi edi +
push edi  +
push edi  +
xor ebx ebx +
inc ebx  +
push ebx  +
push edi  +
mov [ebp+var_68] eax +
call ds:HeapSetInformation  +
push 2  +
push edi  +
call ds:CoInitializeEx  +
test eax eax +
jl loc_1005EE8  +
call sub_1005957  +
push edi  +
push 8  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push offset dword_100115C  +
call ds:CoInitializeSecurity  +
test eax eax +
jl loc_1005EE2  +
push esi  +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_1005DA6  +
mov dword ptr [eax] offset off_1001224 +
mov [eax+4] edi +
mov [eax+0Ch] edi +
mov [eax+10h] ebx +
mov esi eax +
jmp loc_1005DA8  +
xor esi esi +
cmp esi edi +
jz loc_1005EE1  +
mov ecx esi +
call sub_100583D  +
test eax eax +
jl loc_1005EDB  +
push esi  +
call ds:CoRegisterSurrogate  +
test eax eax +
jl loc_1005EDB  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_1005DEE  +
mov ecx [esi+8] +
mov dword ptr [eax] offset off_1001200 +
mov [eax+4] ebx +
mov [eax+8] ecx +
mov [ebp+var_6C] eax +
jmp loc_1005DF1  +
mov [ebp+var_6C] edi +
cmp [ebp+var_6C] edi +
jz loc_1005EDB  +
push [ebp+var_6C]  +
call ds:SHELL32_176  +
push 27h  +
lea eax [ebp+sz] +
push eax  +
push [ebp+var_68]  +
call ds:SHAnsiToUnicode  +
lea eax [ebp+pclsid] +
push eax  +
lea eax [ebp+sz] +
push eax  +
call ds:CLSIDFromString  +
test eax eax +
jl loc_1005EDB  +
mov eax [esi] +
lea ecx [ebp+pclsid] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
cmp eax edi +
mov [ebp+var_68] eax +
jl loc_1005EDB  +
mov [ebp+var_70] ebx +
mov ebx ds:PeekMessageW +
cmp [ebp+var_70] edi +
jz loc_1005EB6  +
push 4FFh  +
push 0FFFFFFFFh  +
push edi  +
lea eax [esi+4] +
push eax  +
push 1  +
call ds:MsgWaitForMultipleObjects  +
cmp eax edi +
jz loc_1005EAE  +
cmp eax 1 +
jz loc_1005E9A  +
cmp eax 0FFFFFFFFh +
jnz loc_1005EB6  +
call sub_1005475  +
mov [ebp+var_68] eax +
jmp loc_1005EB1  +
cmp [ebp+Msg.message] 12h +
jz loc_1005EAE  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push 1  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call ebx  +
test eax eax +
jnz loc_1005E77  +
jmp loc_1005EB1  +
mov [ebp+var_70] edi +
cmp [ebp+var_68] edi +
jge loc_1005E46  +
push edi  +
push offset loc_1005818  +
lea ecx [esi+0Ch] +
call sub_100592F  +
mov eax [ebp+var_6C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 0EA60h  +
push dword ptr [esi+8]  +
call ds:WaitForSingleObject  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
call ds:CoUninitialize  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_100624C  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005F26  +
test esi esi +
jz loc_1005F26  +
push 1  +
mov ecx esi +
call sub_1005CFF  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1005F4F  +
test eax eax +
jnz loc_1005F54  +
mov ecx [esi] +
test ecx ecx +
jz loc_1005F4C  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1005F40  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1008348 +
push offset dword_1008338  +
push dword_1008344  +
mov dword_1008338 eax +
push offset unk_1008328  +
push offset unk_100832C  +
push offset unk_1008324  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1008334 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1005FF4  +
cmp eax esi +
jnz loc_1005FE7  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1005FF7  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1005FCE  +
xor esi esi +
inc esi  +
mov eax dword_1008684 +
cmp eax esi +
jnz loc_100600A  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1006039  +
mov eax dword_1008684 +
test eax eax +
jnz loc_1006033  +
mov dword_1008684 esi +
push offset dword_1001138  +
push offset dword_100112C  +
call sub_1005F33  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006039  +
jmp loc_1006161  +
mov dword_1008340 esi +
mov eax dword_1008684 +
cmp eax esi +
jnz loc_100605D  +
push offset dword_1001128  +
push offset dword_1001120  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1008684 2 +
test ebx ebx +
jnz loc_1006069  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1008690 0 +
jz loc_100608D  +
push offset dword_1008690  +
call sub_1006659  +
pop ecx  +
test eax eax +
jz loc_100608D  +
push 0  +
push 2  +
push 0  +
call dword_1008690  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_10060A7  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_10060B7  +
cmp al 20h +
ja loc_10060B7  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_10060A7  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_10060C3  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_10060C6  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_100833C eax +
cmp dword_1008330 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_10060F8  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_100610B  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1006094  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_100833C eax +
cmp dword_1008330 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_1008340 0 +
jnz loc_100614C  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100833C +
jmp loc_100616D  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100618A  +
xor eax eax +
jmp loc_10061D7  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1006186  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_10061C4  +
cmp ecx 20Bh +
jnz loc_1006186  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1006186  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_10061D2  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1006186  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1008330 eax +
call sub_10067F2  +
push eax  +
call ds:__set_app_type  +
or dword_100867C 0FFFFFFFFh +
or dword_1008680 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1008350 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100834C +
mov [eax] ecx +
call sub_1006784  +
cmp dword_1008018 0 +
jnz loc_1006230  +
push offset sub_1006784  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100676C  +
xor eax eax +
retn   +
***
call sub_1006831  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1008000 +
jnz loc_1006257  +
retn 0  +
jmp loc_10068C7  +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1006416  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1006543  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_10064A8  +
jmp loc_1006450  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_100647B  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_10064B2  +
jg loc_10064BB  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1006450  +
cmp [ebp+var_1] 0 +
jz loc_10064A8  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100649A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_1006488  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10064EF  +
cmp dword_100868C 0 +
jz loc_10064EF  +
push offset dword_100868C  +
call sub_1006659  +
add esp 4 +
test eax eax +
jz loc_10064EF  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_100868C  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_1006510  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1006528  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_10064A8  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_1006488  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10065A4  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10065A4  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100659E  +
cmp eax 19930521h +
jz loc_100659E  +
cmp eax 19930522h +
jz loc_100659E  +
cmp eax 1994000h +
jnz loc_10065A4  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1006564+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10065E6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10065E2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100664D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1006645  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100664F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1006635  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10065D0  +
pop ecx  +
test eax eax +
jz loc_10066B6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1006610  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10066B6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10066BF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100624C  +
push offset dword_1008000  +
call sub_10063E0  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10067E5  +
cmp ecx 0FFFFFFFFh +
jz loc_10067E5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10067DE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10067DE  +
cmp edx 10000000h +
jnb loc_10067DE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10067DE  +
jmp loc_10067D9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1006827  +
push eax  +
call sub_100678C  +
test eax eax +
jz loc_1006827  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100681C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1006827  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1008000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1006863  +
test eax ebx +
jz loc_1006863  +
not eax  +
mov dword_1008004 eax +
jmp loc_10068BE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10068AA  +
test dword_1008000 ebx +
jnz loc_10068AF  +
mov esi 0BB40E64Fh +
mov dword_1008000 esi +
not esi  +
mov dword_1008004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1008458 eax +
mov dword_1008454 ecx +
mov dword_1008450 edx +
mov dword_100844C ebx +
mov dword_1008448 esi +
mov dword_1008444 edi +
mov word_1008470 ss +
mov word_1008464 cs +
mov word_1008440 ds +
mov word_100843C es +
mov word_1008438 fs +
mov word_1008434 gs +
pushf   +
pop dword_1008468  +
mov eax [ebp+0] +
mov dword_100845C eax +
mov eax [ebp+4] +
mov dword_1008460 eax +
lea eax [ebp+8] +
mov dword_100846C eax +
mov eax [ebp-320h] +
mov dword_10083A8 10001h +
mov eax dword_1008460 +
mov dword_1008364 eax +
mov dword_1008358 0C0000409h +
mov dword_100835C 1 +
mov eax dword_1008000 +
mov [ebp-328h] eax +
mov eax dword_1008004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push esi  +
mov eax [esp+14h] +
or eax eax +
jnz loc_10069E1  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+8] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  dword ptr [esp+10h] +
mov ecx eax +
mov eax esi +
mul  dword ptr [esp+10h] +
add edx ecx +
jmp loc_1006A28  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_10069EF  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+14h] +
mov ecx eax +
mov eax [esp+10h] +
mul  esi +
add edx ecx +
jb loc_1006A1D  +
cmp edx [esp+0Ch] +
ja loc_1006A1D  +
jb loc_1006A26  +
cmp eax [esp+8] +
jbe loc_1006A26  +
dec esi  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
xor ebx ebx +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov ebx offset unk_1008020 +
retn   +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1006A99  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
cmp dword_1008674 ebx +
jnz loc_1006B06  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
cmp eax ebx +
jz loc_1006AFE  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov dword_1008674 eax +
cmp dword_1008674 ebx +
jz loc_1006B11  +
call dword_1008674  +
test al al +
setnz bl  +
mov al bl +
pop ebx  +
retn   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756EB9B5h  +
***
