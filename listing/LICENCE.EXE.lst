sub esp 744h +
mov ebp esp +
sub esp 44h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
cmp dword ptr [eax+0Ch] 5 +
jle loc_402C7C  +
dec ecx  +
push 0  +
push 0  +
push 0Bh  +
mov edx [ebp+hWnd] +
mov [ebp+wParam] ecx +
push edx  +
call SendMessageA  +
push 0FFFF0000h  +
push 0  +
push 1101h  +
mov ebx [ebp+hWnd] +
push ebx  +
call SendMessageA  +
mov eax [ebp+arg_4] +
push eax  +
call sub_406238  +
add esp 4 +
mov edi [ebp+arg_4] +
xor esi esi +
cmp [edi+0Ch] esi +
jle loc_402E53  +
xor ecx ecx +
mov edx 0FFFF0002h +
mov ebx 2Fh +
mov eax 10h +
mov edi 0FF00h +
mov [ebp+var_3C] esi +
mov [ebp+var_34] edx +
mov [ebp+var_30] ebx +
mov ebx [ebp+arg_4] +
mov [ebp+lParam] ecx +
mov [ebp+var_2C] ecx +
mov [ebp+var_28] eax +
mov [ebp+var_24] edi +
mov [ebp+var_10] ecx +
mov edx [ebp+var_3C] +
mov eax [ebx+10h] +
mov ecx [eax+edx*4] +
call sub_408280  +
mov [ebp+var_20] eax +
push eax  +
call sub_40A110  +
mov [ebp+var_1C] eax +
mov edi ds:dword_41E27C +
mov edx ds:dword_41E278 +
mov eax [ebp+arg_4] +
mov [ebp+var_14] edx +
mov [ebp+var_18] edx +
mov ebx [ebp+var_3C] +
mov ecx [eax+10h] +
mov [ebp+var_4] edi +
mov edi [ecx+ebx*4] +
lea edx [ebp+lParam] +
mov eax [ebp+hWnd] +
push edx  +
push 0  +
push 1100h  +
mov [ebp+var_C] edi +
push eax  +
call SendMessageA  +
mov [ebp+lParam] eax +
add esp 4 +
mov ecx [ebp+arg_4] +
xor esi esi +
mov edi [ecx+10h] +
mov ebx [edi+ebx*4] +
cmp [ebx+4E0h] esi +
jle loc_402E2C  +
xor ebx ebx +
mov edi 1 +
cmp ds:dword_41E1DC ebx +
jnz loc_402DB2  +
test esi esi +
jz loc_402DB2  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_3C] +
mov ecx [ecx+10h] +
mov edx [ecx+edx*4] +
mov ecx [edx+4E4h] +
mov edx [ecx+ebx*4] +
mov ecx [ecx+esi*4] +
add edx 20h +
add ecx 20h +
push edx  +
push ecx  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jnz loc_402DA3  +
xor edi edi +
jmp loc_402DB2  +
inc ebx  +
mov eax ds:dword_41E1DC +
test eax eax +
jnz loc_402DB2  +
cmp ebx esi +
jl loc_402D73  +
test edi edi +
jz loc_402E13  +
mov ebx [ebp+arg_4] +
mov eax [ebp+var_3C] +
mov edi [ebx+10h] +
mov edx [edi+eax*4] +
mov ecx [edx+4E4h] +
mov ebx [ecx+esi*4] +
add ebx 20h +
mov [ebp+var_20] ebx +
push ebx  +
call sub_40A110  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_4] +
mov edx [ebp+arg_4] +
mov [ebp+var_14] eax +
mov [ebp+var_18] eax +
mov edi [ebp+var_3C] +
mov ecx [edx+10h] +
lea edx [ebp+lParam] +
push edx  +
push 0  +
mov ebx [ecx+edi*4] +
push 1100h  +
mov ecx [ebp+hWnd] +
mov eax [ebx+4E4h] +
push ecx  +
mov edi [eax+esi*4] +
mov [ebp+var_C] edi +
call SendMessageA  +
add esp 4 +
mov eax [ebp+arg_4] +
mov ebx [ebp+var_3C] +
inc esi  +
mov edi [eax+10h] +
mov edx [edi+ebx*4] +
cmp [edx+4E0h] esi +
jg loc_402D60  +
mov ecx [ebp+lParam] +
mov eax [ebp+hWnd] +
push ecx  +
mov ebx [ebp+wParam] +
push ebx  +
push 1102h  +
mov esi [ebp+var_3C] +
push eax  +
call SendMessageA  +
mov edi [ebp+arg_4] +
inc esi  +
cmp [edi+0Ch] esi +
jg loc_402CBF  +
push 0  +
push 1  +
push 0Bh  +
mov edx [ebp+hWnd] +
push edx  +
call SendMessageA  +
call sub_4073F4  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 86Ch +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push 58h  +
lea ecx [ebp+var_260] +
push esi  +
push ecx  +
call sub_4097E4  +
push esi  +
call sub_4196EC  +
add esp 4 +
mov ebx eax +
cmp eax 20002h +
jz loc_402EB4  +
cmp ebx 0C0000h +
jz loc_402EB4  +
cmp ebx 0C0001h +
jz loc_402EB4  +
xor edx edx +
jmp loc_402EB9  +
mov edx 1 +
cmp edx 1 +
lea eax [ebp+var_260] +
sbb ecx ecx +
and cl 0F4h +
add ecx 58h +
mov [ebp+var_260.lStructSize] ecx +
mov edx ds:hWndParent +
mov [ebp+var_260.hwndOwner] edx +
mov ecx ds:hInstance +
lea edx [ebp+var_868] +
mov [ebp+var_260.hInstance] ecx +
mov ecx 605h +
mov [ebp+var_260.nFilterIndex] esi +
mov [ebp+var_260.nMaxFile] ecx +
mov ecx 88A06h +
mov [ebp+var_260.Flags] ecx +
xor ecx ecx +
mov [ebp+var_260.lpstrFilter] offset aLicenceKeyFile +
mov [ebp+var_260.lpstrFile] edx +
mov byte ptr [ebp+var_868] cl +
mov [ebp+var_260.lpstrTitle] offset aOpenAndReadLic +
add esp 0Ch +
push eax  +
call GetOpenFileNameA  +
test eax eax +
jz loc_402FC8  +
mov dx [ebp+var_260.nFileOffset] +
lea ecx [ebp+var_868] +
and edx 0FFFFh +
lea ebx [ebp+edx+var_868] +
cmp ebx ecx +
jbe loc_402F66  +
cmp byte ptr [ebx-1] 0 +
jz loc_402F66  +
mov byte ptr [ebx-1] 0 +
cmp byte ptr [ebx] 0 +
jz loc_402FA8  +
mov esi 1 +
lea edx [ebp+var_868] +
lea ecx [ebp+var_208] +
push ebx  +
push edx  +
push ecx  +
call sub_41B444  +
push 0  +
push offset dword_4265F4  +
lea edx [ebp+var_208] +
push edx  +
call sub_40328C  +
push ebx  +
call sub_40A110  +
inc eax  +
add esp 1Ch +
add ebx eax +
cmp byte ptr [ebx] 0 +
jnz loc_402F70  +
mov eax offset dword_4265F4 +
push eax  +
call sub_405F98  +
mov ebx offset dword_4265F4 +
mov edi ds:dword_41E0A0 +
push ebx  +
push edi  +
call sub_402C64  +
add esp 0Ch +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 0AD4h +
push ebx  +
push esi  +
push edi  +
push 205h  +
lea eax [ebp+Buffer] +
push eax  +
call GetWindowsDirectoryA  +
push offset aRegedit_exe  +
lea ecx [ebp+Buffer] +
lea edx [ebp+var_8CC] +
push ecx  +
push edx  +
call sub_41B444  +
lea ebx [ebp+var_8CC] +
push ebx  +
call sub_40BD08  +
add esp 10h +
push 1  +
push ebx  +
call sub_40C144  +
add esp 8 +
test eax eax +
jz loc_403041  +
lea ebx [ebp+var_8CC] +
push ebx  +
push offset aCannotFindTheW  +
call sub_408028  +
add esp 8 +
jmp loc_4031C3  +
mov esi offset aLicence_reg +
lea edi [ebp+FileName] +
mov ecx 81h +
movs   +
movs   +
push 58h  +
lea eax [ebp+var_6C4] +
push ecx  +
push eax  +
call sub_4097E4  +
mov ecx 58h +
lea edi [ebp+FileName] +
mov [ebp+var_6C4.lStructSize] ecx +
mov edx ds:hWndParent +
mov [ebp+var_6C4.hwndOwner] edx +
mov esi ds:hInstance +
mov eax 205h +
mov ecx 8806h +
mov [ebp+var_6C4.hInstance] esi +
mov [ebp+var_6C4.lpstrFile] edi +
mov [ebp+var_6C4.lpstrFilter] offset aRegistryFiles +
mov [ebp+var_6C4.nFilterIndex] 0 +
mov [ebp+var_6C4.nMaxFile] eax +
mov [ebp+var_6C4.Flags] ecx +
mov [ebp+var_6C4.lpstrTitle] offset aExportRegistry +
add esp 0Ch +
lea edx [ebp+var_6C4] +
push edx  +
call GetSaveFileNameA  +
test eax eax +
jz loc_4031C3  +
mov esi offset aD +
lea edi [ebp+StartupInfo] +
mov ecx 11h +
movs   +
mov eax 100h +
lea edx [ebp+FileName] +
mov [ebp+StartupInfo.dwFlags] eax +
mov [ebp+StartupInfo.hStdInput] ecx +
mov [ebp+StartupInfo.hStdOutput] ecx +
mov [ebp+StartupInfo.hStdError] ecx +
push edx  +
call sub_40AF50  +
lea esi [ebp+FileName] +
lea edi [ebp+CommandLine] +
push esi  +
push offset aESHkey_local_m  +
push edi  +
call sub_40A2B4  +
mov esi offset unk_41EBC0 +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
lea eax [ebp+CommandLine] +
push eax  +
push ebx  +
push offset aRunningRegedit  +
call sub_40810C  +
add esp 1Ch +
lea ecx [ebp+hObject] +
lea edx [ebp+StartupInfo] +
push ecx  +
push edx  +
push 0  +
push 0  +
push 8  +
push 1  +
push 0  +
push 0  +
lea esi [ebp+CommandLine] +
push esi  +
push ebx  +
call CreateProcessA  +
test eax eax +
jnz loc_403192  +
call GetLastError  +
push eax  +
push esi  +
push ebx  +
push offset aCannotLaunchWi  +
call sub_408028  +
add esp 10h +
jmp loc_4031A1  +
push 1D4C0h  +
mov ebx [ebp+hObject] +
push ebx  +
call WaitForSingleObject  +
lea eax [ebp+ExitCode] +
push eax  +
mov ecx [ebp+hObject] +
push ecx  +
call GetExitCodeProcess  +
mov edx [ebp+hObject] +
push edx  +
call CloseHandle  +
mov esi [ebp-10h] +
push esi  +
call CloseHandle  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 354h +
mov ebp esp +
sub esp 1000h +
test [esp+1000h+var_1000] esp +
dec edx  +
jnz loc_403294  +
sub esp 0BB0h +
mov eax [ebp+arg_0] +
lea ecx [ebp+var_1BAC] +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push offset unk_41E0C8  +
mov [ebp+var_19A0] esi +
push eax  +
push ecx  +
call sub_41B4B0  +
lea edx [ebp+var_1BAC] +
push edx  +
push offset aReadingKeysFro  +
call sub_40810C  +
add esp 14h +
lea ebx [ebp+var_1BAC] +
push offset aR  +
push ebx  +
call sub_40AF6C  +
add esp 8 +
test eax eax +
mov [ebp+var_19A4] eax +
jnz loc_40330B  +
push ebx  +
push offset aUnableToOpenLi  +
call sub_408028  +
add esp 8 +
jmp loc_403709  +
xor ebx ebx +
mov [ebp+var_998] esi +
mov byte ptr [ebp+var_199C] bl +
cmp byte ptr [ebp+var_199C] 0 +
jnz loc_403365  +
mov ecx [ebp+var_19A4] +
lea edx [ebp+var_199C] +
push ecx  +
push 1000h  +
push edx  +
call sub_40BA0C  +
add esp 0Ch +
test eax eax +
mov [ebp+var_99C] eax +
jz loc_4036FA  +
inc [ebp+var_19A0]  +
push eax  +
call sub_40A110  +
mov ecx [ebp+var_99C] +
mov byte ptr [eax+ecx-1] 0 +
add esp 4 +
push 1Bh  +
push offset aLabcenterLicen  +
lea edx [ebp+var_199C] +
push edx  +
call sub_409FC8  +
add esp 0Ch +
test eax eax +
jnz loc_4033CB  +
push 3  +
push offset a1_0  +
lea ecx [ebp+var_1980] +
push ecx  +
call sub_409FC8  +
add esp 0Ch +
test eax eax +
jnz loc_4033A6  +
mov edx 0Ah +
mov [ebp+var_998] edx +
jmp loc_4033CB  +
push 3  +
push offset a1_1  +
lea ecx [ebp+var_1980] +
push ecx  +
call sub_409FC8  +
add esp 0Ch +
test eax eax +
jnz loc_4033CB  +
mov edx 0Bh +
mov [ebp+var_998] edx +
mov eax [ebp+var_998] +
test eax eax +
jnz loc_4033FB  +
mov eax [ebp+arg_8] +
mov esi 1 +
test eax eax +
jnz loc_4036FA  +
mov eax [ebp+arg_0] +
push eax  +
push offset aFileSIsNotALab  +
call sub_408028  +
add esp 8 +
jmp loc_4036FA  +
lea ecx [ebp+var_99C] +
push ecx  +
call sub_41B260  +
add esp 4 +
test eax eax +
jz loc_403419  +
mov edx [ebp+var_99C] +
cmp byte ptr [edx] 3Bh +
jnz loc_40342D  +
mov byte ptr [ebp+var_199C] 0 +
test esi esi +
jnz loc_4036FA  +
jmp loc_403319  +
push 9  +
push offset aCustomer  +
mov ecx [ebp+var_99C] +
push ecx  +
call sub_409FC8  +
add esp 0Ch +
test eax eax +
jnz loc_40361A  +
push 0  +
push 0  +
lea ecx [ebp+var_994] +
call sub_408164  +
lea edx [ebp+var_199C] +
lea ecx [ebp+var_994] +
push edx  +
lea edx [ebp+var_19A0] +
push ecx  +
push edx  +
mov edx [ebp+arg_0] +
push edx  +
mov eax [ebp+var_19A4] +
mov edi [ebp+var_19A0] +
push eax  +
call sub_403734  +
add esp 14h +
mov esi eax +
test eax eax +
jnz loc_40360A  +
lea ecx [ebp+var_4AC] +
push ecx  +
lea ecx [ebp+var_994] +
call sub_408304  +
test eax eax +
jnz loc_4034CB  +
mov edx [ebp+var_4AC] +
mov ecx [ebp+arg_0] +
push edx  +
push ecx  +
push edi  +
mov esi 1 +
push offset aCustomerRecord  +
call sub_408028  +
add esp 10h +
jmp loc_40360A  +
mov eax [ebp+var_998] +
cmp eax 0Ah +
jnz loc_4034FD  +
cmp [ebp+var_8D0] 0 +
jz loc_4034FD  +
mov edx [ebp+arg_0] +
mov esi 1 +
push edx  +
push edi  +
push offset aCustomerReco_0  +
call sub_408028  +
add esp 0Ch +
jmp loc_40360A  +
cmp [ebp+var_8D0] 1 +
sbb edx edx +
lea ecx [ebp+var_970] +
neg edx  +
push edx  +
push ecx  +
mov edx [ebp+var_990] +
mov ecx [ebp+arg_4] +
push edx  +
push ecx  +
call sub_4061AC  +
add esp 10h +
mov ebx eax +
test eax eax +
jnz loc_403589  +
lea ecx [ebp+var_994] +
call sub_408280  +
push eax  +
push 0  +
mov edx [ebp+var_990] +
push edx  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aAddingCustomer  +
call sub_40810C  +
push 4E8h  +
call sub_40B300  +
add esp 4 +
mov edi eax +
test eax eax +
jz loc_403574  +
lea ecx [ebp+var_994] +
push ecx  +
mov ecx edi +
call sub_4081E0  +
mov edi eax +
push 0FFFFFFFFh  +
mov ebx edi +
push edi  +
mov ecx [ebp+arg_4] +
call sub_4093B8  +
add esp 0Ch +
jmp loc_40360A  +
mov edx [ebx+20h] +
mov eax [ebx+1Ch] +
cmp edx [ebp+var_974] +
jg loc_4035DC  +
jl loc_4035A1  +
cmp eax [ebp+var_978] +
jnb loc_4035DC  +
lea ecx [ebp+var_994] +
call sub_408280  +
push eax  +
push 0  +
mov edx [ebp+var_990] +
push edx  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aUpdatingExisti  +
call sub_40810C  +
lea ecx [ebp+var_994] +
push ecx  +
mov ecx ebx +
call sub_40836C  +
add esp 0Ch +
jmp loc_40360A  +
mov ecx [ebx] +
push ecx  +
lea ecx [ebp+var_994] +
call sub_408280  +
push eax  +
push 0  +
mov edx [ebp+var_990] +
push edx  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aDiscardingCust  +
call sub_40810C  +
add esp 10h +
lea ecx [ebp+var_994] +
call sub_40821C  +
jmp loc_403420  +
push 8  +
push offset aProduct  +
mov edx [ebp+var_99C] +
push edx  +
call sub_409FC8  +
add esp 0Ch +
test eax eax +
jnz loc_4036D3  +
push 0  +
push 0  +
lea ecx [ebp+var_4A8] +
call sub_408628  +
lea edx [ebp+var_199C] +
lea ecx [ebp+var_4A8] +
push edx  +
lea edx [ebp+var_8] +
push ecx  +
lea ecx [ebp+var_19A0] +
push edx  +
mov edx [ebp+arg_0] +
push ecx  +
push edx  +
mov ecx [ebp+var_19A4] +
push ecx  +
call sub_403B68  +
add esp 18h +
mov esi eax +
test eax eax +
jnz loc_4036C3  +
test ebx ebx +
jnz loc_40368C  +
push offset aDiscardingProd  +
call sub_40810C  +
add esp 4 +
jmp loc_4036C3  +
lea edx [ebx+4D4h] +
push 4A0h  +
mov [ebp+var_4] edx +
call sub_40B300  +
add esp 4 +
mov edi eax +
test eax eax +
jz loc_4036B8  +
lea ecx [ebp+var_4A8] +
push ecx  +
mov ecx edi +
call sub_408664  +
mov edi eax +
push 0FFFFFFFFh  +
push edi  +
mov ecx [ebp+var_4] +
call sub_4093B8  +
lea ecx [ebp+var_4A8] +
call sub_4086D0  +
jmp loc_403420  +
lea edx [ebp+var_1BAC] +
push edx  +
mov ecx [ebp+var_19A0] +
push ecx  +
push offset aIgnoringLineUI  +
mov byte ptr [ebp+var_199C] 0 +
call sub_40810C  +
add esp 0Ch +
jmp loc_403420  +
mov eax [ebp+var_19A4] +
push eax  +
call sub_40B1AC  +
add esp 4 +
mov ebx [ebp+var_19A0] +
lea edi [ebp+var_1BAC] +
push ebx  +
push edi  +
push offset aFinishedReadin  +
call sub_40810C  +
add esp 0Ch +
cmp esi 1 +
sbb eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
neg eax  +
pop ebp  +
retn   +
***
sub esp 18h +
sub esp 1Ch +
mov ecx [ebp+arg_10] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx [ebp+arg_8] +
xor esi esi +
push edi  +
call sub_40876C  +
mov edx [ebp+arg_14] +
push ebx  +
mov [ebp+var_18] edx +
push offset aReadingProduct  +
call sub_40810C  +
add esp 8 +
lea ecx [ebp+var_18] +
push offset aProduct  +
push ecx  +
call sub_41A6BC  +
add esp 8 +
test eax eax +
jnz loc_403BB2  +
mov esi 1 +
jmp loc_403BDC  +
mov edx [ebp+arg_C] +
lea ecx [ebp+var_18] +
push edx  +
push ecx  +
call sub_407D4C  +
add esp 8 +
test eax eax +
jnz loc_403BDC  +
mov edx [ebx] +
push edi  +
push edx  +
mov esi 1 +
push offset aUnableToParseC  +
call sub_408028  +
add esp 0Ch +
test esi esi +
jnz loc_403E19  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_14] +
push ecx  +
push 1000h  +
push edx  +
call sub_40BA0C  +
add esp 0Ch +
test eax eax +
mov [ebp+var_18] eax +
jz loc_403E19  +
inc dword ptr [ebx]  +
mov ecx [ebp+var_18] +
push ecx  +
call sub_40A110  +
mov edx [ebp+var_18] +
xor ecx ecx +
mov byte ptr [eax+edx-1] 0 +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
add esp 4 +
lea edx [ebp+var_18] +
push offset aLabcenterLicen  +
push edx  +
call sub_41A6BC  +
add esp 8 +
test eax eax +
jnz loc_403E19  +
push offset aCustomer  +
lea ecx [ebp+var_18] +
push ecx  +
call sub_41A6BC  +
add esp 8 +
test eax eax +
jnz loc_403E19  +
push offset aProduct  +
lea edx [ebp+var_18] +
push edx  +
call sub_41A6BC  +
add esp 8 +
test eax eax +
jnz loc_403E19  +
lea ecx [ebp+var_18] +
push ecx  +
call sub_41B260  +
add esp 4 +
test eax eax +
jz loc_403CC0  +
mov edx [ebp+var_18] +
cmp byte ptr [edx] 3Bh +
jz loc_403CC0  +
push offset aTstamp  +
lea ecx [ebp+var_18] +
push ecx  +
call sub_41A6BC  +
add esp 8 +
test eax eax +
jz loc_403CED  +
lea edx [ebp+var_10] +
lea ecx [ebp+var_18] +
push edx  +
push ecx  +
call sub_407C98  +
add esp 8 +
test eax eax +
jz loc_403CED  +
mov ecx [ebp+arg_10] +
mov edx [ebp+var_C] +
mov eax [ebp+var_10] +
mov [ecx+0Ch] edx +
mov [ecx+8] eax +
test esi esi +
jnz loc_403E19  +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_14] +
push edx  +
push 1000h  +
push ecx  +
call sub_40BA0C  +
add esp 0Ch +
test eax eax +
mov [ebp+var_18] eax +
jnz loc_403C04  +
jmp loc_403E19  +
push offset aCode  +
lea edx [ebp+var_18] +
push edx  +
call sub_41A6BC  +
add esp 8 +
test eax eax +
jz loc_403D21  +
lea ecx [ebp+var_8] +
lea edx [ebp+var_18] +
push ecx  +
push edx  +
call sub_41AA8C  +
add esp 8 +
test eax eax +
jz loc_403D21  +
mov ecx [ebp+arg_10] +
mov edx [ebp+var_8] +
mov [ecx+4] edx +
jmp loc_403CC0  +
push offset aDesc  +
lea ecx [ebp+var_18] +
push ecx  +
call sub_41A6BC  +
add esp 8 +
test eax eax +
jz loc_403D62  +
lea ecx [ebp+var_18] +
push ecx  +
call sub_41B260  +
push 7Fh  +
mov edx [ebp+var_18] +
mov ecx [ebp+arg_10] +
push edx  +
add ecx 20h +
push ecx  +
call sub_41B2F0  +
add esp 0Ch +
push eax  +
call sub_41B37C  +
add esp 8 +
jmp loc_403CC0  +
push offset aKey  +
lea edx [ebp+var_18] +
push edx  +
call sub_41A6BC  +
add esp 8 +
test eax eax +
jz loc_403DBD  +
lea edx [ebp+var_18] +
push edx  +
call sub_41B260  +
mov ecx 3FFh +
mov edx [ebp+arg_10] +
add edx 0A0h +
push ecx  +
push edx  +
mov [ebp+var_1C] edx +
call sub_40A110  +
add esp 4 +
pop ecx  +
sub ecx eax +
push ecx  +
mov ecx [ebp+var_18] +
push ecx  +
mov edx [ebp+var_1C] +
push edx  +
call sub_41B330  +
add esp 0Ch +
push eax  +
call sub_41B37C  +
add esp 8 +
jmp loc_403CC0  +
push offset aOrder  +
lea ecx [ebp+var_18] +
push ecx  +
call sub_41A6BC  +
add esp 8 +
test eax eax +
jz loc_403DFE  +
lea ecx [ebp+var_18] +
push ecx  +
call sub_41B260  +
push 0Fh  +
mov edx [ebp+var_18] +
mov ecx [ebp+arg_10] +
push edx  +
add ecx 10h +
push ecx  +
call sub_41B2F0  +
add esp 0Ch +
push eax  +
call sub_41B37C  +
add esp 8 +
jmp loc_403CC0  +
mov edx [ebx] +
push edi  +
push edx  +
mov esi 1 +
push offset aUnknownTextOrP  +
call sub_408028  +
add esp 0Ch +
jmp loc_403CC0  +
mov edx [ebx] +
push esi  +
push edx  +
push offset aFinishedRead_1  +
call sub_40810C  +
add esp 0Ch +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 274h +
push ebx  +
sub esp 0A70h +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push ecx  +
mov [ebp+var_A64] offset off_421B54 +
push 80000002h  +
lea ecx [ebp+var_A64] +
call sub_419BFC  +
mov edx [ebp+arg_0] +
lea ecx [ebp+var_5DC] +
push edx  +
push offset aHklmS  +
xor esi esi +
push ecx  +
call sub_40A2B4  +
lea edx [ebp+var_5DC] +
mov ecx 1 +
push edx  +
cmp [ebp+arg_0] offset aSoftwareLabcen +
jz loc_4043EC  +
mov ecx esi +
mov [ebp+var_50C] ecx +
jnz loc_4043FB  +
mov edx offset aOld +
jmp loc_404400  +
mov edx offset aNew +
push edx  +
push offset aReadingSKeysFr  +
call sub_40810C  +
add esp 18h +
lea ecx [ebp+var_A64] +
push 1  +
push offset unk_41F4A0  +
mov edx [ebp+var_A64] +
call dword ptr [edx+4]  +
mov ebx eax +
test eax eax +
jz loc_40445B  +
mov ecx esi +
push ebx  +
inc esi  +
lea edx ds:0[ecx*8] +
lea ecx [ebp+edx*4+var_9DC] +
push ecx  +
call sub_40A0AC  +
add esp 8 +
lea ecx [ebp+var_A64] +
call sub_419F8C  +
mov ebx eax +
test eax eax +
jz loc_40445B  +
cmp esi 20h +
jb loc_40442A  +
push esi  +
push offset aFoundDProductF  +
call sub_40810C  +
xor eax eax +
mov [ebp+var_510] eax +
add esp 8 +
test esi esi +
jle loc_404BE0  +
lea ebx [ebp+var_9DC] +
mov [ebp+var_A68] ebx +
xor edx edx +
lea edi [ebp+var_508] +
push edx  +
push edx  +
push 4  +
push edi  +
push 4  +
push offset aId  +
mov ecx [ebp+var_A68] +
push ecx  +
mov ebx [ebp+var_A64] +
mov [ebp+var_508] edx +
lea ecx [ebp+var_A64] +
call dword ptr [ebx+1Ch]  +
cmp eax 4 +
jz loc_4044D2  +
mov eax [ebp+var_A68] +
mov edx [ebp+arg_8] +
push eax  +
push offset aCannotGetCusto  +
mov edi [edx] +
push edx  +
call dword ptr [edi+24h]  +
add esp 0Ch +
mov [ebp+var_514] esi +
mov ecx [ebp+arg_4] +
xor esi esi +
xor ebx ebx +
cmp [ecx+0Ch] ebx +
jle loc_40454D  +
mov edx [ebp+arg_4] +
mov ecx [edx+10h] +
mov edx [ecx+ebx*4] +
mov edx [edx+4] +
cmp edx [ebp+var_508] +
jnz loc_404540  +
mov edx [ecx+ebx*4] +
cmp byte ptr [edx+24h] 0 +
jz loc_40451B  +
mov edx [ebp+var_A68] +
mov ecx [ecx+ebx*4] +
add ecx 24h +
push edx  +
push ecx  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jnz loc_404540  +
mov edx [ebp+arg_4] +
mov ecx [edx+10h] +
mov edi [ecx+ebx*4] +
mov dl [edi+0C4h] +
neg dl  +
sbb edx edx +
inc edx  +
cmp edx [ebp+var_50C] +
jnz loc_404540  +
mov ecx [ebp+arg_4] +
mov edx [ecx+10h] +
mov esi [edx+ebx*4] +
inc ebx  +
test esi esi +
jnz loc_40454D  +
mov ecx [ebp+arg_4] +
cmp [ecx+0Ch] ebx +
jg loc_4044E4  +
test esi esi +
jz loc_40456F  +
push 0  +
mov eax [esi+4] +
push eax  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aCustomerSAlrea  +
call sub_40810C  +
add esp 8 +
jmp loc_4045B7  +
push 4E8h  +
call sub_40B300  +
add esp 4 +
mov ebx eax +
test eax eax +
jz loc_404599  +
lea edx [ebp+var_5DC] +
push edx  +
mov ecx [ebp+var_508] +
push ecx  +
mov ecx ebx +
call sub_408164  +
mov ebx eax +
push 0  +
mov edx [ebx+4] +
mov esi ebx +
push edx  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aNewCustomerSCr  +
call sub_40810C  +
add esp 8 +
push 0FFFFFFFFh  +
push esi  +
mov ecx [ebp+arg_4] +
call sub_4093B8  +
mov ebx [ebp+var_A68] +
lea edi [esi+24h] +
push ebx  +
push edi  +
call sub_40A0AC  +
push 0  +
mov edx offset unk_41F4A0 +
push edx  +
push 40h  +
lea eax [esi+44h] +
lea ecx [ebp+var_A64] +
push eax  +
push 1  +
push offset aName_0  +
push ebx  +
mov edi [ebp+var_A64] +
call dword ptr [edi+1Ch]  +
push 0  +
mov edx offset unk_41F4A0 +
push edx  +
push 40h  +
lea eax [esi+84h] +
lea ecx [ebp+var_A64] +
push eax  +
push 1  +
push offset aCompany_0  +
push ebx  +
mov edi [ebp+var_A64] +
call dword ptr [edi+1Ch]  +
add esp 8 +
cmp byte ptr [esi+44h] 0 +
jnz loc_404643  +
cmp byte ptr [esi+84h] 0 +
jnz loc_404643  +
push ebx  +
push offset aBothTheCustome  +
mov ebx [ebp+arg_8] +
push ebx  +
mov edx [ebx] +
call dword ptr [edx+24h]  +
add esp 0Ch +
lea eax [ebp+var_500] +
push 0  +
push 0  +
push 14h  +
push eax  +
push 1  +
push offset aTimeStamp  +
mov ecx [ebp+var_A68] +
push ecx  +
mov ebx [ebp+var_A64] +
mov [ebp+var_4EC] eax +
lea ecx [ebp+var_A64] +
call dword ptr [ebx+1Ch]  +
test eax eax +
jle loc_404696  +
lea edx [esi+1Ch] +
lea eax [ebp+var_4EC] +
push edx  +
push eax  +
call sub_407C98  +
add esp 8 +
test eax eax +
jz loc_404696  +
mov edi [esi+20h] +
or edi [esi+1Ch] +
jnz loc_4046AE  +
mov ecx [ebp+var_A68] +
mov ebx [ebp+arg_8] +
push ecx  +
push offset aTimeStampOfCus  +
mov edx [ebx] +
push ebx  +
call dword ptr [edx+24h]  +
add esp 0Ch +
push 0  +
push 0  +
push 4  +
lea eax [esi+8] +
push eax  +
push 4  +
push offset aUsers_0  +
mov edi [ebp+var_A68] +
push edi  +
mov ebx [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [ebx+1Ch]  +
cmp eax 4 +
jz loc_4046EC  +
push edi  +
push offset aLicencedUserCo  +
mov edx [ebp+arg_8] +
push edx  +
mov eax [edx] +
call dword ptr [eax+24h]  +
add esp 0Ch +
push 0  +
push offset unk_41F4A0  +
push 10h  +
lea edi [esi+0C4h] +
push edi  +
push 1  +
push offset aExpiry_0  +
mov ecx [ebp+var_A68] +
push ecx  +
mov edx [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [edx+1Ch]  +
cmp [ebp+var_50C] 0 +
jz loc_404745  +
cmp byte ptr [esi+0C4h] 0 +
jz loc_404745  +
lea edi [esi+0C4h] +
mov ecx [ebp+arg_8] +
push edi  +
push offset aExpiryDateSFou  +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+24h]  +
add esp 0Ch +
jmp loc_404769  +
mov eax [ebp+var_50C] +
test eax eax +
jnz loc_404769  +
cmp byte ptr [esi+0C4h] 0 +
jnz loc_404769  +
push offset aExpiryDateNotF  +
mov eax [ebp+arg_8] +
push eax  +
mov ebx [eax] +
call dword ptr [ebx+24h]  +
add esp 8 +
push 0  +
push 0  +
push 4  +
lea ecx [esi+0Ch] +
push ecx  +
push 4  +
push offset aHardwarekey_0  +
mov edx [ebp+var_A68] +
push edx  +
mov eax [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [eax+1Ch]  +
push 0  +
push 0  +
push 4  +
lea edx [esi+10h] +
push edx  +
push 4  +
push offset aActivation_0  +
mov ecx [ebp+var_A68] +
push ecx  +
mov edx [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [edx+1Ch]  +
push 0  +
push 0  +
push 4  +
lea ecx [esi+14h] +
push ecx  +
push 4  +
push offset aActivationda_1  +
mov edx [ebp+var_A68] +
push edx  +
mov eax [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [eax+1Ch]  +
push 0  +
push 0  +
push 4  +
lea edx [esi+18h] +
push edx  +
push 4  +
push offset aEvaluationke_0  +
mov ecx [ebp+var_A68] +
push ecx  +
mov edx [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [edx+1Ch]  +
push 400h  +
push 0  +
push 400h  +
lea ecx [ebp+var_4E8] +
push ecx  +
push 3  +
push offset aKey_1  +
mov edx [ebp+var_A68] +
push edx  +
mov eax [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [eax+1Ch]  +
mov ebx eax +
test eax eax +
jg loc_404855  +
mov edx [ebp+var_A68] +
mov ecx [ebp+arg_8] +
push edx  +
push offset aSignatureNotFo  +
mov ebx [ecx] +
push ecx  +
call dword ptr [ebx+24h]  +
add esp 0Ch +
jmp loc_40488D  +
push 3FFh  +
lea edx [esi+0D4h] +
lea ecx [ebp+var_4E8] +
push edx  +
push ebx  +
push ecx  +
call sub_407A44  +
add esp 10h +
test eax eax +
jnz loc_40488D  +
mov ebx [ebp+var_A68] +
mov edi [ebp+arg_8] +
push ebx  +
push offset aProblemsOccure  +
mov eax [edi] +
push edi  +
call dword ptr [eax+24h]  +
add esp 0Ch +
mov [ebp+var_504] esi +
push 1  +
mov esi [ebp+var_A68] +
lea ecx [ebp+var_A64] +
push esi  +
mov eax [ebp+var_A64] +
call dword ptr [eax+4]  +
push esi  +
mov ebx eax +
push offset aEnumeratingPro  +
call sub_40810C  +
add esp 8 +
test ebx ebx +
jz loc_404B92  +
mov esi [ebp+var_504] +
add esi 4D4h +
push ebx  +
mov [ebp+var_E4] ebx +
mov [ebp+var_E8] 0 +
push offset aHaveProductCod  +
call sub_40810C  +
add esp 8 +
lea edx [ebp+var_E8] +
lea ecx [ebp+var_E4] +
push edx  +
push ecx  +
call sub_41AA8C  +
add esp 8 +
test eax eax +
jz loc_40491A  +
lea edx [ebp+var_E4] +
push edx  +
call sub_41B260  +
add esp 4 +
test eax eax +
jz loc_404933  +
mov ecx [ebp+var_A68] +
mov edx [ebp+arg_8] +
push ecx  +
push ebx  +
push offset aUnexpectedProd  +
mov ecx [edx] +
push edx  +
call dword ptr [ecx+24h]  +
add esp 10h +
push 4A0h  +
call sub_40B300  +
add esp 4 +
mov edi eax +
test eax eax +
jz loc_40495D  +
lea edx [ebp+var_5DC] +
push edx  +
mov ecx [ebp+var_E8] +
push ecx  +
mov ecx edi +
call sub_408628  +
mov edi eax +
push ebx  +
mov edx [ebp+var_A68] +
push edx  +
push offset aSS  +
lea ecx [ebp+var_E0] +
push ecx  +
call sub_40A2B4  +
add esp 10h +
lea edx [edi+20h] +
lea ecx [ebp+var_E0] +
push 0  +
push 0  +
push 80h  +
push edx  +
push 1  +
push offset aDescription  +
push ecx  +
mov eax [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [eax+1Ch]  +
cmp eax 0FFFFFFFFh +
jnz loc_4049D7  +
mov edx [ebp+var_E8] +
push edx  +
mov ecx [ebp+var_A68] +
push ecx  +
push offset aNoDescriptionF  +
mov edx [ebp+arg_8] +
push edx  +
mov ecx [edx] +
call dword ptr [ecx+24h]  +
lea edx [edi+20h] +
push edx  +
mov ecx [ebp+var_E8] +
push ecx  +
call sub_407C40  +
add esp 18h +
lea edx [ebp+var_18] +
push 0  +
push 0  +
push 10h  +
push edx  +
push 1  +
push offset aTimeStamp  +
lea ecx [ebp+var_E0] +
push ecx  +
mov [ebp+var_8] edx +
mov edx [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [edx+1Ch]  +
test eax eax +
jle loc_404A21  +
lea ecx [edi+8] +
lea edx [ebp+var_8] +
push ecx  +
push edx  +
call sub_407C98  +
add esp 8 +
test eax eax +
jz loc_404A21  +
mov ecx [edi+0Ch] +
or ecx [edi+8] +
jnz loc_404A3D  +
mov edx [edi+4] +
push edx  +
mov ecx [ebp+var_A68] +
push ecx  +
push offset aTimeStampForFo  +
mov edx [ebp+arg_8] +
push edx  +
mov ecx [edx] +
call dword ptr [ecx+24h]  +
add esp 10h +
push 0  +
push 0  +
push 10h  +
lea edx [edi+10h] +
push edx  +
push 1  +
push offset aOrder_0  +
lea ecx [ebp+var_E0] +
push ecx  +
mov edx [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [edx+1Ch]  +
push 400h  +
push 0  +
push 400h  +
lea ecx [ebp+var_4E8] +
push ecx  +
push 3  +
push offset aKey_1  +
lea edx [ebp+var_E0] +
push edx  +
mov edx [ebp+var_A64] +
lea ecx [ebp+var_A64] +
call dword ptr [edx+1Ch]  +
mov ebx eax +
test eax eax +
jg loc_404AC3  +
mov ecx [ebp+var_504] +
call sub_408280  +
push eax  +
push 0  +
mov ecx edi +
call sub_4086F4  +
push eax  +
push offset aCannotRecoverP  +
mov edx [ebp+arg_8] +
push edx  +
mov ecx [edx] +
call dword ptr [ecx+24h]  +
add esp 10h +
jmp loc_404B0A  +
push 3FFh  +
lea ecx [edi+0A0h] +
lea edx [ebp+var_4E8] +
push ecx  +
push ebx  +
push edx  +
call sub_407A44  +
add esp 10h +
test eax eax +
jnz loc_404B0A  +
mov ecx [ebp+var_504] +
call sub_408280  +
push eax  +
push 0  +
mov ecx edi +
call sub_4086F4  +
push eax  +
push offset aProblemsOccu_0  +
mov edx [ebp+arg_8] +
push edx  +
mov ecx [edx] +
call dword ptr [ecx+24h]  +
add esp 10h +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jle loc_404B73  +
mov edx [esi+10h] +
mov ecx [edx+ebx*4] +
mov edx [ecx+4] +
cmp edx [ebp+var_E8] +
jnz loc_404B6D  +
push ebx  +
mov ecx esi +
call sub_409430  +
test eax eax +
mov [ebp+var_4] eax +
jz loc_404B44  +
mov ecx eax +
call sub_4086D0  +
mov edx [ebp+var_4] +
push edx  +
call sub_40971C  +
add esp 4 +
mov ecx [ebp+var_504] +
call sub_408280  +
push eax  +
push 0  +
mov ecx edi +
call sub_4086F4  +
push eax  +
push offset aDuplicateProdu  +
mov edx [ebp+arg_8] +
push edx  +
mov ecx [edx] +
call dword ptr [ecx+24h]  +
add esp 10h +
jmp loc_404B73  +
inc ebx  +
cmp [esi+0Ch] ebx +
jg loc_404B11  +
push 0FFFFFFFFh  +
push edi  +
mov ecx esi +
call sub_4093B8  +
lea ecx [ebp+var_A64] +
call sub_419F8C  +
mov ebx eax +
test eax eax +
jnz loc_4048CF  +
mov eax [ebp+var_504] +
mov ecx [eax+4E0h] +
test ecx ecx +
jnz loc_404BC1  +
mov esi [ebp+var_504] +
mov ecx eax +
call sub_408280  +
push eax  +
push offset aNoProductsFoun  +
mov edx [ebp+arg_8] +
push edx  +
mov ebx [edx] +
call dword ptr [ebx+24h]  +
add esp 0Ch +
mov esi [ebp+var_514] +
inc [ebp+var_510]  +
add [ebp+var_A68] 20h +
cmp [ebp+var_510] esi +
jl loc_404485  +
mov esi [ebp+arg_0] +
push esi  +
push offset aEndEnumerating  +
call sub_40810C  +
lea ecx [ebp+var_A64] +
call sub_419BBC  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebp esp +
push ebx  +
mov ebx ecx +
jz loc_404C23  +
mov dword ptr [ebx] offset off_421B30 +
test [ebp+arg_0] 1 +
jz loc_404C23  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov ebp esp +
push ebx  +
mov ebx ecx +
jz loc_404C4A  +
call sub_419BBC  +
test [ebp+arg_0] 1 +
jz loc_404C4A  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
sub esp 434h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_4] +
xor edi edi +
xor esi esi +
test ebx ebx +
jz loc_404C91  +
mov ecx ds:off_41E4EC +
lea edx [ebx+24h] +
push ecx  +
push edx  +
call sub_40A05C  +
add esp 8 +
test eax eax +
jnz loc_404C91  +
cmp byte ptr [ebx+0C4h] 0 +
jnz loc_404C8F  +
mov edi ebx +
jmp loc_404C91  +
mov esi ebx +
mov [ebp+arg_4] ebx +
mov ecx [ebp+arg_0] +
xor ebx ebx +
cmp [ecx+0Ch] ebx +
jle loc_404CF3  +
mov edx ds:off_41E4EC +
mov ecx [ebp+arg_0] +
push edx  +
mov edx [ecx+10h] +
mov ecx [edx+ebx*4] +
add ecx 24h +
push ecx  +
call sub_40A05C  +
add esp 8 +
test eax eax +
jnz loc_404CEA  +
mov edx [ebp+arg_0] +
mov ecx [edx+10h] +
mov edx [ecx+ebx*4] +
mov cl [edx+0C4h] +
test cl cl +
jnz loc_404CE0  +
test edi edi +
jnz loc_404CE0  +
mov edx [ebp+arg_0] +
mov ecx [edx+10h] +
mov edi [ecx+ebx*4] +
jmp loc_404CEA  +
test cl cl +
jz loc_404CEA  +
test esi esi +
jnz loc_404CEA  +
mov esi edx +
mov edx [ebp+arg_0] +
inc ebx  +
cmp [edx+0Ch] ebx +
jg loc_404C9E  +
mov [ebp+var_42C] esi +
mov eax [ebp+var_42C] +
mov [ebp+var_430] edi +
mov ebx [ebp+arg_4] +
test eax eax +
jz loc_404D6D  +
mov [ebp+arg_4] ebx +
mov ecx [ebp+var_42C] +
xor edi edi +
xor ebx ebx +
cmp [ecx+4E0h] ebx +
jle loc_404D4C  +
lea esi [ecx+4D4h] +
mov edx [esi+10h] +
push offset aV5V6Upgrade  +
mov ecx [edx+ebx*4] +
add ecx 20h +
push ecx  +
call sub_40BC1C  +
neg eax  +
sbb eax eax +
inc ebx  +
neg eax  +
or edi eax +
add esp 8 +
cmp [esi+0Ch] ebx +
jg loc_404D27  +
mov ebx [ebp+arg_4] +
test edi edi +
jnz loc_404D6D  +
mov esi [ebp+var_42C] +
mov edi [ebp+var_430] +
xor esi esi +
mov [ebp+var_430] edi +
mov [ebp+var_42C] esi +
cmp [ebp+var_430] ebx +
jz loc_404D99  +
cmp [ebp+var_42C] ebx +
jz loc_404D99  +
mov esi [ebp+var_42C] +
mov edi [ebp+var_430] +
xor esi esi +
mov edi esi +
mov [ebp+var_430] esi +
mov [ebp+var_42C] esi +
mov eax [ebp+var_42C] +
test eax eax +
jz loc_404DBF  +
mov ecx [ebp+var_430] +
test ecx ecx +
jnz loc_404DBF  +
push offset aYouAreInstalli  +
call sub_408028  +
add esp 4 +
jmp loc_404F79  +
mov esi [ebp+var_42C] +
mov edi [ebp+var_430] +
test esi esi +
jz loc_404F79  +
test edi edi +
jz loc_404F79  +
mov edx [edi+4] +
mov ecx [esi+4] +
cmp edx ecx +
jz loc_404E52  +
cmp ebx edi +
jnz loc_404E20  +
lea ecx [ebp+var_418] +
mov edx [esi+4] +
push ecx  +
push edx  +
call sub_407E20  +
add esp 8 +
lea ecx [ebp+var_428] +
mov edx [edi+4] +
push eax  +
push ecx  +
push edx  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aYouAreInstal_0  +
call sub_408028  +
add esp 0Ch +
jmp loc_404E52  +
lea edx [ebp+var_418] +
push edx  +
push ecx  +
call sub_407E20  +
add esp 8 +
lea ecx [ebp+var_428] +
mov edx [edi+4] +
push eax  +
push ecx  +
push edx  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aYouAreInstal_1  +
call sub_408028  +
add esp 0Ch +
lea ecx [ebp+var_408] +
mov [ebp+var_430] edi +
xor edi edi +
mov [ebp+arg_4] ebx +
mov [ebp+var_8] ecx +
cmp [esi+4E0h] edi +
jle loc_404F33  +
lea edx [esi+4D4h] +
mov ebx [ebp+var_430] +
mov [ebp+var_4] edx +
add ebx 4D4h +
mov ecx [ebp+var_4] +
xor esi esi +
mov edx [ecx+10h] +
mov ecx [edx+edi*4] +
mov eax [ecx+4] +
cmp eax 40000100h +
jz loc_404EB3  +
cmp eax 40000200h +
jz loc_404EBA  +
cmp eax 40000201h +
jz loc_404EC1  +
cmp eax 40000300h +
jz loc_404EC8  +
jmp loc_404ECD  +
mov esi 100h +
jmp loc_404ECD  +
mov esi 200h +
jmp loc_404ECD  +
mov esi 201h +
jmp loc_404ECD  +
mov esi 300h +
test esi esi +
jz loc_404F26  +
mov eax [ebp+var_430] +
xor ecx ecx +
xor edx edx +
cmp [eax+4E0h] ecx +
jle loc_404EFF  +
mov eax [ebx+10h] +
mov ecx 1 +
mov eax [eax+edx*4] +
cmp [eax+4] esi +
jz loc_404EF5  +
xor ecx ecx +
inc edx  +
test ecx ecx +
jnz loc_404EFF  +
cmp [ebx+0Ch] edx +
jg loc_404EE3  +
test ecx ecx +
jnz loc_404F26  +
mov ecx [ebp+var_4] +
mov edx [ecx+10h] +
mov ecx [edx+edi*4] +
add ecx 20h +
push ecx  +
mov esi [ebp+var_8] +
push offset aS_0  +
push esi  +
call sub_40A2B4  +
add esi eax +
add esp 0Ch +
mov [ebp+var_8] esi +
mov edx [ebp+var_4] +
inc edi  +
cmp [edx+0Ch] edi +
jg loc_404E87  +
mov esi [ebp+var_8] +
mov edi [ebp+var_430] +
mov byte ptr [esi] 0 +
cmp byte ptr [ebp+var_408] 0 +
jz loc_404F79  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
jnz loc_404F65  +
lea ebx [ebp+var_408] +
push ebx  +
push offset aYouAreInstal_2  +
call sub_408028  +
add esp 8 +
jmp loc_404F79  +
lea eax [ebp+var_408] +
push eax  +
push offset aYouAreInstal_3  +
call sub_408028  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
mov eax 1 +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebp esp +
sub esp 1000h +
test [esp+1000h+var_1000] esp +
dec edx  +
jnz loc_404F90  +
sub esp 580h +
push ebx  +
push esi  +
xor esi esi +
xor ebx ebx +
push edi  +
cmp ds:dword_426614 ebx +
jle loc_405000  +
mov ecx [ebp+arg_0] +
mov eax ds:dword_426618 +
mov dl [ecx+0C4h] +
mov edi [eax+ebx*4] +
neg dl  +
sbb edx edx +
mov al [edi+0C4h] +
inc edx  +
neg al  +
sbb eax eax +
inc eax  +
cmp edx eax +
jnz loc_404FF3  +
lea ecx [ecx+24h] +
lea edx [edi+24h] +
push ecx  +
push edx  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jnz loc_404FF3  +
mov ecx ds:dword_426618 +
mov esi [ecx+ebx*4] +
inc ebx  +
test esi esi +
jnz loc_405000  +
cmp ds:dword_426614 ebx +
jg loc_404FB1  +
mov edx 1 +
xor ecx ecx +
mov [ebp+var_754] ecx +
push ecx  +
lea edi [ebp+Text] +
mov [ebp+var_758] edx +
mov ecx [ebp+arg_0] +
call sub_408304  +
test eax eax +
jnz loc_405042  +
push offset aTheCustomerPro  +
call sub_408028  +
mov [ebp+var_758] 0 +
add esp 4 +
jmp loc_4055A0  +
mov edx [ebp+arg_0] +
mov eax [edx+4E0h] +
test eax eax +
jnz loc_40506B  +
push offset aTheCustomerP_0  +
call sub_408028  +
mov [ebp+var_758] 0 +
add esp 4 +
jmp loc_4055A0  +
test esi esi +
jnz loc_40519B  +
mov ecx [ebp+arg_0] +
xor esi esi +
xor ebx ebx +
cmp [ecx+4E0h] ebx +
jle loc_405112  +
lea edx [ecx+4D4h] +
mov [ebp+var_34] edx +
mov [ebp+var_5C0] esi +
xor esi esi +
mov edi 1 +
test ebx ebx +
jz loc_4050D7  +
mov ecx [ebp+arg_0] +
add ecx 4D4h +
mov [ebp+var_30] ecx +
mov edx [ebp+var_30] +
mov ecx [edx+10h] +
mov edx [ecx+esi*4] +
mov ecx [ecx+ebx*4] +
add edx 20h +
add ecx 20h +
push edx  +
push ecx  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jnz loc_4050CE  +
xor edi edi +
inc esi  +
test edi edi +
jz loc_4050D7  +
cmp esi ebx +
jl loc_4050AC  +
mov esi [ebp+var_5C0] +
cmp esi 64h +
jnb loc_405105  +
mov edx ds:dword_41E1DC +
or edx edi +
jz loc_405105  +
mov ecx [ebp+arg_0] +
mov edx [ecx+4E4h] +
mov ecx [edx+ebx*4] +
mov edx esi +
add ecx 20h +
inc esi  +
mov [ebp+edx*4+var_750] ecx +
mov ecx [ebp+var_34] +
inc ebx  +
cmp [ecx+0Ch] ebx +
jg loc_40508F  +
cmp esi 1 +
jnz loc_405147  +
mov eax [ebp+var_750] +
mov ecx [ebp+arg_0] +
push eax  +
call sub_408280  +
push eax  +
push offset aInstallCustome  +
lea ebx [ebp+Text] +
push ebx  +
call sub_40A2B4  +
lea edi [ebp+eax+Text] +
add esp 10h +
jmp loc_4055A0  +
mov ecx [ebp+arg_0] +
call sub_408280  +
push eax  +
push offset aInstallCusto_0  +
lea edx [ebp+Text] +
push edx  +
call sub_40A2B4  +
xor ebx ebx +
add esp 0Ch +
lea edi [ebp+eax+Text] +
test esi esi +
jle loc_4055A0  +
mov ecx [ebp+ebx*4+var_750] +
lea edx [ebx+1] +
push ecx  +
push edx  +
push offset aDS  +
push edi  +
call sub_40A2B4  +
add edi eax +
inc ebx  +
add esp 10h +
cmp ebx esi +
jl loc_405175  +
jmp loc_4055A0  +
mov edi [ebp+arg_0] +
mov eax [esi+4] +
mov edx [edi+4] +
cmp edx eax +
jnz loc_405547  +
mov ecx [ebp+arg_0] +
lea edx [ecx+24h] +
push edx  +
cmp byte ptr [ecx+0C4h] 0 +
jz loc_4051C3  +
mov edx offset aV6 +
jmp loc_4051C8  +
mov edx offset aV5 +
push edx  +
call sub_408280  +
push eax  +
push offset aMergeKeySInToR  +
lea ecx [ebp+Text] +
push ecx  +
call sub_40A2B4  +
mov edx 1 +
xor ecx ecx +
mov [ebp+var_5BC] edx +
mov [ebp+var_5B8] ecx +
mov [ebp+var_5B4] ecx +
add esp 14h +
lea edi [ebp+eax+Text] +
push ecx  +
mov ecx esi +
call sub_408304  +
test eax eax +
jnz loc_405233  +
mov edx [ebp+var_5BC] +
inc edx  +
mov [ebp+var_5BC] edx +
dec edx  +
push edx  +
push offset aD_TheCustomerK  +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 0Ch +
jmp loc_4052FD  +
mov ecx [ebp+arg_0] +
mov edx [ecx+20h] +
mov eax [ecx+1Ch] +
mov ecx edx +
or ecx eax +
jz loc_40524A  +
mov ecx [esi+20h] +
or ecx [esi+1Ch] +
jnz loc_40526E  +
mov ecx [ebp+var_5BC] +
inc ecx  +
mov [ebp+var_5BC] ecx +
dec ecx  +
push ecx  +
push offset aD_TheCustome_0  +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 0Ch +
jmp loc_4052FD  +
mov ecx [esi+20h] +
mov ebx [esi+1Ch] +
cmp edx ecx +
jl loc_40529F  +
jg loc_40527E  +
cmp eax ebx +
jbe loc_40529F  +
mov edx [ebp+var_5BC] +
inc edx  +
mov [ebp+var_5BC] edx +
dec edx  +
push edx  +
push offset aD_TheCustome_1  +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 0Ch +
jmp loc_4052FD  +
cmp edx ecx +
jnz loc_4052D3  +
cmp eax ebx +
jnz loc_4052D3  +
mov edx 1 +
mov ecx [ebp+var_5BC] +
inc ecx  +
mov [ebp+var_5BC] ecx +
dec ecx  +
push ecx  +
push offset aD_TheCustome_2  +
mov [ebp+var_5B8] edx +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 0Ch +
jmp loc_4052FD  +
mov edx 1 +
mov ecx [ebp+var_5BC] +
inc ecx  +
mov [ebp+var_5BC] ecx +
dec ecx  +
push ecx  +
push offset aD_TheCustome_3  +
mov [ebp+var_5B8] edx +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 0Ch +
xor edx edx +
mov ecx [ebp+arg_0] +
mov [ebp+var_5B0] edx +
cmp [ecx+4E0h] edx +
jle loc_405509  +
lea edx [ecx+4D4h] +
lea ecx [esi+4D4h] +
mov [ebp+var_2C] edx +
mov [ebp+var_557C] ecx +
mov [ebp+var_28] edx +
xor esi esi +
mov edx [ebp+var_557C] +
mov [ebp+var_5AC] esi +
cmp [edx+0Ch] esi +
jle loc_405385  +
mov edx [ebp+var_557C] +
mov ecx [ebp+var_5AC] +
mov ebx [ebp+var_28] +
mov eax [ebp+var_5B0] +
mov edx [edx+10h] +
mov ebx [ebx+10h] +
mov ecx [edx+ecx*4] +
mov eax [ebx+eax*4] +
mov edx [ecx+4] +
cmp edx [eax+4] +
jnz loc_40536A  +
mov esi ecx +
inc [ebp+var_5AC]  +
test esi esi +
jnz loc_405385  +
mov ecx [ebp+var_557C] +
mov edx [ecx+0Ch] +
cmp edx [ebp+var_5AC] +
jg loc_40533F  +
test esi esi +
jnz loc_4053C4  +
push 1  +
mov ebx [ebp+var_28] +
mov esi [ebp+var_5B0] +
mov eax [ebx+10h] +
mov ecx [eax+esi*4] +
call sub_4086F4  +
push eax  +
mov edx [ebp+var_5BC] +
inc edx  +
mov [ebp+var_5BC] edx +
dec edx  +
push edx  +
push offset aD_TheProductKe  +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 10h +
jmp loc_4054F1  +
mov ecx esi +
call sub_40874C  +
test eax eax +
jnz loc_4053FD  +
push 1  +
mov ecx esi +
call sub_4086F4  +
push eax  +
mov edx [ebp+var_5BC] +
inc edx  +
mov [ebp+var_5BC] edx +
dec edx  +
push edx  +
push offset aD_TheProduct_0  +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 10h +
jmp loc_4054F1  +
mov edx [ebp+var_28] +
mov ecx [ebp+var_5B0] +
mov edx [edx+10h] +
mov ecx [edx+ecx*4] +
mov edx [ecx+0Ch] +
mov eax [ecx+8] +
mov ecx edx +
or ecx eax +
jz loc_405420  +
mov ecx [esi+0Ch] +
or ecx [esi+8] +
jnz loc_40544E  +
push 1  +
mov ecx esi +
call sub_4086F4  +
push eax  +
mov edx [ebp+var_5BC] +
inc edx  +
mov [ebp+var_5BC] edx +
dec edx  +
push edx  +
push offset aD_TheProduct_1  +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 10h +
jmp loc_4054F1  +
mov ecx [esi+0Ch] +
mov ebx [esi+8] +
cmp edx ecx +
jl loc_405489  +
jg loc_40545E  +
cmp eax ebx +
jbe loc_405489  +
push 1  +
mov ecx esi +
call sub_4086F4  +
push eax  +
mov edx [ebp+var_5BC] +
inc edx  +
mov [ebp+var_5BC] edx +
dec edx  +
push edx  +
push offset aD_TheProduct_2  +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 10h +
jmp loc_4054F1  +
cmp edx ecx +
jnz loc_4054C2  +
cmp eax ebx +
jnz loc_4054C2  +
inc [ebp+var_5B4]  +
push 1  +
mov ecx esi +
call sub_4086F4  +
push eax  +
mov edx [ebp+var_5BC] +
inc edx  +
mov [ebp+var_5BC] edx +
dec edx  +
push edx  +
push offset aD_TheProduct_3  +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 10h +
jmp loc_4054F1  +
inc [ebp+var_5B4]  +
push 1  +
mov ecx esi +
call sub_4086F4  +
push eax  +
mov edx [ebp+var_5BC] +
inc edx  +
mov [ebp+var_5BC] edx +
dec edx  +
push edx  +
push offset aD_TheProduct_4  +
push edi  +
call sub_40A2B4  +
add edi eax +
add esp 10h +
mov eax [ebp+var_2C] +
inc [ebp+var_5B0]  +
mov ebx [eax+0Ch] +
cmp ebx [ebp+var_5B0] +
jg loc_40532C  +
mov eax [ebp+var_5B8] +
cmp eax 1 +
jnz loc_4055A0  +
mov ecx [ebp+arg_0] +
add ecx 4D4h +
mov esi [ecx+0Ch] +
cmp esi [ebp+var_5B4] +
jnz loc_4055A0  +
push offset aTheCustomerAnd  +
call sub_408028  +
mov [ebp+var_758] 0 +
add esp 4 +
jmp loc_4055A0  +
push 0  +
push eax  +
call sub_407E20  +
add esp 8 +
mov ecx esi +
push eax  +
call sub_408280  +
mov edx [ebp+arg_0] +
push eax  +
lea ecx [edx+24h] +
push ecx  +
mov ecx edx +
cmp byte ptr [edx+0C4h] 0 +
jz loc_405574  +
mov edx offset aV6 +
jmp loc_405579  +
mov edx offset aV5 +
push edx  +
push offset aReplaceExistin  +
lea ecx [ebp+Text] +
push ecx  +
call sub_40A2B4  +
mov edx 1 +
lea edi [ebp+eax+Text] +
mov [ebp+var_754] edx +
add esp 18h +
push offset aDoYouWishToCon  +
push edi  +
call sub_40A2B4  +
add esp 8 +
cmp [ebp+var_758] 0 +
jz loc_4055DB  +
push 134h  +
mov ecx ds:lpWindowName +
lea edx [ebp+Text] +
mov eax ds:hWndParent +
push ecx  +
push edx  +
push eax  +
call MessageBoxA  +
cmp eax 6 +
jz loc_4055DF  +
xor ebx ebx +
jmp loc_4055E2  +
xor ebx ebx +
inc ebx  +
mov [ebp+var_758] ebx +
jz loc_405A52  +
mov esi [ebp+arg_0] +
cmp byte ptr [esi+0C4h] 0 +
jz loc_405601  +
mov ebx offset aSoftwareLabc_0 +
jmp loc_405606  +
mov ebx offset aSoftwareLabcen +
push ebx  +
push 80000002h  +
mov [ebp+var_5A8] offset off_421B54 +
lea ecx [ebp+var_5A8] +
call sub_419BFC  +
lea edx [esi+24h] +
lea eax [ebp+var_520] +
push edx  +
push offset aS_1  +
push eax  +
call sub_40A2B4  +
add esp 0Ch +
cmp [ebp+var_754] 0 +
jz loc_405654  +
lea ebx [ebp+var_520] +
lea ecx [ebp+var_5A8] +
push ebx  +
call sub_41A114  +
push 400h  +
lea esi [ebp+var_458] +
mov edx [ebp+arg_0] +
push esi  +
add edx 0D4h +
push edx  +
call sub_407ACC  +
add esp 0Ch +
mov ebx eax +
test eax eax +
jg loc_405693  +
mov ecx [ebp+arg_0] +
call sub_408280  +
push eax  +
push offset aErrorConvertin  +
call sub_408028  +
add esp 8 +
jmp loc_405A47  +
mov esi [ebp+arg_0] +
add esi 44h +
push esi  +
call sub_40A110  +
add esp 4 +
inc eax  +
push eax  +
push esi  +
push 1  +
push offset aName_1  +
lea ecx [ebp+var_520] +
push ecx  +
mov edx [ebp+var_5A8] +
lea ecx [ebp+var_5A8] +
call dword ptr [edx+20h]  +
mov edi [ebp+arg_0] +
add edi 84h +
push edi  +
call sub_40A110  +
add esp 4 +
inc eax  +
push eax  +
push edi  +
push 1  +
push offset aCompany_1  +
lea ecx [ebp+var_520] +
push ecx  +
mov edx [ebp+var_5A8] +
lea ecx [ebp+var_5A8] +
call dword ptr [edx+20h]  +
mov ecx [ebp+arg_0] +
push 4  +
mov edx [ecx+4] +
lea ecx [ebp+var_24] +
push ecx  +
push 4  +
mov [ebp+var_24] edx +
push offset aId_0  +
lea edx [ebp+var_520] +
lea ecx [ebp+var_5A8] +
push edx  +
mov eax [ebp+var_5A8] +
call dword ptr [eax+20h]  +
mov edx [ebp+arg_0] +
push 4  +
mov ecx [edx+8] +
lea edx [ebp+var_20] +
push edx  +
push 4  +
mov [ebp+var_20] ecx +
push offset aUsers_1  +
lea ecx [ebp+var_520] +
push ecx  +
mov edx [ebp+var_5A8] +
lea ecx [ebp+var_5A8] +
call dword ptr [edx+20h]  +
mov ecx [ebp+arg_0] +
mov edx [ecx+20h] +
mov eax [ecx+1Ch] +
push edx  +
push eax  +
push offset aLld  +
lea ecx [ebp+var_54] +
push ecx  +
call sub_40A2B4  +
lea edx [ebp+var_54] +
push edx  +
call sub_40A110  +
add esp 4 +
inc eax  +
lea ecx [ebp+var_54] +
push eax  +
push ecx  +
push 1  +
push offset aTimeStamp_0  +
lea edx [ebp+var_520] +
push edx  +
mov eax [ebp+var_5A8] +
lea ecx [ebp+var_5A8] +
call dword ptr [eax+20h]  +
lea edx [ebp+var_458] +
push ebx  +
push edx  +
push 3  +
push offset aKey_2  +
lea ecx [ebp+var_520] +
push ecx  +
mov edx [ebp+var_5A8] +
lea ecx [ebp+var_5A8] +
call dword ptr [edx+20h]  +
add esp 10h +
mov ecx [ebp+arg_0] +
cmp byte ptr [ecx+0C4h] 0 +
jz loc_4058AE  +
mov ebx [ebp+arg_0] +
add ebx 0C4h +
push ebx  +
call sub_40A110  +
add esp 4 +
inc eax  +
push eax  +
push ebx  +
push 1  +
push offset aExpiry_1  +
lea eax [ebp+var_520] +
lea ecx [ebp+var_5A8] +
push eax  +
mov esi [ebp+var_5A8] +
call dword ptr [esi+20h]  +
mov edx [ebp+arg_0] +
push 4  +
lea eax [ebp+var_1C] +
lea ecx [ebp+var_520] +
mov edi [edx+0Ch] +
push eax  +
push 4  +
push offset aHardwarekey_1  +
push ecx  +
mov edx [ebp+var_5A8] +
mov [ebp+var_1C] edi +
lea ecx [ebp+var_5A8] +
call dword ptr [edx+20h]  +
mov esi [ebp+arg_0] +
push 4  +
lea edi [ebp+var_18] +
lea ecx [ebp+var_520] +
mov eax [esi+10h] +
push edi  +
push 4  +
push offset aActivation_1  +
push ecx  +
mov edx [ebp+var_5A8] +
mov [ebp+var_18] eax +
lea ecx [ebp+var_5A8] +
call dword ptr [edx+20h]  +
mov eax [ebp+arg_0] +
push 4  +
lea edi [ebp+var_14] +
lea ecx [ebp+var_520] +
mov esi [eax+14h] +
push edi  +
push 4  +
push offset aActivationda_2  +
push ecx  +
mov eax [ebp+var_5A8] +
mov [ebp+var_14] esi +
lea ecx [ebp+var_5A8] +
call dword ptr [eax+20h]  +
mov edx [ebp+arg_0] +
push 4  +
lea edi [ebp+var_10] +
lea ecx [ebp+var_520] +
mov esi [edx+18h] +
push edi  +
push 4  +
push offset aEvaluationke_1  +
push ecx  +
mov eax [ebp+var_5A8] +
mov [ebp+var_10] esi +
lea ecx [ebp+var_5A8] +
call dword ptr [eax+20h]  +
mov edx [ebp+arg_0] +
xor esi esi +
cmp [edx+4E0h] esi +
jle loc_405A47  +
lea edi [edx+4D4h] +
mov ecx [edi+10h] +
mov ebx [ecx+esi*4] +
mov ecx ebx +
call sub_40874C  +
test eax eax +
jz loc_405A3D  +
push 400h  +
lea edx [ebp+var_458] +
lea ecx [ebx+0A0h] +
push edx  +
push ecx  +
call sub_407ACC  +
add esp 0Ch +
test eax eax +
mov [ebp+var_58] eax +
jg loc_405921  +
push 0  +
mov ecx ebx +
call sub_4086F4  +
push eax  +
mov ecx [ebp+arg_0] +
call sub_408280  +
push eax  +
push offset aErrorConvert_0  +
call sub_408028  +
add esp 0Ch +
jmp loc_405A3D  +
mov edx [ebx+4] +
mov ecx [ebp+arg_0] +
push edx  +
lea edx [ecx+24h] +
push edx  +
push offset aS08x  +
lea edx [ebp+var_520] +
push edx  +
call sub_40A2B4  +
mov ecx [ebp+arg_0] +
push 4  +
mov edx [ecx+4] +
lea ecx [ebp+var_C] +
push ecx  +
push 4  +
mov [ebp+var_C] edx +
push offset aCustomerId  +
lea edx [ebp+var_520] +
lea ecx [ebp+var_5A8] +
push edx  +
mov eax [ebp+var_5A8] +
call dword ptr [eax+20h]  +
lea edx [ebx+20h] +
mov [ebp+var_8] edx +
push edx  +
call sub_40A110  +
add esp 4 +
inc eax  +
push eax  +
mov ecx [ebp+var_8] +
push ecx  +
push 1  +
push offset aDescription_0  +
lea edx [ebp+var_520] +
push edx  +
mov eax [ebp+var_5A8] +
lea ecx [ebp+var_5A8] +
call dword ptr [eax+20h]  +
lea edx [ebx+10h] +
mov [ebp+var_4] edx +
push edx  +
call sub_40A110  +
add esp 4 +
inc eax  +
push eax  +
mov ecx [ebp+var_4] +
push ecx  +
push 1  +
push offset aOrder_1  +
lea edx [ebp+var_520] +
push edx  +
mov eax [ebp+var_5A8] +
lea ecx [ebp+var_5A8] +
call dword ptr [eax+20h]  +
mov edx [ebx+0Ch] +
mov eax [ebx+8] +
push edx  +
push eax  +
push offset aLld  +
lea ecx [ebp+var_54] +
push ecx  +
call sub_40A2B4  +
lea edx [ebp+var_54] +
push edx  +
call sub_40A110  +
add esp 4 +
inc eax  +
lea ecx [ebp+var_54] +
push eax  +
push ecx  +
push 1  +
push offset aTimeStamp_0  +
lea edx [ebp+var_520] +
push edx  +
mov eax [ebp+var_5A8] +
lea ecx [ebp+var_5A8] +
call dword ptr [eax+20h]  +
mov edx [ebp+var_58] +
lea ecx [ebp+var_458] +
push edx  +
push ecx  +
push 3  +
push offset aKey_2  +
lea edx [ebp+var_520] +
lea ecx [ebp+var_5A8] +
push edx  +
mov edx [ebp+var_5A8] +
call dword ptr [edx+20h]  +
add esp 20h +
inc esi  +
cmp [edi+0Ch] esi +
jg loc_4058C5  +
lea ecx [ebp+var_5A8] +
call sub_419BBC  +
mov eax [ebp+var_758] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [eax+0Ch] edi +
jle loc_406196  +
mov [ebp+var_C] edi +
mov edx [ebp+arg_0] +
mov ecx [ebp+var_C] +
mov ebx [edx+10h] +
mov ecx [ebx+ecx*4] +
mov [ebp+var_8] ecx +
call sub_408280  +
push eax  +
mov eax [ebp+var_8] +
mov esi [eax+4] +
push esi  +
push 0  +
push esi  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aDeDuplicatingP  +
call sub_40810C  +
add esp 10h +
mov edx [ebp+var_8] +
xor edi edi +
cmp [edx+4E0h] edi +
jle loc_40615D  +
lea ebx [edx+4D4h] +
mov [ebp+var_10] ebx +
mov ecx [ebp+var_10] +
lea esi [edi+1] +
mov [ebp+var_4] 0 +
cmp esi [ecx+0Ch] +
jge loc_406149  +
mov edx [ebp+var_10] +
mov ecx [edx+10h] +
mov edx [ecx+esi*4] +
mov ecx [ecx+edi*4] +
mov edx [edx+4] +
cmp edx [ecx+4] +
jnz loc_406146  +
mov ecx [ebp+var_8] +
call sub_408280  +
push eax  +
mov edx [ebp+var_8] +
mov ecx [edx+4] +
push ecx  +
push 0  +
push ecx  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aDuplicatePro_0  +
call sub_40810C  +
mov edx [ebp+var_10] +
mov ecx [edx+10h] +
mov edx [ecx+edi*4] +
lea ecx [edx+0A0h] +
mov eax [edx+8] +
push ecx  +
lea ecx [edx+20h] +
push ecx  +
lea ecx [edx+10h] +
push ecx  +
mov ecx [edx+0Ch] +
mov edx [edx+4] +
push ecx  +
push eax  +
push edx  +
push offset a1Code08xTstamp  +
call sub_40810C  +
mov ecx [ebp+var_10] +
mov edx [ecx+10h] +
mov ecx [edx+esi*4] +
lea edx [ecx+0A0h] +
mov eax [ecx+8] +
push edx  +
lea edx [ecx+20h] +
push edx  +
lea edx [ecx+10h] +
push edx  +
mov edx [ecx+0Ch] +
mov ecx [ecx+4] +
push edx  +
push eax  +
push ecx  +
push offset a2Code08xTstamp  +
call sub_40810C  +
add esp 48h +
mov edx [ebp+var_10] +
mov ecx [edx+10h] +
mov edx [ecx+esi*4] +
mov ecx [ecx+edi*4] +
mov eax [edx+8] +
mov ebx [ecx+8] +
mov edx [edx+0Ch] +
mov ecx [ecx+0Ch] +
cmp edx ecx +
jl loc_40610C  +
jg loc_4060D6  +
cmp eax ebx +
jb loc_40610C  +
push offset aRemovedKey1_  +
call sub_40810C  +
push edi  +
mov ecx [ebp+var_10] +
call sub_409430  +
mov ebx eax +
test eax eax +
jz loc_4060FF  +
mov ecx ebx +
call sub_4086D0  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov edx 1 +
mov [ebp+var_4] edx +
add esp 4 +
jmp loc_406149  +
push offset aRemovedKey2_  +
call sub_40810C  +
push esi  +
mov ecx [ebp+var_10] +
call sub_409430  +
mov ebx eax +
test eax eax +
jz loc_406135  +
mov ecx ebx +
call sub_4086D0  +
push ebx  +
call sub_40971C  +
add esp 4 +
add esp 4 +
mov edx [ebp+var_10] +
cmp [edx+0Ch] esi +
jg loc_406017  +
jmp loc_406149  +
inc esi  +
jmp loc_406138  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_406151  +
inc edi  +
mov eax [ebp+var_10] +
cmp [eax+0Ch] edi +
jg loc_406001  +
mov edi [ebp+var_C] +
mov ecx [ebp+var_8] +
call sub_408280  +
push eax  +
mov ebx [ebp+var_8] +
mov esi [ebx+4] +
push esi  +
push 0  +
push esi  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aFinishedDeDupl  +
call sub_40810C  +
add esp 10h +
mov edx [ebp+arg_0] +
inc edi  +
cmp [edx+0Ch] edi +
jg loc_405FAF  +
push offset asc_420F40  +
call sub_40810C  +
add esp 4 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push eax  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_C] +
cmp esi 1 +
mov ecx [ebp+arg_0] +
sbb esi esi +
xor ebx ebx +
inc esi  +
mov edi [ebp+arg_4] +
mov [ebp+var_4] 0 +
cmp [ecx+0Ch] ebx +
jle loc_40622D  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+10h] +
mov eax [ecx+ebx*4] +
cmp [eax+4] edi +
jnz loc_406224  +
mov edx [ecx+ebx*4] +
mov al [edx+0C4h] +
neg al  +
sbb eax eax +
inc eax  +
cmp eax esi +
jnz loc_406224  +
mov edx [ecx+ebx*4] +
cmp byte ptr [edx+24h] 0 +
jz loc_406216  +
cmp [ebp+arg_8] 0 +
jz loc_406216  +
mov edx [ebp+arg_8] +
mov ecx [ecx+ebx*4] +
add ecx 24h +
push edx  +
push ecx  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jnz loc_406224  +
mov eax [ebp+arg_0] +
mov esi [eax+10h] +
mov edi [esi+ebx*4] +
mov [ebp+var_4] edi +
jmp loc_40622D  +
mov edx [ebp+arg_0] +
inc ebx  +
cmp [edx+0Ch] ebx +
jg loc_4061D0  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebp esp +
sub esp 1C4h +
push ebx  +
push esi  +
push edi  +
push 27h  +
push offset unk_41E244  +
lea ecx [ebp+var_1C0] +
mov esi 1DA3h +
push ecx  +
call sub_40B020  +
xor ebx ebx +
add esp 0Ch +
xor word ptr [ebp+ebx+var_1C0] si +
mov edx esi +
add edx edx +
mov ecx 0 +
test si 8000h +
jnz loc_40644A  +
inc ecx  +
or edx ecx +
inc ebx  +
mov esi edx +
cmp ebx 26h +
jb loc_406431  +
mov esi offset aDkthe +
lea edi [ebp+var_15C] +
mov ecx 8 +
movs   +
xor ebx ebx +
cmp byte ptr [ebp+var_15C] cl +
jz loc_406491  +
test bl 1 +
mov eax 1 +
jnz loc_40647F  +
mov eax 0FFFFFFFFh +
add byte ptr [ebp+ebx+var_15C] al +
inc ebx  +
cmp byte ptr [ebp+ebx+var_15C] 0 +
jnz loc_406470  +
lea ecx [ebp+var_15C] +
push ecx  +
push 80000000h  +
mov [ebp+var_13C] offset off_421B54 +
lea ecx [ebp+var_13C] +
call sub_419BFC  +
lea edx [ebp+var_1C0] +
lea ecx [ebp+var_13C] +
push edx  +
call sub_419E04  +
test eax eax +
jz loc_4064DE  +
lea eax [ebp+var_1C0] +
lea ecx [ebp+var_13C] +
push eax  +
call sub_41A484  +
test eax eax +
jnz loc_4064F2  +
lea ecx [ebp+var_13C] +
call sub_419BBC  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn   +
lea ecx [ebp+var_13C] +
call sub_419BBC  +
push 0  +
call sub_40BB40  +
mov [ebp+var_B4] eax +
mov esi offset aGhu +
mov [ebp+var_B0] 0 +
lea edi [ebp+var_AC] +
mov ecx 8 +
movs   +
xor ebx ebx +
add esp 4 +
cmp byte ptr [ebp+var_AC] cl +
jz loc_40655B  +
test bl 1 +
mov edx 1 +
jnz loc_406542  +
mov edx 0FFFFFFFFh +
add dl byte ptr [ebp+ebx+var_AC] +
mov byte ptr [ebp+ebx+var_15C] dl +
inc ebx  +
cmp byte ptr [ebp+ebx+var_AC] 0 +
jnz loc_406533  +
lea eax [ebp+var_15C] +
lea ecx [ebp+var_8C] +
push eax  +
push 80000000h  +
mov [ebp+var_8C] offset off_421B54 +
call sub_419BFC  +
push 0  +
push 0  +
push 4  +
lea ebx [ebp+var_B0] +
push ebx  +
push 4  +
lea esi [ebp+var_AC] +
lea edx [ebp+var_15C] +
push esi  +
push edx  +
mov eax [ebp+var_8C] +
lea ecx [ebp+var_8C] +
call dword ptr [eax+1Ch]  +
cmp eax 4 +
jz loc_4065F6  +
cmp [ebp+var_B0] 0 +
jz loc_4065F6  +
mov ebx [ebp+var_B4] +
push 4  +
lea edi [ebp+var_4] +
lea edx [ebp+var_15C] +
push edi  +
push 4  +
push esi  +
push edx  +
mov eax [ebp+var_8C] +
mov [ebp+var_4] ebx +
lea ecx [ebp+var_8C] +
call dword ptr [eax+20h]  +
test eax eax +
jnz loc_4065F6  +
lea ecx [ebp+var_8C] +
call sub_419BBC  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn   +
lea ecx [ebp+var_8C] +
call sub_419BBC  +
pop edi  +
pop esi  +
pop ebx  +
mov eax 1 +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 14h +
cmp ds:FileName 0 +
push ebx  +
push esi  +
push edi  +
jz loc_4066B2  +
push 0  +
lea ecx [ebp+var_10] +
call sub_418E64  +
push offset aA  +
push offset FileName  +
call sub_40AF6C  +
add esp 8 +
test eax eax +
mov [ebp+var_4] eax +
jz loc_4066B2  +
mov eax [ebp+arg_0] +
mov esi [ebp+arg_4] +
lea edi [ebp+var_10] +
mov edx [eax+0Ch] +
push edx  +
push esi  +
push offset aDumpOfSDCustom  +
push edi  +
call sub_418F14  +
add esp 10h +
mov ecx [ebp+arg_0] +
xor ebx ebx +
cmp [ecx+0Ch] ebx +
jle loc_40669D  +
push ebx  +
push offset aCustomerEntryD  +
lea eax [ebp+var_10] +
push eax  +
call sub_418F14  +
push 1  +
push 3  +
lea edx [ebp+var_10] +
mov esi [ebp+arg_0] +
push edx  +
mov edi [esi+10h] +
mov ecx [edi+ebx*4] +
call sub_408458  +
inc ebx  +
add esp 0Ch +
cmp [esi+0Ch] ebx +
jg loc_40666F  +
mov eax [ebp+arg_4] +
lea edx [ebp+var_10] +
push eax  +
push offset aEndOfDumpForS_  +
push edx  +
call sub_418F14  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 0B94h +
mov eax [ebp+Msg] +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+hWnd] +
mov edi [ebp+arg_C] +
cmp eax 5 +
jz loc_40672F  +
cmp eax 104h +
jz loc_4068AC  +
cmp eax 100h +
jz loc_4068AC  +
cmp eax 138h +
jz loc_406A15  +
cmp eax 233h +
jz loc_406A36  +
cmp eax 112h +
jz loc_406AC7  +
cmp eax 111h +
jz loc_406B3F  +
cmp eax 4Eh +
jz loc_406E36  +
cmp eax 10h +
jz loc_4073C5  +
jmp loc_4073D8  +
lea edx [ebp+Rect] +
push edx  +
push esi  +
call GetClientRect  +
mov edi [ebp+Rect.bottom] +
push 4  +
push 10h  +
mov ecx [ebp+Rect.right] +
add edi 0FFFFFFC4h +
add ecx 0FFFFFFE7h +
test ecx ecx +
jns loc_406758  +
inc ecx  +
sar ecx 1 +
mov edx ds:hWnd +
push ecx  +
push 5  +
push 5  +
push 0  +
mov ebx ecx +
push edx  +
call SetWindowPos  +
push 4  +
push 10h  +
push ebx  +
push 5  +
mov ecx [ebp+Rect.right] +
mov edx ds:dword_41E0C4 +
add ecx 0FFFFFFFBh +
sub ecx ebx +
push ecx  +
push 0  +
push edx  +
call SetWindowPos  +
push 4  +
push edi  +
push ebx  +
push 1Ah  +
push 5  +
push 0  +
mov ecx ds:dword_41E0A0 +
push ecx  +
call SetWindowPos  +
push 4  +
push edi  +
push ebx  +
push 1Ah  +
mov edx [ebp+Rect.right] +
mov ecx ds:dword_41E0A4 +
add edx 0FFFFFFFBh +
sub edx ebx +
push edx  +
push 0  +
push ecx  +
call SetWindowPos  +
push 4  +
push 18h  +
push 6Eh  +
mov edx [ebp+Rect.bottom] +
add edx 0FFFFFFE3h +
mov ecx ds:dword_41E0AC +
push edx  +
push 5  +
push 0  +
push ecx  +
call SetWindowPos  +
push 4  +
push 18h  +
push 6Eh  +
mov edx [ebp+Rect.bottom] +
add edx 0FFFFFFE3h +
mov ecx ds:dword_41E0A8 +
push edx  +
push 78h  +
push 0  +
push ecx  +
call SetWindowPos  +
push 4  +
push 18h  +
push 6Eh  +
mov edx [ebp+Rect.bottom] +
add edx 0FFFFFFE3h +
mov ecx ds:dword_41E0B0 +
push edx  +
push 0EBh  +
push 0  +
push ecx  +
call SetWindowPos  +
push 4  +
push 18h  +
push 6Eh  +
mov edx [ebp+Rect.bottom] +
add edx 0FFFFFFE3h +
mov ecx ds:dword_41E0B8 +
push edx  +
push 15Eh  +
push 0  +
push ecx  +
call SetWindowPos  +
push 4  +
push 18h  +
push 6Eh  +
mov edx [ebp+Rect.bottom] +
add edx 0FFFFFFE3h +
mov ecx ds:dword_41E0BC +
push edx  +
push 1D1h  +
push 0  +
push ecx  +
call SetWindowPos  +
push 4  +
push 18h  +
push 6Eh  +
mov edx [ebp+Rect.bottom] +
add edx 0FFFFFFE3h +
push edx  +
mov ecx [ebp+Rect.right] +
add ecx 0FFFFFF8Dh +
push ecx  +
push 0  +
mov edx ds:dword_41E0B4 +
push edx  +
call SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 10h  +
push 12h  +
call GetAsyncKeyState  +
mov ebx eax +
movsx ebx bx +
and ebx 8000h +
push 11h  +
call GetAsyncKeyState  +
cwde   +
and eax 8000h +
push 10h  +
mov [ebp+var_B84] eax +
call GetAsyncKeyState  +
cwde   +
and eax 8000h +
cmp [ebp+var_B84] 0 +
jz loc_40693D  +
cmp word ptr [ebp+wParam] 41h +
jnz loc_40693D  +
cmp ds:dword_41E1E0 1 +
sbb ebx ebx +
push offset dword_4265F4  +
neg ebx  +
mov ecx ds:dword_41E0A0 +
mov ds:dword_41E1E0 ebx +
mov ds:dword_41E1DC ebx +
push ecx  +
call sub_402C64  +
push offset dword_426608  +
mov esi ds:dword_41E0A4 +
push esi  +
call sub_402C64  +
call sub_4073F4  +
add esp 10h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
test ebx ebx +
jz loc_4069E9  +
mov ax word ptr [ebp+wParam] +
xor ebx ebx +
and eax 0FFFFh +
cmp eax 42h +
jz loc_406970  +
cmp eax 46h +
jz loc_406978  +
cmp eax 49h +
jz loc_406980  +
cmp eax 52h +
jz loc_406988  +
cmp eax 41h +
jz loc_406990  +
cmp eax 43h +
jz loc_406998  +
jmp loc_40699E  +
mov ebx ds:dword_41E0AC +
jmp loc_40699E  +
mov ebx ds:dword_41E0A8 +
jmp loc_40699E  +
mov ebx ds:dword_41E0B0 +
jmp loc_40699E  +
mov ebx ds:dword_41E0B8 +
jmp loc_40699E  +
mov ebx ds:dword_41E0BC +
jmp loc_40699E  +
mov ebx ds:dword_41E0B4 +
test ebx ebx +
jz loc_4073D8  +
push ebx  +
call IsWindowEnabled  +
test eax eax +
jz loc_4073D8  +
mov edx ds:dword_41E0AC +
push edx  +
call SetFocus  +
push ebx  +
push 0FFFFFFF4h  +
push ebx  +
call GetWindowLongA  +
and eax 0FFFFh +
push eax  +
push 111h  +
push esi  +
call PostMessageA  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 10h  +
cmp word ptr [ebp+wParam] 9 +
jnz loc_4073D8  +
push eax  +
call GetFocus  +
mov ecx ds:hWndParent +
push eax  +
push ecx  +
call GetNextDlgTabItem  +
push eax  +
call SetFocus  +
jmp loc_4073D8  +
push 0Fh  +
call GetSysColor  +
mov edx [ebp+wParam] +
push eax  +
push edx  +
call SetBkColor  +
mov eax ds:dword_41E1D8 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
xor ebx ebx +
mov edx [ebp+wParam] +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push edx  +
call DragQueryFileA  +
mov esi eax +
test eax eax +
jle loc_406AA0  +
push 105h  +
lea ecx [ebp+var_B80] +
mov edx [ebp+wParam] +
push ecx  +
push ebx  +
push edx  +
call DragQueryFileA  +
test eax eax +
jz loc_406A9B  +
push 0  +
mov ecx offset dword_4265F4 +
lea edx [ebp+var_B80] +
push ecx  +
push edx  +
call sub_40328C  +
mov ecx offset dword_4265F4 +
push ecx  +
call sub_405F98  +
mov edx offset dword_4265F4 +
mov ecx ds:dword_41E0A0 +
push edx  +
push ecx  +
call sub_402C64  +
add esp 18h +
inc ebx  +
cmp ebx esi +
jl loc_406A4C  +
push 0  +
push 1  +
push 0Ah  +
mov eax ds:hWndParent +
push eax  +
call PostMessageA  +
mov ebx [ebp+wParam] +
push ebx  +
call DragFinish  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 10h  +
mov ecx [ebp+wParam] +
cmp ecx 200h +
jz loc_406AE7  +
cmp ecx 300h +
jz loc_406B0B  +
cmp ecx 400h +
jz loc_406B2F  +
jmp loc_4073D8  +
push offset dword_4265F4  +
push offset aAccumulated_lx  +
push offset aSaveAccumulate  +
push 0  +
call sub_403E34  +
add esp 10h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
push offset dword_426608  +
push offset aAllKeysInstall  +
push offset aSaveRegistryKe  +
push 0  +
call sub_403E34  +
add esp 10h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
call sub_402FD4  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 10h  +
mov dx word ptr [ebp+wParam] +
cmp dx 400h +
jnz loc_406B70  +
cmp word ptr [ebp+wParam+2] 0 +
jnz loc_406B70  +
call sub_402E70  +
test eax eax +
jz loc_4073D8  +
mov edx ds:dword_41E0A0 +
push edx  +
call SetFocus  +
jmp loc_4073D8  +
cmp dx 300h +
jnz loc_406B88  +
cmp word ptr [ebp+wParam+2] 0 +
jnz loc_406B88  +
call sub_407608  +
jmp loc_4073D8  +
cmp dx 500h +
jnz loc_406CCD  +
cmp word ptr [ebp+wParam+2] 0 +
jnz loc_406CCD  +
mov edx 10h +
push 0  +
push 9  +
mov [ebp+lParam] edx +
push 110Ah  +
mov ecx ds:dword_41E0A0 +
push ecx  +
call SendMessageA  +
mov [ebp+var_A74] eax +
test eax eax +
jz loc_406D8B  +
lea edx [ebp+lParam] +
mov ecx ds:dword_41E0A0 +
push edx  +
push 0  +
push 110Ch  +
push ecx  +
call SendMessageA  +
test eax eax +
jz loc_406D8B  +
mov edx [ebp+var_A54] +
mov ecx offset dword_426608 +
mov ebx [ebp+var_A54] +
push edx  +
push ecx  +
call sub_404C54  +
add esp 8 +
test eax eax +
jz loc_406D8B  +
push ebx  +
call sub_404F88  +
add esp 4 +
test eax eax +
jz loc_406D8B  +
lea ecx [ebp+var_A50] +
call sub_418F48  +
mov ecx offset dword_426608 +
call sub_409474  +
push 1  +
lea edx [ebp+var_A50] +
push edx  +
push 1  +
mov ecx offset dword_426608 +
push ecx  +
call sub_404328  +
mov edx offset dword_426608 +
mov ecx ds:dword_41E0A4 +
push edx  +
push ecx  +
call sub_402C64  +
add esp 18h +
cmp dword ptr [ebx+10h] 0 +
jz loc_406CB0  +
push 24h  +
mov edx ds:lpWindowName +
push edx  +
push offset Text  +
mov ecx ds:hWndParent +
push ecx  +
call MessageBoxA  +
cmp eax 6 +
jnz loc_406C95  +
push ebx  +
call sub_408844  +
add esp 4 +
jmp loc_406CB0  +
push 40h  +
mov edx ds:lpWindowName +
push edx  +
push offset aYouHaveElected  +
mov ecx ds:hWndParent +
push ecx  +
call MessageBoxA  +
mov edx ds:dword_41E0A4 +
push edx  +
call SetFocus  +
lea ecx [ebp+var_A50] +
call sub_418F74  +
jmp loc_406D8B  +
cmp dx 600h +
jnz loc_406D9A  +
cmp word ptr [ebp+wParam+2] 0 +
jnz loc_406D9A  +
mov edx 10h +
push 0  +
push 9  +
mov [ebp+var_A30] edx +
push 110Ah  +
mov ecx ds:dword_41E0A4 +
push ecx  +
call SendMessageA  +
mov [ebp+var_A2C] eax +
test eax eax +
jz loc_406D8B  +
lea edx [ebp+var_A30] +
mov ecx ds:dword_41E0A4 +
push edx  +
push 0  +
push 110Ch  +
push ecx  +
call SendMessageA  +
test eax eax +
jz loc_406D8B  +
mov edx [ebp+var_A0C] +
push edx  +
call sub_405A60  +
add esp 4 +
test eax eax +
jz loc_406D8B  +
lea ecx [ebp+var_A08] +
call sub_418F48  +
mov ecx offset dword_426608 +
call sub_409474  +
push 1  +
lea edx [ebp+var_A08] +
push edx  +
push 1  +
mov ecx offset dword_426608 +
push ecx  +
call sub_404328  +
mov edx offset dword_426608 +
mov ecx ds:dword_41E0A4 +
push edx  +
push ecx  +
call sub_402C64  +
lea ecx [ebp+var_A08] +
call sub_418F74  +
add esp 18h +
mov ds:dword_41E1E8 1 +
jmp loc_4073D8  +
cmp dx 700h +
jnz loc_406E0E  +
cmp word ptr [ebp+wParam+2] 0 +
jnz loc_406E0E  +
mov ecx 10h +
push 0  +
push 9  +
mov [ebp+var_9E8] ecx +
push 110Ah  +
mov edx ds:dword_41E0A4 +
push edx  +
call SendMessageA  +
mov [ebp+var_9E4] eax +
test eax eax +
jz loc_4073D8  +
lea ecx [ebp+var_9E8] +
mov edx ds:dword_41E0A0 +
push ecx  +
push 0  +
push 110Ch  +
push edx  +
call SendMessageA  +
test eax eax +
jz loc_4073D8  +
mov ecx [ebp+var_9C4] +
push ecx  +
call sub_408844  +
add esp 4 +
jmp loc_4073D8  +
cmp dx 800h +
jnz loc_4073D8  +
cmp word ptr [ebp+wParam+2] 0 +
jnz loc_4073D8  +
push 0  +
push 0  +
push 10h  +
push esi  +
call PostMessageA  +
jmp loc_4073D8  +
mov eax [edi+8] +
cmp eax 0FFFFFFF9h +
jz loc_406E6C  +
cmp eax 0FFFFFFF8h +
jz loc_406E6C  +
cmp eax 0FFFFFE64h +
jz loc_406E76  +
cmp eax 0FFFFFE6Fh +
jz loc_406EC1  +
cmp eax 0FFFFFE6Eh +
jz loc_406F05  +
cmp eax 0FFFFFE63h +
jz loc_406F15  +
jmp loc_4073D8  +
call sub_4073F4  +
jmp loc_4073D8  +
push 11h  +
call GetAsyncKeyState  +
cwde   +
test ah 80h +
jz loc_406EFA  +
mov dx [edi+0Ch] +
xor ebx ebx +
cmp dx 6Bh +
jnz loc_406E97  +
mov ebx 2 +
jmp loc_406EAF  +
cmp dx 6Dh +
jnz loc_406EA4  +
mov ebx 1 +
jmp loc_406EAF  +
cmp dx 6Ah +
jnz loc_406EAF  +
mov ebx 3 +
test ebx ebx +
jz loc_406EFA  +
mov ecx [edi] +
push ebx  +
push ecx  +
call sub_4075B8  +
add esp 8 +
jmp loc_406EFA  +
mov ecx [edi+3Ch] +
mov edx [edi] +
push ecx  +
push 3  +
push 110Ah  +
push edx  +
call SendMessageA  +
mov ebx eax +
test eax eax +
jz loc_406EFA  +
push ebx  +
push 9  +
push 110Bh  +
mov ecx [edi] +
push ecx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
mov eax 1 +
mov esp ebp +
pop ebp  +
retn 10h  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 10h  +
call sub_4073F4  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 10h  +
mov [ebp+arg_C] edi +
mov ecx [ebp+arg_C] +
xor esi esi +
xor edi edi +
mov edx [ecx+14h] +
push edx  +
push 3  +
push 110Ah  +
mov edx [ecx] +
push edx  +
call SendMessageA  +
test eax eax +
jnz loc_406F42  +
mov ecx [ebp+arg_C] +
mov esi [ecx+18h] +
jmp loc_406FD5  +
mov edx [ebp+arg_C] +
xor ebx ebx +
cmp ds:dword_426600 ebx +
mov edi [edx+18h] +
jle loc_406FC4  +
mov [ebp+var_9C0] ebx +
xor ebx ebx +
test esi esi +
jnz loc_406FB1  +
mov ecx [ebp+var_9C0] +
mov edx ds:dword_426604 +
mov eax [edx+ecx*4] +
add eax 4D4h +
cmp [eax+0Ch] ebx +
jle loc_406FB1  +
mov ecx [ebp+var_9C0] +
mov edx ds:dword_426604 +
mov ecx [edx+ecx*4] +
mov edx [ecx+4E4h] +
cmp [edx+ebx*4] edi +
jnz loc_406F93  +
mov esi ecx +
inc ebx  +
test esi esi +
jnz loc_406FB1  +
mov ecx [ebp+var_9C0] +
mov edx ds:dword_426604 +
mov eax [edx+ecx*4] +
add eax 4D4h +
cmp [eax+0Ch] ebx +
jg loc_406F77  +
mov ebx [ebp+var_9C0] +
inc ebx  +
test esi esi +
jnz loc_406FC4  +
cmp ds:dword_426600 ebx +
jg loc_406F52  +
test esi esi +
jnz loc_406FD5  +
push offset aHaveTooltipReq  +
call sub_40810C  +
add esp 4 +
lea ebx [ebp+var_9BC] +
cmp ds:dword_41E1E0 0 +
jnz loc_40700D  +
push 10h  +
call GetAsyncKeyState  +
cwde   +
push eax  +
sub esp 4 +
push 11h  +
call GetAsyncKeyState  +
mov ecx eax +
movsx ecx cx +
add esp 4 +
pop eax  +
and eax ecx +
test ah 80h +
jnz loc_40700D  +
xor edx edx +
jmp loc_407012  +
mov edx 1 +
mov [ebp+var_8] edx +
test esi esi +
jz loc_4072C3  +
test edi edi +
jz loc_407029  +
test edx edx +
jz loc_4072C3  +
mov eax [esi+8] +
test eax eax +
jz loc_40704A  +
mov edx [esi+8] +
lea ecx [ebp+var_1BC] +
push edx  +
push offset aD_0  +
push ecx  +
call sub_40A2B4  +
add esp 0Ch +
jmp loc_40705E  +
push offset aUnlimited  +
lea ecx [ebp+var_1BC] +
push ecx  +
call sub_40A0AC  +
add esp 8 +
cmp byte ptr [esi+0C4h] 0 +
jz loc_40707F  +
lea ecx [esi+0C4h] +
lea edx [ebp+var_1A8] +
push ecx  +
push edx  +
call sub_40A0AC  +
add esp 8 +
jmp loc_407093  +
push offset aNotApplicable  +
lea edx [ebp+var_1A8] +
push edx  +
call sub_40A0AC  +
add esp 8 +
mov eax [esi+0Ch] +
test eax eax +
jz loc_4070B0  +
push offset aRequired  +
lea edx [ebp+var_E0] +
push edx  +
call sub_40A0AC  +
add esp 8 +
jmp loc_4070C4  +
push offset aNotRequired  +
lea ecx [ebp+var_E0] +
push ecx  +
call sub_40A0AC  +
add esp 8 +
mov eax [esi+10h] +
test eax eax +
jz loc_4070E1  +
push offset aRequired  +
lea edx [ebp+var_144] +
push edx  +
call sub_40A0AC  +
add esp 8 +
jmp loc_4070F5  +
push offset aNotRequired  +
lea ecx [ebp+var_144] +
push ecx  +
call sub_40A0AC  +
add esp 8 +
mov eax [esi+18h] +
test eax eax +
jz loc_40710F  +
push offset aYes  +
lea edx [ebp+var_7C] +
push edx  +
call sub_40A0AC  +
add esp 8 +
jmp loc_407120  +
push offset aNo  +
lea ecx [ebp+var_7C] +
push ecx  +
call sub_40A0AC  +
add esp 8 +
cmp byte ptr [esi+0D4h] 0 +
jz loc_40714E  +
push offset a___  +
push 0Ch  +
lea ecx [esi+0D4h] +
lea edx [ebp+var_18] +
push ecx  +
push edx  +
call sub_41B2F0  +
add esp 0Ch +
push eax  +
call sub_40BBE0  +
add esp 8 +
jmp loc_407152  +
mov byte ptr [ebp+var_18] 0 +
mov ecx ds:off_41E4EC +
lea edx [esi+24h] +
push ecx  +
push edx  +
call sub_40A05C  +
add esp 8 +
test eax eax +
jnz loc_407193  +
cmp byte ptr [esi+0C4h] 1 +
sbb ecx ecx +
lea edx [ebp+var_9BC] +
add ecx 6 +
push ecx  +
push offset aKeyVersionProt  +
push edx  +
call sub_40A2B4  +
lea ebx [ebp+eax+var_9BC] +
add esp 0Ch +
jmp loc_407200  +
mov ecx ds:off_41E4CC +
lea edx [esi+24h] +
push ecx  +
push edx  +
call sub_40A05C  +
add esp 8 +
test eax eax +
jnz loc_4071D4  +
cmp byte ptr [esi+0C4h] 1 +
sbb ecx ecx +
lea edx [ebp+var_9BC] +
add ecx 6 +
push ecx  +
push offset aKeyVersionPr_0  +
push edx  +
call sub_40A2B4  +
lea ebx [ebp+eax+var_9BC] +
add esp 0Ch +
jmp loc_407200  +
cmp byte ptr [esi+0C4h] 1 +
sbb ecx ecx +
lea edx [esi+24h] +
add ecx 6 +
push ecx  +
push edx  +
push offset aKeyVersionPr_1  +
lea ecx [ebp+var_9BC] +
push ecx  +
call sub_40A2B4  +
lea ebx [ebp+eax+var_9BC] +
add esp 10h +
mov edx [esi] +
test edx edx +
jnz loc_40720B  +
mov edx offset aUnknown +
push edx  +
push offset aSourceS  +
push ebx  +
call sub_40A2B4  +
lea ecx [ebp+var_7C] +
lea edx [ebp+var_E0] +
push ecx  +
lea ecx [ebp+var_144] +
push edx  +
lea edx [ebp+var_1A8] +
push ecx  +
lea ecx [ebp+var_1BC] +
push edx  +
lea edx [esi+84h] +
push ecx  +
lea ecx [esi+44h] +
push edx  +
push ecx  +
push 0  +
mov edx [esi+4] +
add ebx eax +
push edx  +
call sub_407E20  +
add esp 8 +
mov edx [esi+20h] +
push eax  +
mov eax [esi+1Ch] +
push edx  +
push eax  +
call sub_407E70  +
add esp 8 +
push eax  +
push offset aIssuedSCustome  +
push ebx  +
call sub_40A2B4  +
add ebx eax +
add esp 38h +
cmp [ebp+var_8] 0 +
jz loc_4072C3  +
lea ecx [ebp+var_18] +
push ecx  +
push offset aSignatureS  +
push ebx  +
call sub_40A2B4  +
add esp 0Ch +
lea edx [ebp+var_4] +
add ebx eax +
push edx  +
mov ecx esi +
call sub_408304  +
test eax eax +
jz loc_4072AF  +
push offset aKeyValid?Yes  +
push ebx  +
call sub_40A2B4  +
add ebx eax +
add esp 8 +
jmp loc_4072C3  +
mov edx [ebp+var_4] +
push edx  +
push offset aKeyValid?NoS  +
push ebx  +
call sub_40A2B4  +
add ebx eax +
add esp 0Ch +
test edi edi +
jz loc_40739F  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_4072DE  +
test esi esi +
jz loc_4072DE  +
mov cl 0Ah +
mov [ebx] cl +
inc ebx  +
mov [ebx] cl +
inc ebx  +
cmp byte ptr [edi+0A0h] 0 +
jz loc_40730C  +
push offset a___  +
push 0Ch  +
lea edx [edi+0A0h] +
lea ecx [ebp+var_18] +
push edx  +
push ecx  +
call sub_41B2F0  +
add esp 0Ch +
push eax  +
call sub_40BBE0  +
add esp 8 +
jmp loc_407310  +
mov byte ptr [ebp+var_18] 0 +
mov edx [edi] +
test edx edx +
jnz loc_40731B  +
mov edx offset aUnknown +
push edx  +
push offset aSourceS  +
push ebx  +
call sub_40A2B4  +
add ebx eax +
add esp 0Ch +
cmp [ebp+var_8] 0 +
jz loc_407346  +
mov ecx [edi+4] +
push ecx  +
push offset aProductCode08x  +
push ebx  +
call sub_40A2B4  +
add ebx eax +
add esp 0Ch +
mov edx [edi+0Ch] +
mov eax [edi+8] +
push edx  +
push eax  +
call sub_407E70  +
add esp 8 +
lea ecx [edi+20h] +
lea edx [edi+10h] +
push eax  +
push ecx  +
push edx  +
push offset aOrderRefSDescr  +
push ebx  +
call sub_40A2B4  +
add ebx eax +
add esp 14h +
cmp [ebp+var_8] 0 +
jz loc_40739F  +
mov ecx edi +
call sub_40874C  +
test eax eax +
jz loc_407387  +
mov edx offset aYes +
jmp loc_40738C  +
mov edx offset aNo +
lea ecx [ebp+var_18] +
push edx  +
push ecx  +
push offset aSignatureSKeyV  +
push ebx  +
call sub_40A2B4  +
add esp 10h +
mov edi [ebp+arg_C] +
lea ebx [ebp+var_9BC] +
mov eax [edi+10h] +
mov esi [edi+0Ch] +
dec eax  +
push eax  +
push ebx  +
push esi  +
call sub_41B2F0  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
push 0  +
call PostQuitMessage  +
pop edi  +
pop esi  +
pop ebx  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn 10h  +
mov ecx [ebp+wParam] +
mov edx [ebp+Msg] +
push edi  +
push ecx  +
push edx  +
push esi  +
call DefWindowProcA  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
sub esp 0F0h +
push ebx  +
push esi  +
call GetFocus  +
cmp eax ds:dword_41E0A0 +
jnz loc_407434  +
push 0  +
push 9  +
push 110Ah  +
mov eax ds:dword_41E0A0 +
push eax  +
call SendMessageA  +
test eax eax +
jz loc_407434  +
mov ebx ds:dword_41E0A0 +
mov ds:dword_4213E8 ebx +
jmp loc_407468  +
call GetFocus  +
cmp eax ds:dword_41E0A4 +
jnz loc_407468  +
push 0  +
push 9  +
push 110Ah  +
mov ecx ds:dword_41E0A4 +
push ecx  +
call SendMessageA  +
test eax eax +
jz loc_407468  +
mov edx ds:dword_41E0A4 +
mov ds:dword_4213E8 edx +
mov esi ds:dword_4213E8 +
mov eax 1 +
cmp esi ds:dword_41E0A0 +
jz loc_40747D  +
xor eax eax +
mov ecx ds:dword_41E0B0 +
push eax  +
push ecx  +
call EnableWindow  +
mov edx ds:dword_4213E8 +
mov ebx 1 +
cmp edx ds:dword_41E0A4 +
jz loc_4074A0  +
xor ebx ebx +
mov esi ds:dword_41E0B8 +
push ebx  +
push esi  +
call EnableWindow  +
mov eax 10h +
push 0  +
push 9  +
mov [ebp+lParam] eax +
push 110Ah  +
mov ecx ds:dword_41E0A4 +
push ecx  +
call SendMessageA  +
mov [ebp+var_EC] eax +
test eax eax +
jz loc_40752A  +
lea edx [ebp+lParam] +
mov ebx ds:dword_41E0A0 +
push edx  +
push 0  +
push 110Ch  +
push ebx  +
call SendMessageA  +
test eax eax +
jz loc_40752A  +
mov eax ds:dword_4213E8 +
cmp eax ds:dword_41E0A4 +
jnz loc_407511  +
mov ecx [ebp+var_CC] +
cmp dword ptr [ecx+10h] 0 +
jnz loc_407515  +
xor edx edx +
jmp loc_40751A  +
mov edx 1 +
mov ebx ds:dword_41E0BC +
push edx  +
push ebx  +
call EnableWindow  +
jmp loc_407539  +
push 0  +
mov esi ds:dword_41E0BC +
push esi  +
call EnableWindow  +
mov eax ds:dword_41E1E0 +
test eax eax +
jz loc_407560  +
mov ecx ds:lpWindowName +
lea edx [ebp+var_C8] +
push ecx  +
push offset aSAdvancedMode  +
push edx  +
call sub_40A2B4  +
add esp 0Ch +
jmp loc_407576  +
mov esi ds:lpWindowName +
lea eax [ebp+var_C8] +
push esi  +
push eax  +
call sub_40A0AC  +
add esp 8 +
push 64h  +
lea ebx [ebp+String] +
mov esi ds:hWndParent +
push ebx  +
push esi  +
call GetWindowTextA  +
lea eax [ebp+var_C8] +
push eax  +
push ebx  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jz loc_4075B1  +
lea ecx [ebp+var_C8] +
mov edx ds:hWndParent +
push ecx  +
push edx  +
call SetWindowTextA  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push eax  +
push ebx  +
push esi  +
push edi  +
push 0  +
push 0  +
mov esi [ebp+hWnd] +
push 110Ah  +
mov edi [ebp+arg_4] +
push esi  +
call SendMessageA  +
mov ebx eax +
test eax eax +
jz loc_4075FE  +
push ebx  +
push edi  +
push 1102h  +
push esi  +
call SendMessageA  +
push ebx  +
push 1  +
push 110Ah  +
push esi  +
call SendMessageA  +
mov ebx eax +
test eax eax +
jnz loc_4075DB  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 0FCh +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
xor edi edi +
push 0C8h  +
call GetLogicalDriveStringsA  +
test eax eax +
jz loc_407812  +
lea ecx [ebp+dwInitParam] +
push ecx  +
mov [ebp+dwInitParam] edi +
push offset DialogFunc  +
mov edx ds:hWndParent +
push edx  +
push offset TemplateName  +
mov ecx ds:hInstance +
push ecx  +
call CreateDialogParamA  +
push offset sub_40A1D0  +
push 1  +
mov esi eax +
lea ebx [ebp+Buffer] +
mov [ebp+var_2C] edi +
push 64h  +
lea ecx [ebp+var_28] +
call sub_41B6FC  +
push 7F02h  +
push edi  +
call LoadCursorA  +
push eax  +
call SetCursor  +
cmp [ebp+dwInitParam] edi +
jnz loc_4076D5  +
cmp [ebp+Buffer] 0 +
jz loc_4076D5  +
lea edx [ebp+dwInitParam] +
lea ecx [ebp+var_2C] +
push edx  +
lea edx [ebp+var_28] +
push ecx  +
push edx  +
push ebx  +
push 300h  +
push esi  +
call GetDlgItem  +
push eax  +
push 200h  +
push esi  +
call GetDlgItem  +
push eax  +
call sub_40781C  +
push ebx  +
call sub_40A110  +
inc eax  +
add esp 1Ch +
add ebx eax +
cmp [ebp+dwInitParam] 0 +
jnz loc_4076D5  +
cmp byte ptr [ebx] 0 +
jnz loc_407692  +
push 7F00h  +
push 0  +
call LoadCursorA  +
push eax  +
call SetCursor  +
push esi  +
call DestroyWindow  +
cmp [ebp+var_1C] 0 +
jz loc_4077D4  +
cmp [ebp+dwInitParam] 0 +
jz loc_407719  +
mov ecx [ebp+var_1C] +
push ecx  +
push offset aTheSearchFound  +
call sub_408044  +
add esp 8 +
test eax eax +
jz loc_4077D4  +
xor edx edx +
push 200h  +
lea ecx [ebp+dwInitParam] +
push ecx  +
mov [ebp+dwInitParam] edx +
push offset DialogFunc  +
mov ecx ds:hWndParent +
push ecx  +
push offset aLoadstatus  +
mov ecx ds:hInstance +
push ecx  +
call CreateDialogParamA  +
mov esi eax +
push eax  +
call GetDlgItem  +
mov edx [ebp+var_1C] +
mov edi eax +
dec edx  +
mov [ebp+var_4] edx +
mov cx word ptr [ebp+var_4] +
and ecx 0FFFFh +
mov [ebp+var_8] 0 +
mov dx word ptr [ebp+var_8] +
shl ecx 10h +
and edx 0FFFFh +
or ecx edx +
push ecx  +
push 0  +
push 401h  +
push edi  +
call SendMessageA  +
xor ebx ebx +
cmp [ebp+dwInitParam] ebx +
jnz loc_4077C8  +
cmp [ebp+var_1C] ebx +
jle loc_4077C8  +
call sub_407A18  +
push 0  +
push ebx  +
push 402h  +
push edi  +
call SendMessageA  +
push 1  +
push offset dword_4265F4  +
mov ecx [ebp+var_18] +
mov edx [ecx+ebx*4] +
push edx  +
call sub_40328C  +
inc ebx  +
add esp 0Ch +
cmp [ebp+dwInitParam] 0 +
jnz loc_4077C8  +
cmp [ebp+var_1C] ebx +
jg loc_407792  +
push esi  +
call DestroyWindow  +
mov edi 1 +
lea ecx [ebp+var_28] +
call sub_409474  +
mov eax offset dword_4265F4 +
mov [ebp+var_10] 0 +
push eax  +
call sub_405F98  +
mov ebx offset dword_4265F4 +
mov esi ds:dword_41E0A0 +
push ebx  +
push esi  +
call sub_402C64  +
mov [ebp+var_28] offset off_421B78 +
lea ecx [ebp+var_28] +
call sub_40938C  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 5BCh +
mov ecx [ebp+arg_C] +
push ebx  +
push esi  +
push edi  +
mov edx [ecx+0Ch] +
mov esi [ebp+arg_8] +
push offset a_  +
lea ecx [ebp+FileName] +
mov edi [ebp+arg_10] +
mov ebx [ebp+arg_14] +
mov [ebp+var_270] edx +
push esi  +
push ecx  +
call sub_41B444  +
mov edx [ebp+hWnd] +
push esi  +
push edx  +
call SetWindowTextA  +
add esp 0Ch +
lea ecx [ebp+FindFileData] +
lea edx [ebp+FileName] +
push ecx  +
push edx  +
call FindFirstFileA  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_4079CC  +
call sub_407A18  +
cmp dword ptr [ebx] 0 +
jnz loc_4079CC  +
test byte ptr [ebp+FindFileData.dwFileAttributes] 10h +
jz loc_407916  +
push offset a__0  +
lea edx [ebp+FindFileData.cFileName] +
push edx  +
call sub_40A05C  +
add esp 8 +
test eax eax +
jz loc_407970  +
push offset a__  +
lea ecx [ebp+FindFileData.cFileName] +
push ecx  +
call sub_40A05C  +
add esp 8 +
test eax eax +
jz loc_407970  +
inc dword ptr [edi]  +
mov edx [edi] +
cmp edx 18h +
jle loc_4078E1  +
mov ecx 1 +
mov [ebx] ecx +
jmp loc_407912  +
lea ecx [ebp+FindFileData.cFileName] +
lea edx [ebp+FileName] +
push ecx  +
push esi  +
push edx  +
call sub_41B444  +
mov ecx [ebp+arg_C] +
lea edx [ebp+FileName] +
push ebx  +
push edi  +
push ecx  +
mov ecx [ebp+arg_4] +
push edx  +
mov edx [ebp+hWnd] +
push ecx  +
push edx  +
call sub_40781C  +
add esp 24h +
dec dword ptr [edi]  +
jmp loc_407970  +
push offset a_lxk  +
lea ecx [ebp+FindFileData.cFileName] +
push ecx  +
call sub_41B540  +
add esp 4 +
push eax  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jnz loc_407970  +
lea edx [ebp+FindFileData.cFileName] +
lea ecx [ebp+var_26C] +
push edx  +
push esi  +
push ecx  +
call sub_41B444  +
lea edx [ebp+var_26C] +
push edx  +
call sub_409778  +
add esp 4 +
mov ecx [ebp+arg_C] +
mov edx [ecx] +
push eax  +
push eax  +
call dword ptr [edx+4]  +
push eax  +
mov ecx [ebp+arg_C] +
call sub_41B738  +
add esp 0Ch +
cmp dword ptr [ebx] 0 +
jnz loc_407991  +
lea edx [ebp+FindFileData] +
push edx  +
mov ecx [ebp+hFindFile] +
push ecx  +
call FindNextFileA  +
test eax eax +
jnz loc_40788E  +
mov eax [ebp+hFindFile] +
push eax  +
call FindClose  +
mov ebx [ebp+arg_C] +
mov esi [ebx+0Ch] +
cmp esi [ebp+var_270] +
jz loc_4079CC  +
push esi  +
push offset aFilesFoundU  +
lea edx [ebp+String] +
push edx  +
call sub_40A2B4  +
lea ecx [ebp+String] +
mov eax [ebp+arg_4] +
push ecx  +
push eax  +
call SetWindowTextA  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov eax [ebp+arg_4] +
cmp eax 110h +
jnz loc_4079ED  +
mov ebx [ebp+arg_C] +
mov ds:dword_42661C ebx +
jmp loc_407A0F  +
cmp eax 111h +
jnz loc_407A0F  +
cmp [ebp+arg_8] 2 +
jnz loc_407A0F  +
cmp [ebp+arg_A] 0 +
jnz loc_407A0F  +
mov ecx ds:dword_42661C +
mov edx 1 +
mov [ecx] edx +
pop ebx  +
pop ebp  +
xor eax eax +
retn 10h  +
***
sub esp 20h +
push 1  +
push 0  +
push 0  +
push 0  +
lea eax [ebp+Msg] +
push eax  +
call PeekMessageA  +
test eax eax +
jz loc_407A3E  +
lea ecx [ebp+Msg] +
push ecx  +
call DispatchMessageA  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov esi [ebp+arg_8] +
mov edi [ebp+arg_4] +
mov cl [ebx] +
test cl cl +
jz loc_407C29  +
cmp byte ptr [ebx+1] 0 +
jz loc_407C29  +
cmp ds:cchMultiByte 1 +
jle loc_407B16  +
push 80h  +
movsx ecx cl +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_407C29  +
jmp loc_407B29  +
xor edx edx +
mov eax ds:off_421F98 +
mov dl [ebx] +
test byte ptr [eax+edx*2] 80h +
jz loc_407C29  +
cmp ds:cchMultiByte 1 +
jle loc_407B4E  +
push 80h  +
movsx ecx byte ptr [ebx+1] +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_407C29  +
jmp loc_407B63  +
xor edx edx +
mov ecx ds:off_421F98 +
mov dl [ebx+1] +
test byte ptr [ecx+edx*2] 80h +
jz loc_407C29  +
test esi esi +
lea esi [esi-1] +
jz loc_407C29  +
mov dl [ebx] +
inc ebx  +
mov [ebp+var_C] dl +
mov al 41h +
mov cl [ebx] +
inc ebx  +
cmp dl al +
jl loc_407B86  +
movsx edx [ebp+var_C] +
add edx 0FFFFFFC9h +
jmp loc_407B8D  +
movsx edx [ebp+var_C] +
add edx 0FFFFFFD0h +
mov [ebp+var_8] edx +
cmp cl al +
jl loc_407B9C  +
movsx edx cl +
add edx 0FFFFFFC9h +
jmp loc_407BA2  +
movsx edx cl +
add edx 0FFFFFFD0h +
mov cl byte ptr [ebp+var_8] +
mov [ebp+var_4] edx +
shl cl 4 +
add cl byte ptr [ebp+var_4] +
mov [edi] cl +
inc edi  +
mov dl [ebx] +
test dl dl +
jz loc_407C29  +
cmp byte ptr [ebx+1] 0 +
jz loc_407C29  +
cmp ds:cchMultiByte 1 +
jle loc_407BDD  +
push 80h  +
movsx edx dl +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_407C29  +
jmp loc_407BEC  +
xor ecx ecx +
mov eax ds:off_421F98 +
mov cl [ebx] +
test byte ptr [eax+ecx*2] 80h +
jz loc_407C29  +
cmp ds:cchMultiByte 1 +
jle loc_407C0D  +
push 80h  +
movsx edx byte ptr [ebx+1] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_407C29  +
jmp loc_407C1E  +
xor ecx ecx +
mov edx ds:off_421F98 +
mov cl [ebx+1] +
test byte ptr [edx+ecx*2] 80h +
jz loc_407C29  +
test esi esi +
lea esi [esi-1] +
jnz loc_407B6E  +
cmp byte ptr [ebx] 0 +
mov eax 0FFFFFFFFh +
jnz loc_407C38  +
mov eax edi +
sub eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebp esp +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
xor ebx ebx +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_407CD1  +
push 4  +
mov ecx [esi] +
movsx ecx byte ptr [ecx] +
push ecx  +
call sub_40B258  +
add esp 8 +
mov edi eax +
test eax eax +
jmp loc_407CE7  +
mov eax [esi] +
xor ecx ecx +
mov cl [eax] +
mov edx ds:off_421F98 +
mov di [edx+ecx*2] +
and edi 4 +
jz loc_407D1D  +
mov edx [ebp+var_C] +
mov eax [ebp+var_10] +
imul ecx edx +
mov edx 0Ah +
mov [ebp+var_8] ebx +
mul  edx +
add edx ecx +
mov ecx [esi] +
movsx ebx byte ptr [ecx] +
mov ecx ebx +
sar ecx 1Fh +
add eax ebx +
adc edx ecx +
add eax 0FFFFFFD0h +
adc edx 0FFFFFFFFh +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
inc dword ptr [esi]  +
mov ebx [ebp+var_8] +
inc ebx  +
test edi edi +
jz loc_407D27  +
cmp ebx 0Eh +
jb loc_407CAE  +
test edi edi +
jz loc_407D40  +
mov esi [ebp+arg_4] +
mov eax [ebp+var_10] +
mov edx [ebp+var_C] +
mov [esi] eax +
mov [esi+4] edx +
mov eax 1 +
jmp loc_407D42  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 18h +
push ebx  +
lea eax [ebp+var_C] +
mov ebx [ebp+arg_0] +
push esi  +
push eax  +
push ebx  +
call sub_41A9AC  +
add esp 8 +
test eax eax +
jz loc_407E15  +
push 2Dh  +
push ebx  +
call sub_41A624  +
add esp 8 +
test eax eax +
jz loc_407E15  +
lea ecx [ebp+var_8] +
push ecx  +
push ebx  +
call sub_41A9AC  +
add esp 8 +
test eax eax +
jz loc_407E15  +
push 2Dh  +
push ebx  +
call sub_41A624  +
add esp 8 +
test eax eax +
jz loc_407E15  +
lea edx [ebp+var_4] +
push edx  +
push ebx  +
call sub_41A9AC  +
add esp 8 +
test eax eax +
jz loc_407E15  +
push ebx  +
call sub_41B260  +
add esp 4 +
test eax eax +
jnz loc_407E15  +
mov ebx [ebp+var_C] +
xor esi esi +
mov dword ptr [ebp+var_14] ebx +
mov dword ptr [ebp+var_14+4] esi +
fild  [ebp+var_14] +
mov ecx [ebp+var_8] +
mov dword ptr [ebp+var_14+4] esi +
imul edx ecx +
mov dword ptr [ebp+var_14] edx +
mov eax [ebp+var_4] +
fmul  ds:dbl_42148C +
fild  [ebp+var_14] +
mov dword ptr [ebp+var_14] eax +
mov dword ptr [ebp+var_14+4] esi +
faddp st(1) st +
fild  [ebp+var_14] +
faddp st(1) st +
fstp  [ebp+var_14] +
mov edx dword ptr [ebp+var_14+4] +
mov eax dword ptr [ebp+var_14] +
call sub_40B6CA  +
mov ebx [ebp+arg_4] +
mov [ebx] eax +
pop esi  +
pop ebx  +
mov eax 1 +
mov esp ebp +
pop ebp  +
retn   +
pop esi  +
pop ebx  +
mov esp ebp +
xor eax eax +
pop ebp  +
retn   +
***
push ebx  +
sub esp 1Ch +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
or eax [ebp+arg_0] +
jnz loc_407E9A  +
push offset aUnknown_0  +
push offset unk_426630  +
call sub_40A0AC  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ebx 0F4240h +
xor ecx ecx +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
mov ebx 64h +
xor ecx ecx +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
mov [ebp+var_18] ebx +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ebx 2710h +
xor ecx ecx +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
mov ebx 64h +
xor ecx ecx +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
mov [ebp+var_14] ebx +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ebx 64h +
xor ecx ecx +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
mov ebx 64h +
xor ecx ecx +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
mov [ebp+var_10] ebx +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ebx 64h +
xor ecx ecx +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
mov [ebp+var_C] ebx +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ebx 540BE400h +
mov ecx 2 +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
add eax 0FFFFF84Eh +
mov esi 1 +
mov [ebp+var_8] eax +
mov dl byte ptr [ebp+var_8] +
and dl 3 +
cmp dl 2 +
jz loc_407F61  +
xor esi esi +
lea eax [eax+1] +
mov ebx 5F5E100h +
cdq   +
and edx 3 +
xor ecx ecx +
add eax edx +
mov edx [ebp+arg_4] +
sar eax 2 +
push eax  +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
mov ebx 64h +
xor ecx ecx +
push esi  +
push edi  +
call sub_409686  +
pop edi  +
pop esi  +
cmp ebx 1 +
jle loc_407FA0  +
test esi esi +
jnz loc_407FA4  +
xor esi esi +
jmp loc_407FA9  +
mov esi 1 +
pop eax  +
push 1  +
mov edi [ebp+var_10] +
add eax esi +
mov ecx [ebp+var_14] +
imul edx edi +
imul esi ecx +
mov ecx [ebp+var_8] +
imul ecx ecx +
imul edi ebx +
add ecx [ebp+var_18] +
add edi ecx +
add edi dword ptr ds:(a02u05u03u+0Ch)[ebx*4] +
mov ebx [ebp+var_C] +
add edi eax +
imul eax edi +
add esi eax +
add edx esi +
lea edx [ebx+edx-28DE80h] +
mov [ebp+var_4] edx +
push edx  +
call sub_419290  +
add esp 8 +
push eax  +
push 2  +
mov esi [ebp+var_4] +
push esi  +
call sub_4191D4  +
add esp 8 +
mov ecx offset unk_426630 +
push eax  +
push offset aSS_0  +
push ecx  +
call sub_40A2B4  +
add esp 10h +
mov eax offset unk_426630 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push eax  +
push eax  +
push eax  +
lea eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push eax  +
push ecx  +
push 0  +
push 10h  +
call sub_408094  +
mov ds:dword_41E1EC 1 +
add esp 10h +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebp esp +
sub esp 1000h +
test [esp+1000h+var_1000] esp +
dec edx  +
jnz loc_40809C  +
sub esp 8 +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_8] +
lea edx [ebp+Text] +
push ebx  +
push esi  +
push eax  +
push ecx  +
push 1000h  +
push edx  +
call sub_40A398  +
mov ebx [ebp+arg_0] +
mov esi ds:lpWindowName +
or ebx [ebp+arg_4] +
lea eax [ebp+Text] +
mov ecx ds:hWndParent +
push ebx  +
push esi  +
push eax  +
push ecx  +
call MessageBoxA  +
lea edx [ebp+Text] +
push eax  +
push edx  +
mov [ebp+var_4] eax +
push offset aDisplayMessage  +
call sub_40810C  +
add esp 1Ch +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
cmp ds:FileName 0 +
jz loc_408148  +
push offset aA_0  +
push offset FileName  +
call sub_40AF6C  +
add esp 8 +
mov ebx eax +
test eax eax +
jz loc_408148  +
lea eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push eax  +
push ecx  +
push ebx  +
call sub_40A264  +
push ebx  +
call sub_40B1AC  +
add esp 10h +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [esp+arg_4] +
mov ecx [ebp+arg_0] +
push eax  +
push ecx  +
call sub_40A1D0  +
add esp 8 +
pop ebp  +
retn   +
***
sub esp 8 +
push ebx  +
push esi  +
mov ebx ecx +
push 0  +
lea ecx [ebx+4D4h] +
mov [ebp+var_4] ecx +
call sub_409364  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_0] +
mov esi 0FFFFFFFFh +
xor ecx ecx +
mov dword ptr [eax] offset off_421B88 +
mov al cl +
mov [ebx+44h] al +
mov [ebx+4] edx +
mov [ebx+84h] al +
mov edx [ebp+arg_4] +
mov [ebx+24h] al +
mov [ebx+1Ch] ecx +
mov [ebx+0C4h] al +
mov [ebx+20h] ecx +
mov [ebx+0Ch] ecx +
mov [ebx+10h] ecx +
mov [ebx+14h] ecx +
mov [ebx+18h] ecx +
mov dword ptr [ebx] 0 +
mov [ebx+8] esi +
mov [ebx+0D4h] al +
push edx  +
mov ecx ebx +
call sub_408414  +
mov eax ebx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
sub esp 8 +
push ebx  +
push esi  +
mov ebx ecx +
push 0  +
call sub_408414  +
mov eax 0FFFFFFFFh +
xor ecx ecx +
mov dl cl +
mov [ebx+1Ch] ecx +
mov [ebx+44h] dl +
mov [ebx+20h] ecx +
mov [ebx+84h] dl +
mov [ebx+8] eax +
mov [ebx+24h] dl +
lea ecx [ebx+4D4h] +
mov [ebx+0C4h] dl +
mov dword ptr [ebx+4] 0 +
mov [ebx+0D4h] dl +
call sub_409474  +
lea esi [ebx+4D4h] +
mov ecx esi +
mov dword ptr [esi] offset off_421B88 +
call sub_40938C  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi ecx +
mov ebx offset unk_426694 +
cmp byte ptr [esi+44h] 0 +
jz loc_4082A6  +
lea edx [esi+44h] +
push edx  +
mov edx offset unk_426694 +
push edx  +
call sub_40A220  +
mov ebx eax +
add esp 8 +
cmp byte ptr [esi+84h] 0 +
jz loc_4082D4  +
lea ecx [esi+84h] +
push ecx  +
cmp byte ptr [esi+44h] 0 +
jz loc_4082C3  +
mov edx offset aS_2 +
jmp loc_4082C8  +
mov edx offset aS_3 +
push edx  +
push ebx  +
call sub_40A2B4  +
add ebx eax +
add esp 0Ch +
cmp ebx offset unk_426694 +
jnz loc_4082F9  +
push 0  +
mov ecx [esi+4] +
push ecx  +
call sub_407E20  +
add esp 8 +
push eax  +
push offset aUnknownCustome  +
push ebx  +
call sub_40A2B4  +
add esp 0Ch +
pop esi  +
pop ebx  +
pop ebp  +
mov eax offset unk_426694 +
retn   +
***
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [eax+4] ebx +
jnz loc_408318  +
mov ebx offset aNoCustomerId +
jmp loc_408352  +
cmp [eax+44h] bl +
jnz loc_40832C  +
cmp [eax+84h] bl +
jnz loc_40832C  +
mov ebx offset aNoNameOrNoComp +
jmp loc_408352  +
cmp [eax+0D4h] bl +
jnz loc_40833B  +
mov ebx offset aIncorrectSigna +
jmp loc_408352  +
cmp [eax+24h] bl +
jnz loc_408347  +
mov ebx offset aNoProductFamil +
jmp loc_408352  +
cmp dword ptr [eax+8] 0FFFFFFFFh +
jnz loc_408352  +
mov ebx offset aNoUserCount_ +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_40835E  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
cmp ebx 1 +
pop ebx  +
sbb eax eax +
pop ebp  +
neg eax  +
retn 4  +
***
push ebx  +
sub esp 8 +
push ebx  +
mov [ebp+var_4] ecx +
mov eax [ecx] +
test eax eax +
jz loc_408436  +
push eax  +
call sub_40972C  +
mov ecx [ebp+var_4] +
mov dword ptr [ecx] 0 +
add esp 4 +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_40844E  +
mov edx [ebp+arg_0] +
push edx  +
call sub_409778  +
mov ebx [ebp+var_4] +
mov [ebx] eax +
add esp 4 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
sub esp 70h +
push ebx  +
push esi  +
push edi  +
push 64h  +
push 20h  +
lea edx [ebp+var_64] +
mov [ebp+var_68] ecx +
mov edi [ebp+arg_8] +
mov esi ecx +
push edx  +
call sub_4097E4  +
mov ecx [ebp+arg_4] +
mov byte ptr [ebp+ecx+var_64] 0 +
mov edx [esi+4] +
push edx  +
push 0  +
push edx  +
call sub_407E20  +
add esp 8 +
lea ecx [ebp+var_64] +
mov edx [ebp+arg_0] +
push eax  +
push ecx  +
push offset aSid___________  +
mov eax [edx] +
push edx  +
call dword ptr [eax+24h]  +
lea ecx [esi+24h] +
lea edx [ebp+var_64] +
push ecx  +
push edx  +
push offset aSfamily_______  +
mov ecx [ebp+arg_0] +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
lea edx [esi+44h] +
lea ecx [ebp+var_64] +
push edx  +
push ecx  +
push offset aSname_________  +
mov edx [ebp+arg_0] +
push edx  +
mov eax [edx] +
call dword ptr [eax+24h]  +
lea ecx [esi+84h] +
lea edx [ebp+var_64] +
push ecx  +
push edx  +
push offset aScompany______  +
mov ecx [ebp+arg_0] +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov edx [esi+8] +
lea ecx [ebp+var_64] +
push edx  +
push ecx  +
push offset aSusers________  +
mov edx [ebp+arg_0] +
push edx  +
mov eax [edx] +
call dword ptr [eax+24h]  +
lea ecx [esi+0C4h] +
lea edx [ebp+var_64] +
push ecx  +
push edx  +
push offset aSexpiry_______  +
mov ecx [ebp+arg_0] +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov edx [esi+0Ch] +
lea ecx [ebp+var_64] +
push edx  +
push ecx  +
push offset aShardwarekey__  +
mov edx [ebp+arg_0] +
push edx  +
mov eax [edx] +
call dword ptr [eax+24h]  +
mov ecx [esi+10h] +
lea edx [ebp+var_64] +
push ecx  +
push edx  +
push offset aSactivation___  +
mov ecx [ebp+arg_0] +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov edx [esi+14h] +
lea ecx [ebp+var_64] +
push edx  +
push ecx  +
push offset aSactivationday  +
mov edx [ebp+arg_0] +
push edx  +
mov eax [edx] +
call dword ptr [eax+24h]  +
mov ecx [esi+18h] +
lea edx [ebp+var_64] +
push ecx  +
push edx  +
push offset aSevaluationkey  +
mov ecx [ebp+arg_0] +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov edx [esi+20h] +
mov eax [esi+1Ch] +
push edx  +
push eax  +
call sub_407E70  +
add esp 8 +
mov edx [esi+20h] +
lea ecx [ebp+var_64] +
push eax  +
mov eax [esi+1Ch] +
push edx  +
push eax  +
push ecx  +
push offset aStimeStamp____  +
mov edx [ebp+arg_0] +
push edx  +
mov eax [edx] +
call dword ptr [eax+24h]  +
lea ecx [esi+0D4h] +
lea edx [ebp+var_64] +
push ecx  +
push edx  +
push offset aSsignature____  +
mov ecx [ebp+arg_0] +
push ecx  +
mov edx [ecx] +
call dword ptr [edx+24h]  +
xor ebx ebx +
add esp 0D8h +
test edi edi +
jz loc_40861D  +
lea ecx [esi+4D4h] +
cmp [ecx+0Ch] ebx +
jle loc_40861D  +
mov edx [ebp+arg_4] +
mov [ebp+var_68] esi +
mov esi [ebp+var_68] +
lea ecx [edx+3] +
add esi 4D4h +
mov [ebp+var_6C] ecx +
lea edx [ebp+var_64] +
push ebx  +
push edx  +
push offset aSProductEntryD  +
mov ecx [ebp+arg_0] +
push ecx  +
mov edx [ecx] +
call dword ptr [edx+24h]  +
mov ecx [ebp+var_6C] +
mov edx [ebp+arg_0] +
push ecx  +
mov ecx [esi+10h] +
push edx  +
mov ecx [ecx+ebx*4] +
call sub_4087B0  +
push offset asc_42171C  +
mov edx [ebp+arg_0] +
push edx  +
mov ecx [edx] +
call dword ptr [ecx+24h]  +
inc ebx  +
add esp 18h +
test edi edi +
jz loc_40861D  +
cmp [esi+0Ch] ebx +
jg loc_4085DC  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov ebp esp +
push ebx  +
mov ebx ecx +
xor edx edx +
mov eax [ebp+arg_0] +
push esi  +
mov [ebx+4] eax +
mov al dl +
mov [ebx+20h] al +
mov esi [ebp+arg_4] +
mov [ebx+10h] al +
mov [ebx+8] edx +
mov [ebx+0Ch] edx +
mov [ebx+0A0h] al +
push esi  +
call sub_40876C  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov ebp esp +
sub esp 8 +
push ebx  +
mov ebx ecx +
cmp byte ptr [ecx+20h] 0 +
jz loc_40872B  +
lea edx [ebx+20h] +
push edx  +
push offset unk_4266F8  +
call sub_40A220  +
add esp 8 +
cmp [ebp+arg_0] 0 +
jz loc_408741  +
mov ecx [ebx+4] +
push ecx  +
push offset a08x  +
push eax  +
call sub_40A2B4  +
add esp 0Ch +
jmp loc_408741  +
mov eax [ebx+4] +
push eax  +
push offset aProductCode0_1  +
push offset unk_4266F8  +
call sub_40A2B4  +
add esp 0Ch +
pop ebx  +
pop ebp  +
mov eax offset unk_4266F8 +
retn 4  +
***
cmp dword ptr [ecx+4] 0 +
jz loc_40875E  +
cmp byte ptr [ecx+0A0h] 0 +
jnz loc_408762  +
xor eax eax +
jmp loc_408767  +
mov eax 1 +
pop ebp  +
retn   +
***
sub esp 8 +
push ebx  +
mov [ebp+var_4] ecx +
mov eax [ecx] +
test eax eax +
jz loc_40878E  +
push eax  +
call sub_40972C  +
mov ecx [ebp+var_4] +
mov dword ptr [ecx] 0 +
add esp 4 +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_4087A6  +
mov edx [ebp+arg_0] +
push edx  +
call sub_409778  +
mov ebx [ebp+var_4] +
mov [ebx] eax +
add esp 4 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
sub esp 64h +
push ebx  +
push esi  +
push edi  +
push 64h  +
push 20h  +
lea eax [ebp+var_64] +
mov ebx ecx +
push eax  +
call sub_4097E4  +
mov ecx [ebp+arg_4] +
mov esi [ebp+arg_0] +
mov byte ptr [ebp+ecx+var_64] 0 +
mov edx [ebx+4] +
mov edi [esi] +
push edx  +
push offset aCode________08  +
push esi  +
call dword ptr [edi+24h]  +
mov edx [ebx+0Ch] +
mov eax [ebx+8] +
push edx  +
push eax  +
call sub_407E70  +
add esp 8 +
mov edx [ebx+0Ch] +
mov ecx [esi] +
push eax  +
mov eax [ebx+8] +
push edx  +
push eax  +
push offset aTimeStamp__Lld  +
push esi  +
call dword ptr [ecx+24h]  +
lea edi [ebx+20h] +
mov eax [esi] +
push edi  +
push offset aDescription_S  +
push esi  +
call dword ptr [eax+24h]  +
lea edx [ebx+10h] +
mov ecx [esi] +
push edx  +
push offset aOrderNumberS  +
push esi  +
call dword ptr [ecx+24h]  +
lea edi [ebx+0A0h] +
push edi  +
push offset aSignature___S  +
push esi  +
mov esi [esi] +
call dword ptr [esi+24h]  +
add esp 50h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov ebp esp +
sub esp 1000h +
test [esp+1000h+var_1000] esp +
dec edx  +
jnz loc_40884C  +
sub esp 940h +
xor ecx ecx +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
mov [ebp+var_1292C] ecx +
mov [ebp+hInternet] ecx +
mov [ebp+var_12924] ecx +
mov [ebp+hDlg] ecx +
mov esi ecx +
cmp ds:dword_426614 ecx +
jle loc_4088DB  +
mov edx [ebp+arg_0] +
mov eax ds:dword_426618 +
mov cl [edx+0C4h] +
mov eax [eax+esi*4] +
neg cl  +
sbb ecx ecx +
mov dl [eax+0C4h] +
inc ecx  +
neg dl  +
sbb edx edx +
inc edx  +
cmp ecx edx +
jnz loc_4088CE  +
mov ecx [ebp+arg_0] +
lea edx [ecx+24h] +
lea ecx [eax+24h] +
push edx  +
push ecx  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jnz loc_4088CE  +
mov edx ds:dword_426618 +
mov ebx [edx+esi*4] +
inc esi  +
test ebx ebx +
jnz loc_4088DB  +
cmp ds:dword_426614 esi +
jg loc_408889  +
test ebx ebx +
jz loc_408FC4  +
mov eax [ebx+4] +
mov ecx 5F5E100h +
mov [ebp+var_12938] eax +
xor edx edx +
div  ecx +
mov [ebp+var_128DC] eax +
mov eax [ebp+var_12938] +
mov ecx 3E8h +
xor edx edx +
div  ecx +
mov [ebp+var_12930] edx +
mov ecx 186A0h +
mov [ebp+var_12934] eax +
xor edx edx +
div  ecx +
mov ecx [ebp+var_12930] +
mov [ebp+var_128D8] edx +
mov eax [ebp+var_12934] +
mov [ebp+var_128D4] ecx +
cmp byte ptr [ebx+0C4h] 0 +
jz loc_408951  +
lea eax [ebx+0C4h] +
push eax  +
call sub_40DAB4  +
add esp 4 +
jmp loc_408953  +
xor eax eax +
push eax  +
cmp byte ptr [ebx+0C4h] 0 +
jz loc_40896E  +
lea edx [ebx+0C7h] +
push edx  +
call sub_40DAB4  +
add esp 4 +
jmp loc_408970  +
xor eax eax +
push eax  +
cmp byte ptr [ebx+0C4h] 0 +
jz loc_40898B  +
lea ecx [ebx+0CAh] +
push ecx  +
call sub_40DAB4  +
add esp 4 +
jmp loc_40898D  +
xor eax eax +
push eax  +
mov edx [ebp+var_128D4] +
push edx  +
mov ecx [ebp+var_128D8] +
push ecx  +
mov edx [ebp+var_128DC] +
push edx  +
push offset a02d05d03d04d02  +
lea ecx [ebp+var_128D0] +
push ecx  +
call sub_40A2B4  +
xor esi esi +
add esp 20h +
mov edi 0FFh +
cmp byte ptr [ebp+var_128D0] 0 +
jz loc_4089F5  +
dec edi  +
mov edx edi +
movsx ecx byte ptr [ebp+esi+var_128D0] +
xor edx ecx +
push edx  +
push offset a02x  +
lea edx [ebp+esi*2+var_1291C] +
push edx  +
call sub_40A2B4  +
inc esi  +
add esp 0Ch +
cmp byte ptr [ebp+esi+var_128D0] 0 +
jnz loc_4089C7  +
push offset aSoftwareMicros  +
push 80000002h  +
mov [ebp+var_1284C] offset off_421B54 +
lea ecx [ebp+var_1284C] +
call sub_419BFC  +
push 0  +
push 0  +
push 41h  +
lea eax [ebp+var_12890] +
push eax  +
push 1  +
push offset aMachineguid  +
push offset unk_42183C  +
mov esi [ebp+var_1284C] +
lea ecx [ebp+var_1284C] +
call dword ptr [esi+1Ch]  +
push 41h  +
lea edx [ebp+var_12890] +
push edx  +
call sub_409048  +
lea ecx [ebp+var_1284C] +
call sub_419BBC  +
mov ecx 41h +
xor eax eax +
lea edi [ebp+szPath] +
stos   +
add esp 8 +
lea esi [ebp+szPath] +
push eax  +
push 2Bh  +
push esi  +
push eax  +
call SHGetSpecialFolderPathA  +
xor edx edx +
cmp eax edx +
js loc_408AD0  +
push offset aLabcenterElect  +
push esi  +
push esi  +
call sub_41B5D0  +
push 0  +
push esi  +
call CreateDirectoryA  +
add esp 0Ch +
lea ecx [ebp+FileInformation] +
push ecx  +
push 0  +
push esi  +
call GetFileAttributesExA  +
test eax eax +
jz loc_408AD0  +
lea eax [ebp+var_1269C] +
lea edi [ebp+var_126BC] +
push eax  +
push edi  +
call sub_4090C0  +
add esp 8 +
test eax eax +
jz loc_408AD0  +
mov esi [ebp+var_1269C] +
mov [ebp+var_12924] esi +
lea edx [ebp+var_12698] +
push edx  +
call sub_419AB4  +
mov esi offset aHttpsSecure_la +
lea edi [ebp+var_12618] +
mov ecx 7 +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_12924] +
lea ecx [ebp+var_12698] +
lea edx [ebp+var_12890] +
lea esi [ebp+var_1291C] +
push eax  +
push ecx  +
push edx  +
push esi  +
push offset unk_42183C  +
lea edi [ebx+24h] +
push edi  +
push offset aActivate_0  +
lea eax [ebp+var_12618] +
lea ecx [ebp+szUrl] +
push eax  +
push offset aSCgiBinActivat  +
push ecx  +
call sub_40A2B4  +
mov edx ds:hWndParent +
push edx  +
call sub_4091E0  +
push 0  +
mov esi ds:hWndParent +
mov [ebp+hDlg] eax +
push esi  +
call EnableWindow  +
push offset aCheckingIntern  +
mov edi [ebp+hDlg] +
push edi  +
call sub_409218  +
add esp 38h +
push 0  +
call InternetAttemptConnect  +
test eax eax +
jz loc_408B96  +
push 10h  +
mov ebx ds:lpWindowName +
push ebx  +
push offset aNoInternetConn  +
mov esi ds:hWndParent +
push esi  +
call MessageBoxA  +
xor edi edi +
jmp loc_408FC4  +
push offset aConnectingToTh  +
mov ecx [ebp+hDlg] +
push ecx  +
call sub_409218  +
add esp 8 +
push 0  +
push 0  +
push 0  +
push 0  +
push offset szAgent  +
call InternetOpenA  +
mov edi eax +
test eax eax +
jz loc_408FC4  +
push offset aSendingAuthori  +
mov edx [ebp+hDlg] +
push edx  +
call sub_409218  +
add esp 8 +
lea ecx [ebp+szUrl] +
push 0  +
push 84801000h  +
push 0  +
push 0  +
push ecx  +
push edi  +
call InternetOpenUrlA  +
test eax eax +
mov [ebp+hInternet] eax +
jnz loc_408C3B  +
call GetLastError  +
push eax  +
push offset aFailedToContac  +
lea eax [ebp+Text] +
push eax  +
call sub_40A2B4  +
push 10h  +
mov ebx ds:lpWindowName +
lea esi [ebp+Text] +
mov edx ds:hWndParent +
push ebx  +
push esi  +
push edx  +
call MessageBoxA  +
add esp 0Ch +
jmp loc_408FC4  +
push offset aReceivingAutho  +
mov ecx [ebp+hDlg] +
push ecx  +
call sub_409218  +
lea edx [ebp+Buffer] +
lea ecx [ebp+dwNumberOfBytesRead] +
mov [ebp+lpText] edx +
add esp 8 +
push ecx  +
push 10000h  +
push edx  +
mov edx [ebp+hInternet] +
push edx  +
call InternetReadFile  +
test eax eax +
jz loc_408F74  +
push 1  +
mov edx [ebp+dwNumberOfBytesRead] +
lea ecx [ebp+Buffer] +
push edx  +
push ecx  +
lea ecx [ebp+var_19F0] +
call sub_40CC70  +
mov edx [ebp+dwNumberOfBytesRead] +
push 0Ah  +
mov byte ptr [ebp+edx+Buffer] 0 +
push 400h  +
lea ecx [ebp+var_1DF8] +
mov [ebp+lpText] ecx +
push ecx  +
lea ecx [ebp+var_19A8] +
call sub_40D860  +
lea esi [eax+4] +
mov edx [esi] +
mov ecx [edx+4] +
cmp dword ptr [ecx+esi+0Ch] 0 +
jnz loc_408FAE  +
push offset aError  +
lea edx [ebp+lpText] +
push edx  +
call sub_41A668  +
add esp 8 +
test eax eax +
jz loc_408D4B  +
push 3Dh  +
lea ecx [ebp+lpText] +
push ecx  +
call sub_41A624  +
add esp 8 +
test eax eax +
jnz loc_408D1A  +
push 3Ah  +
lea edx [ebp+lpText] +
push edx  +
call sub_41A624  +
add esp 8 +
test eax eax +
jz loc_408D4B  +
mov eax [ebp+lpText] +
push eax  +
call sub_409140  +
push 10h  +
mov ebx ds:lpWindowName +
push ebx  +
mov esi [ebp+lpText] +
mov edx ds:hWndParent +
push esi  +
push edx  +
call MessageBoxA  +
add esp 4 +
jmp loc_408FAE  +
push offset aMessage  +
lea ecx [ebp+lpText] +
push ecx  +
call sub_41A668  +
add esp 8 +
test eax eax +
jz loc_408E0A  +
push 3Dh  +
lea edx [ebp+lpText] +
push edx  +
call sub_41A624  +
add esp 8 +
test eax eax +
jnz loc_408D91  +
push 3Ah  +
lea ecx [ebp+lpText] +
push ecx  +
call sub_41A624  +
add esp 8 +
test eax eax +
jz loc_408E0A  +
mov edx [ebp+lpText] +
push edx  +
call sub_409140  +
push 40h  +
mov ecx ds:lpWindowName +
push ecx  +
push offset aActivationMess  +
mov edx ds:hWndParent +
push edx  +
call MessageBoxA  +
push offset asc_421A10  +
lea ecx [ebp+var_1958] +
lea edx [ebp+lpText] +
push ecx  +
push edx  +
call sub_41A81C  +
add esp 10h +
push 0Ah  +
push 400h  +
lea ecx [ebp+var_1DF8] +
mov [ebp+lpText] ecx +
push ecx  +
lea ecx [ebp+var_19A8] +
call sub_40D860  +
lea esi [eax+4] +
mov edx [esi] +
mov ecx [edx+4] +
cmp dword ptr [ecx+esi+0Ch] 0 +
jnz loc_408FAE  +
jmp loc_408CD8  +
push offset aActivate_0  +
lea edx [ebp+lpText] +
push edx  +
call sub_41A668  +
add esp 8 +
test eax eax +
jz loc_408DD3  +
push 3Dh  +
lea ecx [ebp+lpText] +
push ecx  +
call sub_41A624  +
add esp 8 +
test eax eax +
jnz loc_408E4C  +
push 3Ah  +
lea edx [ebp+lpText] +
push edx  +
call sub_41A624  +
add esp 8 +
test eax eax +
jz loc_408DD3  +
push offset asc_421A10  +
lea ecx [ebp+var_1154] +
lea edx [ebp+lpText] +
push ecx  +
push edx  +
call sub_41A81C  +
add esp 0Ch +
mov esi 1 +
mov ecx [ebp+arg_0] +
push 0  +
call sub_408304  +
test eax eax +
jz loc_408E8B  +
mov edx [ebp+arg_0] +
mov eax [edx+4E0h] +
test eax eax +
jz loc_408E8B  +
test ebx ebx +
jnz loc_408E8D  +
xor esi esi +
test esi esi +
jz loc_408FAE  +
mov ecx [ebp+arg_0] +
cmp byte ptr [ecx+0C4h] 0 +
jz loc_408EA8  +
mov esi offset aSoftwareLabc_0 +
jmp loc_408EAD  +
mov esi offset aSoftwareLabcen +
push esi  +
push 80000002h  +
mov [ebp+var_950] offset off_421B54 +
lea ecx [ebp+var_950] +
call sub_419BFC  +
mov edx [ebp+arg_0] +
lea ecx [ebp+var_4C8] +
add edx 24h +
push edx  +
push offset aS_4  +
push ecx  +
call sub_40A2B4  +
add esp 0Ch +
lea edx [ebp+var_8C8] +
lea ecx [ebp+var_1154] +
push 400h  +
push edx  +
push ecx  +
call sub_407ACC  +
add esp 0Ch +
mov ebx eax +
test eax eax +
jg loc_408F1C  +
mov ecx [ebp+arg_0] +
call sub_408280  +
push eax  +
push offset aErrorConvert_1  +
call sub_408028  +
add esp 8 +
jmp loc_408F4D  +
mov edx [ebp+arg_0] +
cmp byte ptr [edx+0C4h] 0 +
jz loc_408F4D  +
lea ecx [ebp+var_8C8] +
push ebx  +
push ecx  +
push 3  +
push offset aActivationkey  +
lea edx [ebp+var_4C8] +
push edx  +
mov edx [ebp+var_950] +
lea ecx [ebp+var_950] +
call dword ptr [edx+20h]  +
push 40h  +
mov eax ds:lpWindowName +
push eax  +
push offset aActivationComp  +
mov ebx ds:hWndParent +
push ebx  +
call MessageBoxA  +
lea ecx [ebp+var_950] +
call sub_419BBC  +
jmp loc_408FAE  +
call GetLastError  +
push eax  +
push offset aFailedToReceiv  +
lea eax [ebp+var_400] +
push eax  +
call sub_40A2B4  +
push 10h  +
mov ebx ds:lpWindowName +
lea esi [ebp+var_400] +
mov ecx ds:hWndParent +
push ebx  +
push esi  +
push ecx  +
call MessageBoxA  +
add esp 0Ch +
jmp loc_408FC4  +
lea ecx [ebp+var_19F0] +
call sub_409028  +
mov eax 1 +
mov [ebp+var_1292C] eax +
push offset aClosingInterne  +
mov edx [ebp+hDlg] +
push edx  +
call sub_409218  +
add esp 8 +
cmp [ebp+hInternet] 0 +
jz loc_408FEE  +
mov ecx [ebp+hInternet] +
push ecx  +
call InternetCloseHandle  +
test edi edi +
jz loc_408FF9  +
push edi  +
call InternetCloseHandle  +
mov edi [ebp+hDlg] +
test edi edi +
jz loc_40900A  +
push edi  +
call DestroyWindow  +
push 1  +
mov eax ds:hWndParent +
push eax  +
call EnableWindow  +
mov eax [ebp+var_1292C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 8 +
mov [ebp+var_4] ecx +
call sub_40CD30  +
mov eax [ebp+var_4] +
lea ecx [eax+58h] +
call sub_40D238  +
mov esp ebp +
pop ebp  +
retn   +
***
push eax  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov ecx [ebp+arg_4] +
mov edi esi +
dec ecx  +
jz loc_4090B5  +
cmp [esi] bl +
jz loc_4090B5  +
mov [ebp+var_4] ecx +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_409088  +
push 80h  +
movsx ecx byte ptr [ebx+esi] +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_4090A9  +
jmp loc_409099  +
xor ecx ecx +
mov edx ds:off_421F98 +
mov cl [ebx+esi] +
test byte ptr [edx+ecx*2] 80h +
jz loc_4090A9  +
movsx ecx byte ptr [ebx+esi] +
push ecx  +
call sub_40D3E8  +
mov [edi] al +
inc edi  +
add esp 4 +
inc ebx  +
cmp [ebp+var_4] ebx +
jbe loc_4090B5  +
cmp byte ptr [ebx+esi] 0 +
jnz loc_409063  +
mov byte ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_421B10 +
lea edi [ebp+SystemTime] +
movs   +
movs   +
movs   +
movs   +
lea eax [ebp+FileTime] +
lea ecx [ebp+SystemTime] +
push eax  +
push ecx  +
call SystemTimeToFileTime  +
test eax eax +
mov [ebp+var_28] eax +
jz loc_40912A  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov eax [ebx] +
mov edx [ebx+4] +
mov [ebp+var_C] edx +
mov [ebp+var_10] eax +
mov eax [ebp+FileTime.dwLowDateTime] +
mov edx [ebp+FileTime.dwHighDateTime] +
sub [ebp+var_10] eax +
mov eax [ebp+var_10] +
sbb [ebp+var_C] edx +
mov edx [ebp+var_C] +
mov ebx 989680h +
xor ecx ecx +
call sub_409608  +
pop edi  +
pop esi  +
mov [ebp+var_10] eax +
mov edi [ebp+arg_4] +
mov esi [ebp+var_10] +
mov [ebp+var_C] edx +
mov [edi] esi +
jmp loc_409134  +
mov edx [ebp+arg_4] +
mov esi 0FFFFFFFFh +
mov [edx] esi +
mov eax [ebp+var_28] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov ecx [ebp+arg_0] +
mov edx ecx +
cmp byte ptr [ecx] 0 +
jz loc_4091D9  +
mov al [ecx] +
test al al +
jz loc_409164  +
cmp al 5Ch +
jz loc_409164  +
mov al [ecx] +
inc ecx  +
mov [edx] al +
inc edx  +
jmp loc_409152  +
cmp al 5Ch +
jnz loc_4091D0  +
inc ecx  +
movsx eax byte ptr [ecx] +
cmp eax 61h +
jz loc_409196  +
cmp eax 62h +
jz loc_40919C  +
cmp eax 66h +
jz loc_4091A2  +
cmp eax 6Eh +
jz loc_4091A8  +
cmp eax 72h +
jz loc_4091AE  +
cmp eax 74h +
jz loc_4091B4  +
cmp eax 76h +
jz loc_4091BA  +
cmp eax 5Ch +
jz loc_4091C0  +
jmp loc_4091C6  +
mov byte ptr [edx] 7 +
inc edx  +
jmp loc_4091CF  +
mov byte ptr [edx] 8 +
inc edx  +
jmp loc_4091CF  +
mov byte ptr [edx] 0Ch +
inc edx  +
jmp loc_4091CF  +
mov byte ptr [edx] 0Ah +
inc edx  +
jmp loc_4091CF  +
mov byte ptr [edx] 0Dh +
inc edx  +
jmp loc_4091CF  +
mov byte ptr [edx] 9 +
inc edx  +
jmp loc_4091CF  +
mov byte ptr [edx] 0Bh +
inc edx  +
jmp loc_4091CF  +
mov byte ptr [edx] 5Ch +
inc edx  +
jmp loc_4091CF  +
mov byte ptr [edx] 5Ch +
inc edx  +
mov bl [ecx] +
mov [edx] bl +
inc edx  +
inc ecx  +
cmp byte ptr [ecx] 0 +
jnz loc_409152  +
mov byte ptr [edx] 0 +
pop ebx  +
pop ebp  +
retn   +
***
push eax  +
push offset String  +
push 0  +
push offset sub_4092A8  +
mov eax [ebp+hWndParent] +
push eax  +
push 100h  +
mov ecx ds:hInstance +
push ecx  +
call CreateDialogParamA  +
mov [ebp+var_4] eax +
push eax  +
call SetWindowTextA  +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 20h +
push ebx  +
push esi  +
mov ebx [ebp+hDlg] +
mov esi [ebp+lpString] +
test ebx ebx +
jz loc_4092A0  +
test esi esi +
jz loc_409242  +
push esi  +
push 200h  +
push ebx  +
call GetDlgItem  +
push eax  +
call SetWindowTextA  +
cmp esi 1 +
sbb ecx ecx +
and cl 0F8h +
add ecx 8 +
push ecx  +
push ebx  +
call ShowWindow  +
cmp esi 1 +
sbb edx edx +
inc edx  +
push edx  +
push ebx  +
call EnableWindow  +
push 1  +
push 0  +
push 0  +
push 0  +
lea ecx [ebp+Msg] +
push ecx  +
call PeekMessageA  +
test eax eax +
jz loc_4092A0  +
lea eax [ebp+Msg] +
push eax  +
call TranslateMessage  +
lea ebx [ebp+Msg] +
push ebx  +
call DispatchMessageA  +
push 1  +
push 0  +
push 0  +
push 0  +
push ebx  +
call PeekMessageA  +
test eax eax +
jnz loc_409279  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebp esp +
pop ebp  +
retn 10h  +
***
push ebx  +
push ebx  +
mov ebp esp +
mov ds:dword_426608 eax +
mov ecx offset dword_426608 +
call sub_40938C  +
mov ds:dword_4265F4 offset off_421B8C +
mov ecx offset dword_4265F4 +
call sub_40938C  +
pop ebp  +
retn   +
***
mov ebp esp +
push 0  +
call sub_409364  +
mov eax offset off_421B8C +
push 0  +
mov ds:dword_4265F4 eax +
mov ecx offset dword_426608 +
call sub_409364  +
mov ds:dword_426608 offset off_421B8C +
push offset sub_4092F4  +
call sub_4096D4  +
add esp 4 +
pop ebp  +
retn   +
***
mov edx ecx +
mov dword ptr [ecx] offset off_421B90 +
xor eax eax +
push ebx  +
mov [edx+0Ch] eax +
mov [edx+4] eax +
mov ebx [esp+4+arg_0] +
test ebx ebx +
jnz loc_40937F  +
mov bl 64h +
mov [edx+10h] eax +
mov [edx+8] ebx +
pop ebx  +
mov eax ecx +
retn 4  +
***
mov dword ptr [ecx] offset off_421B90 +
mov eax [ebx+4] +
test eax eax +
jle loc_4093A8  +
mov eax [ebx+10h] +
push eax  +
call sub_40972C  +
add esp 4 +
xor ecx ecx +
mov [ebx+0Ch] ecx +
mov [ebx+4] ecx +
mov [ebx+10h] ecx +
pop ebx  +
retn   +
***
push esi  +
mov ebx ecx +
mov esi [esp+arg_4] +
cmp esi 0FFFFFFFFh +
jz loc_4093CB  +
cmp [ebx+0Ch] esi +
jge loc_4093CE  +
mov esi [ebx+0Ch] +
test esi esi +
js loc_409425  +
cmp [ebx+0Ch] esi +
jl loc_409425  +
inc dword ptr [ebx+0Ch]  +
mov edx [ebx+0Ch] +
cmp edx [ebx+4] +
jle loc_4093FE  +
mov edx [ebx+8] +
add [ebx+4] edx +
mov edx [ebx+4] +
shl edx 2 +
push edx  +
mov edx [ebx+10h] +
push edx  +
call sub_40B310  +
mov [ebx+10h] eax +
add esp 8 +
mov ecx [ebx+0Ch] +
mov edx [ebx+10h] +
dec ecx  +
sub ecx esi +
shl ecx 2 +
push ecx  +
lea ecx [edx+esi*4] +
push ecx  +
lea edx [ecx+4] +
push edx  +
call sub_40B020  +
mov edx [ebx+10h] +
mov ecx [esp+0Ch+arg_0] +
mov [edx+esi*4] ecx +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
pop ecx  +
retn 8  +
***
push esi  +
push esi  +
mov ebx ecx +
xor esi esi +
cmp [ebx+0Ch] esi +
jle loc_409493  +
mov ecx [ebx+10h] +
mov edx [ecx+esi*4] +
mov ecx ebx +
push edx  +
mov edx [ebx] +
call dword ptr [edx]  +
inc esi  +
cmp [ebx+0Ch] esi +
jg loc_409480  +
mov dword ptr [ebx+0Ch] 0 +
pop esi  +
pop ebx  +
pop eax  +
retn   +
***
mov eax [esp+arg_0] +
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset unk_421B98  +
push offset sub_40983C  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push eax  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_18] esp +
mov [ebp+var_4] 0 +
jmp loc_4094FE  +
push dword ptr [ebp-14h]  +
call sub_40DB9C  +
add esp 4 +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFFh +
push 1  +
call loc_40DCA4  +
call sub_40DCB0  +
mov eax esp +
mov ds:dword_4285E4 eax +
call sub_40DCE4  +
push 0  +
call GetModuleHandleA  +
mov ds:dword_4285E8 eax +
call sub_40DE44  +
call sub_40DFBC  +
call GetCommandLineA  +
mov ds:dword_4285E0 eax +
call sub_409918  +
call sub_409A4C  +
call sub_409BD0  +
call sub_409EC0  +
push 0Ah  +
push ds:dword_4285E0  +
push 0  +
push ds:dword_4285E8  +
call sub_402010  +
push eax  +
call sub_40DB00  +
mov [ebp+var_4] 0FFFFFFFFh +
add esp 4 +
mov eax [ebp+var_10] +
mov large fs:0 eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
retn   +
***
mov eax offset sub_40DFF8 +
mov ecx offset sub_40E7D8 +
mov edx offset sub_40EB20 +
mov ds:dword_4285F8 eax +
mov ds:dword_4285F4 ecx +
push ebx  +
mov ebx offset sub_40F36C +
mov ds:dword_4285F0 edx +
mov ds:dword_4285EC ebx +
pop ebx  +
retn   +
***
test ecx ecx +
jnz loc_4095BC  +
test edx edx +
jnz loc_4095CA  +
mul  ebx +
retn   +
***
test edx edx +
jnz loc_4095D6  +
xchg eax ecx +
mul  ecx +
xchg eax ecx +
mul  ebx +
add edx ecx +
retn   +
***
mov ecx eax +
mov eax edx +
mul  ebx +
xchg eax ecx +
mul  ebx +
add edx ecx +
retn   +
***
push esi  +
mov esi edx +
xchg eax ecx +
mul  ecx +
xchg eax esi +
mul  ebx +
add esi eax +
mov eax ecx +
mul  ebx +
add edx esi +
pop esi  +
retn   +
***
test edx edx +
jnz loc_4095F6  +
div  ebx +
mov ebx edx +
mov edx ecx +
retn   +
***
test ecx ecx +
jz loc_4095EA  +
push ebp  +
mov ebp 1 +
test ecx ecx +
js loc_40962F  +
jnz loc_409628  +
add ebp 8 +
mov ch cl +
mov cl bh +
mov bh bl +
xor bl bl +
test ecx ecx +
js loc_40962F  +
nop   +
inc ebp  +
shl ebx 1 +
rcl ecx 1 +
jno loc_409628  +
mov esi ecx +
mov edi ebx +
mov ecx edx +
mov ebx eax +
xor eax eax +
cdq   +
cmp esi ecx +
ja loc_409655  +
jb loc_409650  +
cmp edi ebx +
ja loc_409655  +
sub ebx edi +
sbb ecx esi +
stc   +
rcl eax 1 +
rcl edx 1 +
shr esi 1 +
rcr edi 1 +
dec ebp  +
jnz loc_40963A  +
pop ebp  +
retn   +
***
mov eax 0FFFFFFFFh +
cdq   +
xor ecx ecx +
mov ebx ecx +
pop ebp  +
retn   +
***
test edx edx +
jns loc_40966E  +
neg edx  +
neg eax  +
sbb edx 0 +
test ecx ecx +
jns loc_4096A9  +
neg ecx  +
neg ebx  +
sbb ecx 0 +
call sub_409608  +
neg ecx  +
neg ebx  +
sbb ecx 0 +
retn   +
call sub_409608  +
neg ecx  +
neg ebx  +
sbb ecx 0 +
neg edx  +
neg eax  +
sbb edx 0 +
retn   +
***
cmp edx ecx +
jnz locret_4096D0  +
push edx  +
xor edx edx +
cmp eax ebx +
jz loc_4096CF  +
ja loc_4096CE  +
dec edx  +
pop edx  +
retn   +
***
inc edx  +
pop edx  +
retn   +
***
jnz loc_4096E8  +
add esp 4 +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edx 1 +
inc ds:word_428608[edx*2]  +
jz loc_40974B  +
push edx  +
call sub_40DE00  +
add esp 4 +
push [ebp+arg_0]  +
mov ecx ds:dword_422AF0 +
call sub_40F930  +
mov edx 1 +
dec ds:word_428608[edx*2]  +
js loc_409772  +
push edx  +
call sub_40DE20  +
add esp 4 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push [esp+8+arg_0]  +
jz loc_4097D3  +
mov [edi] eax +
mov [edi+4] eax +
mov [edi+8] eax +
mov [edi+0Ch] eax +
mov [edi+10h] eax +
mov [edi+14h] eax +
mov [edi+18h] eax +
mov [edi+1Ch] eax +
add edi 20h +
dec ecx  +
jnz loc_4097B6  +
pop ecx  +
and ecx 7 +
jz locret_4097E1  +
mov [edi] eax +
add edi 4 +
dec ecx  +
jnz loc_4097D9  +
retn   +
***
xor eax eax +
sub esp 1Ch +
mov eax [esp+1Ch+arg_0] +
push ebx  +
mov ebx [esp+20h+arg_4] +
push ebp  +
push esi  +
push edi  +
test dword ptr [eax+4] 6 +
jz loc_409866  +
push 1  +
push 0FFFFFFFFh  +
push ebx  +
call sub_40FA60  +
add esp 0Ch +
jmp loc_409909  +
mov [esp+2Ch+var_8] eax +
mov ecx [esp+2Ch+arg_8] +
lea edx [esp+2Ch+var_8] +
mov [esp+2Ch+var_4] ecx +
mov ebp [ebx+0Ch] +
cmp ebp 0FFFFFFFFh +
mov [ebx-4] edx +
jz loc_409909  +
mov esi ebp +
lea esi [esi+ebp*2] +
lea esi ds:0[esi*4] +
add esi [ebx+8] +
lea edi [esp+2Ch+var_18] +
movs   +
movs   +
movs   +
cmp [esp+2Ch+var_14] 0 +
jz loc_4098FA  +
lea eax [ebx+10h] +
push eax  +
push [esp+30h+var_14]  +
call sub_40F9F8  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jz loc_4098C2  +
test eax eax +
jz loc_4098FA  +
cmp eax 1 +
jz loc_4098CC  +
jmp loc_4098FA  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
pop ebx  +
add esp 1Ch +
retn   +
push 0  +
push ebx  +
call sub_40FA38  +
push 1  +
push ebp  +
push ebx  +
call sub_40FA60  +
lea ecx [ebx+10h] +
push ecx  +
push [esp+44h+var_10]  +
call sub_40F9F8  +
add esp 1Ch +
mov eax 1 +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 1Ch +
retn   +
cmp [esp+2Ch+var_18] 0FFFFFFFFh +
mov ebp [esp+2Ch+var_18] +
jnz loc_409885  +
pop edi  +
mov eax 1 +
pop esi  +
pop ebp  +
pop ebx  +
add esp 1Ch +
retn   +
***
mov eax offset unk_42675C +
mov ds:dword_4285FC eax +
mov dword ptr [eax+4] offset unk_421C1B +
retn   +
***
xor edx edx +
push eax  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov eax ds:dword_4285FC +
mov esi [eax+edx*4] +
test esi esi +
jz loc_40995E  +
cmp [esi+18h] ecx +
jnz loc_409955  +
mov edi ds:dword_4285FC +
mov ebx [edi+edx*4] +
jmp loc_4099BE  +
inc edx  +
cmp edx 400h +
jb loc_409939  +
cmp edx 400h +
jnz loc_40996F  +
push 0Bh  +
call sub_410018  +
jmp loc_4099BE  +
mov [esp+14h+arg_0] ecx +
mov [esp+14h+var_4] edx +
push 1  +
push 2A8h  +
call sub_410784  +
add esp 8 +
mov ebx eax +
test eax eax +
jnz loc_409995  +
push 0Ch  +
call sub_410018  +
jmp loc_4099BE  +
mov ecx [esp+14h+var_4] +
mov edx ds:dword_4285FC +
mov edi [esp+14h+arg_0] +
mov [edx+ecx*4] ebx +
mov eax [esp+14h+arg_4] +
mov esi [esp+14h+arg_8] +
mov [ebx+18h] edi +
mov ecx [esp+14h+arg_C] +
mov [ebx+4] eax +
mov [ebx+8] esi +
mov [ebx+1Ch] ecx +
pop edi  +
mov eax ebx +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
push edx  +
call GetCurrentThreadId  +
mov ecx 401h +
mov ebx ds:dword_4285FC +
dec ecx  +
jz loc_4099F2  +
mov edx [ebx] +
add ebx 4 +
test edx edx +
jz loc_4099DB  +
cmp eax [edx+18h] +
jnz loc_4099DB  +
mov eax edx +
pop edx  +
pop ecx  +
pop ebx  +
retn   +
push ecx  +
push ecx  +
push ecx  +
push eax  +
call sub_40992C  +
add esp 10h +
jmp loc_4099EE  +
***
add eax 10h +
pop ecx  +
retn   +
***
add eax 8Ch +
pop ecx  +
retn   +
***
call sub_4099C8  +
call sub_4099C8  +
movzx eax word ptr [eax+4Ch] +
retn   +
***
jz loc_409A5C  +
call ds:off_423CC4  +
pop eax  +
retn   +
***
sub esp 110h +
push ebx  +
push esi  +
push edi  +
cmp ds:dword_428600 0 +
jz loc_409BC0  +
mov eax ds:dword_421C05 +
mov ecx ds:dword_421C09 +
mov esi [ecx+eax*4] +
cmp byte ptr [esi] 22h +
jz loc_409BC0  +
push 2Ah  +
push esi  +
call sub_40FAF0  +
add esp 8 +
test eax eax +
jnz loc_409AAF  +
push 3Fh  +
push esi  +
call sub_40FAF0  +
add esp 8 +
test eax eax +
jz loc_409BC0  +
xor edi edi +
xor ebx ebx +
cmp [esi] bl +
jz loc_409AEB  +
mov dl [esi+ebx] +
cmp dl 3Ah +
jz loc_409AC9  +
cmp dl 5Ch +
jz loc_409AC9  +
cmp dl 2Fh +
jnz loc_409ACC  +
lea edi [ebx+1] +
movsx ecx byte ptr [esi+ebx] +
push ecx  +
call sub_40FC98  +
add esp 4 +
test eax eax +
jz loc_409AE4  +
inc ebx  +
cmp byte ptr [esi+ebx] 0 +
jz loc_409AEB  +
inc ebx  +
cmp byte ptr [esi+ebx] 0 +
jnz loc_409AB7  +
test edi edi +
jz loc_409AFE  +
push edi  +
push esi  +
lea edx [esp+124h+var_108] +
push edx  +
call sub_40B020  +
add esp 0Ch +
mov byte ptr [esp+edi+11Ch+var_108] 0 +
push 0  +
dec ds:dword_421C05  +
push esi  +
call sub_40FC2C  +
add esp 8 +
test eax eax +
mov [esp+11Ch+var_4] eax +
jz loc_409BC0  +
mov ecx [esp+11Ch+var_4] +
add ecx 1Eh +
push ecx  +
mov [esp+120h+var_10C] ecx +
call sub_40A110  +
add esp 4 +
lea edx [edi+eax+1] +
push edx  +
call sub_40F9A0  +
add esp 4 +
mov ebx eax +
test eax eax +
jz loc_409B91  +
lea ecx [esp+11Ch+var_108] +
push ecx  +
push ebx  +
call sub_40A0AC  +
mov edx [esp+124h+var_10C] +
lea ecx [ebx+edi] +
push edx  +
push ecx  +
call sub_40A0AC  +
inc ds:dword_421C05  +
mov edx ds:dword_421C05 +
lea ecx ds:4[edx*4] +
push ecx  +
push ds:dword_421C09  +
call sub_40B310  +
mov ds:dword_421C09 eax +
add esp 18h +
test eax eax +
jnz loc_409B9D  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 110h +
retn   +
mov edx ds:dword_421C05 +
mov ecx ds:dword_421C09 +
mov [ecx+edx*4] ebx +
call sub_40FC74  +
test eax eax +
mov [esp+11Ch+var_4] eax +
jnz loc_409B23  +
pop edi  +
mov eax 1 +
pop esi  +
pop ebx  +
add esp 110h +
retn   +
***
sub esp 0Ch +
push ebx  +
push ebp  +
push esi  +
push edi  +
push ds:dword_4285E0  +
call sub_409E58  +
mov ds:dword_4285E0 eax +
add esp 4 +
push eax  +
call sub_409D98  +
add esp 4 +
mov ebx eax +
test eax eax +
jz loc_409D82  +
xor eax eax +
lea ecx ds:4[eax*4] +
mov ds:dword_421C05 eax +
push ecx  +
call sub_40F9A0  +
mov ds:dword_421C09 eax +
add esp 4 +
test eax eax +
jz loc_409D82  +
mov edi ebx +
mov esi ebx +
mov edx ds:dword_421C05 +
mov ecx ds:dword_421C09 +
xor ebx ebx +
mov [ecx+edx*4] esi +
movsx edx byte ptr [edi] +
cmp edx ebx +
jz loc_409D5A  +
cmp edx 20h +
jz loc_409C4D  +
cmp edx 9 +
jz loc_409C4D  +
jmp loc_409C50  +
inc edi  +
jmp loc_409C25  +
mov [esp+1Ch+var_8] bl +
mov [esp+1Ch+var_4] bl +
xor ebx ebx +
cmp byte ptr [edi] 22h +
jnz loc_409C64  +
mov [esp+1Ch+var_8] 1 +
mov dl [esp+1Ch+var_7] +
mov dl [edi] +
inc edi  +
movsx eax dl +
cmp eax 22h +
jz loc_409C86  +
cmp eax 20h +
jz loc_409CC4  +
cmp eax 9 +
jz loc_409CC4  +
test eax eax +
jz loc_409CCB  +
jmp loc_409D21  +
mov [esp+1Ch+var_7] dl +
mov eax ebx +
cdq   +
xor eax edx +
and eax 1 +
add edx eax +
mov ebp edx +
mov ecx ebx +
test ebx ebx +
jns loc_409C9F  +
inc ecx  +
sar ecx 1 +
test ecx ecx +
mov ebx ecx +
jle loc_409CB0  +
dec esi  +
dec ebx  +
test ebx ebx +
mov byte ptr [esi] 0 +
jg loc_409CA7  +
mov dl [esp+1Ch+var_7] +
test ebp ebp +
jz loc_409CBD  +
mov [esi-1] dl +
jmp loc_409D2E  +
xor [esp+1Ch+var_4] 1 +
jmp loc_409D2E  +
cmp [esp+1Ch+var_4] 0 +
jnz loc_409D21  +
mov [esp+1Ch+var_7] dl +
mov bl [esp+1Ch+var_8] +
mov byte ptr [esi] 0 +
inc esi  +
test bl bl +
jnz loc_409CE8  +
call sub_409A60  +
test eax eax +
jz loc_409D82  +
inc ds:dword_421C05  +
mov ecx ds:dword_421C05 +
lea edx ds:4[ecx*4] +
push edx  +
push ds:dword_421C09  +
call sub_40B310  +
mov ds:dword_421C09 eax +
add esp 8 +
test eax eax +
jz loc_409D82  +
mov dl [esp+1Ch+var_7] +
test dl dl +
jnz loc_409C25  +
jmp loc_409D5A  +
cmp dl 5Ch +
jnz loc_409D29  +
inc ebx  +
jmp loc_409D2B  +
xor ebx ebx +
mov [esi] dl +
inc esi  +
mov [esp+1Ch+var_7] dl +
movsx edx [esp+1Ch+var_7] +
push edx  +
call sub_40FC98  +
add esp 4 +
test eax eax +
jz loc_409C64  +
mov ecx edi +
mov dl [ecx] +
inc edi  +
mov [esi] dl +
inc esi  +
cmp byte ptr [esi-1] 0 +
jnz loc_409C64  +
mov eax ds:dword_421C05 +
mov ebx ds:dword_421C09 +
mov dword ptr [ebx+eax*4] 0 +
mov esi ds:dword_421C09 +
mov ecx [esi] +
mov ds:dword_421BC2 ecx +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 0Ch +
retn   +
push offset aOutOfMemory  +
call sub_40FC90  +
add esp 4 +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 0Ch +
retn   +
***
sub esp 108h +
xor edx edx +
xor ebx ebx +
movsx eax byte ptr [ecx] +
cmp eax 22h +
jz loc_409E79  +
test eax eax +
jz loc_409E82  +
cmp eax 20h +
jz loc_409E89  +
cmp eax 9 +
jz loc_409E89  +
jmp loc_409E92  +
xor edx 1 +
inc ecx  +
jmp loc_409E93  +
mov ebx 1 +
jmp loc_409E93  +
test edx edx +
jnz loc_409E92  +
mov ebx 1 +
inc ecx  +
test ebx ebx +
jz loc_409E61  +
mov dl [ecx] +
cmp dl 20h +
jg loc_409EAE  +
test dl dl +
jz loc_409EAE  +
inc ecx  +
mov bl [ecx] +
cmp bl 20h +
jg loc_409EAE  +
test bl bl +
jnz loc_409EA2  +
pop ebx  +
mov eax ecx +
retn   +
***
call GetCurrentThreadId  +
cmp edi offset off_4265DC +
mov edi offset off_4265EC +
cmp edi offset dword_4265F4 +
jnb loc_409FAA  +
mov ecx [edi] +
add edi 4 +
jecxz loc_409F94  +
mov [edi-4] eax +
call ecx  +
jmp loc_409F94  +
call sub_40FCC4  +
push ds:dword_421BFD  +
call FreeEnvironmentStringsA  +
pop edi  +
retn   +
***
mov esi [esp+arg_0] +
mov edi [esp+arg_4] +
mov eax [esp+arg_8] +
shr eax 2 +
jz loc_40A01A  +
mov cl [esi] +
mov dl [edi] +
cmp cl dl +
jnz loc_40A052  +
test cl cl +
jz loc_40A04D  +
mov cl [esi+1] +
mov dl [edi+1] +
cmp cl dl +
jnz loc_40A052  +
test cl cl +
jz loc_40A04D  +
mov cl [esi+2] +
mov dl [edi+2] +
cmp cl dl +
jnz loc_40A052  +
test cl cl +
jz loc_40A04D  +
mov cl [esi+3] +
mov dl [edi+3] +
cmp cl dl +
jnz loc_40A052  +
test cl cl +
jz loc_40A04D  +
add esi 4 +
add edi 4 +
dec eax  +
jnz loc_409FDB  +
mov eax [esp+arg_8] +
and eax 3 +
jz loc_40A04D  +
mov cl [esi] +
mov dl [edi] +
cmp cl dl +
jnz loc_40A052  +
test cl cl +
jz loc_40A04D  +
dec eax  +
jz loc_40A04D  +
mov cl [esi+1] +
mov dl [edi+1] +
cmp cl dl +
jnz loc_40A052  +
test cl cl +
jz loc_40A04D  +
dec eax  +
jz loc_40A04D  +
mov cl [esi+2] +
mov dl [edi+2] +
cmp cl dl +
jnz loc_40A052  +
xor eax eax +
pop esi  +
pop edi  +
retn   +
sbb eax eax +
pop esi  +
or eax 1 +
pop edi  +
retn   +
***
mov ecx [esp+arg_0] +
mov ah 3 +
mov ecx [esp+arg_0] +
mov ah 3 +
test ah cl +
jnz loc_40A15D  +
mov eax [ecx] +
add ecx 4 +
test al al +
jz loc_40A13F  +
test ah ah +
jz loc_40A149  +
test eax 0FF0000h +
jz loc_40A153  +
test eax 0FF000000h +
jnz loc_40A11A  +
lea eax [ecx-1] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
lea eax [ecx-4] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
lea eax [ecx-3] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
lea eax [ecx-2] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
mov al [ecx] +
inc ecx  +
test al al +
jnz loc_40A116  +
lea eax [ecx-1] +
mov ecx [esp+arg_0] +
sub eax ecx +
retn   +
***
mov eax [esp+arg_0] +
mov cl [esp+arg_4] +
test al 3 +
jnz loc_40A1B5  +
mov edx [eax] +
add eax 4 +
cmp dl cl +
jz loc_40A1A7  +
test dl dl +
jz loc_40A1A4  +
cmp dh cl +
jz loc_40A1AB  +
test dh dh +
jz loc_40A1A4  +
shr edx 10h +
cmp dl cl +
jz loc_40A1AF  +
test dl dl +
jz loc_40A1A4  +
cmp dh cl +
jz loc_40A1B3  +
test dh dh +
jnz loc_40A17C  +
xor eax eax +
retn   +
sub eax 4 +
retn   +
sub eax 3 +
retn   +
sub eax 2 +
retn   +
dec eax  +
retn   +
mov dl [eax] +
inc eax  +
cmp dl cl +
jz loc_40A1B3  +
test dl dl +
jnz loc_40A178  +
xor eax eax +
retn   +
***
mov edx esi +
push edi  +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_4] +
lods   +
mov cl [edi] +
inc edi  +
cmp al cl +
jnz loc_40A1EE  +
test al al +
jnz loc_40A1DC  +
jmp loc_40A209  +
cmp al 41h +
jb loc_40A209  +
cmp al 5Ah +
ja loc_40A1F8  +
add al 20h +
cmp cl 41h +
jb loc_40A209  +
cmp cl 5Ah +
ja loc_40A205  +
add cl 20h +
cmp al cl +
jz loc_40A1DC  +
xor ah ah +
mov ch ah +
movzx eax ax +
movzx ecx cx +
sub eax ecx +
pop edi  +
mov esi edx +
pop ebp  +
retn   +
***
mov edi [esp+arg_4] +
push eax  +
mov ebx [esp+8+arg_0] +
push ebx  +
call sub_40FE78  +
push [esp+0Ch+arg_8]  +
push [esp+10h+arg_4]  +
push ebx  +
push offset sub_40C1B8  +
call sub_40A510  +
mov [esp+1Ch+var_4] eax +
push ebx  +
call sub_40FEF8  +
add esp 18h +
mov eax [esp+8+var_4] +
pop ebx  +
pop ecx  +
retn   +
***
mov ecx [esp+8] +
mov edx [ecx] +
inc edx  +
mov [ecx] edx +
dec edx  +
mov al [esp+4] +
mov [edx] al +
mov eax [esp+4] +
and eax 0FFh +
retn   +
***
push eax  +
push ebx  +
mov [esp+8+var_4] eax +
push [esp+8+arg_8]  +
push [esp+0Ch+arg_4]  +
lea ecx [esp+10h+arg_0] +
push ecx  +
push offset loc_40A298  +
call sub_40A510  +
add esp 10h +
mov ebx eax +
test eax eax +
jns loc_40A2F8  +
xor ebx ebx +
mov edx [esp+8+var_4] +
mov eax ebx +
mov byte ptr [edx+ebx] 0 +
pop ebx  +
pop ecx  +
retn   +
***
cmp dword ptr [eax+4] 0 +
sub esp 0Ch +
mov ecx [esp+0Ch+arg_0] +
push ebx  +
push esi  +
mov esi [esp+14h+arg_4] +
mov [esp+14h+var_8] ecx +
mov [esp+14h+var_4] esi +
push [esp+14h+arg_C]  +
push [esp+18h+arg_8]  +
lea edx [esp+1Ch+var_8] +
push edx  +
push offset sub_40A308  +
call sub_40A510  +
add esp 10h +
mov ebx eax +
test eax eax +
jns loc_40A36F  +
xor ebx ebx +
cmp [esp+14h+var_4] 0 +
jnz loc_40A385  +
test esi esi +
jz loc_40A37E  +
cmp ebx esi +
jz loc_40A38D  +
mov ebx 0FFFFFFFFh +
jmp loc_40A38D  +
mov eax [esp+14h+arg_0] +
mov byte ptr [eax+ebx] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
add esp 0Ch +
retn   +
***
sub esp 0Ch +
mov ecx [esp+0Ch+arg_0] +
push ebx  +
push esi  +
test ecx 10000h +
jz loc_40A3C8  +
mov ecx [esp+14h+arg_4] +
add dword ptr [ecx] 8 +
mov ebx [ecx] +
mov edx [ebx-4] +
mov eax [ebx-8] +
pop esi  +
pop ebx  +
add esp 0Ch +
retn 8  +
test ecx 200h +
jz loc_40A3F0  +
mov [esp+14h+arg_0] ecx +
mov ecx [esp+14h+arg_4] +
xor edx edx +
add dword ptr [ecx] 4 +
mov eax [ecx] +
mov esi [eax-4] +
mov [esp+14h+var_C] esi +
mov ecx [esp+14h+arg_0] +
mov [esp+14h+var_8] edx +
jmp loc_40A409  +
mov eax [esp+14h+arg_4] +
add dword ptr [eax] 4 +
mov edx [eax] +
mov ebx [edx-4] +
mov [esp+14h+var_C] ebx +
mov edx ebx +
sar edx 1Fh +
mov [esp+14h+var_8] edx +
test ecx 800h +
jz loc_40A43D  +
movsx eax word ptr [esp+14h+var_C] +
mov edx eax +
sar edx 1Fh +
mov [esp+14h+var_C] eax +
mov [esp+14h+var_8] edx +
test ecx 200h +
jz loc_40A46F  +
and [esp+14h+var_C] 0FFFFh +
and [esp+14h+var_8] 0 +
jmp loc_40A46F  +
test ecx 1000h +
jz loc_40A46F  +
movsx ebx byte ptr [esp+14h+var_C] +
mov edx ebx +
sar edx 1Fh +
mov [esp+14h+var_C] ebx +
mov [esp+14h+var_8] edx +
test ecx 200h +
jz loc_40A46F  +
and [esp+14h+var_C] 0FFh +
and [esp+14h+var_8] 0 +
mov edx [esp+14h+var_8] +
mov eax [esp+14h+var_C] +
pop esi  +
pop ebx  +
add esp 0Ch +
retn 8  +
***
mov eax [esp+arg_4] +
add dword ptr [eax] 4 +
mov ecx [eax] +
mov eax [ecx-4] +
retn 8  +
***
cmp [esp+arg_4] 0 +
xor eax eax +
mov ebx [esp+arg_4] +
test ecx ecx +
jle loc_40A4E6  +
cmp [ebx] al +
jz loc_40A4E6  +
inc eax  +
cmp eax ecx +
jge loc_40A4E6  +
cmp byte ptr [eax+ebx] 0 +
jnz loc_40A4DB  +
pop ebx  +
retn 8  +
***
xor eax eax +
sub esp 94h +
push ebx  +
lea eax [ebp+var_60] +
mov ecx [ebp+arg_8] +
push esi  +
push edi  +
mov [ebp+var_8C] 94h +
mov [ebp+var_30] eax +
mov [ebp+var_2C] 30h +
mov [ebp+var_88] 0 +
movsx ebx byte ptr [ecx] +
inc [ebp+arg_8]  +
test ebx ebx +
jz loc_40AF34  +
cmp ebx 25h +
jz loc_40A5CC  +
movzx eax bl +
mov esi ds:off_421F98 +
test word ptr [esi+eax*2] 8000h +
jz loc_40A59A  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
jz loc_40AF34  +
push [ebp+arg_4]  +
mov ecx ebx +
and ecx 0FFh +
push ecx  +
call [ebp+arg_0]  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jz loc_40AF41  +
inc [ebp+var_88]  +
mov edx [ebp+arg_8] +
movsx ebx byte ptr [edx] +
inc [ebp+arg_8]  +
push [ebp+arg_4]  +
mov eax ebx +
and eax 0FFh +
push eax  +
call [ebp+arg_0]  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jz loc_40AF41  +
inc [ebp+var_88]  +
mov esi [ebp+arg_8] +
movsx ebx byte ptr [esi] +
inc [ebp+arg_8]  +
test ebx ebx +
jnz loc_40A54E  +
jmp loc_40AF34  +
mov edi offset unk_421EC4 +
xor esi esi +
jmp loc_40A5DB  +
or esi 1 +
mov edx [ebp+arg_8] +
movsx ebx byte ptr [edx] +
mov eax ebx +
inc [ebp+arg_8]  +
cmp ebx 2Dh +
jz loc_40A5D5  +
cmp eax 2Bh +
jz loc_40A60E  +
cmp eax 20h +
jz loc_40A616  +
cmp eax 23h +
jz loc_40A61E  +
cmp eax 30h +
jz loc_40A626  +
cmp eax 2Ah +
jz loc_40A62E  +
test eax eax +
jz loc_40AF41  +
jmp loc_40A653  +
or esi 2 +
jmp loc_40A5DB  +
or esi 4 +
jmp loc_40A5DB  +
or esi 8 +
jmp loc_40A5DB  +
or esi 40h +
jmp loc_40A5DB  +
add [ebp+arg_C] 4 +
mov ecx [ebp+arg_C] +
mov edx [ecx-4] +
mov [ebp+var_6C] edx +
test edx edx +
jns loc_40A648  +
neg [ebp+var_6C]  +
or esi 1 +
mov ecx [ebp+arg_8] +
movsx ebx byte ptr [ecx] +
inc [ebp+arg_8]  +
jmp loc_40A68A  +
mov [ebp+var_6C] 0 +
push ebx  +
call sub_40FD50  +
add esp 4 +
test eax eax +
jz loc_40A68A  +
mov edx [ebp+var_6C] +
lea ecx [edx+edx*4] +
lea ecx [ebx+ecx*2-30h] +
mov [ebp+var_6C] ecx +
mov edx [ebp+arg_8] +
movsx ebx byte ptr [edx] +
inc [ebp+arg_8]  +
push ebx  +
call sub_40FD50  +
add esp 4 +
test eax eax +
jnz loc_40A667  +
mov [ebp+var_64] 0 +
cmp ebx 2Eh +
jnz loc_40A730  +
or esi 80h +
mov ecx [ebp+arg_8] +
movsx ebx byte ptr [ecx] +
inc [ebp+arg_8]  +
cmp ebx 2Ah +
jnz loc_40A6D5  +
add [ebp+arg_C] 4 +
mov ecx [ebp+arg_C] +
mov edx [ecx-4] +
mov [ebp+var_64] edx +
test edx edx +
jns loc_40A7DB  +
mov [ebp+var_64] 0 +
and esi 0FFFFFF7Fh +
jmp loc_40A7DB  +
push ebx  +
call sub_40FD50  +
add esp 4 +
test eax eax +
jz loc_40A730  +
mov edx [ebp+var_64] +
lea ecx [edx+edx*4] +
lea ecx [ebx+ecx*2-30h] +
mov [ebp+var_64] ecx +
mov edx [ebp+arg_8] +
movsx ebx byte ptr [edx] +
inc [ebp+arg_8]  +
push ebx  +
call sub_40FD50  +
add esp 4 +
test eax eax +
jnz loc_40A6E2  +
jmp loc_40A730  +
or esi 10h +
mov edx [ebp+arg_8] +
movsx ebx byte ptr [edx] +
inc [ebp+arg_8]  +
cmp ebx 6Ch +
jnz loc_40A730  +
and esi 0FFFFFFEFh +
or esi 10000h +
mov ecx [ebp+arg_8] +
movsx ebx byte ptr [ecx] +
inc [ebp+arg_8]  +
mov eax ebx +
cmp ebx 6Ch +
jz loc_40A707  +
cmp eax 68h +
jz loc_40A763  +
cmp eax 4Ch +
jz loc_40A78E  +
cmp eax 4Eh +
jz loc_40A79F  +
cmp eax 46h +
jz loc_40A7B3  +
cmp eax 6Ah +
jz loc_40A7C7  +
cmp eax 7Ah +
jz loc_40A7DB  +
cmp eax 74h +
jz loc_40A7DB  +
jmp loc_40A7E9  +
or esi 800h +
mov edx [ebp+arg_8] +
movsx ebx byte ptr [edx] +
inc [ebp+arg_8]  +
cmp ebx 68h +
jnz loc_40A730  +
and esi 0FFFFF7FFh +
or esi 1000h +
mov ecx [ebp+arg_8] +
movsx ebx byte ptr [ecx] +
inc [ebp+arg_8]  +
jmp loc_40A730  +
or esi 20h +
mov ecx [ebp+arg_8] +
movsx ebx byte ptr [ecx] +
inc [ebp+arg_8]  +
jmp loc_40A730  +
or esi 2000h +
mov edx [ebp+arg_8] +
movsx ebx byte ptr [edx] +
inc [ebp+arg_8]  +
jmp loc_40A730  +
or esi 4000h +
mov ecx [ebp+arg_8] +
movsx ebx byte ptr [ecx] +
inc [ebp+arg_8]  +
jmp loc_40A730  +
or esi 10000h +
mov edx [ebp+arg_8] +
movsx ebx byte ptr [edx] +
inc [ebp+arg_8]  +
jmp loc_40A730  +
mov ecx [ebp+arg_8] +
movsx ebx byte ptr [ecx] +
inc [ebp+arg_8]  +
jmp loc_40A730  +
mov [ebp+var_70] 0 +
mov eax ebx +
cmp ebx 73h +
jz loc_40A8BD  +
cmp eax 53h +
jz loc_40A8F5  +
cmp eax 25h +
jz loc_40A99C  +
cmp eax 63h +
jz loc_40A9B2  +
cmp eax 43h +
jz loc_40A9DD  +
cmp eax 64h +
jz loc_40AA4E  +
cmp eax 69h +
jz loc_40AA4E  +
cmp eax 62h +
jz loc_40AAA4  +
cmp eax 6Fh +
jz loc_40AAAD  +
cmp eax 75h +
jz loc_40AAC0  +
cmp eax 70h +
jz loc_40AAE4  +
cmp eax 58h +
jz loc_40AB0E  +
cmp eax 78h +
jz loc_40AB14  +
cmp eax 66h +
jz loc_40ACEC  +
cmp eax 46h +
jz loc_40ACEC  +
cmp eax 65h +
jz loc_40ACEC  +
cmp eax 45h +
jz loc_40ACEC  +
cmp eax 67h +
jz loc_40ACEC  +
cmp eax 47h +
jz loc_40ACEC  +
cmp eax 61h +
jz loc_40ACEC  +
cmp eax 41h +
jz loc_40ACEC  +
cmp eax 6Eh +
jz loc_40AD85  +
jmp loc_40AF41  +
test esi 10h +
jz loc_40A8DC  +
lea edx [ebp+arg_C] +
push edx  +
push esi  +
call sub_40A480  +
test eax eax +
mov [ebp+var_20] eax +
jnz loc_40A95F  +
jmp loc_40A956  +
lea edx [ebp+arg_C] +
or esi 800h +
push edx  +
push esi  +
call sub_40A480  +
test eax eax +
mov [ebp+var_24] eax +
jnz loc_40A917  +
jmp loc_40A90E  +
test esi 800h +
jz loc_40A93F  +
lea ecx [ebp+arg_C] +
push ecx  +
push esi  +
call sub_40A480  +
test eax eax +
mov [ebp+var_24] eax +
jnz loc_40A917  +
mov ecx ds:off_421EE8 +
mov [ebp+var_24] ecx +
test esi 80h +
jz loc_40A92F  +
push [ebp+var_24]  +
push [ebp+var_64]  +
call sub_40A4C8  +
mov [ebp+var_18] eax +
jmp loc_40A985  +
push [ebp+var_24]  +
call sub_40A110  +
mov [ebp+var_18] eax +
add esp 4 +
jmp loc_40A985  +
lea edx [ebp+arg_C] +
or esi 10h +
push edx  +
push esi  +
call sub_40A480  +
test eax eax +
mov [ebp+var_20] eax +
jnz loc_40A95F  +
mov ecx ds:off_421EDC +
mov [ebp+var_20] ecx +
test esi 80h +
jz loc_40A977  +
push [ebp+var_20]  +
push [ebp+var_64]  +
call sub_40A4EC  +
mov [ebp+var_18] eax +
jmp loc_40A985  +
push [ebp+var_20]  +
call sub_40FDE8  +
mov [ebp+var_18] eax +
add esp 4 +
test esi 10h +
jz loc_40ADCA  +
or esi 8000h +
jmp loc_40ADCA  +
mov byte ptr [ebp+var_60] 25h +
lea ecx [ebp+var_60] +
mov [ebp+var_24] ecx +
mov [ebp+var_18] 1 +
jmp loc_40ADCA  +
test esi 10h +
jnz loc_40A9E5  +
test esi 800h +
jnz loc_40AA04  +
add [ebp+arg_C] 4 +
mov edx [ebp+arg_C] +
mov cl [edx-4] +
mov byte ptr [ebp+var_60] cl +
lea edx [ebp+var_60] +
or esi 800h +
mov [ebp+var_24] edx +
jmp loc_40AA34  +
test esi 10h +
jz loc_40A9FC  +
add [ebp+arg_C] 4 +
mov edx [ebp+arg_C] +
mov cx [edx-4] +
mov word ptr [ebp+var_1C] cx +
lea edx [ebp+var_1C] +
mov [ebp+var_20] edx +
jmp loc_40AA34  +
test esi 800h +
jz loc_40AA19  +
add [ebp+arg_C] 4 +
mov ecx [ebp+arg_C] +
mov dl [ecx-4] +
mov byte ptr [ebp+var_60] dl +
lea ecx [ebp+var_60] +
mov [ebp+var_24] ecx +
jmp loc_40AA34  +
add [ebp+arg_C] 4 +
mov ecx [ebp+arg_C] +
mov dx [ecx-4] +
mov word ptr [ebp+var_1C] dx +
lea ecx [ebp+var_1C] +
or esi 10h +
mov [ebp+var_20] ecx +
test esi 10h +
jz loc_40AA42  +
or esi 8000h +
mov [ebp+var_18] 1 +
jmp loc_40ADCA  +
lea ecx [ebp+arg_C] +
push ecx  +
mov [ebp+var_14] 0Ah +
push esi  +
call sub_40A3A0  +
test edx edx +
mov [ebp+var_80] eax +
mov [ebp+var_7C] edx +
mov [ebp+var_78] eax +
mov [ebp+var_74] edx +
jg loc_40AA8F  +
jl loc_40AA75  +
test eax eax +
jnb loc_40AA8F  +
mov edx [ebp+var_7C] +
mov eax [ebp+var_80] +
neg edx  +
neg eax  +
mov ecx 1 +
sbb edx 0 +
mov [ebp+var_78] eax +
mov [ebp+var_74] edx +
jmp loc_40AA91  +
xor ecx ecx +
mov [ebp+var_28] ecx +
push [ebp+var_28]  +
push esi  +
call sub_40A490  +
mov edi eax +
jmp loc_40AB7A  +
mov [ebp+var_14] 2 +
jmp loc_40AAC7  +
mov edx 8 +
test edx esi +
mov [ebp+var_14] edx +
jz loc_40AAC7  +
mov edi offset unk_421EEC +
jmp loc_40AAC7  +
mov [ebp+var_14] 0Ah +
lea ecx [ebp+arg_C] +
mov edx esi +
or edx 200h +
push ecx  +
push edx  +
call sub_40A3A0  +
mov [ebp+var_78] eax +
mov [ebp+var_74] edx +
jmp loc_40AB7A  +
and esi 0FFFFF7FFh +
test esi 80h +
jnz loc_40AB08  +
mov [ebp+var_64] 8 +
test esi 400h +
jz loc_40AB08  +
mov [ebp+var_64] 0Dh +
or esi 40h +
or esi 100h +
lea edx [ebp+arg_C] +
mov ecx esi +
or ecx 200h +
push edx  +
mov [ebp+var_14] 10h +
push ecx  +
call sub_40A3A0  +
mov [ebp+var_78] eax +
mov [ebp+var_74] edx +
test esi 400h +
jz loc_40AB4F  +
lea edx [ebp+arg_C] +
push edx  +
push esi  +
call sub_40A3A0  +
and eax 0FFFFh +
xor edx edx +
mov [ebp+var_70] eax +
test esi 8 +
jz loc_40AB7A  +
mov eax [ebp+var_70] +
or eax [ebp+var_78] +
xor ecx ecx +
or ecx [ebp+var_74] +
or ecx eax +
jz loc_40AB7A  +
test esi 100h +
jz loc_40AB75  +
mov edi offset unk_421EF1 +
jmp loc_40AB7A  +
mov edi offset unk_421EEE +
test esi 80h +
jz loc_40AB8D  +
cmp ebx 70h +
jz loc_40AB8D  +
and esi 0FFFFFFBFh +
lea ecx [ebp-31h] +
mov ebx [ebp+var_70] +
xor edx edx +
or ebx [ebp+var_78] +
or edx [ebp+var_74] +
or edx ebx +
mov [ebp+var_10] ecx +
jz loc_40AC64  +
mov ecx esi +
and ecx 400h +
mov eax [ebp+var_10] +
mov [ebp+var_94] ecx +
mov [ebp+var_10] eax +
cmp [ebp+var_94] 0 +
jz loc_40ABE2  +
mov edx [ebp+var_10] +
lea ecx [ebp+var_39] +
cmp edx ecx +
jnz loc_40ABE2  +
mov eax [ebp+var_70] +
xor edx edx +
mov ebx 3Ah +
mov [ebp+var_78] eax +
mov [ebp+var_74] edx +
mov [ebp+var_70] edx +
jmp loc_40AC47  +
push esi  +
mov ebx [ebp+var_14] +
mov ecx ebx +
mov edx [ebp+var_74] +
mov eax [ebp+var_78] +
sar ecx 1Fh +
push edi  +
call sub_409608  +
add ebx 30h +
pop edi  +
pop esi  +
adc ecx 0 +
mov [ebp+var_C] bl +
cmp bl 39h +
jle loc_40AC27  +
test esi 100h +
mov eax [ebp+var_10] +
mov bl [ebp+var_C] +
mov edx 7 +
jnz loc_40AC1F  +
mov edx 27h +
add bl dl +
mov [ebp+var_10] eax +
mov [ebp+var_C] bl +
push esi  +
mov ebx [ebp+var_14] +
mov ecx ebx +
mov edx [ebp+var_74] +
mov eax [ebp+var_78] +
sar ecx 1Fh +
push edi  +
call sub_409608  +
pop edi  +
pop esi  +
mov bl [ebp+var_C] +
mov [ebp+var_78] eax +
mov [ebp+var_74] edx +
mov ecx [ebp+var_10] +
mov eax [ebp+var_70] +
xor edx edx +
dec [ebp+var_10]  +
or eax [ebp+var_78] +
or edx [ebp+var_74] +
or edx eax +
mov [ecx] bl +
jnz loc_40ABBA  +
jmp loc_40AC72  +
cmp [ebp+var_64] 0 +
jnz loc_40AC7A  +
test esi 80h +
jz loc_40AC7A  +
inc [ebp+var_10]  +
mov eax [ebp+var_10] +
jmp loc_40AC81  +
mov [ebp+var_31] 30h +
mov eax [ebp+var_10] +
lea ecx [ebp+var_30] +
sub ecx eax +
mov edx 30h +
mov [ebp+var_18] ecx +
cmp [ebp+var_64] edx +
jle loc_40AC96  +
mov [ebp+var_64] edx +
mov ecx [ebp+var_64] +
cmp [ebp+var_18] ecx +
jge loc_40ACE4  +
mov ebx ecx +
sub ebx [ebp+var_18] +
test ebx ebx +
lea ebx [ebx-1] +
jz loc_40ACDE  +
mov edx esi +
and edx 400h +
dec eax  +
test edx edx +
jz loc_40ACBE  +
lea ecx [ebp+var_39] +
cmp eax ecx +
jz loc_40ACC2  +
xor ecx ecx +
jmp loc_40ACC7  +
mov ecx 1 +
cmp ecx 1 +
sbb ecx ecx +
and ecx 0FFFFFFF6h +
add ecx 3Ah +
mov [eax] cl +
test ebx ebx +
lea ebx [ebx-1] +
jnz loc_40ACB2  +
mov edx [ebp+var_64] +
mov [ebp+var_18] edx +
mov [ebp+var_24] eax +
jmp loc_40ADCA  +
cmp ds:dword_4285F8 0 +
jnz loc_40AD02  +
push offset aFloatingPointN  +
call sub_40FC90  +
add esp 4 +
push [ebp+var_6C]  +
mov edx [ebp+var_2C] +
lea ecx [ebp+var_18] +
push ecx  +
push [ebp+var_30]  +
push [ebp+arg_C]  +
push [ebp+var_64]  +
push esi  +
mov [ebp+var_18] edx +
push ebx  +
call ds:dword_4285F8  +
add esp 1Ch +
mov edi eax +
cmp [ebp+var_18] 0FFFFFFFFh +
jnz loc_40AD6B  +
mov edx [ebp+var_2C] +
add edx edx +
lea ecx [ebp+var_8C] +
mov [ebp+var_2C] edx +
push [ebp+var_2C]  +
call sub_40FD04  +
mov ecx [ebp+var_2C] +
lea edx [ebp+var_18] +
push [ebp+var_6C]  +
push edx  +
push eax  +
push [ebp+arg_C]  +
push [ebp+var_64]  +
push esi  +
mov [ebp+var_30] eax +
mov [ebp+var_18] ecx +
push ebx  +
call ds:dword_4285F8  +
add esp 20h +
mov edi eax +
cmp [ebp+var_18] 0FFFFFFFFh +
jz loc_40AD2B  +
test esi 20h +
jz loc_40AD79  +
add [ebp+arg_C] 0Ch +
jmp loc_40AD7D  +
add [ebp+arg_C] 8 +
mov ecx [ebp+var_30] +
mov [ebp+var_24] ecx +
jmp loc_40ADCA  +
lea edx [ebp+arg_C] +
push edx  +
push esi  +
call sub_40A480  +
mov ebx eax +
test esi 1000h +
jz loc_40ADA6  +
mov cl byte ptr [ebp+var_88] +
mov [ebx] cl +
jmp loc_40A5BA  +
test esi 800h +
jz loc_40ADBD  +
mov di word ptr [ebp+var_88] +
mov [ebx] di +
jmp loc_40A5BA  +
mov esi [ebp+var_88] +
mov [ebx] esi +
jmp loc_40A5BA  +
push edi  +
call sub_40A110  +
mov edx [ebp+var_18] +
lea ecx [eax+edx] +
add [ebp+var_88] ecx +
mov ebx [ebp+var_6C] +
sub ebx ecx +
add esp 4 +
test esi 40h +
jz loc_40AE0D  +
cmp byte ptr [edi] 0 +
jz loc_40AE0D  +
push [ebp+arg_4]  +
movzx edx byte ptr [edi] +
push edx  +
call [ebp+arg_0]  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jz loc_40AF41  +
inc edi  +
cmp byte ptr [edi] 0 +
jnz loc_40ADF1  +
test ebx ebx +
jle loc_40AE4B  +
add [ebp+var_88] ebx +
test esi 1 +
jnz loc_40AE4B  +
dec ebx  +
test ebx ebx +
js loc_40AE4B  +
push [ebp+arg_4]  +
mov ecx 30h +
test esi 40h +
jnz loc_40AE39  +
mov ecx 20h +
push ecx  +
call [ebp+arg_0]  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jz loc_40AF41  +
jmp loc_40AE1F  +
cmp byte ptr [edi] 0 +
jz loc_40AE6C  +
push [ebp+arg_4]  +
movzx edx byte ptr [edi] +
push edx  +
call [ebp+arg_0]  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jz loc_40AF41  +
inc edi  +
cmp byte ptr [edi] 0 +
jnz loc_40AE50  +
test esi 8000h +
jz loc_40AEE4  +
mov [ebp+var_68] ebx +
xor ebx ebx +
cmp [ebp+var_18] ebx +
jle loc_40AF0A  +
mov ecx [ebp+var_20] +
lea edx [ebp+MultiByteStr] +
push dword ptr [ecx+ebx*2]  +
push edx  +
call sub_40FDFC  +
add esp 8 +
mov edi eax +
cmp eax 1 +
jl loc_40AF41  +
push [ebp+arg_4]  +
movzx ecx [ebp+MultiByteStr] +
push ecx  +
call [ebp+arg_0]  +
add esp 8 +
mov edx 0FFFFFFFFh +
cmp eax edx +
jz loc_40AF41  +
cmp edi 2 +
jnz loc_40AEDC  +
push [ebp+arg_4]  +
movzx ecx byte ptr [ebp-7] +
push ecx  +
call [ebp+arg_0]  +
add esp 8 +
mov edx 0FFFFFFFFh +
cmp eax edx +
jz loc_40AF41  +
inc [ebp+var_88]  +
inc ebx  +
cmp ebx [ebp+var_18] +
jl loc_40AE82  +
jmp loc_40AF0A  +
mov [ebp+var_68] ebx +
xor ebx ebx +
cmp [ebp+var_18] ebx +
jle loc_40AF0A  +
push [ebp+arg_4]  +
mov edx [ebp+var_24] +
movzx ecx byte ptr [ebx+edx] +
push ecx  +
call [ebp+arg_0]  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jz loc_40AF41  +
inc ebx  +
cmp ebx [ebp+var_18] +
jl loc_40AEEE  +
test esi 1 +
mov ebx [ebp+var_68] +
jz loc_40A5BA  +
dec ebx  +
test ebx ebx +
js loc_40A5BA  +
push [ebp+arg_4]  +
push 20h  +
call [ebp+arg_0]  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jz loc_40AF41  +
jmp loc_40AF19  +
mov eax [ebp+var_88] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
pop edi  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
test eax eax +
push ebx  +
mov ebx offset unk_422B50 +
push ebx  +
call sub_40FE78  +
add esp 4 +
test dword ptr [ebx+0Ch] 83h +
jnz loc_40AFAA  +
push [esp+0Ch+arg_0]  +
push [esp+10h+arg_4]  +
push ebx  +
call sub_4100D0  +
mov [esp+0Ch+var_4] eax +
push ebx  +
call sub_40FEF8  +
add esp 4 +
mov eax [esp+0Ch+var_4] +
pop ebx  +
add esp 8 +
retn   +
push ebx  +
call sub_40FEF8  +
add ebx 20h +
add esp 4 +
cmp ebx offset off_4232D0 +
jb loc_40AF74  +
push 18h  +
call sub_410018  +
xor eax eax +
pop ebx  +
add esp 8 +
retn   +
***
mov ecx [esp+arg_8] +
mov eax [esp+arg_0] +
push edi  +
push esi  +
test ecx ecx +
jz loc_40B098  +
mov esi [esp+8+arg_4] +
mov edi eax +
cmp esi edi +
jz loc_40B098  +
lea edx [ecx+esi] +
ja loc_40B051  +
cmp edx edi +
ja loc_40B0F5  +
cmp ecx 4 +
jb loc_40B080  +
mov eax esi +
mov edx edi +
and al 3 +
jz loc_40B080  +
and dl 3 +
jz loc_40B080  +
mov al [esi] +
inc esi  +
mov [edi] al +
inc edi  +
test esi 3 +
lea ecx [ecx-1] +
jnz loc_40B06F  +
mov edx ecx +
shr ecx 2 +
and edx 3 +
cmp ecx 5 +
ja loc_40B0EC  +
jmp ds:off_40AFD0[ecx*4]  +
pop esi  +
pop edi  +
retn   +
mov eax [esi] +
add esi 4 +
mov [edi] eax +
add edi 4 +
mov eax [esi] +
add esi 4 +
mov [edi] eax +
add edi 4 +
mov eax [esi] +
add esi 4 +
mov [edi] eax +
add edi 4 +
mov eax [esi] +
add esi 4 +
mov [edi] eax +
add edi 4 +
mov eax [esi] +
add esi 4 +
mov [edi] eax +
add edi 4 +
jmp ds:off_40AFE8[edx*4]  +
mov cl [esi] +
inc esi  +
mov [edi] cl +
inc edi  +
mov cl [esi] +
inc esi  +
mov [edi] cl +
inc edi  +
mov cl [esi] +
mov [edi] cl +
mov eax [esp+8+arg_0] +
pop esi  +
pop edi  +
retn   +
movs   +
jmp ds:off_40AFE8[edx*4]  +
lea esi [esi+ecx-4] +
lea edi [edi+ecx-4] +
cmp ecx 4 +
jb loc_40B12E  +
mov eax esi +
mov edx edi +
and al 3 +
jz loc_40B12E  +
and dl 3 +
jz loc_40B12E  +
mov al [esi+3] +
dec esi  +
mov [edi+3] al +
dec edi  +
test esi 3 +
lea ecx [ecx-1] +
jnz loc_40B11B  +
mov edx ecx +
shr ecx 2 +
and edx 3 +
cmp ecx 5 +
ja loc_40B19E  +
jmp ds:off_40AFF8[ecx*4]  +
mov ecx [esi] +
sub esi 4 +
mov [edi] ecx +
sub edi 4 +
mov ecx [esi] +
sub esi 4 +
mov [edi] ecx +
sub edi 4 +
mov ecx [esi] +
sub esi 4 +
mov [edi] ecx +
sub edi 4 +
mov ecx [esi] +
sub esi 4 +
mov [edi] ecx +
sub edi 4 +
mov ecx [esi] +
sub esi 4 +
mov [edi] ecx +
sub edi 4 +
jmp ds:off_40B010[edx*4]  +
mov cl [esi+3] +
dec esi  +
mov [edi+3] cl +
dec edi  +
mov cl [esi+3] +
dec esi  +
mov [edi+3] cl +
dec edi  +
mov cl [esi+3] +
mov [edi+3] cl +
mov eax [esp+8+arg_0] +
pop esi  +
pop edi  +
retn   +
std   +
movs   +
cld   +
jmp ds:off_40B010[edx*4]  +
***
sub esp 18h +
push ebx  +
mov ebx [esp+1Ch+arg_0] +
test ebx ebx +
push esi  +
jnz loc_40B1C3  +
mov esi 0FFFFFFFFh +
jmp loc_40B24D  +
push ebx  +
xor esi esi +
call sub_40FE78  +
add esp 4 +
mov ecx [ebx+0Ch] +
mov [esp+20h+var_14] ecx +
test ecx 83h +
jz loc_40B201  +
test [esp+20h+var_14] 4 +
jnz loc_40B1F2  +
push ebx  +
call sub_41063C  +
mov esi eax +
add esp 4 +
push dword ptr [ebx+10h]  +
call sub_40C084  +
or esi eax +
add esp 4 +
jmp loc_40B206  +
mov esi 0FFFFFFFFh +
mov edx [ebx+1Ch] +
test edx edx +
jz loc_40B22F  +
push edx  +
push offset asc_421F15  +
push offset aSD  +
lea ecx [esp+2Ch+FileName] +
push ecx  +
call sub_40A2B4  +
lea edx [esp+30h+FileName] +
push edx  +
call sub_40C0D4  +
add esp 14h +
push ebx  +
xor ecx ecx +
mov [ebx+1Ch] ecx +
call sub_410378  +
push 20h  +
push 0  +
push ebx  +
call sub_4097E4  +
push ebx  +
call sub_40FEF8  +
add esp 10h +
mov eax esi +
pop esi  +
pop ebx  +
add esp 18h +
retn   +
***
sub esp 10h +
mov edx [esp+10h+arg_0] +
lea eax [edx+1] +
push ebx  +
cmp eax 100h +
push esi  +
push edi  +
ja loc_40B286  +
mov ebx ds:off_421F98 +
mov ax [ebx+edx*2] +
and eax 0FFFFh +
and eax [esp+1Ch+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn   +
mov eax edx +
sar eax 8 +
mov ecx ds:off_421F98 +
mov [esp+1Ch+var_4] al +
and eax 0FFh +
xor ebx ebx +
test word ptr [ecx+eax*2] 8000h +
jz loc_40B2AF  +
mov esi ebx +
mov al [esp+1Ch+var_4] +
inc ebx  +
mov [esp+esi+1Ch+SrcStr] al +
mov [esp+1Ch+arg_0] edx +
mov edi ebx +
mov dl byte ptr [esp+1Ch+arg_0] +
mov [esp+edi+1Ch+SrcStr] dl +
inc ebx  +
lea ecx [esp+1Ch+CharType] +
mov [esp+ebx+1Ch+SrcStr] 0 +
push ecx  +
push ebx  +
lea eax [esp+24h+SrcStr] +
push eax  +
push 1  +
push ds:Locale  +
call GetStringTypeA  +
test eax eax +
jz loc_40B2F5  +
mov ax [esp+1Ch+CharType] +
and eax 0FFFFh +
and eax [esp+1Ch+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn   +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 10h +
retn   +
***
add esp 4 +
retn   +
***
push eax  +
push ebx  +
push esi  +
push edi  +
mov edx 1 +
inc ds:word_428608[edx*2]  +
jz loc_40B330  +
push edx  +
call sub_40DE00  +
add esp 4 +
push [ebp+arg_4]  +
mov ecx ds:dword_422AF0 +
push [ebp+arg_0]  +
call sub_40F7DC  +
mov [ebp+var_4] eax +
mov edx 1 +
dec ds:word_428608[edx*2]  +
js loc_40B35D  +
push edx  +
call sub_40DE20  +
add esp 4 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edx +
mov esi 1 +
dec esi  +
shl eax 1 +
rcl edx 1 +
test edx 100000h +
jz loc_40B399  +
retn   +
***
dec esi  +
test edx 80000000h +
jz loc_40B3B8  +
shr edx 1 +
rcr eax 1 +
adc al 0 +
inc esi  +
cmp esi 7FFh +
jl loc_40B3C5  +
jmp loc_40B51D  +
***
cmp esi 0 +
jg loc_40B3D0  +
dec esi  +
call sub_40B671  +
***
sub esi 0Bh +
test edx 0FFE00000h +
jz loc_40B493  +
shr edx 1 +
rcr eax 1 +
inc esi  +
jnb loc_40B478  +
test edx 0FFE00000h +
jnz loc_40B484  +
test edx 1F0000h +
jnz loc_40B4D7  +
test edx edx +
jnz loc_40B4E3  +
shld edx eax +
shl eax 10h +
sub esi 10h +
test edx edx +
jnz loc_40B4E3  +
shld edx eax +
xor eax eax +
sub esi 10h +
test edx edx +
jz locret_40B51C  +
test dh dh +
jnz loc_40B4E3  +
xchg dh dl +
sub esi 8 +
test edx 100000h +
jnz loc_40B4EA  +
shl eax 1 +
rcl edx 1 +
dec esi  +
jmp loc_40B4D7  +
cmp esi 0 +
jge loc_40B501  +
shld edx eax +
shl eax 0Ah +
dec esi  +
call sub_40B671  +
jmp loc_40B3D0  +
shl esi 14h +
cmp esi 7FF00000h +
jnb loc_40B51D  +
and edx 0FFFFFh +
and edi 80000000h +
or edx esi +
or edx edi +
retn   +
push 28h  +
call sub_409A2C  +
mov eax 2 +
jmp loc_40B52E  +
xor edx edx +
dec eax  +
jz loc_40B56C  +
mov edx 7FF00000h +
call sub_409A40  +
cmp eax 0 +
jz loc_40B56A  +
cmp eax 0C00h +
jz loc_40B55E  +
cmp eax 800h +
jz loc_40B55A  +
test edi edi +
js loc_40B56A  +
jmp loc_40B55E  +
test edi edi +
jns loc_40B56A  +
mov edx 7FEFFFFFh +
mov eax 0FFFFFFFFh +
jmp loc_40B56C  +
xor eax eax +
and edi 80000000h +
or edx edi +
retn   +
***
mov edi edx +
test edx 80000h +
jz loc_40B5EF  +
add esi 50h +
retn   +
***
and edi 7FFFFh +
or edi eax +
jz loc_40B5FD  +
add esi 3Ch +
retn   +
***
add esi 28h +
retn   +
***
xor esi esi +
test edx 7FFFFFFFh +
jz loc_40B651  +
mov edi edx +
and edi 7FF00000h +
cmp edi 7FF00000h +
jnz locret_40B65A  +
mov edi edx +
test edx 80000h +
jz loc_40B63B  +
mov esi 4 +
retn   +
and edi 7FFFFh +
or edi eax +
jz loc_40B64B  +
mov esi 3 +
retn   +
mov esi 2 +
retn   +
test eax eax +
jnz locret_40B65A  +
mov esi 1 +
retn   +
***
cmp esi 0FFFFFFC8h +
jl loc_40B6A3  +
cmp esi 0FFFFFFF8h +
jg loc_40B689  +
or ah al +
shrd eax edx +
shr edx 8 +
add esi 8 +
jnz loc_40B676  +
xchg ecx esi +
jecxz loc_40B6A0  +
neg ecx  +
test al al +
jz loc_40B699  +
or al 40h +
shr edx 1 +
rcr eax 1 +
dec ecx  +
jnz loc_40B699  +
xchg ecx esi +
retn   +
or eax edx +
jz loc_40B6B2  +
xor edx edx +
mov eax 1 +
mov esi edx +
retn   +
***
mov ebp esp +
mov dword ptr [ebp+0] 1Fh +
test edx 80000000h +
jz loc_40B6F1  +
push 1  +
call sub_409A2C  +
xor eax eax +
add esp 4 +
pop ebp  +
retn   +
push esi  +
push edi  +
push ebx  +
push ecx  +
call sub_40B609  +
jmp cs:off_40B702[esi*4]  +
call sub_40B370  +
xor ebx ebx +
sub esi 3FFh +
js loc_40B76F  +
cmp esi [ebp+0] +
ja loc_40B78C  +
shld ebx eax +
or ah al +
or bl ah +
mov eax edx +
mov ecx 1Fh +
sub ecx esi +
jcxz loc_40B74E  +
xchg ebx ebx +
shr eax 1 +
rcr bh 1 +
adc bl 0 +
dec ecx  +
jnz loc_40B744  +
mov esi [ebp+0] +
test bx bx +
jz loc_40B761  +
push 20h  +
call sub_409A2C  +
test edi 80000000h +
js loc_40B79C  +
jmp loc_40B793  +
mov bl 1 +
cmp esi 0FFFFFFFFh +
jz loc_40B77D  +
or bh 80h +
xor eax eax +
jmp loc_40B74E  +
push 20h  +
call sub_409A2C  +
xor eax eax +
jmp loc_40B793  +
push 1  +
call sub_409A2C  +
pop ecx  +
pop ebx  +
pop edi  +
pop esi  +
add esp 4 +
pop ebp  +
retn   +
mov edi 80000000h +
mov esi [ebp+0] +
cmp esi 1Fh +
jz loc_40B7AE  +
mov edi 8000h +
cmp eax edi +
jz loc_40B793  +
ja loc_40B78C  +
neg eax  +
jmp loc_40B793  +
***
sub esi 8 +
mov esi 1 +
cmp esi 0FFFFFFE8h +
jl loc_40B89E  +
cmp esi 0FFFFFFF8h +
jg loc_40B887  +
or al al +
jz loc_40B87F  +
or ah 1 +
shr eax 8 +
add esi 8 +
jnz loc_40B86F  +
xchg ecx esi +
jecxz loc_40B89B  +
neg ecx  +
test al al +
jz loc_40B897  +
or al 40h +
shr eax cl +
xor ecx ecx +
xchg ecx esi +
retn   +
test eax eax +
jz loc_40B8A9  +
mov eax 1 +
jmp loc_40B8AB  +
xor eax eax +
xor esi esi +
retn   +
***
dec esi  +
test eax 80000000h +
jz loc_40B8C5  +
shr eax 1 +
jnb loc_40B8C4  +
or al 1 +
inc esi  +
cmp esi 0FFh +
jl loc_40B8D2  +
jmp loc_40B84A  +
***
cmp esi 0 +
jg loc_40B8DD  +
dec esi  +
call sub_40B86A  +
***
xor esi esi +
test eax 7F800000h +
jz loc_40B9FC  +
mov edi eax +
and edi 7F800000h +
cmp edi 7F800000h +
jnz locret_40BA08  +
mov edi eax +
test edi 400000h +
jz loc_40B9E8  +
mov esi 4 +
retn   +
and edi 7FFFFFh +
jz loc_40B9F6  +
mov esi 3 +
retn   +
mov esi 2 +
retn   +
test eax 7FFFFFh +
jnz locret_40BA08  +
mov esi 1 +
retn   +
***
push ebx  +
mov ebx [esp+0Ch+arg_0] +
push ebp  +
mov ebp ebx +
push esi  +
mov esi [esp+14h+arg_4] +
push edi  +
mov edi [esp+18h+arg_8] +
push edi  +
call sub_40FE78  +
add esp 4 +
test esi esi +
jz loc_40BA68  +
dec esi  +
jle loc_40BA5C  +
push edi  +
call sub_40C23A  +
add esp 4 +
cmp eax 0FFFFFFFFh +
mov [esp+18h+var_4] eax +
jz loc_40BA58  +
mov cl byte ptr [esp+18h+var_4] +
mov [ebx] cl +
cmp cl 0Ah +
jz loc_40BA55  +
inc ebx  +
dec esi  +
test esi esi +
jg loc_40BA30  +
jmp loc_40BA5C  +
inc ebx  +
jmp loc_40BA5C  +
cmp ebx ebp +
jz loc_40BA68  +
mov byte ptr [ebx] 0 +
test dword ptr [edi+0Ch] 20h +
jz loc_40BA6A  +
xor ebp ebp +
push edi  +
call sub_40FEF8  +
add esp 4 +
mov eax ebp +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 8 +
retn   +
***
push esi  +
mov esi [esp+arg_0] +
push edi  +
xor edi edi +
cmp ds:Locale edi +
jnz loc_40BADA  +
cmp byte ptr [esi] 0 +
mov ebx esi +
jz loc_40BB2A  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_40BABE  +
push 2  +
movzx edx byte ptr [ebx] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_40BAD2  +
jmp loc_40BACF  +
movzx edx byte ptr [ebx] +
mov ecx ds:off_421F98 +
test word ptr [ecx+edx*2] 2 +
jz loc_40BAD2  +
add byte ptr [ebx] 0E0h +
inc ebx  +
cmp byte ptr [ebx] 0 +
jnz loc_40BA9D  +
jmp loc_40BB2A  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push esi  +
push 200h  +
push ds:Locale  +
call LCMapStringA  +
mov ebx eax +
test eax eax +
jz loc_40BB3A  +
push ebx  +
call sub_40F9A0  +
add esp 4 +
mov edi eax +
test eax eax +
jz loc_40BB3A  +
push ebx  +
push edi  +
push 0FFFFFFFFh  +
push esi  +
push 200h  +
push ds:Locale  +
call LCMapStringA  +
test eax eax +
jz loc_40BB3A  +
push ebx  +
push edi  +
push esi  +
call sub_40B020  +
add esp 0Ch +
push edi  +
call sub_40972C  +
add esp 4 +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
xor esi esi +
jmp loc_40BB2A  +
***
sub esp 34h +
push ebx  +
push esi  +
push edi  +
lea eax [esp+40h+SystemTime] +
push eax  +
call GetLocalTime  +
mov cx [esp+40h+SystemTime.wSecond] +
mov dx [esp+40h+SystemTime.wMinute] +
mov si [esp+40h+SystemTime.wHour] +
mov di [esp+40h+SystemTime.wYear] +
mov ax [esp+40h+SystemTime.wMonth] +
and ecx 0FFFFh +
and edx 0FFFFh +
mov [esp+40h+var_24] ecx +
and esi 0FFFFh +
and edi 0FFFFh +
mov [esp+40h+var_20] edx +
and eax 0FFFFh +
mov cx [esp+40h+SystemTime.wDay] +
mov [esp+40h+var_1C] esi +
mov dx [esp+40h+SystemTime.wMilliseconds] +
lea esi [esp+40h+var_24] +
mov [esp+40h+var_10] edi +
mov [esp+40h+var_14] eax +
and ecx 0FFFFh +
mov [esp+40h+var_18] ecx +
mov ds:word_4289F8 dx +
push esi  +
call sub_410868  +
add esp 4 +
mov ebx eax +
cmp [esp+40h+arg_0] 0 +
jz loc_40BBD2  +
mov edi [esp+40h+arg_0] +
mov [edi] ebx +
pop edi  +
mov eax ebx +
pop esi  +
pop ebx  +
add esp 34h +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
mov ecx eax +
dec ecx  +
cld   +
scas   +
not ecx  +
sub edi ecx +
mov edx ecx +
mov ecx eax +
mov esi edi +
mov edi [ebp+arg_0] +
dec ecx  +
mov ebx edi +
scas   +
dec edi  +
mov ecx edx +
shr ecx 2 +
movs   +
mov ecx 3 +
and ecx edx +
movs   +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
sub esp 410h +
push ebx  +
push esi  +
push edi  +
mov esi [esp+41Ch+arg_4] +
push esi  +
call sub_40A110  +
mov ebx eax +
push [esp+420h+arg_0]  +
call sub_40A110  +
mov [esp+424h+var_40C] eax +
add esp 8 +
test ebx ebx +
jnz loc_40BC5C  +
mov eax [esp+41Ch+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
add esp 410h +
retn   +
cmp ebx [esp+41Ch+var_40C] +
ja loc_40BCF3  +
push 100h  +
push ebx  +
lea ecx [esp+424h+var_404] +
push ecx  +
call sub_410AF0  +
lea edi [ebx-1] +
mov [esp+428h+var_408] esi +
add esp 0Ch +
mov edx [esp+41Ch+var_408] +
mov eax edx +
mov ecx edi +
sub eax esi +
sub ecx eax +
movzx eax byte ptr [edx] +
inc edx  +
mov [esp+eax*4+41Ch+var_404] ecx +
cmp byte ptr [edx] 0 +
jnz loc_40BC84  +
mov eax [esp+41Ch+arg_0] +
lea edx [ebx+esi-1] +
lea eax [ebx+eax-1] +
mov cl [eax] +
cmp cl [edx] +
jnz loc_40BCC2  +
mov ecx edx +
sub ecx esi +
jnz loc_40BCBE  +
pop edi  +
pop esi  +
pop ebx  +
add esp 410h +
retn   +
dec eax  +
dec edx  +
jmp loc_40BCA8  +
mov [esp+41Ch+var_4] cl +
mov ecx edx +
mov edi ebx +
sub ecx esi +
sub edi ecx +
movzx ecx [esp+41Ch+var_4] +
mov ecx [esp+ecx*4+41Ch+var_404] +
cmp edi ecx +
jnb loc_40BCE3  +
mov edi ecx +
lea edx [eax+edi] +
sub edx [esp+41Ch+arg_0] +
cmp edx [esp+41Ch+var_40C] +
jb loc_40BCFF  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 410h +
retn   +
add eax edi +
lea edx [ebx+esi-1] +
jmp loc_40BCA8  +
***
push esi  +
mov esi [esp+arg_0] +
push edi  +
xor edi edi +
cmp ds:Locale edi +
jnz loc_40BD61  +
cmp byte ptr [esi] 0 +
mov ebx esi +
jz loc_40BDB1  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_40BD45  +
push ecx  +
movzx edx byte ptr [ebx] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_40BD59  +
jmp loc_40BD56  +
movzx edx byte ptr [ebx] +
mov ecx ds:off_421F98 +
test word ptr [ecx+edx*2] 1 +
jz loc_40BD59  +
add byte ptr [ebx] 20h +
inc ebx  +
cmp byte ptr [ebx] 0 +
jnz loc_40BD25  +
jmp loc_40BDB1  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push esi  +
push 100h  +
push ds:Locale  +
call LCMapStringA  +
mov ebx eax +
test eax eax +
jz loc_40BDC1  +
push ebx  +
call sub_40F9A0  +
add esp 4 +
mov edi eax +
test eax eax +
jz loc_40BDC1  +
push ebx  +
push edi  +
push 0FFFFFFFFh  +
push esi  +
push 100h  +
push ds:Locale  +
call LCMapStringA  +
test eax eax +
jz loc_40BDC1  +
push ebx  +
push edi  +
push esi  +
call sub_40B020  +
add esp 0Ch +
push edi  +
call sub_40972C  +
add esp 4 +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
xor esi esi +
jmp loc_40BDB1  +
***
call GetStdHandle  +
push 40h  +
push [esp+8+arg_4]  +
push [esp+0Ch+lpFileName]  +
call sub_40BE78  +
add esp 10h +
pop ecx  +
retn   +
***
sub esp 18h +
mov ecx [esp+arg_0] +
test eax eax +
cmp eax [esp+uNumber] +
push [esp+8+dwMoveMethod]  +
push 0  +
push [esp+10h+lDistanceToMove]  +
mov eax [esp+14h+arg_0] +
push ds:hFile[eax*4]  +
call __imp_SetFilePointer  +
cmp eax 0FFFFFFFFh +
mov [esp+8+var_4] eax +
jnz loc_40C13B  +
call sub_40FF78  +
mov eax [esp+8+var_4] +
add esp 8 +
retn   +
***
call GetFileAttributesA  +
mov ebx eax +
cmp eax 0FFFFFFFFh +
jnz loc_40C15D  +
call sub_40FF78  +
jmp loc_40C17F  +
test [esp+arg_4] 2 +
jz loc_40C17D  +
test ebx 1 +
jz loc_40C17D  +
push 0Dh  +
call sub_410018  +
mov ebx 0FFFFFFFFh +
jmp loc_40C17F  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
retn   +
***
sub esp 4 +
movzx eax [esp+arg_0] +
dec dword ptr [ecx+4]  +
js loc_40C20A  +
mov edx [ecx] +
mov [edx] al +
inc edx  +
mov [ecx] edx +
retn   +
test byte ptr [ecx+0Dh] 1 +
jz loc_40C1EA  +
mov al 0Dh +
call sub_40C1CE  +
mov al 0Ah +
test byte ptr [ecx+0Ch] 40h +
jz sub_40C1CE  +
call sub_40C1CE  +
push eax  +
push ecx  +
call sub_41063C  +
add esp 4 +
test eax eax +
pop eax  +
jz locret_40C209  +
mov eax 0FFFFFFFFh +
retn   +
push ecx  +
push ecx  +
push eax  +
call sub_4103B0  +
add esp 8 +
pop ecx  +
retn   +
***
sub esp 4 +
mov ecx [esp+arg_0] +
cmp ecx 0 +
jz loc_40C277  +
dec dword ptr [ecx+4]  +
js loc_40C263  +
mov edx [ecx] +
movzx eax byte ptr [edx] +
inc edx  +
mov [ecx] edx +
test byte ptr [ecx+0Dh] 1 +
jz locret_40C262  +
cmp al 0Dh +
jz loc_40C247  +
cmp al 1Ah +
jz loc_40C27D  +
retn   +
cmp dword ptr [ecx+4] 0FFFFFFFFh +
jnz loc_40C24C  +
push ecx  +
call sub_410540  +
add esp 4 +
test eax eax +
jz sub_40C23A  +
retn   +
mov eax 0FFFFFFFFh +
retn   +
mov eax 0FFFFFFFFh +
or byte ptr [ecx+0Ch] 10h +
mov dword ptr [ecx+4] 0 +
retn   +
***
add esp 4 +
push eax  +
call sub_410B0C  +
add esp 4 +
retn   +
***
add ecx 0FFFFFFB8h +
add ecx 0FFFFFFB8h +
add ecx 0FFFFFFA8h +
add ecx 0FFFFFFB8h +
add ecx 0FFFFFFB0h +
add ecx 0FFFFFFA8h +
add ecx 0FFFFFFB8h +
add ecx 0FFFFFFA0h +
mov edx large fs:0 +
mov eax offset unk_4222D0 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_40C370  +
push ebx  +
call sub_4116D4  +
add esp 4 +
test [esp+4+arg_0] 1 +
jz loc_40C370  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
push ebx  +
mov ebx ecx +
jz loc_40C398  +
call sub_40C5B4  +
test [esp+4+arg_0] 1 +
jz loc_40C398  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_40C405  +
push edx  +
mov large fs:0 esp +
sub esp 10h +
push ebx  +
mov [ebp+var_18] ecx +
call sub_4112C0  +
mov [ebp+var_4] 0 +
mov eax [ebp+var_18] +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_422600 +
mov edx [ebp+arg_4] +
mov ebx [eax+0Ch] +
mov [eax+28h] ecx +
mov [eax+2Ch] edx +
mov dword ptr [eax+34h] 0 +
mov [eax+38h] ebx +
mov word ptr [eax+30h] 1 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
mov eax offset unk_4222F8 +
jmp sub_41245C  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_40C4AD  +
push edx  +
mov large fs:0 esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_18] ecx +
call sub_4112C0  +
mov [ebp+var_4] 0 +
mov eax [ebp+var_18] +
mov ecx 10h +
mov dword ptr [eax] offset off_422600 +
cmp esi ecx +
jge loc_40C454  +
mov esi ecx +
push esi  +
mov edx [ebp+var_18] +
mov dword ptr [edx+38h] 0 +
call sub_41165C  +
add esp 4 +
mov ebx eax +
test eax eax +
jz loc_40C485  +
push 0  +
push ebx  +
push ebx  +
mov ecx [ebp+var_18] +
call sub_41137C  +
mov ecx [ebp+var_18] +
lea edx [ebx+esi] +
mov [ecx+38h] edx +
mov byte ptr [ebx] 0 +
mov ebx [ebp+var_18] +
xor eax eax +
mov [ebx+28h] eax +
mov [ebx+2Ch] eax +
mov [ebx+34h] eax +
mov eax ebx +
mov word ptr [ebx+30h] 1 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov eax offset unk_422320 +
jmp sub_41245C  +
***
push ebp  +
mov ebp [esp+4+arg_8] +
push esi  +
mov esi [esp+8+arg_0] +
push edi  +
mov edi [esp+0Ch+arg_4] +
test edi edi +
mov word ptr [ebx+30h] 0 +
jnz loc_40C4E1  +
push esi  +
call sub_40A110  +
mov edi eax +
add esp 4 +
jmp loc_40C4F1  +
test edi edi +
jns loc_40C4F1  +
or dword ptr [ebx+30h] 4 +
mov edi 7FFFFFFFh +
push 0  +
lea ecx [esi+edi] +
push ecx  +
mov ecx ebx +
push esi  +
call sub_41137C  +
test ebp ebp +
jz loc_40C52D  +
push dword ptr [ebx+0Ch]  +
mov ecx ebx +
push ebp  +
call sub_411438  +
push ebp  +
call sub_40A110  +
add esp 4 +
cmp eax edi +
jg loc_40C51D  +
jmp loc_40C51F  +
mov eax edi +
add eax ebp +
mov ecx ebx +
push eax  +
push esi  +
push esi  +
call sub_4113F4  +
jmp loc_40C539  +
push dword ptr [ebx+0Ch]  +
mov ecx ebx +
push esi  +
push esi  +
call sub_4113F4  +
mov edx [ebx+0Ch] +
xor esi esi +
mov [ebx+38h] edx +
mov [ebx+28h] esi +
mov [ebx+2Ch] esi +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
retn 0Ch  +
***
mov edx large fs:0 +
mov eax offset unk_422348 +
jmp sub_41245C  +
***
mov dword ptr [ecx] offset off_422600 +
mov al [ebx+30h] +
and al 3 +
cmp al 1 +
jnz loc_40C5E2  +
cmp dword ptr [ebx+2Ch] 0 +
jz loc_40C5D7  +
push dword ptr [ebx+8]  +
call dword ptr [ebx+2Ch]  +
add esp 4 +
jmp loc_40C5E2  +
push dword ptr [ebx+8]  +
call sub_40971C  +
add esp 4 +
mov ecx ebx +
call sub_411314  +
pop ebx  +
retn   +
***
push esi  +
push edi  +
mov edi [ecx+34h] +
test edi edi +
jnz loc_40C5FD  +
mov edi 10h +
cmp dword ptr [ebx+28h] 0 +
jz loc_40C60E  +
push edi  +
call dword ptr [ebx+28h]  +
mov esi eax +
add esp 4 +
jmp loc_40C619  +
push edi  +
call sub_41165C  +
mov esi eax +
add esp 4 +
test esi esi +
jnz loc_40C626  +
pop edi  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
retn   +
xor ecx ecx +
mov edx [ebx+0Ch] +
add edx esi +
push ecx  +
sub edx [ebx+8] +
push edx  +
mov [ebx+34h] ecx +
mov ecx ebx +
push esi  +
call sub_41137C  +
lea edx [esi+edi] +
mov eax 1 +
mov [ebx+38h] edx +
mov byte ptr [esi] 0 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
sub esp 20h +
mov al [ecx+30h] +
push ebx  +
mov ebx ecx +
push ebp  +
push esi  +
push edi  +
and al 3 +
cmp al 1 +
jnz loc_40C680  +
cmp dword ptr [ebx+8] 0 +
jnz loc_40C66D  +
mov edx [ebx] +
call dword ptr [edx+28h]  +
cmp dword ptr [ebx+10h] 0 +
jnz loc_40C680  +
push dword ptr [ebx+0Ch]  +
mov ecx ebx +
push dword ptr [ebx+8]  +
call sub_411438  +
cmp dword ptr [ebx+10h] 0 +
jz loc_40C7FE  +
mov esi [ebx+18h] +
cmp esi [ebx+14h] +
ja loc_40C7C2  +
mov al [ebx+30h] +
and al 3 +
cmp al 1 +
jnz loc_40C7C2  +
mov esi [ebx+8] +
mov ebp [ebx+0Ch] +
mov ecx [ebx+20h] +
mov [esp+30h+var_20] esi +
mov edx [esp+30h+var_20] +
sub ebp edx +
neg ecx  +
mov edx [ebx+34h] +
mov edi esi +
sbb ecx ecx +
neg ecx  +
test edx edx +
mov [esp+30h+var_1C] esi +
mov [esp+30h+var_18] ecx +
jnz loc_40C6D2  +
mov edx 10h +
mov ecx [ebx+14h] +
mov [esp+30h+var_8] edx +
mov dword ptr [ebx+34h] 0 +
cmp ecx [ebx+38h] +
jb loc_40C76C  +
cmp dword ptr [ebx+28h] 0 +
jz loc_40C700  +
mov ecx [esp+30h+var_8] +
add ecx ebp +
push ecx  +
call dword ptr [ebx+28h]  +
mov esi eax +
add esp 4 +
jmp loc_40C70F  +
lea edx [ebp+edx+0] +
push edx  +
call sub_41165C  +
mov esi eax +
add esp 4 +
test esi esi +
jz loc_40C7FE  +
lea edx [esi+ebp] +
add edx [esp+30h+var_8] +
push ebp  +
push edi  +
mov [ebx+38h] edx +
push esi  +
call sub_40B020  +
add esp 0Ch +
cmp [esp+30h+var_18] 0 +
jz loc_40C74E  +
mov ecx [ebx+1Ch] +
sub ecx edi +
mov edx [ebx+20h] +
mov [esp+30h+var_14] ecx +
sub edx edi +
mov ecx [ebx+24h] +
mov [esp+30h+var_10] edx +
sub ecx edi +
mov [esp+30h+var_C] ecx +
cmp dword ptr [ebx+2Ch] 0 +
jz loc_40C760  +
push [esp+30h+var_1C]  +
call dword ptr [ebx+2Ch]  +
add esp 4 +
jmp loc_40C76C  +
push [esp+30h+var_1C]  +
call sub_41166C  +
add esp 4 +
mov edx [ebx+14h] +
sub edx edi +
lea eax [ebp+esi+1] +
mov [esp+30h+var_4] edx +
mov ecx ebp +
mov ecx ebx +
push 0  +
push eax  +
push esi  +
call sub_41137C  +
mov ecx ebx +
push dword ptr [ebx+0Ch]  +
push esi  +
call sub_411438  +
mov edx [esp+30h+var_4] +
add [ebx+14h] edx +
cmp esi edi +
jz loc_40C7C2  +
cmp [esp+30h+var_18] 0 +
jz loc_40C7C2  +
mov ecx [esp+30h+var_C] +
lea edx [esi+ecx] +
mov ecx [esp+30h+var_10] +
push edx  +
lea edx [esi+ecx] +
mov ecx [esp+34h+var_14] +
push edx  +
lea edx [esi+ecx] +
mov ecx ebx +
push edx  +
call sub_4113F4  +
mov eax [ebx+18h] +
cmp eax [ebx+14h] +
jbe loc_40C7FE  +
mov esi [ebx+14h] +
cmp esi [ebx+18h] +
jb loc_40C7E1  +
movzx edx [esp+30h+arg_0] +
push edx  +
mov edi [ebx] +
mov ecx ebx +
call dword ptr [edi+18h]  +
jmp loc_40C7F4  +
mov esi [ebx+14h] +
inc esi  +
mov [ebx+14h] esi +
dec esi  +
mov al [esp+30h+arg_0] +
mov [esi] al +
and eax 0FFh +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 20h +
retn 4  +
pop edi  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
pop ebx  +
add esp 20h +
retn 4  +
***
mov eax [ecx+20h] +
push esi  +
push edi  +
cmp eax [ebx+24h] +
jnb loc_40C827  +
mov esi [ebx+20h] +
movzx eax byte ptr [esi] +
pop edi  +
pop esi  +
pop ebx  +
retn   +
cmp dword ptr [ebx+8] 0 +
jz loc_40C87E  +
cmp word ptr [ebx+6] 0 +
jnz loc_40C87E  +
mov edx [ebx+10h] +
cmp edx [ebx+14h] +
jnb loc_40C87E  +
test eax eax +
jz loc_40C847  +
mov esi [ebx+10h] +
cmp esi eax +
jbe loc_40C85F  +
push dword ptr [ebx+14h]  +
push dword ptr [ebx+10h]  +
push dword ptr [ebx+8]  +
call sub_4113F4  +
mov edx [ebx+20h] +
movzx eax byte ptr [edx] +
pop edi  +
pop esi  +
pop ebx  +
retn   +
mov edi [ebx+14h] +
cmp edi eax +
jbe loc_40C87E  +
push dword ptr [ebx+14h]  +
push dword ptr [ebx+20h]  +
push dword ptr [ebx+1Ch]  +
call sub_4113F4  +
mov ecx [ebx+20h] +
movzx eax byte ptr [ecx] +
pop edi  +
pop esi  +
pop ebx  +
retn   +
pop edi  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
retn   +
***
cmp [esp+arg_0] 0 +
jz loc_40C894  +
xor eax eax +
retn 8  +
mov eax [esp+arg_4] +
cmp eax 8 +
jle loc_40C8A0  +
mov [ecx+34h] eax +
mov eax ecx +
retn 8  +
***
push ebx  +
mov ebx ecx +
push esi  +
mov esi 0FFFFFFFFh +
push edi  +
mov edi [esp+0Ch+arg_4] +
cmp edi 2 +
jnz loc_40C8DD  +
test word ptr [ebx+30h] 4 +
jnz loc_40C8CC  +
test eax eax +
jle loc_40C8D3  +
mov esi 0FFFFFFFFh +
jmp loc_40C8E3  +
mov esi [ebx+0Ch] +
add esi eax +
sub esi [ebx+8] +
jmp loc_40C8E3  +
test edi edi +
jnz loc_40C8E3  +
mov esi eax +
test [esp+0Ch+arg_8] 1 +
jz loc_40C964  +
cmp edi 1 +
jnz loc_40C914  +
cmp dword ptr [ebx+20h] 0 +
jz loc_40C902  +
mov esi [ebx+20h] +
add esi eax +
sub esi [ebx+8] +
jmp loc_40C914  +
cmp dword ptr [ebx+14h] 0 +
jz loc_40C912  +
mov esi [ebx+14h] +
add esi eax +
sub esi [ebx+8] +
jmp loc_40C914  +
mov esi eax +
test esi esi +
js loc_40C922  +
mov edx [ebx+0Ch] +
sub edx [ebx+8] +
cmp edx esi +
jge loc_40C929  +
mov esi 0FFFFFFFFh +
jmp loc_40C964  +
mov [esp+0Ch+arg_4] edi +
mov edi [ebx+8] +
add edi esi +
mov [esp+0Ch+arg_0] eax +
mov edx [ebx+1Ch] +
test edx edx +
jz loc_40C943  +
cmp edx edi +
jnb loc_40C943  +
jmp loc_40C945  +
mov edx edi +
mov eax [ebx+24h] +
test eax eax +
jz loc_40C952  +
cmp eax edi +
jbe loc_40C952  +
jmp loc_40C954  +
mov eax edi +
push eax  +
push edi  +
push edx  +
call sub_4113F4  +
mov eax [esp+0Ch+arg_0] +
mov edi [esp+0Ch+arg_4] +
test [esp+0Ch+arg_8] 2 +
jz loc_40C9C8  +
cmp edi 1 +
jnz loc_40C995  +
cmp dword ptr [ebx+14h] 0 +
jz loc_40C983  +
mov esi [ebx+14h] +
add esi eax +
sub esi [ebx+8] +
jmp loc_40C995  +
cmp dword ptr [ebx+20h] 0 +
jz loc_40C993  +
mov esi [ebx+20h] +
add esi eax +
sub esi [ebx+8] +
jmp loc_40C995  +
mov esi eax +
test esi esi +
js loc_40C9A3  +
mov ecx [ebx+0Ch] +
sub ecx [ebx+8] +
cmp ecx esi +
jge loc_40C9AA  +
mov esi 0FFFFFFFFh +
jmp loc_40C9C8  +
mov edi [ebx+8] +
add edi esi +
mov edx [ebx+18h] +
test edx edx +
jz loc_40C9BC  +
cmp edx edi +
jbe loc_40C9BC  +
jmp loc_40C9BF  +
mov edx [ebx+0Ch] +
mov ecx ebx +
push edx  +
push edi  +
call sub_411438  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ecx  +
retn 0Ch  +
***
mov edx large fs:0 +
mov eax offset unk_422370 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_40CAA4  +
call sub_40CAAC  +
test [esp+4+arg_0] 1 +
jz loc_40CAA4  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+48h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
mov eax offset unk_4223A8 +
jmp sub_41245C  +
***
mov ebx ecx +
mov edx [eax+4] +
lea ecx [ebx+8] +
mov dword ptr [edx+ebx+4] offset off_422664 +
mov dword ptr [ebx] offset off_42266C +
call sub_40C5B4  +
pop ebx  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_40CC3D  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push ecx  +
push ebx  +
push esi  +
cmp [ebp+arg_4] 0 +
jz loc_40CBCE  +
mov dword ptr [ecx+4] offset unk_422670 +
mov dword ptr [ecx+4Ch] offset unk_422678 +
lea ecx [ecx+58h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
push 0  +
push 0  +
mov ecx [ebp+var_18] +
push [ebp+arg_0]  +
call sub_40C9D4  +
mov [ebp+var_4] 1 +
push 0  +
mov eax [ebp+var_18] +
add eax 8 +
push eax  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_40D55C  +
mov [ebp+var_4] 2 +
mov edx [ebp+var_18] +
mov ebx [ebp+var_18] +
mov dword ptr [edx+48h] offset off_4226C8 +
mov esi [ebx+4] +
mov eax [esi+4] +
mov ecx [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+ecx+4] offset off_4226D0 +
mov dword ptr [edx] offset off_4226D8 +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
mov eax offset unk_4223E0 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_40CC68  +
call sub_409028  +
test [esp+4+arg_0] 1 +
jz loc_40CC68  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov edx large fs:0 +
mov eax offset unk_422428 +
jmp sub_41245C  +
***
mov dword ptr [ecx+48h] offset off_4226C8 +
mov eax [ebx+4] +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_4226D0 +
mov dword ptr [ebx] offset off_4226D8 +
lea ecx [ebx+48h] +
call sub_40D5F8  +
mov ecx ebx +
call sub_40CB68  +
pop ebx  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_40CE38  +
push edx  +
mov large fs:0 esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_18] ecx +
cmp [ebp+arg_C] 0 +
jz loc_40CDA8  +
mov dword ptr [ecx+4] offset unk_4226DC +
mov dword ptr [ecx+4Ch] offset unk_4226E4 +
lea ecx [ecx+50h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
push ebx  +
push [ebp+arg_4]  +
push ebx  +
mov ecx [ebp+var_18] +
call sub_40C9D4  +
mov [ebp+var_4] 1 +
push 0  +
mov eax [ebp+var_18] +
add eax 8 +
push eax  +
mov ecx [ebp+var_18] +
add ecx 48h +
mov [ebp+var_1C] eax +
call sub_41192C  +
mov [ebp+var_4] 2 +
mov edx [ebp+var_18] +
mov esi [ebp+var_18] +
mov dword ptr [edx+48h] offset off_422734 +
mov edi [esi+4] +
mov eax [edi+4] +
test [ebp+arg_8] 0Ch +
mov ecx [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+ecx+4] offset off_42273C +
mov dword ptr [edx] offset off_422744 +
jz loc_40CE22  +
push 2  +
push 0  +
push ebx  +
call sub_40A110  +
add esp 4 +
push eax  +
mov ecx [ebp+var_1C] +
mov esi [ecx] +
call dword ptr [esi+1Ch]  +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax offset unk_422470 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_40CE64  +
call sub_40CE6C  +
test [esp+4+arg_0] 1 +
jz loc_40CE64  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+50h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_40CF2C  +
push edx  +
mov large fs:0 esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_18] ecx +
cmp [ebp+arg_0] 0 +
jz loc_40CEC4  +
mov dword ptr [ecx+4] offset unk_4226DC +
mov dword ptr [ecx+4Ch] offset unk_4226E4 +
lea ecx [ecx+50h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
call sub_40CAC0  +
mov [ebp+var_4] 1 +
push 0  +
mov eax [ebp+var_18] +
add eax 8 +
push eax  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_41192C  +
mov [ebp+var_4] 2 +
mov edx [ebp+var_18] +
mov ebx [ebp+var_18] +
mov dword ptr [edx+48h] offset off_422734 +
mov esi [ebx+4] +
mov eax [esi+4] +
mov ecx [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+ecx+4] offset off_42273C +
mov dword ptr [edx] offset off_422744 +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov eax offset unk_4224B8 +
jmp sub_41245C  +
***
mov dword ptr [ecx+48h] offset off_422734 +
mov eax [ebx+4] +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_42273C +
mov dword ptr [ebx] offset off_422744 +
lea ecx [ebx+48h] +
call sub_4119BC  +
mov ecx ebx +
call sub_40CB68  +
pop ebx  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_40D025  +
push edx  +
mov large fs:0 esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_18] ecx +
cmp [ebp+arg_0] 0 +
jz loc_40CFB3  +
mov dword ptr [ecx+4] offset unk_422748 +
mov dword ptr [ecx+4Ch] offset unk_422750 +
mov dword ptr [ecx+5Ch] offset unk_422758 +
lea ecx [ecx+60h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
call sub_40CAC0  +
mov [ebp+var_4] 1 +
push 0  +
mov eax [ebp+var_18] +
add eax 8 +
push eax  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_411B54  +
mov [ebp+var_4] 2 +
mov edx [ebp+var_18] +
mov ebx [ebp+var_18] +
mov dword ptr [edx+58h] offset off_4227B8 +
mov esi [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [ebx+48h] offset off_4227C0 +
mov eax [esi+4] +
mov ecx [eax+4] +
mov dword ptr [ecx+edx+4] offset off_4227C8 +
mov ebx [ebp+var_18] +
mov dword ptr [ebx] offset off_4227D0 +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov eax offset unk_422500 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_40D050  +
call sub_40D058  +
test [esp+4+arg_0] 1 +
jz loc_40D050  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+60h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_40D155  +
push edx  +
mov large fs:0 esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_18] ecx +
cmp [ebp+arg_C] 0 +
jz loc_40D0BB  +
mov dword ptr [ecx+4] offset unk_422748 +
mov dword ptr [ecx+4Ch] offset unk_422750 +
mov dword ptr [ecx+5Ch] offset unk_422758 +
lea ecx [ecx+60h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
push ebx  +
push [ebp+arg_4]  +
push ebx  +
mov ecx [ebp+var_18] +
call sub_40C9D4  +
mov [ebp+var_4] 1 +
push 0  +
mov eax [ebp+var_18] +
add eax 8 +
push eax  +
mov ecx [ebp+var_18] +
add ecx 48h +
mov [ebp+var_1C] eax +
call sub_411B54  +
mov [ebp+var_4] 2 +
mov edx [ebp+var_18] +
mov esi [ebp+var_18] +
mov dword ptr [edx+58h] offset off_4227B8 +
mov edi [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [esi+48h] offset off_4227C0 +
mov eax [edi+4] +
mov ecx [eax+4] +
mov dword ptr [ecx+edx+4] offset off_4227C8 +
mov esi [ebp+var_18] +
mov dword ptr [esi] offset off_4227D0 +
test [ebp+arg_8] 0Ch +
jz loc_40D13F  +
push 2  +
push 0  +
push ebx  +
call sub_40A110  +
add esp 4 +
push eax  +
mov ecx [ebp+var_1C] +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax offset unk_422548 +
jmp sub_41245C  +
***
mov dword ptr [ecx+58h] offset off_4227B8 +
mov eax [ebx+4] +
lea ecx [ebx+48h] +
mov dword ptr [ebx+48h] offset off_4227C0 +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_4227C8 +
mov dword ptr [ebx] offset off_4227D0 +
call sub_411D08  +
mov ecx ebx +
call sub_40CB68  +
pop ebx  +
retn   +
***
call sub_41202C  +
pop eax  +
retn   +
***
call sub_411E28  +
push offset sub_40D198  +
call sub_4096D4  +
add esp 4 +
pop eax  +
retn   +
***
mov dword ptr [ecx] offset off_4227FC +
push ebx  +
mov ebx ecx +
jz loc_40D1F4  +
call sub_40D238  +
test [esp+4+arg_0] 1 +
jz loc_40D1F4  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
xor eax eax +
mov [edx+3Ch] eax +
mov ebx [esp+arg_0] +
mov [edx+14h] eax +
mov [edx+0Ch] eax +
mov dword ptr [edx+10h] 100h +
mov dword ptr [edx+18h] 11h +
mov dword ptr [edx+1Ch] 6 +
mov [edx+20h] eax +
mov dword ptr [edx+24h] 20h +
mov [edx+8] eax +
mov [edx+4] ebx +
pop ebx  +
retn 4  +
***
test eax eax +
mov dword ptr [ecx] offset off_4227FC +
jz loc_40D24F  +
push eax  +
call sub_40971C  +
add esp 4 +
pop eax  +
retn   +
***
push ebx  +
mov edx ecx +
push ebx  +
mov ebx [esp+8+arg_0] +
mov [esp+8+var_4] eax +
mov [edx+18h] ebx +
test [esp+8+arg_0] 1 +
jz loc_40D2C1  +
or dword ptr [edx+10h] 100h +
jmp loc_40D2C8  +
and dword ptr [edx+10h] 0FFFFFEFFh +
mov eax [esp+8+var_4] +
pop ebx  +
pop ecx  +
retn 4  +
***
mov edx ecx +
mov ebx ecx +
push esi  +
mov edx [ebx+0Ch] +
and eax 0FFh +
push edi  +
and edx 80h +
or eax edx +
mov esi [ebx+10h] +
and esi 0FFFFFF00h +
or esi eax +
mov [ebx+0Ch] eax +
mov edi [ebx+14h] +
and edi 0FFFFFF00h +
or edi [ebx+0Ch] +
mov [ebx+10h] esi +
mov [ebx+14h] edi +
pop edi  +
pop esi  +
pop ebx  +
retn 4  +
***
mov eax ebx +
push esi  +
mov edx ecx +
and eax 0FFh +
push edi  +
mov esi ebx +
and esi 0FFFFFCFFh +
or [edx+0Ch] eax +
mov edi ebx +
and edi 0FFFFFDFFh +
or [edx+10h] esi +
or [edx+14h] edi +
pop edi  +
pop esi  +
pop ebx  +
retn 4  +
***
and eax 100h +
mov [esp+4+var_4] eax +
mov edx ecx +
cmp [esp+4+arg_0] 0 +
jz loc_40D3A1  +
or dword ptr [edx+10h] 100h +
or dword ptr [edx+18h] 1 +
jmp loc_40D3AF  +
and dword ptr [edx+10h] 0FFFFFEFFh +
and dword ptr [edx+18h] 0FFFFFFFEh +
cmp [esp+4+var_4] 1 +
sbb eax eax +
inc eax  +
pop ecx  +
retn 4  +
***
call sub_41202C  +
pop eax  +
retn   +
***
call sub_411E28  +
push offset sub_40D3BC  +
call sub_4096D4  +
add esp 4 +
pop eax  +
retn   +
***
sub esp 10h +
push ebx  +
mov ebx [esp+14h+arg_0] +
push esi  +
cmp ds:Locale 0 +
jz loc_40D402  +
cmp ebx 100h +
jge loc_40D430  +
mov eax 1 +
cmp ds:cchMultiByte eax +
jle loc_40D41F  +
push eax  +
push ebx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_40D492  +
jmp loc_40D42B  +
mov esi ds:off_421F98 +
test [esi+ebx*2] ax +
jz loc_40D492  +
add ebx 20h +
jmp loc_40D492  +
mov eax ebx +
sar eax 8 +
mov ecx ds:off_421F98 +
mov [esp+18h+var_C] al +
and eax 0FFh +
xor esi esi +
test word ptr [ecx+eax*2] 8000h +
jz loc_40D459  +
mov ecx esi +
mov dl [esp+18h+var_C] +
inc esi  +
mov [esp+ecx+18h+SrcStr] dl +
mov edx esi +
inc esi  +
mov [esp+edx+18h+SrcStr] bl +
mov [esp+esi+18h+SrcStr] 0 +
push 4  +
lea ecx [esp+1Ch+DestStr] +
push ecx  +
push esi  +
lea edx [esp+24h+SrcStr] +
push edx  +
push 100h  +
push ds:Locale  +
call LCMapStringA  +
movzx ebx [esp+18h+DestStr] +
shl ebx 8 +
movzx ecx byte ptr [esp+15h] +
or ebx ecx +
pop esi  +
mov eax ebx +
pop ebx  +
add esp 10h +
retn   +
***
add ecx 0FFFFFFF0h +
add ecx 0FFFFFFF0h +
mov edx large fs:0 +
mov eax offset unk_422800 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_40D540  +
call sub_40D548  +
test [esp+4+arg_0] 1 +
jz loc_40D540  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+10h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
mov eax offset unk_422828 +
jmp sub_41245C  +
***
mov edx ecx +
mov ebx [eax+4] +
mov dword ptr [ebx+edx+4] offset off_4228C4 +
mov dword ptr [edx] offset off_4228CC +
pop ebx  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_40D6D3  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push ecx  +
push ebx  +
push esi  +
cmp [ebp+arg_C] 0 +
jz loc_40D64F  +
mov dword ptr [ecx+4] offset unk_4228B0 +
lea ecx [ecx+10h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
mov eax [ebp+var_18] +
mov edx [eax+4] +
mov ebx [edx+4] +
mov esi [ebp+var_18] +
mov ecx [ebp+var_18] +
mov dword ptr [ebx+esi+4] offset off_4228C4 +
mov dword ptr [ecx] offset off_4228CC +
mov eax [ebp+var_18] +
mov edx [eax+4] +
push [ebp+arg_0]  +
mov ecx [edx+4] +
mov ebx [ebp+var_18] +
lea ecx [ebx+ecx+4] +
call sub_40D1FC  +
mov eax [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+8] 0 +
mov esi [edx+4] +
mov ecx [esi+4] +
push [ebp+arg_4]  +
mov ebx [ebp+var_18] +
lea ecx [ebx+ecx+4] +
call sub_40D37C  +
mov eax [ebp+var_18] +
mov edx [eax+4] +
push [ebp+arg_8]  +
mov ecx [edx+4] +
mov ebx [ebp+var_18] +
lea ecx [ebx+ecx+4] +
call sub_40D254  +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax offset unk_422850 +
jmp sub_41245C  +
***
push esi  +
mov eax [ecx+20h] +
cmp eax [ebx+24h] +
jb loc_40D7C2  +
mov edx [ebx] +
call dword ptr [edx+0Ch]  +
jmp loc_40D7C5  +
inc dword ptr [ebx+20h]  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx ecx +
mov edx [ebx+4] +
push esi  +
mov [ebx+8] eax +
mov esi [edx+4] +
add esi ebx +
push edi  +
cmp [esi+10h] eax +
jnz loc_40D838  +
mov edi [esi+0Ch] +
test edi edi +
jz loc_40D80D  +
cmp [esp+0Ch+arg_0] eax +
jz loc_40D806  +
mov edx [esi+8] +
mov esi [edx+24h] +
mov edx [edx+20h] +
cmp esi edx +
jbe loc_40D7FE  +
sub esi edx +
jmp loc_40D800  +
mov esi eax +
cmp esi [esp+0Ch+arg_0] +
jge loc_40D80D  +
mov ecx edi +
call sub_4119DC  +
cmp [esp+0Ch+arg_0] 0 +
jnz loc_40D82B  +
mov eax [ebx+4] +
mov edi [eax+4] +
test dword ptr [edi+ebx+14h] 100h +
jz loc_40D82B  +
mov ecx ebx +
call sub_40D6E0  +
mov edx [ebx+4] +
mov esi [edx+4] +
cmp dword ptr [esi+ebx+10h] 0 +
jz loc_40D852  +
push 2  +
mov edi [ebx+4] +
mov ecx [edi+4] +
lea ecx [ebx+ecx+4] +
call sub_40D34C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn 4  +
pop edi  +
mov eax 1 +
pop esi  +
pop ebx  +
pop ecx  +
retn 4  +
***
sub esp 0Ch +
push ebx  +
mov ebx ecx +
mov edx [ebx+4] +
push ebp  +
mov edx [edx+4] +
mov ebp [esp+14h+arg_0] +
push esi  +
push edi  +
mov edi [esp+1Ch+arg_4] +
test dword ptr [edx+ebx+14h] 0FFFFFEFFh +
jz loc_40D892  +
push 1  +
call sub_40D7C8  +
test eax eax +
jz loc_40D955  +
jmp loc_40D89A  +
or esp esp +
jz loc_40D955  +
mov [esp+1Ch+var_8] ebp +
xor ecx ecx +
dec edi  +
mov [esp+1Ch+var_4] ecx +
mov [ebx+8] ecx +
jle loc_40D92E  +
mov edx [ebx+4] +
mov ecx [edx+4] +
mov esi [ecx+ebx+8] +
mov edx [esi+20h] +
cmp edx [esi+24h] +
jb loc_40D8C9  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_40D8CC  +
movzx eax byte ptr [edx] +
cmp eax 0FFFFFFFFh +
mov [esp+1Ch+var_4] eax +
jz loc_40D92E  +
movsx edx [esp+1Ch+arg_8] +
mov [esp+1Ch+var_C] edx +
inc dword ptr [ebx+8]  +
mov ecx [ebx+4] +
mov edx [ecx+4] +
mov ecx [edx+ebx+8] +
call sub_40D7B0  +
mov edx [esp+1Ch+var_C] +
cmp edx [esp+1Ch+var_4] +
jz loc_40D92E  +
mov cl byte ptr [esp+1Ch+var_4] +
dec edi  +
mov [ebp+0] cl +
inc ebp  +
test edi edi +
jle loc_40D92E  +
mov edx [ebx+4] +
mov ecx [edx+4] +
mov esi [ecx+ebx+8] +
mov edx [esi+20h] +
cmp edx [esi+24h] +
jb loc_40D922  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_40D925  +
movzx eax byte ptr [edx] +
cmp eax 0FFFFFFFFh +
mov [esp+1Ch+var_4] eax +
jnz loc_40D8DE  +
cmp [esp+1Ch+var_4] 0FFFFFFFFh +
jnz loc_40D955  +
cmp ebp [esp+1Ch+var_8] +
mov esi 3 +
jz loc_40D945  +
mov esi 1 +
mov ecx [ebx+4] +
mov ecx [ecx+4] +
push esi  +
lea ecx [ebx+ecx+4] +
call sub_40D34C  +
mov byte ptr [ebp+0] 0 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 0Ch +
retn 0Ch  +
***
mov edx large fs:0 +
mov eax offset unk_422878 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_40DA08  +
call sub_40DA10  +
test [esp+4+arg_0] 1 +
jz loc_40DA08  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+10h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov ebx ecx +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_42290C +
mov dword ptr [ebx] offset off_422914 +
call sub_40D5F8  +
pop ebx  +
retn   +
***
mov ebx ecx +
mov eax [ebx+4] +
push [esp+arg_0]  +
mov ecx [eax+4] +
lea ecx [ebx+ecx+4] +
call sub_40D1FC  +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
call sub_41202C  +
pop eax  +
retn   +
***
call sub_411E28  +
push offset sub_40DA64  +
call sub_4096D4  +
add esp 4 +
pop eax  +
retn   +
***
mov eax [esp+4] +
cdq   +
xor eax edx +
sub eax edx +
retn   +
***
mov eax [esp+4] +
mov edx [esp+8] +
test edx edx +
jns locret_40DAB1  +
neg edx  +
neg eax  +
sbb edx 0 +
retn   +
***
mov esi [esp+arg_0] +
cld   +
lods   +
cmp al 20h +
jz loc_40DABB  +
cmp al 9 +
jb loc_40DAC8  +
cmp al 0Dh +
jbe loc_40DABB  +
xor ecx ecx +
mov ebx ecx +
movzx eax al +
cmp al 2Bh +
jz loc_40DAE0  +
cmp al 2Dh +
jnz loc_40DAE1  +
dec ebx  +
lods   +
sub al 30h +
jb loc_40DAF6  +
cmp al 0Ah +
jnb loc_40DAF6  +
lea ecx [ecx+ecx*4] +
add ecx ecx +
add ecx eax +
jmp loc_40DAE0  +
mov eax ecx +
xor eax ebx +
sub eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov ds:dword_422918 1 +
cmp ds:dword_422920 0 +
jnz loc_40DB42  +
cmp ds:dword_421BB8 0 +
jz loc_40DB42  +
mov eax ds:dword_421BB8 +
cmp dword ptr [eax] 0 +
jz loc_40DB42  +
mov ecx ds:dword_421BB8 +
call dword ptr [ecx]  +
add ds:dword_421BB8 0FFFFFFFCh +
mov edx ds:dword_421BB8 +
cmp dword ptr [edx] 0 +
jnz loc_40DB28  +
cmp ds:dword_428604 0 +
jz loc_40DB5A  +
push [esp+arg_0]  +
call ds:dword_428604  +
add esp 4 +
jmp loc_40DB89  +
call sub_409F8C  +
cmp ds:dword_422920 0 +
jnz loc_40DB89  +
cmp ds:off_4232D0 0 +
jz loc_40DB77  +
call ds:off_4232D0  +
cmp ds:dword_42291C 0 +
jnz loc_40DB89  +
push [esp+arg_0]  +
call loc_40DCA4  +
xor ebx ebx +
mov ds:dword_422920 ebx +
mov ds:dword_42291C ebx +
pop ebx  +
pop eax  +
retn   +
***
push eax  +
mov eax [esp+8+ExceptionInfo] +
mov edx [eax] +
push ebx  +
mov eax [edx] +
push esi  +
xor esi esi +
cmp eax 0C000008Dh +
jz loc_40DBF4  +
cmp eax 0C000008Eh +
jz loc_40DBFB  +
cmp eax 0C000008Fh +
jz loc_40DC02  +
cmp eax 0C0000090h +
jz loc_40DC09  +
cmp eax 0C0000091h +
jz loc_40DC10  +
cmp eax 0C0000092h +
jz loc_40DC17  +
cmp eax 0C0000093h +
jz loc_40DC1E  +
cmp eax 0C0000005h +
jz loc_40DC3A  +
cmp eax 0C000001Dh +
jz loc_40DC51  +
cmp eax 0C0000096h +
jz loc_40DC51  +
jmp loc_40DC68  +
mov ecx 82h +
jmp loc_40DC23  +
mov ecx 83h +
jmp loc_40DC23  +
mov ecx 86h +
jmp loc_40DC23  +
mov ecx 81h +
jmp loc_40DC23  +
mov ecx 84h +
jmp loc_40DC23  +
mov ecx 8Ah +
jmp loc_40DC23  +
mov ecx 85h +
mov ebx ds:dword_423990 +
mov esi 8 +
mov ds:dword_423990 0 +
jmp loc_40DC6A  +
mov ebx ds:dword_423998 +
mov esi 0Bh +
mov ds:dword_423998 0 +
jmp loc_40DC6A  +
mov ebx ds:dword_423994 +
mov esi 4 +
mov ds:dword_423994 0 +
jmp loc_40DC6A  +
xor ebx ebx +
test ebx ebx +
jz loc_40DC94  +
cmp esi 8 +
jnz loc_40DC83  +
mov [esp+10h+var_4] ecx +
push [esp+10h+var_4]  +
push esi  +
call ebx  +
add esp 8 +
jmp loc_40DC89  +
push esi  +
call ebx  +
add esp 4 +
pop esi  +
mov eax 0FFFFFFFFh +
pop ebx  +
add esp 8 +
retn   +
push [esp+10h+ExceptionInfo]  +
call UnhandledExceptionFilter  +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
push dword ptr [esp+4]  +
call ExitProcess  +
mov eax ds:dword_422924 +
or eax eax +
jnz loc_40DCDE  +
mov edi offset dword_4265F4 +
mov ecx offset unk_428A10 +
sub ecx edi +
jcxz loc_40DCDE  +
xor eax eax +
cld   +
stos   +
mov ecx 1 +
mov ds:dword_422924 ecx +
pop ecx  +
pop edi  +
retn   +
***
jnz loc_40DD2C  +
push 8Ch  +
push 0FFFFFFFFh  +
push offset word_428608  +
call sub_4097E4  +
mov eax offset unk_4289FA +
push 10h  +
push eax  +
call GetTickCount  +
push eax  +
call sub_412E10  +
mov ecx offset unk_4289FA +
push ecx  +
call sub_40A110  +
mov ds:dword_4287AC eax +
inc ds:dword_422928  +
add esp 1Ch +
pop eax  +
retn   +
***
push ebx  +
sub esp 1Ch +
push 0FFFFFFFFh  +
push 0  +
push 1  +
mov eax [esp+0Ch+arg_0] +
push ds:hObject[eax*4]  +
call ReleaseSemaphore  +
add esp 4 +
retn   +
***
jnz loc_40DE59  +
call sub_40F948  +
inc ds:dword_42292C  +
pop eax  +
retn   +
***
sub esp 94h +
mov ecx 20h +
xor eax eax +
push ebx  +
xor ebx ebx +
push edi  +
lea edi [esp+9Ch+ReturnedString] +
stos   +
call __imp_GetVersion  +
mov [esp+9Ch+var_8] eax +
test word ptr [esp+9Ch+var_8+2] 8000h +
jz loc_40DE96  +
cmp byte ptr [esp+9Ch+var_8] 4 +
jb loc_40DEA0  +
mov edi 10Fh +
jmp loc_40DFA3  +
push 1  +
call sub_40F9A0  +
add esp 4 +
mov ebx eax +
test eax eax +
jz loc_40DEDC  +
push 0  +
push ebx  +
call GetSystemDirectoryA  +
mov edi eax +
push offset aWin32s_ini  +
call sub_40A110  +
add esp 4 +
lea ecx [edi+eax+1] +
push ecx  +
push ebx  +
call sub_40B310  +
add esp 8 +
mov ebx eax +
test eax eax +
jnz loc_40DEE3  +
xor edi edi +
jmp loc_40DFB0  +
push edi  +
push ebx  +
call GetSystemDirectoryA  +
push ebx  +
call sub_40A110  +
add esp 4 +
test eax eax +
mov [esp+9Ch+var_4] eax +
jz loc_40DF28  +
mov edx [esp+9Ch+var_4] +
lea ecx [ebx+edx] +
push ecx  +
push ebx  +
call sub_412E6C  +
mov edi eax +
add esp 8 +
cmp byte ptr [edi] 5Ch +
jz loc_40DF28  +
push offset asc_42293C  +
push ebx  +
call sub_40BBE0  +
add esp 8 +
push offset aWin32s_ini_0  +
push ebx  +
call sub_40BBE0  +
push ebx  +
push 80h  +
lea edx [esp+0ACh+ReturnedString] +
push edx  +
push offset Default  +
push offset KeyName  +
push offset AppName  +
call GetPrivateProfileStringA  +
lea ecx [esp+0A4h+ReturnedString] +
mov [esp+0A4h+var_10] ecx +
push 0Ah  +
lea edx [esp+0A8h+var_10] +
push edx  +
push ecx  +
call sub_412ED4  +
mov [esp+0B0h+var_C] eax +
inc [esp+0B0h+var_10]  +
push 0Ah  +
lea ecx [esp+0B4h+var_10] +
push ecx  +
push [esp+0B8h+var_10]  +
call sub_412ED4  +
mov edx [esp+0BCh+var_C] +
mov edi eax +
shl edx 8 +
add edi edx +
add esp 20h +
test ebx ebx +
jz loc_40DFB0  +
push ebx  +
call sub_40972C  +
add esp 4 +
mov eax edi +
pop edi  +
pop ebx  +
add esp 94h +
retn   +
***
cmp eax 10Fh +
jge loc_40DFEE  +
push 10h  +
push offset Caption  +
push offset aWrongWin32sVer  +
push 0  +
call MessageBoxA  +
push offset unk_42295E  +
call sub_40FC90  +
add esp 4 +
xor eax eax +
pop ecx  +
retn   +
pop ecx  +
mov eax 1 +
retn   +
***
sub esp 80h +
push ebx  +
push ebp  +
push esi  +
push edi  +
mov ecx [esp+90h+arg_14] +
mov edx [ecx] +
mov [esp+90h+var_30] edx +
mov edi [esp+90h+arg_4] +
mov esi [esp+90h+arg_8] +
test edi 80h +
mov ebp [esp+90h+arg_10] +
jnz loc_40E031  +
mov esi 6 +
test edi 20h +
jz loc_40E048  +
mov edx [esp+90h+arg_C] +
fld  tbyte ptr [edx] +
fstp  [esp+90h+var_3C] +
jmp loc_40E055  +
mov ecx [esp+90h+arg_C] +
fld  qword ptr [ecx] +
fstp  [esp+90h+var_3C] +
push dword ptr [esp+90h+var_3C+8]  +
push dword ptr [esp+94h+var_3C+4]  +
push dword ptr [esp+98h+var_3C]  +
call sub_413A04  +
add esp 0Ch +
cmp eax 2 +
mov [esp+90h+var_78] eax +
jg loc_40E0C7  +
fld  [esp+90h+var_3C] +
mov esi [esp+90h+var_78] +
and edi 0FFFFFFB7h +
fstp  [esp+90h+var_18] +
movsx ecx word ptr [esp+90h+var_18+8] +
and ecx 8000h +
push ecx  +
push edi  +
call sub_40A490  +
mov edx ds:dword_4229E8[esi+esi*4] +
mov [esp+90h+var_6C] eax +
mov [ebp+0] edx +
test [esp+90h+arg_0] 20h +
jnz loc_40E0BB  +
and dword ptr [ebp+0] 0DFDFDFDFh +
movsx ebx ds:byte_4229F8[esi] +
jmp loc_40E67F  +
mov eax [esp+90h+arg_0] +
cmp eax 66h +
jz loc_40E113  +
cmp eax 46h +
jz loc_40E113  +
cmp eax 65h +
jz loc_40E25C  +
cmp eax 45h +
jz loc_40E25C  +
cmp eax 47h +
jz loc_40E379  +
cmp eax 67h +
jz loc_40E379  +
cmp eax 61h +
jz loc_40E3D6  +
cmp eax 41h +
jz loc_40E3D6  +
jmp loc_40E67F  +
push 1  +
lea edx [esp+94h+var_68] +
push edx  +
push dword ptr [esp+98h+var_3C+8]  +
push dword ptr [esp+9Ch+var_3C+4]  +
push dword ptr [esp+0A0h+var_3C]  +
push esi  +
lea ecx [esp+0A8h+var_74] +
push ecx  +
lea edx [esp+0ACh+var_70] +
push edx  +
call sub_413808  +
mov ebx eax +
push [esp+90h+var_70]  +
push edi  +
call sub_40A490  +
mov [esp+90h+var_6C] eax +
mov [esp+90h+var_40] ebp +
cmp [esp+90h+var_74] 0 +
jg loc_40E15E  +
mov ecx [esp+90h+var_40] +
inc ecx  +
mov [esp+90h+var_40] ecx +
dec ecx  +
mov byte ptr [ecx] 30h +
cmp [esp+90h+var_74] 0 +
jle loc_40E1A0  +
mov edx [esp+90h+var_30] +
lea eax [edx+ebp-1] +
cmp eax [esp+90h+var_40] +
jbe loc_40E697  +
cmp byte ptr [ebx] 0 +
jz loc_40E184  +
mov edx ebx +
inc ebx  +
movsx ecx byte ptr [edx] +
jmp loc_40E189  +
mov ecx 30h +
mov edx [esp+90h+var_40] +
inc edx  +
mov [esp+90h+var_40] edx +
dec edx  +
mov [edx] cl +
dec [esp+90h+var_74]  +
cmp [esp+90h+var_74] 0 +
jg loc_40E16D  +
test esi esi +
jg loc_40E1B0  +
test edi 8 +
jz loc_40E36E  +
mov ecx ds:lpMultiByteStr +
mov dl [ecx] +
mov ecx [esp+90h+var_40] +
inc ecx  +
mov [esp+90h+var_40] ecx +
dec ecx  +
mov [ecx] dl +
xor edx edx +
cmp [esp+90h+var_74] edx +
jns loc_40E1FD  +
test esi esi +
jle loc_40E1FD  +
mov eax [esp+90h+var_30] +
add eax ebp +
cmp eax [esp+90h+var_40] +
jbe loc_40E697  +
mov ecx [esp+90h+var_40] +
inc ecx  +
dec esi  +
mov [esp+90h+var_40] ecx +
dec ecx  +
mov byte ptr [ecx] 30h +
inc [esp+90h+var_74]  +
cmp [esp+90h+var_74] 0 +
jns loc_40E1FD  +
test esi esi +
jg loc_40E1D6  +
mov ecx [esp+90h+var_30] +
add ecx ebp +
sub ecx [esp+90h+var_40] +
cmp ecx esi +
jl loc_40E697  +
test esi esi +
jz loc_40E236  +
cmp byte ptr [ebx] 0 +
jz loc_40E220  +
mov ecx ebx +
inc ebx  +
movsx ecx byte ptr [ecx] +
jmp loc_40E225  +
mov ecx 30h +
mov eax [esp+90h+var_40] +
inc eax  +
mov [esp+90h+var_40] eax +
dec eax  +
dec esi  +
mov [eax] cl +
test esi esi +
jnz loc_40E213  +
mov ebx edi +
and ebx 1008h +
cmp ebx 1000h +
jnz loc_40E36E  +
push [esp+90h+var_40]  +
call sub_40E7B0  +
mov [esp+90h+var_40] eax +
jmp loc_40E36E  +
push 0  +
lea edx [esp+94h+var_68] +
lea ecx [esi+1] +
push edx  +
push dword ptr [esp+98h+var_3C+8]  +
push dword ptr [esp+9Ch+var_3C+4]  +
push dword ptr [esp+0A0h+var_3C]  +
push ecx  +
lea edx [esp+0A8h+var_74] +
push edx  +
lea ecx [esp+0ACh+var_70] +
push ecx  +
call sub_413808  +
mov ebx eax +
push [esp+90h+var_70]  +
push edi  +
call sub_40A490  +
mov dl [ebx] +
lea ecx [ebp+1] +
mov [esp+90h+var_6C] eax +
mov [ebp+0] dl +
mov [esp+90h+var_40] ecx +
test edi 8 +
jnz loc_40E2C1  +
test esi esi +
jle loc_40E326  +
test edi 1000h +
jz loc_40E2C1  +
cmp esi 1 +
jnz loc_40E2C1  +
cmp [esp+90h+arg_18] 0 +
jz loc_40E326  +
mov edx ds:lpMultiByteStr +
mov cl [edx] +
mov [ebp+1] cl +
mov edx [esp+90h+var_30] +
add edx 0FFFFFFF9h +
cmp edx esi +
jl loc_40E697  +
inc [esp+90h+var_40]  +
inc ebx  +
xor eax eax +
test esi esi +
jle loc_40E309  +
cmp byte ptr [ebx] 0 +
jz loc_40E2F3  +
mov edx ebx +
inc ebx  +
movsx ecx byte ptr [edx] +
jmp loc_40E2F8  +
mov ecx 30h +
mov edx [esp+90h+var_40] +
inc edx  +
mov [esp+90h+var_40] edx +
dec edx  +
inc eax  +
mov [edx] cl +
cmp eax esi +
jl loc_40E2E6  +
mov ecx edi +
and ecx 1008h +
cmp ecx 1000h +
jnz loc_40E326  +
push [esp+90h+var_40]  +
call sub_40E7B0  +
mov [esp+90h+var_40] eax +
test esi esi +
jnz loc_40E33A  +
test edi 80h +
jz loc_40E36E  +
test edi 1000h +
jnz loc_40E36E  +
mov ebx [esp+90h+var_40] +
inc ebx  +
mov al byte ptr [esp+90h+arg_0] +
mov [esp+90h+var_40] ebx +
dec ebx  +
fld  [esp+90h+var_3C] +
fldz   +
fucompp   +
mov [ebx] al +
fnstsw  ax +
sahf   +
jz loc_40E35E  +
dec [esp+90h+var_74]  +
lea esi [esp+90h+var_40] +
push esi  +
push [esp+94h+var_74]  +
push 1  +
call sub_40E6B8  +
mov ebx [esp+90h+var_40] +
sub ebx ebp +
jmp loc_40E67F  +
or edi 1000h +
test esi esi +
jnz loc_40E388  +
mov esi 1 +
push 0  +
lea edx [esp+94h+var_68] +
push edx  +
push dword ptr [esp+98h+var_3C+8]  +
push dword ptr [esp+9Ch+var_3C+4]  +
push dword ptr [esp+0A0h+var_3C]  +
push esi  +
lea ecx [esp+0A8h+var_74] +
push ecx  +
lea edx [esp+0ACh+var_70] +
push edx  +
call sub_413808  +
mov ecx [esp+90h+var_74] +
mov ebx eax +
cmp ecx 0FFFFFFFDh +
jl loc_40E3BC  +
cmp [esp+90h+var_74] esi +
jle loc_40E3CF  +
cmp esi 1 +
jle loc_40E3C2  +
dec esi  +
add [esp+90h+arg_0] 0FFFFFFFEh +
jmp loc_40E284  +
sub esi ecx +
jmp loc_40E113  +
mov [esp+90h+arg_4] edi +
mov dx word ptr [esp+90h+var_3C+8] +
mov ecx dword ptr [esp+90h+var_3C+4] +
mov edi dword ptr [esp+90h+var_3C] +
and edx 7FFFh +
add edx 0FFFFC001h +
mov [esp+90h+var_74] edx +
cmp dword ptr [esp+90h+var_3C+4] 0 +
jl loc_40E41C  +
jg loc_40E40A  +
cmp dword ptr [esp+90h+var_3C] 0 +
jbe loc_40E41C  +
add edi edi +
rcl ecx 1 +
dec [esp+90h+var_74]  +
test ecx ecx +
jg loc_40E40A  +
jl loc_40E41C  +
test edi edi +
ja loc_40E40A  +
mov [esp+90h+arg_10] ebp +
mov ebp [esp+90h+arg_4] +
and ebp 80h +
mov [esp+90h+var_20] edi +
test ecx ecx +
mov [esp+90h+var_1C] ecx +
jg loc_40E449  +
jl loc_40E442  +
test edi edi +
jnb loc_40E449  +
mov byte ptr [esp+90h+var_68] 31h +
jmp loc_40E44E  +
mov byte ptr [esp+90h+var_68] 30h +
add edi edi +
lea ebx [esp+90h+var_68+1] +
rcl ecx 1 +
test ebp ebp +
jnz loc_40E45F  +
mov esi 3E8h +
mov [esp+90h+var_28] edi +
xor edi edi +
test esi esi +
mov [esp+90h+var_24] ecx +
jle loc_40E4E1  +
test ebp ebp +
jnz loc_40E47F  +
mov ecx [esp+90h+var_24] +
or ecx [esp+90h+var_28] +
jnz loc_40E47F  +
mov esi edi +
jmp loc_40E4E1  +
mov edx [esp+90h+var_24] +
mov eax [esp+90h+var_28] +
shr edx 1Ch +
mov eax edx +
xor edx edx +
and eax 0Fh +
xor edx edx +
mov ecx eax +
cmp eax 0Ah +
jnb loc_40E4A5  +
mov dl cl +
add dl 30h +
mov [ebx] dl +
jmp loc_40E4BF  +
cmp [esp+90h+arg_0] 61h +
jnz loc_40E4B8  +
mov dl cl +
add dl 57h +
mov [ebx] dl +
jmp loc_40E4BF  +
mov dl cl +
add dl 37h +
mov [ebx] dl +
mov ecx 4 +
shl [esp+90h+var_28] 1 +
rcl [esp+90h+var_24] 1 +
loop loc_40E4C4  +
inc ebx  +
mov edx ebx +
lea ecx [esp+90h+var_68] +
sub edx ecx +
cmp edx 25h +
jz loc_40E4E1  +
inc edi  +
cmp edi esi +
jl loc_40E46D  +
mov byte ptr [ebx] 0 +
cmp [esp+90h+var_24] 0 +
jg loc_40E571  +
jl loc_40E4F8  +
cmp [esp+90h+var_28] 0 +
jnb loc_40E571  +
test byte ptr [ebx-1] 1 +
jnz loc_40E50E  +
mov eax [esp+90h+var_28] +
mov edx [esp+90h+var_24] +
add eax eax +
rcl edx 1 +
or edx eax +
jz loc_40E571  +
xor eax eax +
lea ecx ds:0[edi*4] +
mov edx 80000000h +
test cl 20h +
jnz loc_40E528  +
shrd eax edx +
shr edx cl +
jmp loc_40E52E  +
shr edx cl +
mov eax edx +
xor edx edx +
add [esp+90h+var_20] eax +
adc [esp+90h+var_1C] edx +
cmp [esp+90h+var_1C] 0 +
jl loc_40E564  +
jg loc_40E546  +
cmp [esp+90h+var_20] 0 +
jb loc_40E564  +
mov ecx [esp+90h+var_1C] +
mov edi [esp+90h+var_20] +
shr ecx 1 +
rcr edi 1 +
or ecx 80000000h +
inc [esp+90h+var_74]  +
mov [esp+90h+var_20] edi +
mov [esp+90h+var_1C] ecx +
mov ecx [esp+90h+var_1C] +
mov edi [esp+90h+var_20] +
jmp loc_40E430  +
fld  [esp+90h+var_3C] +
mov edi [esp+90h+arg_4] +
mov [esp+90h+var_70] 0 +
mov ebp [esp+90h+arg_10] +
fstp  [esp+90h+var_C] +
movsx ecx word ptr [esp+90h+var_C+8] +
test ecx 8000h +
jz loc_40E5AA  +
mov [esp+90h+var_70] 1 +
push [esp+90h+var_70]  +
push edi  +
call sub_40A490  +
mov [esp+90h+var_6C] eax +
mov byte ptr [ebp+0] 30h +
mov dl byte ptr [esp+90h+arg_0] +
and dl 20h +
or dl 58h +
mov [ebp+1] dl +
mov cl byte ptr [esp+90h+var_68] +
lea edx [ebp+3] +
mov [ebp+2] cl +
mov [esp+90h+var_40] edx +
test edi 8 +
jnz loc_40E5F3  +
test esi esi +
jg loc_40E5F3  +
fld  [esp+90h+var_3C] +
fldz   +
fucompp   +
fnstsw  ax +
sahf   +
jnz loc_40E63D  +
mov eax ds:lpMultiByteStr +
mov bl [eax] +
mov [ebp+3] bl +
mov edi [esp+90h+var_30] +
add edi 0FFFFFFF5h +
cmp edi esi +
jl loc_40E697  +
inc [esp+90h+var_40]  +
xor eax eax +
lea ebx [esp+90h+var_68+1] +
test esi esi +
jle loc_40E63D  +
cmp byte ptr [ebx] 0 +
jz loc_40E627  +
mov edx ebx +
inc ebx  +
movsx ecx byte ptr [edx] +
jmp loc_40E62C  +
mov ecx 30h +
mov edx [esp+90h+var_40] +
inc edx  +
mov [esp+90h+var_40] edx +
dec edx  +
inc eax  +
mov [edx] cl +
cmp eax esi +
jl loc_40E61A  +
mov al byte ptr [esp+90h+arg_0] +
mov ebx [esp+90h+var_40] +
inc ebx  +
mov [esp+90h+var_40] ebx +
dec ebx  +
fld  [esp+90h+var_3C] +
fldz   +
fucompp   +
and al 20h +
or al 50h +
mov [ebx] al +
fnstsw  ax +
sahf   +
jnz loc_40E669  +
mov [esp+90h+var_74] 0 +
lea esi [esp+90h+var_40] +
push esi  +
push [esp+94h+var_74]  +
push 0  +
call sub_40E6B8  +
mov ebx [esp+90h+var_40] +
sub ebx ebp +
mov esi [esp+90h+arg_14] +
mov eax [esp+90h+var_6C] +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 80h +
retn   +
mov edx [esp+90h+arg_14] +
mov eax [esp+90h+var_6C] +
mov dword ptr [edx] 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 80h +
retn   +
***
sub esp 10h +
mov edx [esp+arg_0] +
cmp byte ptr [edx-1] 30h +
jnz loc_40E7C1  +
dec edx  +
cmp byte ptr [edx-1] 30h +
jz loc_40E7BA  +
mov ecx ds:lpMultiByteStr +
mov al [edx-1] +
cmp al [ecx] +
jnz loc_40E7CF  +
dec edx  +
mov eax edx +
retn 4  +
***
sub esp 48h +
mov edx [ebx+10h] +
mov eax [ebx+10h] +
mov edx 1 +
cmp dword ptr [ebx+10h] 58h +
mov edx 1 +
mov ecx [ebx+10h] +
mov ecx [ebx+10h] +
inc esi  +
mov edx 1 +
cmp dword ptr [ebp-44h] 0 +
push ds:lpMultiByteStr  +
lea eax [esp+0Ch+WideCharStr] +
push eax  +
call sub_413A88  +
add esp 0Ch +
test eax eax +
jle loc_40EB1D  +
mov cx [esp+4+WideCharStr] +
mov ds:word_422A38 cx +
pop eax  +
retn   +
***
sub esp 78h +
sub esp 10h +
mov ecx [esp+10h+arg_8] +
push ebx  +
mov ebx [esp+14h+arg_4] +
test ebx ebx +
push esi  +
mov esi [ecx] +
push edi  +
jns loc_40F26B  +
mov edx 2Dh +
neg ebx  +
and edx 0FFFFh +
jmp loc_40F270  +
mov edx 2Bh +
mov [esi] dx +
add esi 2 +
cmp ebx 2710h +
jl loc_40F29D  +
mov eax ebx +
mov ecx 2710h +
cdq   +
idiv  ecx +
mov ebx edx +
mov [esp+1Ch+var_10] eax +
add eax 30h +
mov edi [esp+1Ch+var_10] +
mov [esi] ax +
add esi 2 +
jmp loc_40F2A5  +
cmp ebx 3E8h +
jl loc_40F2C4  +
mov eax ebx +
mov ecx 3E8h +
cdq   +
idiv  ecx +
mov ebx edx +
mov [esp+1Ch+var_C] eax +
add eax 30h +
mov edi [esp+1Ch+var_C] +
mov [esi] ax +
add esi 2 +
jmp loc_40F2C9  +
cmp ebx 64h +
jl loc_40F2E8  +
mov eax ebx +
mov ecx 64h +
cdq   +
idiv  ecx +
mov ebx edx +
mov [esp+1Ch+var_8] eax +
add eax 30h +
mov edi [esp+1Ch+var_8] +
mov [esi] ax +
add esi 2 +
jmp loc_40F2F4  +
cmp [esp+1Ch+arg_0] 0 +
jnz loc_40F2F4  +
cmp ebx 0Ah +
jl loc_40F323  +
mov ecx ebx +
mov eax 66666667h +
imul  ecx +
mov eax ecx +
sar eax 1Fh +
sar edx 2 +
sub edx eax +
imul eax edx +
sub ecx eax +
mov eax edx +
mov edx ecx +
mov [esp+1Ch+var_4] eax +
add eax 30h +
mov ebx edx +
mov [esi] ax +
add esi 2 +
mov eax [esp+1Ch+var_4] +
mov edx ebx +
add dx 30h +
mov ecx [esp+1Ch+arg_8] +
mov [esi] dx +
add esi 2 +
mov [ecx] esi +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn 0Ch  +
***
mov ecx [esp+arg_0] +
cmp word ptr [ecx-2] 30h +
jnz loc_40F355  +
add ecx 0FFFFFFFEh +
cmp word ptr [ecx-2] 30h +
jz loc_40F34B  +
mov ax [ecx-2] +
cmp ax ds:word_422A38 +
jnz loc_40F365  +
add ecx 0FFFFFFFEh +
mov eax ecx +
retn 4  +
***
sub esp 48h +
mov ecx [ebx+10h] +
mov eax [ebx+10h] +
mov edx 1 +
cmp dword ptr [ebx+10h] 58h +
mov edx 1 +
mov dx ds:word_422A38 +
mov ecx [ebx+10h] +
inc esi  +
mov edx 1 +
cmp dword ptr [ebp-44h] 0 +
mov esi [ebp-20h] +
mov edi [ebp-1Ch] +
mov byte ptr [esi+edi] 0 +
jz loc_40F6AF  +
test dword ptr [ebx+0Ch] 2 +
jnz loc_40F6A1  +
push 0  +
inc dword ptr [ebx+4]  +
push dword ptr [ebp-20h]  +
call sub_4130F8  +
fstp  tbyte ptr [ebp-0Ch] +
add esp 8 +
mov edx [ebx+0Ch] +
test edx 10h +
jz loc_40F687  +
fld  tbyte ptr [ebp-0Ch] +
mov edi [ebx+14h] +
fstp  tbyte ptr [edi] +
jmp loc_40F6A1  +
test edx 8 +
jz loc_40F699  +
fld  tbyte ptr [ebp-0Ch] +
mov esi [ebx+14h] +
fstp  qword ptr [esi] +
jmp loc_40F6A1  +
fld  tbyte ptr [ebp-0Ch] +
mov ecx [ebx+14h] +
fstp  dword ptr [ecx] +
pop edi  +
mov eax 1 +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edx large fs:0 +
mov eax offset unk_422AC8 +
jmp sub_41245C  +
***
push ebx  +
sub esp 10h +
mov edx [esp+10h+arg_0] +
test edx edx +
push ebx  +
mov ebx [esp+14h+arg_4] +
push esi  +
push edi  +
mov [esp+1Ch+var_10] ecx +
jnz loc_40F801  +
push ebx  +
call sub_40F780  +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
test ebx ebx +
jnz loc_40F81D  +
mov [esp+1Ch+arg_0] edx +
push [esp+1Ch+arg_0]  +
call sub_40F930  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
lea esi [edx-4] +
mov [esp+1Ch+var_C] esi +
cmp [esi] ebx +
jb loc_40F833  +
pop edi  +
mov eax edx +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
mov edi [esi] +
cmp edi [ecx+4] +
ja loc_40F8C6  +
mov esi [esp+1Ch+var_C] +
mov edi [esi] +
dec edi  +
shr edi 3 +
inc edi  +
shl edi 3 +
cmp edi ebx +
jb loc_40F861  +
mov edi [esp+1Ch+var_C] +
mov eax edx +
mov [edi] ebx +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
mov [esp+1Ch+arg_0] edx +
cmp [ecx+4] ebx +
jb loc_40F87E  +
lea edx [ebx-1] +
shr edx 3 +
mov eax [ecx] +
mov ecx [eax+edx*4] +
call sub_413D20  +
test eax eax +
jmp loc_40F88F  +
lea esi [ebx+4] +
mov ecx ds:dword_423CC0 +
push esi  +
call sub_413DBC  +
test eax eax +
mov [esp+1Ch+var_8] eax +
jz loc_40F8F0  +
mov edx [esp+1Ch+var_8] +
mov edi [esp+1Ch+var_C] +
lea esi [edx+4] +
mov [edx] ebx +
push dword ptr [edi]  +
push [esp+20h+arg_0]  +
push esi  +
call sub_40B020  +
mov ecx [esp+28h+var_10] +
push edi  +
call sub_40F8FC  +
add esp 0Ch +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
lea edx [ebx+4] +
mov ecx ds:dword_423CC0 +
push edx  +
push esi  +
call sub_413E2C  +
test eax eax +
mov [esp+1Ch+var_4] eax +
jz loc_40F8F0  +
mov ecx [esp+1Ch+var_4] +
lea eax [ecx+4] +
mov [ecx] ebx +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
***
mov eax [ebx] +
push esi  +
cmp eax [ecx+4] +
ja loc_40F91C  +
lea edx [eax-1] +
shr edx 3 +
push ebx  +
mov esi [ecx] +
mov ecx [esi+edx*4] +
call sub_413D54  +
jmp loc_40F928  +
mov ecx ds:dword_423CC0 +
push ebx  +
call sub_413FC8  +
pop esi  +
pop ebx  +
retn 4  +
***
cmp [esp+arg_0] 0 +
jz locret_40F944  +
mov eax [esp+arg_0] +
lea edx [eax-4] +
push edx  +
call sub_40F8FC  +
retn 4  +
***
cmp ds:byte_42776C 0 +
jnz loc_40F96B  +
push 0  +
mov ecx offset unk_427770 +
inc ds:byte_42776C  +
push 10h  +
call sub_40F6BC  +
mov ds:dword_422AF0 offset unk_427770 +
pop eax  +
retn   +
***
jz loc_40F98C  +
mov ecx offset unk_427770 +
call nullsub_2  +
pop eax  +
retn   +
***
call sub_4096D4  +
sub esp 8 +
push ebx  +
push esi  +
push edi  +
mov edx 1 +
inc ds:word_428608[edx*2]  +
jz loc_40F9C2  +
push edx  +
call sub_40DE00  +
add esp 4 +
push [ebp+arg_0]  +
mov ecx ds:dword_422AF0 +
call sub_40F780  +
mov [ebp+var_4] eax +
mov edx 1 +
dec ds:word_428608[edx*2]  +
js loc_40F9EC  +
push edx  +
call sub_40DE20  +
add esp 4 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
push ebp  +
mov ebp [ebp+arg_4] +
call ebx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [esp+4] +
test dword ptr [eax+4] 6 +
jnz loc_40FA27  +
mov eax 1 +
retn   +
***
mov edx [esp+10h] +
mov ecx [esp+8] +
mov eax 3 +
mov [edx] ecx +
retn   +
***
push ecx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 14h +
push esi  +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
push edi  +
mov [ebp+var_4] eax +
push 0FFFFFFFFh  +
push 0  +
push offset loc_40FA14  +
push large dword ptr fs:0  +
mov large fs:0 esp +
cmp [ebp+var_4] 0FFFFFFFFh +
jz loc_40FADD  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_4] +
jz loc_40FADD  +
mov eax [ebp+var_4] +
lea esi [eax+eax*2] +
mov eax [ebp+arg_0] +
lea esi ds:0[esi*4] +
lea edi [ebp+var_10] +
add esi [eax+8] +
movs   +
movs   +
movs   +
cmp [ebp+var_C] 0 +
jnz loc_40FAD5  +
cmp [ebp+arg_8] 0 +
jz loc_40FAC3  +
mov eax [ebp+arg_0] +
lea eax [eax+10h] +
jmp loc_40FAC9  +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
push eax  +
push [ebp+var_8]  +
call sub_40F9F8  +
add esp 8 +
mov eax [ebp+var_10] +
mov [ebp+var_4] eax +
jmp loc_40FA88  +
pop large dword ptr fs:0  +
add esp 0Ch +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn   +
***
push esi  +
mov esi [esp+4+arg_4] +
push edi  +
cmp ds:dword_423DD0 0 +
jz loc_40FB42  +
mov ecx edx +
movzx ebx byte ptr [edx] +
mov eax ebx +
and eax 0FFh +
test ds:byte_423CC9[eax] 4 +
jz loc_40FB2D  +
cmp byte ptr [edx+1] 0 +
jnz loc_40FB23  +
xor ebx ebx +
jmp loc_40FB2D  +
shl ebx 8 +
movzx edi byte ptr [edx+1] +
or ebx edi +
inc edx  +
cmp ebx esi +
jnz loc_40FB37  +
pop edi  +
mov eax ecx +
pop esi  +
pop ebx  +
retn   +
inc edx  +
test ebx ebx +
jnz loc_40FB04  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov [esp+8+arg_0] edx +
push esi  +
push [esp+0Ch+arg_0]  +
call sub_40A170  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ds:hFindFile  +
mov ebx ds:dword_4278C0 +
and ebx 10h +
push esi  +
mov esi ds:dword_4278C0 +
and esi 6 +
test ebx ebx +
jnz loc_40FBBF  +
test dword ptr ds:unk_427780 10h +
jnz loc_40FBCF  +
mov ecx dword ptr ds:unk_427780 +
and ecx 6 +
cmp ecx esi +
jz loc_40FBDE  +
call sub_40FB58  +
test eax eax +
jnz loc_40FBAF  +
pop esi  +
xor eax eax +
pop ebx  +
pop ecx  +
retn   +
push offset FatTime  +
push offset FatDate  +
push offset FileTime  +
call FileTimeToDosDateTime  +
mov al byte ptr ds:unk_427780 +
mov ds:byte_4278D9 al +
mov edx dword ptr ds:unk_4277A0 +
mov ds:dword_4278DE edx +
push offset unk_4277AC  +
mov byte ptr ds:unk_4278AF 0 +
push offset unk_4278E2  +
call sub_40A0AC  +
add esp 8 +
mov eax offset unk_4278C4 +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
mov ecx ds:hFindFile +
mov ds:dword_4278C0 eax +
cmp ecx 0FFFFFFFFh +
jz loc_40FC48  +
push ecx  +
call FindClose  +
push offset unk_427780  +
push [esp+4+lpFileName]  +
call FindFirstFileA  +
cmp eax 0FFFFFFFFh +
mov ds:hFindFile eax +
jnz loc_40FC6A  +
call sub_40FF78  +
xor eax eax +
pop ecx  +
retn   +
call sub_40FB94  +
pop ecx  +
retn   +
***
test eax eax +
jnz loc_40FC82  +
pop ecx  +
xor eax eax +
retn   +
call sub_40FB94  +
pop ecx  +
retn   +
***
movzx eax [esp+arg_0] +
mov al ds:byte_423CC9[eax] +
and eax 4 +
retn   +
***
jz loc_40FCC1  +
push 1  +
call ds:off_423890  +
add esp 4 +
pop eax  +
retn   +
***
jz loc_40FCD9  +
push 0  +
call ds:off_423890  +
add esp 4 +
pop eax  +
retn   +
***
jz loc_40FCEC  +
call ds:dword_4287B0  +
pop eax  +
retn   +
***
jz loc_40FD00  +
call ds:off_424D24  +
pop eax  +
retn   +
***
mov edx ecx +
sub esp 0Ch +
push ebx  +
mov ebx [esp+10h+arg_0] +
cmp ebx 100h +
push esi  +
push edi  +
jb loc_40FDB5  +
cmp ds:dword_423DD0 0 +
jz loc_40FDAC  +
mov edx ebx +
shr edx 8 +
lea esi [esp+18h+CharType] +
mov [esp+18h+SrcStr] dl +
mov [esp+11h] bl +
mov [esp+18h+var_6] 0 +
push esi  +
push 2  +
lea edi [esp+20h+SrcStr] +
push edi  +
push 1  +
push ds:dword_423DD4  +
call GetStringTypeA  +
test eax eax +
jz loc_40FDAC  +
mov ax [esp+18h+CharType] +
pop edi  +
pop esi  +
pop ebx  +
add esp 0Ch +
and eax 4 +
retn   +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
mov eax 1 +
cmp ds:cchMultiByte eax +
jle loc_40FDCF  +
push 4  +
push ebx  +
call sub_40B258  +
add esp 8 +
jmp loc_40FDDE  +
mov ecx ds:off_421F98 +
mov ax [ecx+ebx*2] +
and eax 4 +
pop edi  +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
***
mov ecx [esp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
cmp [esp+10h+lpMultiByteStr] ebx +
jz loc_40FE5F  +
cmp ds:Locale ebx +
jnz loc_40FE2A  +
cmp [esp+10h+WideCharStr] 0FFh +
ja loc_40FE67  +
mov ecx [esp+10h+lpMultiByteStr] +
mov al byte ptr [esp+10h+WideCharStr] +
mov ebx 1 +
mov [ecx] al +
jmp loc_40FE5F  +
lea edx [esp+10h+UsedDefaultChar] +
push edx  +
push ebx  +
push ds:cchMultiByte  +
push [esp+1Ch+lpMultiByteStr]  +
push 1  +
lea esi [esp+24h+WideCharStr] +
push esi  +
push 220h  +
push ds:CodePage  +
call WideCharToMultiByte  +
mov ebx eax +
test eax eax +
jz loc_40FE67  +
cmp [esp+10h+UsedDefaultChar] 0 +
jnz loc_40FE67  +
pop esi  +
mov eax ebx +
pop ebx  +
add esp 8 +
retn   +
push 2Ah  +
call sub_410018  +
mov ebx 0FFFFFFFFh +
jmp loc_40FE5F  +
***
push eax  +
mov eax [ebp+arg_0] +
sub eax offset unk_422B50 +
push ebx  +
cdq   +
and edx 1Fh +
push esi  +
add eax edx +
sar eax 5 +
push edi  +
add eax 0Ah +
mov [ebp+var_4] eax +
call GetCurrentThreadId  +
mov edx [ebp+var_4] +
cmp ds:dword_4287B4[edx*4] eax +
jnz loc_40FEB4  +
inc ds:dword_4288CC[edx*4]  +
jmp loc_40FEF0  +
inc ds:word_428608[edx*2]  +
jnz loc_40FED0  +
mov ds:dword_4287B4[edx*4] eax +
inc ds:dword_4288CC[edx*4]  +
jmp loc_40FEF0  +
push edx  +
call sub_40DE00  +
add esp 4 +
call GetCurrentThreadId  +
mov edx [ebp+var_4] +
mov ds:dword_4287B4[edx*4] eax +
inc ds:dword_4288CC[edx*4]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 0Ch +
push ebx  +
mov eax [ebp+arg_0] +
sub eax offset unk_422B50 +
push esi  +
cdq   +
and edx 1Fh +
push edi  +
add eax edx +
sar eax 5 +
add eax 0Ah +
mov [ebp+var_C] eax +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
and eax 83h +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 1 +
sbb eax eax +
neg eax  +
mov [ebp+var_4] eax +
mov edx [ebp+var_C] +
dec ds:dword_4288CC[edx*4]  +
jnz loc_40FF70  +
mov ds:dword_4287B4[edx*4] 0 +
dec ds:word_428608[edx*2]  +
js loc_40FF70  +
push edx  +
call sub_40DE20  +
add esp 4 +
mov edx [ebp+var_4] +
test edx edx +
jz loc_40FF70  +
mov edx [ebp+var_C] +
push edx  +
call sub_40DD30  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
call sub_4099C8  +
push ebx  +
call sub_40FE78  +
add esp 4 +
test dword ptr [ebx+0Ch] 83h +
jz loc_410069  +
push ebx  +
call sub_40B1AC  +
add esp 4 +
push ebx  +
call sub_40FEF8  +
add ebx 20h +
add esp 4 +
cmp ebx offset off_4232D0 +
jb loc_41004E  +
pop ebx  +
retn   +
***
call sub_40C0F0  +
add esp 4 +
pop eax  +
retn   +
***
mov ecx [esp+arg_4] +
mov eax [eax] +
mov [ecx] eax +
call sub_409A1C  +
mov ebx [esp+arg_0] +
mov edx [eax] +
mov [ebx] edx +
pop ebx  +
retn 8  +
***
push eax  +
call sub_4099C8  +
mov ecx eax +
pop eax  +
mov edx [esp+arg_0] +
mov [ecx+10h] eax +
mov [ecx+8Ch] edx +
pop eax  +
retn 8  +
***
sub esp 10h +
push ebx  +
push ebp  +
mov ebp [esp+18h+arg_8] +
test ebp ebp +
push esi  +
mov esi [esp+1Ch+arg_4] +
push edi  +
mov edi [esp+20h+arg_0] +
mov [esp+20h+var_C] 1 +
jz loc_410142  +
test edi edi +
jz loc_410142  +
cmp byte ptr [ebp+0] 0 +
jz loc_410142  +
lea ecx [esp+20h+var_4] +
push ecx  +
lea edx [esp+24h+var_8] +
push edx  +
call sub_410090  +
mov edx esi +
mov ebx 100h +
mov [esp+20h+var_10] 0 +
inc esi  +
movsx ecx byte ptr [edx] +
cmp ecx 72h +
jz loc_410129  +
cmp ecx 61h +
jz loc_410130  +
cmp ecx 77h +
jz loc_41013A  +
jmp loc_410142  +
mov ebx 101h +
jmp loc_41015D  +
mov [esp+20h+var_10] 1 +
mov ebx 300h +
or ebx 2 +
jmp loc_41015D  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
pop ebx  +
add esp 10h +
retn 0Ch  +
or ebx 80h +
jmp loc_41015C  +
and ebx 0FFFFFEFFh +
inc esi  +
movsx ecx byte ptr [esi] +
cmp ecx 2Bh +
jz loc_41014E  +
cmp ecx 62h +
jz loc_410156  +
test ebx 80h +
mov esi [esp+arg_10] +
jz loc_4101D0  +
test ebx 2 +
jz loc_41018F  +
cmp [esp+arg_C] 0 +
jnz loc_41018F  +
mov esi 2 +
jmp loc_410228  +
push 8002h  +
push ebp  +
call sub_40BE5C  +
add esp 8 +
mov esi eax +
cmp eax 0FFFFFFFFh +
jnz loc_4101C4  +
test ebx 2 +
jz loc_410259  +
push [esp+arg_18]  +
mov esi 2 +
push [esp+4+arg_14]  +
call sub_4100B0  +
jmp loc_410228  +
cmp [esp+arg_C] 0 +
jnz loc_410208  +
jmp loc_410259  +
test ebx 2 +
jz loc_410249  +
cmp [esp+arg_C] 0 +
jz loc_410228  +
push 8001h  +
push ebp  +
call sub_40BE5C  +
add esp 8 +
mov esi eax +
cmp eax 0FFFFFFFFh +
jnz loc_410208  +
push [esp+arg_18]  +
mov esi 1 +
push [esp+4+arg_14]  +
call sub_4100B0  +
jmp loc_410228  +
push 2  +
push 0  +
push esi  +
call sub_40C110  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_410259  +
push esi  +
call sub_40C084  +
add esp 4 +
jmp loc_410142  +
mov [esp+arg_10] esi +
push 180h  +
mov edx [esp+4+arg_10] +
or edx 8300h +
push edx  +
push ebp  +
call sub_40BE5C  +
mov esi eax +
add esp 0Ch +
jmp loc_410259  +
push 8000h  +
push ebp  +
call sub_40BE5C  +
mov esi eax +
add esp 8 +
mov [edi+10h] esi +
cmp esi 0FFFFFFFFh +
jz loc_410142  +
test ebx 80h +
jz loc_410277  +
mov ecx ebx +
and ecx 0FFFFFFFCh +
jmp loc_410279  +
mov ecx ebx +
xor edx edx +
mov eax edi +
mov [edi+0Ch] ecx +
mov dword ptr [edi+4] 0 +
mov [edi+8] edx +
mov [edi] edx +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 10h +
retn 0Ch  +
***
mov eax [ebx+0Ch] +
test eax 83h +
jz loc_4102B8  +
test eax 40h +
jz loc_4102B8  +
push ebx  +
call sub_41063C  +
add esp 4 +
add ebx 20h +
cmp ebx offset off_4232D0 +
jb loc_41029E  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx [esp+0Ch+arg_0] +
push esi  +
mov esi [esp+10h+arg_8] +
push edi  +
mov edi [esp+14h+arg_C] +
push ebx  +
call sub_40FE78  +
push ebx  +
call sub_410378  +
add esp 4 +
cmp esi 4 +
jnz loc_410311  +
mov eax ebx +
sub eax offset unk_422B50 +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
lea edx unk_4279E8[eax*2] +
mov edi 1 +
mov [ebx+8] edx +
jmp loc_410345  +
cmp esi 40h +
jz loc_41031A  +
test esi esi +
jnz loc_41033E  +
mov ecx [esp+14h+arg_4] +
test ecx ecx +
mov [ebx+8] ecx +
jnz loc_410345  +
push edi  +
call sub_40F9A0  +
mov [ebx+8] eax +
add esp 4 +
test eax eax +
jz loc_41033E  +
or dword ptr [ebx+0Ch] 8 +
jmp loc_410345  +
mov eax 0FFFFFFFFh +
jmp loc_41035D  +
mov ecx [ebx+8] +
mov edx [ebx+0Ch] +
and edx 0FFFFFFBBh +
mov [ebx] ecx +
or edx esi +
xor eax eax +
mov [ebx+0Ch] edx +
mov [ebx+18h] edi +
mov [esp+14h+var_4] eax +
push ebx  +
call sub_40FEF8  +
add esp 4 +
mov eax [esp+14h+var_4] +
pop edi  +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
mov ebx [esp+arg_0] +
sub esp 0Ch +
mov eax [esp+0Ch+arg_4] +
push ebx  +
push esi  +
test dword ptr [eax+0Ch] 200h +
jz loc_4103DC  +
push 2  +
push 0  +
push dword ptr [eax+10h]  +
call sub_40C110  +
mov ecx [esp+20h+arg_4] +
and dword ptr [ecx+0Ch] 0FFFFFDFFh +
add esp 0Ch +
mov edx [esp+14h+arg_4] +
mov ebx [edx+0Ch] +
test ebx 80h +
jz loc_4103FE  +
and ebx 0FFFFFFFEh +
mov esi [esp+14h+arg_4] +
or ebx 2 +
mov [esi+0Ch] ebx +
mov eax [esp+14h+arg_4] +
mov cl [eax+0Ch] +
and cl 32h +
cmp cl 2 +
jnz loc_410529  +
mov edx [esp+14h+arg_4] +
mov ebx [edx+0Ch] +
test ebx 4 +
jz loc_41045D  +
push 1  +
lea ecx [esp+18h+Buffer] +
mov edx [esp+18h+arg_4] +
push ecx  +
push dword ptr [edx+10h]  +
call sub_4146E0  +
add esp 0Ch +
mov ebx 1 +
cmp eax ebx +
jnz loc_41051E  +
mov esi [esp+14h+arg_4] +
mov dword ptr [esi+4] 0 +
mov eax [esp+14h+Buffer] +
and eax 0FFh +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
mov esi [esp+14h+arg_4] +
cmp dword ptr [esi+8] 0 +
jnz loc_4104C8  +
and ebx 44h +
mov [esp+14h+var_8] ebx +
jnz loc_41047B  +
mov [esp+14h+var_8] 0 +
mov eax [esp+14h+arg_4] +
push dword ptr [eax+10h]  +
call sub_4144C8  +
add esp 4 +
test eax eax +
jz loc_410496  +
mov [esp+14h+var_8] 40h +
push 4000h  +
push [esp+18h+var_8]  +
push 0  +
push [esp+20h+arg_4]  +
call sub_4102C8  +
add esp 10h +
test eax eax +
jz loc_4104EF  +
push 1  +
push 4  +
push 0  +
push [esp+20h+arg_4]  +
call sub_4102C8  +
add esp 10h +
jmp loc_410420  +
mov ecx [esp+14h+arg_4] +
mov edx [ecx] +
mov ebx [ecx+8] +
sub edx ebx +
mov [esp+14h+var_4] edx +
jz loc_4104EF  +
push [esp+14h+var_4]  +
push ebx  +
push dword ptr [ecx+10h]  +
call sub_4146E0  +
add esp 0Ch +
cmp eax [esp+14h+var_4] +
jnz loc_41051E  +
mov esi [esp+14h+arg_4] +
mov eax [esi+8] +
mov [esi] eax +
mov cl byte ptr [esp+14h+Buffer] +
mov [eax] cl +
mov edx [esp+14h+arg_4] +
inc dword ptr [edx]  +
mov ebx [esp+14h+arg_4] +
mov esi [ebx+18h] +
dec esi  +
mov [ebx+4] esi +
mov eax [esp+14h+Buffer] +
and eax 0FFh +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
mov ecx [esp+14h+arg_4] +
or dword ptr [ecx+0Ch] 20h +
mov edx [esp+14h+arg_4] +
mov eax 0FFFFFFFFh +
mov dword ptr [edx+4] 0 +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
***
mov ebx [esp+arg_0] +
mov eax [ebx+0Ch] +
push esi  +
test eax 80h +
push edi  +
jz loc_41055F  +
and eax 0FFFFFFFDh +
or eax 1 +
mov [ebx+0Ch] eax +
mov cl [ebx+0Ch] +
and cl 31h +
cmp cl 1 +
jz loc_41057C  +
test dword ptr [ebx+0Ch] 1 +
jnz loc_410623  +
jmp loc_41061C  +
cmp dword ptr [ebx+8] 0 +
jnz loc_4105D1  +
mov esi [ebx+0Ch] +
and esi 44h +
jnz loc_41058F  +
xor esi esi +
test esi 4 +
jz loc_4105A8  +
push 1  +
push 4  +
push 0  +
push ebx  +
call sub_4102C8  +
add esp 10h +
jmp loc_4105D1  +
push dword ptr [ebx+10h]  +
call sub_4144C8  +
add esp 4 +
test eax eax +
jz loc_4105BC  +
mov esi 40h +
push 4000h  +
push esi  +
push 0  +
push ebx  +
call sub_4102C8  +
add esp 10h +
test eax eax +
jnz loc_410597  +
test dword ptr [ebx+0Ch] 44h +
jz loc_4105DF  +
call sub_410298  +
push dword ptr [ebx+18h]  +
mov edx [ebx+8] +
push edx  +
mov [ebx] edx +
push dword ptr [ebx+10h]  +
call sub_4144F0  +
xor esi esi +
mov [ebx+4] eax +
add esp 0Ch +
cmp eax esi +
jg loc_410634  +
cmp [ebx+4] esi +
jnz loc_41061C  +
or dword ptr [ebx+0Ch] 10h +
mov edi [ebx+0Ch] +
test edi 80h +
jz loc_410623  +
and dword ptr [ebx+0Ch] 0FFFFFFDFh +
jmp loc_410623  +
or dword ptr [ebx+0Ch] 20h +
mov dword ptr [ebx+4] 0 +
mov eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
push esi  +
mov ebx [esp+arg_0] +
push esi  +
mov esi 1 +
push edi  +
test ebx ebx +
jnz loc_4106CE  +
inc ebx  +
push ebx  +
call sub_40F9A0  +
add esp 4 +
mov edi eax +
test eax eax +
jnz loc_410717  +
cmp ds:dword_423DE4 0 +
jz loc_410717  +
mov ecx ds:dword_4289F4 +
cmp ecx 1 +
jz loc_4106F8  +
cmp ecx 2 +
jz loc_410709  +
jmp loc_410703  +
call ds:dword_423DE4  +
mov esi 1 +
test esi esi +
jnz loc_4106C9  +
jmp loc_410717  +
push ebx  +
call ds:dword_423DE4  +
mov esi eax +
add esp 4 +
jmp loc_410703  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
cmp ds:dword_4232EC 2 +
jg loc_410751  +
mov ds:dword_4289E8 1 +
jmp locret_410780  +
fld  ds:dbl_4232D4 +
fdiv  ds:dbl_4232DC +
fmul  ds:dbl_4232DC +
fsubr  ds:dbl_4232D4 +
fcomp  ds:dbl_4232E4 +
fstsw  ax +
and eax 100h +
shr eax 7 +
dec eax  +
mov ds:dword_4289E8 eax +
retn   +
***
sub esp 0Ch +
mov eax [esp+0Ch+arg_0] +
imul eax [esp+0Ch+arg_4] +
mov [esp+0Ch+var_4] eax +
push eax  +
call sub_40F9A0  +
add esp 4 +
test eax eax +
mov [esp+0Ch+var_8] eax +
jnz loc_4107AB  +
add esp 0Ch +
xor eax eax +
retn   +
push [esp+0Ch+var_4]  +
push 0  +
push [esp+14h+var_8]  +
call sub_4097E4  +
add esp 0Ch +
mov eax [esp+0Ch+var_8] +
add esp 0Ch +
retn   +
***
fninit   +
mov ecx 1Eh +
loop loc_4107D7  +
fnstcw  word ptr ds:dword_4232EC +
mov ecx 1Eh +
loop loc_4107E4  +
xor edx edx +
mov eax ds:dword_4232EC +
and ah 0Fh +
cmp ah 3 +
jnz loc_41085E  +
fstcw  word ptr ds:dword_4232EC +
inc edx  +
wait   +
and byte ptr ds:dword_4232EC 7Fh +
wait   +
fldcw  word ptr ds:dword_4232EC +
fndisi   +
fstcw  word ptr ds:dword_4232EC +
wait   +
test byte ptr ds:dword_4232EC 80h +
jnz loc_41085E  +
inc edx  +
or byte ptr ds:dword_4232EC 0BFh +
and word ptr ds:dword_4232EC 0EFFFh +
wait   +
fldcw  word ptr ds:dword_4232EC +
fld1   +
fldz   +
fdivp st(1) st +
fld  st +
fchs   +
fcompp st(1) st +
fstsw  ax +
or ds:dword_4232EC 1000h +
wait   +
fldcw  word ptr ds:dword_4232EC +
sahf   +
jz loc_41085B  +
inc edx  +
fclex   +
mov ds:dword_4232EC edx +
retn   +
***
sub esp 28h +
push ebx  +
mov ebx [esp+2Ch+arg_0] +
mov eax [ebx+14h] +
push ebp  +
mov ebp 0FFFFFFFFh +
cmp eax 7B2h +
push esi  +
push edi  +
jl loc_41091F  +
mov ebp [ebx+10h] +
dec ebp  +
mov ecx [ebx+0Ch] +
mov si ds:word_4232F0[ebp*2] +
lea edi [eax-7B2h] +
cdq   +
xor eax edx +
sub eax edx +
and eax 3 +
xor eax edx +
sub eax edx +
and esi 0FFFFh +
lea esi [ecx+esi-1] +
test eax eax +
jnz loc_4108BD  +
cmp ebp 1 +
jle loc_4108BD  +
inc esi  +
imul edx edi +
lea ecx [edi+1] +
sar ecx 2 +
add edx ecx +
add edx esi +
imul ebp edx +
mov edx [ebx+8] +
imul ecx edx +
add ecx [ebx+4] +
imul edx ecx +
add edx [ebx] +
add ebp edx +
call sub_410AD4  +
add ebp ds:dword_4233B4 +
cmp ds:dword_4233BC 0 +
jz loc_41091F  +
mov esi ebx +
lea edi [esp+38h+var_24] +
mov ecx 9 +
movs   +
lea eax [esp+38h+var_24] +
dec [esp+38h+var_14]  +
add [esp+38h+var_10] 0FFFFF894h +
push eax  +
call sub_41092C  +
sub ebp eax +
add esp 4 +
pop edi  +
mov eax ebp +
pop esi  +
pop ebp  +
pop ebx  +
add esp 28h +
retn   +
***
push eax  +
push ebx  +
mov ebx [esp+0Ch+arg_0] +
mov eax [ebx+10h] +
push esi  +
cmp eax ecx +
jl loc_4109B2  +
cmp eax 9 +
jg loc_4109B2  +
cmp eax ecx +
jle loc_41094E  +
cmp eax 9 +
jl loc_4109AB  +
push ebx  +
mov edx [ebx+4] +
imul esi edx +
call sub_410A8C  +
mov edx [ebx+8] +
imul ecx eax +
imul edx edx +
add ecx edx +
add esi ecx +
push 3  +
add esi [ebx] +
push ebx  +
call sub_4109BC  +
imul ecx eax +
add ecx 1C20h +
mov [esp+10h+var_8] ecx +
push 9  +
push ebx  +
call sub_410A28  +
imul edx eax +
add edx 1C20h +
mov [esp+10h+var_4] edx +
cmp esi [esp+10h+var_8] +
jl loc_4109B2  +
cmp esi [esp+10h+var_4] +
jg loc_4109B2  +
mov eax 0E10h +
jmp loc_4109B4  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
mov edx [esp+arg_0] +
push esi  +
mov edx [edx+14h] +
lea eax [edx+76Ch] +
push edi  +
lea edi [edx-46h] +
cdq   +
mov bx ds:word_4232F0[ecx*2] +
xor eax edx +
sub eax edx +
and eax 3 +
xor eax edx +
sub eax edx +
and ebx 0FFFFh +
test eax eax +
jnz loc_4109F9  +
cmp ecx 1 +
jle loc_4109F9  +
inc ebx  +
imul ecx edi +
lea eax [edi+1] +
sar eax 2 +
add ecx ebx +
lea eax [ecx+eax+4] +
mov ecx 7 +
cdq   +
idiv  ecx +
mov esi edx +
test edx edx +
jz loc_410A1D  +
sub ecx esi +
mov esi ecx +
pop edi  +
lea eax [ebx+esi] +
pop esi  +
pop ebx  +
retn 8  +
***
mov edx [esp+arg_0] +
push esi  +
mov edx [edx+14h] +
lea esi [edx-46h] +
mov bx ds:word_4232F2[ecx*2] +
lea eax [edx+76Ch] +
cdq   +
xor eax edx +
sub eax edx +
and eax 3 +
xor eax edx +
sub eax edx +
and ebx 0FFFFh +
dec ebx  +
test eax eax +
jnz loc_410A65  +
cmp ecx 1 +
jle loc_410A65  +
inc ebx  +
imul ecx esi +
mov eax ebx +
lea eax [esi+1] +
sar eax 2 +
add ecx ebx +
lea eax [ecx+eax+4] +
push ebx  +
mov ecx 7 +
cdq   +
idiv  ecx +
pop eax  +
sub eax edx +
pop esi  +
pop ebx  +
retn 8  +
***
mov esi [esp+arg_0] +
mov ecx [esi+10h] +
mov bx ds:word_4232F0[ecx*2] +
mov edx [esi+0Ch] +
mov eax [esi+14h] +
add eax 76Ch +
and ebx 0FFFFh +
lea ebx [edx+ebx-1] +
cdq   +
xor eax edx +
sub eax edx +
and eax 3 +
xor eax edx +
sub eax edx +
test eax eax +
jnz loc_410ACA  +
cmp ecx 1 +
jle loc_410ACA  +
inc ebx  +
pop esi  +
mov eax ebx +
pop ebx  +
retn 4  +
***
jnz loc_410AE9  +
call sub_410DC8  +
inc ds:dword_42330C  +
pop eax  +
retn   +
***
mov edx edi +
mov edi [esp+arg_0] +
mov eax [esp+arg_4] +
mov ecx [esp+arg_8] +
call sub_4097B0  +
mov edi edx +
mov eax [esp+arg_0] +
retn   +
***
mov ebx [esp+8+arg_0] +
test ebx ebx +
push esi  +
push edi  +
jnz loc_410B1F  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
call sub_4099C8  +
add eax 52h +
mov ecx [ebx+14h] +
mov [esp+10h+var_4] eax +
add ecx 76Ch +
mov edx [ebx+10h] +
push ecx  +
lea esi dword_423310[edx+edx*2] +
mov edi [ebx+18h] +
push dword ptr [ebx]  +
lea ecx dword_423338[edi+edi*2] +
push dword ptr [ebx+4]  +
push dword ptr [ebx+8]  +
push dword ptr [ebx+0Ch]  +
push esi  +
push ecx  +
push offset a_3s_3s3d_2d_2d  +
push eax  +
call sub_40A2B4  +
add esp 24h +
mov eax [esp+10h+var_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
mov ebx [esp+arg_0] +
mov ebx [esp+arg_0] +
sub esp 0B0h +
push ebx  +
push esi  +
push edi  +
push offset Name  +
call sub_4153F0  +
add esp 4 +
mov edi eax +
test eax eax +
jz loc_411044  +
mov al [edi] +
test al al +
jz loc_411044  +
movsx eax al +
push eax  +
call sub_4151E8  +
add esp 4 +
cmp eax 41h +
jl loc_411044  +
movsx ecx byte ptr [edi] +
push ecx  +
call sub_4151E8  +
add esp 4 +
cmp eax 5Ah +
jg loc_411044  +
xor esi esi +
mov cl [edi] +
mov ebx edi +
test cl cl +
jz loc_410EBF  +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_410E4B  +
push 4  +
movsx ecx cl +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_410EBF  +
jmp loc_410E5C  +
movsx ecx cl +
mov edx ds:off_421F98 +
test word ptr [edx+ecx*2] 4 +
jnz loc_410EBF  +
mov cl [edi] +
cmp cl 2Dh +
jz loc_410EBF  +
cmp cl 2Bh +
jz loc_410EBF  +
mov edx ebx +
mov cl [edx] +
mov edx esi +
mov ds:byte_4233C0[edx] cl +
inc ebx  +
inc esi  +
mov cl [ebx] +
test cl cl +
jz loc_410EBF  +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_410E9D  +
push 4  +
movsx ecx cl +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_410EBF  +
jmp loc_410EAE  +
movsx ecx cl +
mov edx ds:off_421F98 +
test word ptr [edx+ecx*2] 4 +
jnz loc_410EBF  +
mov cl [ebx] +
cmp cl 2Dh +
jz loc_410EBF  +
cmp cl 2Bh +
jz loc_410EBF  +
cmp esi 9 +
jb loc_410E68  +
mov ds:byte_4233C0[esi] 0 +
mov dl [ebx] +
test dl dl +
jz loc_410F67  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_410EF1  +
push 4  +
movsx edx dl +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_410F18  +
jmp loc_410F02  +
movsx edx dl +
mov ecx ds:off_421F98 +
test word ptr [ecx+edx*2] 4 +
jnz loc_410F18  +
mov dl [ebx] +
cmp dl 3Ah +
jz loc_410F18  +
cmp dl 2Dh +
jz loc_410F18  +
cmp dl 2Bh +
jz loc_410F18  +
cmp dl 3Bh +
jnz loc_410F67  +
inc ebx  +
mov cl [ebx] +
test cl cl +
jz loc_410F67  +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_410F40  +
push 4  +
movsx ecx cl +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_410F18  +
jmp loc_410F51  +
movsx ecx cl +
mov edx ds:off_421F98 +
test word ptr [edx+ecx*2] 4 +
jnz loc_410F18  +
mov cl [ebx] +
cmp cl 3Ah +
jz loc_410F18  +
cmp cl 2Dh +
jz loc_410F18  +
cmp cl 2Bh +
jz loc_410F18  +
cmp cl 3Bh +
jz loc_410F18  +
cmp byte ptr [ebx] 0 +
jnz loc_410F70  +
xor edx edx +
jmp loc_410F75  +
mov edx 1 +
test edx edx +
mov ds:dword_4233BC edx +
jz loc_41102D  +
xor esi esi +
mov cl [ebx] +
test cl cl +
jz loc_411024  +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_410FB0  +
push 4  +
movsx ecx cl +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_411024  +
jmp loc_410FC1  +
movsx ecx cl +
mov edx ds:off_421F98 +
test word ptr [edx+ecx*2] 4 +
jnz loc_411024  +
mov cl [ebx] +
cmp cl 2Dh +
jz loc_411024  +
cmp cl 2Bh +
jz loc_411024  +
mov edx ebx +
mov cl [edx] +
mov edx esi +
mov ds:byte_4233CC[edx] cl +
inc ebx  +
inc esi  +
mov cl [ebx] +
test cl cl +
jz loc_411024  +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_411002  +
push 4  +
movsx ecx cl +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_411024  +
jmp loc_411013  +
movsx ecx cl +
mov edx ds:off_421F98 +
test word ptr [edx+ecx*2] 4 +
jnz loc_411024  +
mov cl [ebx] +
cmp cl 2Dh +
jz loc_411024  +
cmp cl 2Bh +
jz loc_411024  +
cmp esi 9 +
jb loc_410FCD  +
mov ds:byte_4233CC[esi] 0 +
jmp loc_411034  +
mov ds:byte_4233CC 0 +
push edi  +
call sub_410CC0  +
mov ds:dword_4233B4 eax +
jmp loc_4110E5  +
lea edx [esp+0BCh+TimeZoneInformation] +
push edx  +
call GetTimeZoneInformation  +
mov ebx eax +
cmp eax 0FFFFFFFFh +
jz loc_4110B0  +
test ebx ebx +
jz loc_4110B0  +
mov ebx [esp+0BCh+TimeZoneInformation.Bias] +
imul esi ebx +
mov ds:dword_4233B4 esi +
cmp [esp+0BCh+TimeZoneInformation.StandardDate.wMonth] 0 +
jz loc_41107C  +
mov eax [esp+0BCh+TimeZoneInformation.StandardBias] +
imul ecx eax +
add ds:dword_4233B4 ecx +
cmp [esp+0BCh+TimeZoneInformation.DaylightDate.wMonth] 0 +
jz loc_411091  +
cmp [esp+0BCh+TimeZoneInformation.DaylightBias] 0 +
jnz loc_411095  +
xor edx edx +
jmp loc_41109A  +
mov edx 1 +
xor ebx ebx +
mov ds:byte_4233C0 bl +
mov ds:dword_4233BC edx +
mov ds:byte_4233CC bl +
jmp loc_4110E5  +
push offset aPst  +
push offset byte_4233C0  +
call sub_40A0AC  +
push offset aPdt  +
push offset byte_4233CC  +
call sub_40A0AC  +
mov ds:dword_4233BC 1 +
mov ds:dword_4233B4 7080h +
add esp 10h +
cmp ds:dword_4233BC 0 +
jz loc_4110FD  +
mov eax ds:dword_4233B4 +
add eax 0FFFFF1F0h +
mov ds:dword_4233B8 eax +
pop edi  +
pop esi  +
pop ebx  +
add esp 0B0h +
retn   +
***
mov eax [esp+8+arg_0] +
sub esp 2Ch +
mov dword ptr [ecx] offset off_423400 +
mov eax ecx +
xor edx edx +
mov [eax+4] dx +
mov [eax+6] dx +
mov [eax+8] edx +
mov [eax+10h] edx +
mov [eax+14h] edx +
mov [eax+18h] edx +
mov [eax+20h] edx +
mov [eax+24h] edx +
mov [eax+1Ch] edx +
mov [eax+0Ch] edx +
retn   +
***
push ebx  +
mov ebx ecx +
jz loc_41130C  +
call sub_411314  +
test [esp+4+arg_0] 1 +
jz loc_41130C  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov dword ptr [ecx] offset off_423400 +
mov eax ecx +
push ecx  +
cmp word ptr [eax+4] 0 +
jz loc_41132F  +
push dword ptr [eax+8]  +
call sub_40971C  +
add esp 4 +
pop eax  +
retn   +
***
push ebx  +
push 400h  +
call sub_41165C  +
add esp 4 +
test eax eax +
mov [esp+0Ch+var_4] eax +
jnz loc_411356  +
pop ebx  +
add esp 8 +
mov eax 0FFFFFFFFh +
retn   +
mov edx [esp+0Ch+var_8] +
mov ecx [esp+0Ch+var_4] +
lea ebx [ecx+400h] +
mov [edx+8] ecx +
mov eax 1 +
mov [edx+0Ch] ebx +
mov word ptr [edx+4] 1 +
pop ebx  +
add esp 8 +
retn   +
***
push ebx  +
mov ebx ecx +
push esi  +
push edi  +
cmp word ptr [ebx+4] 0 +
jz loc_4113AD  +
mov eax [ebx+8] +
test eax eax +
jz loc_4113AD  +
cmp eax [esp+0Ch+arg_0] +
jz loc_4113AD  +
mov [esp+0Ch+arg_4] edx +
push dword ptr [ebx+8]  +
call sub_40971C  +
add esp 4 +
mov edx [esp+0Ch+arg_4] +
mov ecx [esp+0Ch+arg_0] +
test ecx ecx +
mov [ebx+8] ecx +
jz loc_4113C4  +
test edx edx +
jz loc_4113C4  +
cmp edx ecx +
jb loc_4113C4  +
mov esi edx +
jmp loc_4113C6  +
mov esi ecx +
cmp ecx 1 +
sbb edi edi +
neg edi  +
mov [ebx+0Ch] esi +
mov [ebx+6] di +
cmp [esp+0Ch+arg_8] 0 +
jz loc_4113DF  +
test ecx ecx +
jnz loc_4113E3  +
xor eax eax +
jmp loc_4113E8  +
mov eax 1 +
mov [ebx+4] ax +
pop edi  +
pop esi  +
pop ebx  +
pop eax  +
retn 0Ch  +
***
mov ebx ecx +
push esi  +
mov esi [esp+4+arg_8] +
test edx edx +
push edi  +
jz loc_411412  +
cmp [esp+8+arg_0] 0 +
jz loc_411412  +
mov eax [esp+8+arg_0] +
jmp loc_411414  +
mov eax edx +
test edx edx +
mov [ebx+1Ch] eax +
mov [ebx+20h] edx +
jz loc_41142A  +
test esi esi +
jz loc_41142A  +
cmp esi edx +
jb loc_41142A  +
mov edi esi +
jmp loc_41142C  +
mov edi edx +
mov [ebx+24h] edi +
pop edi  +
pop esi  +
pop ebx  +
retn 0Ch  +
***
mov edx [esp+arg_0] +
push ebx  +
push 0  +
mov eax [esp+10h+arg_0] +
mov edx [esp+10h+arg_4] +
lea ebx [eax+edx] +
push ebx  +
push eax  +
call sub_41137C  +
mov eax [esp+0Ch+var_4] +
pop ebx  +
add esp 8 +
retn 8  +
***
mov ebx ecx +
mov edx [ebx+24h] +
push ebp  +
mov eax [ebx+20h] +
mov ebp [esp+0Ch+arg_4] +
push esi  +
cmp edx eax +
push edi  +
mov edi [esp+14h+arg_0] +
jbe loc_4114A7  +
mov esi edx +
sub esi eax +
jmp loc_4114A9  +
xor esi esi +
jle loc_4114BB  +
push esi  +
push eax  +
push edi  +
call sub_40B020  +
add edi esi +
add [ebx+20h] esi +
add esp 0Ch +
cmp esi ebp +
jge loc_411529  +
mov ecx [ebx+20h] +
cmp ecx [ebx+24h] +
jb loc_4114DA  +
mov edx [ebx] +
mov ecx ebx +
call dword ptr [edx+0Ch]  +
cmp eax 0FFFFFFFFh +
jnz loc_4114DA  +
mov ecx 0FFFFFFFFh +
jmp loc_4114E5  +
mov edx [ebx+20h] +
inc edx  +
mov [ebx+20h] edx +
dec edx  +
movzx ecx byte ptr [edx] +
cmp ecx 0FFFFFFFFh +
mov [esp+14h+var_4] ecx +
jz loc_411529  +
mov cl byte ptr [esp+14h+var_4] +
inc esi  +
mov [edi] cl +
inc edi  +
cmp esi ebp +
jge loc_411529  +
mov edx [ebx+20h] +
cmp edx [ebx+24h] +
jb loc_411515  +
mov edx [ebx] +
mov ecx ebx +
call dword ptr [edx+0Ch]  +
cmp eax 0FFFFFFFFh +
jnz loc_411515  +
mov ecx 0FFFFFFFFh +
jmp loc_411520  +
mov edx [ebx+20h] +
inc edx  +
mov [ebx+20h] edx +
dec edx  +
movzx ecx byte ptr [edx] +
cmp ecx 0FFFFFFFFh +
mov [esp+14h+var_4] ecx +
jnz loc_4114EE  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
pop ebx  +
pop ecx  +
retn 8  +
***
mov ebx ecx +
mov edx [ebx+14h] +
push ebp  +
mov ebp [esp+0Ch+arg_4] +
push esi  +
mov esi [esp+10h+arg_0] +
push edi  +
mov edi [ebx+18h] +
sub edi edx +
jle loc_41155D  +
push edi  +
push esi  +
push edx  +
call sub_40B020  +
add esi edi +
add [ebx+14h] edi +
add esp 0Ch +
cmp edi ebp +
jge loc_4115D4  +
movsx ecx byte ptr [esi] +
mov [esp+14h+var_4] ecx +
inc esi  +
mov edx [ebx+14h] +
cmp edx [ebx+18h] +
jb loc_411580  +
movzx ecx byte ptr [esp+14h+var_4] +
push ecx  +
mov edx [ebx] +
mov ecx ebx +
call dword ptr [edx+18h]  +
jmp loc_411593  +
mov ecx [ebx+14h] +
inc ecx  +
mov [ebx+14h] ecx +
dec ecx  +
mov al byte ptr [esp+14h+var_4] +
mov [ecx] al +
and eax 0FFh +
cmp eax 0FFFFFFFFh +
jz loc_4115D4  +
inc edi  +
cmp edi ebp +
jge loc_4115D4  +
movsx edx byte ptr [esi] +
inc esi  +
mov ecx [ebx+14h] +
mov [esp+14h+var_4] edx +
cmp ecx [ebx+18h] +
jb loc_4115BC  +
movzx edx byte ptr [esp+14h+var_4] +
push edx  +
mov edx [ebx] +
mov ecx ebx +
call dword ptr [edx+18h]  +
jmp loc_4115CF  +
mov ecx [ebx+14h] +
inc ecx  +
mov [ebx+14h] ecx +
dec ecx  +
mov al byte ptr [esp+14h+var_4] +
mov [ecx] al +
and eax 0FFh +
cmp eax 0FFFFFFFFh +
jnz loc_411598  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
pop ecx  +
retn 8  +
***
mov eax [ecx+24h] +
cmp eax [edx+20h] +
jbe loc_4115F3  +
mov ebx [edx+20h] +
movzx eax byte ptr [ebx] +
pop ebx  +
retn   +
mov [edx+20h] eax +
mov eax 0FFFFFFFFh +
pop ebx  +
retn   +
***
mov eax 0FFFFFFFFh +
mov eax 0FFFFFFFFh +
mov eax 0FFFFFFFFh +
push [esp+arg_4]  +
retn   +
***
call sub_41202C  +
pop eax  +
retn   +
***
call sub_411E28  +
push offset sub_411630  +
call sub_4096D4  +
add esp 4 +
pop eax  +
retn   +
***
add esp 4 +
retn   +
***
add esp 4 +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_4116C9  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_4116E8  +
mov [ebp+var_4] 0 +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov dword ptr [eax] offset off_4225C8 +
mov ebx [edx+4] +
mov [eax+4] ebx +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov eax offset unk_42342C +
jmp sub_41245C  +
***
mov eax [esp+arg_0] +
mov dword ptr [ecx] offset off_423500 +
mov eax ecx +
retn   +
***
push ebx  +
mov ebx ecx +
jz loc_411718  +
push ebx  +
call sub_411720  +
add esp 4 +
test [esp+4+arg_0] 1 +
jz loc_411718  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+arg_0] +
mov dword ptr [eax] offset off_423500 +
retn   +
***
mov edx large fs:0 +
mov eax offset unk_423470 +
push ebx  +
mov ebx ecx +
jz loc_41178C  +
call sub_41172C  +
test [esp+4+arg_0] 1 +
jz loc_41178C  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
mov eax offset aClassBad_cast +
push offset loc_4117C3  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
mov eax offset unk_423498 +
jmp sub_41245C  +
***
mov edx large fs:0 +
mov eax offset unk_4234B0 +
push ebx  +
mov ebx ecx +
jz loc_411830  +
call sub_4117D0  +
test [esp+4+arg_0] 1 +
jz loc_411830  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
mov eax offset aClassBad_typei +
push offset loc_411867  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
mov eax offset unk_4234DC +
jmp sub_41245C  +
***
add ecx 0FFFFFFF8h +
add ecx 0FFFFFFF8h +
mov edx large fs:0 +
mov eax offset unk_423578 +
push ebx  +
mov ebx ecx +
jz loc_411910  +
call sub_411918  +
test [esp+4+arg_0] 1 +
jz loc_411910  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+8] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
mov eax offset unk_4235A0 +
jmp sub_41245C  +
***
mov ebx ecx +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_423614 +
mov dword ptr [ebx] offset off_42361C +
call sub_4119DC  +
pop ebx  +
retn   +
***
mov ebx ecx +
mov edx large fs:0 +
mov eax offset unk_4235C8 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_411AAC  +
call sub_411AB4  +
test [esp+4+arg_0] 1 +
jz loc_411AAC  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+8] +
call sub_40D238  +
pop eax  +
retn   +
***
mov ebx ecx +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_42365C +
mov dword ptr [ebx] offset off_423664 +
call sub_4119BC  +
pop ebx  +
retn   +
***
mov ebx ecx +
mov eax [ebx+4] +
push [esp+arg_0]  +
mov ecx [eax+4] +
lea ecx [ebx+ecx+4] +
call sub_40D1FC  +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
call sub_41202C  +
pop eax  +
retn   +
***
call sub_411E28  +
push offset sub_411B08  +
call sub_4096D4  +
add esp 4 +
pop eax  +
retn   +
***
add ecx 0FFFFFFF0h +
add ecx 0FFFFFFE8h +
add ecx 0FFFFFFF0h +
add ecx 0FFFFFFE8h +
mov edx large fs:0 +
mov eax offset unk_423668 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_411C3C  +
call sub_411C44  +
test [esp+4+arg_0] 1 +
jz loc_411C3C  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+18h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
mov eax offset unk_4236B0 +
jmp sub_41245C  +
***
mov dword ptr [ecx+10h] offset off_4237E0 +
mov eax [ebx+4] +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_4237E8 +
mov dword ptr [ebx] offset off_4237F0 +
lea ecx [ebx+10h] +
call sub_4119BC  +
mov ecx ebx +
call sub_40D5F8  +
pop ebx  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_411DB9  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push ecx  +
push ebx  +
cmp [ebp+arg_0] 0 +
jz loc_411D79  +
mov dword ptr [ecx+4] offset unk_4237F4 +
mov dword ptr [ecx+14h] offset unk_4237FC +
lea ecx [ecx+18h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
call sub_411C58  +
mov [ebp+var_4] 1 +
mov eax [ebp+var_18] +
mov edx [eax+4] +
mov dword ptr [eax+10h] offset off_423838 +
mov ebx [edx+4] +
mov dword ptr [ebx+eax+4] offset off_423840 +
mov dword ptr [eax] offset off_423848 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov eax offset unk_4236F8 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_411DE4  +
call sub_411DEC  +
test [esp+4+arg_0] 1 +
jz loc_411DE4  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+18h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov dword ptr [ecx+10h] offset off_423838 +
mov eax [ebx+4] +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_423840 +
mov dword ptr [ebx] offset off_423848 +
call sub_411D08  +
pop ebx  +
retn   +
***
mov edx large fs:0 +
mov eax offset unk_423738 +
jmp sub_41245C  +
***
jnz loc_412074  +
cmp ds:dword_427BA0 0 +
jz loc_41204A  +
push 1  +
mov ecx ds:dword_427BA0 +
mov eax [ecx] +
call dword ptr [eax]  +
cmp ds:dword_427B9C 0 +
jz loc_41205F  +
push 1  +
mov ecx ds:dword_427B9C +
mov edx [ecx] +
call dword ptr [edx]  +
cmp ds:dword_427B98 0 +
jz loc_412074  +
push 1  +
mov ecx ds:dword_427B98 +
mov ebx [ecx] +
call dword ptr [ebx]  +
pop ebx  +
retn   +
***
call sub_411AB4  +
mov ecx offset unk_427B04 +
call sub_411AB4  +
mov ecx offset unk_427ABC +
call sub_411AB4  +
mov ecx offset unk_427A6C +
call sub_40DA10  +
mov ecx offset unk_427B94 +
call sub_41202C  +
pop eax  +
retn   +
***
call sub_411E28  +
mov ecx offset unk_427A6C +
push 1  +
call sub_40D968  +
mov ecx offset unk_427ABC +
push 1  +
call sub_411A0C  +
mov ecx offset unk_427B04 +
push 1  +
call sub_411A0C  +
mov ecx offset unk_427B4C +
push 1  +
call sub_411A0C  +
push offset sub_412078  +
call sub_4096D4  +
add esp 4 +
pop eax  +
retn   +
***
push eax  +
call sub_416DF8  +
add esp 4 +
retn   +
***
add esp 4 +
retn   +
***
pop eax  +
mov ecx ds:dword_4289EC +
mov eax [esp+arg_0] +
test ecx ecx +
mov ds:dword_4289EC eax +
mov eax ecx +
jnz locret_412146  +
mov eax offset sub_412124 +
retn   +
***
inc dword ptr [eax+2A4h]  +
cmp ds:dword_4289EC 0 +
jz loc_412165  +
call ds:dword_4289EC  +
jmp loc_41216A  +
call sub_412124  +
call loc_4120FC  +
pop eax  +
retn   +
***
pop eax  +
mov ecx ds:dword_4289F0 +
mov eax [esp+arg_0] +
test ecx ecx +
mov ds:dword_4289F0 eax +
mov eax ecx +
jnz locret_412196  +
mov eax offset sub_412174 +
retn   +
***
mov edx large fs:0 +
mov eax offset unk_423854 +
jmp sub_41245C  +
***
mov ebx [ecx] +
sub esp 10h +
push esi  +
push edi  +
lea esi [esp+18h+arg_C] +
lea edi [esp+18h+var_C] +
movs   +
movs   +
movs   +
movs   +
push [esp+18h+var_4]  +
push [esp+1Ch+var_8]  +
push [esp+20h+var_C]  +
push [esp+24h+arg_8]  +
push [esp+28h+arg_4]  +
push [esp+2Ch+arg_0]  +
call sub_412300  +
add esp 18h +
test eax eax +
mov [esp+18h+var_10] eax +
jz loc_4120FC  +
mov eax [esp+18h+var_10] +
push offset Arguments  +
push 1  +
push 1  +
mov ds:Arguments eax +
push 0E0736330h  +
call RaiseException  +
call sub_412148  +
call loc_4120FC  +
pop edi  +
pop esi  +
add esp 10h +
retn   +
***
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
call sub_4099C8  +
mov ebx eax +
test eax eax +
jz loc_4120FC  +
cmp dword ptr [ebx+2A4h] 0 +
jnz loc_4120FC  +
cmp dword ptr [ebx+2A0h] 0 +
jz loc_412335  +
call sub_412148  +
call loc_4120FC  +
lea eax [ebx+0CCh] +
test dword ptr [eax+1Ch] 2 +
jz loc_412367  +
lea ecx [ebx+0CCh] +
xor edx edx +
add edx 2Eh +
cmp edx 1CCh +
jnb loc_4120FC  +
lea eax [edx+ecx] +
test dword ptr [eax+1Ch] 2 +
jnz loc_41234C  +
mov [esp+18h+var_4] eax +
mov ecx [esp+18h+var_4] +
mov eax [esp+18h+arg_0] +
mov [ecx+0Ch] eax +
mov esi [esp+18h+var_4] +
mov edx [esp+18h+arg_4] +
mov [esi+10h] edx +
mov eax [esp+18h+var_4] +
mov edi [esp+18h+arg_8] +
mov [eax+14h] edi +
mov edi [esp+18h+var_4] +
lea esi [esp+18h+arg_C] +
add edi 24h +
movs   +
movs   +
movs   +
movs   +
cmp [esp+18h+arg_8] 0 +
jz loc_4123AB  +
mov ecx [esp+18h+var_4] +
add ecx 24h +
jmp loc_4123B2  +
mov edx [esp+18h+var_4] +
mov ecx [edx+24h] +
mov eax [esp+18h+var_4] +
mov esi [esp+18h+var_4] +
mov [eax] ecx +
mov edi [esp+18h+var_4] +
mov ecx [esp+18h+var_4] +
or dword ptr [esi+1Ch] 1 +
mov eax [esp+18h+var_4] +
or dword ptr [edi+1Ch] 2 +
mov edx [ebx+298h] +
mov [ecx+8] edx +
mov edi [esp+18h+var_4] +
lea esi [ebx+0CCh] +
mov [ebx+298h] eax +
mov eax [esp+18h+var_4] +
mov [edi+4] esi +
pop edi  +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
***
mov ecx [esp+arg_4] +
test esi esi +
jz loc_4120FC  +
test ecx ecx +
jz loc_4120FC  +
mov edx [esi+1CCh] +
mov eax edx +
test edx edx +
jz loc_412436  +
cmp edx ecx +
jz loc_412436  +
mov eax edx +
mov edx [edx+8] +
test edx edx +
jz loc_412436  +
cmp edx ecx +
jnz loc_412429  +
test edx edx +
jnz loc_412442  +
mov eax [esi+1CCh] +
jmp loc_412457  +
cmp edx eax +
jnz loc_41244B  +
mov eax [eax+8] +
jmp loc_412457  +
mov ecx [edx+8] +
mov [eax+8] ecx +
mov eax [esi+1CCh] +
pop esi  +
retn   +
***
sub esp 8 +
sub esp 10h +
push ebx  +
push ebp  +
mov ebp [esp+0Ah+arg_8] +
push esi  +
mov esi [esp+0Eh+arg_0] +
add esi 4 +
push edi  +
mov ebx [esi-4] +
mov edi ecx +
mov [esp+12h+var_2] cx +
test ebx ebx +
jz loc_4125F8  +
mov [esp+12h+var_2] 1 +
cmp ebx 0FFFFFFFFh +
jz loc_4125F8  +
test di di +
jnz loc_4125EE  +
test ebp ebp +
jnz loc_4125EE  +
push 0  +
push ebx  +
push [esp+1Ah+arg_4]  +
call sub_416E04  +
mov edi eax +
add esp 0Ch +
add esi 4 +
mov ebx [esi-4] +
test ebx ebx +
jnz loc_4125CF  +
cmp [esp+12h+var_2] 0 +
mov edx [esp+12h+arg_C] +
mov [edx] esi +
jz loc_41260F  +
test di di +
jnz loc_41260F  +
test ebp ebp +
jz loc_412613  +
xor ecx ecx +
jmp loc_412618  +
mov ecx 1 +
cmp cl 1 +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
pop ecx  +
retn   +
***
mov ax [esp+arg_4] +
push ebx  +
mov ecx [esp+4+arg_0] +
cmp ax dx +
push esi  +
push edi  +
jle loc_412653  +
movsx ebx ax +
add ecx 4 +
movsx esi word ptr [ecx] +
lea edi ds:2[esi*8] +
add ecx edi +
inc edx  +
cmp ebx edx +
jg loc_41263F  +
pop edi  +
mov eax ecx +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
sub esp 14h +
push ebx  +
push 0Ah  +
push 0  +
lea eax [esp+20h+var_10] +
push eax  +
call sub_4097E4  +
add esp 0Ch +
cmp [esp+18h+arg_0] 0 +
jnz loc_41269F  +
push [esp+18h+var_8]  +
push [esp+1Ch+var_C]  +
push [esp+20h+var_10]  +
push 0  +
push 0  +
push 0  +
call sub_412300  +
add esp 18h +
mov ebx eax +
test eax eax +
jnz loc_4126D4  +
call loc_4120FC  +
jmp loc_4126D4  +
call sub_4099C8  +
mov ecx [eax+298h] +
test ecx ecx +
mov [esp+18h+var_4] ecx +
jz loc_4126B8  +
mov ebx [esp+18h+var_4] +
jmp loc_4126D4  +
push [esp+18h+var_8]  +
push [esp+1Ch+var_C]  +
push [esp+20h+var_10]  +
push 0  +
push 0  +
push 0  +
call sub_412300  +
mov ebx eax +
add esp 18h +
mov eax ebx +
pop ebx  +
add esp 14h +
retn   +
***
sub esp 20h +
push eax  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFCh +
sub eax [ebp+arg_4] +
mov [ebp+var_4] eax +
mov ecx [ebp+var_4] +
mov eax [ebp+arg_8] +
mov [ecx] eax +
mov eax [ebp+var_4] +
mov ebp [ebp+arg_0] +
mov esp eax +
retn   +
***
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 28h +
mov eax [esp+arg_0] +
mov ecx [eax] +
cmp dword ptr [ecx] 0E0736330h +
jnz loc_412993  +
call sub_412148  +
mov eax 1 +
retn 4  +
cmp ds:dword_423850 0 +
jz loc_4129A5  +
push eax  +
call ds:dword_423850  +
jmp locret_4129A7  +
xor eax eax +
retn 4  +
***
mov eax [esp+arg_0] +
sub esp 18h +
mov edx [esp+arg_0] +
mov esi 1 +
sub esp 10h +
push ebx  +
push ebp  +
xor ebp ebp +
push esi  +
push edi  +
mov edi [esp+20h+arg_4] +
cmp edi offset unk_4245D4 +
jz loc_412C31  +
cmp byte ptr [edi] 1 +
jnz loc_412BC6  +
mov eax [esp+20h+arg_0] +
mov ecx [eax] +
test ecx 1 +
jz loc_412BB0  +
movsx edx byte ptr [edi+1] +
test edx 0C0h +
jz loc_412C27  +
test ecx 2 +
jz loc_412BBE  +
test byte ptr [edi+1] 40h +
jz loc_412C27  +
mov edi [edi+2] +
mov ebp 1 +
mov ecx [esp+20h+arg_0] +
mov edx [ecx+0Ch] +
xor esi esi +
mov ecx [edx] +
test ecx ecx +
mov [esp+20h+var_4] ecx +
jle loc_412C27  +
mov eax [edx+esi*4+4] +
mov ebx [eax+4] +
add ebx 9 +
test ebp ebp +
jz loc_412BF7  +
cmp byte ptr [ebx] 50h +
jnz loc_412C27  +
cmp edi offset unk_4245D4 +
jz loc_412C31  +
add ebx 2 +
mov [esp+20h+var_C] edx +
mov [esp+20h+var_8] eax +
push edi  +
push ebx  +
call sub_412B30  +
add esp 8 +
test eax eax +
jz loc_412C1C  +
mov eax [esp+20h+var_8] +
mov edx [esp+20h+arg_8] +
mov ebx [eax+8] +
mov [edx] ebx +
jmp loc_412C31  +
inc esi  +
mov edx [esp+20h+var_C] +
cmp esi [esp+20h+var_4] +
jl loc_412BD9  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
pop ebx  +
add esp 10h +
retn   +
pop edi  +
mov eax 1 +
pop esi  +
pop ebp  +
pop ebx  +
add esp 10h +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_412C75  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push [ebp+arg_0]  +
call sub_41217C  +
add esp 4 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
mov eax offset unk_423894 +
jmp sub_41245C  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_412CB5  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push [ebp+arg_0]  +
call sub_41212C  +
add esp 4 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
mov eax offset unk_4238AC +
jmp sub_41245C  +
***
mov edx large fs:0 +
mov eax offset unk_4238C4 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_412D1C  +
call sub_412CC0  +
test [esp+4+arg_0] 1 +
jz loc_412D1C  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
mov eax offset aClassException +
push offset loc_412D53  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
mov eax offset unk_4238EC +
jmp sub_41245C  +
***
mov edx large fs:0 +
mov eax offset unk_423904 +
push ebx  +
mov ebx ecx +
jz loc_412DC0  +
call sub_412D60  +
test [esp+4+arg_0] 1 +
jz loc_412DC0  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
mov eax offset aClassBad_excep +
push offset loc_412DF7  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
mov eax offset unk_423930 +
jmp sub_41245C  +
***
sub esp 24h +
push ebx  +
push esi  +
push edi  +
push ds  +
pop es  +
mov edi [ebp+arg_8] +
mov ebx 1 +
mov ecx [ebp+arg_0] +
lea esi [ebp-1] +
mov [esi] bh +
cmp edi 0Ah +
jnz loc_412E37  +
test ecx ecx +
jns loc_412E37  +
dec ebx  +
neg ecx  +
dec esi  +
mov eax ecx +
xor edx edx +
div  edi +
mov ecx eax +
add dl 30h +
cmp dl 39h +
jle loc_412E4B  +
add dl 7 +
mov [esi] dl +
or eax eax +
jnz loc_412E37  +
dec esi  +
mov byte ptr [esi] 2Dh +
add esi ebx +
mov ecx ebp +
sub ecx esi +
mov edi [ebp+arg_4] +
mov eax edi +
movs   +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edx [esp+arg_4] +
push esi  +
cmp edx ecx +
jz loc_412ECE  +
test edx edx +
jz loc_412ECE  +
dec edx  +
cmp ds:dword_423DD0 0 +
jz loc_412EC9  +
movzx ebx byte ptr [edx] +
test ds:byte_423CC9[ebx] 4 +
jz loc_412E9A  +
pop esi  +
lea eax [edx-1] +
pop ebx  +
retn   +
mov [esp+4+arg_4] edx +
cmp [esp+4+arg_4] ecx +
jz loc_412EB6  +
movzx esi byte ptr [edx-1] +
test ds:byte_423CC9[esi] 4 +
jz loc_412EB6  +
dec edx  +
cmp edx ecx +
jnz loc_412EA4  +
mov eax [esp+4+arg_4] +
mov ecx edx +
sub ecx eax +
pop esi  +
and ecx 1 +
sub eax ecx +
pop ebx  +
retn   +
pop esi  +
mov eax edx +
pop ebx  +
retn   +
pop esi  +
xor eax eax +
pop ebx  +
retn   +
***
sub esp 10h +
mov ecx 1 +
push ebx  +
push ebp  +
xor ebp ebp +
push esi  +
mov esi [esp+1Ch+arg_0] +
push edi  +
mov edi [esp+20h+arg_8] +
mov [esp+20h+var_4] ebp +
mov [esp+20h+var_8] esi +
cmp ds:cchMultiByte ecx +
jle loc_412F0E  +
push 8  +
movsx edx byte ptr [esi] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_412F52  +
jmp loc_412F1F  +
movsx edx byte ptr [esi] +
mov ecx ds:off_421F98 +
test word ptr [ecx+edx*2] 8 +
jz loc_412F52  +
inc esi  +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_412F41  +
push 8  +
movsx ecx byte ptr [esi] +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_412F1F  +
jmp loc_412F52  +
movsx ecx byte ptr [esi] +
mov edx ds:off_421F98 +
test word ptr [edx+ecx*2] 8 +
jnz loc_412F1F  +
movsx ecx byte ptr [esi] +
cmp ecx 2Dh +
jz loc_412F61  +
cmp ecx 2Bh +
jz loc_412F66  +
jmp loc_412F67  +
xor ebx ebx +
inc esi  +
jmp loc_412F6C  +
inc esi  +
mov ebx 1 +
test edi edi +
jz loc_412F7C  +
cmp edi 10h +
jz loc_412FCD  +
cmp edi 2 +
jz loc_412FE1  +
jmp loc_412FF6  +
cmp byte ptr [esi] 30h +
mov edi 0Ah +
jnz loc_412FF6  +
mov [esp+20h+var_4] 1 +
mov edi 8 +
inc esi  +
movsx eax byte ptr [esi] +
cmp eax 78h +
jz loc_412FAD  +
cmp eax 58h +
jz loc_412FAD  +
cmp eax 62h +
jz loc_412FBD  +
cmp eax 42h +
jz loc_412FBD  +
jmp loc_412FF6  +
mov [esp+20h+var_4] 0 +
mov edi 10h +
inc esi  +
jmp loc_412FF6  +
mov [esp+20h+var_4] 0 +
mov edi 2 +
inc esi  +
jmp loc_412FF6  +
cmp byte ptr [esi] 30h +
jnz loc_412FF6  +
mov cl [esi+1] +
cmp cl 78h +
jz loc_412FF3  +
cmp cl 58h +
jz loc_412FF3  +
jmp loc_412FF6  +
cmp byte ptr [esi] 30h +
jnz loc_412FF6  +
mov dl [esi+1] +
cmp dl 62h +
jz loc_412FF3  +
cmp dl 42h +
jnz loc_412FF6  +
add esi 2 +
mov [esp+20h+var_C] 0 +
mov [esp+20h+var_10] ebx +
movsx ebx byte ptr [esi] +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_413023  +
push 4  +
push ebx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_413036  +
jmp loc_413031  +
mov ecx ds:off_421F98 +
test word ptr [ecx+ebx*2] 4 +
jz loc_413036  +
add ebx 0FFFFFFD0h +
jmp loc_41306A  +
cmp ds:cchMultiByte 1 +
jle loc_413053  +
push 103h  +
push ebx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41306E  +
jmp loc_413061  +
mov edx ds:off_421F98 +
test word ptr [edx+ebx*2] 103h +
jz loc_41306E  +
and ebx 0FFFFFFDFh +
add ebx 0FFFFFFC9h +
cmp ebx edi +
jl loc_41307F  +
cmp [esp+20h+var_4] 0 +
mov ebx [esp+20h+var_10] +
jnz loc_4130A3  +
mov esi [esp+20h+var_8] +
jmp loc_4130A3  +
lea eax [ebx-80000000h] +
cdq   +
idiv  edi +
cmp eax ebp +
jle loc_413094  +
mov [esp+20h+var_C] 1 +
imul ebp edi +
sub ebp ebx +
inc esi  +
inc [esp+20h+var_4]  +
jmp loc_413002  +
cmp [esp+20h+arg_4] 0 +
jz loc_4130B0  +
mov ecx [esp+20h+arg_4] +
mov [ecx] esi +
test ebx ebx +
jz loc_4130BC  +
cmp ebp 80000000h +
jz loc_4130C3  +
cmp [esp+20h+var_C] 0 +
jz loc_4130E1  +
push 22h  +
call sub_410018  +
cmp ebx 1 +
sbb eax eax +
and eax 1 +
add eax 7FFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 10h +
retn   +
test ebx ebx +
jz loc_4130EB  +
mov eax ebp +
neg eax  +
jmp loc_4130ED  +
mov eax ebp +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 10h +
retn   +
***
sub esp 74h +
push ebx  +
mov eax [ebp+arg_0] +
mov [ebp+var_40] eax +
lea eax [ebp+var_3C] +
push eax  +
call sub_41879C  +
add esp 4 +
cmp ds:dword_4232EC 0 +
jz loc_413136  +
fstcw  word ptr [ebp+var_30] +
mov eax [ebp+var_30] +
mov ecx eax +
and eax 0F0C0h +
or eax 33Fh +
mov [ebp+var_30] eax +
fldcw  word ptr [ebp+var_30] +
mov [ebp+var_30] ecx +
cmp ds:cchMultiByte 1 +
jle loc_413156  +
mov eax [ebp+arg_0] +
push 8  +
movsx eax byte ptr [eax] +
push eax  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41316F  +
jmp loc_41316A  +
mov eax [ebp+arg_0] +
movsx eax byte ptr [eax] +
mov ecx ds:off_421F98 +
test word ptr [ecx+eax*2] 8 +
jz loc_41316F  +
inc [ebp+arg_0]  +
jmp loc_413136  +
mov [ebp+var_4B] 0 +
mov eax [ebp+arg_0] +
movsx eax byte ptr [eax] +
cmp eax 2Dh +
jz loc_413185  +
cmp eax 2Bh +
jz loc_413188  +
jmp loc_41318B  +
inc [ebp+var_4B]  +
inc [ebp+arg_0]  +
fldz   +
xor eax eax +
xor edx edx +
mov dword ptr [ebp+var_58] eax +
mov dword ptr [ebp+var_60] eax +
mov [ebp+var_44] eax +
mov eax [ebp+arg_0] +
fstp  [ebp+var_70] +
mov [ebp+var_4C] 0 +
mov [ebp+var_64] 0 +
mov dword ptr [ebp+var_58+4] edx +
mov dword ptr [ebp+var_60+4] edx +
mov [ebp+var_50] 1 +
movsx eax byte ptr [eax] +
cmp eax 69h +
jz loc_4131D4  +
cmp eax 49h +
jz loc_4131D4  +
cmp eax 6Eh +
jz loc_413218  +
cmp eax 4Eh +
jz loc_413218  +
jmp loc_413271  +
push 8  +
push offset aInfinity  +
push [ebp+arg_0]  +
call sub_418840  +
add esp 0Ch +
test eax eax +
jnz loc_4131F0  +
add [ebp+arg_0] 8 +
jmp loc_41320A  +
push 3  +
push offset aInfinity  +
push [ebp+arg_0]  +
call sub_418840  +
add esp 0Ch +
test eax eax +
jnz loc_413271  +
add [ebp+arg_0] 3 +
fld  ds:tbyte_423AD0 +
fstp  [ebp+var_70] +
jmp loc_4137CA  +
push 4  +
push offset aNans  +
push [ebp+arg_0]  +
call sub_418840  +
add esp 0Ch +
test eax eax +
jnz loc_41323D  +
add [ebp+arg_0] 4 +
fld  ds:dbl_423ABC +
fstp  [ebp+var_70] +
jmp loc_413260  +
push 3  +
push offset aNans  +
push [ebp+arg_0]  +
call sub_418840  +
add esp 0Ch +
test eax eax +
jnz loc_413271  +
add [ebp+arg_0] 3 +
fld  ds:tbyte_423AC4 +
fstp  [ebp+var_70] +
mov eax [ebp+arg_0] +
cmp byte ptr [eax] 28h +
jz loc_4137FF  +
jmp loc_4137CA  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax] 30h +
jnz loc_41353F  +
mov eax [ebp+arg_0] +
mov al [eax+1] +
cmp al 78h +
jz loc_41328F  +
cmp al 58h +
jnz loc_41353F  +
mov [ebp+var_28] 0 +
mov [ebp+var_24] 0 +
add [ebp+arg_0] 2 +
mov eax [ebp+arg_0] +
movzx eax byte ptr [eax] +
mov [ebp+var_20] eax +
cmp ds:cchMultiByte 1 +
jle loc_4132CD  +
push 80h  +
push [ebp+var_20]  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_4133D5  +
jmp loc_4132E2  +
mov eax [ebp+var_20] +
mov ecx ds:off_421F98 +
test word ptr [ecx+eax*2] 80h +
jz loc_4133D5  +
mov [ebp+var_24] 1 +
cmp ds:cchMultiByte 1 +
jle loc_413308  +
push 103h  +
push [ebp+var_20]  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_413326  +
jmp loc_413319  +
mov eax [ebp+var_20] +
mov ecx ds:off_421F98 +
test word ptr [ecx+eax*2] 103h +
jz loc_413326  +
mov eax [ebp+var_20] +
and eax 0FFFFFFDFh +
add eax 0FFFFFFC9h +
jmp loc_41332C  +
mov eax [ebp+var_20] +
add eax 0FFFFFFD0h +
mov [ebp+var_20] eax +
cmp [ebp+var_44] 10h +
jge loc_41336A  +
mov eax dword ptr [ebp+var_60] +
mov edx dword ptr [ebp+var_60+4] +
add eax eax +
rcl edx 1 +
add eax eax +
mov ebx [ebp+var_20] +
rcl edx 1 +
add eax eax +
mov ecx ebx +
rcl edx 1 +
add eax eax +
rcl edx 1 +
sar ecx 1Fh +
add eax ebx +
adc edx ecx +
mov dword ptr [ebp+var_60] eax +
mov dword ptr [ebp+var_60+4] edx +
mov eax dword ptr [ebp+var_60+4] +
or eax dword ptr [ebp+var_60] +
jz loc_4133BD  +
inc [ebp+var_44]  +
jmp loc_4133BD  +
cmp [ebp+var_44] 10h +
jnz loc_4133B3  +
cmp dword ptr [ebp+var_60+4] 0 +
jl loc_4133A1  +
jg loc_41337E  +
cmp dword ptr [ebp+var_60] 0 +
jb loc_4133A1  +
dec [ebp+var_64]  +
mov eax [ebp+var_20] +
shl dword ptr [ebp+var_60] 1 +
rcl dword ptr [ebp+var_60+4] 1 +
add eax eax +
mov [ebp+var_20] eax +
test [ebp+var_20] 10h +
jz loc_413370  +
or dword ptr [ebp+var_60] 1 +
jmp loc_413370  +
inc [ebp+var_44]  +
mov eax [ebp+var_20] +
shl eax 4 +
mov [ebp+var_28] eax +
add [ebp+var_64] 4 +
jmp loc_4133BD  +
add [ebp+var_64] 4 +
mov eax [ebp+var_20] +
or [ebp+var_28] eax +
movsx eax [ebp+var_4C] +
sub [ebp+var_64] eax +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
movsx eax byte ptr [eax] +
mov [ebp+var_20] eax +
jmp loc_4132AA  +
mov eax ds:lpMultiByteStr +
movsx eax byte ptr [eax] +
cmp eax [ebp+var_20] +
jnz loc_4133F4  +
cmp [ebp+var_4C] 0 +
jnz loc_4133F4  +
inc [ebp+arg_0]  +
mov [ebp+var_4C] 4 +
jmp loc_4132A1  +
test [ebp+var_28] 80h +
jz loc_413438  +
test [ebp+var_28] 7Fh +
jnz loc_413417  +
mov eax dword ptr [ebp+var_60] +
mov edx dword ptr [ebp+var_60+4] +
and eax 1 +
xor edx edx +
or edx eax +
jz loc_413438  +
add dword ptr [ebp+var_60] 1 +
adc dword ptr [ebp+var_60+4] 0 +
mov eax dword ptr [ebp+var_60+4] +
or eax dword ptr [ebp+var_60] +
jnz loc_413438  +
mov dword ptr [ebp+var_60] 0 +
mov dword ptr [ebp+var_60+4] 80000000h +
inc [ebp+var_64]  +
cmp [ebp+var_24] 0 +
jz loc_4137FF  +
mov eax [ebp+arg_0] +
mov al [eax] +
cmp al 70h +
jz loc_413453  +
cmp al 50h +
jnz loc_4137FF  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
mov [ebp+var_1C] 0 +
movsx eax byte ptr [eax] +
cmp eax 2Dh +
jz loc_41346C  +
cmp eax 2Bh +
jz loc_41346F  +
jmp loc_413472  +
inc [ebp+var_1C]  +
inc [ebp+arg_0]  +
mov [ebp+var_44] 0 +
mov [ebp+var_18] 0 +
cmp ds:cchMultiByte 1 +
jle loc_4134A0  +
mov eax [ebp+arg_0] +
push 4  +
movzx eax byte ptr [eax] +
push eax  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_4134DC  +
jmp loc_4134B4  +
mov eax [ebp+arg_0] +
movzx eax byte ptr [eax] +
mov ecx ds:off_421F98 +
test word ptr [ecx+eax*2] 4 +
jz loc_4134DC  +
cmp [ebp+var_18] 0CCCCCC2h +
jge loc_4134D0  +
mov eax [ebp+var_18] +
mov ecx [ebp+arg_0] +
movsx ecx byte ptr [ecx] +
lea eax [eax+eax*4] +
lea eax [ecx+eax*2-30h] +
mov [ebp+var_18] eax +
inc [ebp+arg_0]  +
mov [ebp+var_44] 1 +
jmp loc_413480  +
cmp [ebp+var_1C] 0 +
jz loc_4134E9  +
mov eax [ebp+var_18] +
neg eax  +
jmp loc_4134EC  +
mov eax [ebp+var_18] +
add [ebp+var_64] eax +
cmp [ebp+var_44] 0 +
jz loc_4137FF  +
mov eax dword ptr [ebp+var_60+4] +
or eax dword ptr [ebp+var_60] +
jz loc_4137A3  +
cmp dword ptr [ebp+var_60+4] 0 +
jg loc_413527  +
jl loc_413513  +
cmp dword ptr [ebp+var_60] 0 +
jnb loc_413527  +
mov word ptr [ebp+var_70+8] 403Eh +
mov eax dword ptr [ebp+var_60] +
mov edx dword ptr [ebp+var_60+4] +
mov dword ptr [ebp+var_70] eax +
mov dword ptr [ebp+var_70+4] edx +
jmp loc_41352D  +
fild  [ebp+var_60] +
fstp  [ebp+var_70] +
fild  [ebp+var_64] +
fld  [ebp+var_70] +
fscale   +
fstp  st(1) +
fstp  [ebp+var_70] +
jmp loc_4137A3  +
mov eax [ebp+arg_0] +
movzx eax byte ptr [eax] +
mov [ebp+var_14] eax +
cmp ds:cchMultiByte 1 +
jle loc_413568  +
push 4  +
push [ebp+var_14]  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_413615  +
jmp loc_41357D  +
mov eax [ebp+var_14] +
mov ecx ds:off_421F98 +
test word ptr [ecx+eax*2] 4 +
jz loc_413615  +
mov [ebp+var_44] 1 +
cmp dword ptr [ebp+var_60+4] 0CCCh +
jg loc_4135C1  +
jl loc_413598  +
cmp dword ptr [ebp+var_60] 0CCCCCCCBh +
jnb loc_4135C1  +
mov edx dword ptr [ebp+var_60+4] +
imul ecx edx +
mov eax dword ptr [ebp+var_60] +
mov edx 0Ah +
mov ebx [ebp+var_14] +
add ebx 0FFFFFFD0h +
mul  edx +
add edx ecx +
mov ecx ebx +
sar ecx 1Fh +
add eax ebx +
adc edx ecx +
mov dword ptr [ebp+var_60] eax +
mov dword ptr [ebp+var_60+4] edx +
jmp loc_4135FD  +
cmp [ebp+var_50] 19999998h +
jnb loc_4135FA  +
mov edx dword ptr [ebp+var_58+4] +
imul ecx edx +
mov eax dword ptr [ebp+var_58] +
mov edx 0Ah +
mov ebx [ebp+var_14] +
add ebx 0FFFFFFD0h +
mul  edx +
add edx ecx +
mov ecx ebx +
sar ecx 1Fh +
add eax ebx +
adc edx ecx +
mov dword ptr [ebp+var_58] eax +
imul eax [ebp+var_50] +
mov dword ptr [ebp+var_58+4] edx +
mov [ebp+var_50] eax +
jmp loc_4135FD  +
inc [ebp+var_64]  +
movsx eax [ebp+var_4C] +
sub [ebp+var_64] eax +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
movzx eax byte ptr [eax] +
mov [ebp+var_14] eax +
jmp loc_413548  +
mov eax ds:lpMultiByteStr +
movsx eax byte ptr [eax] +
cmp eax [ebp+var_14] +
jnz loc_413633  +
cmp [ebp+var_4C] 0 +
jnz loc_413633  +
inc [ebp+arg_0]  +
inc [ebp+var_4C]  +
jmp loc_41353F  +
cmp [ebp+var_44] 0 +
jz loc_4137FF  +
mov eax [ebp+arg_0] +
mov al [eax] +
cmp al 65h +
jz loc_41364E  +
cmp al 45h +
jnz loc_4136F4  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
mov [ebp+var_10] 0 +
movsx eax byte ptr [eax] +
cmp eax 2Dh +
jz loc_413667  +
cmp eax 2Bh +
jz loc_41366A  +
jmp loc_41366D  +
inc [ebp+var_10]  +
inc [ebp+arg_0]  +
mov [ebp+var_44] 0 +
mov [ebp+var_C] 0 +
cmp ds:cchMultiByte 1 +
jle loc_41369B  +
mov eax [ebp+arg_0] +
push 4  +
movzx eax byte ptr [eax] +
push eax  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_4136D7  +
jmp loc_4136AF  +
mov eax [ebp+arg_0] +
movzx eax byte ptr [eax] +
mov ecx ds:off_421F98 +
test word ptr [ecx+eax*2] 4 +
jz loc_4136D7  +
cmp [ebp+var_C] 0CCCCCC2h +
jge loc_4136CB  +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_0] +
movsx ecx byte ptr [ecx] +
lea eax [eax+eax*4] +
lea eax [ecx+eax*2-30h] +
mov [ebp+var_C] eax +
inc [ebp+arg_0]  +
mov [ebp+var_44] 1 +
jmp loc_41367B  +
cmp [ebp+var_10] 0 +
jz loc_4136E4  +
mov eax [ebp+var_C] +
neg eax  +
jmp loc_4136E7  +
mov eax [ebp+var_C] +
add [ebp+var_64] eax +
cmp [ebp+var_44] 0 +
jz loc_4137FF  +
fild  [ebp+var_60] +
mov eax [ebp+var_50] +
cmp eax 1 +
jz loc_413709  +
fild  [ebp+var_50] +
fmulp st(1) st +
fild  [ebp+var_58] +
faddp st(1) st +
fstp  [ebp+var_70] +
fld  [ebp+var_70] +
fldz   +
fucompp   +
fnstsw  ax +
sahf   +
jz loc_4137A3  +
mov [ebp+var_8] 0 +
mov [ebp+var_48] 1000h +
fld  [ebp+var_70] +
cmp [ebp+var_64] 0 +
jle loc_413759  +
mov eax [ebp+var_64] +
cmp eax [ebp+var_48] +
jl loc_413751  +
mov eax [ebp+var_8] +
imul eax eax +
fld  ds:tbyte_42399C[eax] +
fmulp st(1) st +
mov eax [ebp+var_48] +
sub [ebp+var_64] eax +
jmp loc_413733  +
sar [ebp+var_48] 1 +
inc [ebp+var_8]  +
jmp loc_41372D  +
fstp  [ebp+var_70] +
cmp [ebp+var_64] 0 +
jns loc_4137A3  +
mov eax [ebp+var_48] +
neg eax  +
cmp eax [ebp+var_64] +
jl loc_41379B  +
mov eax [ebp+var_8] +
imul eax eax +
fld  [ebp+var_70] +
fld  ds:tbyte_423A20[eax] +
fmulp st(1) st +
fstp  [ebp+var_70] +
fld  [ebp+var_70] +
fldz   +
fucompp   +
fnstsw  ax +
sahf   +
jnz loc_413793  +
push 22h  +
call sub_410018  +
mov eax [ebp+var_48] +
add [ebp+var_64] eax +
jmp loc_413762  +
sar [ebp+var_48] 1 +
inc [ebp+var_8]  +
jmp loc_41375C  +
fld  [ebp+var_70] +
fld  ds:tbyte_423AD0 +
fucompp   +
fnstsw  ax +
sahf   +
jnz loc_4137BC  +
jp loc_4137BC  +
push 22h  +
call sub_410018  +
cmp [ebp+arg_4] 0 +
jz loc_4137CA  +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov [ecx] eax +
lea eax [ebp+var_3C] +
push eax  +
call sub_4187F4  +
add esp 4 +
cmp ds:dword_4232EC 0 +
jz loc_4137EA  +
xor eax eax +
fstsw  ax +
fclex   +
fldcw  word ptr [ebp+var_30] +
cmp [ebp+var_4B] 0 +
jz loc_4137F7  +
fld  [ebp+var_70] +
fchs   +
jmp loc_4137FA  +
fld  [ebp+var_70] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov eax [ebp+var_40] +
mov [ebp+arg_0] eax +
jmp loc_4137BC  +
***
sub esp 2Ch +
push ebx  +
push ebp  +
mov ebp [esp+34h+arg_8] +
push esi  +
push edi  +
mov edi [esp+3Ch+arg_18] +
fld  [esp+3Ch+arg_C] +
fstp  [esp+3Ch+var_C] +
movsx eax word ptr [esp+3Ch+var_C+8] +
test eax 8000h +
jz loc_41383C  +
xor byte ptr [esp+3Ch+arg_C+9] 80h +
mov ebx [esp+3Ch+arg_0] +
mov dword ptr [ebx] 1 +
jmp loc_413846  +
mov ecx [esp+3Ch+arg_0] +
mov dword ptr [ecx] 0 +
test ebp ebp +
mov esi 0 +
js loc_41385D  +
cmp ebp 24h +
jge loc_413858  +
mov esi ebp +
jmp loc_41385D  +
mov esi 24h +
mov ebp esi +
fld  [esp+3Ch+arg_C] +
fldz   +
fucompp   +
fnstsw  ax +
sahf   +
jnz loc_41387F  +
push ebp  +
push 30h  +
push edi  +
call sub_4097E4  +
xor esi esi +
add esp 0Ch +
jmp loc_4139EC  +
mov [esp+3Ch+var_14] dl +
mov esi 1 +
mov edx 1000h +
fld  [esp+3Ch+arg_C] +
fld  ds:tbyte_423BF4 +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jbe loc_4138E0  +
mov ebx offset unk_423B70 +
mov ecx offset unk_423AEE +
fld  tbyte ptr [ecx] +
fld  [esp+3Ch+arg_C] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jnb loc_4138C7  +
jp loc_4138C7  +
fld  tbyte ptr [ebx] +
sub esi edx +
fld  [esp+3Ch+arg_C] +
fmulp st(1) st +
fstp  [esp+3Ch+arg_C] +
jmp loc_4138A8  +
fld  [esp+3Ch+arg_C] +
sar edx 1 +
add ebx 0Ah +
fld  ds:tbyte_423BF4 +
add ecx 0Ah +
fcompp st(1) st +
fnstsw  ax +
sahf   +
ja loc_4138A8  +
fld  [esp+3Ch+arg_C] +
mov edx 1000h +
fld  ds:tbyte_423C00 +
fcompp st(1) st +
fnstsw  ax +
sahf   +
ja loc_41393A  +
jp loc_41393A  +
mov ebx offset unk_423AE4 +
mov ecx offset unk_423B70 +
fld  tbyte ptr [ecx] +
fld  [esp+3Ch+arg_C] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jb loc_41391F  +
fld  tbyte ptr [ebx] +
add esi edx +
fld  [esp+3Ch+arg_C] +
fmulp st(1) st +
fstp  [esp+3Ch+arg_C] +
jmp loc_413902  +
fld  [esp+3Ch+arg_C] +
sar edx 1 +
add ebx 0Ah +
fld  ds:tbyte_423C00 +
add ecx 0Ah +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jp loc_41393A  +
jbe loc_413902  +
cmp [esp+3Ch+arg_1C] 1 +
mov dl [esp+3Ch+var_14] +
jnz loc_413956  +
test esi esi +
jle loc_413956  +
add ebp esi +
mov ecx 24h +
cmp ebp ecx +
jle loc_413956  +
mov ebp ecx +
xor eax eax +
xor ebx ebx +
test ebp ebp +
mov [esp+3Ch+var_18] eax +
js loc_4139C3  +
cmp eax 13h +
jle loc_41396E  +
mov edx 30h +
jmp loc_4139BB  +
fld  [esp+3Ch+arg_C] +
sub esp 8 +
fnstcw  [esp+44h+var_40] +
fldcw  ds:word_423C0C +
fistp  [esp+44h+var_44] +
fldcw  [esp+44h+var_40] +
pop ecx  +
add esp 4 +
mov [esp+3Ch+var_10] ecx +
mov dl byte ptr [esp+3Ch+var_10] +
add dl 30h +
fld  [esp+3Ch+arg_C] +
test ecx ecx +
fild  [esp+3Ch+var_10] +
fsubp st(1) st +
fld  ds:tbyte_423C00 +
fmulp st(1) st +
fstp  [esp+3Ch+arg_C] +
jz loc_4139B7  +
mov [esp+3Ch+var_18] 1 +
add eax [esp+3Ch+var_18] +
mov [ebx+edi] dl +
inc ebx  +
cmp ebx ebp +
jle loc_413962  +
cmp dl 35h +
jl loc_4139EC  +
dec ebx  +
mov edx 30h +
test ebx ebx +
jnz loc_4139D9  +
add ebp [esp+3Ch+arg_1C] +
inc esi  +
jmp loc_4139E6  +
mov byte ptr [ebx+edi] 30h +
dec ebx  +
mov dl [ebx+edi] +
cmp dl 39h +
jz loc_4139C9  +
mov cl dl +
inc ecx  +
mov [edi+ebx] cl +
mov edx [esp+3Ch+arg_4] +
mov eax edi +
mov [edx] esi +
mov byte ptr [edi+ebp] 0 +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 2Ch +
retn 20h  +
***
push eax  +
fld  [ebp+arg_0] +
fxam   +
fstsw  ax +
fstp  st +
and eax 4500h +
cmp eax 100h +
jz loc_413A43  +
cmp eax 400h +
jz loc_413A4C  +
cmp eax 500h +
jz loc_413A55  +
cmp eax 4000h +
jz loc_413A5E  +
cmp eax 4400h +
jz loc_413A67  +
cmp eax 4100h +
jz loc_413A70  +
jmp loc_413A79  +
mov [ebp+var_4] 1 +
jmp loc_413A80  +
mov [ebp+var_4] 3 +
jmp loc_413A80  +
mov [ebp+var_4] 2 +
jmp loc_413A80  +
mov [ebp+var_4] 5 +
jmp loc_413A80  +
mov [ebp+var_4] 4 +
jmp loc_413A80  +
mov [ebp+var_4] 6 +
jmp loc_413A80  +
mov [ebp+var_4] 7 +
mov eax [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 0Ch +
xor edx edx +
push ebx  +
mov ebx [esp+10h+lpWideCharStr] +
push esi  +
mov esi [esp+14h+lpMultiByteStr] +
test esi esi +
push edi  +
jz loc_413B4D  +
cmp [esp+18h+arg_8] edx +
jz loc_413B4D  +
mov cl [esi] +
mov [esp+18h+var_8] cl +
test cl cl +
jnz loc_413AC6  +
test ebx ebx +
jz loc_413B4D  +
mov word ptr [ebx] 0 +
jmp loc_413B4D  +
cmp ds:Locale 0 +
jnz loc_413ADD  +
test ebx ebx +
jz loc_413B48  +
movzx eax [esp+18h+var_8] +
mov [ebx] ax +
jmp loc_413B48  +
cmp ebx 1 +
sbb edi edi +
inc edi  +
movzx edx byte ptr [esi] +
mov ecx ds:off_421F98 +
test word ptr [ecx+edx*2] 8000h +
jz loc_413B2D  +
mov edx ds:cchMultiByte +
cmp edx 2 +
jl loc_413B56  +
mov ecx ds:cchMultiByte +
cmp ecx [esp+18h+arg_8] +
ja loc_413B56  +
push edi  +
push ebx  +
push edx  +
push esi  +
push ds:dwFlags  +
push ds:CodePage  +
call MultiByteToWideChar  +
test eax eax +
jz loc_413B56  +
mov edx ds:cchMultiByte +
jmp loc_413B4D  +
push edi  +
push ebx  +
push 1  +
push esi  +
push ds:dwFlags  +
push ds:CodePage  +
call MultiByteToWideChar  +
test eax eax +
jz loc_413B56  +
mov edx 1 +
pop edi  +
mov eax edx +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
push 2Ah  +
call sub_410018  +
mov [esp+18h+var_4] 0FFFFFFFFh +
mov edx [esp+18h+var_4] +
jmp loc_413B4D  +
***
cmp [esp+arg_4] 0 +
call sub_40FDE8  +
add esp 4 +
lea eax ds:2[eax*2] +
push eax  +
push [esp+4+arg_4]  +
push [esp+8+arg_0]  +
call sub_40B020  +
add esp 0Ch +
pop ecx  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_413C24  +
push edx  +
mov large fs:0 esp +
sub esp 10h +
push 18h  +
call sub_40B300  +
add esp 4 +
test eax eax +
mov [ebp+var_18] eax +
jz loc_413C13  +
mov [ebp+var_4] 0 +
mov ecx eax +
push 0  +
push [ebp+arg_0]  +
call sub_413C30  +
mov [ebp+var_4] 0FFFFFFFFh +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
mov eax offset unk_423C6C +
jmp sub_41245C  +
***
mov ebx [esp+arg_4] +
push ebx  +
mov ebx ecx +
push esi  +
cmp dword ptr [ecx+4] 0 +
jnz loc_413D3C  +
call sub_413C94  +
cmp dword ptr [ebx+4] 0 +
jnz loc_413D3C  +
pop esi  +
xor eax eax +
pop ebx  +
pop ecx  +
retn   +
mov ecx [ebx+4] +
mov eax ecx +
mov [esp+0Ch+var_4] ecx +
mov edx [esp+0Ch+var_4] +
mov esi [edx] +
mov [ebx+4] esi +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
mov edx [esp+arg_0] +
mov eax [ecx+4] +
mov [edx] eax +
mov [ecx+4] edx +
retn 4  +
***
mov dword ptr [ecx] 0 +
lea ecx [ebx+4] +
call sub_414034  +
lea eax [ebx+4] +
mov [ebx+18h] eax +
mov eax ebx +
pop ebx  +
retn   +
***
cmp ecx 0FFFFFFF3h +
jbe loc_413D90  +
pop ebx  +
xor eax eax +
retn 4  +
add ecx 0Ch +
cmp ecx 24h +
jnb loc_413D9D  +
mov ecx 24h +
lea eax [ecx-1] +
mov ebx 0Ch +
xor edx edx +
div  ebx +
lea eax [eax+eax*2] +
lea eax ds:0[eax*4] +
add eax ebx +
pop ebx  +
retn 4  +
***
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [esp+14h+arg_0] +
push edi  +
mov edi ecx +
push esi  +
call sub_413D80  +
mov ebx [edi+18h] +
mov esi eax +
mov [esp+18h+var_8] ebx +
mov ecx [esp+18h+var_8] +
mov [esp+18h+var_4] ecx +
mov eax [esp+18h+var_4] +
cmp [ebx] esi +
jnb loc_413E07  +
mov ebx [ebx+10h] +
cmp ebx eax +
jnz loc_413DE3  +
push esi  +
mov ecx edi +
call sub_413F14  +
mov ebx eax +
test eax eax +
jnz loc_413E07  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 0Ch +
retn 4  +
push esi  +
mov ecx ebx +
call sub_414158  +
test eax eax +
jz loc_413E15  +
dec dword ptr [edi]  +
test ebx ebx +
jz loc_413E1E  +
lea eax [ebx+0Ch] +
jmp loc_413E20  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
add esp 0Ch +
retn 4  +
***
sub esp 10h +
mov edx [esp+10h+arg_0] +
test edx edx +
push ebx  +
mov ebx ecx +
push esi  +
push edi  +
jnz loc_413E4E  +
push [esp+1Ch+arg_4]  +
call sub_413DBC  +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
test edx edx +
jz loc_413E57  +
lea eax [edx-0Ch] +
jmp loc_413E59  +
xor eax eax +
mov esi [eax] +
add esi 0FFFFFFF4h +
mov [esp+1Ch+var_10] eax +
mov [esp+1Ch+var_C] esi +
cmp esi [esp+1Ch+arg_4] +
jnb loc_413F07  +
mov [esp+1Ch+arg_0] edx +
push [esp+1Ch+arg_4]  +
call sub_413D80  +
mov ecx [esp+1Ch+var_10] +
mov [esp+1Ch+var_8] eax +
call sub_4140DC  +
test eax eax +
jz loc_413ECB  +
dec dword ptr [ebx]  +
mov edx [esp+1Ch+var_10] +
mov edi [edx] +
cmp edi [esp+1Ch+var_8] +
jb loc_413ECB  +
lea edx [ebx+4] +
push edx  +
push [esp+20h+var_8]  +
mov ecx [esp+24h+var_10] +
call sub_414184  +
test eax eax +
jnz loc_413EB3  +
inc dword ptr [ebx]  +
mov ebx [esp+1Ch+var_10] +
test ebx ebx +
jz loc_413EC0  +
lea eax [ebx+0Ch] +
jmp loc_413EC2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
push [esp+1Ch+arg_4]  +
mov ecx ebx +
call sub_413DBC  +
test eax eax +
mov [esp+1Ch+var_4] eax +
jz loc_413EEF  +
push [esp+1Ch+var_C]  +
push [esp+20h+arg_0]  +
push eax  +
call sub_40B020  +
add esp 0Ch +
push [esp+1Ch+arg_0]  +
mov ecx ebx +
call sub_413FC8  +
mov eax [esp+1Ch+var_4] +
pop edi  +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
pop edi  +
mov eax edx +
pop esi  +
pop ebx  +
add esp 10h +
retn 8  +
***
mov edx large fs:0 +
mov eax offset unk_423C98 +
mov ebx ecx +
push esi  +
push edi  +
mov edi [esp+8+arg_0] +
test edi edi +
jz loc_41400F  +
test edi edi +
jz loc_413FDF  +
lea esi [edi-0Ch] +
jmp loc_413FE1  +
xor esi esi +
lea edx [ebx+4] +
mov ecx esi +
mov dword ptr [esi+8] 98A1h +
push edx  +
call sub_414068  +
mov ecx esi +
inc dword ptr [ebx]  +
call sub_4140DC  +
test eax eax +
jz loc_414002  +
dec dword ptr [ebx]  +
mov ecx esi +
call sub_414094  +
test eax eax +
jz loc_41400F  +
dec dword ptr [ebx]  +
pop edi  +
pop esi  +
pop ebx  +
pop eax  +
retn 4  +
***
mov edx ecx +
mov eax [esp+arg_0] +
mov [edx] eax +
mov eax ecx +
mov dword ptr [edx+4] 0 +
mov dword ptr [edx+8] 98A1h +
retn 4  +
***
push 0  +
push [esp+arg_0]  +
call sub_414018  +
mov ecx ebx +
push [esp+arg_4]  +
call sub_414068  +
mov eax ebx +
pop ebx  +
retn 8  +
***
mov edx ecx +
push esi  +
mov ebx [eax+10h] +
mov esi [esp+4+arg_0] +
push edi  +
mov edi [esp+8+arg_0] +
mov [edx+10h] ebx +
mov [edx+0Ch] esi +
mov [edi+10h] edx +
mov eax [edx+10h] +
mov [eax+0Ch] edx +
pop edi  +
pop esi  +
pop ebx  +
retn 4  +
***
test eax eax +
sub esp 0Ch +
push ebx  +
push esi  +
mov [esp+14h+var_8] ecx +
call sub_414134  +
mov [esp+14h+var_4] eax +
cmp dword ptr [eax] 0 +
jz loc_4140FC  +
cmp dword ptr [eax+8] 2D3Fh +
jnz loc_414104  +
pop esi  +
xor eax eax +
pop ebx  +
add esp 0Ch +
retn   +
mov ecx eax +
call sub_414134  +
mov edx [esp+14h+var_4] +
mov esi [esp+14h+var_8] +
mov ebx [edx] +
add [esi] ebx +
cmp dword ptr [eax] 0 +
jz loc_41411F  +
mov [eax+4] esi +
mov ecx [esp+14h+var_4] +
call sub_41413C  +
mov eax 1 +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
***
add eax ecx +
retn   +
***
mov edx [ebx+10h] +
push esi  +
mov eax [ecx+0Ch] +
mov [edx+0Ch] eax +
mov esi [ebx+10h] +
push edi  +
mov edi [ebx+0Ch] +
mov [edi+10h] esi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx ecx +
mov [esp+8+var_4] eax +
call sub_41413C  +
mov ecx ebx +
push [esp+8+var_4]  +
mov dword ptr [ebx+8] 2D3Fh +
push [esp+0Ch+arg_0]  +
call sub_414184  +
pop ebx  +
pop ecx  +
retn 4  +
***
push ecx  +
jnz loc_414206  +
inc ds:byte_427BE0  +
mov ecx offset unk_427BE4 +
call sub_413D64  +
mov ds:dword_423CC0 offset unk_427BE4 +
pop eax  +
retn   +
***
call sub_414338  +
add esp 4 +
pop eax  +
retn   +
***
push esi  +
push ebx  +
mov ebx [esp+arg_0] +
push ebp  +
push esi  +
push edi  +
xor edi edi +
cmp ds:dword_424D18 edi +
jle loc_41432C  +
mov ecx offset dword_424C78 +
cmp [ecx] ebx +
jnz loc_41431C  +
mov [esp+0Ch+arg_0] ebx +
push 101h  +
push 0  +
push offset unk_423CC8  +
call sub_4097E4  +
lea ecx ds:0[edi*8] +
add esp 0Ch +
cmp ds:word_424C80[ecx*4] 0 +
jle loc_4142E9  +
lea edx ds:0[edi*8] +
lea ecx ds:0[edi*8] +
xor ebx ebx +
lea esi off_424C84[edx*4] +
lea ebp word_424C80[ecx*4] +
mov edx [esi] +
mov ecx [esi] +
push dword ptr [edx+ebx]  +
mov edx [esi] +
push dword ptr [ecx+ebx+2]  +
push dword ptr [edx+ebx+1]  +
push offset unk_423CC8  +
call sub_414224  +
mov ecx 3 +
add ebx ecx +
add esp 10h +
movsx edx word ptr [ebp+0] +
lea ecx [edx+edx*2] +
cmp ecx ebx +
jg loc_4142B9  +
mov eax [esp+0Ch+arg_0] +
mov ebx edi +
shl ebx 5 +
mov ds:dword_423DD0 eax +
mov esi ds:dword_424C7C[ebx] +
mov eax 1 +
mov ds:dword_423DD4 esi +
lea edx dword_424C78[ebx] +
mov ds:dword_423DCC edx +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 8 +
retn   +
add ecx 20h +
inc edi  +
cmp edi ds:dword_424D18 +
jl loc_414269  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
pop ebx  +
add esp 8 +
retn   +
***
sub esp 1Ch +
push ebx  +
mov ebx [esp+0Ch+arg_0] +
push 0FFFFFFF4h  +
call GetStdHandle  +
cmp eax 0FFFFFFFFh +
mov [esp+0Ch+hConsoleOutput] eax +
jz loc_414498  +
push 0  +
lea ecx [esp+10h+NumberOfCharsWritten] +
push ecx  +
push ebx  +
call sub_40A110  +
add esp 4 +
push eax  +
push ebx  +
push [esp+1Ch+hConsoleOutput]  +
call WriteConsoleA  +
test eax eax +
jnz loc_4144AA  +
push 2010h  +
push [esp+10h+lpCaption]  +
push ebx  +
push 0  +
call MessageBoxA  +
pop ebx  +
add esp 8 +
retn   +
***
call sub_414460  +
mov eax [esp-8+arg_8] +
push ds:hFile[eax*4]  +
call GetFileType  +
cmp eax 2 +
mov eax 1 +
jz locret_4144E5  +
xor eax eax +
retn   +
***
sub esp 8 +
push ebx  +
mov ebx [ebp+arg_0] +
cmp ebx 3Ch +
jnb loc_41453A  +
mov ecx [ebp+arg_8] +
or ecx ecx +
jz loc_414536  +
test ds:byte_4221A4[ebx] 10h +
jnz loc_41454B  +
mov edx [ebp+lpBuffer] +
push ecx  +
push edx  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push ecx  +
push edx  +
push ds:hFile[ebx*4]  +
call ReadFile  +
pop edx  +
pop ecx  +
or eax eax +
jz loc_41453A  +
mov eax [ebp+NumberOfBytesRead] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
xor eax eax +
jmp loc_414531  +
push 9  +
call sub_410018  +
mov eax 0FFFFFFFFh +
jmp loc_414531  +
push esi  +
push edi  +
mov edi [ebp+lpBuffer] +
and ds:byte_4221A4[ebx] 0FEh +
cld   +
push ds  +
pop es  +
mov edx edi +
push ecx  +
push edx  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push ecx  +
push edx  +
push ds:hFile[ebx*4]  +
call ReadFile  +
pop edx  +
pop ecx  +
or eax eax +
jz loc_414629  +
mov eax [ebp+NumberOfBytesRead] +
add edx eax +
cmp eax ecx +
jz loc_41458E  +
or ds:byte_4221A4[ebx] 1 +
mov ecx eax +
or ecx ecx +
jz loc_4146D0  +
push edi  +
mov al 1Ah +
scas   +
jz loc_4145F8  +
pop edi  +
mov ecx edx +
sub ecx edi +
mov al 0Dh +
xor esi esi +
scas   +
jnz loc_4146D0  +
cmp edi edx +
jnb loc_41463D  +
cmp byte ptr [edi] 0Ah +
jnz loc_4145A6  +
mov esi edi +
mov [ebp+var_4] edi +
dec [ebp+var_4]  +
mov ecx edx +
sub ecx edi +
mov al 0Dh +
scas   +
jnz loc_41469A  +
cmp edi edx +
jnb loc_41463D  +
cmp byte ptr [edi] 0Ah +
jnz loc_4145C9  +
mov ecx edi +
dec ecx  +
sub ecx esi +
mov eax edi +
mov edi [ebp+var_4] +
push ecx  +
shr ecx 2 +
movs   +
pop ecx  +
and ecx 3 +
movs   +
mov [ebp+var_4] edi +
mov edi eax +
inc esi  +
jmp loc_4145C3  +
dec edi  +
test ds:byte_4221A4[ebx] 8 +
jnz loc_41461B  +
sub edx edi +
push 1  +
push 0  +
push edx  +
push ds:hFile[ebx*4]  +
call SetFilePointer  +
cmp ax 0FFFFh +
jz loc_414629  +
or ds:byte_4221A4[ebx] 1 +
mov edx edi +
jmp loc_41459D  +
push 9  +
call sub_410018  +
mov eax 0FFFFFFFFh +
jmp loc_4146D5  +
test ds:byte_4221A4[ebx] 1 +
jnz loc_41469A  +
dec edx  +
mov ecx 1 +
push ecx  +
push edx  +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push ecx  +
push edx  +
push ds:hFile[ebx*4]  +
call ReadFile  +
pop edx  +
pop ecx  +
or eax eax +
jz loc_414629  +
mov eax [ebp+NumberOfBytesRead] +
or eax eax +
jz loc_414693  +
cmp byte ptr [edi-1] 0Ah +
jz loc_41469A  +
mov byte ptr [edi-1] 0Dh +
push 1  +
push 0  +
push 0FFFFFFFFh  +
push ds:hFile[ebx*4]  +
call SetFilePointer  +
cmp ax 0FFFFh +
jz loc_414629  +
jmp loc_41469A  +
or ds:byte_4221A4[ebx] 1 +
cmp esi 0 +
jz loc_4146D0  +
mov ecx edi +
sub ecx esi +
mov edi [ebp+var_4] +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
test ds:byte_4221A4[ebx] 8 +
jnz loc_4146D0  +
mov ecx esi +
sub ecx edi +
jz loc_4146D0  +
test ds:byte_4221A4[ebx] 1 +
jz loc_41455A  +
mov eax edi +
sub eax [ebp+lpBuffer] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_0] +
cmp ebx 3Ch +
jnb loc_41474A  +
mov ecx [ebp+arg_8] +
or ecx ecx +
jz loc_414746  +
test ds:byte_4221A4[ebx] 14h +
jnz loc_414767  +
mov edx [ebp+lpBuffer] +
cmp ebx 3 +
jnb loc_414714  +
mov eax ds:dword_423DE0 +
or eax eax +
jnz loc_41473C  +
push ecx  +
push edx  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push ecx  +
push edx  +
push ds:hFile[ebx*4]  +
call WriteFile  +
pop edx  +
pop ecx  +
or eax eax +
jz loc_41474A  +
mov eax [ebp+NumberOfBytesWritten] +
or eax eax +
jz loc_414756  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
push ecx  +
push edx  +
push ebx  +
call eax  +
add esp 0Ch +
jmp loc_414733  +
xor eax eax +
jmp loc_414737  +
push 9  +
call sub_410018  +
jmp loc_414760  +
push 1Ch  +
call sub_410018  +
mov eax 0FFFFFFFFh +
jmp loc_414737  +
test ds:byte_4221A4[ebx] 4 +
jz loc_414799  +
push ecx  +
push edx  +
push 2  +
push 0  +
push 0  +
push ds:hFile[ebx*4]  +
call SetFilePointer  +
pop edx  +
pop ecx  +
cmp ax 0FFFFh +
jz loc_41474A  +
test ds:byte_4221A4[ebx] 10h +
jz loc_4146FF  +
cld   +
push ds  +
pop es  +
push edi  +
mov edi [ebp+lpBuffer] +
mov al 0Ah +
mov edx 0 +
scas   +
jnz loc_4147AE  +
inc edx  +
jmp loc_4147A7  +
pop edi  +
cmp edx 0 +
jnz loc_4147BC  +
mov ecx [ebp+arg_8] +
jmp loc_4146FF  +
mov [ebp+var_10] edx +
mov edx [ebp+arg_8] +
add edx [ebp+var_10] +
jb loc_41474A  +
add edx 4 +
jb loc_41474A  +
and edx 0FFFFFFFCh +
push edx  +
push edx  +
push 0  +
call GlobalAlloc  +
or eax eax +
jz loc_41474A  +
mov [ebp+hMem] eax +
pop edx  +
push esi  +
push edi  +
mov edi [ebp+hMem] +
dec edx  +
add edx edi +
mov [ebp+var_8] edx +
mov esi [ebp+lpBuffer] +
mov ecx [ebp+arg_8] +
mov [ebp+var_14] 0 +
mov edx edi +
mov edi esi +
mov al 0Ah +
scas   +
jnz loc_41483C  +
mov [ebp+var_4] ecx +
mov ecx edi +
sub ecx esi +
mov edi edx +
add edx ecx +
cmp edx [ebp+var_8] +
ja loc_414842  +
cmp [ebp+var_14] 1 +
jz loc_414849  +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
mov word ptr es:[edi-1] 0A0Dh +
inc edi  +
mov ecx [ebp+var_4] +
or ecx ecx +
jnz loc_4147FD  +
jmp loc_41485C  +
mov [ebp+var_14] 1 +
jmp loc_414807  +
mov ecx [ebp+var_8] +
sub ecx edi +
jbe loc_414857  +
mov eax ecx +
shr ecx 2 +
movs   +
mov ecx eax +
and ecx 3 +
movs   +
sub edx edi +
add [ebp+var_4] edx +
mov edx [ebp+hMem] +
mov ecx edi +
sub ecx [ebp+hMem] +
cmp ebx 3 +
jnb loc_414876  +
mov eax ds:dword_423DE0 +
or eax eax +
jnz loc_4148A8  +
push ecx  +
push edx  +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push ecx  +
push edx  +
push ds:hFile[ebx*4]  +
call WriteFile  +
pop edx  +
pop ecx  +
or eax eax +
jz loc_4148E5  +
mov eax [ebp+NumberOfBytesWritten] +
sub ecx eax +
jnz loc_4148B6  +
mov ecx [ebp+var_4] +
or ecx ecx +
jz loc_4148F6  +
mov edi [ebp+hMem] +
jmp loc_4147FD  +
push ecx  +
push edx  +
push ecx  +
push edx  +
push ebx  +
call eax  +
add esp 0Ch +
pop edx  +
pop ecx  +
jmp loc_414895  +
mov ebx edi +
mov edi [ebp+hMem] +
add edi eax +
inc edi  +
mov edx ecx +
dec ecx  +
jz loc_4148CD  +
mov al 0Ah +
scas   +
jnz loc_4148CD  +
dec dx  +
jmp loc_4148C5  +
mov edi ebx +
mov eax [ebp+arg_8] +
sub eax [ebp+var_4] +
sub eax edx +
jnz loc_4148F9  +
push 1Ch  +
call sub_410018  +
jmp loc_4148EF  +
push 9  +
call sub_410018  +
mov eax 0FFFFFFFFh +
jmp loc_4148F9  +
mov eax [ebp+arg_8] +
push eax  +
push [ebp+hMem]  +
call GlobalFree  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx offset unk_422B50 +
push esi  +
xor esi esi +
push ebx  +
call sub_40FE78  +
add esp 4 +
test dword ptr [ebx+0Ch] 83h +
jz loc_414932  +
push ebx  +
call sub_41063C  +
inc esi  +
add esp 4 +
push ebx  +
call sub_40FEF8  +
add ebx 20h +
add esp 4 +
cmp ebx offset off_4232D0 +
jb loc_414916  +
mov eax esi +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
fld  [esp+arg_C] +
cmp ds:dword_4289E8 0 +
cmp ds:dword_4289E8 0 +
cmp ds:dword_4289E8 0 +
jnz loc_414FA3  +
sub esp 0Ch +
fstp  [esp+0Ch+var_C] +
call sub_41073C  +
fld  [esp+0Ch+var_C] +
add esp 0Ch +
sub esp 2Ch +
fstp  [esp+2Ch+var_20] +
fstp  [esp+2Ch+var_2C] +
call sub_414950  +
add esp 2Ch +
retn   +
***
push eax  +
mov eax [esp+8] +
and eax 7F800000h +
cmp eax 7F800000h +
jz loc_414FFE  +
call sub_4151BE  +
cmp eax 0 +
jz loc_414FE4  +
fld  dword ptr [esp+8] +
call sub_414F54  +
pop eax  +
retn   +
***
sub esp 0Ch +
fstp  tbyte ptr [esp] +
fld  dword ptr [esp+14h] +
call sub_414F54  +
fld  tbyte ptr [esp] +
wait   +
fincstp   +
add esp 0Ch +
pop eax  +
retn   +
***
fdiv  dword ptr [esp+8] +
pop eax  +
retn   +
***
push eax  +
mov eax [esp+0Ch] +
and eax 7FF00000h +
cmp eax 7FF00000h +
jz loc_41504C  +
call sub_4151BE  +
cmp eax 0 +
jz loc_415032  +
fld  qword ptr [esp+8] +
call sub_414F54  +
pop eax  +
retn   +
***
sub esp 0Ch +
fstp  tbyte ptr [esp] +
fld  qword ptr [esp+14h] +
call sub_414F54  +
fld  tbyte ptr [esp] +
wait   +
fincstp   +
add esp 0Ch +
pop eax  +
retn   +
***
fdiv  qword ptr [esp+8] +
pop eax  +
retn   +
***
push eax  +
call sub_4151BE  +
cmp eax 0 +
jz loc_41506C  +
fild  word ptr [esp+8] +
call sub_414F54  +
pop eax  +
retn   +
***
sub esp 0Ch +
fstp  tbyte ptr [esp] +
fild  word ptr [esp+14h] +
call sub_414F54  +
fld  tbyte ptr [esp] +
wait   +
fincstp   +
add esp 0Ch +
pop eax  +
retn   +
***
push eax  +
call sub_4151BE  +
cmp eax 0 +
jz loc_4150A0  +
fild  dword ptr [esp+8] +
call sub_414F54  +
pop eax  +
retn   +
***
sub esp 0Ch +
fstp  tbyte ptr [esp] +
fild  dword ptr [esp+14h] +
call sub_414F54  +
fld  tbyte ptr [esp] +
wait   +
fincstp   +
add esp 0Ch +
pop eax  +
retn   +
***
push eax  +
mov eax [esp+8] +
and eax 7F800000h +
cmp eax 7F800000h +
jz loc_415102  +
call sub_4151BE  +
cmp eax 0 +
jz loc_4150E8  +
fld  dword ptr [esp+8] +
call sub_414F85  +
pop eax  +
retn   +
***
sub esp 0Ch +
fstp  tbyte ptr [esp] +
fld  dword ptr [esp+14h] +
call sub_414F85  +
fld  tbyte ptr [esp] +
wait   +
fincstp   +
add esp 0Ch +
pop eax  +
retn   +
***
fdivr  dword ptr [esp+8] +
pop eax  +
retn   +
***
push eax  +
mov eax [esp+0Ch] +
and eax 7FF00000h +
cmp eax 7FF00000h +
jz loc_415150  +
call sub_4151BE  +
cmp eax 0 +
jz loc_415136  +
fld  qword ptr [esp+8] +
call sub_414F85  +
pop eax  +
retn   +
***
sub esp 0Ch +
fstp  tbyte ptr [esp] +
fld  qword ptr [esp+14h] +
call sub_414F85  +
fld  tbyte ptr [esp] +
wait   +
fincstp   +
add esp 0Ch +
pop eax  +
retn   +
***
fdivr  qword ptr [esp+8] +
pop eax  +
retn   +
***
push eax  +
call sub_4151BE  +
cmp eax 0 +
jz loc_415170  +
fild  word ptr [esp+8] +
call sub_414F85  +
pop eax  +
retn   +
***
sub esp 0Ch +
fstp  tbyte ptr [esp] +
fild  word ptr [esp+14h] +
call sub_414F85  +
fld  tbyte ptr [esp] +
wait   +
fincstp   +
add esp 0Ch +
pop eax  +
retn   +
***
fild  dword ptr [esp+8] +
call sub_414F85  +
pop eax  +
retn   +
***
wait   +
fdecstp   +
fxam   +
fnstsw  ax +
and eax 4500h +
cmp eax 4100h +
jz loc_4151D8  +
xor eax eax +
retn   +
wait   +
fincstp   +
retn   +
***
sub esp 10h +
push ebx  +
mov ebx [esp+14h+arg_0] +
push esi  +
cmp ds:Locale 0 +
jz loc_415202  +
cmp ebx 100h +
jge loc_415233  +
mov eax 1 +
cmp ds:cchMultiByte eax +
jle loc_415220  +
push 2  +
push ebx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_415295  +
jmp loc_41522E  +
mov esi ds:off_421F98 +
test word ptr [esi+ebx*2] 2 +
jz loc_415295  +
add ebx 0FFFFFFE0h +
jmp loc_415295  +
mov eax ebx +
sar eax 8 +
mov ecx ds:off_421F98 +
mov [esp+18h+var_C] al +
and eax 0FFh +
xor esi esi +
test word ptr [ecx+eax*2] 8000h +
jz loc_41525C  +
mov ecx esi +
mov dl [esp+18h+var_C] +
inc esi  +
mov [esp+ecx+18h+SrcStr] dl +
mov edx esi +
inc esi  +
mov [esp+edx+18h+SrcStr] bl +
mov [esp+esi+18h+SrcStr] 0 +
push 4  +
lea ecx [esp+1Ch+DestStr] +
push ecx  +
push esi  +
lea edx [esp+24h+SrcStr] +
push edx  +
push 200h  +
push ds:Locale  +
call LCMapStringA  +
movzx ebx [esp+18h+DestStr] +
shl ebx 8 +
movzx ecx byte ptr [esp+15h] +
or ebx ecx +
pop esi  +
mov eax ebx +
pop ebx  +
add esp 10h +
retn   +
***
mov esi [esp+arg_0] +
push edi  +
cmp ds:dword_427C04 0 +
jz loc_41531B  +
xor ebx ebx +
cmp ds:dword_427C08 ebx +
jz loc_4152D9  +
push esi  +
mov ecx ds:dword_427C04 +
push dword ptr [ecx+ebx*4]  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jz loc_4152D9  +
inc ebx  +
cmp ebx ds:dword_427C08 +
jb loc_4152BA  +
cmp ebx ds:dword_427C08 +
jnb loc_41531B  +
mov esi [esp+4+arg_4] +
mov ecx ds:dword_427C0C +
push esi  +
push dword ptr [ecx+ebx*4]  +
call sub_40A05C  +
add esp 8 +
test eax eax +
jz loc_415387  +
mov edx ds:dword_427C0C +
push dword ptr [edx+ebx*4]  +
call sub_40972C  +
mov ecx ds:dword_427C0C +
mov [ecx+ebx*4] esi +
add esp 4 +
jmp loc_415387  +
inc ds:dword_427C08  +
mov eax ds:dword_427C08 +
shl eax 2 +
push eax  +
push ds:dword_427C0C  +
call sub_40B310  +
mov edx ds:dword_427C08 +
shl edx 2 +
push edx  +
mov ds:dword_427C0C eax +
push ds:dword_427C04  +
call sub_40B310  +
mov ds:dword_427C04 eax +
add esp 10h +
test eax eax +
jz loc_415387  +
cmp ds:dword_427C0C 0 +
jz loc_415387  +
mov edi ds:dword_427C08 +
mov ecx ds:dword_427C0C +
mov ebx [esp+4+arg_4] +
mov [ecx+edi*4-4] ebx +
mov eax ds:dword_427C08 +
mov edx ds:dword_427C04 +
mov [edx+eax*4-4] esi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor ebx ebx +
push esi  +
mov esi [esp+4+lpName] +
test esi esi +
push edi  +
jz loc_4153E8  +
push ebx  +
push ebx  +
push esi  +
call GetEnvironmentVariableA  +
mov edi eax +
test eax eax +
jz loc_4153E8  +
lea ecx [edi+1] +
push ecx  +
call sub_40F9A0  +
add esp 4 +
mov ebx eax +
test eax eax +
jz loc_4153E8  +
push edi  +
push ebx  +
push esi  +
call GetEnvironmentVariableA  +
test eax eax +
jnz loc_4153D5  +
push ebx  +
call sub_40972C  +
xor ebx ebx +
add esp 4 +
jmp loc_4153E8  +
push ebx  +
push esi  +
call sub_409778  +
add esp 4 +
push eax  +
call sub_4152A0  +
add esp 8 +
pop edi  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] 0 +
mov edx 2 +
inc ds:word_428608[edx*2]  +
jz loc_415419  +
push edx  +
call sub_40DE00  +
add esp 4 +
cmp ds:dword_424D1C 0 +
jz loc_4154A8  +
cmp [ebp+lpName] 0 +
jz loc_4154A8  +
mov eax ds:dword_424D1C +
mov [ebp+var_C] eax +
mov eax [ebp+var_C] +
cmp dword ptr [eax] 0 +
jz loc_41549A  +
push 3Dh  +
mov eax [ebp+var_C] +
push dword ptr [eax]  +
call sub_40A170  +
mov [ebp+var_8] eax +
add esp 8 +
cmp [ebp+var_8] 0 +
jz loc_415494  +
push [ebp+lpName]  +
call sub_40A110  +
add esp 4 +
mov edx [ebp+var_C] +
mov ecx [ebp+var_8] +
sub ecx [edx] +
cmp eax ecx +
jnz loc_415494  +
push [ebp+lpName]  +
call sub_40A110  +
add esp 4 +
push eax  +
mov eax [ebp+var_C] +
push [ebp+lpName]  +
push dword ptr [eax]  +
call sub_418970  +
add esp 0Ch +
test eax eax +
jnz loc_415494  +
mov eax [ebp+var_8] +
inc eax  +
mov [ebp+var_4] eax +
jmp loc_4154A8  +
add [ebp+var_C] 4 +
jmp loc_415434  +
push [ebp+lpName]  +
call sub_41538C  +
mov [ebp+var_4] eax +
add esp 4 +
mov edx 2 +
dec ds:word_428608[edx*2]  +
js loc_4154C1  +
push edx  +
call sub_40DE20  +
add esp 4 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add ecx 0FFFFFFB8h +
add ecx 0FFFFFFB8h +
add ecx 0FFFFFFA8h +
add ecx 0FFFFFFB8h +
add ecx 0FFFFFFB0h +
add ecx 0FFFFFFA8h +
add ecx 0FFFFFFB8h +
add ecx 0FFFFFFA0h +
mov edx large fs:0 +
mov eax offset unk_423F20 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_4155D0  +
call sub_4156F8  +
test [esp+4+arg_0] 1 +
jz loc_4155D0  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov edx large fs:0 +
mov eax offset unk_423F48 +
jmp sub_41245C  +
***
mov edx large fs:0 +
mov eax offset unk_423F70 +
jmp sub_41245C  +
***
mov dword ptr [ecx] offset off_4243F8 +
cmp dword ptr [ebx+2Ch] 0 +
jz loc_41570E  +
call sub_4158B0  +
jmp loc_415715  +
push 0FFFFFFFFh  +
call sub_4159CC  +
mov ecx ebx +
call sub_411314  +
pop ebx  +
retn   +
***
sub esp 10h +
push ebx  +
mov ebx ecx +
push esi  +
push edi  +
cmp dword ptr [ecx+28h] 0FFFFFFFFh +
jnz loc_4158C3  +
mov word ptr [ebx+30h] 0 +
cmp word ptr [ebx+30h] 0 +
jnz loc_4158D3  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
xor edx edx +
mov esi [ebx+14h] +
test esi esi +
mov [esp+14h+var_4] edx +
jz loc_4158E7  +
sub esi [ebx+10h] +
jz loc_415906  +
jmp loc_4158EB  +
test edx edx +
jz loc_415906  +
push 0FFFFFFFFh  +
mov edi [ebx] +
call dword ptr [edi+18h]  +
mov ecx 0FFFFFFFFh +
cmp eax ecx +
mov eax 1 +
jz loc_415902  +
xor eax eax +
mov [esp+18h+var_8] eax +
cmp dword ptr [ebx+2Ch] 0 +
jz loc_415919  +
push dword ptr [ebx+28h]  +
call sub_40C084  +
add esp 4 +
jmp loc_41591B  +
xor eax eax +
mov edx [esp+18h+var_8] +
or edx eax +
mov dword ptr [ebx+28h] 0FFFFFFFFh +
mov eax 0 +
mov word ptr [ebx+30h] 0 +
jnz loc_415937  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
sub esp 0Ch +
mov eax [esp+0Ch+arg_4] +
push ebx  +
mov ebx ecx +
push esi  +
mov esi [esp+14h+arg_0] +
cmp word ptr [ebx+30h] 0 +
jz loc_415966  +
cmp dword ptr [ebx+8] 0 +
jz loc_415966  +
pop esi  +
xor eax eax +
pop ebx  +
add esp 0Ch +
retn 8  +
test esi esi +
jz loc_415983  +
test eax eax +
jle loc_415983  +
cmp eax 8 +
mov edx 4 +
jg loc_41597D  +
mov edx 1 +
mov [esp+14h+var_4] edx +
jmp loc_41598B  +
xor eax eax +
xor esi esi +
mov [esp+14h+var_4] eax +
mov [esp+14h+arg_4] eax +
push 0  +
mov edx [esp+18h+arg_4] +
lea edx [esi+edx] +
push edx  +
push esi  +
call sub_41137C  +
mov ecx [esp+14h+var_4] +
lea edx [esi+ecx] +
push edx  +
mov ecx ebx +
push edx  +
mov [esp+1Ch+var_8] edx +
call sub_411438  +
mov edx [esp+14h+var_8] +
mov ecx ebx +
push edx  +
push edx  +
push esi  +
call sub_4113F4  +
mov eax ebx +
pop esi  +
pop ebx  +
add esp 0Ch +
retn 8  +
***
sub esp 14h +
push ebx  +
mov ebx ecx +
push esi  +
push edi  +
cmp word ptr [ecx+30h] 0 +
jz loc_415A49  +
mov al [ebx+2Ch] +
and al 3 +
cmp al 1 +
jz loc_415A49  +
cmp word ptr [ebx+6] 0 +
jnz loc_4159F1  +
cmp dword ptr [ebx+8] 0 +
jnz loc_415A24  +
cmp [esp+20h+arg_0] 0FFFFFFFFh +
jz loc_415ACB  +
mov dl byte ptr [esp+20h+arg_0] +
mov byte ptr [esp+20h+Buffer] dl +
push 1  +
lea esi [esp+24h+Buffer] +
push esi  +
push dword ptr [ebx+28h]  +
call sub_4146E0  +
add esp 0Ch +
mov ecx 1 +
cmp eax ecx +
jnz loc_415A49  +
jmp loc_415ACB  +
mov edx [ebx+14h] +
test edx edx +
jz loc_415A32  +
mov esi edx +
sub esi [ebx+10h] +
jmp loc_415A34  +
xor esi esi +
jz loc_415A57  +
push esi  +
push dword ptr [ebx+10h]  +
push dword ptr [ebx+28h]  +
call sub_4146E0  +
add esp 0Ch +
cmp eax esi +
jz loc_415A57  +
pop edi  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
add esp 14h +
retn 4  +
mov esi [ebx+8] +
mov ecx esi +
mov edx [ebx+0Ch] +
mov [esp+20h+var_C] esi +
add ecx edx +
mov edi [esp+20h+var_C] +
sub ecx edi +
sub edx edi +
cmp edx 8 +
push ecx  +
mov ecx 4 +
jg loc_415A7D  +
mov ecx 1 +
mov [esp+24h+var_4] ecx +
add ecx esi +
push ecx  +
mov ecx ebx +
call sub_411438  +
mov edx [esp+20h+var_4] +
lea ecx [esi+edx] +
push ecx  +
push ecx  +
mov ecx ebx +
push esi  +
call sub_4113F4  +
cmp [esp+20h+arg_0] 0FFFFFFFFh +
jz loc_415ACB  +
mov eax [ebx+14h] +
cmp eax [ebx+18h] +
jb loc_415ABA  +
movzx esi byte ptr [esp+20h+arg_0] +
push esi  +
mov edx [ebx] +
mov ecx ebx +
call dword ptr [edx+18h]  +
jmp loc_415AC8  +
mov edi [ebx+14h] +
inc edi  +
mov [ebx+14h] edi +
dec edi  +
mov al byte ptr [esp+20h+arg_0] +
mov [edi] al +
inc dword ptr [ebx+20h]  +
pop edi  +
mov eax 1 +
pop esi  +
pop ebx  +
add esp 14h +
retn 4  +
***
sub esp 20h +
push ebx  +
mov ebx ecx +
push esi  +
push edi  +
cmp word ptr [ecx+30h] 0 +
jz loc_415B8E  +
mov al [ebx+2Ch] +
and al 3 +
cmp al 2 +
jz loc_415B8E  +
mov edx [ebx+24h] +
mov esi [ebx+20h] +
cmp edx esi +
jbe loc_415B0C  +
sub edx esi +
jz loc_415B1D  +
jmp loc_415B10  +
cmp esp esp +
jz loc_415B1D  +
mov esi [ebx+20h] +
movzx eax byte ptr [esi] +
pop edi  +
pop esi  +
pop ebx  +
add esp 20h +
retn   +
cmp word ptr [ebx+6] 0 +
jnz loc_415BD3  +
cmp dword ptr [ebx+8] 0 +
jz loc_415BD3  +
mov edx [ebx+14h] +
test edx edx +
jz loc_415B40  +
mov esi edx +
sub esi [ebx+10h] +
jmp loc_415B42  +
xor esi esi +
jz loc_415B57  +
push esi  +
push dword ptr [ebx+10h]  +
push dword ptr [ebx+28h]  +
call sub_4146E0  +
add esp 0Ch +
cmp eax esi +
jnz loc_415B8E  +
mov ecx [ebx+0Ch] +
mov edx [ebx+8] +
sub ecx edx +
cmp ecx 8 +
mov eax 4 +
jg loc_415B6E  +
mov eax 1 +
sub ecx eax +
mov [esp+2Ch+var_8] eax +
push ecx  +
mov [esp+30h+var_4] edx +
add edx eax +
push edx  +
push dword ptr [ebx+28h]  +
call sub_4144F0  +
add esp 0Ch +
mov esi eax +
cmp eax 0FFFFFFFFh +
jnz loc_415B9A  +
pop edi  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
add esp 20h +
retn   +
mov ecx [esp+2Ch+var_4] +
mov edx [esp+2Ch+var_8] +
lea edx [ecx+edx] +
lea edi [edx+esi] +
push edi  +
push edx  +
push ecx  +
mov ecx ebx +
mov [esp+38h+var_10] edx +
call sub_4113F4  +
mov edx [esp+2Ch+var_10] +
mov ecx ebx +
push edx  +
push edx  +
call sub_411438  +
test esi esi +
jz loc_415C1D  +
mov ecx [ebx+20h] +
movzx edx byte ptr [ecx] +
mov [esp+2Ch+var_C] edx +
jmp loc_415C1D  +
push 1  +
lea edx [ebx+3Ch] +
push edx  +
push dword ptr [ebx+28h]  +
call sub_4144F0  +
add esp 0Ch +
mov esi eax +
cmp eax 0FFFFFFFFh +
jnz loc_415C02  +
mov [esp+2Ch+var_C] 0FFFFFFFFh +
push 0  +
mov ecx ebx +
push 0  +
push 0  +
call sub_4113F4  +
jmp loc_415C1D  +
movzx ecx byte ptr [ebx+3Ch] +
lea edx [ebx+3Dh] +
mov [esp+2Ch+var_C] ecx +
lea ecx [ebx+3Ch] +
push edx  +
lea edx [ebx+3Ch] +
push ecx  +
mov ecx ebx +
push edx  +
call sub_4113F4  +
mov ecx [esp+2Ch+var_C] +
test esi esi +
jnz loc_415C2A  +
mov ecx 0FFFFFFFFh +
pop edi  +
mov eax ecx +
pop esi  +
pop ebx  +
add esp 20h +
retn   +
***
sub esp 1Ch +
push ebx  +
mov ebx ecx +
mov edx [ebx+14h] +
push esi  +
mov esi [esp+24h+arg_0] +
test edx edx +
push edi  +
jz loc_415C4E  +
mov edi edx +
sub edi [ebx+10h] +
jmp loc_415C50  +
xor edi edi +
jz loc_415C73  +
push edi  +
push dword ptr [ebx+10h]  +
push dword ptr [ebx+28h]  +
call sub_4146E0  +
add esp 0Ch +
cmp eax edi +
jz loc_415CAA  +
pop edi  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
add esp 1Ch +
retn 0Ch  +
cmp [esp+28h+arg_4] 1 +
jnz loc_415CAA  +
mov edx [ebx+24h] +
mov eax [ebx+20h] +
cmp edx eax +
jbe loc_415C8A  +
mov edi edx +
sub edi eax +
jmp loc_415C8C  +
xor edi edi +
jz loc_415C90  +
sub esi edi +
test byte ptr [ebx+2Ch] 80h +
jnz loc_415CAA  +
mov edx [ebx+20h] +
cmp edx [ebx+24h] +
jnb loc_415CAA  +
cmp byte ptr [edx] 0Ah +
jnz loc_415CA4  +
dec esi  +
inc edx  +
cmp [ebx+24h] edx +
ja loc_415C9E  +
cmp [esp+28h+arg_4] 0 +
jz loc_415CC0  +
mov ecx 1 +
cmp [esp+28h+arg_4] 1 +
jz loc_415CC2  +
inc ecx  +
jmp loc_415CC2  +
xor ecx ecx +
push ecx  +
push esi  +
push dword ptr [ebx+28h]  +
call sub_40C110  +
mov [ebx+34h] eax +
add esp 0Ch +
cmp word ptr [ebx+6] 0 +
jnz loc_415D20  +
cmp dword ptr [ebx+8] 0 +
jz loc_415D20  +
mov esi [ebx+8] +
mov ecx [ebx+0Ch] +
mov edx esi +
mov [esp+28h+var_C] esi +
mov eax [esp+28h+var_C] +
sub ecx eax +
cmp ecx 8 +
mov edi 4 +
jg loc_415D00  +
mov edi 1 +
add edx edi +
mov ecx ebx +
push edx  +
lea edx [esi+edi] +
push edx  +
mov [esp+30h+var_8] edx +
call sub_411438  +
mov edx [esp+28h+var_8] +
mov ecx ebx +
push edx  +
push edx  +
push esi  +
call sub_4113F4  +
mov eax [ebx+34h] +
mov esi 0FFFFFFFFh +
cmp eax esi +
mov [esp+28h+var_4] eax +
mov eax esi +
jz loc_415D36  +
mov eax [esp+28h+var_4] +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn 0Ch  +
***
test eax eax +
push ecx  +
push ebx  +
mov ebx ecx +
push esi  +
push edi  +
jz loc_415D55  +
sub eax [ebx+10h] +
jz loc_415D6B  +
jmp loc_415D59  +
cmp esp esp +
jz loc_415D6B  +
push 0FFFFFFFFh  +
mov esi [ebx] +
call dword ptr [esi+18h]  +
mov edi 0FFFFFFFFh +
cmp eax edi +
jz loc_415DC5  +
jmp loc_415DD1  +
mov edx [ebx+24h] +
mov esi [ebx+20h] +
cmp edx esi +
mov [esp+14h+var_4] edx +
jbe loc_415D7F  +
sub edx esi +
jz loc_415DD1  +
jmp loc_415D83  +
cmp esp esp +
jz loc_415DD1  +
push 1  +
mov edi [esp+18h+var_4] +
cmp edi esi +
jbe loc_415D91  +
sub edi esi +
jmp loc_415D93  +
xor edi edi +
neg edi  +
push edi  +
push dword ptr [ebx+28h]  +
call sub_40C110  +
mov ecx ebx +
mov [ebx+34h] eax +
mov eax [ebx+20h] +
push eax  +
push eax  +
push dword ptr [ebx+1Ch]  +
call sub_4113F4  +
mov edx [ebx+20h] +
mov ecx ebx +
push edx  +
push edx  +
call sub_411438  +
add esp 0Ch +
cmp dword ptr [ebx+34h] 0FFFFFFFFh +
jnz loc_415DD1  +
pop edi  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
mov edx large fs:0 +
mov eax offset unk_423F98 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_415EA4  +
call sub_415EAC  +
test [esp+4+arg_0] 1 +
jz loc_415EA4  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+48h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
mov eax offset unk_423FD0 +
jmp sub_41245C  +
***
mov edx large fs:0 +
mov eax offset unk_424008 +
mov edx large fs:0 +
mov eax offset unk_424040 +
jmp sub_41245C  +
***
mov ebx ecx +
mov edx [eax+4] +
lea ecx [ebx+8] +
mov dword ptr [edx+ebx+4] offset off_424450 +
mov dword ptr [ebx] offset off_424458 +
call sub_4156F8  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx ecx +
test edx 8 +
jz loc_41610C  +
or edx 2 +
jmp loc_41611A  +
mov al dl +
and al 0Fh +
cmp al 2 +
jnz loc_41611A  +
or edx 10h +
cmp word ptr [ebx+38h] 0 +
jz loc_416134  +
push 2  +
mov edx [ebx+4] +
mov ecx [edx+4] +
lea ecx [ebx+ecx+4] +
call sub_40D30C  +
jmp loc_416174  +
mov [esp+4+arg_4] edx +
lea ecx [ebx+8] +
push [esp+4+arg_8]  +
push [esp+8+arg_4]  +
push [esp+0Ch+lpFileName]  +
call sub_415720  +
test eax eax +
jz loc_416163  +
push 0  +
mov eax [ebx+4] +
mov ecx [eax+4] +
lea ecx [ebx+ecx+4] +
call sub_40D30C  +
jmp loc_416174  +
push 4  +
mov edx [ebx+4] +
mov ecx [edx+4] +
lea ecx [ebx+ecx+4] +
call sub_40D30C  +
pop ebx  +
pop eax  +
retn 0Ch  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_416221  +
push edx  +
mov large fs:0 esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_18] ecx +
cmp [ebp+arg_0] 0 +
jz loc_4161C0  +
mov dword ptr [ecx+4] offset unk_42445C +
mov dword ptr [ecx+4Ch] offset unk_424464 +
lea ecx [ecx+58h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
call sub_415DDC  +
mov [ebp+var_4] 1 +
push 0  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_40D4AC  +
mov [ebp+var_4] 2 +
mov eax [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+48h] offset off_42449C +
mov ebx [edx+4] +
mov esi [ebx+4] +
mov ecx [ebp+var_18] +
mov eax [ebp+var_18] +
mov dword ptr [esi+ecx+4] offset off_4244A4 +
mov dword ptr [eax] offset off_4244AC +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov eax offset unk_424078 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_41624C  +
call sub_416254  +
test [esp+4+arg_0] 1 +
jz loc_41624C  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+58h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
mov edx large fs:0 +
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_416480  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push ecx  +
push ebx  +
push esi  +
cmp [ebp+arg_C] 0 +
jz loc_416416  +
mov dword ptr [ecx+4] offset unk_42445C +
mov dword ptr [ecx+4Ch] offset unk_424464 +
lea ecx [ecx+58h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_416020  +
mov [ebp+var_4] 1 +
push 0  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_40D4AC  +
mov [ebp+var_4] 2 +
mov eax [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+48h] offset off_42449C +
mov ebx [edx+4] +
mov esi [ebx+4] +
mov ecx [ebp+var_18] +
mov eax [ebp+var_18] +
mov dword ptr [esi+ecx+4] offset off_4244A4 +
mov dword ptr [eax] offset off_4244AC +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax offset unk_424150 +
jmp sub_41245C  +
***
mov dword ptr [ecx+48h] offset off_42449C +
mov eax [ebx+4] +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_4244A4 +
mov dword ptr [ebx] offset off_4244AC +
lea ecx [ebx+48h] +
call sub_40D5F8  +
mov ecx ebx +
call sub_4160D0  +
pop ebx  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_416561  +
push edx  +
mov large fs:0 esp +
sub esp 10h +
push ebx  +
push esi  +
mov [ebp+var_18] ecx +
cmp [ebp+arg_0] 0 +
jz loc_416500  +
mov dword ptr [ecx+4] offset unk_4244B0 +
mov dword ptr [ecx+4Ch] offset unk_4244B8 +
lea ecx [ecx+50h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
call sub_415DDC  +
mov [ebp+var_4] 1 +
push 0  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_411884  +
mov [ebp+var_4] 2 +
mov eax [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+48h] offset off_4244F0 +
mov ebx [edx+4] +
mov esi [ebx+4] +
mov ecx [ebp+var_18] +
mov eax [ebp+var_18] +
mov dword ptr [esi+ecx+4] offset off_4244F8 +
mov dword ptr [eax] offset off_424500 +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov eax offset unk_424198 +
jmp sub_41245C  +
***
push ebx  +
mov ebx ecx +
jz loc_41658C  +
call sub_416594  +
test [esp+4+arg_0] 1 +
jz loc_41658C  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+50h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
mov edx large fs:0 +
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_4167C0  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push ecx  +
push ebx  +
push esi  +
cmp [ebp+arg_C] 0 +
jz loc_416756  +
mov dword ptr [ecx+4] offset unk_4244B0 +
mov dword ptr [ecx+4Ch] offset unk_4244B8 +
lea ecx [ecx+50h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_416020  +
mov [ebp+var_4] 1 +
push 0  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_411884  +
mov [ebp+var_4] 2 +
mov eax [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+48h] offset off_4244F0 +
mov ebx [edx+4] +
mov esi [ebx+4] +
mov ecx [ebp+var_18] +
mov eax [ebp+var_18] +
mov dword ptr [esi+ecx+4] offset off_4244F8 +
mov dword ptr [eax] offset off_424500 +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax offset unk_424270 +
jmp sub_41245C  +
***
mov dword ptr [ecx+48h] offset off_4244F0 +
mov eax [ebx+4] +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_4244F8 +
mov dword ptr [ebx] offset off_424500 +
lea ecx [ebx+48h] +
call sub_4119BC  +
mov ecx ebx +
call sub_4160D0  +
pop ebx  +
retn   +
***
mov edx large fs:0 +
push ebx  +
mov ebx ecx +
jz loc_4168DC  +
call sub_4168E4  +
test [esp+4+arg_0] 1 +
jz loc_4168DC  +
push ebx  +
call sub_40971C  +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [esp+4+var_4] +
lea ecx [eax+60h] +
call sub_40D238  +
pop eax  +
retn   +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_4169B5  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push ecx  +
push ebx  +
push esi  +
cmp [ebp+arg_C] 0 +
jz loc_416941  +
mov dword ptr [ecx+4] offset unk_424504 +
mov dword ptr [ecx+4Ch] offset unk_42450C +
mov dword ptr [ecx+5Ch] offset unk_424514 +
lea ecx [ecx+60h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_415EC0  +
mov [ebp+var_4] 1 +
push 0  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_411C58  +
mov [ebp+var_4] 2 +
mov eax [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+58h] offset off_42454C +
mov ebx [ebp+var_18] +
mov eax [ebp+var_18] +
mov dword ptr [edx+48h] offset off_424554 +
mov esi [ebx+4] +
mov ecx [esi+4] +
mov dword ptr [ecx+eax+4] offset off_42455C +
mov edx [ebp+var_18] +
mov dword ptr [edx] offset off_424564 +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax offset unk_424300 +
jmp sub_41245C  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_416A77  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push ecx  +
push ebx  +
push esi  +
cmp [ebp+arg_4] 0 +
jz loc_416A09  +
mov dword ptr [ecx+4] offset unk_424504 +
mov dword ptr [ecx+4Ch] offset unk_42450C +
mov dword ptr [ecx+5Ch] offset unk_424514 +
lea ecx [ecx+60h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
push [ebp+arg_0]  +
call sub_415F78  +
mov [ebp+var_4] 1 +
push 0  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_411C58  +
mov [ebp+var_4] 2 +
mov eax [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+58h] offset off_42454C +
mov ebx [ebp+var_18] +
mov eax [ebp+var_18] +
mov dword ptr [edx+48h] offset off_424554 +
mov esi [ebx+4] +
mov ecx [esi+4] +
mov dword ptr [ecx+eax+4] offset off_42455C +
mov edx [ebp+var_18] +
mov dword ptr [edx] offset off_424564 +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
mov eax offset unk_424348 +
jmp sub_41245C  +
***
mov edx large fs:0 +
push 0FFFFFFFFh  +
push offset loc_416B41  +
push edx  +
mov large fs:0 esp +
sub esp 8 +
push ecx  +
push ebx  +
push esi  +
cmp [ebp+arg_C] 0 +
jz loc_416ACD  +
mov dword ptr [ecx+4] offset unk_424504 +
mov dword ptr [ecx+4Ch] offset unk_42450C +
mov dword ptr [ecx+5Ch] offset unk_424514 +
lea ecx [ecx+60h] +
call sub_40D1C4  +
mov [ebp+var_4] 0 +
push 0  +
mov ecx [ebp+var_18] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_416020  +
mov [ebp+var_4] 1 +
push 0  +
mov ecx [ebp+var_18] +
add ecx 48h +
call sub_411C58  +
mov [ebp+var_4] 2 +
mov eax [ebp+var_18] +
mov edx [ebp+var_18] +
mov dword ptr [eax+58h] offset off_42454C +
mov ebx [ebp+var_18] +
mov eax [ebp+var_18] +
mov dword ptr [edx+48h] offset off_424554 +
mov esi [ebx+4] +
mov ecx [esi+4] +
mov dword ptr [ecx+eax+4] offset off_42455C +
mov edx [ebp+var_18] +
mov dword ptr [edx] offset off_424564 +
mov ecx [ebp+var_C] +
mov eax [ebp+var_18] +
mov large fs:0 ecx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
mov eax offset unk_424390 +
jmp sub_41245C  +
***
mov dword ptr [ecx+58h] offset off_42454C +
mov eax [ebx+4] +
lea ecx [ebx+48h] +
mov dword ptr [ebx+48h] offset off_424554 +
mov edx [eax+4] +
mov dword ptr [edx+ebx+4] offset off_42455C +
mov dword ptr [ebx] offset off_424564 +
call sub_411D08  +
mov ecx ebx +
call sub_4160D0  +
pop ebx  +
retn   +
***
call sub_41202C  +
pop eax  +
retn   +
***
call sub_411E28  +
push offset sub_416B84  +
call sub_4096D4  +
add esp 4 +
pop eax  +
retn   +
***
sub esp 0Ch +
mov ecx ds:dword_424568 +
mov eax 1 +
push ebx  +
mov ebx 15h +
cmp [esp+10h+arg_0] 0 +
jnz loc_416BD6  +
mov ecx ds:dword_42456C +
mov ebx 2 +
test ecx ecx +
jnz loc_416BDE  +
xor eax eax +
jmp loc_416BFF  +
cmp ecx 1 +
jz loc_416BFF  +
mov [esp+10h+var_8] ecx +
mov [esp+10h+var_4] eax +
push 0  +
push ebx  +
call sub_416C20  +
push ebx  +
call [esp+1Ch+var_8]  +
add esp 0Ch +
mov eax [esp+10h+var_4] +
pop ebx  +
add esp 0Ch +
retn 4  +
***
mov edx [esp+arg_0] +
xor eax eax +
cmp ds:dword_424570[eax*4] edx +
jz locret_416C1D  +
inc eax  +
cmp eax 8 +
jb loc_416C0E  +
retn   +
***
sub esp 0Ch +
push ebx  +
mov ebx [esp+10h+arg_4] +
push esi  +
mov esi [esp+14h+arg_0] +
push esi  +
call sub_416C08  +
add esp 4 +
cmp eax 8 +
mov [esp+14h+var_4] eax +
jb loc_416C51  +
push 16h  +
call sub_410018  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
mov ecx ds:dword_424590[eax*4] +
cmp esi 2 +
mov [esp+14h+var_8] ecx +
jz loc_416C66  +
cmp esi 15h +
jnz loc_416CD0  +
cmp ds:dword_4245B0 0 +
jz loc_416C7C  +
push 0  +
push offset HandlerRoutine  +
call SetConsoleCtrlHandler  +
mov ds:dword_4245B0 0 +
test ebx ebx +
jz loc_416CB5  +
push 1  +
push offset HandlerRoutine  +
call SetConsoleCtrlHandler  +
test eax eax +
jnz loc_416CAB  +
call sub_40FF78  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
mov ds:dword_4245B0 1 +
cmp esi 15h +
jnz loc_416CC6  +
mov ecx ebx +
test ebx ebx +
mov ds:dword_424568 ecx +
jmp loc_416CD0  +
mov edx ebx +
test ebx ebx +
mov ds:dword_42456C edx +
cmp esi 8 +
jnz loc_416CDB  +
mov ds:dword_423990 ebx +
cmp esi 0Bh +
jnz loc_416CE6  +
mov ds:dword_423998 ebx +
cmp esi 4 +
jnz loc_416CF1  +
mov ds:dword_423994 ebx +
mov eax [esp+14h+var_4] +
mov ds:dword_424590[eax*4] ebx +
mov eax [esp+14h+var_8] +
pop esi  +
pop ebx  +
add esp 0Ch +
retn   +
***
push ebx  +
mov ebx [esp+0Ch+arg_0] +
push esi  +
push ebx  +
call sub_416C08  +
add esp 4 +
cmp eax 8 +
mov [esp+10h+var_4] eax +
jb loc_416D2D  +
pop esi  +
mov eax 1 +
pop ebx  +
add esp 8 +
retn   +
mov eax [esp+10h+var_4] +
mov esi ds:dword_424590[eax*4] +
test esi esi +
mov ds:dword_424590[eax*4] 0 +
jnz loc_416D8D  +
mov eax ebx +
cmp ebx 8 +
jz loc_416DD2  +
cmp eax 16h +
jz loc_416D72  +
cmp eax 4 +
jz loc_416D86  +
cmp eax 2 +
jz loc_416D86  +
cmp eax 0Bh +
jz loc_416D86  +
cmp eax 0Fh +
jz loc_416D86  +
cmp eax 15h +
jz loc_416D86  +
jmp loc_416D86  +
push offset aAbnormalProgra  +
call sub_40FC90  +
push 1  +
call loc_40DCA4  +
add esp 4 +
push 1  +
call loc_40DCA4  +
cmp esi 1 +
jz loc_416DD2  +
cmp ebx 8 +
jnz loc_416DAE  +
push 8Ch  +
mov ds:dword_423990 0 +
push ebx  +
call esi  +
add esp 8 +
jmp loc_416DD2  +
cmp ebx 0Bh +
jnz loc_416DBD  +
mov ds:dword_423998 0 +
cmp ebx 4 +
jnz loc_416DCC  +
mov ds:dword_423994 0 +
push ebx  +
call esi  +
add esp 4 +
pop esi  +
xor eax eax +
pop ebx  +
add esp 8 +
retn   +
***
push 2  +
call sub_416D08  +
sub esp 18h +
push ebx  +
mov ebx [esp+1Ch+arg_0] +
push ebp  +
push esi  +
push edi  +
mov edi [esp+28h+arg_4] +
cmp ebx edi +
jz loc_416F38  +
test ebx ebx +
jz loc_416F2E  +
push edi  +
push ebx  +
call sub_416F48  +
add esp 8 +
test eax eax +
jnz loc_416F38  +
mov ecx offset unk_4245D4 +
cmp edi ecx +
jz loc_416F38  +
push edi  +
push ecx  +
call sub_416F48  +
add esp 8 +
test eax eax +
jnz loc_416F38  +
mov dl [ebx] +
mov cl [edi] +
cmp dl cl +
jnz loc_416F2E  +
movsx ecx cl +
test ecx ecx +
jz loc_416F2E  +
cmp ecx 1 +
jz loc_416E7A  +
cmp ecx 2 +
jz loc_416ECA  +
jmp loc_416F29  +
mov cl [ebx+1] +
mov [esp+28h+var_10] ecx +
and cl 3Fh +
mov dl [edi+1] +
mov [esp+28h+var_C] edx +
and dl 3Fh +
cmp cl dl +
jnz loc_416F2E  +
mov ecx [esp+28h+var_10] +
movsx ecx cl +
mov edx [esp+28h+var_C] +
movsx edx dl +
not edx  +
and ecx edx +
test ecx 0FFFFFFC0h +
jnz loc_416F2E  +
push [esp+28h+arg_8]  +
push dword ptr [edi+2]  +
push dword ptr [ebx+2]  +
call sub_416E04  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 18h +
retn   +
movsx edx word ptr [ebx+1] +
add ebx 3 +
xor ebp ebp +
mov [esp+28h+var_8] edx +
cmp edx ebp +
jle loc_416F2E  +
mov ecx [ebx] +
mov edx 4 +
add ebx edx +
mov [esp+28h+var_4] ecx +
mov esi [ebx] +
add ebx edx +
cmp esi edi +
jz loc_416F10  +
push edi  +
push esi  +
call sub_416F48  +
add esp 8 +
test eax eax +
jnz loc_416F10  +
push [esp+28h+arg_8]  +
push edi  +
push esi  +
call sub_416E04  +
add esp 0Ch +
test eax eax +
jz loc_416F20  +
mov ebx [esp+28h+arg_8] +
test ebx ebx +
jz loc_416F38  +
mov eax [esp+28h+var_4] +
add [ebx] eax +
jmp loc_416F38  +
inc ebp  +
cmp ebp [esp+28h+var_8] +
jl loc_416EDB  +
jmp loc_416F2E  +
call sub_416DF8  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
pop ebx  +
add esp 18h +
retn   +
pop edi  +
mov eax 1 +
pop esi  +
pop ebp  +
pop ebx  +
add esp 18h +
retn   +
***
push esi  +
push [esp+arg_0]  +
call sub_416F94  +
mov ebx eax +
push [esp+4+arg_4]  +
call sub_416F94  +
add esp 8 +
mov esi eax +
test ebx ebx +
jz loc_416F7E  +
test esi esi +
jz loc_416F7E  +
push esi  +
push ebx  +
call sub_40A05C  +
add esp 8 +
test eax eax +
jnz loc_416F7E  +
xor ecx ecx +
jmp loc_416F83  +
mov ecx 1 +
cmp cl 1 +
sbb eax eax +
and eax 1 +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
mov edx [esp+arg_0] +
mov edx large fs:0 +
push 0FFFFFFFFh  +
xor ecx ecx +
push offset loc_417117  +
push edx  +
mov large fs:0 esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_C] +
mov [ebp+var_20] ecx +
mov [ebp+var_1C] ecx +
cmp [ebp+arg_4] ecx +
jz loc_417104  +
mov edx [ebp+arg_0] +
mov ebx [edx+4] +
cmp edi offset unk_4245D4 +
jnz loc_417033  +
lea ecx [ebp+var_20] +
push ecx  +
push esi  +
push ebx  +
call sub_416E04  +
add esp 0Ch +
test eax eax +
jnz loc_41709F  +
jmp loc_4170B6  +
test [ebp+arg_10] 2 +
jnz loc_41706E  +
lea edx [ebp+var_20] +
push edx  +
push esi  +
push edi  +
call sub_416E04  +
add esp 0Ch +
test eax eax +
jz loc_41706E  +
push 0  +
push esi  +
push ebx  +
call sub_416E04  +
add esp 0Ch +
test eax eax +
jz loc_41706E  +
push 0  +
push edi  +
push ebx  +
call sub_416E04  +
add esp 0Ch +
test eax eax +
jnz loc_41709F  +
lea ecx [ebp+var_20] +
push ecx  +
push esi  +
mov [ebp+var_20] 0 +
push ebx  +
call sub_416E04  +
add esp 0Ch +
test eax eax +
jz loc_4170B6  +
lea edx [ebp+var_1C] +
push edx  +
push edi  +
push ebx  +
call sub_416E04  +
add esp 0Ch +
test eax eax +
jz loc_4170B6  +
mov eax [ebp+var_1C] +
sub [ebp+var_20] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_C] +
sub eax [ebp+var_20] +
mov large fs:0 ecx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
test [ebp+arg_10] 1 +
jz loc_417104  +
lea ecx [ebp+var_18] +
call sub_417124  +
mov [ebp+var_4] 0 +
lea ebx [ebp+var_18] +
push ebx  +
push 4  +
call ds:off_4245DC  +
add esp 4 +
mov ecx eax +
call sub_417170  +
push eax  +
push 0  +
push offset sub_41172C  +
push offset unk_423518  +
call sub_412294  +
mov [ebp+var_4] 0FFFFFFFFh +
mov ecx ebx +
call sub_41172C  +
mov ecx [ebp+var_C] +
xor eax eax +
mov large fs:0 ecx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov eax offset unk_4245E4 +
jmp sub_41245C  +
***
mov edx large fs:0 +
mov eax offset unk_42460C +
jmp sub_41245C  +
***
mov edx large fs:0 +
mov eax offset unk_424638 +
jmp sub_41245C  +
***
mov edx large fs:0 +
mov eax offset unk_424664 +
push [esp+4+arg_4]  +
push esi  +
call sub_409778  +
push [esp+4+arg_0]  +
call sub_409778  +
add esp 4 +
push eax  +
call sub_417213  +
pop ecx  +
retn 8  +
***
push [esp+4+arg_0]  +
call sub_409778  +
add esp 4 +
push eax  +
call sub_417284  +
pop ecx  +
retn 8  +
***
mov ebx [esp+8+arg_4] +
push esi  +
mov al [esp+0Ch+arg_8] +
lea ecx [esp+0Ch+var_4] +
mov byte ptr [esp+0Ch+var_4] al +
mov byte ptr [esp+0Ch+var_4+1] 0 +
push ecx  +
push ebx  +
call sub_417284  +
mov dl [esp+0Ch+arg_0] +
mov ebx eax +
mov byte ptr [esp+0Ch+var_4] dl +
push ebx  +
lea esi [esp+10h+var_4] +
push esi  +
call sub_41729F  +
pop esi  +
pop ebx  +
pop ecx  +
retn 0Ch  +
***
mov [esp+0] al +
mov [esp+3+var_2] 0 +
push [esp+3+arg_4]  +
lea ecx [esp+4] +
push ecx  +
call sub_41729F  +
pop ecx  +
retn 8  +
***
mov ebx [esp+arg_0] +
test ebx ebx +
jz loc_417351  +
push ebx  +
call sub_409778  +
mov ebx eax +
add esp 4 +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
cmp byte ptr [ebx] 3Fh +
jnz loc_4173BA  +
mov [esp+0Ch] ebx +
lea esi [esp+0Ch] +
push esi  +
call sub_4173E0  +
test eax eax +
mov [esp+0Ch] eax +
jz loc_4173BA  +
push ebx  +
call sub_40972C  +
mov ebx [esp+10h] +
add esp 4 +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
lea ebx [esp+0Ch] +
push ebx  +
call sub_4173E0  +
pop esi  +
pop ebx  +
retn   +
***
push eax  +
push ebx  +
mov ebx 0FFFFFFFFh +
push ebp  +
xor ebp ebp +
push esi  +
mov esi [ecx] +
push edi  +
call sub_418082  +
mov edx 3Fh +
mov [esp+18h+var_8] esi +
cmp [esi] dl +
jz loc_417416  +
lea eax [esp+18h+var_8] +
push eax  +
call sub_4180EC  +
mov edi eax +
jmp loc_4175AD  +
inc [esp+18h+var_8]  +
mov eax [esp+18h+var_8] +
cmp [eax] dl +
jnz loc_417516  +
inc [esp+18h+var_8]  +
mov ebx [esp+18h+var_8] +
mov cl [ebx] +
inc [esp+18h+var_8]  +
movsx esi cl +
cmp esi 30h +
jz loc_417448  +
cmp esi 31h +
jz loc_417448  +
cmp esi 5Fh +
jz loc_417455  +
jmp loc_417466  +
movsx ebx cl +
add ebx 0FFFFFFD0h +
xor edi edi +
jmp loc_41752A  +
mov edx [esp+18h+var_8] +
mov cl [edx] +
mov ebx 24h +
inc [esp+18h+var_8]  +
jmp loc_417468  +
xor ebx ebx +
mov byte ptr [esp+18h+var_4] cl +
mov eax 1 +
cmp ds:cchMultiByte eax +
jle loc_41748F  +
push 4  +
movsx ecx byte ptr [esp+1Ch+var_4] +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_4174B0  +
jmp loc_4174A2  +
movsx edi byte ptr [esp+18h+var_4] +
mov esi ds:off_421F98 +
test word ptr [esi+edi*2] 4 +
jz loc_4174B0  +
mov cl byte ptr [esp+18h+var_4] +
movsx esi cl +
add esi 0FFFFFFD0h +
add ebx esi +
jmp loc_4174F6  +
cmp ds:cchMultiByte 1 +
jle loc_4174D3  +
push 1  +
movsx edx byte ptr [esp+1Ch+var_4] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_4175AF  +
jmp loc_4174EA  +
movsx eax byte ptr [esp+18h+var_4] +
mov ecx ds:off_421F98 +
test word ptr [ecx+eax*2] 1 +
jz loc_4175AF  +
mov cl byte ptr [esp+18h+var_4] +
movsx edi cl +
add edi 0FFFFFFC9h +
add ebx edi +
mov edx ds:off_4247BC[ebx*4] +
test edx edx +
jz loc_4175AF  +
push edx  +
call sub_41733C  +
mov edi eax +
test eax eax +
jnz loc_41752A  +
jmp loc_4175AF  +
lea ecx [esp+18h+var_8] +
push ecx  +
call sub_4180EC  +
mov edi eax +
test eax eax +
jz loc_4175AF  +
mov ecx [esp+18h+var_8] +
cmp byte ptr [ecx] 40h +
jz loc_41758A  +
lea edx [esp+18h+var_8] +
push edx  +
call sub_4180EC  +
mov esi eax +
test eax eax +
jz loc_4175AF  +
test ebx ebx +
jnz loc_417556  +
push esi  +
call sub_41733C  +
mov edi eax +
mov ebx 0FFFFFFFFh +
jmp loc_41756D  +
cmp ebx 1 +
jnz loc_41756D  +
push offset asc_4248E6  +
push esi  +
call sub_4172BC  +
mov edi eax +
mov ebx 0FFFFFFFFh +
push esi  +
push offset asc_4248E8  +
push edi  +
call sub_417284  +
push eax  +
call sub_417213  +
mov ecx [esp+18h+var_8] +
mov edi eax +
cmp byte ptr [ecx] 40h +
jnz loc_417533  +
inc [esp+18h+var_8]  +
lea edx [esp+18h+var_8] +
push edx  +
push edi  +
call sub_417B9D  +
mov edi eax +
cmp ebx 0Bh +
jnz loc_4175AD  +
push offset aOperator  +
push edi  +
call sub_417284  +
mov edi eax +
mov ebp edi +
call sub_41808F  +
mov esi [esp+18h+arg_0] +
mov ebx [esp+18h+var_8] +
mov [esi] ebx +
mov eax ebp +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 8 +
retn 4  +
***
mov ecx [eax] +
push ebx  +
push esi  +
push edi  +
mov [esp+10h+var_4] ecx +
mov dl [ecx] +
cmp dl 58h +
jnz loc_4175F9  +
push offset unk_4248EB  +
call sub_409778  +
mov ebx eax +
inc [esp+14h+var_4]  +
add esp 4 +
jmp loc_41767F  +
cmp dl 5Ah +
jnz loc_417613  +
push offset a____1  +
call sub_409778  +
mov ebx eax +
inc [esp+14h+var_4]  +
add esp 4 +
jmp loc_41767F  +
xor ebx ebx +
jmp loc_417664  +
push ebx  +
push offset a____0  +
call sub_41729F  +
mov ebx eax +
jmp loc_41767B  +
push ebx  +
call sub_40972C  +
xor ebx ebx +
add esp 4 +
jmp loc_41767B  +
test ebx ebx +
jz loc_417644  +
push ebx  +
push offset asc_4248F5  +
call sub_41729F  +
jmp loc_417651  +
push offset unk_4248EB  +
call sub_409778  +
add esp 4 +
push eax  +
lea eax [esp+14h+var_4] +
push eax  +
call sub_41769C  +
push eax  +
call sub_417213  +
mov ebx eax +
mov edi [esp+10h+var_4] +
movsx esi byte ptr [edi] +
cmp esi 5Ah +
jz loc_417617  +
test esi esi +
jz loc_417626  +
cmp esi 40h +
jz loc_41767B  +
jmp loc_417633  +
inc [esp+10h+var_4]  +
mov edx [esp+10h+arg_0] +
mov ecx [esp+10h+var_4] +
push 28h  +
push ebx  +
mov [edx] ecx +
push 29h  +
call sub_4172DC  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn 4  +
***
push ebx  +
mov edx [ecx] +
sub esp 0Ch +
mov edx [edx] +
push eax  +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [esp+10h+arg_0] +
push edi  +
xor edi edi +
mov [esp+14h+var_4] edx +
mov cl [edx] +
inc [esp+14h+var_4]  +
jmp loc_417BC6  +
mov edx [esp+14h+var_4] +
mov cl [edx] +
inc [esp+14h+var_4]  +
movsx eax cl +
cmp eax 5Fh +
jz loc_417BBC  +
cmp eax 24h +
jz loc_417BBC  +
cmp eax 124h +
jz loc_417BBC  +
cmp eax 41h +
jz loc_417C5E  +
cmp eax 42h +
jz loc_417C5E  +
cmp eax 45h +
jz loc_417C5E  +
cmp eax 46h +
jz loc_417C5E  +
cmp eax 49h +
jz loc_417C5E  +
cmp eax 4Ah +
jz loc_417C5E  +
cmp eax 4Dh +
jz loc_417C5E  +
cmp eax 4Eh +
jz loc_417C5E  +
cmp eax 51h +
jz loc_417C5E  +
cmp eax 52h +
jz loc_417C5E  +
cmp eax 55h +
jz loc_417C5E  +
cmp eax 56h +
jz loc_417C5E  +
cmp eax 43h +
jz loc_417C79  +
cmp eax 44h +
jz loc_417C79  +
cmp eax 4Bh +
jz loc_417C79  +
cmp eax 4Ch +
jz loc_417C79  +
cmp eax 53h +
jz loc_417C79  +
cmp eax 54h +
jz loc_417C79  +
cmp eax 59h +
jz loc_417C79  +
cmp eax 5Ah +
jz loc_417C6C  +
cmp eax 30h +
jz loc_417C89  +
cmp eax 31h +
jz loc_417C89  +
cmp eax 32h +
jz loc_417C89  +
cmp eax 33h +
jz loc_417C89  +
cmp eax 36h +
jz loc_417CAB  +
cmp eax 37h +
jz loc_417CAB  +
jmp loc_417CD1  +
lea ecx [esp+14h+var_4] +
push ecx  +
call sub_4179F0  +
mov edi eax +
jmp loc_417C79  +
push offset aFar_0  +
push esi  +
call sub_417284  +
mov esi eax +
lea edx [esp+14h+var_4] +
push edx  +
push esi  +
push edi  +
call sub_417CEC  +
mov ebx eax +
jmp loc_417CD1  +
lea ecx [esp+14h+var_4] +
push ecx  +
push esi  +
call sub_41776F  +
lea edx [esp+14h+var_4] +
mov ebx eax +
push edx  +
call sub_4179F0  +
push eax  +
push ebx  +
call sub_417213  +
mov ebx eax +
jmp loc_417CD1  +
lea ecx [esp+14h+var_4] +
push ecx  +
call sub_4179F0  +
push eax  +
push esi  +
call sub_417213  +
lea edx [esp+14h+var_4] +
mov ebx eax +
push edx  +
call sub_41824C  +
push eax  +
call sub_40972C  +
add esp 4 +
mov esi [esp+14h+arg_4] +
mov eax [esp+14h+var_4] +
mov [esi] eax +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
add esp 8 +
retn 8  +
***
sub esp 0Ch +
mov eax [esp+0Ch+arg_8] +
mov ecx [eax] +
push ebx  +
push esi  +
push edi  +
lea edx [esp+18h+var_8] +
mov [esp+18h+var_8] ecx +
push edx  +
call sub_417DAC  +
push eax  +
push [esp+1Ch+arg_4]  +
call sub_417213  +
mov esi [esp+18h+var_8] +
mov ebx eax +
mov [esp+18h+var_4] esi +
cmp byte ptr [esi] 40h +
jnz loc_417D25  +
inc [esp+18h+var_8]  +
jmp loc_417D46  +
lea edi [esp+18h+var_8] +
push edi  +
push offset unk_4248EB  +
call sub_409778  +
add esp 4 +
push eax  +
call sub_41776F  +
push eax  +
call sub_40972C  +
add esp 4 +
push ebx  +
lea eax [esp+1Ch+var_8] +
push eax  +
call sub_4175CC  +
push eax  +
call sub_417213  +
mov ebx eax +
cmp [esp+18h+arg_0] 0 +
jz loc_417D6C  +
push ebx  +
push [esp+1Ch+arg_0]  +
call sub_417213  +
mov ebx eax +
lea ecx [esp+18h+var_8] +
push ecx  +
call sub_4175CC  +
push eax  +
call sub_40972C  +
add esp 4 +
mov edx [esp+18h+var_4] +
cmp byte ptr [edx] 40h +
jz loc_417D95  +
lea esi [esp+18h+var_4] +
push esi  +
push ebx  +
call sub_41776F  +
mov ebx eax +
mov eax [esp+18h+arg_8] +
mov edi [esp+18h+var_8] +
mov [eax] edi +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
add esp 0Ch +
retn 0Ch  +
***
push ebx  +
sub esp 24h +
mov eax [esp+24h+arg_0] +
mov edx [eax] +
push ebx  +
push esi  +
push edi  +
mov [esp+30h+var_24] edx +
mov [esp+30h+var_1F] 0 +
mov cl [edx] +
cmp cl 3Fh +
jnz loc_417E2E  +
inc [esp+30h+var_24]  +
mov ebx [esp+30h+var_24] +
mov [esp+30h+var_1F] 1 +
mov cl [ebx] +
cmp cl 24h +
jnz loc_417E66  +
inc [esp+30h+var_24]  +
call sub_418082  +
lea ecx [esp+30h+var_24] +
push ecx  +
call sub_4180EC  +
mov edi [esp+30h+var_24] +
mov esi eax +
mov al [edi] +
cmp al 61h +
jl loc_417E93  +
cmp al 7Ah +
jg loc_417E93  +
lea edx [esp+30h+var_24] +
push edx  +
call sub_4180EC  +
mov ebx eax +
test eax eax +
jnz loc_417E6F  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
add esp 24h +
retn   +
push ebx  +
push offset asc_424B56  +
push esi  +
call sub_417284  +
push eax  +
call sub_417213  +
mov ecx [esp+30h+var_24] +
mov dl [ecx] +
mov esi eax +
cmp dl 61h +
jl loc_417E93  +
cmp dl 7Ah +
jle loc_417E56  +
push esi  +
push 3Ch  +
call sub_41731C  +
mov esi eax +
mov [esp+30h+var_20] 1 +
cmp [esp+30h+var_1F] 0 +
jz loc_417EE7  +
mov eax [esp+30h+var_24] +
movsx ebx byte ptr [eax] +
cmp ebx 24h +
jz loc_417EC8  +
cmp ebx 40h +
jz loc_417FB9  +
test ebx ebx +
jz loc_417FB9  +
jmp loc_417ECE  +
inc [esp+30h+var_24]  +
jmp loc_417EE7  +
lea ecx [esp+30h+var_24] +
push ecx  +
call sub_41769C  +
mov ebx eax +
test eax eax +
jnz loc_417F95  +
jmp loc_417FB9  +
mov ecx [esp+30h+var_24] +
inc ecx  +
mov [esp+30h+var_24] ecx +
dec ecx  +
movsx eax byte ptr [ecx] +
cmp eax 54h +
jz loc_417F1C  +
cmp eax 49h +
jz loc_417F2A  +
cmp eax 30h +
jz loc_417F2A  +
cmp eax 53h +
jz loc_417F50  +
cmp eax 52h +
jz loc_417F68  +
cmp eax 31h +
jz loc_417F76  +
cmp eax 40h +
jz loc_417F8F  +
jmp loc_417FB9  +
lea edx [esp+30h+var_24] +
push edx  +
call sub_41769C  +
mov ebx eax +
jmp loc_417F95  +
lea ecx [esp+30h+var_1C] +
push ecx  +
lea edx [esp+34h+var_24] +
push edx  +
call sub_4182CC  +
push eax  +
call sub_4171FC  +
lea ecx [esp+30h+var_1C] +
push ecx  +
call sub_409778  +
mov ebx eax +
add esp 4 +
jmp loc_417F95  +
push 22h  +
lea edx [esp+34h+var_24] +
push edx  +
call sub_41834E  +
push eax  +
push 22h  +
call sub_4172DC  +
mov ebx eax +
jmp loc_417F95  +
lea ecx [esp+30h+var_24] +
push ecx  +
call sub_4180EC  +
mov ebx eax +
jmp loc_417F95  +
push (offset asc_424A58+4)  +
lea edx [esp+34h+var_24] +
push edx  +
call sub_4173E0  +
push eax  +
call sub_417284  +
mov ebx eax +
jmp loc_417F95  +
dec [esp+30h+var_24]  +
jmp loc_417FB9  +
cmp [esp+30h+var_20] 0 +
jnz loc_417FA6  +
push esi  +
push 2Ch  +
call sub_41731C  +
mov esi eax +
push esi  +
push ebx  +
call sub_417213  +
mov esi eax +
mov [esp+30h+var_20] 0 +
jmp loc_417EA2  +
push esi  +
push 3Eh  +
call sub_41731C  +
mov esi eax +
mov ebx [esp+30h+arg_0] +
mov eax [esp+30h+var_24] +
mov [ebx] eax +
call sub_41808F  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
add esp 24h +
retn   +
***
sub esp 10h +
xor eax eax +
jz loc_4180BC  +
dec ds:dword_427C3C  +
mov eax ds:dword_427C3C +
push ds:dword_427C14[eax*4]  +
call sub_40972C  +
add esp 4 +
cmp ds:dword_427C3C 0 +
jnz loc_418099  +
cmp ds:dword_427C68 0 +
jz loc_4180E9  +
dec ds:dword_427C68  +
mov ecx ds:dword_427C68 +
push ds:dword_427C40[ecx*4]  +
call sub_40972C  +
add esp 4 +
cmp ds:dword_427C68 0 +
jnz loc_4180C5  +
pop eax  +
retn   +
***
sub esp 60h +
push ebx  +
push ebp  +
mov ebp [esp+68h+arg_0] +
mov eax [ebp+0] +
push esi  +
test eax eax +
push edi  +
mov [esp+70h+var_5C] eax +
jz loc_4181BB  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_418127  +
push 4  +
movsx edx byte ptr [eax] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41815D  +
jmp loc_418138  +
movsx ebx byte ptr [eax] +
mov esi ds:off_421F98 +
test word ptr [esi+ebx*2] 4 +
jz loc_41815D  +
mov ebx [esp+70h+var_5C] +
movsx esi byte ptr [ebx] +
add esi 0FFFFFFD0h +
cmp esi ds:dword_427C3C +
jge loc_4181BB  +
push ds:dword_427C14[esi*4]  +
call sub_41733C  +
mov ebx eax +
jmp loc_418233  +
mov eax [esp+70h+var_5C] +
mov cl [eax] +
mov edx 24h +
cmp cl dl +
jz loc_418176  +
cmp cl 3Fh +
jnz loc_4181A9  +
cmp [eax+1] dl +
jnz loc_4181A9  +
mov esi offset dword_427C14 +
lea edi [esp+70h+var_58] +
mov ecx 16h +
movs   +
lea eax [esp+70h+var_5C] +
push eax  +
call sub_417E03  +
mov ebx eax +
lea esi [esp+74h+var_58] +
mov edi offset dword_427C14 +
mov ecx 16h +
movs   +
add esp 4 +
test ebx ebx +
jnz loc_4181FC  +
mov ecx [esp+70h+var_5C] +
cmp byte ptr [ecx] 40h +
jz loc_4181D4  +
mov edx [esp+70h+var_5C] +
cmp byte ptr [edx] 0 +
jnz loc_4181C7  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
pop ebx  +
add esp 60h +
retn 4  +
inc [esp+70h+var_5C]  +
mov eax [esp+70h+var_5C] +
cmp byte ptr [eax] 40h +
jnz loc_4181B2  +
push 1  +
mov esi [esp+74h+var_5C] +
sub esi [ebp+0] +
lea ecx [esi+1] +
push ecx  +
call sub_410784  +
add esp 8 +
mov ebx eax +
test eax eax +
jz loc_418233  +
push esi  +
push dword ptr [ebp+0]  +
push ebx  +
call sub_40B020  +
add esp 0Ch +
cmp ds:dword_427C3C 0Ah +
jge loc_418233  +
push ebx  +
call sub_41733C  +
mov esi eax +
test eax eax +
jnz loc_41821E  +
push ebx  +
call sub_40972C  +
xor ebx ebx +
add esp 4 +
jmp loc_418233  +
mov edx ds:dword_427C3C +
inc edx  +
mov ds:dword_427C3C edx +
dec edx  +
mov ds:dword_427C14[edx*4] esi +
mov esi [esp+70h+var_5C] +
inc esi  +
mov eax ebx +
mov [ebp+0] esi +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 60h +
retn 4  +
***
mov ecx [eax] +
retn 4  +
***
mov edx 1 +
push ebx  +
push eax  +
sub esp 81Ch +
sub esp 10h +
lea eax [esp+10h+var_C] +
push eax  +
call sub_41879C  +
add esp 4 +
mov ax word ptr [esp+10h+var_C] +
and eax 0FFFFh +
and eax [esp+10h+arg_0] +
add esp 10h +
retn   +
***
sub esp 10h +
lea eax [esp+10h+var_C] +
push eax  +
call sub_41879C  +
mov cx [esp+14h+arg_0] +
and cx 3Fh +
not ecx  +
and word ptr [esp+14h+var_C] cx +
add esp 4 +
lea edx [esp+10h+var_C] +
push edx  +
call sub_4187F4  +
add esp 14h +
retn   +
***
sub esp 0Ch +
lea eax [esp+0Ch+var_C] +
push eax  +
call sub_41879C  +
add esp 4 +
mov ax word ptr [esp+0Ch+var_C+2] +
add esp 0Ch +
and eax 0C00h +
retn   +
***
sub esp 0Ch +
push ebx  +
test [esp+10h+arg_0] 0FFFFF3FFh +
jnz loc_418791  +
lea eax [esp+10h+var_C] +
push eax  +
call sub_41879C  +
mov cx word ptr [esp+14h+var_C+2] +
and cx 0F3FFh +
mov dx word ptr [esp+14h+arg_0] +
lea ebx [esp+14h+var_C] +
mov [esp+14h+var_8] dx +
or ecx [esp+14h+arg_0] +
mov word ptr [esp+14h+var_C+2] cx +
push ebx  +
call sub_4187F4  +
add esp 8 +
xor eax eax +
pop ebx  +
add esp 0Ch +
retn   +
pop ebx  +
add esp 0Ch +
mov eax 1 +
retn   +
***
push esi  +
push edi  +
call sub_4099C8  +
mov ebx eax +
add ebx 48h +
cmp ds:dword_4232EC 0 +
jz loc_4187E0  +
mov ax [ebx] +
and ax 3Fh +
push eax  +
call sub_418CB3  +
mov ecx eax +
pop eax  +
or eax ecx +
push 0  +
mov [ebx] ax +
push 0  +
call sub_418CBC  +
mov [ebx+2] ax +
and ax 0C00h +
mov [ebx+4] ax +
add esp 8 +
mov esi ebx +
mov edi [esp+arg_0] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
push esi  +
push edi  +
call sub_4099C8  +
mov ebx eax +
add ebx 48h +
mov esi [esp+arg_0] +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
cmp ds:dword_4232EC 0 +
jz loc_41882C  +
push 0F00h  +
mov ax [ebx+2] +
and eax 0FFFFh +
push eax  +
call sub_418CBC  +
add esp 8 +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov ecx [ebp+arg_8] +
jecxz loc_41887F  +
mov ah 41h +
mov dh 5Ah +
lods   +
mov dl [edi] +
inc edi  +
cmp al dl +
jnz loc_418864  +
loop loc_418854  +
jmp loc_41887F  +
cmp al ah +
jb loc_418885  +
cmp al dh +
ja loc_41886E  +
add al 20h +
cmp dl ah +
jb loc_418885  +
cmp dl dh +
ja loc_418879  +
add dl 20h +
cmp al dl +
jnz loc_418885  +
loop loc_418854  +
mov eax ecx +
pop edi  +
pop esi  +
pop ebp  +
retn   +
movzx edx dl +
movzx eax al +
sub eax edx +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push 4  +
push 1000h  +
push [esp+18h+dwSize]  +
push 0  +
call VirtualAlloc  +
test eax eax +
mov [esp+10h+lpAddress] eax +
jnz loc_4188BE  +
pop esi  +
mov eax 0FFFFFFFFh +
pop ebx  +
add esp 8 +
retn   +
cmp ds:dword_424BDC 0 +
jz loc_4188D6  +
mov ecx ds:dword_424BDC +
cmp dword ptr [ecx+4] 400h +
jl loc_418927  +
push 4  +
push 1000h  +
push 1008h  +
push 0  +
call VirtualAlloc  +
test eax eax +
mov [esp+10h+var_4] eax +
jnz loc_41890E  +
push 8000h  +
push 0  +
push [esp+18h+lpAddress]  +
call VirtualFree  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
mov edx [esp+10h+var_4] +
mov ebx ds:dword_424BDC +
mov [edx] ebx +
mov ds:dword_424BDC edx +
mov dword ptr [edx+4] 0 +
mov esi ds:dword_424BDC +
mov ecx [esi+4] +
mov edx [esp+10h+lpAddress] +
mov [esi+ecx*4+8] edx +
mov eax ds:dword_424BDC +
inc dword ptr [eax+4]  +
mov eax edx +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
mov eax esp +
retn   +
***
push ebx  +
sub esp 0Ch +
mov eax ds:CodePage +
mov ecx ds:dword_421BFD +
push ebx  +
mov ebx ds:dword_421BFD +
push ebp  +
push esi  +
push edi  +
mov [esp+1Ch+CodePage] eax +
cmp byte ptr [ecx] 3Dh +
jnz loc_4189FA  +
push ebx  +
call sub_40A110  +
inc eax  +
add ebx eax +
add esp 4 +
cmp byte ptr [ebx] 3Dh +
jz loc_4189E9  +
xor edi edi +
mov esi ebx +
cmp byte ptr [ebx] 0 +
jz loc_418A15  +
push esi  +
inc edi  +
call sub_40A110  +
inc eax  +
add esi eax +
add esp 4 +
cmp byte ptr [esi] 0 +
jnz loc_418A03  +
lea edx ds:4[edi*4] +
push edx  +
push ds:dword_424D20  +
call sub_40B310  +
add esp 8 +
mov ebp eax +
test eax eax +
jz loc_418AC8  +
mov [esp+1Ch+lpMultiByteStr] ebx +
xor ebx ebx +
test edi edi +
jle loc_418A4C  +
mov dword ptr [ebp+ebx*4+0] 0 +
inc ebx  +
cmp ebx edi +
jl loc_418A3F  +
xor ebx ebx +
mov esi [esp+1Ch+lpMultiByteStr] +
test edi edi +
jle loc_418AAD  +
push 0  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push [esp+30h+CodePage]  +
call MultiByteToWideChar  +
test eax eax +
mov [esp+1Ch+cchWideChar] eax +
jz loc_418AC8  +
add eax eax +
push eax  +
call sub_40F9A0  +
mov [ebp+ebx*4+0] eax +
add esp 4 +
test eax eax +
jz loc_418AC8  +
push [esp+1Ch+cchWideChar]  +
push eax  +
push 0FFFFFFFFh  +
push esi  +
push 1  +
push [esp+30h+CodePage]  +
call MultiByteToWideChar  +
test eax eax +
jz loc_418AC8  +
push esi  +
call sub_40A110  +
inc eax  +
add esi eax +
inc ebx  +
add esp 4 +
cmp ebx edi +
jl loc_418A56  +
mov dword ptr [ebp+ebx*4+0] 0 +
mov ds:dword_424D20 ebp +
mov eax 1 +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 0Ch +
retn   +
test ebp ebp +
jz loc_418AEC  +
xor ebx ebx +
test edi edi +
jle loc_418AE3  +
push dword ptr [ebp+ebx*4+0]  +
call sub_40972C  +
inc ebx  +
add esp 4 +
cmp ebx edi +
jl loc_418AD2  +
push ebp  +
call sub_40972C  +
add esp 4 +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
pop ebx  +
add esp 0Ch +
retn   +
***
mov eax ds:dword_421BFD +
push ebx  +
push esi  +
mov esi ds:dword_421BFD +
push edi  +
cmp byte ptr [eax] 3Dh +
jnz loc_418B1E  +
push esi  +
call sub_40A110  +
inc eax  +
add esi eax +
add esp 4 +
cmp byte ptr [esi] 3Dh +
jz loc_418B0D  +
cmp byte ptr [esi] 0 +
mov edi 1 +
mov ebx esi +
jz loc_418B3C  +
push ebx  +
inc edi  +
call sub_40A110  +
inc eax  +
add ebx eax +
add esp 4 +
cmp byte ptr [ebx] 0 +
jnz loc_418B2A  +
shl edi 2 +
cmp ds:dword_424D1C 0 +
jnz loc_418B55  +
push edi  +
call sub_40F9A0  +
mov ebx eax +
add esp 4 +
jmp loc_418B66  +
push edi  +
push ds:dword_424D1C  +
call sub_40B310  +
mov ebx eax +
add esp 8 +
test ebx ebx +
jz loc_418B90  +
mov [esp+14h+var_4] ebx +
mov ecx [esp+14h+var_4] +
xor edi edi +
mov ds:dword_424D1C ecx +
mov ebx esi +
cmp byte ptr [esi] 0 +
jz loc_418BB7  +
push ebx  +
call sub_409778  +
add esp 4 +
mov esi eax +
test eax eax +
jnz loc_418B9C  +
pop edi  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
push ebx  +
mov edx ds:dword_424D1C +
mov [edx+edi*4] esi +
inc edi  +
call sub_40A110  +
inc eax  +
add ebx eax +
add esp 4 +
cmp byte ptr [ebx] 0 +
jnz loc_418B81  +
mov ebx ds:dword_424D1C +
mov dword ptr [ebx+edi*4] 0 +
call sub_4189C8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
sub esp 24h +
push ebx  +
push esi  +
push edi  +
push ds  +
pop es  +
mov edi [ebp+arg_8] +
mov ebx 1 +
mov ecx [ebp+arg_0] +
lea esi [ebp-1] +
mov [esi] bh +
jmp loc_412E37  +
***
push eax  +
fstsw  ax +
and eax 3Fh +
jz loc_418C13  +
push eax  +
call sub_409A2C  +
fcompp st(1) st +
fstsw  ax +
fclex   +
sahf   +
pop eax  +
retn   +
***
push eax  +
fstsw  ax +
and eax 3Fh +
jz loc_418C31  +
push eax  +
call sub_409A2C  +
ftst   +
fstp  st +
fstsw  ax +
fclex   +
sahf   +
pop eax  +
retn   +
***
push eax  +
sub esp 8 +
fst  qword ptr [esp] +
wait   +
mov eax [esp+4] +
shl eax 1 +
or eax [esp] +
add esp 8 +
test eax eax +
pop eax  +
retn   +
***
ftst   +
fstp  st +
xor eax eax +
fnstsw  ax +
retn   +
***
push edx  +
push eax  +
fld  qword ptr [esp] +
wait   +
lea esp [esp+8] +
retn   +
***
sub esp 8 +
fstcw  word ptr [esp+4] +
wait   +
fldcw  ds:word_424D28 +
fistp  word ptr [esp] +
wait   +
movzx eax word ptr [esp] +
wait   +
fldcw  word ptr [esp+4] +
wait   +
add esp 8 +
retn   +
***
sub esp 8 +
fstcw  word ptr [esp+4] +
wait   +
fldcw  ds:word_424D28 +
fistp  dword ptr [esp] +
wait   +
pop eax  +
wait   +
fldcw  word ptr [esp] +
add esp 4 +
retn   +
***
push eax  +
fld  dword ptr [esp] +
wait   +
pop eax  +
retn   +
***
xor eax eax +
push eax  +
push ebx  +
fstcw  word ptr [ebp+var_4] +
mov ecx [ebp+arg_4] +
mov ebx ecx +
not ebx  +
and ecx [ebp+arg_0] +
wait   +
mov eax [ebp+var_4] +
and ebx eax +
or ebx ecx +
mov [ebp+var_4] ebx +
fldcw  word ptr [ebp+var_4] +
wait   +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
finit   +
retn   +
***
mov edx ecx +
mov eax 0FFFFFFFFh +
mov dword ptr [ecx+8] 0 +
mov [edx+4] eax +
mov dword ptr [edx] offset off_424D2C +
mov eax ecx +
retn   +
***
mov eax [ecx] +
push ebp  +
push esi  +
push edi  +
xor esi esi +
mov ebp [esp+14h+arg_4] +
mov ebx ecx +
mov edi [esp+14h+arg_0] +
test ebp ebp +
jle loc_418D41  +
mov edx [ebx] +
mov ecx ebx +
call dword ptr [edx+4]  +
mov [esp+14h+var_4] eax +
cmp eax 0FFFFFFFFh +
jz loc_418D41  +
mov cl byte ptr [esp+14h+var_4] +
inc esi  +
mov [edi] cl +
inc edi  +
cmp esi ebp +
jl loc_418D25  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
pop ecx  +
retn 8  +
***
push ebp  +
push ebp  +
push esi  +
push edi  +
xor ebx ebx +
mov esi ecx +
mov ebp [esp+arg_0] +
mov edi [esp+arg_4] +
dec edi  +
jle loc_418DBA  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+4]  +
mov ebx eax +
cmp eax 0FFFFFFFFh +
jz loc_418DAB  +
cmp ebx 0Ah +
jnz loc_418DB1  +
mov byte ptr [ebp+0] 0 +
jmp loc_418DBA  +
mov [ebp+0] bl +
inc ebp  +
dec edi  +
test edi edi +
jg loc_418D98  +
cmp ebx 0FFFFFFFFh +
mov eax 1 +
jnz loc_418DC6  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
pop ecx  +
retn 8  +
***
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov ebx [esp+arg_0] +
cmp byte ptr [ebx] 0 +
jz loc_418DF5  +
mov edx ebx +
inc ebx  +
movsx ecx byte ptr [edx] +
push ecx  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+8]  +
inc edi  +
cmp byte ptr [ebx] 0 +
jnz loc_418DE1  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn 4  +
***
mov ebp esp +
mov eax [ecx+8] +
mov eax [esp+arg_0] +
mov [ecx+8] eax +
retn 4  +
***
mov ebx ecx +
call sub_418CE8  +
mov eax [esp+arg_0] +
mov dword ptr [ebx] offset off_424D5C +
mov [ebx+0Ch] eax +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 4  +
***
mov eax [ecx+0Ch] +
push ecx  +
push eax  +
call sub_40C218  +
add esp 4 +
pop ecx  +
retn   +
***
mov eax [ecx+0Ch] +
mov eax [ecx+0Ch] +
push ebx  +
push eax  +
mov edx [esp+8+arg_4] +
push edx  +
push 1  +
mov ebx [esp+10h+lpBuffer] +
push ebx  +
call sub_41BC78  +
add esp 10h +
pop ebx  +
retn 8  +
***
mov eax [ecx+0Ch] +
push ebx  +
push eax  +
mov edx [esp+8+arg_4] +
push edx  +
push 1  +
mov ebx [esp+10h+lpBuffer] +
push ebx  +
call sub_41BB50  +
add esp 10h +
pop ebx  +
retn 8  +
***
mov eax [esp+arg_4] +
mov edx [esp+arg_0] +
push eax  +
push edx  +
push ebx  +
call sub_41B9AC  +
add esp 0Ch +
pop ebx  +
retn 8  +
***
mov eax [ecx+0Ch] +
push ecx  +
push eax  +
call sub_41BAD4  +
add esp 4 +
pop ecx  +
retn   +
***
mov ecx [esp+arg_4] +
push eax  +
push ecx  +
mov edx [esp+8+arg_0] +
mov ebx [edx+0Ch] +
push ebx  +
call sub_40A264  +
add esp 0Ch +
pop ebx  +
retn   +
***
mov eax [ecx+8] +
or al 1 +
and eax [esp+arg_0] +
neg eax  +
sbb eax eax +
neg eax  +
retn 4  +
***
call sub_418CE8  +
mov eax ecx +
mov dword ptr [ecx] offset off_424D8C +
push ecx  +
cmp dword ptr [eax+1Ch] 0 +
jz loc_418F8F  +
mov eax [eax+0Ch] +
push eax  +
call sub_40972C  +
add esp 4 +
pop eax  +
retn   +
***
mov esi ecx +
mov eax [ecx+18h] +
cmp eax [esi+14h] +
jge loc_418FB2  +
mov edx [esi+18h] +
mov ebx [esi+0Ch] +
inc edx  +
xor eax eax +
mov [esi+18h] edx +
dec edx  +
mov al [edx+ebx] +
jmp loc_418FB7  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
retn   +
***
mov ebx ecx +
mov eax [ecx+18h] +
push esi  +
push edi  +
cmp eax [ebx+10h] +
jl loc_418FD5  +
mov edx [ebx] +
push 1  +
call dword ptr [edx+30h]  +
test eax eax +
jz loc_418FFA  +
mov esi [ebx+0Ch] +
mov edi [ebx+18h] +
mov cl [esp+14h] +
mov [esi+edi] cl +
mov edx [ebx+18h] +
inc edx  +
mov [ebx+18h] edx +
cmp edx [ebx+14h] +
jle loc_418FF1  +
mov [ebx+14h] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
xor eax eax +
retn 4  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
mov eax 0FFFFFFFFh +
retn 4  +
***
push esi  +
mov eax [ecx+18h] +
mov ebx [ecx+14h] +
mov esi [esp+arg_4] +
lea edx [eax+esi] +
cmp edx ebx +
jle loc_419020  +
mov esi ebx +
sub esi eax +
mov ebx ecx +
push esi  +
mov edx [ebx+0Ch] +
add edx [ebx+18h] +
push edx  +
mov edx [esp+8+arg_0] +
push edx  +
call sub_40B020  +
add [ebx+18h] esi +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
pop ecx  +
retn 8  +
***
push esi  +
push edi  +
mov ebx ecx +
mov edx [esp+arg_4] +
mov edi [esp+arg_0] +
test edx edx +
jz loc_4190B1  +
cmp edx 1 +
jz loc_4190C3  +
cmp edx 2 +
jz loc_4190D0  +
jmp loc_4190DD  +
mov edx edi +
sub edx [ebx+18h] +
push edx  +
mov edx [ebx] +
call dword ptr [edx+30h]  +
mov esi eax +
mov [ebx+18h] edi +
jmp loc_4190DD  +
mov edx [ebx] +
push edi  +
call dword ptr [edx+30h]  +
mov esi eax +
add [ebx+18h] edi +
jmp loc_4190DD  +
mov edx [ebx+14h] +
mov esi 1 +
sub edx edi +
mov [ebx+18h] edx +
mov ecx [ebx+18h] +
cmp ecx [ebx+14h] +
jle loc_419112  +
test esi esi +
jz loc_41910A  +
mov edx [ebx+18h] +
mov ecx [ebx+14h] +
sub edx ecx +
push edx  +
mov edx [ebx+0Ch] +
push 0  +
add edx ecx +
push edx  +
call sub_4097E4  +
mov ecx [ebx+18h] +
mov [ebx+14h] ecx +
add esp 0Ch +
jmp loc_41911D  +
mov ecx [ebx+14h] +
mov [ebx+18h] ecx +
jmp loc_41911D  +
xor edx edx +
cmp ecx edx +
jns loc_41911D  +
mov [ebx+18h] edx +
mov esi edx +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
retn 8  +
***
mov eax [ecx+8] +
push esi  +
enter 1Ch 0 +
push ebx  +
push esi  +
mov [ebp+dwFlags] 0 +
mov [ebp+lpFormat] 0 +
cmp [ebp+arg_4] 1 +
jnz loc_4191FA  +
mov [ebp+dwFlags] 1 +
jmp loc_41925B  +
cmp [ebp+arg_4] 2 +
jnz loc_419209  +
mov [ebp+dwFlags] 2 +
jmp loc_41925B  +
cmp [ebp+arg_4] 0 +
jz loc_419217  +
mov eax [ebp+arg_4] +
cmp byte ptr [eax] 0 +
jnz loc_419255  +
push 4  +
lea ecx [ebp+LCData] +
push ecx  +
push 21h  +
push 400h  +
call GetLocaleInfoA  +
movsx edx [ebp+LCData] +
cmp edx 30h +
jz loc_41923A  +
cmp edx 32h +
jz loc_419243  +
jmp loc_41924C  +
mov [ebp+lpFormat] offset aMmDdYy +
jmp loc_41925B  +
mov [ebp+lpFormat] offset aYyMmDd +
jmp loc_41925B  +
mov [ebp+lpFormat] offset aDdMmYy +
jmp loc_41925B  +
mov ebx [ebp+arg_4] +
mov [ebp+lpFormat] ebx +
push 0  +
lea esi [ebp+var_10] +
push esi  +
push [ebp+arg_0]  +
call sub_4192C8  +
push 64h  +
mov eax offset DateStr +
push eax  +
push [ebp+lpFormat]  +
push esi  +
push [ebp+dwFlags]  +
push 400h  +
call GetDateFormatA  +
mov eax offset DateStr +
add esp 0Ch +
pop esi  +
pop ebx  +
leave   +
retn   +
***
enter 10h 0 +
enter 8 0 +
enter 2Ch 0 +
enter 6Ch 0 +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+lprc] +
lea ecx [eax+8] +
mov edx [ecx] +
sub edx [eax] +
mov [ebp+var_18] edx +
lea ebx [eax+0Ch] +
mov esi [ebx] +
lea edi [eax+4] +
sub esi [edi] +
mov [ebp+var_14] esi +
push 2  +
push eax  +
mov [ebp+var_6C] ecx +
call MonitorFromRect  +
mov [ebp+mi.cbSize] 28h +
lea ecx [ebp+mi] +
push ecx  +
push eax  +
call GetMonitorInfoA  +
lea esi [ebp+mi.rcWork] +
mov [ebp+var_68] edi +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+lprc] +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_20] +
sub eax [ebp+var_18] +
mov ecx [ebp+lprc] +
mov edx [ecx] +
cmp eax edx +
mov ecx 1 +
jl loc_419494  +
mov cl ch +
mov [ebp+var_64] eax +
mov [ebp+var_58] ebx +
jge loc_41949E  +
jmp loc_4194A0  +
mov eax edx +
cmp eax [ebp+var_28] +
jge loc_4194AA  +
mov esi [ebp+var_28] +
jmp loc_4194B5  +
test cl cl +
jz loc_4194B3  +
mov esi [ebp+var_64] +
jmp loc_4194B5  +
mov esi edx +
mov ecx [ebp+lprc] +
mov [ecx] esi +
mov eax [ebp+var_1C] +
sub eax [ebp+var_14] +
mov edx [ebp+var_68] +
mov edi [edx] +
cmp eax edi +
mov ebx 1 +
jl loc_4194D0  +
mov bl bh +
mov [ebp+var_54] eax +
jge loc_4194D7  +
jmp loc_4194D9  +
mov eax edi +
cmp eax [ebp+var_24] +
jge loc_4194E3  +
mov esi [ebp+var_24] +
jmp loc_4194EE  +
test bl bl +
jz loc_4194EC  +
mov esi [ebp+var_54] +
jmp loc_4194EE  +
mov esi edi +
mov [edx] esi +
mov ebx [ecx] +
add ebx [ebp+var_18] +
mov eax [ebp+var_6C] +
mov [eax] ebx +
mov edx [edx] +
add edx [ebp+var_14] +
mov edi [ebp+var_58] +
mov [edi] edx +
push 10h  +
push ecx  +
lea ecx [ebp+var_10] +
push ecx  +
call sub_41BDD0  +
neg eax  +
sbb eax eax +
neg eax  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
enter 6Ch 0 +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_4] +
mov [ebp+var_6C] eax +
cmp dword ptr [eax] 0 +
jz loc_419548  +
push 0FFFFFFFAh  +
push [ebp+hWnd]  +
call GetWindowLongA  +
mov ecx [ebp+var_6C] +
cmp eax [ecx] +
jz loc_419548  +
xor edx edx +
jmp loc_41954D  +
mov edx 1 +
mov [ebp+var_68] edx +
test edx edx +
jz loc_419583  +
mov ebx [ebp+var_6C] +
cmp dword ptr [ebx+4] 0 +
jz loc_419583  +
push 64h  +
lea esi [ebp+ClassName] +
push esi  +
push [ebp+hWnd]  +
call GetClassNameA  +
mov eax [ebp+var_6C] +
push dword ptr [eax+4]  +
push esi  +
call sub_40A1D0  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp+var_68] eax +
add esp 8 +
cmp [ebp+var_68] 0 +
jz loc_4195AF  +
mov ecx [ebp+var_6C] +
cmp dword ptr [ecx+0Ch] 0 +
jz loc_4195AF  +
push 0FFFFFFF4h  +
push [ebp+hWnd]  +
call GetWindowLongA  +
mov edx [ebp+var_6C] +
cmp eax [edx+0Ch] +
mov ebx 1 +
jz loc_4195AC  +
xor ebx ebx +
mov [ebp+var_68] ebx +
cmp [ebp+var_68] 0 +
jz loc_4195CC  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call GetWindowLongA  +
mov esi [ebp+var_6C] +
mov edi [esi+10h] +
and eax edi +
cmp eax edi +
jz loc_4195D0  +
xor eax eax +
jmp loc_4195D5  +
mov eax 1 +
mov [ebp+var_68] eax +
test eax eax +
jz loc_4195EF  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call GetWindowLongA  +
mov ecx [ebp+var_6C] +
test [ecx+14h] eax +
jz loc_4195F3  +
xor edx edx +
jmp loc_4195F8  +
mov edx 1 +
mov [ebp+var_68] edx +
test edx edx +
jz loc_419608  +
mov ebx [ebp+hWnd] +
mov esi [ebp+var_6C] +
mov [esi+8] ebx +
cmp [ebp+var_68] 1 +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
enter 18h 0 +
enter 0Ch 0 +
enter 8 0 +
enter 144h 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_140] 0 +
call __imp_GetVersion  +
mov [ebp+var_13C] eax +
shr eax 10h +
mov eax [ebp+var_13C] +
mov ecx 0FFFFh +
and eax ecx +
movzx edx ax +
and edx ecx +
movzx edx dx +
mov [ebp+var_144] edx +
shr edx 8 +
mov [ebp+var_138] dl +
mov ebx [ebp+var_144] +
mov eax 0FFh +
and bl al +
mov [ebp+var_137] bl +
push offset aGetversionexa  +
push offset ModuleName  +
call GetModuleHandleA  +
push eax  +
call GetProcAddress  +
mov [ebp+var_134] eax +
test eax eax +
jz loc_4199A9  +
mov [ebp+var_130] 94h +
lea esi [ebp+var_130] +
push esi  +
call [ebp+var_134]  +
test eax eax +
jz loc_419A0F  +
mov ecx [ebp+var_120] +
test ecx ecx +
jz loc_4197A4  +
cmp ecx 1 +
jz loc_4197B3  +
cmp ecx 2 +
jz loc_419811  +
jmp loc_4198B1  +
mov [ebp+var_140] 10001h +
jmp loc_4198BB  +
cmp [ebp+var_12C] 4 +
jnz loc_4197D4  +
cmp [ebp+var_128] 0Ah +
jnb loc_4197D4  +
mov [ebp+var_140] 20000h +
jmp loc_4198BB  +
cmp [ebp+var_12C] 4 +
jnz loc_4197F5  +
cmp [ebp+var_128] 0Ah +
jnz loc_4197F5  +
mov [ebp+var_140] 20001h +
jmp loc_4198BB  +
cmp [ebp+var_12C] 4 +
jnz loc_4198BB  +
mov [ebp+var_140] 20002h +
jmp loc_4198BB  +
mov edi [ebp+var_12C] +
sub edi 3 +
cmp edi 3 +
ja loc_4198BB  +
jmp ds:off_424FC0[edi*4]  +
mov [ebp+var_140] 40000h +
jmp loc_4198BB  +
mov [ebp+var_140] 40001h +
jmp loc_4198BB  +
cmp [ebp+var_128] 0 +
jnz loc_41985D  +
mov [ebp+var_140] 0C0000h +
jmp loc_4198BB  +
cmp [ebp+var_128] 1 +
jnz loc_419872  +
mov [ebp+var_140] 0C0001h +
jmp loc_4198BB  +
cmp [ebp+var_128] 2 +
jnz loc_4198BB  +
mov [ebp+var_140] 0C0002h +
jmp loc_4198BB  +
cmp [ebp+var_128] 0 +
jnz loc_41989C  +
mov [ebp+var_140] 0C0003h +
jmp loc_4198BB  +
cmp [ebp+var_128] 1 +
jnz loc_4198BB  +
mov [ebp+var_140] 0C0004h +
jmp loc_4198BB  +
mov [ebp+var_140] 0 +
cmp [ebp+arg_0] 0 +
jz loc_419A0F  +
push 18h  +
push 0  +
push [ebp+arg_0]  +
call sub_4097E4  +
add esp 0Ch +
cmp [ebp+var_140] 10001h +
jnz loc_419910  +
mov edx [ebp+var_140] +
mov eax [ebp+arg_0] +
mov [eax] edx +
mov bl [ebp+var_138] +
mov [eax+5] bl +
mov cl [ebp+var_137] +
mov [eax+4] cl +
push 16h  +
call GetSystemMetrics  +
mov esi [ebp+arg_0] +
mov [esi+8] eax +
jmp loc_419A0F  +
mov edx [ebp+var_140] +
mov eax [ebp+arg_0] +
mov [eax] edx +
mov bl byte ptr [ebp+var_128] +
mov [eax+5] bl +
mov cl byte ptr [ebp+var_12C] +
mov [eax+4] cl +
mov si [ebp+var_124] +
mov [eax+6] si +
push 16h  +
call GetSystemMetrics  +
mov edx [ebp+arg_0] +
mov [edx+8] eax +
call sub_419654  +
mov edi [ebp+arg_0] +
mov [edi+10h] eax +
call sub_4196AC  +
mov [edi+14h] eax +
mov [ebp+var_9C] 9Ch +
test [ebp+var_140] 40000h +
jz loc_419A0F  +
cmp [ebp+var_140] 40000h +
jz loc_419A0F  +
lea eax [ebp+var_9C] +
push eax  +
call [ebp+var_134]  +
test eax eax +
jz loc_419A0F  +
mov cl [ebp+var_8] +
mov ebx [ebp+arg_0] +
mov [ebx+0Ch] cl +
mov dl [ebp+var_6] +
mov [ebx+0Dh] dl +
jmp loc_419A0F  +
test [ebp+var_13C] 80000000h +
mov esi 10001h +
jnz loc_4199C9  +
cmp [ebp+var_137] 4 +
mov esi 40001h +
jz loc_4199C9  +
dec esi  +
mov [ebp+var_140] esi +
cmp [ebp+arg_0] 0 +
jz loc_419A0F  +
push 18h  +
push 0  +
push [ebp+arg_0]  +
call sub_4097E4  +
mov eax [ebp+var_140] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov dl [ebp+var_138] +
mov [ecx+5] dl +
mov bl [ebp+var_137] +
mov [ecx+4] bl +
push 16h  +
call GetSystemMetrics  +
mov esi [ebp+arg_0] +
mov [esi+8] eax +
add esp 0Ch +
mov eax [ebp+var_140] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
enter 4 0 +
push edi  +
mov eax [ebp+arg_0] +
mov edi offset unk_425074 +
mov ecx 0Ch +
scas   +
jnz loc_419A35  +
jmp dword ptr [edi+2Ch]  +
mov [ebp+var_4] offset aUnknown_1 +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindows16 +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindows32s +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindows95 +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindows98 +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindowsMe +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindowsNt3 +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindowsNt4 +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindows2000 +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindowsXp +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWidnows2003 +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindowsVista +
jmp loc_419AAB  +
mov [ebp+var_4] offset aWindows7 +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn   +
***
enter 28h 0 +
push ebx  +
push esi  +
lea eax [ebp+var_28] +
push eax  +
call sub_4196EC  +
lea ecx [ebp+var_10] +
mov [ebp+var_4] ecx +
add esp 4 +
cmp [ebp+var_1C] 0 +
jz loc_419B08  +
movzx edx [ebp+var_1C] +
push edx  +
push offset aSpD  +
push [ebp+var_4]  +
call sub_40A2B4  +
add [ebp+var_4] eax +
add esp 0Ch +
cmp [ebp+var_1B] 0 +
jz loc_419B08  +
movzx ebx [ebp+var_1B] +
push ebx  +
push offset a_02d  +
push [ebp+var_4]  +
call sub_40A2B4  +
add [ebp+var_4] eax +
add esp 0Ch +
mov esi [ebp+var_4] +
mov byte ptr [esi] 0 +
movsx eax [ebp+var_22] +
push eax  +
movzx ecx [ebp+var_23] +
push ecx  +
movzx edx [ebp+var_24] +
push edx  +
cmp [ebp+var_20] 0 +
jz loc_419B2A  +
mov ebx offset aDebug +
jmp loc_419B2F  +
mov ebx offset unk_4250F0 +
push ebx  +
cmp [ebp+var_14] 0 +
jz loc_419B3D  +
mov eax offset aWine +
jmp loc_419B42  +
mov eax offset unk_4250F0 +
push eax  +
cmp [ebp+var_18] 0 +
jz loc_419B50  +
mov ecx offset aX64 +
jmp loc_419B55  +
mov ecx offset unk_4250F0 +
push ecx  +
lea edx [ebp+var_10] +
push edx  +
push [ebp+var_28]  +
call sub_419A1C  +
add esp 4 +
push eax  +
push offset aSSSSSvD_02dBui  +
push [ebp+arg_0]  +
call sub_40A2B4  +
mov eax [ebp+arg_0] +
add esp 28h +
pop esi  +
pop ebx  +
leave   +
retn   +
***
enter 4 0 +
mov eax 205h +
xor ecx ecx +
mov [ebp+FilePart] ecx +
lea edx [ebp+FilePart] +
push edx  +
push [ebp+lpBuffer]  +
push eax  +
push [ebp+lpFileName]  +
call GetFullPathNameA  +
test eax eax +
jle loc_419BAF  +
cmp eax 205h +
jg loc_419BAF  +
mov eax [ebp+lpBuffer] +
jmp locret_419BB1  +
xor eax eax +
leave   +
retn   +
***
retn 4  +
***
enter 8 0 +
push ebx  +
mov [ebp+var_4] ecx +
mov dword ptr [ecx] offset off_421B54 +
push 1  +
call sub_419DAC  +
mov eax [ebp+var_4] +
lea ecx [eax+14h] +
push dword ptr [ecx]  +
mov [ebp+var_8] ecx +
call sub_40972C  +
mov edx [ebp+var_8] +
mov dword ptr [edx] 0 +
add esp 4 +
mov ebx [ebp+var_4] +
mov dword ptr [ebx] offset off_421B30 +
pop ebx  +
leave   +
retn   +
***
enter 4 0 +
mov [ebp+var_4] ecx +
mov eax [ebp+arg_0] +
mov [ecx+4] eax +
push [ebp+arg_4]  +
call sub_409778  +
mov ecx [ebp+var_4] +
mov [ecx+14h] eax +
xor edx edx +
mov [ecx+0Ch] edx +
mov [ecx+8] edx +
mov [ecx+10h] edx +
mov [ecx+18h] dl +
mov [ecx+7Ch] edx +
mov [ecx+80h] edx +
mov [ecx+84h] edx +
add esp 4 +
leave   +
retn 8  +
***
enter 8 0 +
push ebx  +
lea eax [ecx+4] +
mov edx [eax] +
mov [ebp+var_4] edx +
push 1  +
mov [ebp+var_8] eax +
call sub_419DAC  +
mov ecx [ebp+arg_0] +
mov ebx [ebp+var_8] +
mov [ebx] ecx +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 4  +
***
enter 450h 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_44C] ecx +
cmp dword ptr [ecx+4] 0 +
jz loc_419D95  +
cmp dword ptr [ecx+10h] 0 +
jz loc_419CB6  +
mov eax [ecx+0Ch] +
and eax [ebp+samDesired] +
cmp eax [ebp+samDesired] +
jz loc_419CB6  +
lea edx [ecx+8] +
push dword ptr [edx]  +
mov [ebp+var_450] edx +
call RegCloseKey  +
mov ecx [ebp+var_450] +
mov dword ptr [ecx] 0 +
mov ebx [ebp+var_44C] +
mov dword ptr [ebx+10h] 0 +
mov esi [ebp+var_44C] +
cmp dword ptr [esi+4] 7FFFFFFFh +
jz loc_419D95  +
mov eax [ebp+var_44C] +
mov edx [eax+10h] +
inc dword ptr [eax+10h]  +
test edx edx +
jnz loc_419D95  +
mov ecx 10h +
xor eax eax +
lea edi [ebp+Class] +
stos   +
mov [ebp+dwDisposition] eax +
push [ebp+arg_0]  +
mov ecx [ebp+var_44C] +
push dword ptr [ecx+14h]  +
lea ebx [ebp+SubKey] +
push ebx  +
call sub_41A5B4  +
add esp 0Ch +
test [ebp+samDesired] 20006h +
jz loc_419D52  +
lea edx [ebp+dwDisposition] +
push edx  +
mov eax [ebp+var_44C] +
lea esi [eax+8] +
push esi  +
push 0  +
push [ebp+samDesired]  +
push 0  +
lea ecx [ebp+Class] +
push ecx  +
push 0  +
lea ebx [ebp+SubKey] +
push ebx  +
push dword ptr [eax+4]  +
call RegCreateKeyExA  +
neg eax  +
sbb eax eax +
neg eax  +
mov [ebp+var_4] eax +
jmp loc_419D7A  +
mov edx [ebp+var_44C] +
lea eax [edx+8] +
push eax  +
push [ebp+samDesired]  +
push 0  +
lea esi [ebp+SubKey] +
push esi  +
push dword ptr [edx+4]  +
call RegOpenKeyExA  +
neg eax  +
sbb eax eax +
neg eax  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_419D95  +
mov ecx [ebp+var_44C] +
mov dword ptr [ecx+8] 0 +
xor ebx ebx +
mov [ecx+0Ch] ebx +
mov [ecx+10h] ebx +
mov edx [ebp+var_44C] +
mov eax [edx+8] +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
enter 0Ch 0 +
enter 8 0 +
enter 40Ch 0 +
push ebx  +
push esi  +
mov [ebp+var_408] ecx +
mov [ebp+var_404] 0 +
cmp dword ptr [ecx+7Ch] 0 +
jz loc_419EA5  +
add ecx 7Ch +
push dword ptr [ecx]  +
mov [ebp+var_40C] ecx +
call RegCloseKey  +
mov eax [ebp+var_40C] +
mov dword ptr [eax] 0 +
mov ecx [ebp+var_408] +
cmp dword ptr [ecx+4] 7FFFFFFFh +
jnz loc_419F18  +
push 80000001h  +
mov ecx [ebp+var_408] +
mov edx [ecx] +
call dword ptr [edx+14h]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
mov ecx [ebp+var_408] +
mov eax [ecx] +
call dword ptr [eax+4]  +
test eax eax +
mov [ebp+var_404] eax +
jnz loc_419F06  +
push 80000002h  +
mov ecx [ebp+var_408] +
mov ebx [ecx] +
call dword ptr [ebx+14h]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
mov ecx [ebp+var_408] +
mov edx [ecx] +
call dword ptr [edx+4]  +
mov [ebp+var_404] eax +
push 7FFFFFFFh  +
mov ecx [ebp+var_408] +
mov eax [ecx] +
call dword ptr [eax+14h]  +
jmp loc_419F7E  +
mov ebx [ebp+arg_4] +
mov esi [ebp+var_408] +
mov [esi+80h] ebx +
mov dword ptr [esi+84h] 0 +
cmp [ebp+arg_0] 0 +
jnz loc_419F3E  +
mov [ebp+arg_0] offset unk_425CF0 +
mov edx [ebp+var_408] +
lea ecx [edx+7Ch] +
push ecx  +
push [ebp+arg_0]  +
push dword ptr [edx+14h]  +
lea eax [ebp+var_400] +
push eax  +
call sub_41A5B4  +
add esp 0Ch +
push eax  +
mov ebx [ebp+var_408] +
push dword ptr [ebx+4]  +
call RegOpenKeyA  +
test eax eax +
jnz loc_419F7E  +
mov ecx ebx +
mov edx [ecx] +
call dword ptr [edx+8]  +
mov [ebp+var_404] eax +
mov eax [ebp+var_404] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
enter 14h 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_10] ecx +
mov eax [ecx+7Ch] +
neg eax  +
sbb eax eax +
neg eax  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_41A07C  +
cmp dword ptr [ecx+80h] 0 +
jz loc_419FDC  +
push 64h  +
lea edx [ecx+18h] +
push edx  +
mov ebx [ecx+84h] +
inc dword ptr [ecx+84h]  +
push ebx  +
push dword ptr [ecx+7Ch]  +
call RegEnumKeyA  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp+var_C] eax +
jmp loc_41A05C  +
mov [ebp+Type] 0 +
mov [ebp+cbValueName] 63h +
push 0  +
push 0  +
lea esi [ebp+Type] +
push esi  +
push 0  +
lea edi [ebp+cbValueName] +
push edi  +
lea eax [ecx+19h] +
push eax  +
mov edx [ecx+84h] +
inc dword ptr [ecx+84h]  +
push edx  +
push dword ptr [ecx+7Ch]  +
call RegEnumValueA  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp+var_C] eax +
cmp eax 1 +
jnz loc_41A05C  +
mov ebx [ebp+Type] +
sub ebx 1 +
cmp ebx 6 +
ja loc_41A055  +
jmp ds:off_425CF4[ebx*4]  +
mov ecx [ebp+var_10] +
mov byte ptr [ecx+18h] 62h +
jmp loc_41A05C  +
mov esi [ebp+var_10] +
mov byte ptr [esi+18h] 64h +
jmp loc_41A05C  +
mov eax [ebp+var_10] +
mov byte ptr [eax+18h] 73h +
jmp loc_41A05C  +
mov edx [ebp+var_10] +
mov byte ptr [edx+18h] 6Dh +
jmp loc_41A05C  +
mov ebx [ebp+var_10] +
mov byte ptr [ebx+18h] 3Fh +
cmp [ebp+var_C] 0 +
jnz loc_41A07C  +
mov ecx [ebp+var_10] +
add ecx 7Ch +
push dword ptr [ecx]  +
mov [ebp+var_14] ecx +
call RegCloseKey  +
mov esi [ebp+var_14] +
mov dword ptr [esi] 0 +
cmp [ebp+var_C] 0 +
jz loc_41A08A  +
mov eax [ebp+var_10] +
add eax 18h +
jmp loc_41A08C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
enter 8 0 +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] 0 +
cmp dword ptr [ecx+4] 7FFFFFFFh +
jnz loc_41A0D7  +
push 80000001h  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
push [ebp+lpValueName]  +
push [ebp+arg_0]  +
mov ecx [ebp+var_8] +
mov edx [ecx] +
call dword ptr [edx+0Ch]  +
mov [ebp+var_4] eax +
push 7FFFFFFFh  +
mov ecx [ebp+var_8] +
mov ebx [ecx] +
call dword ptr [ebx+14h]  +
jmp loc_41A108  +
push 2  +
push [ebp+arg_0]  +
call sub_419C64  +
test eax eax +
jz loc_41A108  +
push [ebp+lpValueName]  +
mov eax [ebp+var_8] +
push dword ptr [eax+8]  +
call RegDeleteValueA  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp+var_4] eax +
mov esi [ebp+var_8] +
push 0  +
mov ecx esi +
call sub_419DAC  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
enter 40Ch 0 +
push ebx  +
push esi  +
mov [ebp+var_40C] ecx +
mov [ebp+var_4] 1 +
cmp dword ptr [ecx+4] 7FFFFFFFh +
jnz loc_41A160  +
push 80000001h  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
push [ebp+arg_0]  +
mov ecx [ebp+var_40C] +
mov edx [ecx] +
call dword ptr [edx+10h]  +
mov [ebp+var_4] eax +
push 7FFFFFFFh  +
mov ecx [ebp+var_40C] +
mov ebx [ecx] +
call dword ptr [ebx+14h]  +
jmp loc_41A1D9  +
cmp [ebp+var_4] 0 +
jz loc_41A1A6  +
mov eax [ebp+var_40C] +
mov esi [ebp+arg_0] +
push 1  +
push esi  +
mov ecx eax +
mov edx [eax] +
call dword ptr [edx+4]  +
test eax eax +
mov [ebp+var_8] eax +
jz loc_41A1A6  +
push [ebp+var_8]  +
push [ebp+arg_0]  +
lea ebx [ebp+var_408] +
push ebx  +
call sub_41A5B4  +
add esp 0Ch +
push eax  +
mov ecx [ebp+var_40C] +
mov eax [ecx] +
call dword ptr [eax+10h]  +
mov [ebp+var_4] eax +
jmp loc_41A160  +
cmp [ebp+var_4] 0 +
jz loc_41A1D9  +
push [ebp+arg_0]  +
mov esi [ebp+var_40C] +
push dword ptr [esi+14h]  +
lea edx [ebp+var_408] +
push edx  +
call sub_41A5B4  +
add esp 0Ch +
push eax  +
push dword ptr [esi+4]  +
call RegDeleteKeyA  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
enter 10h 0 +
push ebx  +
push esi  +
mov [ebp+var_10] ecx +
cmp dword ptr [ecx+4] 7FFFFFFFh +
jnz loc_41A276  +
push 80000001h  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
push 0  +
push 0  +
push [ebp+arg_10]  +
push [ebp+lpData]  +
push [ebp+arg_8]  +
push [ebp+lpValueName]  +
push [ebp+arg_0]  +
mov ecx [ebp+var_10] +
mov edx [ecx] +
call dword ptr [edx+1Ch]  +
mov [ebp+cbData] eax +
cmp eax 0FFFFFFFFh +
jnz loc_41A254  +
push 80000002h  +
mov ecx [ebp+var_10] +
mov ebx [ecx] +
call dword ptr [ebx+14h]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+lpData]  +
push [ebp+arg_8]  +
push [ebp+lpValueName]  +
push [ebp+arg_0]  +
mov ecx [ebp+var_10] +
mov eax [ecx] +
call dword ptr [eax+1Ch]  +
mov [ebp+cbData] eax +
cmp [ebp+cbData] 0FFFFFFFFh +
mov edx 1 +
jnz loc_41A261  +
xor edx edx +
mov [ebp+var_4] edx +
push 7FFFFFFFh  +
mov ecx [ebp+var_10] +
mov ebx [ecx] +
call dword ptr [ebx+14h]  +
jmp loc_41A324  +
push 1  +
push [ebp+arg_0]  +
call sub_419C64  +
mov [ebp+var_4] eax +
cmp eax 1 +
jnz loc_41A2D3  +
mov esi [ebp+arg_10] +
mov [ebp+cbData] esi +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea edx [ebp+Type] +
push edx  +
push 0  +
push [ebp+lpValueName]  +
mov ecx [ebp+var_10] +
push dword ptr [ecx+8]  +
call RegQueryValueExA  +
test eax eax +
jnz loc_41A2BB  +
cmp [ebp+cbData] esi +
ja loc_41A2BB  +
mov ebx [ebp+Type] +
cmp ebx [ebp+arg_8] +
jz loc_41A2BF  +
xor esi esi +
jmp loc_41A2C4  +
mov esi 1 +
mov [ebp+var_4] esi +
mov eax [ebp+var_10] +
push 0  +
mov ecx eax +
call sub_419DAC  +
cmp [ebp+var_4] 0 +
jnz loc_41A324  +
cmp [ebp+arg_14] 1 +
sbb edx edx +
inc edx  +
mov [ebp+var_4] edx +
cmp edx 1 +
jnz loc_41A324  +
cmp [ebp+arg_18] 0 +
jz loc_41A305  +
mov ebx [ebp+arg_18] +
mov [ebp+cbData] ebx +
push ebx  +
push [ebp+arg_14]  +
push [ebp+lpData]  +
call sub_40B020  +
add esp 0Ch +
jmp loc_41A324  +
mov esi [ebp+arg_10] +
dec esi  +
push esi  +
push [ebp+arg_14]  +
push [ebp+lpData]  +
call sub_41B2F0  +
push [ebp+lpData]  +
call sub_40A110  +
inc eax  +
mov [ebp+cbData] eax +
add esp 10h +
cmp [ebp+var_4] 0 +
jz loc_41A32F  +
mov eax [ebp+cbData] +
jmp loc_41A334  +
mov eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
enter 10h 0 +
enter 0Ch 0 +
enter 20h 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_20] ecx +
cmp dword ptr [ecx+4] 7FFFFFFFh +
jnz loc_41A4C1  +
push 80000001h  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
push [ebp+arg_0]  +
mov ecx [ebp+var_20] +
call sub_41A484  +
mov [ebp+var_1C] eax +
push 7FFFFFFFh  +
mov ecx [ebp+var_20] +
mov edx [ecx] +
call dword ptr [edx+14h]  +
jmp loc_41A5A9  +
push 0F003Fh  +
push [ebp+arg_0]  +
call sub_419C64  +
mov [ebp+var_1C] eax +
cmp eax 1 +
jnz loc_41A5A9  +
mov esi offset unk_425D10 +
lea edi [ebp+pIdentifierAuthority] +
movs   +
movs   +
movs   +
mov [ebp+hMem] 0 +
lea eax [ebp+hMem] +
push eax  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
push 221h  +
push 20h  +
push 2  +
lea ecx [ebp+pIdentifierAuthority] +
push ecx  +
call AllocateAndInitializeSid  +
test eax eax +
jz loc_41A596  +
push [ebp+hMem]  +
call GetLengthSid  +
add eax 8 +
add eax eax +
mov [ebp+nAclLength] eax +
push [ebp+nAclLength]  +
push 40h  +
call LocalAlloc  +
mov [ebp+pDacl] eax +
push 2  +
push [ebp+nAclLength]  +
push eax  +
call InitializeAcl  +
push [ebp+hMem]  +
push 0F003Fh  +
push 3  +
push 4  +
push [ebp+pDacl]  +
call AddAccessAllowedAceEx  +
test eax eax +
jz loc_41A584  +
push 0  +
push [ebp+pDacl]  +
push 0  +
push 0  +
push 4  +
push 4  +
mov edx [ebp+var_20] +
push dword ptr [edx+8]  +
call SetSecurityInfo  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
sbb ebx ebx +
neg ebx  +
mov [ebp+var_1C] ebx +
jmp loc_41A58B  +
mov [ebp+var_1C] 0 +
push [ebp+hMem]  +
call LocalFree  +
jmp loc_41A59D  +
mov [ebp+var_1C] 0 +
mov esi [ebp+var_20] +
push 0  +
mov ecx esi +
call sub_419DAC  +
mov eax [ebp+var_1C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
enter 4 0 +
push ebx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_40A220  +
mov [ebp+var_4] eax +
add esp 8 +
cmp [ebp+arg_8] 0 +
jz loc_41A61D  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_0] +
jbe loc_41A5E7  +
cmp byte ptr [eax-1] 5Ch +
jz loc_41A5E7  +
mov ecx [ebp+var_4] +
inc [ebp+var_4]  +
mov byte ptr [ecx] 5Ch +
mov edx [ebp+arg_8] +
cmp byte ptr [edx] 5Ch +
jnz loc_41A5F4  +
lea ebx [edx+1] +
jmp loc_41A5F6  +
mov ebx edx +
push ebx  +
push [ebp+var_4]  +
call sub_40A220  +
mov [ebp+var_4] eax +
add esp 8 +
dec [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_0] +
jb loc_41A61D  +
cmp byte ptr [eax] 5Ch +
jnz loc_41A61D  +
mov ecx [ebp+var_4] +
mov byte ptr [ecx] 0 +
jmp loc_41A605  +
mov eax [ebp+arg_0] +
pop ebx  +
leave   +
retn   +
***
push ebx  +
push esi  +
mov ebx [esp+10h+arg_0] +
mov eax [ebx] +
mov [esp+10h+var_4] eax +
push ebx  +
call sub_41B260  +
add esp 4 +
test eax eax +
jz loc_41A658  +
mov ecx [ebx] +
inc ecx  +
mov [ebx] ecx +
dec ecx  +
mov dl [ecx] +
cmp dl [esp+10h+arg_4] +
jnz loc_41A658  +
pop esi  +
pop ebx  +
add esp 8 +
mov eax 1 +
retn   +
mov esi [esp+10h+var_4] +
xor eax eax +
mov [ebx] esi +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
mov ebx [esp+14h+arg_0] +
mov ecx [esp+14h+arg_4] +
mov eax [ebx] +
mov [esp+14h+var_8] eax +
push ecx  +
call sub_40A110  +
mov [esp+18h+var_4] eax +
add esp 4 +
push ebx  +
call sub_41B260  +
add esp 4 +
test eax eax +
jz loc_41A714  +
mov edx [esp+14h+var_4] +
mov esi [esp+14h+arg_4] +
push edx  +
mov edi [ebx] +
push esi  +
push edi  +
call sub_418970  +
add esp 0Ch +
test eax eax +
jnz loc_41A714  +
mov ecx [esp+14h+var_4] +
mov eax 1 +
add [ebx] ecx +
pop edi  +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
mov eax [esp+14h+var_8] +
mov [ebx] eax +
pop edi  +
pop esi  +
pop ebx  +
add esp 8 +
xor eax eax +
retn   +
***
push edi  +
mov ebx [esp+arg_0] +
mov esi [esp+arg_4] +
push ebx  +
call sub_41B260  +
add esp 4 +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_41A75E  +
push 103h  +
mov edx [ebx] +
movsx edx byte ptr [edx] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_41A77D  +
jmp loc_41A772  +
mov eax [ebx] +
xor edx edx +
mov dl [eax] +
mov edi ds:off_421F98 +
test word ptr [edi+edx*2] 103h +
jnz loc_41A77D  +
mov ecx [ebx] +
cmp byte ptr [ecx] 5Fh +
jnz loc_41A809  +
cmp ds:cchMultiByte 1 +
jle loc_41A79F  +
push 107h  +
mov ecx [ebx] +
movsx edx byte ptr [ecx] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_41A7BA  +
jmp loc_41A7B3  +
mov ecx [ebx] +
xor edx edx +
mov dl [ecx] +
mov ecx ds:off_421F98 +
test word ptr [ecx+edx*2] 107h +
jnz loc_41A7BA  +
mov edx [ebx] +
cmp byte ptr [edx] 5Fh +
jnz loc_41A806  +
mov ecx [ebx] +
inc ecx  +
mov [ebx] ecx +
dec ecx  +
mov dl [ecx] +
mov ecx 1 +
mov [esi] dl +
inc esi  +
cmp ds:cchMultiByte ecx +
jle loc_41A7EB  +
push 107h  +
mov edx [ebx] +
movsx edx byte ptr [edx] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_41A7BA  +
jmp loc_41A7FF  +
mov eax [ebx] +
xor edx edx +
mov dl [eax] +
mov ecx ds:off_421F98 +
test word ptr [ecx+edx*2] 107h +
jnz loc_41A7BA  +
mov edx [ebx] +
cmp byte ptr [edx] 5Fh +
jz loc_41A7BA  +
mov byte ptr [esi] 0 +
cmp esi [esp+arg_4] +
mov eax 1 +
jnz loc_41A816  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push ebp  +
push esi  +
push edi  +
mov ebx [esp+18h+arg_4] +
mov esi [esp+18h+arg_0] +
mov edi [esp+18h+arg_8] +
mov ecx [esi] +
mov dl [ecx] +
neg dl  +
sbb edx edx +
neg edx  +
mov [esp+18h+var_4] edx +
push esi  +
call sub_41B260  +
add esp 4 +
mov ecx [esi] +
mov dl [ecx] +
cmp dl 22h +
jnz loc_41A876  +
mov ecx [esi] +
inc ecx  +
mov [esi] ecx +
cmp byte ptr [ecx] 22h +
jnz loc_41A868  +
mov ecx [esi] +
mov dl 22h +
inc ecx  +
mov [esi] ecx +
cmp [ecx] dl +
jnz loc_41A8BB  +
mov [ebx] dl +
inc ebx  +
jmp loc_41A86D  +
mov dl [ecx] +
mov [ebx] dl +
inc ebx  +
mov ecx [esi] +
cmp byte ptr [ecx] 0 +
jnz loc_41A84E  +
jmp loc_41A8BB  +
test dl dl +
jz loc_41A8BB  +
test edi edi +
jz loc_41A891  +
movsx edx dl +
mov ebp edx +
push edx  +
push edi  +
call sub_40A170  +
add esp 8 +
test eax eax +
jnz loc_41A8BB  +
mov ecx [esi] +
inc ecx  +
mov [esi] ecx +
dec ecx  +
mov dl [ecx] +
mov [ebx] dl +
mov ecx [esi] +
inc ebx  +
mov dl [ecx] +
test dl dl +
jz loc_41A8BB  +
test edi edi +
jz loc_41A891  +
movsx edx dl +
mov ebp edx +
push edx  +
push edi  +
call sub_40A170  +
add esp 8 +
test eax eax +
jz loc_41A891  +
mov byte ptr [ebx] 0 +
mov eax [esp+18h+var_4] +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 8 +
retn   +
***
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov esi [esp+14h+arg_0] +
push esi  +
call sub_41B260  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_41A8FC  +
push 4  +
mov edx [esi] +
movsx edx byte ptr [edx] +
push edx  +
call sub_40B258  +
add esp 8 +
jmp loc_41A911  +
mov eax [esi] +
xor edx edx +
mov dl [eax] +
mov edi ds:off_421F98 +
mov ax [edi+edx*2] +
and eax 4 +
mov [esp+18h+var_4] eax +
add esp 4 +
mov ecx [esi] +
mov dl [ecx] +
test dl dl +
jz loc_41A994  +
cmp ds:cchMultiByte 1 +
jle loc_41A93D  +
push 4  +
movsx edx dl +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41A994  +
jmp loc_41A94C  +
movzx edi byte ptr [ecx] +
mov ecx ds:off_421F98 +
test byte ptr [ecx+edi*2] 4 +
jz loc_41A994  +
mov ecx [esi] +
inc ecx  +
mov [esi] ecx +
dec ecx  +
movsx edx byte ptr [ecx] +
lea ebx [ebx+ebx*4] +
lea ebx [edx+ebx*2-30h] +
mov edx [esi] +
mov cl [edx] +
test cl cl +
jz loc_41A994  +
mov eax 1 +
cmp ds:cchMultiByte eax +
jle loc_41A985  +
push 4  +
movsx ecx cl +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_41A94C  +
jmp loc_41A994  +
movzx edi byte ptr [edx] +
mov edx ds:off_421F98 +
test byte ptr [edx+edi*2] 4 +
jnz loc_41A94C  +
mov esi [esp+14h+arg_4] +
mov ecx [esp+14h+var_4] +
cmp ecx 1 +
sbb eax eax +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
inc eax  +
add esp 8 +
retn   +
***
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov esi [esp+14h+arg_0] +
push esi  +
call sub_41B260  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_41A9DC  +
push 4  +
mov edx [esi] +
movsx edx byte ptr [edx] +
push edx  +
call sub_40B258  +
add esp 8 +
jmp loc_41A9F1  +
mov eax [esi] +
xor edx edx +
mov dl [eax] +
mov edi ds:off_421F98 +
mov ax [edi+edx*2] +
and eax 4 +
mov [esp+18h+var_4] eax +
add esp 4 +
mov ecx [esi] +
mov dl [ecx] +
test dl dl +
jz loc_41AA74  +
cmp ds:cchMultiByte 1 +
jle loc_41AA1D  +
push 4  +
movsx edx dl +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41AA74  +
jmp loc_41AA2C  +
movzx edi byte ptr [ecx] +
mov ecx ds:off_421F98 +
test byte ptr [ecx+edi*2] 4 +
jz loc_41AA74  +
mov ecx [esi] +
inc ecx  +
mov [esi] ecx +
dec ecx  +
movsx edx byte ptr [ecx] +
lea ebx [ebx+ebx*4] +
lea ebx [edx+ebx*2-30h] +
mov edx [esi] +
mov cl [edx] +
test cl cl +
jz loc_41AA74  +
mov eax 1 +
cmp ds:cchMultiByte eax +
jle loc_41AA65  +
push 4  +
movsx ecx cl +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_41AA2C  +
jmp loc_41AA74  +
movzx edi byte ptr [edx] +
mov edx ds:off_421F98 +
test byte ptr [edx+edi*2] 4 +
jnz loc_41AA2C  +
mov esi [esp+14h+arg_4] +
mov ecx [esp+14h+var_4] +
cmp ecx 1 +
sbb eax eax +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
inc eax  +
add esp 8 +
retn   +
***
push edi  +
mov ebx [esp+arg_0] +
mov esi [esp+arg_4] +
push ebx  +
call sub_41B260  +
add esp 4 +
test eax eax +
jz loc_41AADC  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_41AACA  +
push 80h  +
mov edx [ebx] +
movsx edx byte ptr [edx] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_41AAE0  +
jmp loc_41AADC  +
mov eax [ebx] +
xor edx edx +
mov dl [eax] +
mov ecx ds:off_421F98 +
test byte ptr [ecx+edx*2] 80h +
jnz loc_41AAE0  +
xor edi edi +
jmp loc_41AAE5  +
mov edi 1 +
mov dword ptr [esi] 0 +
test edi edi +
jz loc_41ABCE  +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_41AB1D  +
push 80h  +
mov ecx [ebx] +
movsx ecx byte ptr [ecx] +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41ABCE  +
jmp loc_41AB33  +
mov eax [ebx] +
xor ecx ecx +
mov cl [eax] +
mov edx ds:off_421F98 +
test byte ptr [edx+ecx*2] 80h +
jz loc_41ABCE  +
shl dword ptr [esi] 4 +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_41AB59  +
push 4  +
mov edx [ebx] +
movsx edx byte ptr [edx] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41AB77  +
jmp loc_41AB6B  +
mov eax [ebx] +
xor edx edx +
mov dl [eax] +
mov ecx ds:off_421F98 +
test byte ptr [ecx+edx*2] 4 +
jz loc_41AB77  +
mov ecx [ebx] +
movsx edx byte ptr [ecx] +
add edx 0FFFFFFD0h +
add [esi] edx +
jmp loc_41AB8A  +
mov ecx [ebx] +
movsx edx byte ptr [ecx] +
push edx  +
call sub_4151E8  +
add eax 0FFFFFFC9h +
add [esi] eax +
add esp 4 +
inc dword ptr [ebx]  +
mov edx [ebx] +
test edi edi +
jz loc_41ABCE  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_41ABBA  +
push 80h  +
movsx eax byte ptr [edx] +
push eax  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_41AB33  +
jmp loc_41ABCE  +
xor eax eax +
mov al [edx] +
mov edx ds:off_421F98 +
test byte ptr [edx+eax*2] 80h +
jnz loc_41AB33  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
sub esp 7Ch +
mov eax ds:dword_425D48 +
mov edx ds:dword_425D4C +
push ebx  +
push ebp  +
push esi  +
push edi  +
xor ebp ebp +
xor edi edi +
mov [esp+1Ch] edx +
mov [esp+18h] eax +
mov eax ds:dword_425D50 +
mov edx ds:dword_425D54 +
mov [esp+24h] edx +
mov [esp+20h] eax +
mov eax ds:dword_425D48 +
mov edx ds:dword_425D4C +
mov [esp+2Ch] edx +
mov [esp+28h] eax +
mov eax ds:dword_425D48 +
mov edx ds:dword_425D4C +
fild  dword ptr [esp+98h] +
mov esi [esp+90h] +
mov [esp+30h] eax +
mov [esp+34h] edx +
mov [esp+38h] ebp +
fstp  qword ptr [esp+40h] +
xor ebx ebx +
push esi  +
call sub_41B260  +
add esp 4 +
***
mov eax ds:dword_425E28 +
mov edx ds:dword_425E2C +
mov ebx 5 +
mov dword ptr [esp+arg_3C] eax +
mov dword ptr [esp+arg_3C+4] edx +
jmp loc_41B180  +
mov eax ds:dword_425D98 +
mov edx ds:dword_425D9C +
mov ebx 5 +
mov dword ptr [esp+arg_3C] eax +
mov dword ptr [esp+arg_3C+4] edx +
jmp loc_41B180  +
mov eax ds:dword_425E30 +
mov edx ds:dword_425E34 +
mov ebx 5 +
mov dword ptr [esp+arg_3C] eax +
mov dword ptr [esp+arg_3C+4] edx +
jmp loc_41B180  +
mov eax ds:dword_425E38 +
mov edx ds:dword_425E3C +
mov ebx 5 +
mov dword ptr [esp+arg_3C] eax +
mov dword ptr [esp+arg_3C+4] edx +
jmp loc_41B180  +
mov eax ds:dword_425E40 +
mov edx ds:dword_425E44 +
mov ebx 5 +
mov dword ptr [esp+arg_3C] eax +
mov dword ptr [esp+arg_3C+4] edx +
jmp loc_41B180  +
mov eax ds:dword_425E48 +
mov edx ds:dword_425E4C +
mov ebx 5 +
mov dword ptr [esp+arg_3C] eax +
mov dword ptr [esp+arg_3C+4] edx +
jmp loc_41B180  +
mov eax ds:dword_425E18 +
mov edx ds:dword_425E1C +
mov ebx 5 +
mov dword ptr [esp+arg_3C] eax +
mov dword ptr [esp+arg_3C+4] edx +
jmp loc_41B180  +
mov eax ds:dword_425E20 +
mov edx ds:dword_425E24 +
mov ebx 5 +
mov dword ptr [esp+arg_3C] eax +
mov dword ptr [esp+arg_3C+4] edx +
jmp loc_41B180  +
mov eax ds:dword_425E50 +
mov edx ds:dword_425E54 +
mov ebx 5 +
mov dword ptr [esp+arg_3C] eax +
mov dword ptr [esp+arg_3C+4] edx +
jmp loc_41B180  +
mov ebx 5 +
jmp loc_41B180  +
mov ebx 6 +
cmp ebx 5 +
jz loc_41B18E  +
cmp ebx 6 +
jnz loc_41AC4C  +
cmp ebx 6 +
jz loc_41B249  +
mov ecx dword ptr [esp+arg_2C+4] +
add ecx ecx +
or ecx dword ptr [esp+arg_2C] +
jz loc_41B1A7  +
mov edx ebp +
jmp loc_41B1AB  +
mov edx ebp +
neg edx  +
add [esp+arg_34] edx +
fild  [esp+arg_34] +
fmul  [esp+arg_2C] +
sub esp 8 +
fstp  [esp+8+var_8] +
push ds:dword_425E5C  +
push ds:dword_425E58  +
call sub_41BED4  +
add esp 10h +
xor edx edx +
mov dword ptr [esp+arg_C+4] edx +
mov ecx edi +
mov dword ptr [esp+arg_C] edi +
fild  [esp+arg_C] +
fadd  [esp+arg_1C] +
fmul  [esp+arg_24] +
fmulp st(1) st +
fmul  [esp+arg_3C] +
fidiv  [esp+arg_98] +
sub esp 8 +
fstp  [esp+8+var_8] +
call sub_41B970  +
add esp 8 +
fst  [esp+arg_7C] +
fabs   +
fcomp  ds:dbl_425E60 +
fnstsw  ax +
sahf   +
jnb loc_41B244  +
jp loc_41B244  +
fld  [esp+arg_7C] +
sub esp 8 +
fnstcw  word ptr [esp+8+var_8+4] +
fldcw  ds:word_425E68 +
fistp  dword ptr [esp+8+var_8] +
fldcw  word ptr [esp+8+var_8+4] +
pop eax  +
add esp 4 +
mov esi [esp+arg_90] +
mov [esi] eax +
jmp loc_41B249  +
mov ebx 6 +
cmp ebx 6 +
mov eax 1 +
jnz loc_41B255  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 7Ch +
retn   +
***
mov eax [esp+arg_0] +
mov ecx [eax] +
mov dl [ecx] +
test dl dl +
jz loc_41B2DC  +
mov ebx 1 +
cmp ds:cchMultiByte ebx +
jle loc_41B28F  +
push 8  +
movsx edx dl +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41B2DC  +
jmp loc_41B29D  +
movzx esi byte ptr [ecx] +
mov eax ds:off_421F98 +
test byte ptr [eax+esi*2] 8 +
jz loc_41B2DC  +
mov ecx [esp+arg_0] +
inc dword ptr [ecx]  +
mov edx [ecx] +
mov bl [edx] +
test bl bl +
jz loc_41B2DC  +
mov esi 1 +
cmp ds:cchMultiByte esi +
jle loc_41B2CC  +
push 8  +
movsx ebx bl +
push ebx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_41B29D  +
jmp loc_41B2DC  +
xor eax eax +
mov ecx ds:off_421F98 +
mov al [edx] +
test byte ptr [ecx+eax*2] 8 +
jnz loc_41B29D  +
mov edx [esp+arg_0] +
mov ebx [edx] +
mov al [ebx] +
pop esi  +
neg al  +
sbb eax eax +
pop ebx  +
neg eax  +
retn   +
***
mov ebx [esp+8+arg_0] +
mov edx [esp+8+arg_0] +
mov ecx [esp+8+arg_4] +
mov ebx [esp+8+arg_8] +
mov [esp+8+var_4] edx +
cmp byte ptr [edx] 0 +
jz loc_41B34D  +
inc edx  +
cmp byte ptr [edx] 0 +
jnz loc_41B347  +
test ecx ecx +
jz loc_41B371  +
cmp byte ptr [ecx] 0 +
jz loc_41B371  +
test ebx ebx +
lea ebx [ebx-1] +
jz loc_41B371  +
mov eax ecx +
inc ecx  +
mov al [eax] +
mov [edx] al +
inc edx  +
cmp byte ptr [ecx] 0 +
jz loc_41B371  +
test ebx ebx +
lea ebx [ebx-1] +
jnz loc_41B35D  +
mov byte ptr [edx] 0 +
mov eax [esp+8+var_4] +
pop ebx  +
pop ecx  +
retn   +
***
mov esi [esp+arg_0] +
cmp byte ptr [esi] 0 +
jz loc_41B43E  +
push esi  +
call sub_40A110  +
mov ebx eax +
add esp 4 +
lea ebx [esi+eax-1] +
cmp ebx esi +
jbe loc_41B405  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_41B3BF  +
push 8  +
movsx edx byte ptr [ebx] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41B405  +
jmp loc_41B3CF  +
xor edx edx +
mov ecx ds:off_421F98 +
mov dl [ebx] +
test byte ptr [ecx+edx*2] 8 +
jz loc_41B405  +
dec ebx  +
cmp ebx esi +
jbe loc_41B405  +
mov edx 1 +
cmp ds:cchMultiByte edx +
jle loc_41B3F5  +
push 8  +
movsx ecx byte ptr [ebx] +
push ecx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jnz loc_41B3CF  +
jmp loc_41B405  +
xor ecx ecx +
mov edx ds:off_421F98 +
mov cl [ebx] +
test byte ptr [edx+ecx*2] 8 +
jnz loc_41B3CF  +
mov ecx 1 +
cmp ds:cchMultiByte ecx +
jle loc_41B426  +
push 8  +
movsx edx byte ptr [ebx] +
push edx  +
call sub_40B258  +
add esp 8 +
test eax eax +
jz loc_41B43A  +
jmp loc_41B435  +
xor edx edx +
mov eax ds:off_421F98 +
mov dl [ebx] +
test byte ptr [eax+edx*2] 8 +
jz loc_41B43A  +
mov byte ptr [ebx] 0 +
jmp loc_41B43E  +
mov byte ptr [ebx+1] 0 +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push esi  +
push edi  +
mov edi [esp+arg_4] +
mov ebx [esp+arg_0] +
test edi edi +
jz loc_41B494  +
cmp byte ptr [edi] 0 +
jz loc_41B494  +
push edi  +
call sub_40A110  +
mov esi eax +
push edi  +
push ebx  +
call sub_40A0AC  +
add esp 0Ch +
push 3Bh  +
push ebx  +
call sub_40A170  +
add esp 8 +
test eax eax +
jz loc_41B47D  +
mov byte ptr [eax] 0 +
mov cl [edi+esi-1] +
mov dl 5Ch +
cmp cl dl +
jz loc_41B496  +
cmp cl 3Ah +
jz loc_41B496  +
mov ecx esi +
inc esi  +
mov [ecx+ebx] dl +
jmp loc_41B496  +
xor esi esi +
mov edx [esp+arg_8] +
lea ecx [ebx+esi] +
push edx  +
push ecx  +
call sub_40A0AC  +
add esp 8 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
retn   +
***
mov ebx [esp+arg_0] +
mov ebx [esp+arg_0] +
mov ecx [esp+arg_4] +
push ecx  +
push ebx  +
call sub_40A0AC  +
push ebx  +
call sub_41B540  +
mov esi eax +
add esp 0Ch +
cmp byte ptr [esi] 2Eh +
jnz loc_41B520  +
mov edx [esp+arg_8] +
lea ecx [esi+1] +
push edx  +
push ecx  +
call sub_40A0AC  +
add esp 8 +
jmp loc_41B539  +
push offset unk_426038  +
push ebx  +
call sub_40BBE0  +
mov eax [esp+8+arg_8] +
push eax  +
push ebx  +
call sub_40BBE0  +
add esp 10h +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov esi [esp+arg_0] +
push ebx  +
mov ebx ecx +
mov eax [esp+arg_0] +
push eax  +
call sub_409364  +
mov cx [esp+arg_4] +
mov edx [esp+arg_8] +
mov [ebx+14h] cx +
mov dword ptr [ebx] offset off_421B78 +
mov dword ptr [ebx+18h] 0 +
test edx edx +
jnz loc_41B72D  +
mov edx offset sub_40814C +
mov [ebx+1Ch] edx +
mov eax ebx +
pop ebx  +
pop ecx  +
retn 0Ch  +
***
sub esp 14h +
mov eax [esp+arg_0] +
mov edx [ecx+10h] +
mov eax [edx+eax*4] +
retn 4  +
***
mov eax [esp+arg_0] +
retn 4  +
***
mov eax [ecx+1Ch] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_41B8D7  +
mov edx [esp+0Ch+arg_4] +
mov ebx [esp+0Ch+arg_0] +
push edx  +
push ebx  +
call eax  +
add esp 8 +
jmp loc_41B8E9  +
mov esi [esp+0Ch+arg_4] +
mov edi [esp+0Ch+arg_0] +
push esi  +
push edi  +
call sub_40814C  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
retn 8  +
***
enter 4 0 +
push ebx  +
mov [ebp-4] ecx +
cmp byte ptr [ecx+20h] 0FFh +
jnz loc_41B90F  +
mov eax [ecx+28h] +
test eax eax +
jz loc_41B90D  +
push 1  +
mov ecx eax +
mov edx [eax] +
call dword ptr [edx]  +
jmp loc_41B920  +
cmp dword ptr [ecx+24h] 0 +
jz loc_41B920  +
push dword ptr [ecx+28h]  +
call sub_40972C  +
add esp 4 +
mov ebx [ebp-4] +
mov dword ptr [ebx+28h] 0 +
pop ebx  +
leave   +
retn   +
***
push edi  +
xor esi esi +
mov ebx [esp+arg_4] +
mov edi [esp+arg_0] +
test edi edi +
jz loc_41B965  +
cmp [ebx] esi +
jz loc_41B965  +
mov ecx [ebx] +
push ecx  +
push edi  +
call sub_40A1D0  +
add esp 8 +
test eax eax +
jnz loc_41B95B  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
add ebx 4 +
inc esi  +
mov eax [ebx] +
test eax eax +
jnz loc_41B945  +
pop edi  +
pop esi  +
pop ebx  +
mov eax 0FFFFFFFFh +
retn   +
***
sub esp 8 +
push ebx  +
mov ebx [esp+0Ch+arg_0] +
push ebp  +
push esi  +
mov esi [esp+14h+arg_4] +
push edi  +
mov edi [esp+18h+arg_8] +
push ebx  +
call sub_40FE78  +
and dword ptr [ebx+0Ch] 0FFFFFFCFh +
mov ecx [ebx+0Ch] +
mov eax ecx +
add esp 4 +
and eax 83h +
cmp eax 2 +
jz loc_41BA00  +
cmp eax 82h +
jz loc_41BA0E  +
cmp eax 80h +
jz loc_41BA0E  +
cmp eax 1 +
jz loc_41BA25  +
cmp eax 81h +
jz loc_41BA82  +
jmp loc_41BA98  +
push ebx  +
call sub_41063C  +
add esp 4 +
jmp loc_41BA9F  +
push ebx  +
call sub_41063C  +
mov ecx [ebx+8] +
and dword ptr [ebx+0Ch] 0FFFFFFFDh +
mov [ebx] ecx +
add esp 4 +
jmp loc_41BA9F  +
test byte ptr [ebx+0Ch] 4 +
jnz loc_41BA89  +
cmp dword ptr [ebx+8] 0 +
jz loc_41BA89  +
cmp edi 2 +
jge loc_41BA89  +
mov ebp [ebx+4] +
test ebp ebp +
jz loc_41BA89  +
mov edx 1 +
cmp edi edx +
jnz loc_41BA4A  +
mov edx esi +
jmp loc_41BA68  +
push esi  +
mov ecx esi +
push edx  +
push 0  +
push dword ptr [ebx+10h]  +
call sub_40C110  +
add esp 0Ch +
sub eax ebp +
pop ecx  +
sub ecx eax +
mov [esp+18h+var_4] ecx +
mov edx [esp+18h+var_4] +
cmp edx ebp +
jg loc_41BA89  +
mov ecx [ebx] +
sub ecx [ebx+8] +
mov eax edx +
neg eax  +
cmp ecx eax +
jl loc_41BA89  +
sub [ebx+4] edx +
xor eax eax +
add [ebx] edx +
jmp loc_41BAB8  +
and dword ptr [ebx+0Ch] 0FFFFFFFEh +
cmp edi 1 +
jnz loc_41BA91  +
sub esi [ebx+4] +
mov edx [ebx+8] +
mov [ebx] edx +
jmp loc_41BA9F  +
mov eax 0FFFFFFFFh +
jmp loc_41BAB8  +
push edi  +
xor edx edx +
push esi  +
mov [ebx+4] edx +
push dword ptr [ebx+10h]  +
call sub_40C110  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_41BA98  +
xor eax eax +
mov [esp+18h+var_8] eax +
push ebx  +
call sub_40FEF8  +
add esp 4 +
mov eax [esp+18h+var_8] +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
add esp 8 +
retn   +
***
push ebx  +
mov ebx [esp+0Ch+arg_0] +
push esi  +
push ebx  +
call sub_40FE78  +
mov eax [ebx+0Ch] +
mov [esp+14h+var_4] eax +
add esp 4 +
test byte ptr [esp+10h+var_4] 83h +
jnz loc_41BB01  +
push 9  +
mov esi 0FFFFFFFFh +
call sub_410018  +
jmp loc_41BB3E  +
push 1  +
push 0  +
push dword ptr [ebx+10h]  +
call sub_40C110  +
add esp 0Ch +
mov esi eax +
cmp eax 0FFFFFFFFh +
jz loc_41BB3E  +
mov eax [esp+10h+var_4] +
test eax 1 +
jz loc_41BB27  +
sub esi [ebx+4] +
jmp loc_41BB3E  +
mov cl al +
and cl 6 +
cmp cl 2 +
jnz loc_41BB3E  +
cmp dword ptr [ebx+8] 0 +
jz loc_41BB3E  +
mov edx [ebx] +
sub edx [ebx+8] +
add esi edx +
push ebx  +
call sub_40FEF8  +
add esp 4 +
mov eax esi +
pop esi  +
pop ebx  +
add esp 8 +
retn   +
***
mov ebx [esp+lpBuffer] +
push ebp  +
mov ebp [esp+4+arg_4] +
push esi  +
push edi  +
mov edi [esp+0Ch+arg_C] +
imul ebp [esp+0Ch+arg_8] +
push edi  +
call sub_40FE78  +
add esp 4 +
mov ecx [edi+0Ch] +
test ecx 100h +
jz loc_41BBA9  +
mov ecx [esp+0Ch+lpBuffer] +
lea esi [ecx+ebp] +
cmp esi ecx +
jbe loc_41BC64  +
push edi  +
movsx edx byte ptr [ebx] +
push edx  +
call sub_40C1B8  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jz loc_41BC2F  +
inc ebx  +
cmp ebx esi +
jb loc_41BB89  +
jmp loc_41BC64  +
test ecx 4 +
jz loc_41BC12  +
mov ecx [edi+0Ch] +
test ecx 80h +
jz loc_41BBCB  +
and ecx 0FFFFFFFEh +
or ecx 2 +
mov [edi+0Ch] ecx +
mov dl [edi+0Ch] +
and dl 32h +
cmp dl 2 +
jz loc_41BBE3  +
mov [esp+0Ch+arg_8] 0 +
jmp loc_41BC64  +
test ebp ebp +
jz loc_41BC64  +
push ebp  +
push [esp+10h+lpBuffer]  +
push dword ptr [edi+10h]  +
call sub_4146E0  +
add esp 0Ch +
mov esi eax +
cmp esi ebp +
jz loc_41BC64  +
or dword ptr [edi+0Ch] 20h +
mov eax esi +
xor edx edx +
div  [esp+0Ch+arg_4] +
mov [esp+0Ch+arg_8] eax +
jmp loc_41BC64  +
test ebp ebp +
jz loc_41BC64  +
mov esi [edi+4] +
test esi esi +
jnz loc_41BC45  +
push edi  +
movsx edx byte ptr [ebx] +
push edx  +
call sub_4103B0  +
add esp 8 +
cmp eax 0FFFFFFFFh +
jnz loc_41BC41  +
mov eax ebx +
xor edx edx +
sub eax [esp+0Ch+lpBuffer] +
div  [esp+0Ch+arg_4] +
mov [esp+0Ch+arg_8] eax +
jmp loc_41BC64  +
dec ebp  +
inc ebx  +
jmp loc_41BC60  +
cmp esi ebp +
jbe loc_41BC4B  +
mov esi ebp +
push esi  +
push ebx  +
push dword ptr [edi]  +
call sub_40B020  +
sub ebp esi +
add ebx esi +
add [edi] esi +
sub [edi+4] esi +
add esp 0Ch +
test ebp ebp +
jnz loc_41BC16  +
push edi  +
call sub_40FEF8  +
add esp 4 +
mov eax [esp+0Ch+arg_8] +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
pop ecx  +
retn   +
***
mov ebx [esp+8+arg_C] +
push ebp  +
push esi  +
push edi  +
mov edi [esp+14h+lpBuffer] +
push ebx  +
call sub_40FE78  +
add esp 4 +
mov ebp [esp+14h+arg_4] +
imul ebp [esp+14h+arg_8] +
test ebp ebp +
jz loc_41BD59  +
mov ecx [ebx+0Ch] +
test ecx 100h +
jz loc_41BCDF  +
mov ecx [esp+14h+lpBuffer] +
lea esi [ecx+ebp] +
cmp esi ecx +
jbe loc_41BDBB  +
push ebx  +
call sub_40C23A  +
add esp 4 +
cmp eax 0FFFFFFFFh +
mov [esp+14h+var_4] eax +
jz loc_41BD8A  +
mov dl byte ptr [esp+14h+var_4] +
mov [edi] dl +
inc edi  +
cmp edi esi +
jb loc_41BCB9  +
jmp loc_41BDBB  +
test ecx 4 +
jz loc_41BD71  +
mov eax [ebx+0Ch] +
test eax 80h +
jz loc_41BD02  +
and eax 0FFFFFFFDh +
or eax 1 +
mov [ebx+0Ch] eax +
mov dl [ebx+0Ch] +
and dl 31h +
cmp dl 1 +
jz loc_41BD18  +
test dword ptr [ebx+0Ch] 1 +
jnz loc_41BD59  +
jmp loc_41BD52  +
call sub_410298  +
push ebp  +
push [esp+18h+lpBuffer]  +
push dword ptr [ebx+10h]  +
call sub_4144F0  +
add esp 0Ch +
mov esi eax +
test eax eax +
jg loc_41BD63  +
test esi esi +
jnz loc_41BD52  +
or dword ptr [ebx+0Ch] 10h +
mov esi [ebx+0Ch] +
test esi 80h +
jz loc_41BD59  +
and dword ptr [ebx+0Ch] 0FFFFFFDFh +
jmp loc_41BD59  +
or dword ptr [ebx+0Ch] 20h +
mov [esp+14h+arg_8] 0 +
jmp loc_41BDBB  +
mov eax esi +
xor edx edx +
div  [esp+14h+arg_4] +
mov [esp+14h+arg_8] eax +
jmp loc_41BDBB  +
test ebp ebp +
jz loc_41BDBB  +
mov esi [ebx+4] +
test esi esi +
jnz loc_41BD9C  +
push ebx  +
call sub_410540  +
add esp 4 +
cmp eax 0FFFFFFFFh +
jnz loc_41BD75  +
mov eax edi +
xor edx edx +
sub eax [esp+14h+lpBuffer] +
div  [esp+14h+arg_4] +
mov [esp+14h+arg_8] eax +
jmp loc_41BDBB  +
cmp esi ebp +
jbe loc_41BDA2  +
mov esi ebp +
push esi  +
push dword ptr [ebx]  +
push edi  +
call sub_40B020  +
add edi esi +
sub ebp esi +
add [ebx] esi +
sub [ebx+4] esi +
add esp 0Ch +
test ebp ebp +
jnz loc_41BD75  +
push ebx  +
call sub_40FEF8  +
add esp 4 +
mov eax [esp+14h+arg_8] +
pop edi  +
pop esi  +
pop ebp  +
pop ebx  +
pop ecx  +
retn   +
***
mov esi [esp+arg_0] +
mov edi [esp+arg_4] +
mov ecx [esp+arg_8] +
cmp ecx 4 +
jb loc_41BE10  +
mov eax esi +
mov edx edi +
and al 3 +
jz loc_41BE05  +
and dl 3 +
jz loc_41BE05  +
mov al [esi] +
mov dl [edi] +
cmp al dl +
jnz loc_41BE39  +
inc esi  +
inc edi  +
test esi 3 +
lea ecx [ecx-1] +
jnz loc_41BDF0  +
push ecx  +
shr ecx 2 +
jz loc_41BE0F  +
cmps   +
jnz loc_41BE1E  +
pop ecx  +
and ecx 3 +
jz loc_41BE19  +
cmps   +
jnz loc_41BE39  +
xor eax eax +
pop esi  +
pop edi  +
retn   +
pop eax  +
mov edx [edi-4] +
mov eax [esi-4] +
cmp al dl +
jnz loc_41BE39  +
cmp ah dh +
jnz loc_41BE39  +
shr eax 10h +
shr edx 10h +
cmp al dl +
jnz loc_41BE39  +
cmp ah dh +
sbb eax eax +
pop esi  +
or eax 1 +
pop edi  +
retn   +
***
sub esp 14h +
sub esp 0Ch +
fstp  [esp+0Ch+var_C] +
fld  [esp+0Ch+arg_0] +
sub esp 0Ch +
fstp  [esp+18h+var_18] +
call sub_41BEF4  +
add esp 18h +
pop ecx  +
retn   +
***
sub esp 4Ch +
fld  [ebp+arg_C] +
fxam   +
fstsw  ax +
mov dl ah +
fstp  st +
fld  [ebp+arg_0] +
fxam   +
fstsw  ax +
mov al dl +
fstp  st +
and eax 4545h +
cmp eax 404h +
jz loc_41C294  +
cmp eax 444h +
jz loc_41C294  +
cmp eax 4404h +
jz loc_41C294  +
cmp eax 4444h +
jz loc_41C294  +
cmp eax 440h +
jz loc_41C02F  +
cmp eax 4440h +
jz loc_41C02F  +
cmp eax 4040h +
jz loc_41C02F  +
cmp eax 540h +
jz loc_41C02F  +
cmp eax 140h +
jz loc_41C02F  +
cmp eax 405h +
jz loc_41C039  +
cmp eax 4405h +
jz loc_41C039  +
cmp eax 401h +
jz loc_41C0C7  +
cmp eax 4401h +
jz loc_41C0C7  +
cmp eax 4001h +
jz loc_41C0C7  +
cmp eax 501h +
jz loc_41C0C7  +
cmp eax 4004h +
jz loc_41C10B  +
cmp eax 4044h +
jz loc_41C10B  +
cmp eax 4005h +
jz loc_41C18A  +
cmp eax 504h +
jz loc_41C1C6  +
cmp eax 544h +
jz loc_41C1C6  +
cmp eax 505h +
jz loc_41C21B  +
cmp eax 104h +
jz loc_41C235  +
cmp eax 144h +
jz loc_41C235  +
cmp eax 105h +
jz loc_41C235  +
cmp eax 101h +
jz loc_41C272  +
jmp loc_41C290  +
fld  ds:tbyte_42612C +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_0] +
fabs   +
fld  ds:tbyte_42612C +
fucompp   +
fnstsw  ax +
sahf   +
jnz loc_41C079  +
jp loc_41C079  +
push offset unk_426138  +
fld  [ebp+arg_C] +
sub esp 8 +
fstp  [esp+58h+var_58] +
fld  [ebp+arg_0] +
sub esp 8 +
fstp  [esp+60h+var_60] +
push 7FF80000h  +
push 0  +
push 1  +
call sub_41C964  +
add esp 20h +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_C] +
ftst   +
fnstsw  ax +
fstp  st +
sahf   +
jbe loc_41C0A7  +
fld  [ebp+arg_0] +
fabs   +
fld  ds:tbyte_42612C +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jnb loc_41C0A1  +
jp loc_41C0A1  +
fld  ds:dbl_42614C +
jmp loc_41C0A3  +
fldz   +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_0] +
fabs   +
fld  ds:tbyte_42612C +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jbe loc_41C0C1  +
fld  ds:dbl_42614C +
jmp loc_41C0C3  +
fldz   +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_C] +
fstp  [ebp+var_18] +
test dword ptr [ebp+var_18+4] 40000000h +
jz loc_41C0DD  +
fld  [ebp+arg_C] +
mov esp ebp +
pop ebp  +
retn   +
push offset unk_426138  +
fld  [ebp+arg_C] +
sub esp 8 +
fstp  [esp+58h+var_58] +
fld  [ebp+arg_0] +
sub esp 8 +
fstp  [esp+60h+var_60] +
fld  [ebp+arg_C] +
sub esp 8 +
fstp  [esp+68h+var_68] +
push 1  +
call sub_41C964  +
add esp 20h +
mov esp ebp +
pop ebp  +
retn   +
push dword ptr [ebp+arg_C+8]  +
push dword ptr [ebp+arg_C+4]  +
push dword ptr [ebp+arg_C]  +
call sub_41BE44  +
fld  [ebp+arg_C] +
ftst   +
mov [ebp+var_3C] eax +
fnstsw  ax +
fstp  st +
sahf   +
jbe loc_41C139  +
cmp [ebp+var_3C] 0 +
jz loc_41C133  +
fld  [ebp+arg_0] +
jmp loc_41C135  +
fldz   +
mov esp ebp +
pop ebp  +
retn   +
push offset unk_426138  +
fld  [ebp+arg_C] +
sub esp 8 +
fstp  [esp+58h+var_58] +
fld  [ebp+arg_0] +
sub esp 8 +
fstp  [esp+60h+var_60] +
cmp [ebp+var_3C] 0 +
jz loc_41C170  +
fld  [ebp+arg_0] +
sub esp 8 +
fstp  [esp+68h+var_68] +
push 7FF00000h  +
push 0  +
call sub_41C9C8  +
add esp 10h +
jmp loc_41C176  +
fld  ds:dbl_42614C +
sub esp 8 +
fstp  [esp+68h+var_68] +
push 7  +
call sub_41C964  +
add esp 20h +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_C] +
ftst   +
fnstsw  ax +
fstp  st +
sahf   +
jbe loc_41C19A  +
fldz   +
jmp loc_41C1C2  +
push offset unk_426138  +
fld  [ebp+arg_C] +
sub esp 8 +
fstp  [esp+58h+var_58] +
fld  [ebp+arg_0] +
sub esp 8 +
fstp  [esp+60h+var_60] +
push 7FF00000h  +
push 0  +
push 7  +
call sub_41C964  +
add esp 20h +
mov esp ebp +
pop ebp  +
retn   +
push dword ptr [ebp+arg_C+8]  +
push dword ptr [ebp+arg_C+4]  +
push dword ptr [ebp+arg_C]  +
call sub_41BE44  +
fld  [ebp+arg_0] +
ftst   +
mov [ebp+var_3C] eax +
fnstsw  ax +
fstp  st +
sahf   +
ja loc_41C21B  +
fld  [ebp+arg_C] +
ftst   +
fnstsw  ax +
fstp  st +
sahf   +
jbe loc_41C207  +
cmp [ebp+var_3C] 0 +
jz loc_41C1FD  +
fld  ds:dbl_426144 +
jmp loc_41C203  +
fld  ds:dbl_42614C +
mov esp ebp +
pop ebp  +
retn   +
cmp [ebp+var_3C] 0 +
jz loc_41C215  +
fld  ds:dbl_42613C +
jmp loc_41C217  +
fldz   +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_C] +
ftst   +
fnstsw  ax +
fstp  st +
sahf   +
jbe loc_41C22F  +
fld  ds:dbl_42614C +
jmp loc_41C231  +
fldz   +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_0] +
fstp  [ebp+var_C] +
test dword ptr [ebp+var_C+4] 40000000h +
jnz loc_41C2A6  +
push offset unk_426138  +
fld  [ebp+arg_C] +
sub esp 8 +
fstp  [esp+58h+var_58] +
fld  [ebp+arg_0] +
sub esp 8 +
fstp  [esp+60h+var_60] +
fld  [ebp+arg_0] +
sub esp 8 +
fstp  [esp+68h+var_68] +
push 1  +
call sub_41C964  +
add esp 20h +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_C] +
sub esp 8 +
fstp  [esp+54h+var_58+4] +
fld  [ebp+arg_0] +
sub esp 8 +
fstp  [esp+5Ch+var_60+4] +
call sub_41C3D4  +
add esp 10h +
mov esp ebp +
pop ebp  +
retn   +
xor eax eax +
mov [eax] al +
fld  [ebp+arg_C] +
fld  ds:tbyte_42612C +
fucompp   +
fnstsw  ax +
sahf   +
jnz loc_41C2AD  +
jp loc_41C2AD  +
fld  [ebp+arg_0] +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_0] +
ftst   +
fnstsw  ax +
fstp  st +
sahf   +
mov [ebp+var_40] 0 +
jnb loc_41C35C  +
jp loc_41C35C  +
fld  [ebp+arg_C] +
fld  ds:tbyte_426154 +
fcompp st(1) st +
fnstsw  ax +
sahf   +
ja loc_41C358  +
jp loc_41C358  +
mov eax 0FFFFFFFFh +
mov edx 7FFFFFFFh +
mov dword ptr [ebp+var_48] eax +
mov dword ptr [ebp+var_48+4] edx +
fild  [ebp+var_48] +
fld  [ebp+arg_C] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
ja loc_41C358  +
jp loc_41C358  +
fld  [ebp+arg_C] +
sub esp 0Ch +
fnstcw  [esp+58h+var_50] +
fldcw  ds:word_426160 +
fistp  [esp+58h+var_58] +
fldcw  [esp+58h+var_50] +
pop eax  +
pop edx  +
add esp 4 +
mov dword ptr [ebp+var_48] eax +
mov dword ptr [ebp+var_48+4] edx +
fild  [ebp+var_48] +
fld  [ebp+arg_C] +
fucompp   +
fnstsw  ax +
sahf   +
jnz loc_41C37D  +
jp loc_41C37D  +
xor byte ptr [ebp+arg_0+9] 80h +
fld  [ebp+arg_C] +
sub esp 0Ch +
fnstcw  [esp+58h+var_50] +
fldcw  ds:word_426160 +
fistp  [esp+58h+var_58] +
fldcw  [esp+58h+var_50] +
pop eax  +
and eax 1 +
pop edx  +
add esp 4 +
xor edx edx +
mov [ebp+var_40] eax +
jmp loc_41C35C  +
xor byte ptr [ebp+arg_0+9] 80h +
push [ebp+var_40]  +
push dword ptr [ebp+arg_C+8]  +
push dword ptr [ebp+arg_C+4]  +
push dword ptr [ebp+arg_C]  +
push dword ptr [ebp+arg_0+8]  +
push dword ptr [ebp+arg_0+4]  +
push dword ptr [ebp+arg_0]  +
call sub_41CD25  +
add esp 1Ch +
mov esp ebp +
pop ebp  +
retn   +
fld  [ebp+arg_0] +
lea eax [ebp+var_38] +
fld  [ebp+arg_C] +
fxch  st(1) +
fstp  [ebp+var_30] +
mov [ebp+var_38] 1 +
mov dword ptr [ebp+var_20] 0 +
mov dword ptr [ebp+var_20+4] 7FF80000h +
mov [ebp+var_34] offset unk_426138 +
fstp  [ebp+var_28] +
push eax  +
call sub_41CDB8  +
add esp 4 +
fld  [ebp+var_20] +
mov esp ebp +
pop ebp  +
retn   +
***
sub esp 0Ch +
fstp  [esp+0Ch+var_C] +
call sub_41CA2C  +
add esp 0Ch +
pop ecx  +
retn   +
***
push esi  +
or word ptr [esp+arg_0+6] ax +
mov ecx [esp+10h] +
and ecx 7FFFFh +
or word ptr [esp+arg_8+6] ax +
mov edx [esp+18h] +
and edx 7FFFFh +
cmp ecx edx +
jz loc_41C416  +
mov esi [esp+10h] +
mov eax [esp+18h] +
and esi 7FFFFh +
and eax 7FFFFh +
cmp esi eax +
jnb loc_41C420  +
jmp loc_41C427  +
mov ebx dword ptr [esp+arg_0] +
cmp ebx dword ptr [esp+arg_8] +
jb loc_41C427  +
fld  [esp+arg_0] +
pop esi  +
pop ebx  +
retn   +
fld  [esp+arg_8] +
pop esi  +
pop ebx  +
retn   +
***
or [esp+arg_6] 8 +
fld  qword ptr [esp+4] +
retn   +
***
mov [esp+4+var_4] eax +
push 0C00h  +
call sub_418748  +
fld  [esp+8+arg_0] +
frndint   +
fstp  [esp+8+arg_0] +
push [esp+8+var_4]  +
call sub_418748  +
add esp 8 +
fld  [esp+4+arg_0] +
pop ecx  +
retn   +
***
lea eax [esp+8+var_4] +
push eax  +
fld  [esp+0Ch+arg_C] +
sub esp 8 +
fstp  [esp+14h+var_14] +
fld  [esp+14h+arg_0] +
sub esp 8 +
fstp  [esp+1Ch+var_1C] +
call sub_41C6F0  +
add esp 1Ch +
retn   +
***
fld  [esp+arg_30] +
fld  [esp+arg_34] +
fld  [esp+arg_34] +
fld  [esp+arg_34] +
mov [esp+4+arg_24] eax +
fld  [esp+arg_30] +
fld  [esp+arg_30] +
fld  ds:flt_426184 +
pop edi  +
pop esi  +
pop ebx  +
add esp 24h +
retn   +
***
sub esp 1Ch +
mov eax [esp+1Ch+arg_10] +
push ebx  +
push esi  +
push edi  +
push dword ptr [esp+28h+arg_8+4]  +
mov dword ptr [eax] 0 +
push dword ptr [esp+2Ch+arg_8]  +
call sub_41D108  +
add esp 8 +
mov ebx eax +
cmp eax 4 +
jnz loc_41C71C  +
mov ebx 3 +
mov [esp+28h+var_4] ebx +
push dword ptr [esp+28h+arg_0+4]  +
push dword ptr [esp+2Ch+arg_0]  +
call sub_41D108  +
add esp 8 +
mov ecx [esp+28h+var_4] +
lea edx [ecx+ecx*2] +
mov ebx eax +
add edx edx +
add ebx edx +
cmp ebx 23h +
ja loc_41C918  +
jmp ds:off_426224[ebx*4]  +
push 1  +
call sub_409A2C  +
fld  [esp+28h+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn   +
push 1  +
call sub_409A2C  +
push dword ptr [esp+28h+arg_8+4]  +
push dword ptr [esp+2Ch+arg_8]  +
call sub_41C430  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn   +
push 1  +
call sub_409A2C  +
fld  [esp+28h+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn   +
fld  [esp+28h+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn   +
push 3Fh  +
call sub_4186D4  +
mov [esp+2Ch+var_8] eax +
push 3Fh  +
call sub_4186F8  +
call sub_418728  +
mov ebx eax +
push 0  +
call sub_418748  +
fld  [esp+34h+arg_0] +
fdiv  [esp+34h+arg_8] +
frndint   +
fstp  [esp+34h+var_18] +
add esp 0Ch +
push 8  +
call sub_4186D4  +
add esp 4 +
test eax eax +
jnz loc_41C89A  +
push 3Fh  +
call sub_4186F8  +
fld  [esp+2Ch+var_18] +
sub esp 8 +
fnstcw  [esp+34h+var_30] +
fldcw  ds:word_426178 +
fistp  [esp+34h+var_34] +
fldcw  [esp+34h+var_30] +
pop esi  +
add esp 8 +
push 1  +
call sub_4186D4  +
add esp 4 +
test eax eax +
jnz loc_41C814  +
mov eax [esp+28h+arg_10] +
mov [eax] esi +
push 3Fh  +
call sub_4186F8  +
fld  [esp+2Ch+arg_0] +
fld  [esp+2Ch+var_18] +
fmul  [esp+2Ch+arg_8] +
fsubp st(1) st +
fstp  [esp+2Ch+var_10] +
add esp 4 +
push 8  +
call sub_4186D4  +
add esp 4 +
test eax eax +
jz loc_41C88E  +
push dword ptr [esp+28h+arg_0+4]  +
push dword ptr [esp+2Ch+arg_0]  +
push dword ptr [esp+30h+arg_8+4]  +
push dword ptr [esp+34h+arg_8]  +
call sub_41C9C8  +
fsubr  [esp+38h+arg_0] +
fstp  [esp+38h+arg_0] +
push dword ptr [esp+38h+var_18+4]  +
push dword ptr [esp+3Ch+var_18]  +
push 3FF00000h  +
push 0  +
call sub_41C9C8  +
fld  [esp+48h+arg_0] +
fxch  st(1) +
fsubr  [esp+48h+var_18] +
fstp  [esp+48h+var_18] +
fld  [esp+48h+var_18] +
fmul  [esp+48h+arg_8] +
fsubp st(1) st +
fstp  [esp+48h+var_10] +
add esp 20h +
mov edi dword ptr [esp+28h+var_10+4] +
add edi edi +
or edi dword ptr [esp+28h+var_10] +
jnz loc_41C8B7  +
fld  [esp+28h+arg_0] +
ftst   +
fnstsw  ax +
fstp  st +
sahf   +
jnb loc_41C8B1  +
jp loc_41C8B1  +
fld  ds:dbl_42617C +
jmp loc_41C8B3  +
fldz   +
fstp  [esp+28h+var_10] +
push 3Fh  +
call sub_4186F8  +
push [esp+2Ch+var_8]  +
call sub_409A2C  +
push ebx  +
call sub_418748  +
add esp 8 +
fld  [esp+28h+var_10] +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn   +
push 1  +
call sub_409A2C  +
push dword ptr [esp+28h+arg_0+4]  +
push dword ptr [esp+2Ch+arg_0]  +
call sub_41C430  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn   +
fld  [esp+28h+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn   +
push 1  +
call sub_409A2C  +
fld  ds:dbl_42621C +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn   +
pop edi  +
pop esi  +
pop ebx  +
add esp 1Ch +
retn   +
***
sub esp 20h +
mov eax [esp+20h+arg_0] +
mov ecx [esp+20h+arg_14] +
push ebx  +
fld  [esp+24h+arg_4] +
fld  [esp+24h+arg_C] +
fxch  st(1) +
mov [esp+24h+var_20] eax +
lea ebx [esp+24h+var_20] +
fstp  [esp+24h+var_8] +
fstp  [esp+24h+var_18] +
mov edx ds:off_426310[ecx*4] +
mov [esp+24h+var_1C] edx +
push ebx  +
call sub_41CDB8  +
add esp 4 +
fld  [esp+24h+var_8] +
pop ebx  +
add esp 20h +
retn   +
***
sub esp 24h +
push dword ptr [esp+24h+arg_4+4]  +
push dword ptr [esp+28h+arg_4]  +
call sub_41D108  +
add esp 8 +
cmp eax 1 +
ja loc_41C984  +
or dword ptr [esp+24h+arg_4+6] 8 +
fld  [esp+24h+arg_4] +
mov eax [esp+24h+arg_0] +
fld  [esp+24h+arg_C] +
fxch  st(1) +
mov [esp+24h+var_20] eax +
fxch  st(1) +
fld  [esp+24h+arg_14] +
fxch  st(2) +
mov ecx [esp+24h+arg_1C] +
fstp  [esp+24h+var_8] +
lea edx [esp+24h+var_20] +
fstp  [esp+24h+var_18] +
fstp  [esp+24h+var_10] +
mov [esp+24h+var_1C] ecx +
push edx  +
call sub_41CDB8  +
add esp 4 +
fld  [esp+24h+var_8] +
add esp 24h +
retn   +
***
and [esp+arg_6] 0FFFF7FFFh +
mov ax [esp+arg_E] +
and ax 8000h +
or word ptr [esp+arg_6] ax +
fld  qword ptr [esp+4] +
retn   +
***
fld  tbyte ptr [esp+4] +
fsqrt   +
retn   +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+10h] +
mov edx ecx +
shl edx 3 +
add edx [ebp+14h] +
fld  qword ptr [edx] +
sub esp 8 +
jecxz loc_41CA24  +
fld  qword ptr [ebp+8] +
fxch  st(1) +
xchg ebx ebx +
nop   +
fmul st st(1) +
sub edx 8 +
fadd  qword ptr [edx] +
loop loc_41CA14  +
fxch  st(1) +
fstp  st +
xchg ebx ebx +
nop   +
***
mov esp ebp +
pop ebp  +
retn   +
***
mov ah 4 +
jmp loc_41CA32  +
mov ah 8 +
push ebp  +
mov ebp esp +
fld  [ebp+arg_4] +
sub esp 8 +
fstcw  [ebp+var_2] +
wait   +
mov al byte ptr [ebp+var_2+1] +
mov dl al +
and al 0F3h +
or al ah +
mov byte ptr [ebp+var_2+1] al +
fldcw  [ebp+var_2] +
frndint   +
mov byte ptr [ebp+var_2+1] dl +
wait   +
fldcw  [ebp+var_2] +
jmp loc_41CA24  +
***
push ebp  +
mov ebp esp +
sub esp 8 +
fld  tbyte ptr [ebp+14h] +
fld  tbyte ptr [ebp+8] +
cmp ds:dword_4289E8 1 +
jz loc_41CA76  +
call sub_41D434  +
jmp loc_41CA78  +
fprem   +
fstsw  word ptr [ebp-2] +
wait   +
mov ah [ebp-1] +
sahf   +
jp loc_41CA66  +
fstp  st(1) +
jmp loc_41CA24  +
***
push ebp  +
mov ebp esp +
fld  tbyte ptr [ebp+8] +
sub esp 8 +
ftst   +
fstsw  word ptr [ebp-2] +
fld  tbyte ptr [ebp+14h] +
ftst   +
fstsw  word ptr [ebp-4] +
cmp ds:dword_4289E8 1 +
jz loc_41CAB4  +
mov eax 0Dh +
call sub_414A98  +
jmp loc_41CAB6  +
fdivp st(1) st +
fabs   +
fld1   +
fcom  st(1) +
fstsw  word ptr [ebp-6] +
wait   +
mov ah [ebp-5] +
sahf   +
ja loc_41CAFB  +
jb loc_41CADB  +
fcompp st(1) st +
fld  ds:tbyte_426360 +
jmp loc_41CB0D  +
fxch  st(1) +
cmp ds:dword_4289E8 1 +
jz loc_41CAED  +
call sub_41D850  +
jmp loc_41CAEF  +
fpatan   +
fld  ds:tbyte_426360 +
fadd st st +
fsubrp st(1) st +
jmp loc_41CB0D  +
cmp ds:dword_4289E8 1 +
jz loc_41CB0B  +
call sub_41D850  +
jmp loc_41CB0D  +
fpatan   +
mov ah [ebp-3] +
sahf   +
ja loc_41CB1B  +
fldpi   +
fsubrp st(1) st +
mov ah [ebp-1] +
sahf   +
jnb loc_41CB27  +
fchs   +
jmp loc_41CA24  +
***
push ebp  +
mov ebp esp +
fld  tbyte ptr [ebp+0Ch] +
sub esp 8 +
ftst   +
fstsw  word ptr [ebp-2] +
fld  st +
fmul st st +
fld1   +
fsubrp st(1) st +
ftst   +
fstsw  word ptr [ebp-6] +
wait   +
mov ah [ebp-5] +
sahf   +
jnb loc_41CB5E  +
fcompp st(1) st +
mov esp ebp +
pop ebp  +
jmp loc_41D160  +
***
fsqrt   +
cmp word ptr [ebp+8] 0 +
jz loc_41CB6F  +
ftst   +
fstsw  word ptr [ebp-2] +
fxch  st(1) +
jmp loc_41CA99  +
***
fstp  st +
fstp  st +
sub esp 10h +
fld  tbyte ptr [ebp+8] +
mov [ebp-4] edx +
fstp  qword ptr [ebp-0Ch] +
fldz   +
fstp  qword ptr [ebp-14h] +
mov dword ptr [ebp-18h] 5 +
wait   +
call sub_41C920  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 8 +
mov edx [ebp+14h] +
cmp word ptr ds:dword_4232EC 3 +
jb loc_41CC10  +
fld  tbyte ptr [ebp+8] +
fxam   +
fstsw  ax +
sahf   +
jb loc_41CB74  +
test dl dl +
jnz loc_41CBC4  +
fsin   +
jmp loc_41CBE1  +
cmp dl 2 +
jnz loc_41CBDF  +
cmp ds:dword_4289E8 1 +
jz loc_41CBD9  +
call sub_41DA60  +
jmp loc_41CBDB  +
fptan   +
fstp  st +
jmp loc_41CBE1  +
fcos   +
fstsw  ax +
sahf   +
jp loc_41CBF0  +
jmp loc_41CA24  +
***
fldpi   +
fxch  st(1) +
cmp ds:dword_4289E8 1 +
jz loc_41CC04  +
call sub_41D77C  +
jmp loc_41CC06  +
fprem1   +
fstsw  ax +
sahf   +
jp loc_41CBF4  +
fstp  st(1) +
jmp loc_41CBB8  +
***
fld  ds:tbyte_426360 +
fld  tbyte ptr [ebp+8] +
fxam   +
fstsw  word ptr [ebp-6] +
wait   +
mov al [ebp-5] +
mov ah al +
sahf   +
jb loc_41CC4C  +
jp loc_41CC51  +
jnz loc_41CC51  +
fstp  st(1) +
cmp dl 1 +
jnz loc_41CCC8  +
fstp  st +
fld1   +
jmp loc_41CCC8  +
jmp loc_41CB74  +
***
fabs   +
fprem   +
fstsw  word ptr [ebp-4] +
wait   +
mov ah [ebp-3] +
sahf   +
jp loc_41CC4C  +
cmp dl 2 +
jz loc_41CCCD  +
test dl dl +
jz loc_41CC7E  +
and al 0FDh +
xor ah 40h +
test ah 40h +
jnz loc_41CC7E  +
xor ah 1 +
test ah 2 +
jz loc_41CC8B  +
fsubp st(1) st +
jmp loc_41CCA1  +
ftst   +
fstsw  word ptr [ebp-2] +
fstp  st(1) +
test byte ptr [ebp-1] 40h +
jz loc_41CCA1  +
fld1   +
jmp loc_41CCA3  +
fptan   +
test ah 42h +
jp loc_41CCAE  +
fxch  st(1) +
fmul st st +
fld  st(1) +
fmul st st +
faddp st(1) st +
fsqrt   +
fdivp st(1) st +
and ax 102h +
or al ah +
jp loc_41CCC8  +
fchs   +
jmp loc_41CA24  +
***
test ah 2 +
jz loc_41CCDA  +
fsubp st(1) st +
jmp loc_41CCF3  +
fstp  st(1) +
ftst   +
fstsw  word ptr [ebp-2] +
wait   +
test byte ptr [ebp-1] 40h +
jz loc_41CCF3  +
fld1   +
fxch  st(1) +
jmp loc_41CCF5  +
fptan   +
and ah 42h +
jp loc_41CD02  +
fdivrp st(1) st +
jmp loc_41CD04  +
fdivp st(1) st +
and ax 4002h +
jmp loc_41CCBE  +
***
fldln2   +
jmp loc_41CD10  +
fldlg2   +
fld  tbyte ptr [esp+4] +
fyl2x   +
retn   +
***
fld  [ebp+arg_C] +
mov ecx [eax] +
push ebx  +
push ds:flt_426378[ecx*4]  +
call sub_409A2C  +
mov edx [esp+4+arg_0] +
mov ebx [edx] +
push ds:dword_426394[ebx*4]  +
call sub_410018  +
xor eax eax +
pop ebx  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+8] +
call sub_40B9BF  +
cmp esi 0 +
jz loc_41CE21  +
cmp esi 3 +
jnz loc_41CE14  +
or eax 400000h +
push 1  +
call sub_409A2C  +
push eax  +
fld  dword ptr [esp] +
wait   +
add esp 4 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
xor ebx ebx +
mov esi eax +
and esi 7F800000h +
cmp esi 4B800000h +
jnb loc_41CE14  +
mov edi eax +
and edi 80000000h +
cmp esi 3F000000h +
jb loc_41CE8F  +
mov ecx eax +
and ecx 7FFFFFFFh +
shr ecx 17h +
sub cx 97h +
not cx  +
and eax 7FFFFFh +
or eax 800000h +
cmp cx 8 +
jl loc_41CE7B  +
rcr bx 1 +
adc bl 0 +
or bh al +
shr eax 8 +
sub cx 8 +
jnz loc_41CE64  +
test cx cx +
jz loc_41CE93  +
shr eax 1 +
rcr bh 1 +
adc bl 0 +
loop loc_41CE84  +
jmp loc_41CE93  +
xor eax eax +
mov bl 1 +
test bx bx +
jz loc_41CEFC  +
push 20h  +
call sub_409A2C  +
push eax  +
call sub_409A40  +
cmp eax 0 +
jz loc_41CED9  +
cmp eax 0C00h +
jz loc_41CEFB  +
cmp eax 800h +
pop eax  +
jz loc_41CECB  +
test edi 80000000h +
jns loc_41CEFC  +
jmp loc_41CEF6  +
test edi 80000000h +
js loc_41CEFC  +
jmp loc_41CEF6  +
pop eax  +
test bh 80h +
jz loc_41CEFC  +
test bx 7FFFh +
jnz loc_41CEF6  +
test al 1 +
jz loc_41CEFC  +
add eax 1 +
jmp loc_41CEFC  +
pop eax  +
mov esi 9Eh +
call sub_40B7E3  +
jmp loc_41CE14  +
***
jmp loc_41CFD2  +
***
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov esi 3 +
mov edi eax +
and edi 7F800000h +
jz loc_41D0F2  +
cmp edi 7F800000h +
jz loc_41D0D3  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
mov esi 1 +
test eax 400000h +
jnz loc_41D0CD  +
mov esi 2 +
test eax 7FFFFFh +
jz loc_41D0CD  +
mov esi 0 +
jmp loc_41D0CD  +
mov esi 5 +
and eax 7FFFFFh +
jz loc_41D0CD  +
mov esi 4 +
jmp loc_41D0CD  +
***
mov edx [esp+arg_4] +
mov eax edx +
and eax 7FF00000h +
jz loc_41D146  +
cmp eax 7FF00000h +
jz loc_41D122  +
mov eax 3 +
retn   +
mov eax 1 +
test edx 80000h +
jnz locret_41D15C  +
mov eax 2 +
and edx 0FFFFFh +
or edx [esp+arg_0] +
jz locret_41D15C  +
mov eax 0 +
retn   +
mov eax 5 +
and edx 0FFFFFh +
or edx [esp+arg_0] +
jz locret_41D15C  +
mov eax 4 +
retn   +
***
sub esp 20h +
fld  qword ptr [esp+28h] +
cmp dword ptr [esp+24h] 0 +
fstp  qword ptr [esp+8] +
jz loc_41D179  +
mov eax offset aAcos +
jmp loc_41D17E  +
mov eax offset aAsin +
lea ecx [esp] +
mov [esp+4] eax +
mov dword ptr [esp] 1 +
mov dword ptr [esp+18h] 0 +
mov dword ptr [esp+1Ch] 7FF80000h +
push ecx  +
call sub_41CDB8  +
add esp 4 +
fld  qword ptr [esp+18h] +
add esp 20h +
retn   +
***
push ecx  +
mov eax [esp+arg_6] +
xor eax 700h +
test eax 700h +
jnz loc_41D35F  +
shr eax 0Bh +
and eax 0Fh +
cmp ds:byte_4263C0[eax] 0 +
jz loc_41D35F  +
mov eax [esp+arg_6] +
and eax 7FFF0000h +
cmp eax 7FFF0000h +
jz loc_41D35F  +
mov eax [esp+arg_1E] +
and eax 7FFF0000h +
jz loc_41D35F  +
cmp eax 7FFF0000h +
jz loc_41D35F  +
mov eax [esp+2Ch] +
add eax eax +
jnz loc_41D35F  +
mov eax [esp+14h] +
add eax eax +
jnz loc_41D35F  +
mov eax [esp+arg_6+2] +
and eax 7FFFh +
add eax 3Fh +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
sub ebx eax +
ja loc_41D29C  +
mov eax [esp+arg_6+2] +
and eax 7FFFh +
add eax 0Ah +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
sub ebx eax +
js loc_41D35F  +
fld  tbyte ptr [esp+28h] +
mov eax [esp+arg_6+2] +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
mov ecx ebx +
sub ebx eax +
and ebx 7 +
or ebx 4 +
sub ecx ebx +
mov ebx eax +
and ebx 8000h +
or ecx ebx +
mov [esp+arg_6+2] ecx +
fld  tbyte ptr [esp+10h] +
mov [esp+arg_6+2] eax +
fxch  st(1) +
fprem   +
fstp  tbyte ptr [esp+28h] +
fstp  st +
jmp loc_41D23E  +
test edx 2 +
jnz loc_41D2B0  +
fld  tbyte ptr [esp+10h] +
fstp  [esp+arg_C] +
fnstcw  word ptr [esp+arg_24] +
mov eax [esp+arg_24] +
or eax 33Fh +
mov [esp+arg_28] eax +
wait   +
fldcw  word ptr [esp+arg_28] +
mov eax [esp+arg_6+2] +
and eax 7FFFh +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
sub ebx eax +
and ebx 3Fh +
or ebx 20h +
add ebx 1 +
mov ecx ebx +
mov eax [esp+arg_6+2] +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
and eax 8000h +
or ebx eax +
mov [esp+arg_6+2] ebx +
fld  tbyte ptr [esp+10h] +
fabs   +
fld  tbyte ptr [esp+28h] +
fabs   +
fcom  st(1) +
fnstsw  ax +
and eax 100h +
jnz loc_41D31C  +
fsub st st(1) +
fxch  st(1) +
fmul  ds:dbl_4263F0 +
fxch  st(1) +
sub ecx 1 +
jnz loc_41D30B  +
mov ebx [esp+arg_1E+2] +
fstp  tbyte ptr [esp+28h] +
fstp  st +
fld  [esp+arg_C] +
fld  ds:tbyte_4263F8 +
fprem   +
fstp  st +
fld  tbyte ptr [esp+28h] +
wait   +
fldcw  word ptr [esp+arg_24] +
and ebx 8000h +
jz loc_41D369  +
fchs   +
jmp loc_41D369  +
fld  tbyte ptr [esp+10h] +
fld  tbyte ptr [esp+28h] +
fprem   +
test edx 3 +
jz loc_41D3D2  +
fnstsw  [esp+arg_2C] +
test edx 1 +
jz loc_41D3A6  +
fnstcw  word ptr [esp+arg_24] +
mov eax [esp+arg_24] +
or eax 300h +
mov [esp+arg_28] eax +
wait   +
fldcw  word ptr [esp+arg_28] +
fmul  ds:dbl_4263E0 +
wait   +
fldcw  word ptr [esp+arg_24] +
mov eax dword ptr [esp+arg_2C] +
fxch  st(1) +
fstp  st +
fld  [esp+arg_C] +
fxch  st(1) +
and eax 4300h +
sub esp 1Ch +
fnstenv  [esp+1Ch+var_1C] +
and [esp+1Ch+var_18] 0BCFFh +
or [esp+1Ch+var_18] eax +
wait   +
fldenv  [esp+1Ch+var_1C] +
add esp 1Ch +
pop ecx  +
pop ebx  +
pop eax  +
retn   +
***
push edx  +
sub esp 30h +
fld  dword ptr [esp+38h] +
fstp  tbyte ptr [esp+18h] +
fld  dword ptr [esp+3Ch] +
fstp  tbyte ptr [esp] +
mov edx 0 +
call sub_41D1B0  +
fxch  st(1) +
fstp  st +
add esp 30h +
pop edx  +
retn   +
***
push edx  +
sub esp 30h +
fld  qword ptr [esp+38h] +
fstp  tbyte ptr [esp+18h] +
fld  qword ptr [esp+40h] +
fstp  tbyte ptr [esp] +
mov edx 0 +
call sub_41D1B0  +
fxch  st(1) +
fstp  st +
add esp 30h +
pop edx  +
retn   +
***
fstp  [esp+30h+var_18] +
push ecx  +
mov eax [esp+arg_6] +
xor eax 700h +
test eax 700h +
jnz loc_41D6A7  +
shr eax 0Bh +
and eax 0Fh +
cmp ds:byte_4263C0[eax] 0 +
jz loc_41D6A7  +
mov eax [esp+arg_6] +
and eax 7FFF0000h +
cmp eax 7FFF0000h +
jz loc_41D6A7  +
mov eax [esp+arg_1E] +
and eax 7FFF0000h +
jz loc_41D6A7  +
cmp eax 7FFF0000h +
jz loc_41D6A7  +
mov eax [esp+2Ch] +
add eax eax +
jnz loc_41D6A7  +
mov eax [esp+14h] +
add eax eax +
jnz loc_41D6A7  +
mov eax [esp+arg_6+2] +
and eax 7FFFh +
add eax 3Fh +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
sub ebx eax +
ja loc_41D5E4  +
mov eax [esp+arg_6+2] +
and eax 7FFFh +
add eax 0Ah +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
sub ebx eax +
js loc_41D6A7  +
fld  tbyte ptr [esp+28h] +
mov eax [esp+arg_6+2] +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
mov ecx ebx +
sub ebx eax +
and ebx 7 +
or ebx 4 +
sub ecx ebx +
mov ebx eax +
and ebx 8000h +
or ecx ebx +
mov [esp+arg_6+2] ecx +
fld  tbyte ptr [esp+10h] +
mov [esp+arg_6+2] eax +
fxch  st(1) +
fprem   +
fstp  tbyte ptr [esp+28h] +
fstp  st +
jmp loc_41D586  +
test ebx 2 +
jnz loc_41D5F8  +
fld  tbyte ptr [esp+10h] +
fstp  [esp+arg_C] +
fnstcw  word ptr [esp+arg_24] +
mov eax [esp+arg_24] +
or eax 33Fh +
mov [esp+arg_28] eax +
wait   +
fldcw  word ptr [esp+arg_28] +
mov eax [esp+arg_6+2] +
and eax 7FFFh +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
sub ebx eax +
and ebx 3Fh +
or ebx 20h +
add ebx 1 +
mov ecx ebx +
mov eax [esp+arg_6+2] +
mov ebx [esp+arg_1E+2] +
and ebx 7FFFh +
and eax 8000h +
or ebx eax +
mov [esp+arg_6+2] ebx +
fld  tbyte ptr [esp+10h] +
fabs   +
fld  tbyte ptr [esp+28h] +
fabs   +
fcom  st(1) +
fnstsw  ax +
and eax 100h +
jnz loc_41D664  +
fsub st st(1) +
fxch  st(1) +
fmul  ds:dbl_4263F0 +
fxch  st(1) +
sub ecx 1 +
jnz loc_41D653  +
mov ebx [esp+arg_1E+2] +
fstp  tbyte ptr [esp+28h] +
fstp  st +
fld  [esp+arg_C] +
fld  ds:tbyte_4263F8 +
fprem1   +
fstp  st +
fld  tbyte ptr [esp+28h] +
wait   +
fldcw  word ptr [esp+arg_24] +
and ebx 8000h +
jz loc_41D6B1  +
fchs   +
jmp loc_41D6B1  +
fld  tbyte ptr [esp+10h] +
fld  tbyte ptr [esp+28h] +
fprem1   +
test edx 3 +
jz loc_41D71A  +
fnstsw  [esp+arg_2C] +
test edx 1 +
jz loc_41D6EE  +
fnstcw  word ptr [esp+arg_24] +
mov eax [esp+arg_24] +
or eax 300h +
mov [esp+arg_28] eax +
wait   +
fldcw  word ptr [esp+arg_28] +
fmul  ds:dbl_4263E0 +
wait   +
fldcw  word ptr [esp+arg_24] +
mov eax dword ptr [esp+arg_2C] +
fxch  st(1) +
fstp  st +
fld  [esp+arg_C] +
fxch  st(1) +
and eax 4300h +
sub esp 1Ch +
fnstenv  [esp+1Ch+var_1C] +
and [esp+1Ch+var_18] 0BCFFh +
or [esp+1Ch+var_18] eax +
wait   +
fldenv  [esp+1Ch+var_1C] +
add esp 1Ch +
pop ecx  +
pop ebx  +
pop eax  +
retn   +
***
push edx  +
sub esp 30h +
fld  dword ptr [esp+38h] +
fstp  tbyte ptr [esp+18h] +
fld  dword ptr [esp+3Ch] +
fstp  tbyte ptr [esp] +
mov edx 0 +
call sub_41D4F8  +
fxch  st(1) +
fstp  st +
add esp 30h +
pop edx  +
retn   +
***
push edx  +
sub esp 30h +
fld  qword ptr [esp+38h] +
fstp  tbyte ptr [esp+18h] +
fld  qword ptr [esp+40h] +
fstp  tbyte ptr [esp] +
mov edx 0 +
call sub_41D4F8  +
fxch  st(1) +
fstp  st +
add esp 30h +
pop edx  +
retn   +
***
fstp  [esp+30h+var_18] +
fstp  [esp+30h+var_30] +
mov edx 0 +
mov eax dword ptr [esp+30h+var_30+6] +
test eax 7FFF0000h +
jz loc_41D7A5  +
call sub_41D4F8  +
add esp 30h +
pop edx  +
retn   +
fld  [esp+30h+var_30] +
fld  [esp+30h+var_18] +
mov eax dword ptr [esp+30h+var_30] +
or eax dword ptr [esp+30h+var_30+4] +
jz loc_41D83C  +
fxch  st(1) +
fstp  [esp+30h+var_24] +
fld  [esp+30h+var_30] +
fxch  st(1) +
or edx 2 +
fnstcw  word ptr [esp+30h+var_C] +
mov eax [esp+30h+var_C] +
or eax 33Fh +
mov [esp+30h+var_8] eax +
wait   +
fldcw  word ptr [esp+30h+var_8] +
mov eax dword ptr [esp+30h+var_18+8] +
and eax 7FFFh +
cmp eax 7FBEh +
ja loc_41D80C  +
or edx 1 +
fmul  ds:dbl_4263D8 +
fstp  [esp+30h+var_18] +
fmul  ds:dbl_4263D8 +
fstp  [esp+30h+var_30] +
jmp loc_41D82D  +
fnstcw  word ptr [esp+30h+var_C] +
mov eax [esp+30h+var_C] +
or eax 300h +
mov [esp+30h+var_8] eax +
wait   +
fldcw  word ptr [esp+30h+var_8] +
fstp  st +
fmul  ds:dbl_4263D8 +
fstp  [esp+30h+var_30] +
wait   +
fldcw  word ptr [esp+30h+var_C] +
call sub_41D4F8  +
add esp 30h +
pop edx  +
retn   +
fprem   +
add esp 30h +
pop edx  +
retn   +
***
push edx  +
sub esp 24h +
fstp  [esp+24h+var_18] +
fstp  [esp+24h+var_24] +
mov ecx dword ptr [esp+24h+var_24+4] +
add ecx ecx +
jnb loc_41DA4D  +
mov eax dword ptr [esp+24h+var_18+4] +
add eax eax +
jnb loc_41DA4D  +
mov ecx dword ptr [esp+24h+var_24+8] +
mov eax dword ptr [esp+24h+var_18+8] +
and ecx 7FFFh +
jz loc_41DA4D  +
and eax 7FFFh +
jz loc_41DA4D  +
cmp ecx 7FFFh +
jz loc_41DA4D  +
cmp eax 7FFFh +
jz loc_41DA4D  +
fld  [esp+24h+var_18] +
fabs   +
fld  [esp+24h+var_24] +
fabs   +
fnstcw  word ptr [esp+24h+var_C] +
mov edx [esp+24h+var_C] +
or edx 33Fh +
and edx 0F3FFh +
mov [esp+24h+var_8] edx +
wait   +
fldcw  word ptr [esp+24h+var_8] +
xor edx edx +
fcom  st(1) +
push eax  +
fnstsw  ax +
sahf   +
pop eax  +
jb loc_41D8E5  +
fxch  st(1) +
inc edx  +
push eax  +
mov eax 0Fh +
call sub_414A98  +
pop eax  +
fld  ds:flt_426448 +
fmul st st(1) +
fistp  [esp+24h+var_4] +
mov ecx [esp+24h+var_4] +
shl ecx 4 +
fild  [esp+24h+var_4] +
fmul  ds:flt_42644C +
fld  st(1) +
fsub st st(1) +
fxch  st(1) +
fmulp st(2) st +
fld  ds:dbl_426404 +
faddp st(2) st +
push eax  +
mov eax 0Fh +
call sub_414A98  +
pop eax  +
fld  st +
fmul st st(1) +
fld  st +
fmul st st(1) +
fld  st +
fmul st st(1) +
fld  ds:tbyte_426482 +
fld  ds:tbyte_426478 +
fxch  st(1) +
fmul st st(2) +
fld  ds:tbyte_42646E +
fxch  st(2) +
fmul st st(3) +
fld  ds:tbyte_426464 +
fxch  st(2) +
fmul st st(5) +
fxch  st(3) +
fmulp st(4) st +
fld  ds:tbyte_42645A +
fxch  st(3) +
faddp st(4) st +
mov eax dword ptr [esp+24h+var_18+8] +
fld  ds:tbyte_426450 +
fxch  st(1) +
shl eax 10h +
fmul st st(6) +
fxch  st(2) +
add eax eax +
fmul st st(5) +
fxch  st(3) +
adc edx edx +
fmulp st(5) st +
fxch  st(2) +
mov eax dword ptr [esp+24h+var_24+8] +
fmul st st(5) +
fxch  st(2) +
shl eax 10h +
fmulp st(5) st +
fxch  st(2) +
faddp st(3) st +
add eax eax +
faddp st(1) st +
adc edx edx +
faddp st(2) st +
faddp st(1) st +
fmul st st(1) +
faddp st(1) st +
fld  ds:tbyte_42648C[ecx] +
faddp st(1) st +
jmp ds:off_426414[edx*4]  +
wait   +
fldcw  word ptr [esp+24h+var_C] +
add esp 24h +
pop edx  +
pop ecx  +
pop eax  +
retn   +
fchs   +
wait   +
fldcw  word ptr [esp+24h+var_C] +
add esp 24h +
pop edx  +
pop ecx  +
pop eax  +
retn   +
fld  ds:tbyte_426434 +
fsubrp st(1) st +
wait   +
fldcw  word ptr [esp+24h+var_C] +
add esp 24h +
pop edx  +
pop ecx  +
pop eax  +
retn   +
fld  ds:tbyte_426434 +
fsubrp st(1) st +
fchs   +
wait   +
fldcw  word ptr [esp+24h+var_C] +
add esp 24h +
pop edx  +
pop ecx  +
pop eax  +
retn   +
fld  ds:tbyte_42643E +
fsubrp st(1) st +
wait   +
fldcw  word ptr [esp+24h+var_C] +
add esp 24h +
pop edx  +
pop ecx  +
pop eax  +
retn   +
fld  ds:tbyte_42643E +
fsubrp st(1) st +
fchs   +
wait   +
fldcw  word ptr [esp+24h+var_C] +
add esp 24h +
pop edx  +
pop ecx  +
pop eax  +
retn   +
fld  ds:tbyte_42643E +
faddp st(1) st +
wait   +
fldcw  word ptr [esp+24h+var_C] +
add esp 24h +
pop edx  +
pop ecx  +
pop eax  +
retn   +
fld  ds:tbyte_42643E +
faddp st(1) st +
fchs   +
wait   +
fldcw  word ptr [esp+24h+var_C] +
add esp 24h +
pop edx  +
pop ecx  +
pop eax  +
retn   +
fld  [esp+24h+var_24] +
fld  [esp+24h+var_18] +
fpatan   +
add esp 24h +
pop edx  +
pop ecx  +
pop eax  +
retn   +
***
fstp  [esp+14h+var_14] +
mov eax dword ptr [esp+14h+var_14+8] +
and eax 7FFFh +
jz loc_41DB19  +
cmp eax 7FFFh +
jz loc_41DB19  +
mov eax dword ptr [esp+14h+var_14+4] +
add eax eax +
jnb loc_41DB19  +
fld  [esp+14h+var_14] +
fabs   +
fcomp  ds:flt_4265B0 +
fnstsw  ax +
sahf   +
jnb loc_41DB19  +
fld  [esp+14h+var_14] +
fsincos   +
fstp  [esp+14h+var_14] +
fld  [esp+14h+var_14] +
mov eax dword ptr [esp+14h+var_14+4] +
add eax eax +
xor eax 0E000000h +
test eax 0E000000h +
jz loc_41DACB  +
fdivp st(1) st +
fld1   +
add esp 14h +
pop eax  +
retn   +
shr eax 1Ch +
cmp ds:byte_42659C[eax] ah +
jnz loc_41DAE3  +
fdivp st(1) st +
fld1   +
add esp 14h +
pop eax  +
retn   +
wait   +
fstcw  word ptr [esp+14h+var_4] +
mov eax [esp+14h+var_4] +
or eax 33Fh +
mov [esp+14h+var_8] eax +
wait   +
fldcw  word ptr [esp+14h+var_8] +
fmul  ds:flt_4265AC +
fxch  st(1) +
fmul  ds:flt_4265AC +
fxch  st(1) +
wait   +
fldcw  word ptr [esp+14h+var_4] +
fdivp st(1) st +
fld1   +
add esp 14h +
pop eax  +
retn   +
fld  [esp+14h+var_14] +
fptan   +
add esp 14h +
pop eax  +
retn   +
***
xor esi esi +
mov edi edx +
test edi 7F800000h +
jz loc_41DB71  +
and edi 7F800000h +
cmp edi 7F800000h +
jnz loc_41DB7E  +
mov edi edx +
test edi 400000h +
jz loc_41DB5B  +
mov esi 10h +
jmp loc_41DB7E  +
and edi 7FFFFFh +
jz loc_41DB6A  +
mov esi 0Ch +
jmp loc_41DB7E  +
mov esi 8 +
jmp loc_41DB7E  +
test edx 7FFFFFh +
jnz loc_41DB7E  +
mov esi 4 +
test eax 7F800000h +
jz loc_41DBB3  +
mov edi eax +
and edi 7F800000h +
cmp edi 7F800000h +
jnz locret_41DBBD  +
mov edi eax +
test edi 400000h +
jz loc_41DBA3  +
add esi 50h +
retn   +
and edi 7FFFFFh +
jz loc_41DBAF  +
add esi 3Ch +
retn   +
add esi 28h +
retn   +
test eax 7FFFFFh +
jnz locret_41DBBD  +
add esi 14h +
retn   +
***
jmp GetWindowRect  +
***
jmp EnumWindows  +
***
jmp GetSystemMetrics  +
***
jmp GetClassNameA  +
***
jmp GetMonitorInfoA  +
***
jmp MonitorFromRect  +
***
jmp SetForegroundWindow  +
***
jmp LoadIconA  +
***
jmp PostMessageA  +
***
jmp GetWindowLongA  +
***
jmp SetFocus  +
***
jmp IsWindowEnabled  +
***
jmp GetAsyncKeyState  +
***
jmp GetClientRect  +
***
jmp GetSysColor  +
***
jmp GetNextDlgTabItem  +
***
jmp SetCursor  +
***
jmp CreateDialogParamA  +
***
jmp TranslateMessage  +
***
jmp PeekMessageA  +
***
jmp GetDlgItem  +
***
jmp DefWindowProcA  +
***
jmp PostQuitMessage  +
***
jmp CreateWindowExA  +
***
jmp SystemParametersInfoA  +
***
jmp RegisterClassA  +
***
jmp LoadCursorA  +
***
jmp LoadBitmapA  +
***
jmp ShowWindow  +
***
jmp SetWindowPos  +
***
jmp DispatchMessageA  +
***
jmp GetMessageA  +
***
jmp InsertMenuA  +
***
jmp GetMenuItemCount  +
***
jmp GetSystemMenu  +
***
jmp MessageBoxA  +
***
jmp DestroyWindow  +
***
jmp UnregisterClassA  +
***
jmp SetWindowTextA  +
***
jmp GetWindowTextA  +
***
jmp EnableWindow  +
***
jmp GetFocus  +
***
jmp SendMessageA  +
***
jmp GetCurrentDirectoryA  +
***
jmp LocalAlloc  +
***
jmp LocalFree  +
***
jmp GetLocaleInfoA  +
***
jmp GetDateFormatA  +
***
jmp GetTimeFormatA  +
***
jmp GetFullPathNameA  +
***
jmp VirtualAlloc  +
***
jmp VirtualFree  +
***
jmp RaiseException  +
***
jmp SetConsoleCtrlHandler  +
***
jmp GetFileType  +
***
jmp WriteConsoleA  +
***
jmp GetCPInfo  +
***
jmp GetOEMCP  +
***
jmp GetACP  +
***
jmp MultiByteToWideChar  +
***
jmp SetUnhandledExceptionFilter  +
***
jmp CreateFileA  +
***
jmp SetHandleCount  +
***
jmp WideCharToMultiByte  +
***
jmp GetPrivateProfileStringA  +
***
jmp GetSystemDirectoryA  +
***
jmp GetTickCount  +
***
jmp ReleaseSemaphore  +
***
jmp CreateSemaphoreA  +
***
jmp ExitProcess  +
***
jmp UnhandledExceptionFilter  +
***
jmp GetFileAttributesA  +
***
jmp DuplicateHandle  +
***
jmp GetCurrentProcess  +
***
jmp GetStdHandle  +
***
jmp GetLocalTime  +
***
jmp LCMapStringA  +
***
jmp GetStringTypeA  +
***
jmp GetCommandLineA  +
***
jmp GetModuleHandleA  +
***
jmp GetTempPathA  +
***
jmp LoadLibraryA  +
***
jmp GetLogicalDriveStringsA  +
***
jmp CreateDirectoryA  +
***
jmp GetFileAttributesExA  +
***
jmp SystemTimeToFileTime  +
***
jmp GetWindowsDirectoryA  +
***
jmp CloseHandle  +
***
jmp GetExitCodeProcess  +
***
jmp WaitForSingleObject  +
***
jmp GetLastError  +
***
jmp CreateProcessA  +
***
jmp FreeLibrary  +
***
jmp GetProcAddress  +
***
jmp GetModuleFileNameA  +
***
jmp FindClose  +
***
jmp FindNextFileA  +
***
jmp FindFirstFileA  +
***
jmp DragQueryFileA  +
***
jmp SHGetSpecialFolderPathA  +
***
jmp DragFinish  +
***
jmp DragAcceptFiles  +
***
jmp ImageList_Add  +
***
jmp ImageList_Create  +
***
jmp InitCommonControls  +
***
jmp CreateSolidBrush  +
***
jmp CreateFontA  +
***
jmp SetBkColor  +
***
jmp DeleteObject  +
***
jmp GetSaveFileNameA  +
***
jmp GetOpenFileNameA  +
***
jmp InternetOpenUrlA  +
***
jmp InternetOpenA  +
***
jmp InternetAttemptConnect  +
***
jmp InternetReadFile  +
***
jmp InternetCloseHandle  +
***
jmp RegOpenKeyA  +
***
jmp RegEnumKeyA  +
***
jmp RegEnumValueA  +
***
jmp RegCloseKey  +
***
jmp RegDeleteValueA  +
***
jmp RegDeleteKeyA  +
***
jmp RegQueryValueExA  +
***
jmp RegSetValueExA  +
***
jmp AllocateAndInitializeSid  +
***
jmp GetLengthSid  +
***
jmp InitializeAcl  +
***
jmp AddAccessAllowedAceEx  +
***
jmp SetSecurityInfo  +
***
jmp RegOpenKeyExA  +
***
jmp RegCreateKeyExA  +
***
