mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1001D73  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_1001D61  +
dec edx  +
jnz loc_1001D73  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_1001D70  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_1001D8F  +
xor eax eax +
jmp loc_1001D9F  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_1001DC0  +
xor eax eax +
jmp loc_1001DCF  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+arg_C] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
mov [ebp+var_8] 4 +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1001E5A  +
cmp eax 2 +
jle loc_1001E5C  +
cmp eax 3 +
jnz loc_1001E5A  +
xor eax eax +
cmp byte_100A0BE al +
setz al  +
inc eax  +
inc eax  +
jmp loc_1001E5C  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push hmod  +
mov [ebp+var_1] 0 +
call sub_1002FB1  +
mov esi eax +
mov dword_100A0B0 esi +
test esi esi +
jz loc_1001FCB  +
mov eax dword_100A000 +
push edi  +
cmp eax 3 +
ja loc_1001EB3  +
mov edi [esi] +
push eax  +
call sub_1001E35  +
push eax  +
push esi  +
call dword ptr [edi+18h]  +
mov eax dword_100A0B0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
jmp loc_1001FCA  +
xor edi edi +
call sub_100655C  +
dec eax  +
dec eax  +
jz loc_1001ED0  +
dec eax  +
dec eax  +
jz loc_1001ECB  +
sub eax 4 +
jnz loc_1001ED3  +
push 3  +
jmp loc_1001ECD  +
push 2  +
pop edi  +
jmp loc_1001ED3  +
xor edi edi +
inc edi  +
mov esi dword_100A0B0 +
push ebx  +
mov ebx [esi] +
push edi  +
call sub_1001E35  +
push eax  +
push esi  +
call dword ptr [ebx+18h]  +
mov al byte_100A0BC +
mov ecx dword_100A0B0 +
xor ebx ebx +
inc ebx  +
push ebx  +
mov byte_100A0BD al +
mov byte_100A0BC bl +
call sub_1002E02  +
push hmod  +
call sub_1005799  +
test eax eax +
jz loc_1001FC9  +
push hmod  +
push 0  +
call sub_10034A4  +
mov dword_100A0B4 eax +
test eax eax +
jz loc_1001FC9  +
push edi  +
mov ecx eax +
call sub_1003871  +
mov eax dword_100A0B4 +
mov ecx eax +
add eax 4 +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ecx  +
mov ecx dword_100A0B0 +
call sub_1002ED5  +
test eax eax +
jl loc_1001FC9  +
mov ecx dword_100A0B0 +
push ebx  +
call sub_1002E48  +
cmp dword_100A0FC 0 +
jz loc_1001FC6  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_1001F7D  +
test al al +
jnz loc_1001FC6  +
mov eax dword_100A0E8 +
mov ecx dword_100A0EC +
mov esi 80010000h +
and eax ebx +
and ecx esi +
or eax ecx +
jz loc_1001FC6  +
mov eax dword_100A0F0 +
mov edi dword_100A0F4 +
mov ecx eax +
mov edx edi +
and ecx ebx +
and edx esi +
cmp ecx eax +
jnz loc_1001FC6  +
cmp edx edi +
jnz loc_1001FC6  +
push offset dword_1001320  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DD9  +
mov [ebp+var_1] bl +
pop ebx  +
pop edi  +
mov al [ebp+var_1] +
pop esi  +
leave   +
retn   +
***
mov eax dword_100A0B0 +
test eax eax +
jz locret_1001FEC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword_100A0B0 0 +
retn   +
***
mov eax hhk +
test eax eax +
jz locret_100200B  +
push eax  +
call ds:UnhookWindowsHookEx  +
and hhk 0 +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
call sub_100357E  +
cmp eax ebx +
jz loc_100204E  +
mov ecx dword_100A000 +
push ebx  +
push ebx  +
cmp ecx 0FFFFFFF6h +
jz loc_1002034  +
add ecx 401h +
jmp loc_1002044  +
mov ecx dword_100A0C0 +
neg ecx  +
sbb ecx ecx +
add ecx 406h +
push ecx  +
push eax  +
call ds:PostMessageW  +
mov bl 1 +
mov al bl +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lParam] +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+nCode] edi +
jnz loc_1002085  +
mov eax dword_100A0B0 +
cmp eax edi +
jz loc_1002085  +
mov ecx [ebp+wParam] +
sub ecx 100h +
jz loc_10020D8  +
dec ecx  +
jz loc_100209F  +
sub ecx 3 +
jz loc_10020D8  +
push ebx  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push hhk  +
call ds:CallNextHookEx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax [ebx] +
add eax 0FFFFFFA5h +
cmp eax 1 +
ja loc_1002085  +
cmp byte_100A0BC 0 +
jnz loc_10020CF  +
push hhk  +
call ds:UnhookWindowsHookEx  +
mov eax dword_100A0B0 +
mov hhk edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov byte_100A108 0 +
jmp loc_1002085  +
mov ecx [ebx] +
cmp ecx 27h +
ja loc_10021A8  +
jz loc_100218F  +
sub ecx 9 +
jz loc_1002144  +
sub ecx 4 +
jz loc_1002085  +
sub ecx 16h +
jz loc_100213E  +
dec ecx  +
jz loc_1002138  +
dec ecx  +
jz loc_1002112  +
dec ecx  +
jnz loc_1002256  +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+1Ch]  +
jmp loc_100225C  +
mov ecx dword_100A0B4 +
mov esi [eax] +
add ecx 4 +
mov eax [ecx] +
call dword ptr [eax+38h]  +
xor ecx ecx +
test al al +
setz cl  +
push ecx  +
push dword_100A0B0  +
call dword ptr [esi+1Ch]  +
jmp loc_100225C  +
mov ecx [eax] +
push 2  +
jmp loc_1002109  +
mov ecx [eax] +
push 3  +
jmp loc_1002109  +
mov edi ds:GetAsyncKeyState +
push 0A4h  +
call edi  +
mov esi 8000h +
mov ecx esi +
test ax cx +
jnz loc_100217F  +
push 0A5h  +
call edi  +
mov ecx esi +
test ax cx +
jnz loc_100217F  +
push 10h  +
call edi  +
test ax si +
mov eax dword_100A0B0 +
mov ecx [eax] +
jnz loc_1002107  +
push 0  +
jmp loc_1002109  +
mov eax dword_100A0B0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
jmp loc_1002085  +
mov ecx dword_100A0B4 +
mov esi [eax] +
add ecx 4 +
mov eax [ecx] +
call dword ptr [eax+38h]  +
xor ecx ecx +
test al al +
setnz cl  +
jmp loc_1002129  +
cmp ecx 5Ch +
ja loc_100223A  +
cmp ecx 5Bh +
jnb loc_100222E  +
cmp ecx 28h +
jz loc_1002226  +
cmp ecx 2Ch +
jz loc_1002085  +
cmp ecx 50h +
jnz loc_1002256  +
push 10h  +
call ds:GetAsyncKeyState  +
mov esi 8000h +
mov ecx esi +
test ax cx +
mov eax dword_100A0B0 +
mov ecx [eax] +
jz loc_10021EC  +
push 1  +
jmp loc_10021ED  +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi ds:GetKeyState +
push 5Bh  +
call edi  +
mov ecx esi +
test ax cx +
jnz loc_100220B  +
push 5Ch  +
call edi  +
test ax si +
jz loc_100225C  +
cmp byte_100A0BD 0 +
jnz loc_100225C  +
cmp byte_100A108 0 +
jnz loc_100225C  +
mov byte_100A0BC 0 +
jmp loc_100225C  +
mov ecx [eax] +
push edi  +
jmp loc_1002109  +
mov byte_100A108 1 +
jmp loc_1002085  +
cmp ecx 0A0h +
jb loc_1002256  +
cmp ecx 0A3h +
jbe loc_100225C  +
cmp ecx 0A5h +
jbe loc_1002085  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
xor eax eax +
inc eax  +
jmp loc_1002098  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
inc ebx  +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov [ebp+var_1] bl +
jz loc_1002436  +
push offset asc_1001460  +
push [ebp+arg_0]  +
call ds:strtok  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1002436  +
mov esi ds:_stricmp +
push offset aSticky  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100242A  +
push offset a0  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100242A  +
push offset a5  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002422  +
push offset aReverse  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002422  +
push offset aInternal  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002416  +
push offset a1  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002416  +
push offset aClone  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100240B  +
push offset a2  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100240B  +
push offset aExtend  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10023F4  +
push offset a3  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10023F4  +
push offset aExternal  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002378  +
push offset a4  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002378  +
mov [ebp+var_1] 0 +
jmp loc_10023EA  +
mov dword_100A000 3 +
cmp dword_100A0FC 0 +
jz loc_10023EA  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_1002398  +
test al al +
jnz loc_10023EA  +
mov ecx dword_100A0E8 +
mov edx dword_100A0EC +
mov eax 80000000h +
and ecx ebx +
and edx eax +
or ecx edx +
jz loc_10023EA  +
mov ecx dword_100A0F0 +
mov edi dword_100A0F4 +
mov edx ecx +
mov esi edi +
and edx ebx +
and esi eax +
cmp edx ecx +
jnz loc_10023EA  +
cmp esi edi +
jnz loc_10023EA  +
mov eax dword_100A000 +
inc eax  +
push eax  +
push offset dword_1001310  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DFA  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
cmp byte_100A0BE 0 +
mov dword_100A000 2 +
setz [ebp+var_1]  +
jmp loc_1002430  +
mov dword_100A000 ebx +
jmp loc_1002382  +
and dword_100A000 0 +
jmp loc_1002382  +
mov dword_100A0C0 ebx +
jmp loc_1002436  +
mov byte_100A0BC bl +
cmp [ebp+var_1] 0 +
jz loc_10023EA  +
cmp dword_100A000 0FFFFFFF6h +
jnz loc_1002382  +
xor eax eax +
cmp dword_100A0C0 eax +
jz loc_10024AA  +
cmp dword_100A0FC eax +
jz loc_10023EA  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_1002462  +
test al al +
jnz loc_10023EA  +
mov ecx dword_100A0E8 +
mov edx dword_100A0EC +
mov eax 80000000h +
and ecx ebx +
and edx eax +
or ecx edx +
jz loc_10023EA  +
mov ecx dword_100A0F0 +
mov edi dword_100A0F4 +
mov edx ecx +
mov esi edi +
and edx ebx +
and esi eax +
cmp edx ecx +
jnz loc_10023EA  +
cmp esi edi +
jnz loc_10023EA  +
push 5  +
jmp loc_10023D4  +
cmp byte_100A0BC 0 +
jz loc_1002518  +
cmp dword_100A0FC eax +
jz loc_10023EA  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_10024D0  +
test al al +
jnz loc_10023EA  +
mov ecx dword_100A0E8 +
mov edx dword_100A0EC +
mov eax 80000000h +
and ecx ebx +
and edx eax +
or ecx edx +
jz loc_10023EA  +
mov ecx dword_100A0F0 +
mov edi dword_100A0F4 +
mov edx ecx +
mov esi edi +
and edx ebx +
and esi eax +
cmp edx ecx +
jnz loc_10023EA  +
cmp esi edi +
jnz loc_10023EA  +
push 0  +
jmp loc_10023D4  +
cmp dword_100A0FC eax +
jz loc_10023EA  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_1002535  +
test al al +
jnz loc_10023EA  +
mov ecx dword_100A0E8 +
mov edx dword_100A0EC +
mov eax 80000000h +
and ecx ebx +
and edx eax +
or ecx edx +
jz loc_10023EA  +
mov ecx dword_100A0F0 +
mov edi dword_100A0F4 +
mov edx ecx +
mov esi edi +
and edx ebx +
and esi eax +
cmp edx ecx +
jnz loc_10023EA  +
cmp esi edi +
jnz loc_10023EA  +
push 0FFFFFFF6h  +
jmp loc_10023D4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push 1000h  +
call ds:GetSystemMetrics  +
test eax eax +
setnz al  +
test al al +
jnz locret_10025B2  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
call sub_100643C  +
cmp eax 32h +
setz al  +
leave   +
retn   +
***
push offset fn  +
push 0Dh  +
call ds:SetWindowsHookExW  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov hhk eax +
mov al cl +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
or [ebp+var_4] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
push offset dword_100A0D0  +
push offset unk_100A0D8  +
push offset loc_1001D25  +
push offset dword_10012DC  +
call sub_1001D7C  +
xor ebx ebx +
cmp dword_100A0FC ebx +
jz loc_100266C  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_1002621  +
cmp al bl +
jnz loc_100266C  +
mov eax dword_100A0E8 +
mov ecx dword_100A0EC +
mov esi 80010000h +
and eax 1 +
and ecx esi +
or eax ecx +
jz loc_100266C  +
mov eax dword_100A0F0 +
mov edi dword_100A0F4 +
mov ecx eax +
mov edx edi +
and ecx 1 +
and edx esi +
cmp ecx eax +
jnz loc_100266C  +
cmp edx edi +
jnz loc_100266C  +
push offset dword_10012F0  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DD9  +
call sub_1002582  +
test al al +
jnz loc_100279D  +
push 0FFFFFFFFh  +
call ImmDisableIME  +
mov eax [ebp+hInstance] +
mov hmod eax +
lea eax [ebp+var_8] +
push eax  +
push offset aMicrosoftWindo  +
mov [ebp+var_8] ebx +
call SLGetWindowsInformationDWORD  +
test eax eax +
jl loc_10026A8  +
cmp [ebp+var_8] ebx +
setz al  +
mov byte_100A0BE al +
push [ebp+lpCmdLine]  +
call sub_1002269  +
test al al +
jz loc_100279D  +
push offset Name  +
push 5  +
push ebx  +
push ebx  +
call ds:CreateSemaphoreW  +
mov hHandle eax +
call ds:__imp_GetLastError  +
cmp eax 0B7h +
jnz loc_1002713  +
push 1388h  +
push hHandle  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_100278D  +
call sub_1002011  +
xor ecx ecx +
test al al +
setnz cl  +
push ebx  +
push 1  +
push hHandle  +
dec ecx  +
mov [ebp+var_4] ecx +
call ds:ReleaseSemaphore  +
jmp loc_100278D  +
push ebx  +
call ds:CoInitialize  +
call sub_1001E65  +
mov byte ptr [ebp+hInstance+3] al +
cmp al bl +
jz loc_100272E  +
call sub_10025B9  +
mov byte ptr [ebp+hInstance+3] al +
push ebx  +
push 1  +
push hHandle  +
call ds:ReleaseSemaphore  +
cmp byte ptr [ebp+hInstance+3] bl +
jz loc_100276B  +
mov esi ds:GetMessageW +
jmp loc_100275E  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_100274A  +
call sub_1001FF4  +
mov ecx dword_100A0B0 +
cmp ecx ebx +
jz loc_100277F  +
call sub_1002C74  +
call sub_1001FD6  +
call ds:CoUninitialize  +
mov [ebp+var_4] ebx +
mov eax hHandle +
cmp eax ebx +
jz loc_100279D  +
push eax  +
call ds:CloseHandle  +
cmp dword_100A0FC ebx +
jz loc_10027FD  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_10027B2  +
cmp al bl +
jnz loc_10027FD  +
mov eax dword_100A0E8 +
mov ecx dword_100A0EC +
mov esi 80000000h +
and eax 1 +
and ecx esi +
or eax ecx +
jz loc_10027FD  +
mov eax dword_100A0F0 +
mov edi dword_100A0F4 +
mov ecx eax +
mov edx edi +
and ecx 1 +
and edx esi +
cmp ecx eax +
jnz loc_10027FD  +
cmp edx edi +
jnz loc_10027FD  +
push offset dword_1001300  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DD9  +
push offset dword_100A0D0  +
call sub_1001DA8  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 2 +
jnz loc_1002830  +
xor eax eax +
cmp byte_100A0BE al +
setnz al  +
inc eax  +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
mov dword ptr [esi] offset off_1001478 +
test eax eax +
jz loc_1002855  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_1002866  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_10014A0  +
push dword ptr [ebp+8]  +
call QISearch  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002839  +
test [ebp+arg_0] 1 +
jz loc_10028C3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+1Ch] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+10h] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
mov edx [eax+10h] +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
push edi  +
mov dword ptr [ebp-4] 1 +
cmp edx 0FFFFFFF6h +
jnz loc_1002926  +
mov [eax+14h] ebx +
cmp edx ebx +
jz loc_1002949  +
mov ecx [eax+0Ch] +
and dword ptr [ebp-4] 0 +
mov [eax+10h] ebx +
test ecx ecx +
jz loc_1002949  +
lea edi [ebp+0Bh] +
push edi  +
push ebx  +
push edx  +
push eax  +
mov byte ptr [ebp+0Bh] 0 +
mov esi [ecx] +
push ecx  +
call dword ptr [esi+0Ch]  +
cmp dword_100A0FC 0 +
jz loc_10029B1  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_100295F  +
test al al +
jnz loc_10029B1  +
mov eax dword_100A0E8 +
mov ecx dword_100A0EC +
mov esi 80000000h +
and eax 1 +
and ecx esi +
or eax ecx +
jz loc_10029B1  +
mov eax dword_100A0F0 +
mov edi dword_100A0F4 +
mov ecx eax +
mov edx edi +
and ecx 1 +
and edx esi +
cmp ecx eax +
jnz loc_10029B1  +
cmp edx edi +
jnz loc_10029B1  +
push ebx  +
call sub_1002816  +
push eax  +
push offset dword_1001330  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DFA  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
xor edi edi +
sub eax edi +
jz loc_1002A11  +
dec eax  +
jz loc_10029F6  +
dec eax  +
jz loc_10029EA  +
dec eax  +
jz loc_10029E0  +
mov edi 80004005h +
jmp loc_1002A23  +
mov eax [ebp+8] +
mov edx [eax+1Ch] +
dec edx  +
push edx  +
jmp loc_10029EE  +
mov eax [ebp+8] +
push edi  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_1002A23  +
mov ecx [ebp+8] +
mov esi [ecx+1Ch] +
mov eax [ecx+10h] +
lea eax [eax+esi-1] +
cdq   +
idiv  esi +
push ebx  +
mov ebx [ecx] +
push edx  +
push ecx  +
call dword ptr [ebx+18h]  +
pop ebx  +
jmp loc_1002A23  +
mov ecx [ebp+8] +
mov eax [ecx+10h] +
inc eax  +
cdq   +
idiv  dword ptr [ecx+1Ch] +
mov esi [ecx] +
push edx  +
push ecx  +
call dword ptr [esi+18h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
cmp [ebp+arg_0] 0FFFFFFF6h +
jz locret_1002AAA  +
push ebx  +
push 0  +
push 0CA0100h  +
push 0  +
call WinSqmStartSession  +
mov ebx eax +
test ebx ebx +
jz loc_1002AA9  +
cmp ebx 0FFFFFFFFh +
jz loc_1002AA9  +
push esi  +
push edi  +
push [ebp+arg_0]  +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
stos   +
stos   +
call sub_1002816  +
push [ebp+arg_4]  +
xor esi esi +
inc eax  +
inc esi  +
mov [ebp+var_14] eax +
mov [ebp+var_18] esi +
call sub_1002816  +
inc eax  +
mov [ebp+var_C] eax +
lea eax [ebp+var_18] +
push eax  +
push 3  +
push 0E6Fh  +
push 0  +
mov [ebp+var_10] esi +
mov [ebp+var_4] 2 +
mov [ebp+var_8] esi +
call WinSqmAddToStream  +
push ebx  +
call WinSqmEndSession  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1002A30  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0D8h +
push ebx  +
push edi  +
mov edi [ebp+8] +
mov ecx edi +
mov ebx 80004005h +
call sub_1002AB3  +
cmp byte ptr [edi+25h] 0 +
jnz loc_1002C67  +
cmp dword ptr [edi+10h] 0FFFFFFF6h +
jz loc_1002C67  +
mov eax [edi] +
lea ecx [ebp-0Ch] +
push ecx  +
push edi  +
call dword ptr [eax+14h]  +
mov ebx eax +
test ebx ebx +
jl loc_1002C51  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_1002B14  +
mov eax [ecx] +
call dword ptr [eax+3Ch]  +
cmp dword_100A0FC 0 +
push esi  +
mov esi 80000000h +
jz loc_1002B82  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_1002B30  +
test al al +
jnz loc_1002B82  +
mov eax dword_100A0E8 +
mov ecx dword_100A0EC +
and eax 1 +
and ecx esi +
or eax ecx +
jz loc_1002B82  +
mov eax dword_100A0F0 +
mov edi dword_100A0F4 +
mov ecx eax +
mov edx edi +
and ecx 1 +
and edx esi +
cmp ecx eax +
jnz loc_1002B7F  +
cmp edx edi +
jnz loc_1002B7F  +
push dword ptr [ebp-0Ch]  +
call sub_1002816  +
push eax  +
push offset dword_1001340  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DFA  +
mov edi [ebp+8] +
mov eax [ebp-0Ch] +
push dword_100A004[eax*4]  +
call sub_1006532  +
mov ebx eax +
lea eax [ebp-8] +
push eax  +
neg ebx  +
sbb ebx ebx +
lea eax [ebp-4] +
push eax  +
and ebx 7FFFBFFBh +
push 2  +
add ebx 80004005h +
call sub_100643C  +
test eax eax +
jnz loc_1002BF1  +
cmp dword ptr [ebp-4] 1 +
jnz loc_1002BF1  +
cmp dword ptr [ebp-8] 2 +
jnz loc_1002BF1  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-0D8h] +
push eax  +
lea eax [ebp-8] +
push eax  +
lea eax [ebp-58h] +
push eax  +
lea eax [ebp-4] +
push eax  +
push 2  +
call sub_100644D  +
test eax eax +
jnz loc_1002BF1  +
mov eax [ebp-18h] +
and al 8 +
cmp al 8 +
setz al  +
mov [edi+26h] al +
cmp dword_100A0FC 0 +
jz loc_1002C50  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_1002C07  +
test al al +
jnz loc_1002C50  +
mov eax dword_100A0E8 +
mov ecx dword_100A0EC +
and eax 1 +
and ecx esi +
or eax ecx +
jz loc_1002C50  +
mov eax dword_100A0F0 +
mov edi dword_100A0F4 +
mov ecx eax +
mov edx edi +
and ecx 1 +
and edx esi +
cmp ecx eax +
jnz loc_1002C4D  +
cmp edx edi +
jnz loc_1002C4D  +
push offset dword_1001350  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DD9  +
mov edi [ebp+8] +
pop esi  +
mov eax [edi+0Ch] +
test eax eax +
jz loc_1002C67  +
lea edx [ebp+0Bh] +
push edx  +
push edi  +
mov byte ptr [ebp+0Bh] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push edi  +
mov edi ecx +
cmp byte ptr [edi+26h] 0 +
mov ebx 80004005h +
jz loc_1002DF7  +
cmp dword ptr [edi+8] 0 +
mov [ebp+var_4] 2 +
jz loc_1002CA6  +
mov ecx [edi+8] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
jmp loc_1002CA8  +
xor eax eax +
push dword ptr [edi+20h]  +
lea ecx [ebp+var_4] +
push ecx  +
push 7  +
push eax  +
lea ecx [ebp+var_14] +
call sub_1003201  +
mov ebx eax +
test ebx ebx +
jge loc_1002CC4  +
and [ebp+var_4] 0 +
cmp [ebp+var_4] 1 +
jz loc_1002DC6  +
push esi  +
push dword ptr [edi+18h]  +
mov ecx edi +
push dword ptr [edi+10h]  +
call sub_1002A30  +
cmp dword_100A0FC 0 +
mov esi 80000000h +
jz loc_1002D46  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_1002CF7  +
test al al +
jnz loc_1002D46  +
mov eax dword_100A0E8 +
mov ecx dword_100A0EC +
and eax 1 +
and ecx esi +
or eax ecx +
jz loc_1002D46  +
mov eax dword_100A0F0 +
mov ebx dword_100A0F4 +
mov ecx eax +
mov edx ebx +
and ecx 1 +
and edx esi +
cmp ecx eax +
jnz loc_1002D46  +
cmp edx ebx +
jnz loc_1002D46  +
push dword ptr [edi+18h]  +
call sub_1002816  +
push eax  +
push offset dword_1001340  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DFA  +
mov eax [edi+18h] +
push dword_100A004[eax*4]  +
call sub_1006532  +
mov ebx eax +
neg ebx  +
sbb ebx ebx +
and ebx 7FFFBFFBh +
add ebx 80004005h +
cmp dword_100A0FC 0 +
jz loc_1002DC5  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_1002D7D  +
test al al +
jnz loc_1002DC5  +
mov eax dword_100A0E8 +
mov ecx dword_100A0EC +
and eax 1 +
and ecx esi +
or eax ecx +
jz loc_1002DC5  +
mov eax dword_100A0F0 +
mov edx dword_100A0F4 +
mov ecx eax +
and ecx 1 +
and edx esi +
cmp ecx eax +
jnz loc_1002DC5  +
cmp edx dword_100A0F4 +
jnz loc_1002DC5  +
push offset dword_1001350  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DD9  +
pop esi  +
lea ecx [ebp+var_14] +
call sub_1002FDC  +
test al al +
jz loc_1002DF7  +
push 0  +
push 0FFFEh  +
push 1  +
push 13Eh  +
push 13Fh  +
push 138h  +
push dword ptr [edi+20h]  +
push 0  +
call ds:COMCTL32_344  +
mov ebx eax +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
mov [ecx+24h] al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
mov ecx [edx+0Ch] +
mov eax 80004005h +
mov byte ptr [edx+25h] 1 +
test ecx ecx +
jz loc_1002E3F  +
push esi  +
lea esi [ebp+0Bh] +
push esi  +
push edx  +
mov byte ptr [ebp+0Bh] 0 +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+14h]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
cmp dword ptr [eax+8] 0 +
jz loc_1002E65  +
mov ecx [eax+8] +
movzx eax byte ptr [eax+24h] +
mov edx [ecx] +
push eax  +
push [ebp+arg_0]  +
call dword ptr [edx+1Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1002E95  +
test esi esi +
jz loc_1002E95  +
push 1  +
mov ecx esi +
call sub_10028A9  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
add esi 0Ch +
mov eax [esi] +
test eax eax +
jz loc_1002EBD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push esi  +
push offset dword_10014C0  +
push eax  +
call dword ptr [ecx]  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov ebx ecx +
lea esi [ebx+8] +
mov eax [esi] +
push edi  +
mov [ebp+var_4] 1 +
test eax eax +
jz loc_1002EF9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
lea edi [ebx+0Ch] +
mov eax [edi] +
test eax eax +
jz loc_1002F0B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi] 0 +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1002F4D  +
mov ecx [eax] +
push esi  +
push offset dword_10014D0  +
push eax  +
call dword ptr [ecx]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1002F4D  +
mov ecx [esi] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+10h]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1002F42  +
mov esi [esi] +
mov eax [esi] +
push edi  +
push offset dword_10014C0  +
push esi  +
call dword ptr [eax]  +
jmp loc_1002F4D  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
push 0FFFFFFF6h  +
pop edx  +
mov dword ptr [eax] offset off_1001478 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] edx +
mov [eax+14h] edx +
mov [eax+18h] ecx +
mov [eax+24h] cl +
mov [eax+25h] cl +
mov [eax+26h] cl +
cmp byte_100A0BE cl +
jz loc_1002FA4  +
mov dword_100A00C 8 +
mov dword_100A010 ecx +
mov dword ptr [eax+1Ch] 3 +
retn   +
mov dword ptr [eax+1Ch] 4 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 28h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1002FCB  +
mov ecx eax +
call sub_1002F5C  +
jmp loc_1002FCD  +
xor eax eax +
mov ecx [ebp+arg_0] +
mov [eax+20h] ecx +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002FFB  +
cmp ecx 7FFFFFFFh +
jbe loc_1003000  +
mov eax 80070057h +
test eax eax +
jl loc_100303D  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100302D  +
cmp eax esi +
ja loc_100302D  +
jnz loc_1003038  +
jmp loc_1003032  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] 4 +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [ebp+hWnd] eax +
jnz loc_1003118  +
inc dword ptr [esi]  +
mov eax [esi] +
push 5  +
xor edx edx +
pop ecx  +
div  ecx +
test edx edx +
jnz loc_1003118  +
push ebx  +
push edi  +
mov ebx 104h +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
xor eax eax +
cmp dword ptr [esi+4] 1 +
setnz al  +
add eax 13Ah +
push eax  +
push dword ptr [esi+8]  +
call ds:LoadStringW  +
mov edi ds:SendMessageW +
test eax eax +
jle loc_10030F5  +
mov eax [esi+4] +
cmp eax 1 +
jnz loc_10030C3  +
lea eax [ebp+Buffer] +
jmp loc_10030E5  +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+lParam] +
push ebx  +
push eax  +
call sub_1002FE5  +
add esp 10h +
test eax eax +
jl loc_10030F5  +
lea eax [ebp+lParam] +
push eax  +
push 2  +
push 46Ch  +
push [ebp+hWnd]  +
call edi  +
mov eax [esi+4] +
test eax eax +
jnz loc_1003112  +
push eax  +
push 7  +
push 466h  +
push [ebp+hWnd]  +
mov byte ptr [esi+0Ch] 1 +
call edi  +
jmp loc_1003116  +
dec eax  +
mov [esi+4] eax +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_10077A5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx [ebp+18h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1003044  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push 5Ch  +
mov [esi+4] eax +
lea eax [ebp+var_6C] +
push ebx  +
push eax  +
mov [esi] ebx +
mov [esi+0Ch] bl +
call memset  +
mov eax [ebp+arg_0] +
add esp 0Ch +
mov [ebp+var_6C] eax +
mov eax [ebp+arg_10] +
push 2  +
mov [esi+8] eax +
mov [ebp+var_68] eax +
pop eax  +
lea ecx [ebp+var_10] +
mov [ebp+var_70] 60h +
mov [ebp+var_64] 808h +
mov [ebp+var_4C] eax +
mov [ebp+var_10] 1 +
mov [ebp+var_C] 13Ch +
mov [ebp+var_8] eax +
mov [ebp+var_4] 13Dh +
mov [ebp+var_48] ecx +
mov [ebp+var_5C] 138h +
mov [ebp+var_54] 139h +
cmp [ebp+arg_4] ebx +
jz loc_10031D3  +
movzx ecx word ptr [ebp+arg_4] +
mov [ebp+var_50] ecx +
push ebx  +
push ebx  +
push [ebp+arg_C]  +
mov [ebp+var_44] eax +
lea eax [ebp+var_70] +
push eax  +
mov [ebp+var_20] offset dword_10014E4 +
mov [ebp+var_1C] offset loc_100312E +
mov [ebp+var_18] esi +
call ds:COMCTL32_345  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 13Eh  +
push [ebp+arg_0]  +
call sub_1003150  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+0Ch] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase.unused[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+8] edx +
lea eax (__ImageBase.unused+2)[ecx] +
test ecx ecx +
jns loc_100326F  +
movzx eax cx +
mov [ebp-8] eax +
test edx edx +
jnz loc_10032EE  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+8] edi +
test edi edi +
jz loc_10032CC  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_10032C1  +
push 8  +
pop ecx  +
lea edi [ebp-28h] +
stos   +
mov eax [ebp+8] +
mov [ebp-14h] eax +
mov eax ds:dword_10014E8 +
mov dword ptr [ebp-2Ch] 24h +
mov [ebp-20h] ebx +
test eax eax +
jz loc_10032EE  +
lea ecx [ebp-2Ch] +
push ecx  +
push 5  +
call eax  +
jmp loc_10032EE  +
push edi  +
call FreeLibrary  +
mov [ebp+8] esi +
jmp loc_10032EE  +
call GetLastError  +
cmp eax 7Eh +
jz loc_10032DD  +
cmp eax 0C1h +
jnz loc_1003330  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_10032F4  +
mov [ebp+8] eax +
cmp dword ptr [ebp+8] 0FFFFFFFFh +
jnz loc_10032FD  +
mov dword ptr [ebp-4] 1 +
jmp loc_1003330  +
cmp dword ptr [ebp+8] 0 +
jz loc_1003330  +
push dword ptr [ebp-8]  +
push dword ptr [ebp+8]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_1003325  +
call GetLastError  +
cmp eax 7Fh +
jz loc_1003325  +
cmp eax 0B6h +
jnz loc_100332C  +
mov dword ptr [ebp-4] 1 +
test esi esi +
jnz loc_100333B  +
push dword ptr [ebp-8]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
cmp dword ptr [ebp-4] 0 +
jz loc_1003346  +
mov eax [ebp+0Ch] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
xor esi esi +
call PowerDeterminePlatformRole  +
cmp eax 2 +
jz loc_10033F0  +
cmp eax 1 +
jnz loc_10033F7  +
lea eax [ebp+var_50] +
push eax  +
call GetPwrCapabilities  +
test al al +
jz loc_10033F7  +
cmp [ebp+var_32] 0 +
jz loc_10033F5  +
cmp [ebp+var_31] 0 +
jnz loc_10033F5  +
xor esi esi +
inc esi  +
jmp loc_10033F7  +
xor esi esi +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10077A5  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+18h] 0 +
mov dword ptr [esi] offset off_1001530 +
mov dword ptr [esi+4] offset off_10014F0 +
jz loc_1003429  +
call BufferedPaintUnInit  +
mov esi [esi+0B8h] +
test esi esi +
jz loc_1003439  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 0DCh +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_1001548  +
push dword ptr [ebp+8]  +
call QISearch  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100340B  +
test [ebp+arg_0] 1 +
jz loc_1003498  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor esi esi +
mov [ebp+var_214] esi +
mov [ebp+dwExStyle] 88h +
call sub_10057FA  +
test eax eax +
jz loc_10034E7  +
mov [ebp+dwExStyle] 80088h +
call IsThemeActive  +
test eax eax +
jnz loc_10034F8  +
or [ebp+dwExStyle] 1 +
call sub_100635C  +
test eax eax +
jz loc_100350B  +
or [ebp+dwExStyle] 400000h +
push 104h  +
lea eax [ebp+WindowName] +
push eax  +
push 12Ch  +
push edi  +
call ds:LoadStringW  +
test eax eax +
jg loc_100352B  +
xor eax eax +
jmp loc_1003568  +
push esi  +
push edi  +
push esi  +
push ebx  +
push esi  +
push esi  +
push esi  +
push esi  +
push 82000000h  +
lea eax [ebp+WindowName] +
push eax  +
push offset ClassName  +
push [ebp+dwExStyle]  +
call ds:CreateWindowExW  +
cmp eax esi +
jz loc_1003562  +
push esi  +
push eax  +
call ds:GetWindowLongW  +
mov [ebp+var_214] eax +
mov eax [ebp+var_214] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10077A5  +
leave   +
retn 8  +
***
xor eax eax +
push eax  +
push offset ClassName  +
push eax  +
push eax  +
call ds:FindWindowExW  +
retn   +
***
lea eax [ecx+0B8h] +
cmp dword ptr [eax] 0 +
jz locret_10035A7  +
mov eax [eax] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+0B8h] 0 +
jz loc_100360A  +
mov eax [ebp+arg_0] +
cmp eax 401h +
jb loc_100360A  +
cmp eax 404h +
jbe loc_10035EE  +
cmp eax 405h +
jz loc_10035DE  +
cmp eax 406h +
jnz loc_100360A  +
push 0  +
jmp loc_10035E0  +
push 1  +
mov ecx [ecx+0B8h] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+1Ch]  +
jmp loc_100360A  +
push esi  +
mov esi [ecx+0B8h] +
push edi  +
mov edi [esi] +
add eax 0FFFFFBFFh +
push eax  +
call sub_1001E35  +
push eax  +
push esi  +
call dword ptr [edi+18h]  +
pop edi  +
pop esi  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
push 8  +
mov esi ecx +
pop ecx  +
xor eax eax +
mov [ebp+pData.cbSize] 24h +
lea edi [ebp+pData.hWnd] +
stos   +
mov eax [esi+10h] +
mov [ebp+pData.hWnd] eax +
lea eax [ebp+pData] +
push eax  +
push 1  +
call SHAppBarMessage  +
lea edi [esi+0BCh] +
mov [ebp+var_4] 4 +
xor ebx ebx +
mov eax [edi] +
cmp eax ebx +
jz loc_1003664  +
push eax  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [edi] ebx +
add edi 8 +
dec [ebp+var_4]  +
jnz loc_1003655  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_100367D  +
push eax  +
call CloseThemeData  +
mov [esi+8] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_100368D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+0Ch] ebx +
lea edi [esi+0B8h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10036A1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
mov ecx [esi+38h] +
cmp ecx ebx +
jz loc_10036B9  +
call sub_10059A2  +
mov eax [esi+38h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+38h] ebx +
push dword ptr [esi+10h]  +
call WTSUnRegisterSessionNotification  +
lea edi [esi+0B0h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10036D6  +
push eax  +
call ds:UnregisterDeviceNotification  +
mov [edi] ebx +
push 7D5h  +
push dword ptr [esi+10h]  +
call ds:KillTimer  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
test eax eax +
jz loc_1003708  +
push eax  +
call CloseThemeData  +
push offset aAlttab  +
push dword ptr [esi+10h]  +
call OpenThemeData  +
mov [esi+8] eax +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
stos   +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 42h  +
mov [ebp+pvParam] 0Ch +
call ds:SystemParametersInfoW  +
test eax eax +
setnz cl  +
lea eax [esi+0ADh] +
pop edi  +
mov [eax] cl +
pop esi  +
test cl cl +
jz loc_1003752  +
xor ecx ecx +
inc ecx  +
test byte ptr [ebp+var_8] cl +
jnz loc_1003754  +
xor ecx ecx +
mov [eax] cl +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0Ch] +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
jz loc_100377B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] ebx +
push esi  +
push offset dword_1001C20  +
push ebx  +
push offset dword_1001C30  +
call ds:ImageList_CoCreateInstance  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_1003846  +
mov eax [esi] +
mov ecx [eax] +
xor edx edx +
cmp [edi+0ACh] dl +
push 4  +
push [ebp+arg_0]  +
setz dl  +
dec edx  +
and edx 2000h +
add edx 20020h +
push edx  +
push dword ptr [edi+68h]  +
push dword ptr [edi+64h]  +
push eax  +
call dword ptr [ecx+0A4h]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_10037DA  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] ebx +
jmp loc_1003846  +
cmp dword_100A0FC ebx +
jz loc_1003846  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_10037EF  +
test al al +
jnz loc_1003846  +
mov eax dword_100A0E8 +
mov ecx dword_100A0EC +
mov esi 80000000h +
and eax 1 +
and ecx esi +
or eax ecx +
jz loc_1003846  +
mov eax dword_100A0F0 +
mov ebx dword_100A0F4 +
mov ecx eax +
mov edx ebx +
and ecx 1 +
and edx esi +
cmp ecx eax +
jnz loc_1003846  +
cmp edx ebx +
jnz loc_1003846  +
xor eax eax +
cmp [edi+0ACh] al +
setz al  +
push eax  +
push offset dword_1001360  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DFA  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100635C  +
test eax eax +
setnz al  +
mov [esi+0ACh] al +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+0B4h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push ebx  +
xor edx edx +
xor bl bl +
cmp eax edx +
jz loc_10038F6  +
push esi  +
mov esi [ebp+8] +
cmp esi 0FFFFFFF6h +
jz loc_10038EA  +
cmp esi edx +
jl loc_10038F5  +
cmp esi [ecx+0E8h] +
jge loc_10038F5  +
push edi  +
mov edi [ecx+9Ch] +
lea edx [ecx+84h] +
add edi [edx] +
imul edi esi +
mov esi [ecx+8Ch] +
add esi edi +
mov [eax] esi +
mov edx [edx] +
add edx esi +
mov [eax+8] edx +
mov edx [ecx+90h] +
mov [eax+4] edx +
mov ecx [ecx+88h] +
add ecx edx +
mov [eax+0Ch] ecx +
inc bl  +
pop edi  +
jmp loc_10038F5  +
push edx  +
push edx  +
push edx  +
push edx  +
push eax  +
call ds:SetRect  +
pop esi  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0E4h] +
imul eax eax +
push ebx  +
push esi  +
push edi  +
cdq   +
push 60h  +
pop edi  +
mov esi edi +
idiv  esi +
mov esi [ebp+arg_0] +
mov ebx edi +
add [esi] eax +
mov eax [ecx+0E4h] +
imul eax eax +
cdq   +
idiv  ebx +
add [esi+8] eax +
cmp byte ptr [ecx+0E2h] 0 +
jz loc_100394B  +
mov eax [ecx+0E4h] +
imul eax eax +
cdq   +
idiv  ebx +
mov [ebp+arg_0] eax +
jmp loc_100394F  +
and [ebp+arg_0] 0 +
mov eax [ecx+0E4h] +
imul eax eax +
cdq   +
mov ebx edi +
idiv  ebx +
add eax [ebp+arg_0] +
add [esi+4] eax +
mov eax [ecx+0E4h] +
imul eax eax +
cdq   +
idiv  edi +
pop edi  +
add [esi+0Ch] eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0E4h] +
imul eax eax +
push ebx  +
push esi  +
cdq   +
push edi  +
push 60h  +
pop edi  +
mov esi edi +
idiv  esi +
mov esi [ebp+arg_0] +
mov ebx edi +
add [esi] eax +
mov eax [ecx+0E4h] +
imul eax eax +
cdq   +
idiv  ebx +
add [esi+8] eax +
mov eax [ecx+0E4h] +
imul eax eax +
cdq   +
idiv  ebx +
xor ebx ebx +
add [esi+4] eax +
cmp [ecx+0E2h] bl +
jz loc_10039D6  +
mov eax [ecx+0E4h] +
imul eax eax +
cdq   +
mov ebx edi +
idiv  ebx +
mov ebx eax +
mov eax [ecx+0E4h] +
imul eax eax +
cdq   +
idiv  edi +
pop edi  +
add eax [esi+4] +
add eax ebx +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+18h] 0 +
jnz loc_1003A0E  +
call BufferedPaintInit  +
mov dword ptr [esi+18h] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
mov esi ecx +
cmp [esi+0ADh] al +
setnz al  +
add eax 4 +
push eax  +
call ds:GetSysColorBrush  +
test eax eax +
jz loc_1003A63  +
push eax  +
lea eax [ebp+rc] +
push eax  +
push [ebp+hDC]  +
call ds:FillRect  +
xor eax eax +
cmp [esi+0ADh] al +
setnz al  +
add eax 4 +
push eax  +
call ds:GetSysColor  +
push eax  +
push [ebp+hDC]  +
call ds:SetBkColor  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
mov ebx ecx +
mov eax [ebx+0E4h] +
push esi  +
imul eax eax +
push edi  +
push 60h  +
pop ecx  +
cdq   +
idiv  ecx +
lea esi [ebp+arg_4] +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
push eax  +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:InflateRect  +
mov eax [ebx+0E4h] +
push 60h  +
pop ecx  +
shl eax 2 +
cdq   +
idiv  ecx +
add dword ptr [ebp-4] 2 +
push eax  +
push eax  +
push dword ptr [ebp-4]  +
push dword ptr [ebp-8]  +
push dword ptr [ebp-0Ch]  +
push [ebp+rc]  +
call ds:CreateRoundRectRgn  +
mov esi eax +
test esi esi +
jz loc_1003AE6  +
push 5  +
call ds:GetSysColorBrush  +
push eax  +
push esi  +
push [ebp+hDC]  +
call ds:FillRgn  +
push esi  +
call ds:DeleteObject  +
xor edi edi +
inc edi  +
cmp [ebx+0ECh] edi +
jle loc_1003B55  +
lea edx [ebp+var_30] +
lea ecx [ebx+4] +
mov eax [ecx] +
push edx  +
push edi  +
call dword ptr [eax+30h]  +
mov esi [ebx+0E4h] +
push 60h  +
pop ecx  +
lea eax [esi+esi] +
cdq   +
idiv  ecx +
mov ecx [ebp+var_30] +
push 60h  +
sub ecx eax +
lea eax [ecx-1] +
mov [ebp+var_20] eax +
mov eax esi +
imul eax eax +
cdq   +
pop esi  +
idiv  esi +
mov edx [ebp+var_2C] +
mov [ebp+var_18] ecx +
mov ecx [ebp+var_24] +
push 0  +
add edx eax +
sub ecx eax +
mov [ebp+var_1C] edx +
mov [ebp+var_14] ecx +
call ds:GetSysColorBrush  +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+hDC]  +
call ds:FillRect  +
inc edi  +
cmp edi [ebx+0ECh] +
jl loc_1003AF1  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
xor eax eax +
inc eax  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+Point] +
push eax  +
mov esi ecx +
call ds:GetCursorPos  +
lea eax [ebp+Point] +
push eax  +
push dword ptr [esi+10h]  +
call ds:ScreenToClient  +
mov ecx [ebp+Point.x] +
lea eax [esi+78h] +
push 5  +
mov [esi+80h] ecx +
mov [eax] ecx +
mov ecx [ebp+Point.y] +
push 5  +
push eax  +
mov [esi+84h] ecx +
mov [esi+7Ch] ecx +
call ds:InflateRect  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 30h  +
mov esi ecx +
call ds:SystemParametersInfoW  +
mov ecx [esi+5Ch] +
mov eax [ebp+var_4] +
mov edi [esi+58h] +
sub eax ecx +
sub eax [ebp+var_C] +
push 40h  +
cdq   +
sub eax edx +
sar eax 1 +
add eax [ebp+var_C] +
push ecx  +
push edi  +
push eax  +
mov eax [ebp+var_8] +
sub eax edi +
sub eax [ebp+pvParam] +
cdq   +
sub eax edx +
sar eax 1 +
add eax [ebp+pvParam] +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [esi+10h]  +
call ds:SetWindowPos  +
push 1  +
push 0  +
push dword ptr [esi+10h]  +
call ds:InvalidateRect  +
push dword ptr [esi+10h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax [ecx+50h] +
cmp eax 1 +
jz loc_1003C50  +
cmp eax 2 +
jz loc_1003C50  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
push 0FFFFFFFCh  +
mov esi ecx +
push dword ptr [esi+0Ch]  +
push 3  +
call ds:NotifyWinEvent  +
push 0  +
push dword ptr [esi+0Ch]  +
call ds:ShowWindow  +
push dword ptr [esi+0Ch]  +
call ds:UpdateWindow  +
mov edi ds:KillTimer +
push 7D2h  +
push dword ptr [esi+0Ch]  +
call edi  +
push 7D4h  +
push dword ptr [esi+0Ch]  +
call edi  +
push 7D3h  +
push dword ptr [esi+0Ch]  +
call edi  +
pop edi  +
pop esi  +
jmp ds:ReleaseCapture  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+0E0h] 0 +
jnz loc_1003D0A  +
push edi  +
push 0  +
push dword ptr [esi+10h]  +
call ds:ShowWindow  +
push dword ptr [esi+10h]  +
call ds:UpdateWindow  +
mov edi ds:KillTimer +
push 7D2h  +
push dword ptr [esi+10h]  +
call edi  +
push 7D4h  +
push dword ptr [esi+10h]  +
call edi  +
push 7D3h  +
push dword ptr [esi+10h]  +
call edi  +
push 0  +
mov byte ptr [esi+0E0h] 1 +
call ds:PostQuitMessage  +
pop edi  +
pop esi  +
retn   +
***
add ecx 0FFFFFFFCh +
call sub_1003C40  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+0E8h] edi +
mov dword ptr [ebp-4] 0FFFFFFF6h +
jle loc_1003D74  +
push ebx  +
mov ebx [ebp+8] +
mov eax [esi] +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
mov ecx esi +
call dword ptr [eax+30h]  +
test al al +
jz loc_1003D65  +
push dword ptr [ebx+4]  +
lea eax [ebp-14h] +
push dword ptr [ebx]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jnz loc_1003D70  +
inc edi  +
cmp edi [esi+0E8h] +
jl loc_1003D42  +
jmp loc_1003D73  +
mov [ebp-4] edi +
pop ebx  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
xor edx edx +
sub eax edx +
jz loc_1003DB4  +
dec eax  +
jz loc_1003DA2  +
dec eax  +
jz loc_1003DBF  +
dec eax  +
jnz loc_1003DBF  +
mov edx [ecx+0E8h] +
dec edx  +
jmp loc_1003DBF  +
mov ecx [ecx+0E8h] +
mov eax [ebp+8] +
lea eax [ecx+eax-1] +
cdq   +
idiv  ecx +
jmp loc_1003DBF  +
mov eax [ebp+8] +
inc eax  +
cdq   +
idiv  dword ptr [ecx+0E8h] +
mov eax edx +
pop ebp  +
retn 8  +
***
mov edx [ecx+0ECh] +
push esi  +
mov esi [ecx+88h] +
lea eax [edx-1] +
imul esi edx +
imul eax [ecx+0A0h] +
add eax esi +
add eax [ecx+98h] +
pop esi  +
add eax [ecx+90h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 2Dh +
push esi  +
mov esi ecx +
jz loc_1003E18  +
dec eax  +
jz loc_1003E14  +
pop esi  +
pop ebp  +
jmp ds:GetSystemMetrics  +
push 2Eh  +
jmp loc_1003E1A  +
push 2Dh  +
call ds:GetSystemMetrics  +
imul eax [esi+0E4h] +
push 60h  +
cdq   +
pop ecx  +
idiv  ecx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
mov edi [esi+9Ch] +
add edi [esi+94h] +
add edi [esi+8Ch] +
call sub_1003DCA  +
mov [esi+58h] eax +
xor eax eax +
cmp [esi+0E1h] al +
jnz loc_1003E6A  +
push 2Eh  +
call sub_1003DF9  +
add eax eax +
add eax edi +
pop edi  +
mov [esi+5Ch] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+0E4h] +
mov eax ecx +
imul eax eax +
push edi  +
cdq   +
push 60h  +
pop edi  +
idiv  edi +
mov edi eax +
mov eax [esi+64h] +
add eax edi +
mov [esi+88h] eax +
xor eax eax +
cmp [esi+0E2h] al +
jz loc_1003EB5  +
mov eax ecx +
imul eax eax +
push 60h  +
cdq   +
pop ebx  +
idiv  ebx +
mov edx [esi+68h] +
add edx edi +
add edx eax +
cmp byte ptr [esi+0E1h] 0 +
mov [esi+8Ch] edx +
jz loc_1003ED8  +
mov eax ecx +
imul eax eax +
push 60h  +
cdq   +
pop ecx  +
idiv  ecx +
jmp loc_1003EE1  +
push 2Dh  +
mov ecx esi +
call sub_1003DF9  +
mov ecx [esi+0E4h] +
mov edi eax +
lea eax [ecx+ecx] +
cdq   +
push 60h  +
pop ebx  +
idiv  ebx +
add eax edi +
cmp byte ptr [esi+0E1h] 0 +
mov [esi+90h] eax +
jz loc_1003F0D  +
mov eax ecx +
push 0FFFFFFA0h  +
cdq   +
pop ecx  +
idiv  ecx +
jmp loc_1003F18  +
push 2Dh  +
mov ecx esi +
call sub_1003DF9  +
add eax eax +
mov edi [esi+0E4h] +
mov [ebp+var_4] eax +
lea eax [edi+edi] +
cdq   +
push 60h  +
pop ebx  +
idiv  ebx +
mov ecx [esi+90h] +
mov [esi+94h] ecx +
add eax ecx +
add eax [ebp+var_4] +
cmp byte ptr [esi+0E1h] 0 +
mov [esi+98h] eax +
jz loc_1003F54  +
mov eax edi +
push 0FFFFFFA0h  +
cdq   +
pop ecx  +
idiv  ecx +
jmp loc_1003F5D  +
push 2Eh  +
mov ecx esi +
call sub_1003DF9  +
mov ecx [esi+90h] +
add ecx eax +
cmp byte ptr [esi+0E1h] 0 +
mov [esi+9Ch] ecx +
jz loc_1003F88  +
mov eax [esi+0E4h] +
add eax eax +
cdq   +
push 60h  +
pop ecx  +
idiv  ecx +
lea eax [eax+eax+1] +
jmp loc_1003F91  +
push 2Dh  +
mov ecx esi +
call sub_1003DF9  +
pop edi  +
mov [esi+0A0h] eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_10057FA  +
test eax eax +
jz loc_1004033  +
mov eax [esi+50h] +
dec eax  +
jz loc_1003FC1  +
dec eax  +
jz loc_1003FCF  +
jmp loc_100403A  +
push 7D2h  +
push dword ptr [esi+10h]  +
call ds:KillTimer  +
mov ebx ds:QueryPerformanceCounter +
and dword ptr [ebp+PerformanceCount] 0 +
and dword ptr [ebp+PerformanceCount+4] 0 +
lea eax [ebp+PerformanceCount] +
push eax  +
mov dword ptr [esi+50h] 3 +
call ebx  +
mov eax dword ptr [ebp+PerformanceCount] +
mov ecx dword ptr [ebp+PerformanceCount+4] +
lea edi [esi+48h] +
sub eax [edi] +
push 0  +
sbb ecx [edi+4] +
push 3E8h  +
push ecx  +
push eax  +
call __allmul  +
push dword ptr [esi+44h]  +
push dword ptr [esi+40h]  +
push edx  +
push eax  +
call __alldiv  +
cmp eax [esi+30h] +
jle loc_1004033  +
push 0  +
push 5  +
push 7D3h  +
push dword ptr [esi+10h]  +
call ds:SetTimer  +
test eax eax +
jz loc_1004033  +
push edi  +
call ebx  +
jmp loc_100403A  +
mov ecx esi +
call sub_1003CB3  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_10067BE  +
mov [ebp+var_C] 0C8h +
mov esi 90h +
cmp eax 60h +
jz loc_1004074  +
cmp eax 78h +
jz loc_1004074  +
cmp eax esi +
jz loc_1004074  +
xor cl cl +
jmp loc_1004076  +
mov cl 1 +
cmp eax 78h +
jl loc_1004088  +
cmp eax esi +
jge loc_100408C  +
mov [ebp+var_C] 0CCh +
jmp loc_1004093  +
cmp eax esi +
jl loc_1004093  +
mov [ebp+var_C] 0D0h +
movzx esi cl +
xor edi edi +
neg esi  +
lea eax [ebp+var_8] +
push eax  +
movzx eax word ptr [ebp+var_C] +
sbb esi esi +
and esi 60h +
push esi  +
push eax  +
push dword ptr [ebx+34h]  +
mov [ebp+var_8] edi +
call sub_10066C5  +
test eax eax +
setnl [ebp+var_1]  +
cmp [ebp+var_1] 0 +
jz loc_10040F8  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_2C] +
stos   +
lea eax [ebp+var_2C] +
push eax  +
push 18h  +
push [ebp+var_8]  +
call ds:GetObjectW  +
test eax eax +
jz loc_10040E9  +
mov eax [ebp+var_28] +
mov [ebx+64h] eax +
mov eax [ebp+var_24] +
mov [ebx+68h] eax +
push [ebp+var_8]  +
call ds:DeleteObject  +
and [ebp+var_8] 0 +
xor edi edi +
cmp [ebx+0Ch] edi +
jnz loc_1004115  +
push dword ptr [ebx+0ECh]  +
mov ecx ebx +
call sub_100375D  +
test eax eax +
setnl [ebp+var_1]  +
cmp [ebx+0Ch] edi +
jz loc_1004182  +
cmp [ebx+0ECh] edi +
mov [ebp+var_10] edi +
jle loc_1004182  +
cmp [ebp+var_1] 0 +
jz loc_1004182  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
push [ebp+var_10]  +
call sub_1002816  +
add eax [ebp+var_C] +
movzx eax ax +
push eax  +
push dword ptr [ebx+34h]  +
call sub_10066C5  +
test eax eax +
setnl [ebp+var_1]  +
cmp [ebp+var_1] 0 +
jz loc_1004174  +
mov eax [ebx+0Ch] +
lea edx [ebp+var_14] +
push edx  +
push edi  +
push [ebp+var_8]  +
mov [ebp+var_14] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
push [ebp+var_8]  +
test eax eax +
setnl [ebp+var_1]  +
call ds:DeleteObject  +
mov [ebp+var_8] edi +
inc [ebp+var_10]  +
mov eax [ebp+var_10] +
cmp eax [ebx+0ECh] +
jl loc_1004120  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
push esi  +
lea eax [ebp+arg_8] +
push eax  +
mov esi ecx +
call sub_1003902  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1004235  +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
test eax eax +
jl loc_1004235  +
push 44h  +
lea eax [ebp+var_4C] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_4] +
mov [ebp+var_44] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_40] eax +
mov eax [ebp+arg_10] +
sub eax [ebp+var_4] +
and [ebp+var_2C] 0 +
add eax [ebp+arg_8] +
and [ebp+var_28] 0 +
cdq   +
sub eax edx +
sar eax 1 +
or [ebp+var_24] 0FFFFFFFFh +
and [ebp+var_14] 0 +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_14] +
sub eax [ebp+var_8] +
add esp 0Ch +
add eax [ebp+arg_C] +
lea ecx [ebp+var_4C] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_38] eax +
mov eax [esi+64h] +
mov [ebp+var_34] eax +
mov eax [esi+68h] +
mov esi [esi+0Ch] +
push ecx  +
mov [ebp+var_4C] 44h +
mov [ebp+var_30] eax +
mov [ebp+var_1C] 10000h +
mov eax [esi] +
push esi  +
call dword ptr [eax+20h]  +
pop esi  +
leave   +
retn 18h  +
***
mov eax [ecx+0E8h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp byte ptr [esi+0DFh] 0 +
jz loc_1004278  +
cmp ebx edi +
jnz loc_1004278  +
cmp [esi+0B0h] edi +
jz loc_1004278  +
mov byte ptr [ebp-1] 1 +
jmp loc_1004284  +
cmp ebx edi +
mov byte ptr [ebp-1] 0 +
jl loc_1004324  +
mov eax [esi] +
call dword ptr [eax+24h]  +
cmp ebx eax +
jge loc_1004324  +
lea edi [esi+ebx*8+0B8h] +
cmp dword ptr [edi] 0 +
jnz loc_1004322  +
cmp byte ptr [ebp-1] 0 +
jz loc_10042AC  +
push 4  +
pop eax  +
jmp loc_10042B2  +
push ebx  +
call sub_1002816  +
mov ebx ds:LoadStringW +
push 0  +
push edi  +
add eax 12Eh +
push eax  +
push dword ptr [esi+30h]  +
call ebx  +
mov [ebp-8] eax +
test eax eax +
jle loc_1004322  +
xor ecx ecx +
push 2  +
inc eax  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-0Ch] eax +
mov [edi] eax +
test eax eax +
jz loc_1004322  +
cmp byte ptr [ebp-1] 0 +
jz loc_10042F7  +
push 4  +
pop eax  +
jmp loc_10042FF  +
push dword ptr [ebp+8]  +
call sub_1002816  +
mov ecx [ebp-8] +
inc ecx  +
push ecx  +
push dword ptr [ebp-0Ch]  +
add eax 12Eh +
push eax  +
push dword ptr [esi+30h]  +
call ebx  +
cmp eax [ebp-8] +
jz loc_1004322  +
push dword ptr [edi]  +
call ??3@YAXPAX@Z  +
and dword ptr [edi] 0 +
pop ecx  +
mov edi [edi] +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80h +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+10h]  +
call ds:GetDC  +
mov edi eax +
xor ebx ebx +
mov [ebp+hDC] edi +
cmp edi ebx +
jz loc_100447B  +
mov [ebp+var_70] ebx +
mov [ebp+var_74] ebx +
cmp [esi+0E1h] bl +
jz loc_10043A8  +
lea eax [ebp+var_60] +
push eax  +
push 0D2h  +
push ebx  +
push 3  +
push edi  +
push dword ptr [esi+8]  +
call GetThemeFont  +
test eax eax +
jl loc_10043A8  +
lea eax [ebp+var_60] +
push eax  +
call ds:CreateFontIndirectW  +
mov [ebp+var_70] eax +
cmp eax ebx +
jz loc_10043A8  +
push eax  +
push edi  +
call ds:SelectObject  +
mov [ebp+var_74] eax +
cmp [esi+0ECh] ebx +
mov [ebp+var_64] ebx +
jle loc_100443F  +
lea eax [esi+0C0h] +
lea edi [esi+4] +
mov [ebp+var_6C] eax +
push [ebp+var_64]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+20h]  +
mov ecx eax +
mov [ebp+var_78] ebx +
lea edx [ecx+2] +
mov bx [ecx] +
inc ecx  +
inc ecx  +
test bx bx +
jnz loc_10043D5  +
sub ecx edx +
lea edx [ebp+var_80] +
push edx  +
sar ecx 1 +
push ecx  +
push eax  +
push [ebp+hDC]  +
call ds:GetTextExtentPoint32W  +
mov ecx [ebp+var_80._cx] +
test eax eax +
jnz loc_10043FC  +
mov ecx [ebp+var_78] +
mov eax [esi+0E4h] +
imul eax eax +
cdq   +
push 60h  +
pop ebx  +
idiv  ebx +
mov edx [esi+88h] +
sub edx eax +
cmp ecx edx +
mov ecx [ebp+var_6C] +
setnle al  +
xor ebx ebx +
mov [ecx] al +
cmp [esi+0E2h] bl +
jnz loc_100442D  +
mov [esi+0E2h] al +
inc [ebp+var_64]  +
mov eax [ebp+var_64] +
add [ebp+var_6C] 8 +
cmp eax [esi+0ECh] +
jl loc_10043C3  +
cmp [esi+0E2h] bl +
jz loc_1004455  +
mov ecx esi +
call sub_1003E77  +
mov ecx esi +
call sub_1003E37  +
cmp [ebp+var_70] ebx +
jz loc_100446F  +
push [ebp+var_74]  +
push [ebp+hDC]  +
call ds:SelectObject  +
push [ebp+var_70]  +
call ds:DeleteObject  +
push [ebp+hDC]  +
push dword ptr [esi+10h]  +
call ds:ReleaseDC  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10077A5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0B4h] +
cmp dword ptr [esi] 0 +
jz loc_10044B6  +
mov eax [esi] +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+20h]  +
lea ecx [edi-4] +
call sub_1003FA1  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea edx [ebp+Rect] +
mov esi ecx +
push edx  +
push [ebp+arg_0]  +
lea ecx [esi+4] +
mov eax [ecx] +
call dword ptr [eax+30h]  +
push 1  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+10h]  +
call ds:InvalidateRect  +
pop esi  +
leave   +
retn 4  +
***
mov eax [ecx+0Ch] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov [ebp+NotificationFilter] 20h +
mov [ebp+var_20] 5 +
mov esi offset dword_1001380 +
lea edi [ebp+var_18] +
movs   +
movs   +
mov eax ecx +
push 0  +
lea ecx [ebp+NotificationFilter] +
movs   +
push ecx  +
push dword ptr [eax+10h]  +
mov [ebp+var_28] eax +
mov bl 1 +
movs   +
call ds:RegisterDeviceNotificationW  +
mov ecx [ebp+var_28] +
mov [ecx+0B0h] eax +
test eax eax +
jz loc_100456A  +
push 0  +
push dword ptr [ecx+10h]  +
call WTSRegisterSessionNotification  +
mov ebx eax +
dec ebx  +
neg ebx  +
sbb bl bl +
inc bl  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_10077A5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ecx+0B8h] +
cmp dword ptr [eax] 0 +
jz loc_10045A1  +
mov eax [eax] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+6Ch] +
cmp eax 0FFFFFFF6h +
jz loc_10045D2  +
push eax  +
mov ecx esi +
call sub_10044C9  +
mov ecx esi +
mov dword ptr [esi+6Ch] 0FFFFFFF6h +
call sub_1003B80  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_10044C9  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_10044C9  +
mov ecx esi +
call sub_1004580  +
inc eax  +
push eax  +
push 0FFFFFFFCh  +
push dword ptr [esi+10h]  +
push 8005h  +
call ds:NotifyWinEvent  +
mov eax [ebp+18h] +
mov byte ptr [eax] 1 +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
call sub_1003CB3  +
mov eax [ebp+10h] +
mov byte ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
call sub_1003FA1  +
mov eax [ebp+10h] +
mov byte ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+0B8h] +
cmp dword ptr [eax] 0 +
jz loc_1004668  +
mov eax [eax] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
pop ebp  +
retn 4  +
***
mov al [ecx+0A8h] +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_1003440  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100345D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_10046E7  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_10046E7  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_10046CC  +
cmp [ecx] di +
jz loc_10046C8  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_10046BE  +
test edx edx +
jnz loc_10046D1  +
mov edi 80070057h +
test esi esi +
jz loc_10046E2  +
test edi edi +
jl loc_10046DF  +
sub eax edx +
mov [esi] eax +
jmp loc_10046E2  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_10046EC  +
mov eax 80070057h +
test eax eax +
jge loc_10046F7  +
test esi esi +
jz loc_10046F7  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+0DCh] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_100472B  +
test esi esi +
jz loc_100472B  +
push 1  +
mov ecx esi +
call sub_100347E  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
or [ebp+var_4] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [esi+10h] edi +
call sub_1004505  +
mov ecx esi +
call sub_1003855  +
push esi  +
xor ebx ebx +
push ebx  +
push edi  +
call ds:SetWindowLongW  +
push ebx  +
push 493E0h  +
push 7D5h  +
push dword ptr [esi+10h]  +
call ds:SetTimer  +
call sub_10057FA  +
mov [esi+14h] eax +
cmp eax ebx +
jz loc_100479A  +
push 2  +
pop eax  +
push 4  +
lea ecx [ebp+arg_0] +
push ecx  +
push eax  +
push edi  +
mov [ebp+arg_0] eax +
call DwmSetWindowAttribute  +
mov ecx esi +
call sub_10036EE  +
lea eax [esi+40h] +
push eax  +
call ds:QueryPerformanceFrequency  +
push 10h  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push dword ptr [esi+10h]  +
mov [ebp+arg_0] eax +
call ds:SetWindowPos  +
cmp [ebp+arg_0] ebx +
jz loc_1004827  +
cmp [esi+14h] ebx +
jz loc_10047DB  +
push 2  +
push 0FFh  +
push ebx  +
push edi  +
call ds:SetLayeredWindowAttributes  +
mov [ebp+arg_0] eax +
cmp [ebp+arg_0] ebx +
jz loc_1004827  +
push 8  +
pop ecx  +
xor eax eax +
mov [ebp+pData.cbSize] 24h +
lea edi [ebp+pData.hWnd] +
stos   +
mov eax [esi+10h] +
mov [ebp+pData.hWnd] eax +
lea eax [ebp+pData] +
push eax  +
push ebx  +
mov [ebp+pData.uCallbackMessage] 409h +
call SHAppBarMessage  +
lea edi [esi+38h] +
push edi  +
lea eax [esi+4] +
push eax  +
call sub_100616A  +
test eax eax +
jge loc_100481C  +
mov [edi] ebx +
mov [esi+54h] bl +
mov [esi+50h] ebx +
mov [ebp+var_4] ebx +
jmp loc_100482E  +
mov ecx esi +
call sub_1003616  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1003616  +
push 0  +
push 0  +
push dword ptr [esi+10h]  +
call ds:SetWindowLongW  +
and dword ptr [esi+10h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 8000h +
jnz loc_100487F  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100487F  +
cmp dword ptr [eax+4] 5 +
jnz loc_100487F  +
call sub_1003CB3  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ecx +
cmp byte ptr [ebx+0E3h] 0 +
push esi  +
push edi  +
jz loc_10048B1  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10048B1  +
cmp [ebx+0B4h] esi +
jz loc_10048B1  +
mov [ebp+var_1] 1 +
jmp loc_10048B8  +
mov esi [ebp+arg_0] +
mov [ebp+var_1] 0 +
cmp [ebp+arg_4] 0 +
jz loc_1004960  +
cmp esi [ebx+6Ch] +
jnz loc_10049FE  +
cmp dword_100A0FC 0 +
jz loc_10049FE  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_10048E9  +
test al al +
jnz loc_10049FE  +
mov ecx dword_100A0E8 +
mov edx dword_100A0EC +
mov eax 80000000h +
and ecx 1 +
and edx eax +
or ecx edx +
jz loc_10049FE  +
mov ecx dword_100A0F0 +
mov edi dword_100A0F4 +
mov edx ecx +
mov esi edi +
and edx 1 +
and esi eax +
cmp edx ecx +
jnz loc_10049FE  +
cmp esi edi +
jnz loc_10049FE  +
cmp [ebp+var_1] 0 +
jz loc_1004937  +
push 4  +
pop eax  +
jmp loc_100493F  +
push [ebp+arg_0]  +
call sub_1002816  +
add eax 12Eh +
push eax  +
push offset dword_1001370  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DFA  +
jmp loc_10049FE  +
cmp esi [ebx+0E8h] +
jz loc_10049FE  +
call sub_1004580  +
cmp esi eax +
jnz loc_10049FE  +
cmp dword_100A0FC 0 +
jz loc_10049F5  +
mov al byte_100A100 +
cmp al 4 +
jnb loc_100498F  +
test al al +
jnz loc_10049F5  +
mov ecx dword_100A0E8 +
mov edx dword_100A0EC +
mov eax 80000000h +
and ecx 1 +
and edx eax +
or ecx edx +
jz loc_10049F5  +
mov ecx dword_100A0F0 +
mov edi dword_100A0F4 +
mov edx ecx +
mov esi edi +
and edx 1 +
and esi eax +
cmp edx ecx +
jnz loc_10049F5  +
cmp esi edi +
jnz loc_10049F5  +
cmp [ebp+var_1] 0 +
jz loc_10049D1  +
push 4  +
pop eax  +
jmp loc_10049D9  +
push [ebp+arg_0]  +
call sub_1002816  +
add eax 12Eh +
push eax  +
push offset dword_1001370  +
push dword_100A0D4  +
push dword_100A0D0  +
call sub_1001DFA  +
mov eax [ebp+arg_0] +
mov [ebx+0E8h] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E0h +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
movzx ebx byte ptr [esi+0ACh] +
neg ebx  +
push edi  +
mov edi [ebp+arg_4] +
sbb ebx ebx +
lea ecx [esi+4] +
mov [ebp+var_D4] eax +
mov eax [ecx] +
and ebx 20000h +
push edi  +
or ebx 8805h +
call dword ptr [eax+20h]  +
mov [ebp+var_D8] eax +
mov ecx esi +
test eax eax +
jz loc_1004BF4  +
push 0  +
push edi  +
call sub_1004888  +
lea eax [ebp+arg_8] +
push eax  +
mov ecx esi +
call sub_100397E  +
xor eax eax +
cmp [esi+edi*8+0C0h] al +
setz al  +
dec eax  +
and eax 0FFFFFFF0h +
add eax 20h +
or ebx eax +
cmp byte ptr [esi+0E1h] 0 +
jz loc_1004ADD  +
push 3Ch  +
xor edi edi +
lea eax [ebp+var_60.lfFaceName+4] +
push edi  +
push eax  +
mov dword ptr [ebp+var_60.lfFaceName] 40h +
call memset  +
add esp 0Ch +
cmp [esi+14h] edi +
jz loc_1004AB5  +
mov dword ptr [ebp+var_60.lfFaceName+4] 2000h +
lea eax [ebp+var_60.lfFaceName] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+var_D8]  +
push edi  +
push 3  +
push [ebp+var_D4]  +
push dword ptr [esi+8]  +
call DrawThemeTextEx  +
jmp loc_1004BF9  +
lea eax [ebp+var_E0] +
push eax  +
push 100h  +
push [ebp+var_D8]  +
call sub_100469B  +
test eax eax +
jl loc_1004BF9  +
push 6Ch  +
pop eax  +
xor esi esi +
push esi  +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push 29h  +
mov [ebp+var_DC] esi +
mov [ebp+pvParam] eax +
call ds:SystemParametersInfoW  +
test eax eax +
setnz [ebp+var_CD]  +
cmp [ebp+var_CD] 0 +
jz loc_1004B9C  +
push 17h  +
pop ecx  +
push 60h  +
push 48h  +
push [ebp+nNumber]  +
lea esi [ebp+nNumber] +
lea edi [ebp+var_60] +
movs   +
mov esi ds:MulDiv +
call esi  +
push 48h  +
push 5Ah  +
push [ebp+var_D4]  +
mov edi eax +
call ds:GetDeviceCaps  +
push eax  +
push edi  +
call esi  +
and [ebp+var_60.lfWidth] 0 +
neg eax  +
mov [ebp+var_60.lfHeight] eax +
push 8  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_60.lfFaceName] +
stos   +
lea eax [ebp+var_60] +
push eax  +
call ds:CreateFontIndirectW  +
mov esi eax +
test esi esi +
jz loc_1004B9C  +
push esi  +
push [ebp+var_D4]  +
call ds:SelectObject  +
mov [ebp+var_DC] eax +
push 8  +
call ds:GetSysColor  +
push eax  +
push [ebp+var_D4]  +
call ds:SetTextColor  +
push 0  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+var_E0]  +
push [ebp+var_D8]  +
push [ebp+var_D4]  +
call ds:DrawTextExW  +
cmp [ebp+var_CD] 0 +
jz loc_1004BF9  +
push esi  +
call ds:DeleteObject  +
push [ebp+var_DC]  +
push [ebp+var_D4]  +
call ds:SelectObject  +
jmp loc_1004BF9  +
call sub_1003CB3  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10077A5  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea edx [ebp+rc] +
mov esi ecx +
push edx  +
push [ebp+arg_4]  +
lea ecx [esi+4] +
mov eax [ecx] +
call dword ptr [eax+30h]  +
push 2Dh  +
mov ecx esi +
call sub_1003DF9  +
neg eax  +
push eax  +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:InflateRect  +
lea eax [ebp+rc] +
push eax  +
call ds:CreateRectRgnIndirect  +
mov [ebp+arg_4] eax +
test eax eax +
jz loc_1004CA0  +
xor eax eax +
cmp [ebp+arg_8] al +
push ebx  +
setz al  +
push edi  +
lea eax ds:0Dh[eax*4] +
push eax  +
call ds:GetSysColorBrush  +
mov edi ds:DeleteObject +
mov ebx eax +
test ebx ebx +
jz loc_1004C99  +
push 2Dh  +
mov ecx esi +
call sub_1003DF9  +
push eax  +
push 2Dh  +
mov ecx esi +
call sub_1003DF9  +
push eax  +
push ebx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:FrameRgn  +
push ebx  +
call edi  +
push [ebp+arg_4]  +
call edi  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebp+var_8] +
call sub_10058E2  +
mov ecx ebx +
call sub_10039F6  +
push 0  +
sub esp 10h +
mov edi esp +
push [ebp+hDC]  +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_8] +
movs   +
call sub_1005912  +
xor esi esi +
mov [ebp+hDC] eax +
cmp eax esi +
jz loc_1004E81  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+10h]  +
call ds:GetClientRect  +
cmp [ebx+14h] esi +
jnz loc_1004D11  +
push esi  +
lea eax [ebp+Rect] +
push eax  +
push esi  +
push esi  +
push [ebp+hDC]  +
push dword ptr [ebx+8]  +
call DrawThemeBackground  +
sub esp 10h +
cmp byte ptr [ebx+0E1h] 0 +
mov edi esp +
push [ebp+hDC]  +
lea esi [ebp+Rect] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
jz loc_1004DDC  +
call sub_1003A6D  +
mov ecx ebx +
call sub_1004580  +
cmp eax 0FFFFFFF6h +
jz loc_1004D81  +
lea edi [ebx+4] +
mov esi [edi] +
lea eax [ebp+rc] +
push eax  +
mov ecx ebx +
add esi 30h +
call sub_1004580  +
push eax  +
mov ecx edi +
call dword ptr [esi]  +
push 0  +
lea eax [ebp+rc] +
push eax  +
push 0  +
mov ecx ebx +
call sub_1004580  +
sub eax [ebx+6Ch] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 5 +
push eax  +
push [ebp+hDC]  +
push dword ptr [ebx+8]  +
call DrawThemeBackground  +
cmp dword ptr [ebx+6Ch] 0FFFFFFF6h +
jz loc_1004E25  +
mov esi [ebx+6Ch] +
mov ecx ebx +
call sub_1004580  +
cmp eax esi +
jz loc_1004E25  +
lea edx [ebp+rc] +
lea ecx [ebx+4] +
mov eax [ecx] +
push edx  +
push esi  +
call dword ptr [eax+30h]  +
push 0  +
lea eax [ebp+rc] +
push eax  +
xor eax eax +
cmp [ebx+74h] al +
push 0  +
setnz al  +
lea eax ds:1[eax*4] +
push eax  +
push [ebp+hDC]  +
push dword ptr [ebx+8]  +
call DrawThemeBackground  +
push 1  +
push dword ptr [ebx+6Ch]  +
mov ecx ebx +
call sub_1004888  +
jmp loc_1004E25  +
call sub_1003A15  +
mov ecx ebx +
call sub_1004580  +
cmp eax 0FFFFFFF6h +
jz loc_1004E01  +
push 1  +
mov ecx ebx +
call sub_1004580  +
push eax  +
push [ebp+hDC]  +
mov ecx ebx +
call sub_1004C0F  +
cmp dword ptr [ebx+6Ch] 0FFFFFFF6h +
jz loc_1004E25  +
mov esi [ebx+6Ch] +
mov ecx ebx +
call sub_1004580  +
cmp eax esi +
jz loc_1004E25  +
movzx eax byte ptr [ebx+74h] +
push eax  +
push esi  +
push [ebp+hDC]  +
mov ecx ebx +
call sub_1004C0F  +
and [ebp+var_4] 0 +
cmp dword ptr [ebx+0ECh] 0 +
jle loc_1004E81  +
lea edx [ebp+rc] +
push edx  +
push [ebp+var_4]  +
lea ecx [ebx+4] +
mov eax [ecx] +
call dword ptr [eax+30h]  +
sub esp 10h +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+rc] +
push [ebp+hDC]  +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_1004A0A  +
sub esp 10h +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+rc] +
push [ebp+hDC]  +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_100418F  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [ebx+0ECh] +
jl loc_1004E32  +
push 1  +
lea ecx [ebp+var_8] +
call sub_10058ED  +
lea ecx [ebp+var_8] +
call sub_1005961  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+arg_4] +
push edx  +
mov byte ptr [esi+74h] 1 +
call dword ptr [eax+28h]  +
mov [esi+70h] eax +
cmp eax 0FFFFFFF6h +
jz loc_1004EC7  +
push eax  +
mov ecx esi +
call sub_10044C9  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+pt.y]  +
mov esi ecx +
push [ebp+pt.x]  +
lea edi [esi+78h] +
push edi  +
call ds:PtInRect  +
test eax eax +
jnz loc_1004F45  +
push edi  +
call ds:SetRectEmpty  +
lea ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+pt] +
push edx  +
call dword ptr [eax+28h]  +
mov edi eax +
mov eax [esi+6Ch] +
cmp edi eax +
jnz loc_1004F1A  +
movzx edx byte ptr [esi+74h] +
xor ecx ecx +
cmp [esi+70h] edi +
setz cl  +
cmp edx ecx +
jz loc_1004F45  +
push eax  +
mov ecx esi +
call sub_10044C9  +
mov eax [esi+70h] +
cmp eax 0FFFFFFF6h +
jnz loc_1004F2D  +
mov [esi+6Ch] edi +
cmp eax edi +
setz al  +
mov [esi+74h] al +
mov eax [esi+6Ch] +
cmp eax 0FFFFFFF6h +
jz loc_1004F45  +
push eax  +
mov ecx esi +
call sub_10044C9  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetAsyncKeyState +
mov esi ecx +
push 5Bh  +
mov dword ptr [esi+50h] 2 +
call edi  +
mov ebx 8000h +
mov ecx ebx +
test ax cx +
jnz loc_1004F8D  +
push 5Ch  +
call edi  +
test ax bx +
jnz loc_1004F8D  +
cmp byte ptr [esi+75h] 0 +
jnz loc_1004F8D  +
pop edi  +
mov ecx esi +
pop esi  +
pop ebx  +
jmp sub_1003CB3  +
push dword ptr [esi+10h]  +
call ds:SetFocus  +
call ds:GetForegroundWindow  +
mov edi eax +
call ds:GetFocus  +
mov ecx [esi+10h] +
cmp edi ecx +
jnz loc_1004F83  +
cmp eax ecx +
jnz loc_1004F83  +
mov ecx esi +
call sub_1003BCE  +
movzx eax byte ptr [esi+28h] +
xor edi edi +
mov [esi+54h] al +
cmp [esi+14h] edi +
jz loc_1004FD1  +
push 2  +
push eax  +
push edi  +
push dword ptr [esi+10h]  +
call ds:SetLayeredWindowAttributes  +
mov ecx esi +
call sub_1003B80  +
push edi  +
mov edi ds:NotifyWinEvent +
push 0FFFFFFFCh  +
push dword ptr [esi+10h]  +
push 3  +
call edi  +
mov ecx esi +
call sub_1004580  +
inc eax  +
push eax  +
push 0FFFFFFFCh  +
push dword ptr [esi+10h]  +
push 8005h  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
cmp [ebp+arg_0] eax +
mov [ebp+var_4] eax +
jg loc_1005037  +
fild  [ebp+arg_0] +
push ecx  +
fidiv  [ebp+var_4] +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fstp  [esp+0Ch+var_C] +
push dword ptr [esi+28h]  +
push dword ptr [esi+24h]  +
call sub_100589A  +
jmp loc_100503E  +
call sub_1003CB3  +
xor eax eax +
mov cl [esi+54h] +
cmp al cl +
jnb loc_1005058  +
push 2  +
push eax  +
push 0  +
push dword ptr [esi+10h]  +
mov [esi+54h] al +
call ds:SetLayeredWindowAttributes  +
jmp loc_100508C  +
mov eax [esi+28h] +
movzx ecx cl +
sub ecx eax +
mov [ebp+arg_0] ecx +
mov ecx [esi+24h] +
sub ecx eax +
fild  [ebp+arg_0] +
mov [ebp+arg_0] ecx +
push ecx  +
fidiv  [ebp+arg_0] +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fstp  [esp+0Ch+var_C] +
push dword ptr [esi+2Ch]  +
push 0  +
call sub_1005852  +
sub [esi+48h] eax +
sbb dword ptr [esi+4Ch] 0 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+70h] +
cmp edi 0FFFFFFF6h +
jz loc_10050C4  +
lea ecx [ebp+arg_4] +
lea ebx [esi+4] +
mov eax [ebx] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+28h]  +
cmp edi eax +
jnz loc_10050C4  +
mov eax [ebx] +
push edi  +
mov ecx ebx +
call dword ptr [eax+18h]  +
jmp loc_10050D6  +
push 0FFFFFFF6h  +
pop eax  +
cmp edi eax +
jz loc_10050D6  +
push edi  +
mov ecx esi +
mov [esi+6Ch] eax +
call sub_10044C9  +
pop edi  +
mov byte ptr [esi+74h] 0 +
mov dword ptr [esi+70h] 0FFFFFFF6h +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+arg_4] +
push edx  +
call dword ptr [eax+28h]  +
mov edi eax +
cmp edi 0FFFFFFF6h +
jz loc_100511C  +
mov ecx esi +
call sub_1004580  +
cmp edi eax +
jz loc_100511C  +
push edi  +
mov ecx esi +
call sub_100464D  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi ecx +
lea eax [esi+48h] +
push eax  +
call ds:QueryPerformanceCounter  +
mov al [ebp+arg_0] +
xor ebx ebx +
mov [esi+75h] al +
mov eax [esi+50h] +
inc ebx  +
mov [ebp+var_1] 0 +
test eax eax +
jz loc_100516A  +
cmp eax 3 +
jnz loc_100516D  +
push 7D3h  +
push dword ptr [esi+10h]  +
call ds:KillTimer  +
call ds:ReleaseCapture  +
mov [ebp+var_1] bl +
push 7F00h  +
push 0  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
push dword ptr [esi+10h]  +
call ds:SetForegroundWindow  +
test eax eax +
jnz loc_10051CE  +
push edi  +
push 7  +
pop ecx  +
push 12h  +
lea edi [ebp+pInputs] +
stos   +
mov edi ds:SendInput +
pop eax  +
mov word ptr [ebp+pInputs.anonymous_0] ax +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push ebx  +
mov [ebp+pInputs.type] ebx +
call edi  +
cmp eax ebx +
jnz loc_10051BD  +
push dword ptr [esi+10h]  +
call ds:SetForegroundWindow  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push ebx  +
mov dword ptr [ebp+pInputs.anonymous_0+4] 2 +
call edi  +
pop edi  +
push dword ptr [esi+10h]  +
call ds:SetCapture  +
mov ecx esi +
call sub_1004044  +
mov ecx esi +
call sub_1003E77  +
mov ecx esi +
mov dword ptr [esi+6Ch] 0FFFFFFF6h +
call sub_1003E37  +
mov ecx esi +
call sub_1004332  +
call sub_10057FA  +
test eax eax +
jz loc_1005230  +
cmp [ebp+var_1] 0 +
mov [esi+50h] ebx +
jz loc_1005230  +
cmp [ebp+arg_0] 0 +
jnz loc_1005230  +
cmp byte ptr [esi+0E1h] 0 +
jnz loc_1005230  +
push 0  +
push ebx  +
push 7D2h  +
push dword ptr [esi+10h]  +
call ds:SetTimer  +
test eax eax +
jnz loc_1005237  +
mov ecx esi +
call sub_1004F50  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
add ecx 0FFFFFFFCh +
jmp sub_1004580  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0B4h] +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
jz loc_100526F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] ebx +
mov eax [ebp+8] +
test eax eax +
jz loc_1005296  +
mov ecx [eax] +
push esi  +
push offset dword_10014B0  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jl loc_1005296  +
mov esi [esi] +
mov eax [esi] +
add edi 0E8h +
push edi  +
push esi  +
call dword ptr [eax+10h]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
cmp [ebp+8] al +
jz loc_10052BE  +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFFCh +
call sub_1005127  +
jmp loc_10052CA  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
push eax  +
call ds:ShowWindow  +
pop ebp  +
retn 8  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1004701  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov dword ptr [esi+4] offset off_1001598 +
xor ebx ebx +
push edi  +
lea ecx [esi+1Ch] +
mov dword ptr [esi] offset off_1001530 +
mov dword ptr [esi+4] offset off_10014F0 +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
call sub_10061BA  +
or dword ptr [esi+0E8h] 0FFFFFFFFh +
push 0FFFFFFF6h  +
pop eax  +
mov [esi+34h] ebx +
mov [esi+38h] ebx +
mov [esi+50h] ebx +
mov [esi+6Ch] eax +
mov [esi+70h] eax +
mov [esi+74h] bl +
mov [esi+75h] bl +
mov [esi+0ACh] bl +
mov [esi+0ADh] bl +
mov [esi+0B0h] ebx +
mov [esi+0B4h] ebx +
mov [esi+0B8h] ebx +
mov [esi+0DCh] ebx +
mov [esi+0E0h] bl +
mov [esi+0E1h] bl +
mov [esi+0E2h] bl +
mov [esi+0ECh] ebx +
mov [esi+68h] ebx +
mov [esi+64h] ebx +
call sub_10067BE  +
mov [esi+0E4h] eax +
push 8  +
pop ecx  +
xor eax eax +
lea edi [esi+0BCh] +
stos   +
lea eax [esi+78h] +
push eax  +
call ds:SetRectEmpty  +
call IsThemeActive  +
test eax eax +
setnz al  +
mov [esi+0E1h] al +
call sub_10033B3  +
test eax eax +
setnz al  +
mov [esi+0E3h] al +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp+PerformanceCount] 0 +
and dword ptr [ebp+PerformanceCount+4] 0 +
push esi  +
lea eax [ebp+PerformanceCount] +
push eax  +
mov esi ecx +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount] +
sub eax [esi+48h] +
mov ecx dword ptr [ebp+PerformanceCount+4] +
sbb ecx [esi+4Ch] +
push 0  +
push 3E8h  +
push ecx  +
push eax  +
call __allmul  +
push dword ptr [esi+44h]  +
push dword ptr [esi+40h]  +
push edx  +
push eax  +
call __alldiv  +
mov edx [ebp+arg_0] +
cmp edx 7D2h +
jz loc_1005436  +
mov ecx 7D3h +
cmp edx ecx +
jz loc_100542C  +
jbe loc_100543D  +
cmp edx 7D5h +
ja loc_100543D  +
mov ecx esi +
call sub_1003FA1  +
jmp loc_100543D  +
push eax  +
mov ecx esi +
call sub_1005006  +
jmp loc_100543D  +
mov ecx esi +
call sub_1004F50  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
push edi  +
push 0  +
push eax  +
mov [ebp-50h] eax +
call ds:GetWindowLongW  +
and dword ptr [ebp-48h] 0 +
mov ecx [ebp+0Ch] +
xor edi edi +
mov ebx eax +
inc edi  +
test ebx ebx +
jnz loc_1005486  +
cmp ecx edi +
jnz loc_100576F  +
mov eax 201h +
cmp ecx eax +
ja loc_10056AB  +
jz loc_1005694  +
cmp ecx 20h +
ja loc_10055DB  +
jz loc_10055AE  +
mov eax ecx +
dec eax  +
jz loc_1005572  +
dec eax  +
jz loc_1005556  +
sub eax 6 +
jz loc_10056D7  +
sub eax 7 +
jz loc_10054D7  +
sub eax 5 +
jnz loc_100576F  +
mov [ebp-48h] edi +
jmp loc_1005780  +
cmp dword ptr [ebx+14h] 0 +
jz loc_1005504  +
call sub_10067BE  +
imul eax eax +
push 60h  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp-5Ch] eax +
mov [ebp-58h] eax +
mov [ebp-54h] eax +
mov [ebp-50h] eax +
lea eax [ebp-5Ch] +
push eax  +
push dword ptr [ebx+10h]  +
call DwmExtendFrameIntoClientArea  +
push 0  +
lea eax [ebp-6Ch] +
push eax  +
push dword ptr [ebx+10h]  +
call ds:GetUpdateRect  +
test eax eax +
jz loc_1005780  +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebx+10h]  +
call ds:BeginPaint  +
test eax eax +
jz loc_1005780  +
sub esp 10h +
mov edi esp +
lea esi [ebp-6Ch] +
movs   +
movs   +
movs   +
push eax  +
mov ecx ebx +
movs   +
call sub_1004CAA  +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebx+10h]  +
call ds:EndPaint  +
jmp loc_1005780  +
mov ecx ebx +
call sub_100483D  +
test ebx ebx +
jz loc_1005780  +
push edi  +
mov ecx ebx +
call sub_100347E  +
jmp loc_1005780  +
push 0F0h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100558A  +
mov ecx eax +
call sub_10052E2  +
jmp loc_100558C  +
xor eax eax +
test eax eax +
jz loc_10055A5  +
mov ecx [esi+4] +
push dword ptr [ebp-50h]  +
mov [eax+34h] ecx +
mov ecx eax +
call sub_1004738  +
jmp loc_100577D  +
or dword ptr [ebp-48h] 0FFFFFFFFh +
jmp loc_1005780  +
lea eax [ebp-54h] +
push eax  +
call ds:GetCursorPos  +
lea eax [ebp-54h] +
push eax  +
push dword ptr [ebx+10h]  +
call ds:ScreenToClient  +
push dword ptr [ebp-50h]  +
movzx eax si +
push dword ptr [ebp-54h]  +
mov ecx ebx +
push eax  +
call sub_1003B61  +
jmp loc_100577D  +
mov eax ecx +
sub eax 3Dh +
jz loc_1005646  +
sub eax 41h +
jz loc_10056D7  +
sub eax 82h +
jz loc_1005630  +
sub eax 13h +
jz loc_1005621  +
sub eax 0EDh +
jnz loc_100576F  +
movzx edi si +
shr esi 10h +
push esi  +
push edi  +
push 1  +
mov ecx ebx +
call sub_1003B61  +
push esi  +
push edi  +
mov ecx ebx +
call sub_1004ED1  +
jmp loc_1005780  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_10053C2  +
jmp loc_1005780  +
cmp dword ptr [ebp+10h] 0Dh +
jnz loc_1005780  +
mov ecx ebx +
call sub_1003594  +
jmp loc_1005780  +
cmp dword ptr [ebx+38h] 0 +
jz loc_100576F  +
cmp esi 0FFFFFFFCh +
jnz loc_100576F  +
mov ebx [ebx+38h] +
and dword ptr [ebp-4Ch] 0 +
mov eax [ebx] +
lea ecx [ebp-4Ch] +
push ecx  +
mov edi offset dword_10015D8 +
push edi  +
push ebx  +
call dword ptr [eax]  +
test eax eax +
jl loc_100576C  +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp+10h]  +
push edi  +
call LresultFromObject  +
mov [ebp-48h] eax +
mov eax [ebp-4Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005780  +
movzx eax si +
shr esi 10h +
push esi  +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_1004E9F  +
jmp loc_1005780  +
mov eax 311h +
cmp ecx eax +
ja loc_1005727  +
jz loc_10056D7  +
mov eax ecx +
sub eax 202h +
jz loc_1005713  +
sub eax 3 +
jz loc_10056FF  +
sub eax 13h +
jz loc_10056F3  +
dec eax  +
jz loc_10056E3  +
sub eax 98h +
jnz loc_100576F  +
mov ecx ebx +
call sub_1003CB3  +
jmp loc_1005780  +
push esi  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_100485F  +
jmp loc_1005780  +
mov ecx ebx +
call sub_1003FA1  +
jmp loc_10054CF  +
***
movzx eax si +
shr esi 10h +
push esi  +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_10050ED  +
jmp loc_1005780  +
movzx eax si +
shr esi 10h +
push esi  +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_1005096  +
jmp loc_1005780  +
cmp ecx 31Ah +
jz loc_10056D7  +
cmp ecx 31Eh +
jz loc_10056D7  +
cmp ecx 400h +
jbe loc_100576F  +
cmp ecx 406h +
jbe loc_1005762  +
cmp ecx 409h +
jnz loc_100576F  +
cmp dword ptr [ebp+10h] 2 +
jnz loc_100576F  +
test esi esi +
jz loc_100576F  +
mov ecx ebx +
call sub_1003FA1  +
jmp loc_1005780  +
push ecx  +
mov ecx ebx +
call sub_10035AD  +
jmp loc_100577D  +
mov ecx [ebp+0Ch] +
push esi  +
push dword ptr [ebp+10h]  +
push ecx  +
push dword ptr [ebp-50h]  +
call ds:DefWindowProcW  +
mov [ebp-48h] eax +
mov ecx [ebp-4] +
mov eax [ebp-48h] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10077A5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax word_100A10C +
sub esp 28h +
test ax ax +
jnz loc_10057E7  +
and [ebp+WndClass.style] 0 +
push edi  +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp+WndClass.lpfnWndProc] +
stos   +
mov eax [ebp+arg_0] +
mov [ebp+WndClass.hInstance] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.lpszClassName] offset ClassName +
mov [ebp+WndClass.lpfnWndProc] offset loc_1005447 +
mov [ebp+WndClass.cbWndExtra] 4 +
call ds:RegisterClassW  +
mov word_100A10C ax +
pop edi  +
xor ecx ecx +
test ax ax +
setnz cl  +
mov eax ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
call DwmIsCompositionEnabled  +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push 4  +
pop eax  +
mov [ebp+pdwType] eax +
mov [ebp+pcbData] eax +
lea eax [ebp+pcbData] +
push eax  +
lea eax [ebp+pvData] +
push eax  +
lea eax [ebp+pdwType] +
push eax  +
push [ebp+pvData]  +
push [ebp+pszSubKey]  +
push [ebp+hkey]  +
call ds:SHGetValueW  +
test eax eax +
mov eax [ebp+arg_C] +
jnz locret_1005849  +
mov eax [ebp+pvData] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_8] +
fmul  ds:dbl_10015F0 +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
call _CIsin  +
fstp  [ebp+arg_8] +
mov eax [ebp+arg_4] +
fld  [ebp+arg_8] +
sub eax [ebp+arg_0] +
mov [ebp+arg_8] eax +
fild  [ebp+arg_8] +
test eax eax +
jge loc_1005887  +
fadd  ds:flt_10015E8 +
fmulp st(1) st +
call _ftol2  +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_8] +
fmul  ds:dbl_10015F0 +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
call _CIcos  +
fstp  [ebp+arg_8] +
mov eax [ebp+arg_4] +
fld  [ebp+arg_8] +
sub eax [ebp+arg_0] +
mov [ebp+arg_8] eax +
fild  [ebp+arg_8] +
test eax eax +
jge loc_10058CF  +
fadd  ds:flt_10015E8 +
fmulp st(1) st +
call _ftol2  +
add eax [ebp+arg_0] +
pop ebp  +
retn 0Ch  +
***
and dword ptr [eax] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1005908  +
push [ebp+arg_0]  +
push eax  +
call EndBufferedPaint  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor eax eax +
and [ebp+var_4] 0 +
lea edi [ebp+var_10] +
stos   +
stos   +
stos   +
mov eax [ebp+arg_14] +
or eax 1 +
mov [ebp+var_10] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push 2  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
mov [ebp+var_14] 10h +
call BeginBufferedPaint  +
mov [esi] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 18h  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100597F  +
mov eax offset word_10015F8 +
push eax  +
call SysAllocString  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 10h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10059FD  +
test esi esi +
jz loc_10059FD  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+70h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset off_1001684  +
push dword ptr [ebp+8]  +
call QISearch  +
pop ebp  +
retn 0Ch  +
***
mov eax 80004001h +
retn 8  +
***
mov eax 80004001h +
retn 10h  +
***
mov eax 80004001h +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_1005A7F  +
mov eax [ebp+8] +
cmp [eax+4] edi +
jz loc_1005A76  +
mov ecx [eax+4] +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov [esi] eax +
jmp loc_1005A84  +
mov [esi] edi +
mov edi 80004005h +
jmp loc_1005A84  +
mov edi 80004003h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax 80020003h +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov edx [ebp+0Ch] +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov dword ptr [ebp-4] 80020003h +
cmp edx eax +
jz loc_1005BC8  +
mov ebx [ebp+10h] +
cmp ebx eax +
jz loc_1005BC8  +
mov ecx [ebp+14h] +
cmp ecx eax +
jz loc_1005BC8  +
mov edi [ebp+18h] +
cmp edi eax +
jz loc_1005BC8  +
mov esi [ebp+8] +
mov [edx] eax +
mov [ebx] eax +
mov [ecx] eax +
mov [edi] eax +
mov ecx [esi+8] +
cmp ecx eax +
jnz loc_1005AFC  +
mov dword ptr [ebp-4] 80004005h +
jmp loc_1005BCF  +
cmp word ptr [ebp+1Ch] 3 +
jnz loc_1005BBF  +
mov edx [ebp+24h] +
cmp edx eax +
jnz loc_1005B4D  +
lea eax [ebp-14h] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
push eax  +
call ds:GetWindowRect  +
test eax eax +
jz loc_1005BCF  +
mov eax [ebp-14h] +
mov ecx [ebp+0Ch] +
mov edx [ebp-0Ch] +
mov [ecx] eax +
mov ecx [ebp-10h] +
sub edx eax +
mov eax [ebp+14h] +
mov [ebx] ecx +
mov [eax] edx +
mov eax [ebp-8] +
sub eax ecx +
mov [edi] eax +
and dword ptr [ebp-4] 0 +
jmp loc_1005BCF  +
lea eax [edx-1] +
cmp eax 0FFFFFFF6h +
jz loc_1005BCF  +
mov edx [ecx] +
lea edi [ebp-14h] +
push edi  +
push eax  +
call dword ptr [edx+30h]  +
test al al +
jz loc_1005BCF  +
mov ecx [esi+8] +
mov eax edi +
push eax  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
mov edi ds:ClientToScreen +
push eax  +
call edi  +
mov ecx [esi+8] +
lea eax [ebp-0Ch] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
push eax  +
call edi  +
cmp byte ptr [esi+0Ch] 0 +
mov edx [ebp-0Ch] +
mov eax [ebp-14h] +
mov ecx edx +
jnz loc_1005B96  +
mov ecx eax +
mov edi [ebp+0Ch] +
mov [edi] ecx +
mov ecx [ebp-10h] +
mov [ebx] ecx +
cmp byte ptr [esi+0Ch] 0 +
jz loc_1005BAA  +
sub eax edx +
jmp loc_1005BAE  +
sub edx eax +
mov eax edx +
mov edx [ebp+14h] +
mov [edx] eax +
mov eax [ebp-8] +
sub eax ecx +
mov ecx [ebp+18h] +
mov [ecx] eax +
jmp loc_1005B44  +
***
mov dword ptr [ebp-4] 80070057h +
jmp loc_1005BCF  +
mov dword ptr [ebp-4] 80004003h +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+20h] +
push esi  +
xor esi esi +
cmp ebx esi +
jnz loc_1005BF7  +
mov dword ptr [ebp+20h] 80004003h +
jmp loc_1005C42  +
cmp word ptr [ebp+10h] 3 +
jnz loc_1005C6E  +
push ebx  +
call VariantInit  +
push 3  +
pop eax  +
mov [ebx] ax +
mov eax [ebp+8] +
mov [ebx+8] esi +
mov ecx [eax+8] +
cmp ecx esi +
jnz loc_1005C21  +
mov dword ptr [ebp+20h] 80004005h +
jmp loc_1005C42  +
mov eax [ebp+18h] +
cmp eax esi +
jnz loc_1005C4F  +
mov eax [ebp+0Ch] +
sub eax 7 +
mov [ebp+20h] esi +
jz loc_1005C4B  +
dec eax  +
jnz loc_1005C6E  +
push 3  +
push esi  +
mov eax [ecx] +
call dword ptr [eax+14h]  +
inc eax  +
mov [ebx+8] eax +
mov eax [ebp+20h] +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
push 2  +
jmp loc_1005C38  +
***
lea edx [eax-1] +
cmp edx 0FFFFFFF6h +
jz loc_1005C6E  +
mov eax [ebp+0Ch] +
mov [ebp+20h] esi +
cmp eax 3 +
jz loc_1005C7B  +
jle loc_1005C6E  +
cmp eax 5 +
jle loc_1005C77  +
cmp eax 6 +
jz loc_1005C7B  +
mov dword ptr [ebp+20h] 80070057h +
jmp loc_1005C42  +
***
push esi  +
push edx  +
jmp loc_1005C39  +
***
push 1  +
jmp loc_1005C78  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
mov [ebp-8] eax +
mov eax [ebp+10h] +
push edi  +
mov ebx 80004005h +
mov [ebp-4] eax +
test esi esi +
jz loc_1005CF6  +
push esi  +
call VariantInit  +
mov edi [ebp+8] +
and dword ptr [esi+8] 0 +
push 3  +
pop eax  +
mov [esi] ax +
cmp dword ptr [edi+8] 0 +
jz loc_1005CFB  +
mov ecx [edi+8] +
lea eax [ebp-8] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
push eax  +
call ds:ScreenToClient  +
test eax eax +
jz loc_1005CFB  +
mov ecx [edi+8] +
mov eax [ecx] +
lea edx [ebp-8] +
push edx  +
call dword ptr [eax+28h]  +
cmp eax 0FFFFFFF6h +
jnz loc_1005CEE  +
and dword ptr [esi+8] 0 +
jmp loc_1005CF2  +
inc eax  +
mov [esi+8] eax +
xor ebx ebx +
jmp loc_1005CFB  +
mov ebx 80004003h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov ecx [ecx+8] +
mov eax 80070057h +
test ecx ecx +
jnz loc_1005D24  +
mov eax 80004005h +
jmp loc_1005D3B  +
cmp word ptr [ebp+0Ch] 3 +
jnz loc_1005D3B  +
mov edx [ebp+14h] +
test edx edx +
jz loc_1005D3B  +
mov eax [ecx] +
dec edx  +
push edx  +
call dword ptr [eax+18h]  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp word ptr [ebp+0Ch] 3 +
jz loc_1005D66  +
mov eax [ebp+1Ch] +
test eax eax +
jz loc_1005D5F  +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
jmp loc_1005D6B  +
mov eax 80004003h +
jmp loc_1005D6B  +
mov eax 80070057h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1005D97  +
call ds:GetDesktopWindow  +
push dword ptr [ebp+0Ch]  +
push offset dword_1001C40  +
push 0  +
push eax  +
call AccessibleObjectFromWindow  +
jmp loc_1005D9C  +
mov eax 80004003h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_1005DD2  +
mov eax [ebp+8] +
cmp [eax+8] edi +
jz loc_1005DC9  +
mov ecx [eax+8] +
mov eax [ecx] +
call dword ptr [eax+24h]  +
mov [esi] eax +
jmp loc_1005DD7  +
mov [esi] edi +
mov edi 80004005h +
jmp loc_1005DD7  +
mov edi 80004003h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push esi  +
mov esi [ebp+1Ch] +
push edi  +
test esi esi +
jz loc_1005E6D  +
and dword ptr [esi] 0 +
mov ecx [eax+8] +
test ecx ecx +
jnz loc_1005E16  +
mov edi 80004005h +
jmp loc_1005E72  +
cmp word ptr [ebp+0Ch] 3 +
jnz loc_1005E66  +
mov eax [ebp+14h] +
xor edi edi +
inc edi  +
test eax eax +
jnz loc_1005E50  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
push 12Ch  +
push dword_100A114  +
call ds:LoadStringW  +
test eax eax +
jle loc_1005E72  +
lea eax [ebp-20Ch] +
jmp loc_1005E5B  +
mov edx [ecx] +
dec eax  +
push eax  +
call dword ptr [edx+20h]  +
test eax eax +
jz loc_1005E72  +
push esi  +
push eax  +
call sub_100596E  +
mov edi eax +
jmp loc_1005E72  +
mov edi 80070057h +
jmp loc_1005E72  +
mov edi 80004003h +
mov ecx [ebp-4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10077A5  +
leave   +
retn 18h  +
***
mov eax 80004001h +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+1Ch] +
push edi  +
test esi esi +
jz loc_1005EE7  +
cmp word ptr [ebp+0Ch] 3 +
jnz loc_1005EE0  +
mov edi [ebp+14h] +
push esi  +
call VariantInit  +
push 3  +
pop eax  +
mov [esi] ax +
test edi edi +
jnz loc_1005EC8  +
mov dword ptr [esi+8] 21h +
jmp loc_1005ED5  +
dec edi  +
cmp edi 3 +
ja loc_1005ED9  +
mov dword ptr [esi+8] 22h +
xor eax eax +
jmp loc_1005EEC  +
mov eax 80020003h +
jmp loc_1005EEC  +
mov eax 80070057h +
jmp loc_1005EEC  +
mov eax 80004003h +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+1Ch] +
push edi  +
test esi esi +
jz loc_1005F7B  +
push esi  +
call VariantInit  +
mov edi [ebp+8] +
push 3  +
pop eax  +
mov [esi] ax +
mov ecx [edi+8] +
test ecx ecx +
jnz loc_1005F23  +
mov eax 80004005h +
jmp loc_1005F80  +
cmp word ptr [ebp+0Ch] 3 +
jnz loc_1005F74  +
mov eax [ecx] +
mov esi [ebp+14h] +
push ebx  +
call dword ptr [eax+2Ch]  +
xor ebx ebx +
inc ebx  +
mov [ebp+8] eax +
test esi esi +
jz loc_1005F62  +
dec esi  +
cmp esi 3 +
ja loc_1005F6D  +
mov ecx [edi+8] +
mov eax [ecx] +
push esi  +
mov ebx 100000h +
call dword ptr [eax+34h]  +
test al al +
jnz loc_1005F5A  +
mov ebx 118000h +
cmp [ebp+8] esi +
jnz loc_1005F62  +
or ebx 4 +
xor eax eax +
mov ecx [ebp+1Ch] +
mov [ecx+8] ebx +
pop ebx  +
jmp loc_1005F80  +
mov eax 80020003h +
jmp loc_1005F64  +
***
mov eax 80070057h +
jmp loc_1005F80  +
mov eax 80004003h +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+1Ch] +
xor eax eax +
inc eax  +
test ecx ecx +
jz loc_1005F9F  +
and dword ptr [ecx] 0 +
jmp loc_1005FA4  +
mov eax 80004003h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
xor eax eax +
inc eax  +
test edx edx +
jz loc_1005FCB  +
mov ecx [ebp+20h] +
test ecx ecx +
jz loc_1005FCB  +
and dword ptr [edx] 0 +
and dword ptr [ecx] 0 +
jmp loc_1005FD0  +
mov eax 80004003h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi 80004003h +
test esi esi +
jz loc_100601E  +
push esi  +
call VariantInit  +
and dword ptr [esi+8] 0 +
push 3  +
pop eax  +
mov [esi] ax +
mov eax [ebp+8] +
cmp dword ptr [eax+8] 0 +
jnz loc_100600B  +
add edi 2 +
jmp loc_100601E  +
mov ecx [eax+8] +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
cmp eax 0FFFFFFF6h +
jz loc_100601E  +
inc eax  +
mov [esi+8] eax +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
mov eax 80004003h +
test esi esi +
jz loc_1006049  +
push esi  +
call VariantInit  +
xor eax eax +
mov [esi] ax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi [ebp+1Ch] +
push edi  +
mov edi 80004005h +
test esi esi +
jz loc_10060AD  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
push 12Dh  +
push dword_100A114  +
call ds:LoadStringW  +
test eax eax +
jle loc_10060A8  +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
call sub_100596E  +
mov edi eax +
jmp loc_10060B2  +
and dword ptr [esi] 0 +
jmp loc_10060B2  +
mov edi 80004003h +
mov ecx [ebp-4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10077A5  +
leave   +
retn 18h  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10059D6  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10059BB  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005A0A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001610 +
mov dword ptr [esi+4] offset off_10015FC +
jz loc_1006118  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
lea edx [esi+8] +
push edx  +
push offset dword_10014D0  +
mov dword ptr [esi] offset off_1001610 +
mov dword ptr [esi+4] offset off_10015FC +
mov dword ptr [esi+10h] 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
call sub_100635C  +
test eax eax +
setnz al  +
mov [esi+0Ch] al +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_10061AB  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_10061AB  +
and dword ptr [esi] 0 +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1006198  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1006124  +
jmp loc_100619A  +
xor eax eax +
test eax eax +
jz loc_10061A4  +
mov [esi] eax +
xor eax eax +
jmp loc_10061B0  +
mov eax 8007000Eh +
jmp loc_10061B0  +
mov eax 80004003h +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push 7  +
push offset pvData  +
mov ebx offset pszSubKey +
push ebx  +
mov edi 80000001h +
push edi  +
mov esi ecx +
call sub_1005814  +
push 5  +
push offset aRows  +
push ebx  +
push edi  +
mov [esi+4] eax +
call sub_1005814  +
push 0  +
push offset aStartalpha  +
push ebx  +
push edi  +
mov [esi] eax +
call sub_1005814  +
push 0FFh  +
push offset aFinalalpha  +
push ebx  +
push edi  +
mov [esi+8] eax +
call sub_1005814  +
push 0C8h  +
push offset aFadeout_ms  +
push ebx  +
push edi  +
mov [esi+0Ch] eax +
call sub_1005814  +
push 0C8h  +
push offset aFadeoutthresho  +
push ebx  +
push edi  +
mov [esi+10h] eax +
call sub_1005814  +
mov ecx [esi+4] +
push 14h  +
pop edi  +
push 3  +
pop edx  +
cmp ecx edx +
mov [esi+14h] eax +
jge loc_100624B  +
mov [esi+4] edx +
jmp loc_1006252  +
cmp ecx edi +
jle loc_1006252  +
mov [esi+4] edi +
mov ecx [esi] +
xor ebx ebx +
inc ebx  +
cmp ecx ebx +
jge loc_100625F  +
mov [esi] ebx +
jmp loc_1006265  +
cmp ecx edi +
jle loc_1006265  +
mov [esi] edi +
mov edx [esi+0Ch] +
mov ecx 80h +
cmp edx ecx +
jl loc_1006278  +
add ecx 7Fh +
cmp edx ecx +
jle loc_100627B  +
mov [esi+0Ch] ecx +
mov edx [esi+10h] +
cmp edx ebx +
mov ecx 7D0h +
jge loc_100628C  +
mov [esi+10h] ebx +
jmp loc_1006293  +
cmp edx ecx +
jle loc_1006293  +
mov [esi+10h] ecx +
cmp eax ebx +
jge loc_100629C  +
mov [esi+14h] ebx +
jmp loc_10062A3  +
cmp eax ecx +
jle loc_10062A3  +
mov [esi+14h] ecx +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push 10h  +
lea eax [ebp+LCData] +
push eax  +
push 58h  +
push [ebp+Locale]  +
xor esi esi +
call ds:GetLocaleInfoW  +
test eax eax +
jle loc_10062DF  +
mov esi [ebp+var_14] +
mov eax 8000000h +
and esi eax +
sub esi eax +
neg esi  +
sbb esi esi +
inc esi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp Target 0 +
jnz loc_100632D  +
push esi  +
xor esi esi +
call ds:GetUserDefaultUILanguage  +
mov word_100A118 ax +
test ax ax +
jz loc_1006318  +
movzx eax ax +
push eax  +
call sub_10062AE  +
mov esi eax +
xor eax eax +
test esi esi +
setz al  +
inc eax  +
push eax  +
push offset Target  +
call ds:InterlockedExchange  +
pop esi  +
cmp Target 1 +
jnz loc_1006347  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1006347  +
mov cx word_100A118 +
mov [eax] cx +
xor eax eax +
cmp Target 1 +
setz al  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+hKey] 0 +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push 0  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_10063E4  +
push 4  +
pop eax  +
mov [ebp+cbData] eax +
mov [ebp+Type] eax +
lea eax [ebp+cbData] +
push eax  +
push offset Data  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax Data +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov edx [eax+4] +
push esi  +
mov esi [ecx+4] +
cmp edx esi +
jle loc_100640B  +
xor eax eax +
inc eax  +
jmp loc_1006434  +
jge loc_1006412  +
or eax 0FFFFFFFFh +
jmp loc_1006434  +
mov edx [eax] +
mov esi [ecx] +
cmp edx esi +
ja loc_1006406  +
jb loc_100640D  +
mov edx [eax+8] +
mov esi [ecx+8] +
cmp edx esi +
ja loc_1006406  +
jb loc_100640D  +
mov eax [eax+1Ch] +
mov ecx [ecx+1Ch] +
cmp eax ecx +
ja loc_1006406  +
sbb eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetDisplayConfigBufferSizes  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_14] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
cmp ebx 1 +
jz loc_1006465  +
cmp ebx 2 +
jnz loc_1006467  +
xor eax eax +
mov esi [ebp+arg_4] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push ebx  +
call ds:QueryDisplayConfig  +
mov edi eax +
test edi edi +
jnz loc_10064A5  +
cmp ebx 4 +
jz loc_10064A5  +
call sub_100638D  +
test eax eax +
jz loc_10064A5  +
push offset sub_10063F0  +
push 48h  +
push dword ptr [esi]  +
push [ebp+arg_8]  +
call ds:qsort  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push offset LibFileName  +
call ds:LoadLibraryA  +
mov ebx eax +
xor esi esi +
cmp ebx esi +
jnz loc_10064DA  +
mov eax 80004005h +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push offset ProcName  +
push ebx  +
call ds:__imp_GetProcAddress  +
mov ecx eax +
cmp ecx esi +
jnz loc_10064FC  +
mov esi 80004005h +
push ebx  +
call ds:__imp_FreeLibrary  +
mov eax esi +
jmp loc_10064D4  +
xor eax eax +
cmp [ebp+arg_0] al +
push edi  +
lea edi [ebp+var_4] +
stos   +
mov edx [ebp+var_4] +
setnz al  +
and edx 0FFFFFFFAh +
mov [ebp+var_8] esi +
and eax 1 +
shl eax 2 +
or eax edx +
or eax 1Ah +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
call ecx  +
pop edi  +
test eax eax +
jge loc_10064F1  +
jmp loc_10064EC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
call sub_10064B3  +
mov eax [ebp+arg_0] +
or eax 880h +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
call ds:SetDisplayConfig  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_8] 0FFFFFFFFh +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
push 57h  +
pop ebx  +
test ebx ebx +
jz loc_1006615  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push 4  +
call ds:GetDisplayConfigBufferSizes  +
test eax eax +
jnz loc_100661D  +
mov eax [ebp+var_10] +
xor esi esi +
xor edi edi +
test eax eax +
jbe loc_10065B4  +
xor ecx ecx +
push 48h  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov esi eax +
mov eax [ebp+var_C] +
test eax eax +
jbe loc_10065D2  +
xor ecx ecx +
push 40h  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov edi eax +
lea eax [ebp+var_8] +
push eax  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
push esi  +
lea eax [ebp+var_10] +
push eax  +
push 4  +
call ds:QueryDisplayConfig  +
mov ebx eax +
test esi esi +
jz loc_10065F5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
test edi edi +
jz loc_1006600  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
test ebx ebx +
jz loc_1006608  +
or [ebp+var_8] 0FFFFFFFFh +
inc [ebp+var_4]  +
cmp [ebp+var_4] 3 +
jb loc_1006572  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
or eax 0FFFFFFFFh +
jmp loc_1006618  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub ecx 0 +
push 2  +
pop eax  +
jz loc_100663E  +
dec ecx  +
jnz loc_1006641  +
xor eax eax +
jmp loc_1006641  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
and dword ptr [edi] 0 +
lea eax [ebp+arg_10] +
push eax  +
push 0  +
call sub_1006EF4  +
mov esi eax +
test esi esi +
jl loc_10066B8  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_10] +
push [ebp+arg_0]  +
call sub_10069BC  +
mov esi eax +
test esi esi +
jl loc_10066AF  +
push [ebp+arg_8]  +
mov ecx [ebp+arg_10] +
call sub_10069FC  +
mov esi eax +
test esi esi +
jl loc_10066AF  +
push [ebp+arg_C]  +
call sub_1006627  +
mov ecx [ebp+arg_10] +
push eax  +
call sub_1006ADF  +
mov esi eax +
test esi esi +
jl loc_10066AF  +
mov ecx [ebp+arg_10] +
push edi  +
call sub_1006E7B  +
mov esi eax +
mov eax [ebp+arg_10] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100664A  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
xor esi esi +
inc esi  +
test byte ptr dword_100A134 1 +
jnz loc_1006702  +
or dword_100A134 esi +
or dword_100A130 0FFFFFFFFh +
cmp dword_100A130 0FFFFFFFFh +
jnz loc_100672B  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_100672B  +
push offset aIsprocessdpiaw  +
push eax  +
call ds:__imp_GetProcAddress  +
mov dword_100A130 eax +
mov eax dword_100A130 +
test eax eax +
jz loc_1006738  +
call eax  +
mov esi eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_10066E6  +
cmp dword_100A014 0FFFFFFFFh +
jz loc_1006757  +
cmp dword_100A12C eax +
jz locret_10067B8  +
push edi  +
push 0  +
mov dword_100A12C eax +
call ds:GetDC  +
mov edi eax +
test edi edi +
jz loc_10067A3  +
push esi  +
mov esi ds:GetDeviceCaps +
push 58h  +
push edi  +
call esi  +
push 5Ah  +
push edi  +
mov dword_100A014 eax +
call esi  +
mov dword_100A018 eax +
xor eax eax +
cmp dword_100A014 60h +
push edi  +
setnle al  +
push 0  +
mov dword_100A128 eax +
call ds:ReleaseDC  +
pop esi  +
pop edi  +
retn   +
and dword_100A128 0 +
push 60h  +
pop eax  +
mov dword_100A014 eax +
mov dword_100A018 eax +
pop edi  +
retn   +
***
call sub_1006741  +
mov eax dword_100A018 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
push dword ptr [ebp+wLanguage]  +
xor ebx ebx +
push [ebp+lpName]  +
push [ebp+lpType]  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
mov edi eax +
test edi edi +
jz loc_100681B  +
push edi  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_100681B  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi [ebp+arg_10] +
mov ebx eax +
test esi esi +
jz loc_100681A  +
push edi  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov [esi] eax +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor esi esi +
mov [ebp+var_8] 80004005h +
mov [eax] ebx +
mov [ebp+var_4] ebx +
xor edi edi +
cmp edi 0Ch +
jnb loc_100686B  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push [ebp+lpName]  +
push ds:off_1001A30[edi]  +
push [ebp+hModule]  +
call sub_10067CE  +
mov esi eax +
add edi 4 +
cmp esi ebx +
jz loc_1006847  +
cmp esi ebx +
jnz loc_10068AE  +
cmp [ebp+arg_C] ebx +
jz loc_10068F0  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push [ebp+lpName]  +
push 2  +
push [ebp+hModule]  +
call sub_10067CE  +
mov esi eax +
cmp esi ebx +
jz loc_10068F0  +
mov eax [esi+14h] +
cmp eax ebx +
jz loc_10068A8  +
lea ecx [eax+37h] +
and ecx 0FFFFFFF0h +
cmp [ebp+var_4] ecx +
jbe loc_10068A8  +
add eax 28h +
add esi eax +
sub [ebp+var_4] eax +
jmp loc_10068AA  +
xor esi esi +
cmp esi ebx +
jz loc_10068F0  +
mov edi [ebp+arg_0] +
mov eax [edi] +
lea ecx [ebp+lpName] +
push ecx  +
push edi  +
call dword ptr [eax+38h]  +
cmp eax ebx +
mov [ebp+var_8] eax +
jl loc_10068F0  +
push [ebp+var_4]  +
mov eax [ebp+lpName] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+40h]  +
cmp eax ebx +
mov [ebp+var_8] eax +
jl loc_10068E7  +
push [ebp+arg_10]  +
mov eax [edi] +
push ebx  +
push ebx  +
push [ebp+lpName]  +
push edi  +
call dword ptr [eax+10h]  +
mov [ebp+var_8] eax +
mov eax [ebp+lpName] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov dword ptr [esi] offset off_1001A60 +
test eax eax +
jz loc_100691B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10068FF  +
test [ebp+arg_0] 1 +
jz loc_1006953  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov ebx ecx +
mov esi [ebx+8] +
neg esi  +
sbb esi esi +
and esi 80004021h +
jl loc_1006989  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1006988  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov [ebx+8] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
add ecx 8 +
mov eax [ecx] +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
jns locret_10069B6  +
push ecx  +
push 236h  +
call WICCreateImagingFactory_Proxy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov esi ecx +
mov edi 80070057h +
test eax eax +
jnz loc_10069E0  +
push offset aImageres_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_10069EF  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_10069EF  +
mov [esi+0Ch] eax +
mov [esi+10h] ecx +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
test eax eax +
jnz loc_1006A10  +
call sub_10067BE  +
mov [esi+14h] eax +
push 60h  +
pop eax  +
cmp eax [esi+14h] +
sbb eax eax +
neg eax  +
mov [esi+18h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov [ebp+var_10] ecx +
lea ecx [ebp+var_8] +
push ecx  +
xor ebx ebx +
push esi  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
call dword ptr [eax+30h]  +
mov edi eax +
cmp edi ebx +
jl loc_1006ABD  +
mov [ebp+arg_0] ebx +
cmp [ebp+var_8] ebx +
jbe loc_1006ABD  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1006A6D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov eax [esi] +
lea ecx [ebp+var_4] +
push ecx  +
push [ebp+arg_0]  +
push esi  +
call dword ptr [eax+34h]  +
mov edi eax +
cmp edi ebx +
jl loc_1006AB2  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
lea edx [ebp+var_18] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_1006AB2  +
fld  [ebp+var_18] +
fadd  ds:dbl_1001A88 +
call _ftol2  +
mov ecx eax +
mov eax [ebp+var_10] +
mov [ebp+var_C] ecx +
cmp ecx [eax+14h] +
jnb loc_1006AC0  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
cmp eax [ebp+var_8] +
jb loc_1006A5D  +
mov ecx [ebp+var_C] +
mov eax [ebp+arg_4] +
mov edx [ebp+var_4] +
mov [eax] edx +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_1006AD1  +
mov [eax] ecx +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+1Ch] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_8] 0 +
push esi  +
push edi  +
mov esi ecx +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+18h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+8]  +
call sub_1006828  +
mov edi eax +
test edi edi +
jl loc_1006B57  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
mov ecx esi +
call sub_1006A2C  +
mov edi eax +
test edi edi +
jl loc_1006B4E  +
push [ebp+arg_8]  +
mov esi [ebp+var_C] +
push [ebp+arg_4]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov edi eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
push 2000h  +
push 0  +
push 0  +
mov esi ecx +
push 0  +
push dword ptr [esi+10h]  +
mov edi 80004005h +
push dword ptr [esi+0Ch]  +
call ds:LoadImageW  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1006BD7  +
mov eax [esi+8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push dword ptr [esi+1Ch]  +
push 0  +
push [ebp+var_8]  +
push eax  +
call dword ptr [ecx+54h]  +
mov edi eax +
test edi edi +
jl loc_1006BCE  +
push [ebp+arg_8]  +
mov eax [ebp+var_4] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_8]  +
call ds:DeleteObject  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 60h +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1006C05  +
push 1  +
call sub_1006939  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_1001C50 +
xor eax eax +
cmps   +
jnz loc_1006C3B  +
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [ebp+10h] +
mov [eax] esi +
xor eax eax +
jmp loc_1006C46  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
lea edx [ebp+var_1C] +
push edx  +
lea edx [ebp+nNumber] +
push edx  +
mov ebx ecx +
mov ecx [eax] +
xor edi edi +
push eax  +
mov [ebp+var_18] edi +
mov [ebp+var_4] edi +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1006DDA  +
mov [ebp+var_10] edi +
xor eax eax +
push eax  +
lea edi [ebp+var_14] +
stos   +
mov edi [ebp+arg_0] +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+nNumber] +
push eax  +
push edi  +
call sub_1006F73  +
mov esi eax +
test esi esi +
jl loc_1006DDA  +
mov eax [ebp+nNumerator] +
and [ebp+arg_0] 0 +
cmp eax [ebp+nDenominator] +
jz loc_1006D76  +
push [ebp+nDenominator]  +
mov esi ds:MulDiv +
push eax  +
push [ebp+nNumber]  +
call esi  +
push [ebp+nDenominator]  +
mov [ebp+nNumber] eax +
push [ebp+nNumerator]  +
push [ebp+var_1C]  +
call esi  +
mov [ebp+var_1C] eax +
mov eax [ebx+8] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jl loc_1006DCD  +
mov eax [ebp+var_8] +
mov ecx [eax] +
push 3  +
push [ebp+var_1C]  +
push [ebp+nNumber]  +
push edi  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
test esi esi +
jl loc_1006D6B  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1001A90  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1006D6B  +
cmp [ebp+var_C] 8 +
jg loc_1006D6B  +
and [ebp+nDenominator] 0 +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push dword ptr [ebx+8]  +
call sub_1006FE2  +
mov esi eax +
test esi esi +
jl loc_1006D5C  +
lea eax [ebp+nDenominator] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push 8  +
push [ebp+var_10]  +
push [ebp+var_C]  +
push [ebp+arg_0]  +
push dword ptr [ebx+8]  +
call sub_1007251  +
mov esi eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+nDenominator] +
mov [ebp+arg_0] eax +
mov eax [ebp+var_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1006DAE  +
mov eax [edi] +
lea ecx [ebp+arg_0] +
push ecx  +
push offset dword_1001A90  +
push edi  +
call dword ptr [eax]  +
mov esi eax +
test esi esi +
jl loc_1006DCD  +
cmp [ebp+var_C] 8 +
jg loc_1006DAE  +
mov ebx [ebx+8] +
mov eax [ebx] +
lea ecx [ebp+var_4] +
push ecx  +
push ebx  +
call dword ptr [eax+24h]  +
mov esi eax +
test esi esi +
jl loc_1006DCD  +
push [ebp+var_4]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+18h]  +
mov esi eax +
test esi esi +
jl loc_1006DCD  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+var_14]  +
lea eax [ebp+nNumber] +
push [ebp+var_10]  +
push [ebp+var_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_10071BF  +
mov esi eax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1006DDA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_18] +
mov [eax] ecx +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1006DEF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
push esi  +
push edi  +
mov esi ecx +
call sub_1006996  +
mov edi eax +
test edi edi +
jl loc_1006E66  +
lea eax [ebp+var_4] +
push eax  +
mov edi offset dword_1001A90 +
push edi  +
lea eax [ebp+nDenominator] +
push eax  +
mov ecx esi +
call sub_1006AF5  +
test eax eax +
jge loc_1006E47  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
lea eax [ebp+nDenominator] +
push eax  +
mov ecx esi +
call sub_1006B6C  +
mov edi eax +
test edi edi +
jl loc_1006E66  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+nDenominator]  +
mov ecx esi +
push dword ptr [esi+14h]  +
push [ebp+var_4]  +
call sub_1006C51  +
mov edi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_C] +
mov [eax] ecx +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [ebp+var_4] edi +
cmp [esi+18h] edi +
jnz loc_1006EB0  +
push 2000h  +
push edi  +
push edi  +
push edi  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
call ds:LoadImageW  +
mov [ebp+var_4] eax +
cmp eax edi +
jz loc_1006EAE  +
xor eax eax +
jmp loc_1006EB9  +
mov ecx esi +
lea eax [ebp+var_4] +
push eax  +
call sub_1006DFD  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_4] +
pop edi  +
mov [ecx] edx +
pop esi  +
leave   +
retn 4  +
***
mov eax ecx +
xor edx edx +
xor ecx ecx +
inc ecx  +
mov dword ptr [eax] offset off_1001A60 +
mov [eax+4] ecx +
mov [eax+8] edx +
mov [eax+0Ch] edx +
mov [eax+10h] edx +
mov [eax+14h] edx +
mov [eax+18h] edx +
mov [eax+1Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 20h  +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1006F17  +
mov ecx eax +
call sub_1006ECC  +
mov esi eax +
jmp loc_1006F19  +
xor esi esi +
test esi esi +
jz loc_1006F35  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100695F  +
mov edi eax +
test edi edi +
jge loc_1006F35  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
xor esi esi +
mov eax [ebp+arg_4] +
mov [eax] esi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
movzx eax byte ptr [eax+0Fh] +
cmp eax 43h +
jnb loc_1006F68  +
mov eax ds:dword_1001AA0[eax*4] +
test eax eax +
jle loc_1006F68  +
cmp eax 20h +
jle loc_1006F6A  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100A020 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_C] +
lea edx [ebp+var_14] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_1006FCD  +
lea eax [ebp+var_14] +
push eax  +
call sub_1006F47  +
mov [esi] eax +
test edi edi +
jz loc_1006FC0  +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
imul ecx eax +
add ecx 1Fh +
sar ecx 3 +
and ecx 0FFFFFFFCh +
mov [edi] ecx +
test eax eax +
jle loc_1006FC8  +
xor eax eax +
jmp loc_1006FCD  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10077A5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 408h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
lea edx [ebp+arg_0] +
stos   +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push edx  +
push eax  +
xor ebx ebx +
call dword ptr [ecx+24h]  +
mov esi eax +
test esi esi +
jl loc_1007087  +
mov eax [ebp+arg_4] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
test esi esi +
jl loc_100707E  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
lea edx [ebp+var_408] +
push edx  +
push 100h  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
test esi esi +
jl loc_100707E  +
mov ecx [ebp+var_8] +
test ecx ecx +
jbe loc_100707E  +
mov eax ecx +
shl eax 2 +
cmp byte ptr [ebp+eax-409h] 0FFh +
jz loc_100705B  +
mov eax [ebp+eax-40Ch] +
jmp loc_1007078  +
xor eax eax +
dec ecx  +
jz loc_100707E  +
cmp byte ptr [ebp+eax*4+var_408+3] 0FFh +
jnz loc_1007071  +
inc eax  +
cmp eax ecx +
jb loc_1007060  +
jmp loc_100707E  +
mov eax [ebp+eax*4+var_408] +
xor ebx ebx +
mov [ebp+var_4] eax +
inc ebx  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_4] +
mov [eax] ebx +
mov eax [ebp+arg_C] +
pop edi  +
mov [eax] ecx +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_1C] +
xor ebx ebx +
push 428h  +
lea eax [ebp+var_428] +
push ebx  +
push eax  +
mov [edi] ebx +
call memset  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
mov eax [eax+4] +
mov esi [ebp+arg_C] +
mov [ebp+var_428.bmiHeader.biHeight] eax +
xor eax eax +
inc eax  +
mov [ebp+var_428.bmiHeader.biPlanes] ax +
mov ax word ptr [ebp+arg_4] +
add esp 0Ch +
mov [ebp+var_428.bmiHeader.biSize] 28h +
mov [ebp+var_428.bmiHeader.biWidth] ecx +
mov [ebp+var_428.bmiHeader.biBitCount] ax +
mov [ebp+var_428.bmiHeader.biCompression] ebx +
cmp esi ebx +
jz loc_100716B  +
mov eax [esi] +
lea ecx [ebp+arg_8] +
push ecx  +
push esi  +
call dword ptr [eax+20h]  +
test eax eax +
jl loc_100716B  +
mov eax [esi] +
lea ecx [ebp+arg_8] +
push ecx  +
lea ecx [ebp+var_428.bmiColors] +
push ecx  +
mov edi 100h +
push edi  +
push esi  +
call dword ptr [eax+24h]  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_10071B0  +
mov eax [ebp+arg_8] +
cmp eax edi +
ja loc_100715C  +
cmp [ebp+arg_10] ebx +
jz loc_100714E  +
mov ecx [ebp+arg_14] +
mov [ebp+eax*4+var_428.bmiHeader.biClrImportant] ecx +
mov [ebp+var_428.bmiHeader.biClrImportant] eax +
mov [ebp+var_428.bmiHeader.biClrUsed] eax +
jmp loc_1007163  +
mov [ebp+arg_4] 80070057h +
cmp [ebp+arg_4] ebx +
jl loc_10071B0  +
mov edi [ebp+arg_1C] +
mov esi [ebp+arg_0] +
mov [ebp+arg_4] 8007000Eh +
cmp esi ebx +
jnz loc_1007186  +
push ebx  +
call ds:GetDC  +
mov esi eax +
cmp esi ebx +
jz loc_10071B0  +
push ebx  +
push ebx  +
push [ebp+arg_18]  +
lea eax [ebp+var_428] +
push ebx  +
push eax  +
push esi  +
call ds:CreateDIBSection  +
mov [edi] eax +
cmp [ebp+arg_0] esi +
jz loc_10071A9  +
push esi  +
push ebx  +
call ds:ReleaseDC  +
cmp [edi] ebx +
jz loc_10071B0  +
mov [ebp+arg_4] ebx +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov [ebp+var_C] eax +
mov eax [esi+4] +
neg eax  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_8] eax +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
push edi  +
call sub_1006F73  +
test eax eax +
jl loc_100723E  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_10]  +
lea eax [ebp+var_C] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
push 0  +
call sub_10070A2  +
test eax eax +
jl loc_100723E  +
mov eax [esi] +
push [ebp+arg_0]  +
mov ecx [edi] +
and [ebp+var_14] 0 +
and [ebp+var_10] 0 +
mov [ebp+var_C] eax +
mov eax [esi+4] +
mov [ebp+var_8] eax +
imul eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call dword ptr [ecx+1Ch]  +
mov ecx [ebp+arg_14] +
mov edx [ebp+var_4] +
pop edi  +
mov [ecx] edx +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_1C] +
and dword ptr [eax] 0 +
mov eax [ebp+arg_18] +
and dword ptr [eax] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi 80070057h +
cmp ebx 4 +
jz loc_100727B  +
cmp ebx 8 +
jnz loc_1007348  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
lea ecx [ebp+arg_0] +
push ecx  +
push edi  +
call dword ptr [eax+28h]  +
mov esi eax +
test esi esi +
jl loc_1007347  +
mov eax [edi] +
lea ecx [ebp+arg_8] +
push ecx  +
push edi  +
call dword ptr [eax+24h]  +
mov esi eax +
test esi esi +
jl loc_100733E  +
cmp [ebp+arg_14] 0 +
mov eax [ebp+arg_8] +
push [ebp+arg_C]  +
jnz loc_10072C6  +
mov edx [eax] +
xor esi esi +
inc esi  +
mov ecx ebx +
shl esi cl +
push esi  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [edx+14h]  +
jmp loc_10072CF  +
push [ebp+arg_14]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jl loc_1007336  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jl loc_1007336  +
cmp [ebp+arg_C] 0 +
jz loc_10072F2  +
fld1   +
jmp loc_10072F4  +
fldz   +
mov ecx offset dword_1001C70 +
cmp ebx 8 +
jz loc_1007303  +
mov ecx offset dword_1001C60 +
push [ebp+arg_14]  +
mov eax [ebp+arg_0] +
mov edx [eax] +
push ecx  +
push ecx  +
fstp  [esp+40h+var_40] +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [edx+20h]  +
mov esi eax +
test esi esi +
jl loc_1007336  +
push [ebp+arg_1C]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_1001A90  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_18] +
mov [ecx] eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
push ebx  +
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jge loc_10073A1  +
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_10073BD  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_10073D9  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_100741A  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_10073E7  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_1007415  +
cmp edx [esp+arg_4] +
ja loc_1007415  +
jb loc_1007416  +
cmp eax [esp+arg_0] +
jbe loc_1007416  +
dec esi  +
xor edx edx +
mov eax esi +
dec edi  +
jnz loc_1007424  +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_1007449  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1007485  +
test eax eax +
jnz loc_100748A  +
mov ecx [esi] +
test ecx ecx +
jz loc_1007482  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1007476  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100A160 +
push offset dword_100A150  +
push dword_100A15C  +
mov dword_100A150 eax +
push offset unk_100A140  +
push offset unk_100A144  +
push offset unk_100A13C  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100A14C eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jz loc_100752A  +
cmp eax esi +
jnz loc_100751D  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_100752D  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1007504  +
xor esi esi +
inc esi  +
mov eax dword_100A4B0 +
cmp eax esi +
jnz loc_1007540  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100756F  +
mov eax dword_100A4B0 +
test eax eax +
jnz loc_1007569  +
mov dword_100A4B0 esi +
push offset dword_10012BC  +
push offset dword_10012B0  +
call sub_1007469  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100756F  +
jmp loc_1007697  +
mov dword_100A158 esi +
mov eax dword_100A4B0 +
cmp eax esi +
jnz loc_1007593  +
push offset dword_10012AC  +
push offset dword_10012A4  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100A4B0 2 +
test ebx ebx +
jnz loc_100759F  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100A4B8 0 +
jz loc_10075C3  +
push offset dword_100A4B8  +
call sub_1007919  +
pop ecx  +
test eax eax +
jz loc_10075C3  +
push 0  +
push 2  +
push 0  +
call dword_100A4B8  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_10075DD  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_10075ED  +
cmp al 20h +
ja loc_10075ED  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_10075DD  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_10075F9  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_10075FC  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push offset __ImageBase  +
call _WinMain@16  +
mov dword_100A154 eax +
cmp dword_100A148 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_100762E  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1007641  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_10075CA  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_100A154 eax +
cmp dword_100A148 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_100A158 0 +
jnz loc_1007682  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100A154 +
jmp loc_10076A3  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase.unused ax +
jz loc_10076C0  +
xor eax eax +
jmp loc_100770D  +
mov eax ds:dword_100003C +
lea eax __ImageBase.unused[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_10076BC  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_10076FA  +
cmp ecx 20Bh +
jnz loc_10076BC  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10076BC  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1007708  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10076BC  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100A148 eax +
call sub_1007AB2  +
push eax  +
call ds:__set_app_type  +
or dword_100A4A8 0FFFFFFFFh +
or dword_100A4AC 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100A168 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100A164 +
mov [eax] ecx +
call sub_1007A44  +
cmp dword_100A038 0 +
jnz loc_1007766  +
push offset sub_1007A44  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1007A2C  +
xor eax eax +
retn   +
***
call sub_1007AF1  +
jmp ___tmainCRTStartup  +
***
jmp ds:_purecall  +
***
cmp ecx dword_100A020 +
jnz loc_10077B0  +
retn 0  +
jmp loc_1007B87  +
***
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100785D  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100785D  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1007857  +
cmp eax 19930521h +
jz loc_1007857  +
cmp eax 19930522h +
jz loc_1007857  +
cmp eax 1994000h +
jnz loc_100785D  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset loc_1007820  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10078A6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10078A2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100790D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1007905  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100790F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10078F5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_1007890  +
pop ecx  +
test eax eax +
jz loc_1007976  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10078D0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007976  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100797F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10077A5  +
push offset dword_100A020  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1007AA5  +
cmp ecx 0FFFFFFFFh +
jz loc_1007AA5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1007A9E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1007A9E  +
cmp edx 10000000h +
jnb loc_1007A9E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1007A9E  +
jmp loc_1007A99  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1007AE7  +
push eax  +
call sub_1007A4C  +
test eax eax +
jz loc_1007AE7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1007ADC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1007AE7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100A020 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1007B23  +
test eax ebx +
jz loc_1007B23  +
not eax  +
mov dword_100A024 eax +
jmp loc_1007B7E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1007B6A  +
test dword_100A020 ebx +
jnz loc_1007B6F  +
mov esi 0BB40E64Fh +
mov dword_100A020 esi +
not esi  +
mov dword_100A024 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100A270 eax +
mov dword_100A26C ecx +
mov dword_100A268 edx +
mov dword_100A264 ebx +
mov dword_100A260 esi +
mov dword_100A25C edi +
mov word_100A288 ss +
mov word_100A27C cs +
mov word_100A258 ds +
mov word_100A254 es +
mov word_100A250 fs +
mov word_100A24C gs +
pushf   +
pop dword_100A280  +
mov eax [ebp+0] +
mov dword_100A274 eax +
mov eax [ebp+4] +
mov dword_100A278 eax +
lea eax [ebp+8] +
mov dword_100A284 eax +
mov eax [ebp-320h] +
mov dword_100A1C0 10001h +
mov eax dword_100A278 +
mov dword_100A17C eax +
mov dword_100A170 0C0000409h +
mov dword_100A174 1 +
mov eax dword_100A020 +
mov [ebp-328h] eax +
mov eax dword_100A024 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov ch 0FFh +
call fword ptr [edx+59h]  +
jmp eax  +
***
jmp eax  +
***
jmp eax  +
***
retf 87h  +
***
arpl [ebp+73h] sp +
jnb $+2  +
iret   +
***
