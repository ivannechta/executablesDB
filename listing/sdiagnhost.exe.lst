mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1001913  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_1001901  +
dec edx  +
jnz loc_1001913  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_1001910  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_100192F  +
xor eax eax +
jmp loc_100193F  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_1001960  +
xor eax eax +
jmp loc_100196F  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_30] +
stos   +
xor esi esi +
stos   +
stos   +
mov edi [ebp+arg_0] +
mov [ebp+lpMem] esi +
mov [ebp+dwAbsoluteSecurityDescriptorSize] esi +
mov [ebp+pDacl] esi +
mov [ebp+dwDaclSize] esi +
mov [ebp+dwSaclSize] esi +
mov [ebp+pOwner] esi +
mov [ebp+dwOwnerSize] esi +
mov [ebp+var_20] esi +
mov [ebp+dwPrimaryGroupSize] esi +
cmp edi esi +
jnz loc_10019C9  +
mov eax 80070057h +
push eax  +
mov [ebp+arg_0] eax +
push 0AFh  +
jmp loc_1001B65  +
push esi  +
push esi  +
mov [edi] esi +
call ds:CoInitializeEx  +
cmp eax esi +
mov [ebp+arg_0] eax +
jge loc_10019E5  +
push eax  +
push 0B5h  +
jmp loc_1001B65  +
xor eax eax +
lea ecx [ebp+var_30] +
inc eax  +
push ecx  +
push eax  +
mov [edi] eax +
call sub_1003961  +
cmp eax esi +
mov [ebp+arg_0] eax +
jge loc_1001A06  +
push eax  +
push 0BAh  +
jmp loc_1001B65  +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push esi  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push esi  +
lea eax [ebp+dwSaclSize] +
push eax  +
push esi  +
lea eax [ebp+dwDaclSize] +
push eax  +
push esi  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push esi  +
push [ebp+hMem]  +
call ds:MakeAbsoluteSD  +
test eax eax +
jnz loc_1001A4E  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1001A40  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+arg_0] eax +
cmp eax 8007007Ah +
jz loc_1001A62  +
cmp eax esi +
jl loc_1001A55  +
mov [ebp+arg_0] 8000FFFFh +
push [ebp+arg_0]  +
push 0CCh  +
jmp loc_1001B65  +
push [ebp+dwAbsoluteSecurityDescriptorSize]  +
push esi  +
call ebx  +
mov edi ds:HeapAlloc +
push eax  +
call edi  +
mov [ebp+lpMem] eax +
cmp eax esi +
jnz loc_1001A8B  +
mov eax 8007000Eh +
push eax  +
mov [ebp+arg_0] eax +
push 0D0h  +
jmp loc_1001B65  +
push [ebp+dwDaclSize]  +
push esi  +
call ebx  +
push eax  +
call edi  +
mov [ebp+pDacl] eax +
cmp eax esi +
jnz loc_1001AAE  +
mov eax 8007000Eh +
push eax  +
mov [ebp+arg_0] eax +
push 0D3h  +
jmp loc_1001B65  +
push [ebp+dwOwnerSize]  +
push esi  +
call ebx  +
push eax  +
call edi  +
mov [ebp+pOwner] eax +
cmp eax esi +
jnz loc_1001AD1  +
mov eax 8007000Eh +
push eax  +
mov [ebp+arg_0] eax +
push 0D6h  +
jmp loc_1001B65  +
push [ebp+dwPrimaryGroupSize]  +
push esi  +
call ebx  +
push eax  +
call edi  +
mov [ebp+var_20] eax +
cmp eax esi +
jnz loc_1001AF1  +
mov eax 8007000Eh +
push eax  +
mov [ebp+arg_0] eax +
push 0D9h  +
jmp loc_1001B65  +
lea ecx [ebp+dwPrimaryGroupSize] +
push ecx  +
push eax  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push [ebp+pOwner]  +
lea eax [ebp+dwSaclSize] +
push eax  +
push esi  +
lea eax [ebp+dwDaclSize] +
push eax  +
push [ebp+pDacl]  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push [ebp+lpMem]  +
push [ebp+hMem]  +
call ds:MakeAbsoluteSD  +
test eax eax +
jnz loc_1001B40  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1001B31  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax esi +
mov [ebp+arg_0] eax +
jge loc_1001B40  +
push eax  +
push 0E6h  +
jmp loc_1001B65  +
push esi  +
push 2000h  +
push esi  +
push 2  +
push 6  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpMem]  +
call ds:CoInitializeSecurity  +
cmp eax esi +
mov [ebp+arg_0] eax +
jge loc_1001B71  +
push eax  +
push 0F1h  +
push offset aSdpinitializec  +
push 1  +
call sub_1003241  +
cmp [ebp+hMem] esi +
jz loc_1001B7F  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov edi ds:HeapFree +
cmp [ebp+lpMem] esi +
jz loc_1001B93  +
push [ebp+lpMem]  +
push esi  +
call ebx  +
push eax  +
call edi  +
cmp [ebp+pDacl] esi +
jz loc_1001BA1  +
push [ebp+pDacl]  +
push esi  +
call ebx  +
push eax  +
call edi  +
cmp [ebp+pOwner] esi +
jz loc_1001BAF  +
push [ebp+pOwner]  +
push esi  +
call ebx  +
push eax  +
call edi  +
cmp [ebp+var_20] esi +
jz loc_1001BBD  +
push [ebp+var_20]  +
push esi  +
call ebx  +
push eax  +
call edi  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1001BDD  +
call ds:CoUninitialize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0FFFFFFFFh  +
push hHandle  +
xor esi esi +
call ds:WaitForSingleObject  +
test eax eax +
jz loc_1001C39  +
cmp eax 0FFFFFFFFh +
jz loc_1001C11  +
mov eax 80004005h +
push eax  +
mov esi eax +
push 14Dh  +
jmp loc_1001C2D  +
call ds:GetLastError  +
test eax eax +
jle loc_1001C25  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push esi  +
push 140h  +
push offset aSdpserverrun  +
push 1  +
call sub_1003241  +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [ebp+8] 0 +
jnz loc_1001C73  +
mov eax 80070057h +
push eax  +
push 173h  +
push offset aSdpregistercla  +
push 1  +
mov edi eax +
call sub_1003241  +
jmp loc_1001CE4  +
push 8  +
call loc_1002614  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1001C91  +
call sub_100253E  +
mov esi eax +
jmp loc_1001C93  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_1001CA8  +
mov eax 8007000Eh +
push eax  +
push 176h  +
jmp loc_1001C63  +
lea eax [ebp-10h] +
push eax  +
push 0  +
push 4  +
push esi  +
push offset rclsid  +
call ds:CoRegisterClassObject  +
mov edi eax +
test edi edi +
jge loc_1001CD6  +
push edi  +
push 17Eh  +
push offset aSdpregistercla  +
push 1  +
call sub_1003241  +
jmp loc_1001CDE  +
mov eax [ebp-10h] +
mov ecx [ebp+8] +
mov [ecx] eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+dwRegister]  +
call ds:CoRevokeClassObject  +
mov esi eax +
test esi esi +
jge loc_1001D1A  +
push esi  +
push 1A5h  +
push offset aSdprevokeclass  +
push 1  +
call sub_1003241  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
test eax eax +
jg locret_1001D52  +
push hHandle  +
call ds:SetEvent  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 1  +
push edi  +
mov [ebp+var_8] edi +
mov [ebp+dwRegister] edi +
call ds:HeapSetInformation  +
mov ebx 80070000h +
test eax eax +
jnz loc_1001D9D  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1001D8F  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
cmp esi edi +
jge loc_1001D9D  +
push esi  +
push 4Bh  +
jmp loc_1001EBE  +
push offset dword_1005050  +
push offset unk_1005058  +
push offset loc_10018C5  +
push offset dword_10011E0  +
call sub_100191C  +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:CreateEventW  +
mov hHandle eax +
cmp eax edi +
jz loc_1001E9F  +
cmp eax 0FFFFFFFFh +
jz loc_1001E9F  +
lea eax [ebp+var_8] +
push eax  +
call sub_1001979  +
mov esi eax +
cmp esi edi +
jge loc_1001DEE  +
push esi  +
push 58h  +
jmp loc_1001EBE  +
lea eax [ebp+dwRegister] +
push eax  +
call sub_1001C42  +
mov esi eax +
cmp esi edi +
jge loc_1001E05  +
push esi  +
push 5Bh  +
jmp loc_1001EBE  +
mov eax large fs:18h +
mov eax [eax+30h] +
mov eax [eax+10h] +
mov esi [eax+6Ch] +
mov eax large fs:18h +
mov eax [eax+30h] +
mov eax [eax+10h] +
mov edi [eax+6Ch] +
mov eax large fs:18h +
mov eax [eax+30h] +
mov eax [eax+10h] +
and dword ptr [eax+6Ch] 0 +
mov eax large fs:18h +
mov eax [eax+30h] +
mov eax [eax+10h] +
mov dword ptr [eax+68h] 1 +
call ds:AllocConsole  +
test eax eax +
jnz loc_1001E71  +
call ds:GetLastError  +
test eax eax +
jle loc_1001E61  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
test esi esi +
jl loc_1001E6C  +
mov esi 80004005h +
push esi  +
push 6Ah  +
jmp loc_1001EBE  +
mov eax large fs:18h +
mov eax [eax+30h] +
mov eax [eax+10h] +
mov [eax+68h] esi +
mov eax large fs:18h +
mov eax [eax+30h] +
mov eax [eax+10h] +
mov [eax+6Ch] edi +
call sub_1001BE6  +
mov esi eax +
test esi esi +
jge loc_1001ECA  +
push esi  +
push 74h  +
jmp loc_1001EBE  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1001EB0  +
and eax 0FFFFh +
or eax ebx +
mov esi eax +
cmp esi edi +
jl loc_1001EBB  +
mov esi 80004005h +
push esi  +
push 50h  +
push offset aWwinmain  +
push 1  +
call sub_1003241  +
push [ebp+dwRegister]  +
call sub_1001CF3  +
push [ebp+var_8]  +
call sub_1001BCC  +
push offset dword_1005050  +
call sub_1001948  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1001F0D  +
cmp [esi] ax +
jz loc_1001F09  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1001EFF  +
test edx edx +
jnz loc_1001F12  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1001F23  +
test eax eax +
jl loc_1001F20  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
push ebx  +
xor ebx ebx +
test edx edx +
jnz loc_1001F6B  +
mov eax 80070057h +
push eax  +
push 1Dh  +
push offset aCscripteddiagn  +
push 1  +
mov ebx eax +
call sub_1003241  +
jmp loc_1001FA5  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset aLRnAfdBs9l +
xor eax eax +
cmps   +
jz loc_1001F98  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1001558 +
xor eax eax +
cmps   +
jz loc_1001F98  +
and [edx] eax +
mov ebx 80004002h +
jmp loc_1001FA3  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov dword ptr [esi] offset off_1001318 +
test eax eax +
jz loc_1001FCD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_100503C +
xor eax ebp +
mov [ebp-4] eax +
mov edx [ebp+14h] +
mov ecx [ebp+10h] +
mov eax [ebp+8] +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi 0D71Fh +
mov [ebp-18h] edx +
mov edx [ebp+18h] +
mov [ebp-10h] si +
mov esi 4619h +
push edi  +
mov [ebp-1Ch] ecx +
mov [ebp-20h] edx +
mov dword ptr [ebp-14h] 276FBFC1h +
mov [ebp-0Eh] si +
mov byte ptr [ebp-0Ch] 0A7h +
mov byte ptr [ebp-0Bh] 0C1h +
mov byte ptr [ebp-0Ah] 1 +
mov byte ptr [ebp-9] 81h +
mov byte ptr [ebp-8] 7 +
mov byte ptr [ebp-7] 7Eh +
mov byte ptr [ebp-6] 0E2h +
mov byte ptr [ebp-5] 83h +
test ebx ebx +
jnz loc_100204A  +
mov eax 80070057h +
push eax  +
mov edi eax +
push 68h  +
jmp loc_10020A7  +
test ecx ecx +
jnz loc_100205A  +
mov eax 80070057h +
push eax  +
mov edi eax +
push 69h  +
jmp loc_10020A7  +
test edx edx +
jnz loc_100206A  +
mov eax 80070057h +
push eax  +
mov edi eax +
push 6Ah  +
jmp loc_10020A7  +
lea esi [eax+8] +
push esi  +
push offset dword_10011C0  +
push 15h  +
push 0  +
lea eax [ebp-14h] +
push eax  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jge loc_100208C  +
push edi  +
push 71h  +
jmp loc_10020A7  +
push dword ptr [ebp-20h]  +
mov eax [esi] +
push dword ptr [ebp-18h]  +
mov ecx [eax] +
push dword ptr [ebp-1Ch]  +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jge loc_10020B3  +
push edi  +
push 77h  +
push offset aCscripteddia_0  +
push 1  +
call sub_1003241  +
mov ecx [ebp-4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A15  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp dword ptr [eax+8] 0 +
push esi  +
jnz loc_10020E9  +
mov eax 80004003h +
push eax  +
mov esi eax +
push 0DAh  +
jmp loc_10020FE  +
mov eax [eax+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
test esi esi +
jge loc_100210A  +
push esi  +
push 0DDh  +
push offset aCscripteddia_1  +
push 1  +
call sub_1003241  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_1002138  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_1002138  +
call sub_1001EF2  +
jmp loc_100213D  +
mov eax 80070057h +
test eax eax +
jge loc_1002148  +
test edi edi +
jz loc_1002148  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001FB1  +
test [ebp+arg_0] 1 +
jz loc_100216C  +
push esi  +
call sub_10025B2  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
cmp [ebp+arg_0] esi +
jnz loc_10021AC  +
mov eax 80070057h +
push eax  +
push 105h  +
push offset aCscripteddia_2  +
push 1  +
mov edi eax +
call sub_1003241  +
jmp loc_100224E  +
push ebx  +
mov ebx [ebp+arg_4] +
cmp ebx esi +
jnz loc_10021C1  +
mov eax 80070057h +
push eax  +
push 106h  +
jmp loc_1002237  +
push [ebp+arg_0]  +
lea eax [ebp+var_4] +
push eax  +
call sub_10032C8  +
mov edi eax +
cmp edi esi +
jge loc_10021DB  +
push edi  +
push 109h  +
jmp loc_1002239  +
mov esi [ebp+var_4] +
lea eax [ebp+var_8] +
push eax  +
push 104h  +
push esi  +
call sub_1002116  +
mov edi eax +
test edi edi +
jge loc_10021FB  +
push edi  +
push 10Ch  +
jmp loc_1002239  +
mov eax [ebp+var_8] +
test eax eax +
ja loc_100220F  +
mov eax 80070057h +
push eax  +
push 110h  +
jmp loc_1002237  +
dec eax  +
js loc_100222C  +
cmp word ptr [esi+eax*2] 5Ch +
jz loc_100221E  +
dec eax  +
jns loc_1002212  +
jmp loc_1002228  +
xor ecx ecx +
mov [esi+eax*2+2] cx +
mov esi [ebp+var_4] +
test eax eax +
jge loc_1002247  +
mov eax 80070057h +
push eax  +
push 11Ch  +
mov edi eax +
push offset aCscripteddia_2  +
push 1  +
call sub_1003241  +
jmp loc_100224D  +
and [ebp+var_4] 0 +
mov [ebx] esi +
pop ebx  +
cmp [ebp+var_4] 0 +
jz loc_100225D  +
push [ebp+var_4]  +
call sub_10025B2  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
ja loc_1002296  +
test esi esi +
jz loc_1002291  +
push 1  +
mov ecx esi +
call sub_1002152  +
call sub_1001D37  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [esi] offset off_1001318 +
mov dword ptr [esi+4] 1 +
call sub_1001D26  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp-4] ebx +
mov [ebp-8] ebx +
cmp [ebp+0Ch] ebx +
jnz loc_10022EA  +
mov esi 80070057h +
push esi  +
push 9Eh  +
jmp loc_10022FF  +
lea eax [ebp-4] +
push eax  +
call sub_1003A25  +
mov esi eax +
cmp esi ebx +
jge loc_100230D  +
push esi  +
push 0A1h  +
push offset aCscripteddia_3  +
push 1  +
call sub_1003241  +
jmp loc_1002380  +
push edi  +
mov edi [ebp+8] +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1002178  +
mov esi eax +
cmp esi ebx +
jge loc_100232D  +
push esi  +
push 0A4h  +
jmp loc_1002373  +
push dword ptr [ebp-8]  +
call sub_1003AF5  +
mov esi eax +
cmp esi ebx +
jge loc_1002343  +
push esi  +
push 0A7h  +
jmp loc_1002373  +
cmp [edi+8] ebx +
jnz loc_1002355  +
mov esi 80004003h +
push esi  +
push 0A9h  +
jmp loc_1002373  +
push dword ptr [ebp+14h]  +
mov eax [edi+8] +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jge loc_100237F  +
push esi  +
push 0ACh  +
push offset aCscripteddia_3  +
push 1  +
call sub_1003241  +
pop edi  +
cmp [ebp-4] ebx +
jz loc_100239E  +
push dword ptr [ebp-4]  +
call sub_1003AF5  +
cmp [ebp-4] ebx +
jz loc_100239E  +
push dword ptr [ebp-4]  +
call sub_10025B2  +
pop ecx  +
mov [ebp-4] ebx +
cmp [ebp-8] ebx +
jz loc_10023AC  +
push dword ptr [ebp-8]  +
call sub_10025B2  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
push ebx  +
xor ebx ebx +
test edx edx +
jnz loc_10023E0  +
mov eax 80070057h +
push eax  +
push 1Dh  +
push offset aCscripteddiagh  +
push 1  +
mov ebx eax +
call sub_1003241  +
jmp loc_100241A  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_100145C +
xor eax eax +
cmps   +
jz loc_100240D  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1001558 +
xor eax eax +
cmps   +
jz loc_100240D  +
and [edx] eax +
mov ebx 80004002h +
jmp loc_1002418  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push 0  +
mov eax offset byte_1003BA5 +
call __EH_prolog3  +
mov edi [ebp+14h] +
test edi edi +
jnz loc_100244F  +
mov edi 80070057h +
push edi  +
push 24h  +
push offset aCscripteddia_4  +
push 1  +
call sub_1003241  +
jmp loc_10024B2  +
and dword ptr [edi] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100245F  +
mov edi 80040110h +
jmp loc_100243E  +
***
push 0Ch  +
call loc_1002614  +
pop ecx  +
mov ecx eax +
mov [ebp+14h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100247D  +
call near ptr dword_10022A0+3  +
mov esi eax +
jmp loc_100247F  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_100248E  +
mov edi 8007000Eh +
jmp loc_100243E  +
***
mov eax [esi] +
push edi  +
push dword ptr [ebp+10h]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jge loc_10024AC  +
push edi  +
push 24h  +
push offset aCscripteddia_4  +
push 1  +
call sub_1003241  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10024D3  +
call sub_1001D26  +
jmp loc_10024D8  +
call sub_1001D37  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100151C +
jz loc_10024FE  +
push esi  +
call sub_10025B2  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
ja loc_1002531  +
test esi esi +
jz loc_1002531  +
push 1  +
mov ecx esi +
call sub_10024E3  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
mov dword ptr [eax] offset off_100151C +
mov dword ptr [eax+4] 1 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1001540 +
jnz loc_1002577  +
cmp dword ptr [esi+8] 0 +
jnz loc_1002577  +
mov eax off_1005000 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_1001540 +
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_1001540 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:free  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_1002590  +
push offset dword_1003C50  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001540 +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1002608  +
push esi  +
call sub_10025B2  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_1002632  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_100263F  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_1002625  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_100509C 1 +
mov esi offset dword_1005090 +
jnz loc_1002666  +
or dword_100509C 1 +
mov ecx esi +
call sub_1002553  +
push offset loc_1003BC5  +
call sub_1002B68  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_1002590  +
push offset dword_1003C50  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_10026A1  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_10026AE  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_1002694  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_10050AC 1 +
mov esi offset dword_10050A0 +
jnz loc_10026D5  +
or dword_10050AC 1 +
mov ecx esi +
call sub_1002553  +
push offset loc_1003BDE  +
call sub_1002B68  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_1002590  +
push offset dword_1003C50  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100270E  +
test eax eax +
jnz loc_1002713  +
mov ecx [esi] +
test ecx ecx +
jz loc_100270B  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10026FF  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10050D4 +
push offset dword_10050C4  +
push dword_10050D0  +
mov dword_10050C4 eax +
push offset unk_10050B4  +
push offset unk_10050B8  +
push offset unk_10050B0  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10050C0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10027B6  +
cmp eax esi +
jnz loc_10027A9  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_10027B9  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1002790  +
xor esi esi +
inc esi  +
mov eax dword_10053FC +
cmp eax esi +
jnz loc_10027CC  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10027FB  +
mov eax dword_10053FC +
test eax eax +
jnz loc_10027F5  +
mov dword_10053FC esi +
push offset dword_100116C  +
push offset dword_1001160  +
call sub_10026F2  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10027FB  +
jmp loc_100291F  +
mov dword_10050CC esi +
mov eax dword_10053FC +
cmp eax esi +
jnz loc_100281F  +
push offset dword_100115C  +
push offset dword_1001154  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10053FC 2 +
cmp [ebp+var_20] ebx +
jnz loc_100282C  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100540C ebx +
jz loc_100284D  +
push offset dword_100540C  +
call sub_1002C89  +
pop ecx  +
test eax eax +
jz loc_100284D  +
push ebx  +
push 2  +
push ebx  +
call dword_100540C  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_100291F  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1002872  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1002887  +
cmp cx 20h +
ja loc_1002887  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1002872  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1002893  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1002896  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_10050C8 eax +
cmp dword_10050BC ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_10028C8  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_100285C  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_10050C8 eax +
xor ebx ebx +
cmp dword_10050BC ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_10050CC ebx +
jnz loc_100290A  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10050C8 +
jmp loc_100292B  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1002948  +
xor eax eax +
jmp loc_1002995  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1002944  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1002982  +
cmp ecx 20Bh +
jnz loc_1002944  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1002944  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1002990  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1002944  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_10050BC eax +
call sub_1002E22  +
push eax  +
call ds:__set_app_type  +
or dword_1005404 0FFFFFFFFh +
or dword_1005408 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10050DC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10050D8 +
mov [eax] ecx +
call sub_1002DB4  +
cmp dword_100504C 0 +
jnz loc_10029EE  +
push offset sub_1002DB4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1002D9C  +
xor eax eax +
retn   +
***
call sub_1002E61  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_100503C +
jnz loc_1002A20  +
retn 0  +
jmp loc_1002EF7  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100503C +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1002AD2  +
push esi  +
call sub_10025B2  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1002ADE  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1002BCC  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1002BCC  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1002BC6  +
cmp eax 19930521h +
jz loc_1002BC6  +
cmp eax 19930522h +
jz loc_1002BC6  +
cmp eax 1994000h +
jnz loc_1002BCC  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1002B8C+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002C16  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002C12  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1002C7D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1002C75  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1002C7F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002C65  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1002C00  +
pop ecx  +
test eax eax +
jz loc_1002CE6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002C40  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002CE6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1002CEF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002A15  +
push offset dword_100503C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002E15  +
cmp ecx 0FFFFFFFFh +
jz loc_1002E15  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1002E0E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1002E0E  +
cmp edx 10000000h +
jnb loc_1002E0E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1002E0E  +
jmp loc_1002E09  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002E57  +
push eax  +
call sub_1002DBC  +
test eax eax +
jz loc_1002E57  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1002E4C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1002E57  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100503C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002E93  +
test eax ebx +
jz loc_1002E93  +
not eax  +
mov dword_1005040 eax +
jmp loc_1002EEE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1002EDA  +
test dword_100503C ebx +
jnz loc_1002EDF  +
mov esi 0BB40E64Fh +
mov dword_100503C esi +
not esi  +
mov dword_1005040 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10051E0 eax +
mov dword_10051DC ecx +
mov dword_10051D8 edx +
mov dword_10051D4 ebx +
mov dword_10051D0 esi +
mov dword_10051CC edi +
mov word_10051F8 ss +
mov word_10051EC cs +
mov word_10051C8 ds +
mov word_10051C4 es +
mov word_10051C0 fs +
mov word_10051BC gs +
pushf   +
pop dword_10051F0  +
mov eax [ebp+0] +
mov dword_10051E4 eax +
mov eax [ebp+4] +
mov dword_10051E8 eax +
lea eax [ebp+8] +
mov dword_10051F4 eax +
mov eax [ebp-320h] +
mov dword_1005130 10001h +
mov eax dword_10051E8 +
mov dword_10050EC eax +
mov dword_10050E0 0C0000409h +
mov dword_10050E4 1 +
mov eax dword_100503C +
mov [ebp-328h] eax +
mov eax dword_1005040 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1003042  +
cmp [ebp+arg_4] eax +
jz loc_100303E  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100303E  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1003021  +
test esi esi +
jnz loc_100304A  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003058  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
xor edx edx +
sub esp 30h +
cmp ecx edx +
jz loc_1003092  +
push esi  +
mov eax ecx +
push edi  +
lea edi [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si dx +
jnz loc_100307C  +
sub eax edi +
sar eax 1 +
pop edi  +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1003095  +
push 0Ah  +
pop eax  +
cmp ecx edx +
jnz loc_100309E  +
mov ecx offset aNull +
push 4  +
mov [ebp+var_28] eax +
lea eax [ebp+arg_10] +
mov [ebp+var_20] eax +
pop eax  +
mov [ebp+var_18] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_30] +
push eax  +
push 3  +
push [ebp+arg_8]  +
mov [ebp+var_30] ecx +
push [ebp+arg_4]  +
lea ecx [ebp+arg_14] +
push [ebp+arg_0]  +
mov [ebp+var_2C] edx +
mov [ebp+var_24] edx +
mov [ebp+var_1C] edx +
mov [ebp+var_14] edx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] edx +
mov [ebp+var_4] edx +
call ds:EventWrite  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_10030FF  +
cmp edx 7FFFFFFFh +
jbe loc_1003104  +
mov eax 80070057h +
test eax eax +
jl loc_100311A  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100300D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1003139  +
cmp ecx 7FFFFFFFh +
jbe loc_100313E  +
mov eax 80070057h +
test eax eax +
jl loc_100317A  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100316D  +
cmp eax esi +
ja loc_100316D  +
jnz loc_1003175  +
mov [esi+edi] bl +
jmp loc_1003175  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1003199  +
cmp ecx 7FFFFFFFh +
jbe loc_100319E  +
mov eax 80070057h +
test eax eax +
jl loc_10031DB  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10031CB  +
cmp eax esi +
ja loc_10031CB  +
jnz loc_10031D6  +
jmp loc_10031D0  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 404h +
mov eax dword_100503C +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_404] +
push 400h  +
push eax  +
call sub_1003123  +
test eax eax +
jl loc_1003230  +
lea eax [ebp+var_404] +
push eax  +
push offset aS  +
push [ebp+arg_0]  +
push 81h  +
call ds:DbgPrintEx  +
add esp 10h +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002A15  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100507C 0 +
jz loc_10032A6  +
mov al byte_1005080 +
cmp al 2 +
jnb loc_100325C  +
test al al +
jnz loc_10032A6  +
mov ecx dword_100506C +
mov edx 20000002h +
and ecx edx +
xor eax eax +
or eax ecx +
jz loc_10032A6  +
mov ecx dword_1005074 +
mov eax ecx +
and eax edx +
xor edx edx +
cmp edx dword_1005070 +
jnz loc_10032A6  +
cmp eax ecx +
jnz loc_10032A6  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [ebp+arg_4]  +
push offset dword_10011F0  +
push dword_1005054  +
push dword_1005050  +
call sub_1003064  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [ebp+arg_4]  +
push offset aSdiagWsDHr0x08  +
push [ebp+arg_0]  +
call sub_10031E2  +
add esp 14h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
test ebx ebx +
jnz loc_10032F4  +
mov eax 80070057h +
push eax  +
push 85h  +
push offset aSdpstrcpy  +
push 1  +
mov esi eax +
call sub_1003241  +
jmp loc_100337D  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1003308  +
mov eax 80070057h +
push eax  +
push 86h  +
jmp loc_10032E1  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100330B  +
sub eax edx +
sar eax 1 +
push edi  +
lea esi [eax+1] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call loc_1002683  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1003349  +
mov eax 8007000Eh +
push eax  +
mov esi eax +
push 8Bh  +
jmp loc_100335F  +
push [ebp+arg_4]  +
push esi  +
push edi  +
call sub_10030E9  +
mov esi eax +
test esi esi +
jge loc_100336D  +
push esi  +
push 8Eh  +
push offset aSdpstrcpy  +
push 1  +
call sub_1003241  +
jmp loc_1003371  +
mov [ebx] edi +
xor edi edi +
test edi edi +
jz loc_100337C  +
push edi  +
call sub_10025B2  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100503C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_18] eax +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
mov [ebp+var_14] ebx +
cmp eax ebx +
jnz loc_10033DC  +
mov esi 80070057h +
push esi  +
push 7B7h  +
push offset aSdpisadmin  +
push 1  +
call sub_1003241  +
jmp loc_1003451  +
push edi  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
mov edi 80070000h +
test eax eax +
jnz loc_1003422  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1003414  +
and eax 0FFFFh +
or eax edi +
mov esi eax +
cmp esi ebx +
jge loc_1003422  +
push esi  +
push 7C4h  +
jmp loc_100348E  +
cmp [ebp+pSid] ebx +
jnz loc_1003434  +
mov esi 8007000Eh +
push esi  +
push 7C5h  +
jmp loc_100348E  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_1003471  +
xor esi esi +
mov eax [ebp+var_14] +
mov ecx [ebp+var_18] +
mov [ecx] eax +
pop edi  +
cmp [ebp+pSid] ebx +
jz loc_100345F  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A15  +
leave   +
retn 4  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1003482  +
and eax 0FFFFh +
or eax edi +
mov esi eax +
cmp esi ebx +
jge loc_1003448  +
push esi  +
push 7CDh  +
push offset aSdpisadmin  +
push 1  +
call sub_1003241  +
jmp loc_1003450  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100503C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_18] eax +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
mov [ebp+var_14] ebx +
cmp eax ebx +
jnz loc_10034F3  +
mov esi 80070057h +
push esi  +
push 7FAh  +
push offset aSdpissystem  +
push 1  +
call sub_1003241  +
jmp loc_1003564  +
push edi  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
mov edi 80070000h +
test eax eax +
jnz loc_1003535  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1003527  +
and eax 0FFFFh +
or eax edi +
mov esi eax +
cmp esi ebx +
jge loc_1003535  +
push esi  +
push 807h  +
jmp loc_10035A1  +
cmp [ebp+pSid] ebx +
jnz loc_1003547  +
mov esi 8007000Eh +
push esi  +
push 808h  +
jmp loc_10035A1  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_1003584  +
xor esi esi +
mov eax [ebp+var_14] +
mov ecx [ebp+var_18] +
mov [ecx] eax +
pop edi  +
cmp [ebp+pSid] ebx +
jz loc_1003572  +
push [ebp+pSid]  +
call ds:FreeSid  +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A15  +
leave   +
retn 4  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1003595  +
and eax 0FFFFh +
or eax edi +
mov esi eax +
cmp esi ebx +
jge loc_100355B  +
push esi  +
push 810h  +
push offset aSdpissystem  +
push 1  +
call sub_1003241  +
jmp loc_1003563  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
xor eax eax +
push esi  +
push edi  +
mov [ebp+hMem] eax +
mov [ebp+var_C] eax +
mov [ebp+hObject] eax +
mov [ebp+lpMem] eax +
mov [ebp+ReturnLength] eax +
cmp [ebp+arg_0] eax +
jnz loc_10035F0  +
mov esi 80070057h +
push esi  +
push 83Eh  +
push offset aSdpgetusersid  +
push 1  +
call sub_1003241  +
jmp loc_100375F  +
push ebx  +
lea ecx [ebp+hObject] +
push ecx  +
push eax  +
push 8  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_1003661  +
call ds:GetLastError  +
test eax eax +
jle loc_1003621  +
and eax ebx +
or eax edi +
mov esi eax +
cmp esi 800703F0h +
jnz loc_1003652  +
lea eax [ebp+hObject] +
push eax  +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_1003661  +
call ds:GetLastError  +
test eax eax +
jle loc_1003650  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jge loc_1003661  +
push esi  +
push 845h  +
jmp loc_1003744  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push 0  +
push 1  +
push [ebp+hObject]  +
call ds:GetTokenInformation  +
test eax eax +
jnz loc_1003695  +
call ds:GetLastError  +
test eax eax +
jle loc_1003687  +
and eax ebx +
or eax edi +
mov esi eax +
cmp esi 8007007Ah +
jz loc_10036A5  +
test esi esi +
jl loc_100369A  +
mov esi 8000FFFFh +
push esi  +
push 84Dh  +
jmp loc_1003744  +
push [ebp+ReturnLength]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_10036CB  +
mov esi 8007000Eh +
push esi  +
push 851h  +
jmp loc_1003744  +
lea ecx [ebp+ReturnLength] +
push ecx  +
push [ebp+ReturnLength]  +
push eax  +
push 1  +
push [ebp+hObject]  +
call ds:GetTokenInformation  +
test eax eax +
jnz loc_10036FE  +
call ds:GetLastError  +
test eax eax +
jle loc_10036F0  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jge loc_10036FE  +
push esi  +
push 854h  +
jmp loc_1003744  +
lea eax [ebp+hMem] +
push eax  +
mov eax [ebp+lpMem] +
push dword ptr [eax]  +
call ConvertSidToStringSidW  +
test eax eax +
jnz loc_100372C  +
call ds:GetLastError  +
test eax eax +
jle loc_100371E  +
and eax ebx +
or eax edi +
mov esi eax +
test esi esi +
jge loc_100372C  +
push esi  +
push 857h  +
jmp loc_1003744  +
push [ebp+hMem]  +
lea eax [ebp+var_C] +
push eax  +
call sub_10032C8  +
mov esi eax +
test esi esi +
jge loc_1003752  +
push esi  +
push 85Ah  +
push offset aSdpgetusersid  +
push 1  +
call sub_1003241  +
jmp loc_100375E  +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_0] +
and [ebp+var_C] 0 +
mov [ecx] eax +
pop ebx  +
xor edi edi +
cmp [ebp+hMem] edi +
jz loc_100376F  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+var_C] edi +
jz loc_100377D  +
push [ebp+var_C]  +
call sub_10025B2  +
pop ecx  +
cmp [ebp+lpMem] edi +
jz loc_1003793  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+hObject] edi +
jz loc_10037A7  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_10037A7  +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
xor ecx ecx +
push esi  +
mov [ebp+var_10] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
mov dword ptr [ebp+var_8] ecx +
cmp [ebp+arg_4] ecx +
jnz loc_10037EF  +
mov esi 80070057h +
push esi  +
push 891h  +
push offset aSdpcreatesddl  +
push 1  +
call sub_1003241  +
jmp loc_1003955  +
mov eax [ebp+arg_0] +
sub eax ecx +
push ebx  +
push edi  +
jz loc_1003814  +
dec eax  +
jz loc_1003808  +
mov esi 80070057h +
push esi  +
push 8A1h  +
jmp loc_100384A  +
mov edi offset aOBagBadPAOici0 +
mov ebx offset aOBagBadPAOic_0 +
jmp loc_100381E  +
mov edi offset aDPAOiciGaSyAOi +
mov ebx offset aDPAOiciGaSyA_0 +
lea eax [ebp+var_10] +
push eax  +
call sub_100338A  +
mov esi eax +
test esi esi +
jge loc_1003835  +
push esi  +
push 8A5h  +
jmp loc_100384A  +
lea eax [ebp+var_14] +
push eax  +
call sub_10034A1  +
mov esi eax +
test esi esi +
jge loc_100385B  +
push esi  +
push 8A8h  +
push offset aSdpcreatesddl  +
push 1  +
call sub_1003241  +
jmp loc_1003953  +
cmp [ebp+var_10] 0 +
jnz loc_10038F9  +
cmp [ebp+var_14] 0 +
jnz loc_10038F9  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
call sub_10032C8  +
mov esi eax +
test esi esi +
jge loc_1003896  +
push esi  +
push 8B0h  +
push offset aSdpcreatesddl  +
push 1  +
call sub_1003241  +
jmp loc_1003935  +
lea eax [ebp+var_8] +
push eax  +
call sub_10035B4  +
mov esi eax +
test esi esi +
jge loc_10038AD  +
push esi  +
push 8B3h  +
jmp loc_1003885  +
push 800h  +
call loc_1002683  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_10038CB  +
mov esi 8007000Eh +
push esi  +
push 8B6h  +
jmp loc_10038EB  +
push dword ptr [ebp+var_8]  +
push [ebp+var_4]  +
push 400h  +
push edi  +
call sub_1003183  +
mov esi eax +
add esp 10h +
test esi esi +
jge loc_1003923  +
push esi  +
push 8B9h  +
push offset aSdpcreatesddl  +
push 1  +
call sub_1003241  +
jmp loc_100392A  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
call sub_10032C8  +
mov esi eax +
test esi esi +
jge loc_1003920  +
push esi  +
push 8ACh  +
push offset aSdpcreatesddl  +
push 1  +
call sub_1003241  +
mov edi [ebp+var_C] +
jmp loc_100392A  +
mov edi [ebp+var_C] +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor edi edi +
test edi edi +
jz loc_1003935  +
push edi  +
call sub_10025B2  +
pop ecx  +
cmp [ebp+var_4] 0 +
jz loc_1003944  +
push [ebp+var_4]  +
call sub_10025B2  +
pop ecx  +
cmp dword ptr [ebp+var_8] 0 +
jz loc_1003953  +
push dword ptr [ebp+var_8]  +
call sub_10025B2  +
pop ecx  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
push edi  +
mov [ebp+hMem] ebx +
mov [ebp+var_8] ebx +
cmp esi ebx +
jnz loc_100398C  +
mov eax 80070057h +
push eax  +
mov edi eax +
push 8E8h  +
jmp loc_1003A12  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_10037B4  +
mov edi eax +
cmp edi ebx +
jge loc_10039A6  +
push edi  +
push 8EBh  +
jmp loc_1003A12  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
push 1  +
push [ebp+var_8]  +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test eax eax +
jz loc_10039F2  +
xor edi edi +
mov eax [ebp+hMem] +
mov dword ptr [esi] 0Ch +
mov [esi+8] ebx +
mov [esi+4] eax +
mov [ebp+hMem] ebx +
cmp [ebp+hMem] ebx +
jz loc_10039DB  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+var_8] ebx +
jz loc_10039E9  +
push [ebp+var_8]  +
call sub_10025B2  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1003A06  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
cmp edi ebx +
jge loc_10039BB  +
push edi  +
push 8F1h  +
push offset aSdpcreatesecur  +
push 1  +
call sub_1003241  +
jmp loc_10039CD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jnz loc_1003A50  +
mov eax 80070057h +
push eax  +
push 921h  +
push offset aSdpgetworkingd  +
push 1  +
mov ebx eax +
call sub_1003241  +
jmp loc_1003AE9  +
push edi  +
push 208h  +
call loc_1002683  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jnz loc_1003A7D  +
mov eax 8007000Eh +
push eax  +
push 924h  +
push offset aSdpgetworkingd  +
push 1  +
mov ebx eax +
call sub_1003241  +
jmp loc_1003ADD  +
push esi  +
push edi  +
mov esi 104h +
push esi  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jnz loc_1003AB6  +
call ds:GetLastError  +
test eax eax +
jle loc_1003AA3  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
test ebx ebx +
jl loc_1003AAE  +
mov ebx 80004005h +
push ebx  +
push 927h  +
jmp loc_1003AC7  +
cmp eax esi +
jbe loc_1003AD5  +
mov eax 8007006Fh +
push eax  +
mov ebx eax +
push 92Bh  +
push offset aSdpgetworkingd  +
push 1  +
call sub_1003241  +
jmp loc_1003ADC  +
mov eax [ebp+arg_0] +
mov [eax] edi +
xor edi edi +
pop esi  +
test edi edi +
jz loc_1003AE8  +
push edi  +
call sub_10025B2  +
pop ecx  +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpPathName] 0 +
push esi  +
jnz loc_1003B10  +
mov eax 80070057h +
push eax  +
mov esi eax +
push 953h  +
jmp loc_1003B41  +
push [ebp+lpPathName]  +
call ds:SetCurrentDirectoryW  +
test eax eax +
jz loc_1003B21  +
xor esi esi +
jmp loc_1003B4D  +
call ds:GetLastError  +
test eax eax +
jle loc_1003B35  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jge loc_1003B4D  +
push esi  +
push 956h  +
push offset aSdpsetworkingd  +
push 1  +
call sub_1003241  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov dword_1005090 offset off_1001540 +
mov ecx offset dword_1005090 +
jmp ??1exception@@UAE@XZ  +
***
mov dword_10050A0 offset off_1001540 +
mov ecx offset dword_10050A0 +
jmp ??1exception@@UAE@XZ  +
***
retf   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756E8C7Bh  +
***
