mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push esi  +
xor eax eax +
xor esi esi +
cmp [ebp+8] esi +
push edi  +
setnz al  +
mov edi eax +
lea eax [ebp+8] +
push eax  +
push 8  +
push 0FFFFFFFFh  +
call ds:NtOpenProcessToken  +
test eax eax +
jl loc_100143F  +
lea eax [ebp-4] +
push eax  +
push 38h  +
lea eax [ebp-3Ch] +
push eax  +
push 0Ah  +
push dword ptr [ebp+8]  +
call ds:NtQueryInformationToken  +
test eax eax +
jl loc_1001436  +
mov eax [ebp-2Ch] +
or eax [ebp-28h] +
jz loc_10095FC  +
push dword ptr [ebp+8]  +
call ds:NtClose  +
cmp edi esi +
jz loc_1001465  +
mov edi ds:NtSystemDebugControl +
push esi  +
push 4  +
push offset dword_10151D4  +
push esi  +
push esi  +
push 21h  +
call edi  +
push esi  +
push 4  +
push offset dword_10151D8  +
push esi  +
push esi  +
push 23h  +
call edi  +
mov eax dword_10151D4 +
cmp eax esi +
jnz loc_1009602  +
mov eax dword_10151D8 +
cmp eax esi +
jnz loc_1009613  +
push esi  +
push esi  +
call sub_1001491  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push edi  +
xor ebx ebx +
xor eax eax +
push ebx  +
mov byte ptr [ebp+var_8] bl +
lea edi [ebp+var_8+1] +
stos   +
push 2  +
lea eax [ebp+var_8] +
push eax  +
push 23h  +
mov [ebp+var_14] ebx +
mov [ebp+var_1] bl +
mov [ebp+var_2] bl +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_1C] 103h +
mov [ebp+var_10] ebx +
call ds:NtQuerySystemInformation  +
cmp byte ptr [ebp+var_8] bl +
jz loc_1009537  +
mov [ebp+var_1] 1 +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
push 4  +
mov [ebp+var_8] eax +
pop edi  +
cmp eax ebx +
jz loc_100954E  +
cmp [ebp+arg_0] bl +
jnz loc_100589B  +
cmp dword_10156AC ebx +
jnz loc_1005A73  +
cmp [ebp+var_2] bl +
jnz loc_1009584  +
lea eax [ebp+var_14] +
push eax  +
call sub_1001587  +
mov eax [ebp+var_8] +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jnz loc_1003BEA  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp ecx dword_10150C4 +
jnz loc_10101EF  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
call sub_10017FB  +
mov dword ptr [ebp-1Ch] 57h +
xor esi esi +
mov [ebp-28h] esi +
mov [ebp-20h] esi +
mov [ebp-80h] esi +
push 38h  +
push esi  +
lea eax [ebp-7Ch] +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp-44h] esi +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp-40h] +
stos   +
mov [ebp-24h] esi +
mov [ebp-4] esi +
mov esi offset Reserved +
mov edi offset dword_10017BC +
mov ebx ds:__imp_GetLastError +
push 1  +
push offset DatabaseName  +
push 0  +
call OpenSCManagerW  +
mov [ebp-28h] eax +
test eax eax +
jz loc_1009C4D  +
push 4  +
push dword ptr [ebp+8]  +
push eax  +
call OpenServiceW  +
mov [ebp-20h] eax +
test eax eax +
jz loc_1009B0B  +
lea ecx [ebp-44h] +
push ecx  +
push eax  +
call QueryServiceStatus  +
test eax eax +
jz loc_1009B3C  +
test dword ptr [ebp-40h] 4 +
jnz loc_1001742  +
mov eax Reserved +
cmp eax esi +
jz loc_10016C2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10016C2  +
cmp byte ptr [eax+19h] 4 +
jb loc_10016C2  +
push dword ptr [ebp+0Ch]  +
push edi  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push 2  +
pop ebx  +
mov [ebp-80h] ebx +
mov dword ptr [ebp-7Ch] offset loc_1002253 +
lea eax [ebp-80h] +
push eax  +
push 8  +
push dword ptr [ebp-20h]  +
call NotifyServiceStatusChangeW  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_1009B6D  +
mov eax Reserved +
cmp eax esi +
jz loc_100170C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100170C  +
cmp byte ptr [eax+19h] 4 +
jb loc_100170C  +
push edi  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 1  +
push dword ptr [ebp+0Ch]  +
call ds:SleepEx  +
mov [ebp-1Ch] eax +
test eax eax +
jz loc_1009B98  +
cmp eax 0C0h +
jnz loc_1009BCA  +
mov ecx [ebp-74h] +
test ecx ecx +
jnz loc_1009BF5  +
cmp dword ptr [ebp-6Ch] 4 +
jnz loc_1009C1E  +
mov eax Reserved +
cmp eax esi +
jz loc_1001765  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001765  +
cmp byte ptr [eax+19h] 4 +
jb loc_1001765  +
push edi  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10017D1  +
mov eax [ebp-1Ch] +
call sub_10015E2  +
retn 8  +
***
cmp dword ptr [ebp-20h] 0 +
jz loc_10017E0  +
push dword ptr [ebp-20h]  +
call CloseServiceHandle  +
cmp dword ptr [ebp-28h] 0 +
jz locret_10017EF  +
push dword ptr [ebp-28h]  +
call CloseServiceHandle  +
retn   +
***
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_10150C4 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1001875  +
cmp edx 7FFFFFFFh +
ja loc_1001875  +
test eax eax +
jl loc_1001871  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1001881  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100185B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_10018D8  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
cmp [ebp+arg_4] eax +
jz loc_10018BD  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_10018BD  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_10018A0  +
test esi esi +
jz loc_10018D8  +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_10076E5  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
jmp loc_10018C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_1001946  +
cmp edx ebx +
ja loc_1001946  +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_1001956  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_100194D  +
cmp [eax] cx +
jz loc_1001920  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1001916  +
cmp esi ecx +
jz loc_100194D  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
test eax eax +
jl loc_1001940  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_1001881  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_1001900  +
mov [ebp+arg_4] 80070057h +
jmp loc_1001928  +
xor ecx ecx +
jmp loc_100192C  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push offset aEventlog  +
call sub_10015FB  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 440h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi 105h +
push esi  +
lea eax [ebp-210h] +
push eax  +
call ds:FindFirstVolumeW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_1001A47  +
push edi  +
lea edi [esi+13h] +
lea eax [ebp-210h] +
push eax  +
call ds:GetDriveTypeW  +
cmp eax 3 +
jnz loc_1001A2C  +
lea eax [ebp-210h] +
push eax  +
push edi  +
lea eax [ebp-440h] +
push eax  +
call sub_1001845  +
push offset aBootex_log  +
push edi  +
lea eax [ebp-440h] +
push eax  +
call sub_10018E7  +
lea eax [ebp-440h] +
push eax  +
call sub_1001A73  +
test eax eax +
jnz loc_10091B6  +
push esi  +
lea eax [ebp-210h] +
push eax  +
push ebx  +
call ds:FindNextVolumeW  +
test eax eax +
jnz loc_10019E0  +
push ebx  +
call ds:FindVolumeClose  +
pop edi  +
mov ecx [ebp-4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 1  +
push 80000000h  +
push [ebp+hObject]  +
mov [ebp+NumberOfBytesRead] ebx +
xor esi esi +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1009043  +
xor edi edi +
cmp edi 1 +
jz loc_100907A  +
cmp esi ebx +
jnz loc_10090A9  +
cmp [ebp+hObject] 0FFFFFFFFh +
jnz loc_10090B5  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+0Ch] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+8] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
js loc_1009624  +
mov [ebp-8] eax +
test edx edx +
jz loc_10030F4  +
cmp dword ptr [ebp+8] 0FFFFFFFFh +
jz loc_100966E  +
cmp dword ptr [ebp+8] 0 +
jz loc_100968A  +
push dword ptr [ebp-8]  +
push dword ptr [ebp+8]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jz loc_1009677  +
mov dword ptr [ebp-4] 1 +
test esi esi +
jz loc_100968A  +
cmp dword ptr [ebp-4] 0 +
jz loc_1001B6C  +
mov eax [ebp+0Ch] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebx  +
mov ebx ds:Sleep +
push 2710h  +
call ebx  +
cmp dword_10151C0 0 +
jnz loc_1001BB7  +
push esi  +
push edi  +
mov edi offset unk_10151C4 +
mov esi offset dword_10151C0 +
push edi  +
push esi  +
call LsaGetUserName  +
test eax eax +
jl loc_1001BBD  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
retn 4  +
***
push 3A98h  +
call ebx  +
jmp loc_1001BAA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 134h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
lea eax [ebp-10Ch] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push offset aSoftwareMicr_2  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1001C74  +
push edi  +
mov edi ds:RegGetValueW +
lea eax [ebp-108h] +
push eax  +
lea eax [ebp-114h] +
push eax  +
push esi  +
push 10h  +
push offset aLoadappinit_dl  +
push esi  +
push dword ptr [ebp-10Ch]  +
mov dword ptr [ebp-108h] 4 +
call edi  +
test eax eax +
jnz loc_1001C67  +
cmp [ebp-114h] esi +
jnz loc_10076EC  +
push dword ptr [ebp-10Ch]  +
call ds:RegCloseKey  +
pop edi  +
mov ecx [ebp-4] +
xor ecx ebp +
pop esi  +
call sub_10015A4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 0FFFFFFFFh  +
mov dword ptr [ebp-4] 6BEh +
mov [ebp-8] ebx +
call sub_100208F  +
mov [ebp-4] eax +
mov edi offset loc_1002214 +
cmp eax ebx +
jnz loc_10089F8  +
push ebx  +
push 0Ah  +
push offset aNcacn_ip_tcp  +
call ds:RpcServerUseProtseqW  +
mov [ebp-4] eax +
cmp eax ebx +
jnz loc_1008A27  +
lea eax [ebp-8] +
push eax  +
push 9  +
call ds:RpcServerInqDefaultPrincNameW  +
mov [ebp-4] eax +
cmp eax ebx +
jnz loc_1008A56  +
push ebx  +
push ebx  +
push 9  +
push dword ptr [ebp-8]  +
call ds:RpcServerRegisterAuthInfoW  +
mov [ebp-4] eax +
lea eax [ebp-8] +
push eax  +
call ds:RpcStringFreeW  +
mov [ebp-8] ebx +
cmp [ebp-4] ebx +
jnz loc_1008A82  +
push offset BindingVector  +
call ds:RpcServerInqBindings  +
mov [ebp-4] eax +
cmp eax ebx +
jnz loc_1008AA2  +
mov esi offset unk_1015240 +
push esi  +
push offset a765294ba60bc48  +
call ds:UuidFromStringW  +
mov [ebp-4] eax +
cmp eax ebx +
jnz loc_1008AC2  +
push ebx  +
push offset UuidVector  +
push BindingVector  +
mov UuidVector.Count 1 +
push IfSpec  +
mov UuidVector.Uuid esi +
call ds:RpcEpRegisterW  +
mov [ebp-4] eax +
cmp eax ebx +
jnz loc_1008AE2  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset aRpcss  +
call sub_10015FB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0FFFFFFFFh  +
call sub_10020D8  +
mov esi eax +
test esi esi +
jnz loc_1009472  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_10027D1  +
mov dword ptr [ebp-6Ch] 0Dh +
xor esi esi +
mov [ebp-4] esi +
push offset sub_1011BF1  +
mov edi 4D2h +
push edi  +
push 28h  +
push esi  +
push esi  +
push off_10156B4  +
call ds:RpcServerRegisterIfEx  +
mov [ebp-6Ch] eax +
cmp eax esi +
jnz loc_1009943  +
xor ebx ebx +
inc ebx  +
mov dword_1015120 ebx +
push offset dword_10151E8  +
call ds:RpcServerInqBindings  +
mov [ebp-6Ch] eax +
cmp eax esi +
jnz loc_1009976  +
mov eax large fs:18h +
mov eax [eax+30h] +
push dword ptr [eax+1D4h]  +
push offset aB08669ee8cb543  +
push 25h  +
lea eax [ebp-68h] +
push eax  +
call sub_1002691  +
add esp 10h +
mov esi offset Uuid +
push esi  +
lea eax [ebp-68h] +
push eax  +
call ds:UuidFromStringW  +
mov [ebp-6Ch] eax +
test eax eax +
jnz loc_10099A8  +
mov stru_1015148.Count ebx +
mov stru_1015148.Uuid esi +
push dword ptr [ebp+8]  +
call sub_100208F  +
mov [ebp-6Ch] eax +
xor esi esi +
cmp eax esi +
jnz loc_10099DA  +
push esi  +
push offset stru_1015148  +
push dword_10151E8  +
push off_10156B4  +
call ds:RpcEpRegisterW  +
mov [ebp-6Ch] eax +
cmp eax esi +
jnz loc_1009A09  +
mov dword_101511C ebx +
push ebx  +
push edi  +
push ebx  +
call ds:RpcServerListen  +
mov [ebp-6Ch] eax +
cmp eax 6B1h +
jnz loc_10021D2  +
mov [ebp-6Ch] esi +
cmp [ebp-6Ch] esi +
jnz loc_1009A38  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1002243  +
mov eax [ebp-6Ch] +
call sub_100228C  +
retn 4  +
***
fsub  qword ptr ds:90E80B8Ch +
retf   +
***
cmp dword ptr [ebp-6Ch] 0 +
jnz loc_1009A75  +
retn   +
***
mov edi edi +
mov eax Reserved +
cmp eax offset Reserved +
jz locret_100227F  +
test byte ptr [eax+1Ch] 1 +
jz locret_100227F  +
cmp byte ptr [eax+19h] 4 +
jb locret_100227F  +
push offset dword_10017BC  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
retn 4  +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10015A4  +
jmp sub_10015E2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10026DF  +
cmp ecx 7FFFFFFFh +
ja loc_10026DF  +
test eax eax +
jl loc_10026DD  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10026E6  +
cmp eax esi +
ja loc_10026E6  +
jnz loc_10026D8  +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
mov eax 80070057h +
jmp loc_10026A7  +
mov ebx 8007007Ah +
jmp loc_10026D2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push [ebp+Type]  +
mov dword ptr [ebp+Data] esi +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
mov [ebp+phkResult] esi +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_1002741  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegQueryValueExW  +
cmp eax esi +
jz loc_1002747  +
mov eax [ebp+arg_C] +
mov dword ptr [ebp+Data] eax +
cmp [ebp+phkResult] esi +
pop esi  +
jz loc_1002756  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax dword ptr [ebp+Data] +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
xor esi esi +
push 6  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_18] +
mov [ebp+var_1C] esi +
stos   +
cmp [ebp+arg_4] esi +
jz loc_10033D3  +
mov eax offset loc_100F10C +
mov [ebp+var_1C] eax +
mov [ebp+var_18] eax +
lea eax [ebp+var_1C] +
push eax  +
mov [ebp+var_C] offset loc_100F525 +
mov [ebp+var_14] offset loc_100F5E2 +
mov [ebp+var_8] offset sub_100F699 +
mov [ebp+var_4] offset sub_100F873 +
call sub_1003D22  +
push [ebp+arg_0]  +
call sub_1007239  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_10150C4 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push offset aSecurityWxapip  +
lea eax [ebp+var_74] +
xor esi esi +
push eax  +
mov [ebp+var_48] esi +
call ds:RtlInitUnicodeString  +
push 40h  +
push 40h  +
lea eax [ebp+var_74] +
mov [ebp+var_60] eax +
push 4  +
lea eax [ebp+var_68] +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
mov [ebp+var_68] 18h +
mov [ebp+var_64] esi +
mov [ebp+var_5C] esi +
mov [ebp+var_58] esi +
mov [ebp+var_54] esi +
call ds:NtCreatePort  +
mov ebx eax +
cmp ebx esi +
jl loc_10028C3  +
mov [ebp+var_50] esi +
cmp [ebp+var_4C] esi +
jz loc_10028C1  +
push edi  +
mov edi ds:NtAcceptConnectPort +
lea eax [ebp+var_44] +
push eax  +
push esi  +
lea eax [ebp+var_50] +
push eax  +
push [ebp+var_4C]  +
call ds:NtReplyWaitReceivePort  +
mov ebx eax +
cmp ebx esi +
jl loc_100355E  +
movsx eax [ebp+var_40] +
dec eax  +
jnz loc_1003500  +
lea eax [ebp+var_44] +
push eax  +
push [ebp+var_48]  +
call sub_100348A  +
cmp [ebp+var_4C] esi +
jnz loc_1002888  +
pop edi  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor ebx ebx +
lea edi [ebp+var_30] +
xor esi esi +
stos   +
inc esi  +
push esi  +
mov [ebp+var_4] ebx +
mov [ebp+hEvent] ebx +
mov [ebp+hKey.unused] 2 +
mov [ebp+var_18] esi +
mov [ebp+var_14] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_28] ebx +
mov dword ptr [ebp+Data] 8 +
stos   +
call sub_1003D09  +
push ebx  +
push ebx  +
push esi  +
call ds:RtlSetProcessIsCritical  +
push ebx  +
push ebx  +
push esi  +
call ds:RtlSetThreadIsCritical  +
add esp 18h +
push ebx  +
push ebx  +
push esi  +
push ebx  +
call ds:HeapSetInformation  +
mov esi offset unk_10151A0 +
push esi  +
call sub_10037C8  +
push offset aMicrosoftUmsta  +
mov dword_10150CC offset dword_1002E90 +
mov Reserved esi +
call sub_1004F51  +
push ebx  +
push 4  +
lea eax [ebp+hObject] +
push eax  +
push 9  +
call ds:NtQuerySystemInformation  +
test eax eax +
jl loc_10029AE  +
mov eax [ebp+hObject] +
and eax 4 +
push eax  +
push 1  +
call sub_1001491  +
mov eax Reserved +
mov edi offset Reserved +
mov esi offset dword_10025AC +
cmp eax edi +
jz loc_10029CB  +
test byte ptr [eax+1Ch] 1 +
jnz loc_1008249  +
push offset dword_1002E80  +
call sub_10038C9  +
mov eax Reserved +
cmp eax edi +
jz loc_10029E8  +
test byte ptr [eax+1Ch] 1 +
jnz loc_1008266  +
push offset Name  +
push ebx  +
push 1  +
push ebx  +
call ds:CreateEventW  +
mov [ebp+hObject] eax +
cmp eax ebx +
jz loc_1008283  +
mov eax Reserved +
cmp eax edi +
jz loc_1002A15  +
test byte ptr [eax+1Ch] 1 +
jnz loc_10082C3  +
call sub_1006121  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_10082E0  +
xor eax eax +
inc eax  +
mov word_10150D4 ax +
mov eax Reserved +
cmp eax edi +
jz loc_1002A41  +
test byte ptr [eax+1Ch] 1 +
jnz loc_1008317  +
call sub_100386B  +
test eax eax +
jz loc_1008334  +
push 2  +
pop eax  +
mov word_10150D4 ax +
mov eax Reserved +
cmp eax edi +
jz loc_1002A6A  +
test byte ptr [eax+1Ch] 1 +
jnz loc_10083BC  +
push offset loc_10013E9  +
call sub_1003E5A  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_10083D9  +
mov eax Reserved +
push 3  +
pop ecx  +
mov word_10150D4 cx +
cmp eax edi +
jz loc_1002AAC  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002AAC  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002AAC  +
push esi  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_100651E  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100840C  +
mov eax Reserved +
cmp eax edi +
jz loc_1002ADF  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002ADF  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002ADF  +
push esi  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_10066F8  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100843F  +
mov eax Reserved +
cmp eax edi +
jz loc_1002B12  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002B12  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002B12  +
push esi  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_1005783  +
mov eax Reserved +
cmp eax edi +
jz loc_1002B3A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002B3A  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002B3A  +
push esi  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_10039BE  +
mov eax Reserved +
cmp eax edi +
jz loc_1002B62  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002B62  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002B62  +
push esi  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 1  +
lea eax [ebp+var_30] +
push eax  +
call sub_1002762  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100846B  +
push 5  +
pop eax  +
mov word_10150D4 ax +
mov eax Reserved +
cmp eax edi +
jz loc_1002BA4  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002BA4  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002BA4  +
push esi  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
lea eax [ebp+var_30] +
push eax  +
push offset hDesktop  +
push offset dword_1015170  +
lea eax [ebp+var_14] +
push eax  +
push offset unk_101516C  +
call sub_1005E0B  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_1008497  +
push 6  +
pop eax  +
mov word_10150D4 ax +
lea eax [ebp+var_14] +
push eax  +
call sub_1005BCF  +
mov eax Reserved +
cmp eax edi +
jz loc_1002C00  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002C00  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002C00  +
push esi  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push ebx  +
call ds:UpdatePerUserSystemParameters  +
mov eax Reserved +
cmp eax edi +
jz loc_1002C20  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002C20  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10084C3  +
call sub_1003B35  +
test eax eax +
jnz loc_1002C5C  +
mov eax Reserved +
cmp eax edi +
jz loc_1002C4C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002C4C  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002C4C  +
push esi  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_100658F  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_10084D6  +
mov eax Reserved +
cmp eax edi +
jz loc_1002C7F  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002C7F  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002C7F  +
push esi  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_1002FB5  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_1008502  +
call sub_1002F01  +
mov ebx ds:__imp_GetLastError +
test eax eax +
jnz loc_100852E  +
mov eax Reserved +
cmp eax edi +
jz loc_1002CC5  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002CC5  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002CC5  +
push esi  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_10033F3  +
mov [ebp+hEvent] eax +
call ebx  +
cmp [ebp+hEvent] 0 +
mov [ebp+var_4] eax +
jz loc_1008610  +
mov eax Reserved +
cmp eax edi +
jz loc_1002D02  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002D02  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002D02  +
push [ebp+var_4]  +
push esi  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push [ebp+hEvent]  +
call ds:SetEvent  +
test eax eax +
jz loc_100863C  +
mov eax Reserved +
cmp eax edi +
jz loc_1002D36  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002D36  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002D36  +
push esi  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_10031AF  +
mov ebx eax +
test ebx ebx +
jl loc_100866D  +
push 0Dh  +
pop eax  +
mov word_10150D4 ax +
mov eax Reserved +
cmp eax edi +
jz loc_1002D71  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002D71  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002D71  +
push esi  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_10035E8  +
xor ebx ebx +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100869D  +
mov eax Reserved +
cmp eax edi +
jz loc_1002DA6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002DA6  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002DA6  +
push esi  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push ebx  +
lea eax [ebp+var_30] +
push eax  +
call sub_1002762  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_10086D4  +
push 0Eh  +
pop eax  +
mov word_10150D4 ax +
call sub_1002F01  +
test eax eax +
jnz loc_1008710  +
mov eax Reserved +
cmp eax edi +
jz loc_1002DF4  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002DF4  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002DF4  +
push esi  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_1003286  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100873D  +
mov ebx ds:CreateTimerQueueTimer +
xor eax eax +
push eax  +
push eax  +
push 7530h  +
push eax  +
push offset byte_100198F  +
push eax  +
lea eax [ebp+var_24] +
push eax  +
call ebx  +
test eax eax +
jz loc_100875B  +
xor eax eax +
push eax  +
push eax  +
push 2710h  +
push eax  +
push offset loc_1001BEE  +
push eax  +
lea eax [ebp+var_28] +
push eax  +
call ebx  +
test eax eax +
jz loc_100879B  +
mov eax Reserved +
push 0Fh  +
pop ecx  +
mov word_10150D4 cx +
cmp eax edi +
jz loc_1002E73  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002E73  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002E73  +
push esi  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 0FFFFFFFFh  +
call sub_1003311  +
jmp loc_10087DB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
mov [ebp+hKey] esi +
mov [ebp+cbData] 4 +
mov [ebp+Type] esi +
mov dword ptr [ebp+Data] esi +
cmp dword_10156BC esi +
jnz loc_1002F7C  +
push ebx  +
lea eax [ebp+hKey] +
push eax  +
xor ebx ebx +
inc ebx  +
push ebx  +
push esi  +
push offset aSystemCurren_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jz loc_100748B  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1002F72  +
test [ecx+1Ch] bl +
jz loc_1002F72  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1002F72  +
push eax  +
push offset dword_10025AC  +
push 66h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
pop ebx  +
cmp [ebp+hKey] esi +
jnz loc_10074FF  +
mov eax dword_10156B8 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov eax Reserved +
mov esi offset Reserved +
mov edi offset dword_10025AC +
cmp eax esi +
jz loc_1002FDD  +
test byte ptr [eax+1Ch] 2 +
jz loc_1002FDD  +
cmp byte ptr [eax+19h] 5 +
jnb loc_10081F8  +
call sub_1006F16  +
test eax eax +
jl loc_100820B  +
push 7  +
pop eax  +
mov word_10150D4 ax +
mov eax Reserved +
cmp eax esi +
jz loc_1003016  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003016  +
cmp byte ptr [eax+19h] 4 +
jb loc_1003016  +
push edi  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_10050C6  +
mov ebx eax +
test ebx ebx +
jnz loc_1003077  +
push 8001h  +
call ds:SetErrorMode  +
mov eax Reserved +
cmp eax esi +
jz loc_100304F  +
test byte ptr [eax+1Ch] 2 +
jz loc_100304F  +
cmp byte ptr [eax+19h] 4 +
jb loc_100304F  +
push edi  +
push 5Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_1003082  +
mov eax Reserved +
cmp eax esi +
jz loc_1003077  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003077  +
cmp byte ptr [eax+19h] 4 +
jb loc_1003077  +
push edi  +
push 5Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov eax hHandle +
test eax eax +
jz locret_10030A0  +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
push hHandle  +
call ds:CloseHandle  +
retn   +
***
mov edi edi +
push esi  +
push 0  +
call sub_100281E  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10030DC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10030DC  +
cmp byte ptr [eax+19h] 4 +
jb loc_10030DC  +
push offset dword_10030E4  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax esi +
pop esi  +
retn 4  +
***
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+8] edi +
test edi edi +
jz loc_1009647  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_1009639  +
push 8  +
pop ecx  +
lea edi [ebp-28h] +
stos   +
mov eax [ebp+8] +
mov [ebp-14h] eax +
mov eax ds:dword_1003158 +
mov dword ptr [ebp-2Ch] 24h +
mov [ebp-20h] ebx +
test eax eax +
jz loc_1001B29  +
jmp loc_100962C  +
***
cmp eax 0B6h +
jnz loc_1001B59  +
jmp loc_1001B52  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push 28h  +
push 0FFFFFFFFh  +
mov [ebp+var_54] 7 +
mov [ebp+var_50] 14h +
mov [ebp+var_4C] 9 +
mov [ebp+var_48] 1Eh +
mov [ebp+var_44] 1Dh +
mov [ebp+var_40] 3 +
mov [ebp+var_3C] 5 +
mov [ebp+var_38] 0Eh +
mov [ebp+var_34] 10h +
mov [ebp+var_30] 1Ch +
mov [ebp+var_2C] 15h +
mov [ebp+var_28] 8 +
mov [ebp+var_24] 16h +
mov [ebp+var_20] 17h +
mov [ebp+var_1C] 11h +
mov [ebp+var_18] 12h +
mov [ebp+var_14] 13h +
mov [ebp+var_10] 0Ah +
mov [ebp+var_C] 19h +
mov [ebp+var_8] 23h +
call ds:NtOpenProcessToken  +
mov edi eax +
test edi edi +
jl loc_100326D  +
push 14h  +
lea eax [ebp+var_54] +
push eax  +
push [ebp+var_4]  +
call ds:RtlRemovePrivileges  +
mov edi eax +
cmp [ebp+var_4] 0 +
jz loc_100327C  +
push [ebp+var_4]  +
call ds:NtClose  +
mov eax edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
xor esi esi +
push esi  +
push offset aDisableremotes  +
push offset aSoftwareMicros  +
push 80000002h  +
call sub_10026F2  +
test eax eax +
jnz loc_1008BBF  +
push 10h  +
push esi  +
push offset loc_1001F49  +
call ds:QueueUserWorkItem  +
test eax eax +
jz loc_1008B7B  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMilliseconds]  +
push dword_10150E8  +
call ds:WaitForSingleObject  +
jmp loc_1008BFA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax Reserved +
mov ebx offset Reserved +
cmp eax ebx +
jz loc_1003363  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003363  +
cmp byte ptr [eax+19h] 4 +
jb loc_1003363  +
push offset dword_10030E4  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
cmp dword_10150EC 0 +
jz loc_1009449  +
mov edi [ebp+arg_8] +
cmp edi 10h +
ja loc_1009456  +
push edi  +
mov esi offset unk_10155C4 +
push esi  +
push [ebp+arg_C]  +
call memcpy  +
add esp 0Ch +
push 10h  +
pop eax  +
mov byte ptr [esi] 0 +
inc esi  +
dec eax  +
jnz loc_1003391  +
and dword_10150EC eax +
mov eax [ebp+arg_10] +
mov [eax] edi +
mov eax Reserved +
pop edi  +
pop esi  +
cmp eax ebx +
pop ebx  +
jz loc_10033CD  +
test byte ptr [eax+1Ch] 1 +
jz loc_10033CD  +
cmp byte ptr [eax+19h] 4 +
jb loc_10033CD  +
push offset dword_10030E4  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
xor eax eax +
pop ebp  +
retn 14h  +
***
push 10h  +
push esi  +
push offset loc_10020B9  +
call ds:QueueUserWorkItem  +
test eax eax +
jnz loc_10027BE  +
jmp loc_10094AE  +
***
push 1  +
push 0  +
call ds:CreateEventW  +
retn   +
***
mov eax [esi+20h] +
cmp eax edx +
jz loc_1003460  +
cmp eax 1 +
jnz loc_100980D  +
mov ecx [esi+24h] +
cmp ecx 10h +
ja loc_100347C  +
push edi  +
lea edi [esi+28h] +
push edi  +
lea edi [esi+2Ch] +
push edi  +
push ecx  +
push eax  +
push edx  +
call sub_100332F  +
pop edi  +
jmp loc_10034AC  +
mov dword ptr [esi+18h] 0C000000Dh +
jmp loc_10034AF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+1Ch] +
xor edx edx +
sub eax edx +
jz loc_1003450  +
dec eax  +
jnz loc_1009801  +
push dword ptr [esi+20h]  +
push edx  +
call sub_10034C3  +
mov [esi+18h] eax +
push esi  +
push [ebp+arg_0]  +
call ds:NtReplyPort  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10034F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10034F2  +
cmp byte ptr [eax+19h] 4 +
jb loc_10034F2  +
push offset dword_10030E4  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax [ebp+arg_4] +
mov dword_10150F0 eax +
xor eax eax +
pop ebp  +
retn 8  +
***
sub eax 4 +
jz loc_100353E  +
sub eax 5 +
jnz loc_10028BB  +
push esi  +
lea eax [ebp+var_44] +
push esi  +
cmp [ebp+var_50] esi +
jnz loc_1009824  +
push 1  +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push eax  +
call edi  +
mov ebx eax +
cmp ebx esi +
jl loc_10028BB  +
push [ebp+var_48]  +
call ds:NtCompleteConnectPort  +
jmp loc_10028BB  +
mov edi ds:NtClose +
cmp [ebp+var_48] esi +
jz loc_100354E  +
push [ebp+var_48]  +
call edi  +
push [ebp+var_4C]  +
call edi  +
push esi  +
call sub_1003571  +
jmp loc_10028C0  +
push [ebp+var_4C]  +
call ds:NtClose  +
jmp loc_10028C0  +
***
mov ecx dword_10150F0 +
push esi  +
push edi  +
mov edi offset Reserved +
mov esi offset dword_10030E4 +
test ecx ecx +
jnz loc_1009315  +
mov eax Reserved +
cmp eax edi +
jz loc_10035AE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10035AE  +
cmp byte ptr [eax+19h] 4 +
jb loc_10035AE  +
push esi  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
pop edi  +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push offset loc_100360F  +
call ds:TpSimpleTryPost  +
mov esi eax +
cmp esi edi +
jl loc_1009AC6  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov eax Reserved +
mov esi offset Reserved +
mov edi offset dword_10017BC +
cmp eax esi +
jz loc_1003640  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003640  +
cmp byte ptr [eax+19h] 4 +
jb loc_1003640  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call ds:LoadLocalFonts  +
mov eax Reserved +
cmp eax esi +
jz loc_1003669  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003669  +
cmp byte ptr [eax+19h] 4 +
jb loc_1003669  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
pop edi  +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1007382  +
cmp word ptr [edx] 0 +
jz loc_100737E  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100377D  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
test edx edx +
jz loc_10037BC  +
cmp word ptr [edx] 0 +
jz loc_100738A  +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
mov edx offset aNull +
jmp loc_100379E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jnz loc_10073A2  +
push dword ptr [ebp+14h]  +
call ds:EtwGetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:EtwGetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:EtwGetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jnz loc_10073B9  +
test cl 2 +
jnz loc_10073E0  +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push eax  +
call ds:SetPriorityClass  +
test eax eax +
jz loc_1007430  +
push 2  +
call ds:GetCurrentThread  +
push eax  +
call ds:SetThreadPriority  +
test eax eax +
jz loc_100745D  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
call ds:HeapCreate  +
mov dword_10150D0 eax +
cmp eax esi +
jz loc_10076D8  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset dword_1015218  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call ds:EtwEventRegister  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
push hHeap  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_1003939  +
cmp edx 7FFFFFFFh +
ja loc_1003939  +
test eax eax +
jl loc_1003935  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1001881  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100391F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push ebx  +
push edi  +
push 0  +
pop eax  +
mov ebx 7FFFFFFFh +
jz loc_10039A5  +
cmp edx ebx +
ja loc_10039A5  +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_10039B5  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_10039AC  +
cmp [eax] cx +
jz loc_100397F  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1003975  +
cmp esi ecx +
jz loc_10039AC  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
test eax eax +
jl loc_100399F  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_1001881  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100395F  +
mov [ebp+arg_4] 80070057h +
jmp loc_1003987  +
xor ecx ecx +
jmp loc_100398B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
push offset aSystemrootTemp  +
mov [ebp+pObjectName] edi +
call sub_1006A07  +
mov [ebp+pObjectName] eax +
cmp eax edi +
jz loc_1008F01  +
push edi  +
push eax  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_1008F09  +
call ds:__imp_GetLastError  +
mov esi eax +
cmp [ebp+pObjectName] edi +
jz loc_1003A06  +
lea eax [ebp+pObjectName] +
push eax  +
call sub_100575D  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
cmp al 61h +
jl loc_1004D2A  +
cmp al 66h +
jg loc_1004D2A  +
movsx eax al +
sub eax 57h +
jmp loc_1004A51  +
cmp cl 61h +
jl loc_1004D37  +
cmp cl 66h +
jg loc_1004D37  +
movsx ecx cl +
sub ecx 57h +
jmp loc_1004A6D  +
cmp al 61h +
jl loc_1004D49  +
cmp al 66h +
jg loc_1004D49  +
movsx eax al +
sub eax 57h +
jmp loc_1004AFC  +
movsx ecx cl +
sub ecx 30h +
jmp loc_1004BEB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
mov [ebp+hKey] eax +
cmp dword_1015104 eax +
jnz loc_1003AD3  +
push esi  +
lea ecx [ebp+hKey] +
push ecx  +
push 2000000h  +
push eax  +
push offset aSystemCurren_2  +
push 80000002h  +
call ds:RegOpenKeyExW  +
xor esi esi +
inc esi  +
test eax eax +
jz loc_100945E  +
mov dword_1015104 esi +
pop esi  +
mov eax dword_10156F0 +
leave   +
retn   +
***
xor eax eax +
inc eax  +
cmp dword_10150FC eax +
jz locret_1003B4B  +
cmp dword_10150F8 2 +
jz locret_1003B4B  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push 78h  +
lea eax [ebp+var_7C] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_7C] +
push eax  +
push ebx  +
push 0  +
push 0  +
mov [ebp+var_7C] 78h +
mov [ebp+var_50] 20000h +
call QueryTraceW  +
test eax eax +
jz loc_1003BAB  +
cmp eax 0EAh +
jz loc_1003BAB  +
xor eax eax +
xor edx edx +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10015A4  +
leave   +
retn   +
mov eax [ebp+var_74] +
mov edx [ebp+var_70] +
jmp loc_1003B9F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_10094FF  +
push [ebp+uBytes]  +
push edi  +
call ds:LocalAlloc  +
mov [esi] eax +
cmp eax edi +
jz loc_10094F2  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push eax  +
call ds:LocalFree  +
and dword ptr [esi] 0 +
jmp loc_100159A  +
***
push offset dword_1015114  +
push dword_10156F4  +
mov dword_1015114 eax +
push offset unk_10151E0  +
push offset unk_10151E4  +
push offset unk_10151DC  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1015110 eax +
retn   +
***
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10150C4 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_10097ED  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1003CDF  +
test dword_10150C4 ebx +
jz loc_1003CDF  +
mov dword_10150C4 esi +
not esi  +
mov dword_10150C8 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_1003CCC  +
***
retn 0FFDEh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 1 +
mov dword_1015118 eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push esi  +
mov esi offset loc_1011CA1 +
mov dword_1015150 ecx +
test ecx ecx +
jz loc_1009834  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_1003DB1  +
mov dword_1015154 ecx +
mov ecx [eax+8] +
mov dword_1015158 ecx +
test ecx ecx +
jz loc_100983F  +
mov ecx [eax+0Ch] +
mov dword_101515C ecx +
test ecx ecx +
jnz loc_1003D75  +
mov dword_101515C offset loc_1011CD5 +
mov ecx [eax+10h] +
mov edx offset loc_1011CBB +
mov dword_1015160 ecx +
test ecx ecx +
jz loc_100984E  +
mov ecx [eax+14h] +
mov dword_1015164 ecx +
test ecx ecx +
jz loc_1009859  +
mov eax [eax+18h] +
pop esi  +
mov dword_1015168 eax +
test eax eax +
jz loc_1009864  +
pop ebp  +
retn 4  +
mov dword_1015150 esi +
jmp loc_1003D4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:SetThreadDesktop +
xor ebx ebx +
push edi  +
mov [ebp+var_4] ebx +
push [ebp+hDesktop]  +
call esi  +
test eax eax +
jz loc_1009CD8  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
cmp [ebp-1Ch] esi +
jnz loc_100A17A  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call ds:RtlLengthSid  +
mov edi eax +
lea ebx [edi+8] +
push ebx  +
call sub_1005DEC  +
mov esi eax +
test esi esi +
jz loc_100A1F7  +
push [ebp+arg_0]  +
movzx ax bl +
mov [esi+2] ax +
mov al [ebp+arg_8] +
or al [ebp+arg_C] +
mov byte ptr [esi] 0 +
mov [esi+1] al +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
lea eax [esi+8] +
push eax  +
push edi  +
call ds:RtlCopySid  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push edi  +
xor ebx ebx +
push ebx  +
push 2  +
lea eax [ebp+var_4] +
push eax  +
xor edi edi +
push 23h  +
inc edi  +
call ds:NtQuerySystemInformation  +
cmp byte ptr [ebp+var_4] bl +
jz loc_100A620  +
push esi  +
push offset TopLevelExceptionFilter  +
call ds:SetUnhandledExceptionFilter  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
push offset aSoftwareMicr_0  +
push 80000002h  +
mov [ebp+hKey] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1003EE4  +
push 4  +
pop esi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] esi +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_100A637  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp edi ebx +
jz loc_1003F24  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 20h  +
call ds:NtSystemDebugControl  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1003F09  +
test byte ptr [eax+1Ch] 8 +
jnz loc_100A64D  +
push ebx  +
mov eax 0EA60h +
push eax  +
push eax  +
xor eax eax +
cmp esi ebx +
setl al  +
dec eax  +
push eax  +
push [ebp+arg_0]  +
push ebx  +
call ds:SetTimerQueueTimer  +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jnb loc_1003F6D  +
sub eax 1000h +
test [eax] eax +
jmp loc_1003F60  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 1  +
call ds:RtlCreateEnvironment  +
test eax eax +
jl loc_1003F9F  +
push [ebp+arg_0]  +
call sub_1003FA8  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1003F9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
xor eax eax +
lea ecx [ebp+hKey] +
push ecx  +
inc eax  +
push eax  +
xor ebx ebx +
push ebx  +
push offset aSystemCurren_3  +
push 80000002h  +
mov [ebp+var_2C] eax +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jnz loc_10090C3  +
push ebx  +
push ebx  +
lea eax [ebp+dwBytes] +
push eax  +
lea eax [ebp+cbMaxValueNameLen] +
push eax  +
lea eax [ebp+cValues] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
test eax eax +
jnz loc_10090F7  +
push [ebp+dwBytes]  +
call sub_1006A60  +
mov [ebp+lpSrc] eax +
cmp eax ebx +
jz loc_10090F7  +
inc [ebp+cbMaxValueNameLen]  +
mov eax [ebp+cbMaxValueNameLen] +
add eax eax +
push eax  +
call sub_1006A60  +
mov [ebp+lpValueName] eax +
cmp eax ebx +
jz loc_1009102  +
push esi  +
xor esi esi +
push edi  +
mov edi ds:RegEnumValueW +
cmp [ebp+cValues] ebx +
jbe loc_1004095  +
mov eax [ebp+cbMaxValueNameLen] +
mov [ebp+cbValueName] eax +
mov eax [ebp+dwBytes] +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpSrc]  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
push [ebp+lpValueName]  +
push esi  +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_10041D3  +
cmp [ebp+cbData] 1000h +
jnb loc_1009116  +
mov eax [ebp+Type] +
dec eax  +
jnz loc_100408F  +
push 1  +
push [ebp+lpSrc]  +
push [ebp+lpValueName]  +
push [ebp+arg_0]  +
call sub_1004511  +
test eax eax +
jz loc_1009125  +
inc esi  +
cmp esi [ebp+cValues] +
jb loc_1004037  +
mov [ebp+dwIndex] ebx +
cmp [ebp+cValues] ebx +
jbe loc_10040EF  +
mov eax [ebp+cbMaxValueNameLen] +
mov [ebp+cbValueName] eax +
mov eax [ebp+dwBytes] +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpSrc]  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
push [ebp+lpValueName]  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_10041D3  +
cmp [ebp+cbData] 1000h +
jnb loc_1009166  +
mov eax [ebp+Type] +
dec eax  +
dec eax  +
jz loc_100419A  +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+cValues] +
jb loc_100409D  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
pop esi  +
cmp [ebp+lpValueName] ebx +
jz loc_1004108  +
lea eax [ebp+lpValueName] +
push eax  +
call sub_100575D  +
cmp [ebp+lpSrc] ebx +
jz loc_1004116  +
lea eax [ebp+lpSrc] +
push eax  +
call sub_100575D  +
mov eax [ebp+var_2C] +
pop ebx  +
leave   +
retn 4  +
***
push [ebp+lpSrc]  +
call sub_1006A07  +
mov [ebp+var_30] eax +
cmp eax ebx +
jz loc_1009175  +
push 1  +
push eax  +
push [ebp+lpValueName]  +
push [ebp+arg_0]  +
call sub_1004511  +
mov esi eax +
lea eax [ebp+var_30] +
push eax  +
call sub_100575D  +
cmp esi ebx +
jnz loc_10040E4  +
jmp loc_1009175  +
mov [ebp+var_2C] ebx +
jmp loc_10040EF  +
***
call sub_10017FB  +
mov dword ptr [ebp-20h] 0C0000017h +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-28h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-4] ebx +
mov edi [ebp+0Ch] +
mov eax edi +
shl eax 2 +
push eax  +
call sub_1005DEC  +
mov [ebp-24h] eax +
cmp eax ebx +
jz loc_100A232  +
mov [ebp-30h] ebx +
xor esi esi +
mov [ebp-1Ch] esi +
cmp esi edi +
jnb loc_100427C  +
mov eax esi +
imul eax eax +
mov ecx [ebp+8] +
add eax ecx +
movzx ecx byte ptr [eax+8] +
push ecx  +
push ebx  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1003DFE  +
mov ecx [ebp-24h] +
mov [ecx+esi*4] eax +
mov eax [ebp-24h] +
lea eax [eax+esi*4] +
cmp [eax] ebx +
jz loc_100A26E  +
mov eax [eax] +
movzx eax word ptr [eax+2] +
add [ebp-30h] eax +
inc esi  +
jmp loc_100421F  +
mov esi [ebp-30h] +
add esi 8 +
push 14h  +
pop edi  +
push esi  +
call sub_1005DEC  +
mov [ebp-28h] eax +
test eax eax +
jz loc_100A29C  +
push 2  +
pop ebx  +
push ebx  +
push esi  +
push eax  +
call ds:RtlCreateAcl  +
mov [ebp-20h] eax +
xor esi esi +
mov [ebp-1Ch] esi +
cmp esi [ebp+0Ch] +
jnb loc_10042D5  +
mov eax [ebp-24h] +
mov eax [eax+esi*4] +
movzx ecx word ptr [eax+2] +
push ecx  +
push eax  +
push 0  +
push ebx  +
push dword ptr [ebp-28h]  +
call ds:RtlAddAce  +
mov [ebp-20h] eax +
test eax eax +
jl loc_100A2CA  +
inc esi  +
jmp loc_10042A7  +
push edi  +
call sub_1005DEC  +
mov [ebp-2Ch] eax +
test eax eax +
jz loc_100A306  +
push 1  +
push eax  +
call ds:RtlCreateSecurityDescriptor  +
mov [ebp-20h] eax +
push 0  +
push dword ptr [ebp-28h]  +
push 1  +
push dword ptr [ebp-2Ch]  +
call ds:RtlSetDaclSecurityDescriptor  +
mov [ebp-20h] eax +
test eax eax +
jl loc_100A33B  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1004329  +
mov eax [ebp-2Ch] +
call sub_10015E2  +
retn 8  +
***
xor edi edi +
cmp [ebp-24h] edi +
jz loc_100435F  +
mov [ebp-1Ch] edi +
mov esi [ebp+0Ch] +
cmp esi edi +
jbe loc_1004356  +
mov eax [ebp-1Ch] +
mov ecx [ebp-24h] +
lea eax [ecx+eax*4] +
cmp [eax] edi +
jz loc_100434E  +
push dword ptr [eax]  +
call sub_100436E  +
inc dword ptr [ebp-1Ch]  +
cmp [ebp-1Ch] esi +
jb loc_100433A  +
lea eax [ebp-24h] +
push eax  +
call sub_1005BCF  +
cmp [ebp-2Ch] edi +
jz loc_100A374  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
call sub_1005BCF  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1040h +
call sub_1003F4C  +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
mov [ebp+var_1034] esi +
mov [ebp+nSize] 10h +
call ds:GetComputerNameW  +
test eax eax +
jz loc_10043D9  +
push 1  +
lea eax [ebp+Buffer] +
push eax  +
push offset aComputername  +
push esi  +
call sub_1004511  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor edi edi +
push edi  +
push offset aSoftwareMicr_3  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100449E  +
push ebx  +
mov ebx 401h +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Src] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push off_10156C0[edi]  +
mov [ebp+cbData] 802h +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1004485  +
push ebx  +
lea eax [ebp+Value] +
push eax  +
lea eax [ebp+Src] +
push eax  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jz loc_1004485  +
cmp eax ebx +
jnb loc_1004485  +
push 1  +
lea eax [ebp+Value] +
push eax  +
lea esi off_10156C4[edi] +
push dword ptr [esi]  +
push [ebp+var_1034]  +
call sub_1004511  +
lea eax [ebp+Value] +
push eax  +
push dword ptr [esi]  +
call ds:SetEnvironmentVariableW  +
add edi 8 +
cmp edi 10h +
jb loc_1004406  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop ebx  +
mov ecx [ebp+var_4] +
xor eax eax +
pop edi  +
xor ecx ebp +
inc eax  +
pop esi  +
call sub_10015A4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1020h +
call sub_1003F4C  +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
cmp dword ptr [ebx] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+lpString1] edi +
mov [ebp+lpszLongPath] eax +
jz loc_100469B  +
test edi edi +
jz loc_100469B  +
cmp word ptr [edi] 0 +
jz loc_100469B  +
push edi  +
lea eax [ebp+var_101C] +
push eax  +
call ds:RtlInitUnicodeStringEx  +
test eax eax +
jl loc_100469B  +
push 1000h  +
call sub_1006A60  +
mov [ebp+var_100C] eax +
mov esi 800h +
test eax eax +
jz loc_10045D3  +
mov eax esi +
mov word ptr [ebp+var_1010] ax +
mov word ptr [ebp+var_1010+2] ax +
lea eax [ebp+var_1010] +
push eax  +
lea eax [ebp+var_101C] +
push eax  +
push dword ptr [ebx]  +
call ds:RtlQueryEnvironmentVariable_U  +
mov [ebp+var_1020] eax +
lea eax [ebp+var_100C] +
push eax  +
call sub_100575D  +
cmp [ebp+var_1020] 0 +
jl loc_10045D3  +
cmp [ebp+arg_C] 0 +
jz loc_1004652  +
mov eax [ebp+lpszLongPath] +
test eax eax +
jz loc_1004697  +
cmp word ptr [eax] 0 +
jz loc_1004697  +
push offset String2  +
push edi  +
mov edi ds:lstrcmpiW +
call edi  +
test eax eax +
jz loc_100467A  +
push offset aTmp  +
push [ebp+lpString1]  +
call edi  +
test eax eax +
jz loc_100467A  +
push [ebp+lpszLongPath]  +
lea eax [ebp+szShortPath] +
push esi  +
push eax  +
call sub_1001845  +
lea eax [ebp+szShortPath] +
push eax  +
lea eax [ebp+var_1010] +
push eax  +
call ds:RtlInitUnicodeStringEx  +
test eax eax +
jl loc_100469B  +
lea eax [ebp+var_1010] +
push eax  +
lea eax [ebp+var_101C] +
push eax  +
push ebx  +
call ds:RtlSetEnvironmentVariable  +
test eax eax +
jl loc_100469B  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 10h  +
push esi  +
lea eax [ebp+szShortPath] +
push eax  +
push [ebp+lpszLongPath]  +
call ds:GetShortPathNameW  +
test eax eax +
jnz loc_1004621  +
jmp loc_100460E  +
push 0  +
jmp loc_1004640  +
xor eax eax +
jmp loc_1004655  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi ds:RegOpenKeyExW +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
xor esi esi +
push esi  +
push offset aSystemCurren_4  +
mov ebx 80000002h +
push ebx  +
mov [ebp+hKey] esi +
mov [ebp+phkResult] esi +
call edi  +
mov [ebp+var_C] eax +
cmp eax esi +
jnz loc_1004722  +
push esi  +
push esi  +
push esi  +
push offset aHostname  +
push [ebp+hKey]  +
push offset aNvHostname  +
push [ebp+hKey]  +
call sub_100487B  +
push esi  +
push esi  +
push esi  +
push offset aDomain  +
push [ebp+hKey]  +
mov [ebp+var_C] eax +
push offset aNvDomain  +
push [ebp+hKey]  +
call sub_100487B  +
cmp [ebp+var_C] esi +
jnz loc_1004716  +
mov [ebp+var_C] eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov [ebp+hKey] esi +
lea eax [ebp+phkResult] +
push eax  +
push 2001Fh  +
push esi  +
push offset aSoftwarePolici  +
push ebx  +
call edi  +
mov edi eax +
cmp edi esi +
jz loc_10078A5  +
cmp [ebp+hKey] esi +
jnz loc_10078D1  +
cmp [ebp+phkResult] esi +
jnz loc_10078DF  +
cmp [ebp+var_C] esi +
jnz loc_1004758  +
mov [ebp+var_C] edi +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 88h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
mov eax [ebp+lpValueName] +
push ebx  +
mov ebx [ebp+hKey] +
push esi  +
mov esi ds:RegQueryValueExW +
mov [ebp+var_7C] ecx +
mov ecx [ebp+arg_C] +
push edi  +
mov [ebp+var_78] ecx +
mov ecx [ebp+arg_14] +
mov [ebp+var_80] ecx +
mov ecx [ebp+arg_18] +
lea edx [ebp+dwBytes] +
push edx  +
mov [ebp+var_84] ecx +
lea edx [ebp+Data] +
push edx  +
lea ecx [ebp+Data] +
lea edx [ebp+dwType] +
push edx  +
mov [ebp+lpData] ecx +
xor ecx ecx +
push ecx  +
push eax  +
push ebx  +
mov [ebp+var_88] eax +
mov [ebp+dwBytes] ecx +
mov [ebp+dwType] ecx +
call esi  +
mov edi 0EAh +
mov [ebp+var_6C] eax +
cmp eax edi +
jnz loc_1004936  +
cmp [ebp+lpData] 0 +
jz loc_10048FD  +
lea eax [ebp+Data] +
cmp [ebp+lpData] eax +
jnz loc_1007872  +
push [ebp+dwBytes]  +
call sub_1006A60  +
mov [ebp+lpData] eax +
test eax eax +
jz loc_1004922  +
lea ecx [ebp+dwBytes] +
push ecx  +
push eax  +
lea eax [ebp+dwType] +
push eax  +
push 0  +
push [ebp+var_88]  +
push ebx  +
call esi  +
jmp loc_10048E4  +
mov [ebp+var_6C] 0Eh +
jmp loc_1004989  +
cmp [ebp+arg_10] esi +
jnz loc_1007880  +
jmp loc_1004955  +
xor esi esi +
cmp eax esi +
jnz loc_100492B  +
push [ebp+dwBytes]  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push esi  +
push [ebp+var_78]  +
push [ebp+var_7C]  +
call ds:RegSetValueExW  +
mov [ebp+var_6C] eax +
cmp [ebp+var_6C] esi +
jnz loc_1004973  +
mov eax [ebp+var_80] +
cmp eax esi +
jnz loc_1007891  +
mov eax [ebp+var_84] +
cmp eax esi +
jnz loc_100789B  +
cmp [ebp+lpData] esi +
jz loc_1004989  +
lea eax [ebp+Data] +
cmp [ebp+lpData] eax +
jz loc_1004989  +
lea eax [ebp+lpData] +
push eax  +
call sub_100575D  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_6C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 1Ch  +
***
cmp al 61h +
jl loc_1004D7F  +
cmp al 66h +
jg loc_1004D7F  +
movsx eax al +
sub eax 57h +
jmp loc_1004C7D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx ds:RegOpenKeyExW +
push esi  +
push edi  +
mov [ebp+var_30] eax +
lea eax [ebp+var_20] +
mov [ebp+var_28] eax +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor edi edi +
push edi  +
push offset aJd  +
push hKey  +
call ebx  +
test eax eax +
jnz loc_1004A91  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cbClass] +
push eax  +
lea eax [ebp+Class] +
push eax  +
push [ebp+hKey]  +
mov [ebp+cbClass] 9 +
call ds:RegQueryInfoKeyA  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
cmp esi edi +
jnz loc_1004A91  +
xor edx edx +
mov al [ebp+edx+Class] +
cmp al 30h +
jl loc_1003A30  +
cmp al 39h +
jg loc_1003A30  +
movsx eax al +
sub eax 30h +
mov cl [ebp+edx-0Fh] +
cmp cl 30h +
jl loc_1003A4B  +
cmp cl 39h +
jg loc_1003A4B  +
movsx ecx cl +
sub ecx 30h +
cmp eax edi +
jl loc_1004D45  +
cmp ecx edi +
jl loc_1004D45  +
shl al 4 +
add al cl +
mov ecx [ebp+var_28] +
inc [ebp+var_28]  +
inc edx  +
inc edx  +
mov [ecx] al +
cmp edx 8 +
jb loc_1004A37  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push edi  +
push offset aSkew1  +
push hKey  +
call ebx  +
test eax eax +
jnz loc_1004B4A  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cbClass] +
push eax  +
lea eax [ebp+Class] +
push eax  +
push [ebp+hKey]  +
mov [ebp+cbClass] 9 +
call ds:RegQueryInfoKeyA  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
cmp esi edi +
jnz loc_1004B4A  +
xor edx edx +
mov al [ebp+edx+Class] +
cmp al 30h +
jl loc_1003A68  +
cmp al 39h +
jg loc_1003A68  +
movsx eax al +
sub eax 30h +
mov cl [ebp+edx-0Fh] +
cmp cl 30h +
jl loc_1004B0E  +
cmp cl 39h +
jle loc_1004D1F  +
cmp cl 61h +
jl loc_1004D56  +
cmp cl 66h +
jg loc_1004D56  +
movsx ecx cl +
sub ecx 57h +
cmp eax edi +
jl loc_1004D45  +
cmp ecx edi +
jl loc_1004D45  +
shl al 4 +
add al cl +
mov ecx [ebp+var_28] +
inc [ebp+var_28]  +
inc edx  +
inc edx  +
mov [ecx] al +
cmp edx 8 +
jb loc_1004AE2  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push edi  +
push offset aGbg  +
push hKey  +
call ebx  +
test eax eax +
jnz loc_1004C0F  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cbClass] +
push eax  +
lea eax [ebp+Class] +
push eax  +
push [ebp+hKey]  +
mov [ebp+cbClass] 9 +
call ds:RegQueryInfoKeyA  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
cmp esi edi +
jnz loc_1004C0F  +
xor edx edx +
mov al [ebp+edx+Class] +
cmp al 30h +
jl loc_1004BAB  +
cmp al 39h +
jle loc_1009226  +
cmp al 61h +
jl loc_1004D64  +
cmp al 66h +
jg loc_1004D64  +
movsx eax al +
sub eax 57h +
mov cl [ebp+edx-0Fh] +
cmp cl 30h +
jl loc_1004BD3  +
cmp cl 39h +
jle loc_1003A83  +
cmp cl 61h +
jl loc_1004D71  +
cmp cl 66h +
jg loc_1004D71  +
movsx ecx cl +
sub ecx 57h +
cmp eax edi +
jl loc_1004D45  +
cmp ecx edi +
jl loc_1004D45  +
shl al 4 +
add al cl +
mov ecx [ebp+var_28] +
inc [ebp+var_28]  +
inc edx  +
inc edx  +
mov [ecx] al +
cmp edx 8 +
jb loc_1004B9B  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push edi  +
push offset aData  +
push hKey  +
call ebx  +
test eax eax +
jnz loc_1004CB4  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cbClass] +
push eax  +
lea eax [ebp+Class] +
push eax  +
push [ebp+hKey]  +
mov [ebp+cbClass] 9 +
call ds:RegQueryInfoKeyA  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
cmp esi edi +
jnz loc_1004CB4  +
mov esi [ebp+var_28] +
xor edx edx +
mov al [ebp+edx+Class] +
cmp al 30h +
jl loc_100499D  +
cmp al 39h +
jg loc_100499D  +
movsx eax al +
sub eax 30h +
mov cl [ebp+edx-0Fh] +
cmp cl 30h +
jl loc_1004D0A  +
cmp cl 39h +
jg loc_1004D0A  +
movsx ecx cl +
sub ecx 30h +
cmp eax edi +
jl loc_1004D45  +
cmp ecx edi +
jl loc_1004D45  +
shl al 4 +
add al cl +
mov [esi] al +
inc esi  +
inc edx  +
inc edx  +
cmp edx 8 +
jb loc_1004C63  +
xor eax eax +
movzx ecx byte_10156D0[eax] +
mov dl byte ptr [ebp+eax+var_20] +
mov esi [ebp+var_30] +
inc eax  +
mov [ecx+esi] dl +
cmp eax 10h +
jb loc_1004CB6  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 4  +
***
cmp cl 61h +
jl loc_1004D8C  +
cmp cl 66h +
jg loc_1004D8C  +
movsx ecx cl +
sub ecx 57h +
jmp loc_1004C95  +
movsx ecx cl +
sub ecx 30h +
jmp loc_1004B26  +
cmp al 41h +
jge loc_10091C8  +
jmp loc_10091D7  +
cmp cl 41h +
jge loc_10091DF  +
jmp loc_10091EF  +
xor eax eax +
jmp loc_1004CD0  +
cmp al 41h +
jge loc_10091F7  +
jmp loc_1009206  +
cmp cl 41h +
jge loc_100920E  +
jmp loc_100921E  +
cmp al 41h +
jge loc_1009231  +
jmp loc_1009240  +
cmp cl 41h +
jge loc_1009248  +
jmp loc_1009258  +
cmp al 41h +
jge loc_1009260  +
jmp loc_100926F  +
cmp cl 41h +
jge loc_1009277  +
jmp loc_1009287  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_1004DC0  +
test eax eax +
jnz loc_1004DC0  +
mov ecx [esi] +
test ecx ecx +
jz loc_1004DBB  +
call ecx  +
add esi 4 +
jmp loc_1004DAA  +
pop esi  +
pop ebp  +
retn   +
***
call sub_1003C5C  +
push 58h  +
push offset dword_1004EE0  +
call sub_10017FB  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-68h] +
push eax  +
call ds:GetStartupInfoA  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jnz loc_100969A  +
xor esi esi +
inc esi  +
mov eax dword_1015134 +
cmp eax esi +
jz loc_10096B8  +
mov eax dword_1015134 +
test eax eax +
jnz loc_1004F36  +
mov dword_1015134 esi +
push offset dword_1004ED8  +
push offset dword_1004ECC  +
call sub_1004D9F  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009784  +
mov eax dword_1015134 +
cmp eax esi +
jnz loc_1004E79  +
push offset dword_1004EC8  +
push offset dword_1004EC0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1015134 2 +
test ebx ebx +
jnz loc_1004E85  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1015704 0 +
jnz loc_10096C5  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp-20h] esi +
mov al [esi] +
cmp al 20h +
jbe loc_1004F08  +
cmp al 22h +
jz loc_1009718  +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jnz loc_1009728  +
inc esi  +
jmp loc_1004E99  +
test al al +
jnz loc_1004F41  +
mov al [esi] +
test al al +
jnz loc_10096E9  +
test byte ptr [ebp-3Ch] 1 +
jnz loc_10096FA  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push offset __ImageBase  +
call sub_100290C  +
jmp loc_1009703  +
mov dword_10158B8 esi +
jmp loc_1004E55  +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1004F0C  +
jmp loc_1004EA2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi Reserved +
push edi  +
mov edi offset dword_10150CC +
test esi esi +
jz loc_1004F94  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_10037F0  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:EtwRegisterTraceGuidsW  +
mov esi [esi] +
jmp loc_1004F65  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 10h  +
call sub_1005D99  +
mov esi eax +
test esi esi +
jz loc_1009FB2  +
mov eax [ebp+arg_4] +
mov [eax] esi +
mov ecx [esi+4] +
mov eax ecx +
imul eax eax +
add eax [esi+0Ch] +
push ebx  +
push edi  +
push 4  +
inc ecx  +
mov ebx 0F037Fh +
push ebx  +
mov [esi+4] ecx +
push dword_1015210  +
push eax  +
call sub_10050A4  +
mov ecx [esi+4] +
mov eax ecx +
imul eax eax +
add eax [esi+0Ch] +
push 0Bh  +
inc ecx  +
mov edi 0F0000000h +
push edi  +
mov [esi+4] ecx +
push dword_1015210  +
push eax  +
call sub_10050A4  +
mov ecx [esi+4] +
mov eax ecx +
imul eax eax +
add eax [esi+0Ch] +
push 4  +
inc ecx  +
push 20166h  +
mov [esi+4] ecx +
push dword_1015200  +
push eax  +
call sub_10050A4  +
mov ecx [esi+4] +
mov eax ecx +
imul eax eax +
add eax [esi+0Ch] +
push 0Bh  +
inc ecx  +
push 200000C7h  +
mov [esi+4] ecx +
push dword_1015200  +
push eax  +
call sub_10050A4  +
mov ecx [esi+4] +
mov eax ecx +
imul eax eax +
add eax [esi+0Ch] +
push 4  +
inc ecx  +
push ebx  +
mov [esi+4] ecx +
push dword_10151F4  +
push eax  +
call sub_10050A4  +
mov ecx [esi+4] +
mov eax ecx +
imul eax eax +
add eax [esi+0Ch] +
push 0Bh  +
inc ecx  +
push edi  +
mov [esi+4] ecx +
push dword_10151F4  +
push eax  +
call sub_10050A4  +
mov eax [esi+4] +
mov [esi+8] eax +
mov eax [ebp+arg_4] +
push 0  +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call sub_1005AE6  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
mov cl [ebp+arg_C] +
mov [eax+8] cl +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4A4h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ds:RegOpenKeyExW +
xor esi esi +
lea eax [ebp+phkResult] +
push eax  +
push 2000000h  +
push esi  +
push offset aSystemCurrentc  +
mov ebx 80000002h +
push ebx  +
mov [ebp+lpEnvironment] esi +
mov [ebp+hKey] esi +
mov [ebp+dwType] esi +
mov [ebp+cbData] esi +
mov dword ptr [ebp+Data] esi +
mov [ebp+phkResult] esi +
mov [ebp+hObject] esi +
call edi  +
test eax eax +
jz loc_1007AAB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100515C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100515C  +
cmp byte ptr [eax+19h] 4 +
jb loc_100515C  +
push offset dword_10025AC  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_1006BEA  +
mov [ebp+var_460] eax +
cmp eax esi +
jnz loc_1007B30  +
push 8  +
pop eax  +
mov word_10150D4 ax +
lea eax [ebp+lpEnvironment] +
push eax  +
call sub_1003F7C  +
test eax eax +
jz loc_1007B66  +
lea eax [ebp+lpEnvironment] +
push eax  +
call sub_1004385  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset aSoftwareMicr_0  +
push ebx  +
call edi  +
test eax eax +
jnz loc_10051F6  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+dwType] +
push eax  +
push esi  +
push offset aDontwatchsyspr  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_1007B9B  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
push esi  +
push esi  +
push offset aSystemrootSyst  +
call sub_1006981  +
mov [ebp+lpCommandLine] eax +
cmp eax esi +
jz loc_1007F2C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005240  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005240  +
cmp byte ptr [eax+19h] 4 +
jb loc_1005240  +
push [ebp+lpCommandLine]  +
push offset dword_10025AC  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100375D  +
push esi  +
push esi  +
push 2  +
push [ebp+lpEnvironment]  +
push 80h  +
push esi  +
push esi  +
push offset dword_100369C  +
push [ebp+lpCommandLine]  +
call sub_1006A7F  +
mov [ebp+var_460] eax +
lea eax [ebp+lpCommandLine] +
push eax  +
call sub_100575D  +
cmp [ebp+var_460] esi +
jnz loc_1007BB8  +
push 9  +
pop eax  +
mov word_10150D4 ax +
cmp dword_10150FC esi +
jnz loc_1007BEE  +
lea eax [ebp+hKey] +
push eax  +
push 2001Bh  +
push esi  +
push offset aSystemCurren_5  +
push ebx  +
call edi  +
test eax eax +
jz loc_1007C05  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset aSystemCurren_6  +
push ebx  +
call edi  +
cmp eax esi +
jz loc_1007DEF  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset aSoftwareMicr_4  +
push ebx  +
call edi  +
cmp eax esi +
jnz loc_100532B  +
mov edi ds:RegQueryValueExW +
push esi  +
push esi  +
push esi  +
push esi  +
push offset aShutdowneventp  +
push [ebp+hKey]  +
call edi  +
mov ebx eax +
cmp ebx esi +
jz loc_1005317  +
push esi  +
push esi  +
push esi  +
push esi  +
push offset aShutdownstates  +
push [ebp+hKey]  +
call edi  +
mov ebx eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp ebx esi +
jz loc_1007DFB  +
mov ebx 80h +
mov edi offset dword_100369C +
push esi  +
push 1  +
push offset aSystemrootSy_0  +
call sub_1006981  +
mov [ebp+lpCommandLine] eax +
cmp eax esi +
jz loc_1007F2C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005380  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005380  +
cmp byte ptr [eax+19h] 4 +
jb loc_1005380  +
push [ebp+lpCommandLine]  +
push offset dword_10025AC  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100375D  +
push esi  +
push esi  +
push 2  +
push [ebp+lpEnvironment]  +
push ebx  +
push esi  +
push 1  +
push edi  +
push [ebp+lpCommandLine]  +
call sub_1006A7F  +
mov [ebp+var_460] eax +
lea eax [ebp+lpCommandLine] +
push eax  +
call sub_100575D  +
cmp [ebp+var_460] esi +
jnz loc_1007EF9  +
push 0Ah  +
pop eax  +
mov word_10150D4 ax +
call sub_1002F01  +
test eax eax +
jnz loc_1007F7C  +
push esi  +
push 4  +
push offset aSystemrootSy_1  +
call sub_1006981  +
mov [ebp+lpCommandLine] eax +
cmp eax esi +
jz loc_1007F2C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005419  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005419  +
cmp byte ptr [eax+19h] 4 +
jb loc_1005419  +
push [ebp+lpCommandLine]  +
push offset dword_10025AC  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100375D  +
push esi  +
push esi  +
push 2  +
push [ebp+lpEnvironment]  +
push ebx  +
push 8  +
push 4  +
push edi  +
push [ebp+lpCommandLine]  +
call sub_1006A7F  +
mov [ebp+var_460] eax +
lea eax [ebp+lpCommandLine] +
push eax  +
call sub_100575D  +
cmp [ebp+var_460] esi +
jnz loc_1007F3B  +
push 0Bh  +
pop eax  +
mov word_10150D4 ax +
mov edi offset Reserved +
push [ebp+lpEnvironment]  +
call ds:RtlDestroyEnvironment  +
cmp [ebp+hObject] esi +
jnz loc_1007FB9  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_460] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi]  +
push 0  +
push dword_10150D0  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+Value] +
push eax  +
push 0  +
push 5  +
call profapi_104  +
mov edi ds:SetEnvironmentVariableW +
test eax eax +
jl loc_1009A7F  +
lea eax [ebp+Value] +
push eax  +
push offset aUserprofile  +
call edi  +
push esi  +
lea eax [ebp+Value] +
push eax  +
push 0  +
push 3  +
call profapi_104  +
test eax eax +
jl loc_10057EF  +
lea eax [ebp+Value] +
push eax  +
push offset aPublic  +
call edi  +
push esi  +
lea eax [ebp+Value] +
push eax  +
push 0  +
push 4  +
call profapi_104  +
test eax eax +
jl loc_1005820  +
lea eax [ebp+Value] +
push eax  +
push offset aProgramdata  +
call edi  +
lea eax [ebp+Value] +
push eax  +
push offset aAllusersprofil  +
call edi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10015A4  +
leave   +
retn   +
***
cmp dword_10156AC ebx +
jnz loc_1005A73  +
mov eax dword ptr [ebp+Data] +
cmp eax ebx +
jnz loc_1005A6E  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jnz loc_1005A6E  +
cmp [ebp+var_1] bl +
jz loc_100151E  +
mov dword_1015108 edi +
mov [ebp+arg_3] bl +
push esi  +
mov ebx offset aUmstartup +
call sub_1003B51  +
xor esi esi +
cmp dword_1015140 esi +
jnz loc_10058F7  +
cmp dword_1015144 esi +
jnz loc_10058F7  +
mov dword_1015140 eax +
mov dword_1015144 edx +
lea eax [ebp+var_1C] +
push eax  +
push 0Eh  +
push offset ExistingFileName  +
call sub_1005A81  +
test eax eax +
jl loc_1005A68  +
lea eax [ebp+var_10] +
push eax  +
push 0Ah  +
push ebx  +
call sub_1005A81  +
test eax eax +
jl loc_1005A68  +
mov eax [ebp+var_10] +
mov ebx [ebp+var_1C] +
lea edi [eax+ebx] +
lea edi [edi+edi+7Ch] +
push edi  +
lea eax [ebp+var_14] +
push eax  +
call sub_1003BB8  +
mov [ebp+var_8] eax +
cmp eax esi +
jnz loc_1005A68  +
push 78h  +
push esi  +
mov esi [ebp+var_14] +
push esi  +
call memset  +
mov [esi] edi +
lea edi [ebx+ebx+7Ah] +
add esp 0Ch +
mov dword ptr [esi+2Ch] 20000h +
mov dword ptr [esi+28h] 2 +
mov dword ptr [esi+6Ch] 78h +
mov [esi+70h] edi +
mov dword ptr [esi+30h] 3 +
mov dword ptr [esi+34h] 0Ah +
mov dword ptr [esi+40h] 10000002h +
cmp dword_1015140 0 +
jnz loc_10059B7  +
cmp dword_1015144 0 +
jnz loc_10059B7  +
push offset ExistingFileName  +
inc ebx  +
push ebx  +
lea eax [esi+78h] +
push eax  +
mov dword ptr [esi+3Ch] 5 +
mov dword ptr [esi+6Ch] 78h +
call sub_1001845  +
mov eax [ebp+var_10] +
mov ebx offset aUmstartup +
push ebx  +
inc eax  +
mov [esi+70h] edi +
push eax  +
add edi esi +
push edi  +
call sub_1001845  +
cmp [ebp+arg_3] 0 +
jnz loc_1009598  +
mov eax dword_1015140 +
mov ecx dword_1015144 +
test eax eax +
jnz loc_10095B5  +
test ecx ecx +
jnz loc_10095B5  +
push 1  +
push offset NewFileName  +
push offset ExistingFileName  +
call ds:MoveFileExW  +
push esi  +
push ebx  +
push offset dword_1015140  +
call StartTraceW  +
mov eax dword_1015140 +
mov ecx dword_1015144 +
mov edx eax +
or edx ecx +
jz loc_10095C6  +
mov esi EnableTrace +
push ecx  +
push eax  +
push offset unk_1015220  +
push dword_1015108  +
push dword_10156E0  +
push 1  +
call esi  +
push dword_1015144  +
push dword_1015140  +
push offset unk_1015230  +
push dword_1015108  +
push dword_10156E0  +
push 1  +
call esi  +
and [ebp+var_8] 0 +
pop esi  +
jmp loc_100151E  +
mov dword_1015108 eax +
mov [ebp+arg_3] 1 +
jmp loc_10058CF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_1005ADA  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_1005ADA  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_1005ACE  +
cmp [ecx] di +
jz loc_1005AAE  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_1005AA4  +
test edx edx +
jz loc_1005ACE  +
test esi esi +
jz loc_1005ABE  +
test edi edi +
jl loc_1005AD5  +
sub eax edx +
mov [esi] eax +
mov eax edi +
pop edi  +
test eax eax +
jl loc_1009527  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov edi 80070057h +
jmp loc_1005AB2  +
and dword ptr [esi] 0 +
jmp loc_1005ABE  +
mov eax 80070057h +
jmp loc_1005AC1  +
***
call sub_10017FB  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-4] edi +
mov eax [ebp+0Ch] +
cmp [ebp+10h] edi +
jnz loc_1009D97  +
mov ecx [eax+8] +
push ecx  +
push dword ptr [eax+0Ch]  +
call sub_10041E0  +
mov esi eax +
cmp esi edi +
jz loc_1009D9F  +
push 4  +
pop ebx  +
mov [ebp+0Ch] ebx +
push esi  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
call ds:SetUserObjectSecurity  +
test eax eax +
jz loc_1009DE6  +
push esi  +
call sub_1005B81  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1005B79  +
mov eax [ebp-1Ch] +
call sub_10015E2  +
retn 0Ch  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp-2] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp-1] +
push eax  +
push [ebp+arg_0]  +
call ds:RtlGetDaclSecurityDescriptor  +
test eax eax +
jl loc_100A1B9  +
cmp [ebp+var_1] 0 +
jz loc_1005BBA  +
cmp [ebp+var_8] 0 +
jz loc_1005BBA  +
lea eax [ebp+var_8] +
push eax  +
call sub_1005BCF  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1005BCF  +
xor eax eax +
inc eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi]  +
push 0  +
push dword_1015128  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10017FB  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-4] edi +
push edi  +
push 0F01FFh  +
push dword_1015210  +
lea eax [ebp-38h] +
push eax  +
call sub_10050A4  +
push 4  +
pop ebx  +
push ebx  +
push 0F0040h  +
push dword_1015200  +
lea eax [ebp-2Ch] +
push eax  +
call sub_10050A4  +
push 2  +
lea eax [ebp-38h] +
push eax  +
call sub_10041E0  +
mov esi eax +
cmp esi edi +
jz loc_1009E80  +
mov [ebp-20h] ebx +
push esi  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+8]  +
call ds:SetUserObjectSecurity  +
test eax eax +
jz loc_1009EC6  +
push esi  +
call sub_1005B81  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1005CA9  +
mov eax [ebp-1Ch] +
call sub_10015E2  +
retn 4  +
***
retn   +
***
call sub_10017FB  +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-4] edi +
mov dword ptr [ebp-20h] 1 +
push edi  +
mov esi 0F01FFh +
push esi  +
push dword_1015210  +
lea eax [ebp-54h] +
push eax  +
call sub_10050A4  +
push 2  +
pop ebx  +
mov [ebp-20h] ebx +
push edi  +
push 200000C7h  +
push dword_1015200  +
lea eax [ebp-48h] +
push eax  +
call sub_10050A4  +
mov dword ptr [ebp-20h] 3 +
push edi  +
push esi  +
push dword_10151F4  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10050A4  +
cmp [ebp+0Ch] edi +
jnz loc_1009F0C  +
push dword ptr [ebp-20h]  +
lea eax [ebp-54h] +
push eax  +
call sub_10041E0  +
mov esi eax +
cmp esi edi +
jz loc_1009F26  +
mov dword ptr [ebp-24h] 4 +
push esi  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+8]  +
call ds:SetUserObjectSecurity  +
test eax eax +
jz loc_1009F6C  +
push esi  +
call sub_1005B81  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1005D91  +
mov eax [ebp-1Ch] +
call sub_10015E2  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 10h  +
call sub_1005DEC  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1005DD5  +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
imul eax eax +
push eax  +
call sub_1005DEC  +
mov ecx [ebp+var_4] +
mov [ecx+0Ch] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+0Ch] 0 +
jz loc_1005DDC  +
mov [eax] esi +
mov eax [ebp+var_4] +
and dword ptr [eax+4] 0 +
pop esi  +
mov eax [ebp+var_4] +
leave   +
retn 4  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005BCF  +
jmp loc_1005DD4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
push dword_1015128  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
call sub_10017FB  +
xor esi esi +
mov [ebp-1Ch] esi +
mov [ebp-24h] esi +
mov [ebp-20h] esi +
mov eax [ebp+8] +
mov [eax] esi +
mov ebx [ebp+0Ch] +
mov [ebx] esi +
mov eax [ebp+14h] +
mov [eax] esi +
mov eax [ebp+10h] +
mov [eax] esi +
mov [ebp-4] esi +
mov eax large fs:18h +
push dword ptr [ebp+18h]  +
push dword ptr [eax+20h]  +
call ds:RegisterLogonProcess  +
test eax eax +
jz loc_1009FBC  +
push esi  +
mov edi 2000000h +
push edi  +
push esi  +
push offset winsta  +
call ds:CreateWindowStationW  +
mov ecx [ebp+8] +
mov [ecx] eax +
cmp eax esi +
jz loc_1009FF2  +
push eax  +
call ds:SetProcessWindowStation  +
push ebx  +
mov ebx [ebp+8] +
push dword ptr [ebx]  +
call sub_1004F9F  +
mov [ebp-1Ch] eax +
cmp eax esi +
jnz loc_100A03D  +
push 1  +
push dword ptr [ebx]  +
call sub_1005FFB  +
mov [ebp-1Ch] eax +
cmp eax esi +
jnz loc_100A07B  +
push esi  +
push edi  +
push esi  +
push esi  +
push esi  +
push offset szDesktop  +
mov ebx ds:CreateDesktopW +
call ebx  +
mov ecx [ebp+10h] +
mov [ecx] eax +
cmp eax esi +
jz loc_100A0AB  +
push esi  +
push edi  +
push esi  +
push esi  +
push esi  +
push offset aDefault  +
call ebx  +
mov ecx [ebp+14h] +
mov [ecx] eax +
cmp eax esi +
jz loc_100A0E4  +
mov eax Reserved +
mov edi offset Reserved +
cmp eax edi +
jz loc_1005EFA  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005EFA  +
cmp byte ptr [eax+19h] 5 +
jnb loc_100A120  +
mov eax [ebp+10h] +
push dword ptr [eax]  +
call sub_1005BF5  +
mov [ebp-1Ch] eax +
cmp eax esi +
jnz loc_1005F9C  +
push esi  +
mov eax [ebp+14h] +
push dword ptr [eax]  +
call sub_1005CB1  +
mov [ebp-1Ch] eax +
cmp eax esi +
jnz loc_1005F9C  +
push 1  +
mov eax [ebp+14h] +
push dword ptr [eax]  +
call sub_1005FFB  +
mov [ebp-1Ch] eax +
cmp eax esi +
jnz loc_100A137  +
push esi  +
mov eax [ebp+10h] +
push dword ptr [eax]  +
call sub_10066A7  +
mov [ebp-1Ch] eax +
cmp eax esi +
jnz loc_1005F9C  +
push esi  +
mov eax [ebp+10h] +
push dword ptr [eax]  +
call sub_1003DBE  +
mov [ebp-1Ch] eax +
cmp eax esi +
jnz loc_1005F9C  +
push esi  +
push esi  +
lea eax [ebp-24h] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax]  +
call ds:SetWindowStationUser  +
test eax eax +
jz loc_100A167  +
mov eax Reserved +
cmp eax edi +
jz loc_1005F9C  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005F9C  +
cmp byte ptr [eax+19h] 4 +
jb loc_1005F9C  +
push offset dword_1003748  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1003DEF  +
mov eax [ebp-1Ch] +
call sub_10015E2  +
retn 14h  +
***
call sub_10027D1  +
mov esi [ebp+8] +
mov dword ptr [ebp-88h] 10h +
xor ebx ebx +
mov [ebp-84h] ebx +
mov [ebp-9Ch] bl +
xor eax eax +
lea edi [ebp-9Bh] +
stos   +
stos   +
stos   +
stos   +
stos   +
stos   +
mov [ebp-80h] ebx +
mov [ebp-7Ch] bl +
mov [ebp-7Bh] bl +
mov [ebp-7Ah] bl +
mov [ebp-79h] bl +
mov [ebp-78h] bl +
mov byte ptr [ebp-77h] 10h +
lea eax [ebp-80h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov eax [ebp+0Ch] +
shl eax 0Ch +
push eax  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp-7Ch] +
push eax  +
call ds:RtlAllocateAndInitializeSid  +
push edi  +
lea eax [ebp-9Ch] +
push eax  +
call ds:RtlCreateSecurityDescriptor  +
push 2  +
push 58h  +
lea eax [ebp-74h] +
push eax  +
call ds:RtlCreateAcl  +
push edi  +
push 11h  +
push dword ptr [ebp-80h]  +
push ebx  +
push 2  +
lea eax [ebp-74h] +
push eax  +
call ds:RtlAddMandatoryAce  +
push ebx  +
lea eax [ebp-74h] +
push eax  +
push edi  +
lea eax [ebp-9Ch] +
push eax  +
call ds:RtlSetSaclSecurityDescriptor  +
mov [ebp-4] ebx +
lea eax [ebp-9Ch] +
push eax  +
lea eax [ebp-88h] +
push eax  +
push esi  +
call ds:SetUserObjectSecurity  +
test eax eax +
jz loc_1009E2C  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1006119  +
cmp [ebp-80h] ebx +
jz loc_10060E6  +
push dword ptr [ebp-80h]  +
call ds:RtlFreeSid  +
mov eax [ebp-84h] +
call sub_100228C  +
retn 8  +
***
retn   +
***
call sub_10027D1  +
mov dword ptr [ebp-44h] 0Eh +
xor ebx ebx +
mov [ebp-2Ch] bl +
mov [ebp-2Bh] bl +
mov [ebp-2Ah] bl +
mov [ebp-29h] bl +
mov [ebp-28h] bl +
mov byte ptr [ebp-27h] 2 +
mov [ebp-24h] bl +
mov [ebp-23h] bl +
mov [ebp-22h] bl +
mov [ebp-21h] bl +
mov [ebp-20h] bl +
mov byte ptr [ebp-1Fh] 5 +
mov [ebp-34h] bl +
mov [ebp-33h] bl +
mov [ebp-32h] bl +
mov [ebp-31h] bl +
mov [ebp-30h] bl +
mov byte ptr [ebp-2Fh] 1 +
mov [ebp-3Ch] bl +
mov [ebp-3Bh] bl +
mov [ebp-3Ah] bl +
mov [ebp-39h] bl +
mov [ebp-38h] bl +
mov byte ptr [ebp-37h] 3 +
mov [ebp-4] ebx +
push ebx  +
push ebx  +
push ebx  +
call ds:HeapCreate  +
mov dword_1015128 eax +
cmp eax ebx +
jz loc_100A397  +
push offset unk_1015208  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
mov esi ds:RtlAllocateAndInitializeSid +
call esi  +
mov [ebp-40h] eax +
cmp eax ebx +
jl loc_100A3A5  +
push offset dword_1015200  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp-24h] +
push eax  +
call esi  +
mov [ebp-40h] eax +
cmp eax ebx +
jl loc_100A3ED  +
push offset unk_10151FC  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 223h  +
push 20h  +
push 2  +
lea eax [ebp-24h] +
push eax  +
call esi  +
mov [ebp-40h] eax +
cmp eax ebx +
jl loc_100A427  +
push offset dword_10151F4  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0Ch  +
push edi  +
lea eax [ebp-24h] +
push eax  +
call esi  +
mov [ebp-40h] eax +
cmp eax ebx +
jl loc_100A464  +
push offset unk_101520C  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 13h  +
push edi  +
lea eax [ebp-24h] +
push eax  +
call esi  +
mov [ebp-40h] eax +
cmp eax ebx +
jl loc_100A4A1  +
push offset unk_1015204  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea eax [ebp-34h] +
push eax  +
call esi  +
mov [ebp-40h] eax +
cmp eax ebx +
jl loc_100A4DE  +
push offset dword_1015210  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
push edi  +
lea eax [ebp-24h] +
push eax  +
call esi  +
mov [ebp-40h] eax +
cmp eax ebx +
jl loc_100A51B  +
push offset unk_10151F8  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
mov [ebp-40h] eax +
cmp eax ebx +
jl loc_100A558  +
push offset unk_10151F0  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push edi  +
lea eax [ebp-24h] +
push eax  +
call esi  +
mov [ebp-40h] eax +
cmp eax ebx +
jl loc_100A595  +
push offset unk_10151EC  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 6  +
push edi  +
lea eax [ebp-24h] +
push eax  +
call esi  +
mov esi eax +
cmp esi ebx +
jl loc_100A5D2  +
mov [ebp-44h] ebx +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1006329  +
mov eax [ebp-44h] +
call sub_100228C  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_18] +
push edi  +
test esi esi +
jz loc_1006506  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10064A1  +
sub eax edx +
inc eax  +
mov [ebp+arg_18] eax +
mov ebx offset aNull_0 +
test esi esi +
jz loc_1007394  +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_100650F  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10064C7  +
sub eax edx +
inc eax  +
mov ecx edi +
test edi edi +
jz loc_100739B  +
push 0  +
push [ebp+arg_18]  +
lea edx [ebp+arg_14] +
push esi  +
push 4  +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
mov [ebp+arg_18] 5 +
jmp loc_10064AE  +
push 5  +
pop eax  +
jmp loc_10064D1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+Value] +
push eax  +
xor esi esi +
mov [ebp+nSize] 10h +
call ds:GetComputerNameW  +
test eax eax +
jz loc_100747E  +
lea eax [ebp+Value] +
push eax  +
push offset aComputername  +
call ds:SetEnvironmentVariableW  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10015A4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor edi edi +
push edi  +
push offset aSystemCurren_0  +
push 80000002h  +
mov [ebp+hKey] edi +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_1007522  +
push esi  +
mov esi offset LibFileName +
push esi  +
call ds:LoadLibraryW  +
mov dword ptr [ebp+Data] eax +
cmp eax edi +
jz loc_1007597  +
mov esi offset ProcName +
push esi  +
push eax  +
call ds:__imp_GetProcAddress  +
mov edi eax +
test edi edi +
jz loc_10075DF  +
push hDesktop  +
call ds:SetThreadDesktop  +
test eax eax +
jz loc_1007627  +
push 0  +
push dword ptr [ebp+Data]  +
push edi  +
push 4  +
call ds:SetWindowsHookExW  +
mov hhk eax +
test eax eax +
jz loc_100766E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006644  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006644  +
cmp byte ptr [eax+19h] 4 +
jb loc_1006644  +
push offset dword_10025AC  +
push 6Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 0  +
push hDesktop  +
call sub_10066A7  +
cmp dword ptr [ebp+Data] 0 +
pop esi  +
jz loc_1006661  +
push dword ptr [ebp+Data]  +
call ds:__imp_FreeLibrary  +
xor eax eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+hDesktop]  +
call sub_10066C2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor edi edi +
xor esi esi +
cmp [ebp+arg_8] esi +
jnz loc_1009D2F  +
push [ebp+hDesktop]  +
call ds:SwitchDesktop  +
cmp eax esi +
jz loc_1009D40  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov eax Reserved +
mov esi offset Reserved +
mov edi offset dword_10025AC +
cmp eax esi +
jz loc_1006724  +
test byte ptr [eax+1Ch] 2 +
jz loc_1006724  +
cmp byte ptr [eax+19h] 5 +
jnb loc_100793A  +
call sub_10038A5  +
mov ebx eax +
test ebx ebx +
jnz loc_100794D  +
push 4  +
pop eax  +
mov word_10150D4 ax +
call sub_10046A4  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1006772  +
mov eax Reserved +
cmp eax esi +
jz loc_100676E  +
test byte ptr [eax+1Ch] 2 +
jz loc_100676E  +
cmp byte ptr [eax+19h] 3 +
jb loc_100676E  +
push [ebp+var_4]  +
push edi  +
push 55h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
and [ebp+var_4] 0 +
call sub_1006909  +
xor ebx ebx +
inc ebx  +
mov dword_10150F8 eax +
cmp eax ebx +
jz loc_10067F2  +
cmp eax 4 +
jz loc_10067F2  +
and dword_10150FC 0 +
call sub_1003A93  +
mov dword_1015100 eax +
mov ecx Reserved +
cmp ecx esi +
jz loc_10067E3  +
test [ecx+1Ch] bl +
jz loc_10067E3  +
cmp byte ptr [ecx+19h] 4 +
jb loc_10067E3  +
mov esi offset aTrue +
test eax eax +
mov edx offset aFalse +
mov eax esi +
jnz loc_10067C0  +
mov eax edx +
cmp dword_10150FC 0 +
jnz loc_1007982  +
push eax  +
push dword_10150F8  +
push edx  +
push edi  +
push 56h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100648D  +
call sub_10067FF  +
mov ebx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
mov dword_10150FC ebx +
jmp loc_100678F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
xor ebx ebx +
push ebx  +
push offset aSoftwareMicr_0  +
push 80000002h  +
mov dword ptr [ebp+Data] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1006863  +
push esi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
mov esi offset aDisablelockwor +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
cmp dword ptr [ebp+Data] 2 +
jz loc_1009028  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and dword ptr [ebp+Data] 0 +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset aSystemSetup  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1006960  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset sub_1006968  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax dword ptr [ebp+Data] +
leave   +
retn   +
***
jz $+2  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push eax  +
mov esi 104h +
push esi  +
lea eax [ebp+Src] +
push eax  +
call sub_1001845  +
test eax eax +
jl loc_1007989  +
test edi edi +
jnz loc_1007990  +
mov edi [ebp+arg_4] +
lea edi unk_10155E8[edi*4] +
test byte ptr [edi] 1 +
jz loc_10069DD  +
cmp dword_10150FC 0 +
jnz loc_10079A8  +
test byte ptr [edi] 2 +
jnz loc_10079C4  +
lea eax [ebp+Src] +
push eax  +
call sub_1006A07  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10015A4  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+lpSrc]  +
call ds:lstrlenW  +
mov esi eax +
add esi 3Ch +
lea eax [esi+esi] +
push eax  +
call sub_1006A60  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1008E0E  +
push ebx  +
mov ebx ds:ExpandEnvironmentStringsW +
push edi  +
push esi  +
push eax  +
push [ebp+lpSrc]  +
call ebx  +
mov edi eax +
test edi edi +
jz loc_1008E8A  +
cmp edi esi +
jg loc_1008E3F  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
push dword_10150D0  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
push 44h  +
pop esi  +
push esi  +
lea eax [ebp+StartupInfo] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_10] +
add esp 0Ch +
push 5  +
mov edi [ebp+lpCommandLine] +
xor ebx ebx +
inc ebx  +
or eax ebx +
mov [ebp+StartupInfo.dwFlags] eax +
pop eax  +
mov [ebp+StartupInfo.wShowWindow] ax +
mov eax [ebp+arg_4] +
mov [ebp+StartupInfo.lpDesktop] eax +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
mov eax [ebp+arg_C] +
mov [ebp+StartupInfo.cb] esi +
xor esi esi +
push esi  +
push [ebp+lpEnvironment]  +
or eax 400h +
push eax  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
mov [ebp+StartupInfo.lpReserved] edi +
mov [ebp+StartupInfo.lpTitle] edi +
call ds:CreateProcessW  +
test eax eax +
jz loc_1007A63  +
mov eax [ebp+arg_1C] +
cmp eax esi +
jnz loc_1006B88  +
cmp [ebp+arg_18] esi +
jz loc_1006B7D  +
test byte ptr [ebp+arg_18] bl +
jnz loc_1007A28  +
test byte ptr [ebp+arg_18] 2 +
jz loc_1006B63  +
push 14h  +
call sub_1006A60  +
mov esi eax +
mov [ebp+arg_18] esi +
test esi esi +
jz loc_1006B7D  +
push edi  +
call sub_1006B9B  +
mov [esi] eax +
mov eax [ebp+hObject] +
push 8  +
push 0FFFFFFFFh  +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
push esi  +
mov [esi+10h] eax +
push offset loc_100B87F  +
push [ebp+hObject]  +
mov edi eax +
lea eax [esi+8] +
shl edi 2 +
push eax  +
mov dword_1015600[edi] ebx +
call ds:RtlRegisterWait  +
mov ebx eax +
test ebx ebx +
jl loc_1007A4B  +
mov dword_1015618[edi] esi +
mov eax [ebp+arg_20] +
test eax eax +
jnz loc_1006B8F  +
push dword ptr [ebp-10h]  +
call ds:CloseHandle  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1006B63  +
mov ecx [ebp+hObject] +
mov [eax] ecx +
jmp loc_1006B63  +
mov ecx [ebp-10h] +
mov [eax] ecx +
jmp loc_1006B73  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1008E07  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006BB0  +
push esi  +
sub eax edx +
sar eax 1 +
push edi  +
lea esi [eax+eax+2] +
push esi  +
call sub_1006A60  +
mov edi eax +
test edi edi +
jz loc_1006BDD  +
push esi  +
push [ebp+arg_0]  +
push edi  +
call memcpy  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push offset unk_1015184  +
mov [ebp+var_C] bl +
mov [ebp-0Bh] bl +
mov [ebp+var_A] bl +
mov [ebp+var_9] bl +
mov [ebp+var_8] bl +
mov [ebp+var_7] 5 +
call ds:RtlInitializeCriticalSection  +
mov esi eax +
cmp esi ebx +
jl loc_1008D26  +
push offset dword_10151C8  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 2  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
call ds:RtlAllocateAndInitializeSid  +
mov esi eax +
cmp esi ebx +
jl loc_1008D5C  +
push ebx  +
push ebx  +
push ebx  +
call ds:HeapCreate  +
mov hHeap eax +
cmp eax ebx +
jz loc_1008D7D  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:CreateEventW  +
mov dword_10150E8 eax +
cmp eax ebx +
jz loc_1008D85  +
push offset aWin32Systemshu  +
push offset unk_101517C  +
call ds:RtlInitUnicodeString  +
push 10h  +
push ebx  +
push offset loc_1001B85  +
call ds:QueueUserWorkItem  +
push ebx  +
push offset aDisableshutdow  +
push offset aSoftwareMicros  +
push 80000002h  +
call sub_10026F2  +
test eax eax +
jnz loc_1008DCC  +
push off_10156E8  +
push offset aInitshutdown  +
call sub_1006E1D  +
mov esi eax +
cmp esi ebx +
jnz loc_1008D90  +
call sub_1006D75  +
mov esi eax +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn   +
***
mov edi edi +
push edi  +
push 0  +
push offset Endpoint  +
push 0Ah  +
push offset Protseq  +
call ds:RpcServerUseProtseqEpW  +
mov edi eax +
test edi edi +
jnz loc_1008C02  +
push esi  +
push offset IfCallback  +
mov esi 4D2h +
push esi  +
push 8  +
push 0  +
push 0  +
push IfSpec  +
call ds:RpcServerRegisterIfEx  +
mov edi eax +
test edi edi +
jnz loc_1008C3E  +
xor eax eax +
inc eax  +
push eax  +
push esi  +
push eax  +
mov dword_10150DC eax +
call ds:RpcServerListen  +
mov edi eax +
cmp edi 6B1h +
jnz loc_1006DDB  +
xor edi edi +
test edi edi +
jnz loc_1008C6C  +
pop esi  +
mov eax edi +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006E28  +
push esi  +
sub eax edx +
sar eax 1 +
push edi  +
lea esi [eax+eax+10h] +
push esi  +
call sub_10038E9  +
mov edi eax +
test edi edi +
jz loc_1008CA8  +
push offset aPipe  +
push esi  +
push edi  +
call sub_1003908  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call sub_1003945  +
push 0  +
push edi  +
push 0Ah  +
push offset aNcacn_np  +
call ds:RpcServerUseProtseqEpW  +
mov esi eax +
test esi esi +
jnz loc_1008CB0  +
push offset sub_100C661  +
push 4D2h  +
push 10h  +
push 0  +
push 0  +
push [ebp+IfSpec]  +
call ds:RpcServerRegisterIfEx  +
mov esi eax +
test esi esi +
jnz loc_1008CEA  +
xor eax eax +
inc eax  +
push eax  +
push 3039h  +
push eax  +
mov dword_10150E0 eax +
call ds:RpcServerListen  +
mov esi eax +
cmp esi 6B1h +
jnz loc_1006EC0  +
xor esi esi +
push edi  +
call sub_1006EF7  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor edi edi +
push edi  +
push offset aSystemCurren_7  +
push 80000002h  +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_100940B  +
push esi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset aSecureboot  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
cmp eax edi +
jnz loc_10093CD  +
cmp dword ptr [ebp+Data] 1 +
jnz loc_100938C  +
mov eax Reserved +
mov esi offset Reserved +
cmp eax esi +
jz loc_1006FA4  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006FA4  +
cmp byte ptr [eax+19h] 4 +
jb loc_1006FA4  +
push offset dword_10030E4  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 1  +
call sub_1006FF7  +
lea eax [ebp+ThreadId] +
push eax  +
push edi  +
push edi  +
push offset StartAddress  +
push edi  +
push edi  +
call ds:CreateThread  +
mov hHandle eax +
cmp eax edi +
jz loc_100934F  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
inc ebx  +
cmp [ebp+arg_0] ebx +
jnz loc_1007071  +
push esi  +
push edi  +
mov eax Reserved +
mov edi offset Reserved +
mov esi offset dword_10030E4 +
cmp eax edi +
jz loc_1007033  +
test [eax+1Ch] bl +
jz loc_1007033  +
cmp byte ptr [eax+19h] 4 +
jb loc_1007033  +
push esi  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push offset hKey  +
push 20019h  +
push 0  +
push offset aSystemCurren_7  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10092BB  +
push offset unk_10155C4  +
call sub_10049BD  +
test eax eax +
jz loc_100928F  +
mov dword_10150EC ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
jz loc_10097BC  +
call sub_1007171  +
xor eax eax +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10071B7  +
push eax  +
call sub_10071C1  +
test eax eax +
jz loc_10071B7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10097DE  +
push 2  +
pop eax  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
pop ebp  +
retn   +
***
call sub_10017FB  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1007210  +
cmp ecx 0FFFFFFFFh +
jz loc_1007210  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1007209  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1007209  +
cmp edx 10000000h +
jnb loc_1007209  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_10097D4  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10015E2  +
retn 4  +
***
call sub_10027D1  +
mov esi [ebp+8] +
mov dword ptr [ebp-144h] 0Dh +
xor edi edi +
mov [ebp-4] edi +
push esi  +
call ds:NtAllocateLocallyUniqueId  +
cmp eax edi +
jl loc_100986F  +
mov eax large fs:18h +
mov eax [eax+30h] +
push dword ptr [eax+1D4h]  +
push dword ptr [esi]  +
push dword ptr [esi+4]  +
push offset aWmsgkrpcXXX  +
push 91h  +
lea eax [ebp-140h] +
push eax  +
call sub_1002691  +
add esp 18h +
test eax eax +
jl loc_1007315  +
push edi  +
lea eax [ebp-140h] +
push eax  +
push 0Ah  +
push offset Protseq  +
call ds:RpcServerUseProtseqEpW  +
mov [ebp-144h] eax +
cmp eax edi +
jnz loc_1009881  +
push offset sub_1011C08  +
mov esi 4D2h +
push esi  +
push 28h  +
push edi  +
push edi  +
push off_10156EC  +
call ds:RpcServerRegisterIfEx  +
mov [ebp-144h] eax +
cmp eax edi +
jnz loc_10098B4  +
xor ebx ebx +
inc ebx  +
mov dword_1015124 ebx +
push ebx  +
push esi  +
push ebx  +
call ds:RpcServerListen  +
mov [ebp-144h] eax +
cmp eax 6B1h +
jz loc_10098E7  +
cmp [ebp-144h] edi +
jnz loc_10098F2  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1007371  +
mov eax [ebp-144h] +
call sub_100228C  +
retn 4  +
***
cmp [ebp-144h] edi +
jnz loc_1009939  +
retn   +
***
push 0Eh  +
jmp loc_1007384  +
push 0Ah  +
pop eax  +
jmp loc_1003790  +
mov edx offset aNull_1 +
jmp loc_100379E  +
***
mov esi ebx +
jmp loc_10064BB  +
mov ecx ebx +
jmp loc_10064DB  +
***
dec eax  +
jz loc_10073AD  +
push 57h  +
pop eax  +
jmp loc_100385F  +
***
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1003838  +
***
cmp dword ptr [esi+10h] 0 +
jz loc_1003845  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_100385D  +
***
mov esi [esi+10h] +
test esi esi +
jz loc_100384E  +
mov edi esi +
jmp loc_100384E  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100745A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100745A  +
cmp byte ptr [eax+19h] 2 +
jb loc_100745A  +
push offset dword_10025AC  +
push 64h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
xor eax eax +
retn   +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100745A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100745A  +
cmp byte ptr [eax+19h] 2 +
jb loc_100745A  +
push offset dword_10025AC  +
push 65h  +
jmp loc_100744F  +
***
call ds:__imp_GetLastError  +
mov esi eax +
jmp loc_100655F  +
***
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset aHeadless  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
cmp eax esi +
jz loc_10074E7  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1002F72  +
test [ecx+1Ch] bl +
jz loc_1002F72  +
cmp byte ptr [ecx+19h] 3 +
jb loc_1002F72  +
push eax  +
push offset dword_10025AC  +
push 67h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_1002F72  +
xor eax eax +
cmp dword ptr [ebp+Data] esi +
mov dword_10156BC ebx +
setnz al  +
mov dword_10156B8 eax +
jmp loc_1002F72  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_1002F7C  +
***
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset aDisables0viewe  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
mov [ebp+Type] edi +
mov dword ptr [ebp+Data] edi +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp dword ptr [ebp+Data] edi +
jz loc_10065BC  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006661  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006661  +
cmp byte ptr [eax+19h] 3 +
jb loc_1006661  +
push offset dword_10025AC  +
push 68h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1006661  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006651  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006651  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006651  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push esi  +
push offset dword_10025AC  +
push 69h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100ABE1  +
jmp loc_1006651  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006651  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006651  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006651  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push esi  +
push offset dword_10025AC  +
push 6Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100AC54  +
jmp loc_1006651  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006651  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006651  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006651  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset dword_10025AC  +
push 6Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1006651  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006644  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006644  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006644  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset dword_10025AC  +
push 6Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1006644  +
***
call ds:__imp_GetLastError  +
mov esi eax +
jmp loc_10038C0  +
***
mov [ecx] edi +
jmp loc_10018D1  +
***
push ebx  +
lea ebx [ebp-104h] +
mov dword ptr [ebp-108h] 100h +
lea eax [ebp-108h] +
push eax  +
push ebx  +
push esi  +
push 2  +
push offset aAppinit_dlls  +
push esi  +
push dword ptr [ebp-10Ch]  +
call edi  +
cmp eax 0EAh +
jnz loc_1007760  +
lea eax [ebp-104h] +
cmp ebx eax +
jz loc_100773B  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push esi  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov eax large fs:18h +
push dword ptr [ebp-108h]  +
mov eax [eax+30h] +
push esi  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov ebx eax +
cmp ebx esi +
jz loc_1007841  +
jmp loc_10076FD  +
***
cmp eax esi +
jnz loc_1007823  +
mov [ebp-110h] esi +
mov eax ebx +
cmp [ebx] si +
jz loc_10077C3  +
movzx ecx word ptr [eax] +
cmp cx 20h +
jz loc_1007784  +
cmp cx 2Ch +
jnz loc_1007788  +
inc eax  +
inc eax  +
jmp loc_1007775  +
***
movzx ecx word ptr [eax] +
cmp cx si +
jz loc_10077C3  +
cmp cx 20h +
jz loc_10077AC  +
movzx ecx word ptr [eax] +
cmp cx 2Ch +
jz loc_10077AC  +
cmp cx si +
jz loc_10077B8  +
inc eax  +
inc eax  +
cmp word ptr [eax] 20h +
jnz loc_1007796  +
cmp [eax] si +
jz loc_10077B8  +
xor ecx ecx +
mov [eax] cx +
inc eax  +
inc eax  +
inc dword ptr [ebp-110h]  +
cmp [eax] si +
jnz loc_1007775  +
lea eax [ebp-110h] +
mov [ebp-134h] eax +
mov eax [ebp-108h] +
mov [ebp-11Ch] eax +
lea eax [ebp-134h] +
push eax  +
push 2  +
push offset dword_1007848  +
push dword_101521C  +
mov [ebp-130h] esi +
push dword_1015218  +
mov dword ptr [ebp-12Ch] 4 +
mov [ebp-128h] esi +
mov [ebp-124h] ebx +
mov [ebp-120h] esi +
mov [ebp-118h] esi +
call ds:EtwEventWrite  +
lea eax [ebp-104h] +
cmp ebx eax +
jz loc_1007841  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push esi  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop ebx  +
jmp loc_1001C67  +
***
lea eax [ebp+lpData] +
push eax  +
call sub_100575D  +
jmp loc_10048FD  +
push [ebp+var_78]  +
push [ebp+var_7C]  +
call ds:RegDeleteValueW  +
jmp loc_1004955  +
mov ecx [ebp+dwBytes] +
mov [eax] ecx +
jmp loc_1004965  +
mov ecx [ebp+dwType] +
mov [eax] ecx +
jmp loc_1004973  +
***
push esi  +
push esi  +
push 1  +
push offset aPrimarydnssuff  +
push [ebp+phkResult]  +
push offset aNvPrimarydnssu  +
push [ebp+phkResult]  +
call sub_100487B  +
push [ebp+phkResult]  +
mov edi eax +
call ds:RegCloseKey  +
mov [ebp+phkResult] esi +
jmp loc_100473E  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_1004747  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
jmp loc_1004750  +
***
push edi  +
push 53h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1006724  +
mov eax Reserved +
cmp eax esi +
jz loc_10067EB  +
test byte ptr [eax+1Ch] 2 +
jz loc_10067EB  +
cmp byte ptr [eax+19h] 1 +
jb loc_10067EB  +
push ebx  +
push edi  +
push 54h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_10067EB  +
mov edx esi +
jmp loc_10067CD  +
***
xor eax eax +
jmp loc_10069F2  +
push edi  +
push esi  +
lea eax [ebp+Src] +
push eax  +
call sub_10018E7  +
test eax eax +
jge loc_10069C1  +
jmp loc_1007989  +
push offset aSetup  +
push esi  +
lea eax [ebp+Src] +
push eax  +
call sub_10018E7  +
test eax eax +
jge loc_10069DD  +
jmp loc_1007989  +
call ds:GetCurrentProcessId  +
push eax  +
push offset aWinlogonD  +
lea eax [ebp+var_2C] +
push 14h  +
push eax  +
call sub_1002691  +
add esp 10h +
test eax eax +
jl loc_1007989  +
lea eax [ebp+var_2C] +
push eax  +
push esi  +
lea eax [ebp+Src] +
push eax  +
call sub_10018E7  +
test eax eax +
jl loc_1007989  +
jmp loc_10069E6  +
***
mov eax dword_1015794 +
cmp eax 40h +
jnb loc_1006B07  +
mov ecx [ebp+hObject] +
mov dword_1015798[eax*4] ecx +
inc eax  +
mov dword_1015794 eax +
jmp loc_1006B07  +
lea eax [ebp+arg_18] +
push eax  +
call sub_100575D  +
push ebx  +
call ds:RtlNtStatusToDosError  +
mov [ebp+var_4] eax +
jmp loc_1006B63  +
call ds:__imp_GetLastError  +
mov [ebp+var_4] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006B73  +
test byte ptr [eax+1Ch] 2 +
jz loc_1006B73  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006B73  +
push [ebp+var_4]  +
push edi  +
push offset dword_10025AC  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100ABE1  +
jmp loc_1006B73  +
***
push offset aStagedbootcomp  +
push esi  +
push 1  +
push esi  +
call ds:CreateEventW  +
mov [ebp+hObject] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007AF6  +
test byte ptr [eax+1Ch] 2 +
jz loc_1007AF6  +
cmp byte ptr [eax+19h] 5 +
jb loc_1007AF6  +
xor ecx ecx +
cmp [ebp+hObject] esi +
setnz cl  +
push ecx  +
push offset dword_10025AC  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
call ds:GetTickCount  +
push 4  +
mov dword ptr [ebp+Data] eax +
lea eax [ebp+Data] +
push eax  +
push 4  +
push esi  +
push offset aSession0time  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
jmp loc_1005132  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005478  +
test byte ptr [eax+1Ch] 2 +
jz loc_1005478  +
cmp byte ptr [eax+19h] 1 +
jb loc_1005478  +
push dword ptr [ebp+Data]  +
push offset dword_10025AC  +
push 40h  +
jmp loc_1007F6C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007B90  +
test byte ptr [eax+1Ch] 2 +
jz loc_1007B90  +
cmp byte ptr [eax+19h] 2 +
jb loc_1007B90  +
push offset dword_10025AC  +
push 41h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov [ebp+lpEnvironment] esi +
jmp loc_1005198  +
cmp [ebp+dwType] 4 +
jnz loc_10051EA  +
mov eax dword ptr [ebp+Data] +
mov dword_1015898 eax +
jmp loc_10051EA  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005478  +
test byte ptr [eax+1Ch] 2 +
jz loc_1005478  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005478  +
push [ebp+var_460]  +
push offset dword_10025AC  +
push 43h  +
jmp loc_1007F6C  +
cmp dword_10150F8 4 +
jz loc_1005294  +
call sub_100E4C4  +
jmp loc_1005294  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+dwType] +
push eax  +
push esi  +
push offset aEventflag  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1007DDE  +
cmp [ebp+dwType] 4 +
jnz loc_1007DDE  +
cmp dword ptr [ebp+Data] esi +
jz loc_1007DDE  +
push 104h  +
lea eax [ebp+FileName] +
push eax  +
call ds:GetWindowsDirectoryW  +
dec eax  +
cmp eax 102h +
ja loc_1007DB7  +
push offset aMemory_dmp  +
push 104h  +
lea eax [ebp+FileName] +
push eax  +
call sub_10018E7  +
lea eax [ebp+FindFileData] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call ds:FindFirstFileW  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_1007DB7  +
mov ebx ds:RtlInitUnicodeString +
push offset aRegistryMachin  +
lea eax [ebp+var_48C] +
push eax  +
call ebx  +
push esi  +
push 1  +
push esi  +
lea eax [ebp+var_48C] +
mov [ebp+var_49C] eax +
push esi  +
lea eax [ebp+var_4A4] +
push eax  +
push 2001Fh  +
lea eax [ebp+var_460] +
push eax  +
mov [ebp+var_4A4] 18h +
mov [ebp+var_4A0] esi +
mov [ebp+var_498] 40h +
mov [ebp+var_494] esi +
mov [ebp+var_490] esi +
call ds:NtCreateKey  +
test eax eax +
jl loc_1007DA6  +
push offset aDumpfile  +
lea eax [ebp+var_48C] +
push eax  +
mov [ebp+lpCommandLine] 1 +
call ebx  +
lea eax [ebp+FileName] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1007D3B  +
mov edi ds:NtSetValueKey +
sub eax ecx +
sar eax 1 +
add eax eax +
push eax  +
lea eax [ebp+FileName] +
push eax  +
push 1  +
push esi  +
lea eax [ebp+var_48C] +
push eax  +
push [ebp+var_460]  +
call edi  +
push offset aTempdestinatio  +
lea eax [ebp+var_48C] +
push eax  +
call ebx  +
push 4  +
lea eax [ebp+lpCommandLine] +
push eax  +
push 4  +
push esi  +
lea eax [ebp+var_48C] +
push eax  +
push [ebp+var_460]  +
call edi  +
push [ebp+var_460]  +
call ds:RegCloseKey  +
mov edi ds:RegOpenKeyExW +
push [ebp+hFindFile]  +
call ds:FindClose  +
mov ebx 80000002h +
push 4  +
lea eax [ebp+Data] +
push eax  +
push [ebp+dwType]  +
mov dword ptr [ebp+Data] esi +
push esi  +
push offset aEventflag  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_10052B1  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
push offset aSystemrootSy_2  +
push offset aSavedumpstart  +
call sub_100E078  +
mov [ebp+hFindFile] eax +
cmp eax esi +
jz loc_1007E35  +
push offset aKC  +
push 3  +
push eax  +
call sub_1006981  +
mov [ebp+lpCommandLine] eax +
lea eax [ebp+hFindFile] +
push eax  +
call sub_100575D  +
jmp loc_1007E3B  +
mov [ebp+lpCommandLine] esi +
cmp [ebp+lpCommandLine] esi +
jz loc_100532B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1007E77  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007E77  +
cmp byte ptr [eax+19h] 4 +
jb loc_1007E77  +
push [ebp+lpCommandLine]  +
push offset dword_10025AC  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100375D  +
push esi  +
push esi  +
push esi  +
push [ebp+lpEnvironment]  +
mov ebx 80h +
push ebx  +
push esi  +
push 3  +
mov edi offset dword_100369C +
push edi  +
push [ebp+lpCommandLine]  +
call sub_1006A7F  +
mov [ebp+var_460] eax +
lea eax [ebp+lpCommandLine] +
push eax  +
call sub_100575D  +
cmp [ebp+var_460] esi +
jz loc_1005335  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005335  +
test byte ptr [eax+1Ch] 2 +
jz loc_1005335  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005335  +
push [ebp+var_460]  +
push offset dword_10025AC  +
push 45h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1005335  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005478  +
test byte ptr [eax+1Ch] 2 +
jz loc_1005478  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005478  +
push [ebp+var_460]  +
push offset dword_10025AC  +
push 47h  +
jmp loc_1007F6C  +
mov [ebp+var_460] 0Dh +
jmp loc_1005478  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005478  +
test byte ptr [eax+1Ch] 2 +
jz loc_1005478  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005478  +
push [ebp+var_460]  +
push offset dword_10025AC  +
push 49h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1005478  +
mov eax Reserved +
mov edi offset Reserved +
cmp eax edi +
jz loc_1005460  +
test byte ptr [eax+1Ch] 2 +
jz loc_1005460  +
cmp byte ptr [eax+19h] 4 +
jb loc_1005460  +
push offset dword_10025AC  +
push 4Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1005460  +
mov eax Reserved +
cmp eax edi +
jz loc_1007FE0  +
test byte ptr [eax+1Ch] 2 +
jz loc_1007FE0  +
cmp byte ptr [eax+19h] 5 +
jb loc_1007FE0  +
push offset dword_10025AC  +
push 4Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
call ds:WaitForSingleObject  +
mov [ebp+var_460] eax +
cmp eax esi +
jnz loc_1007FE0  +
mov eax Reserved +
cmp eax edi +
jz loc_100801F  +
test byte ptr [eax+1Ch] 2 +
jz loc_100801F  +
cmp byte ptr [eax+19h] 5 +
jb loc_100801F  +
push offset dword_10025AC  +
push 4Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1005478  +
***
push edi  +
push 57h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1002FDD  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov ebx eax +
mov eax Reserved +
cmp eax esi +
jz loc_1003077  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003077  +
cmp byte ptr [eax+19h] 2 +
jb loc_1003077  +
push ebx  +
push edi  +
push 58h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1003077  +
***
cmp byte ptr [eax+19h] 4 +
jb loc_10029CB  +
push esi  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_10029CB  +
cmp byte ptr [eax+19h] 4 +
jb loc_10029E8  +
push esi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_10029E8  +
call ds:__imp_GetLastError  +
mov [ebp+var_4] eax +
mov eax Reserved +
cmp eax edi +
jz loc_10088F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088F2  +
cmp byte ptr [eax+19h] 2 +
jb loc_10088F2  +
push [ebp+var_4]  +
push esi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_10088ED  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002A15  +
push esi  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1002A15  +
mov eax Reserved +
cmp eax edi +
jz loc_10088F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088F2  +
cmp byte ptr [eax+19h] 1 +
jb loc_10088F2  +
push [ebp+var_4]  +
push esi  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_10088ED  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002A41  +
push esi  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1002A41  +
mov eax Reserved +
cmp eax edi +
jz loc_1008363  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008363  +
cmp byte ptr [eax+19h] 1 +
jb loc_1008363  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push esi  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov [ebp+var_4] 400h +
mov ax word_10150D4 +
xor ebx ebx +
cmp ax 9 +
jb loc_100839A  +
mov ecx [ebp+var_4] +
movzx eax ax +
push ebx  +
mov [ebp+var_18] eax +
lea eax [ebp+var_1C] +
push eax  +
push 8  +
push 0C0000BBAh  +
push 1  +
mov [ebp+var_1C] ecx +
call sub_100E37B  +
add esp 14h +
cmp [ebp+hObject] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10083AB  +
push [ebp+hObject]  +
call ds:CloseHandle  +
call sub_100AF9D  +
call sub_100ACAA  +
mov eax [ebp+var_4] +
leave   +
retn 10h  +
cmp byte ptr [eax+19h] 4 +
jb loc_1002A6A  +
push esi  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1002A6A  +
mov eax Reserved +
cmp eax edi +
jz loc_1008404  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008404  +
cmp byte ptr [eax+19h] 3 +
jb loc_1008404  +
push [ebp+var_4]  +
push esi  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov eax Reserved +
mov [ebp+var_4] ebx +
jmp loc_1002A84  +
mov eax Reserved +
cmp eax edi +
jz loc_1008437  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008437  +
cmp byte ptr [eax+19h] 3 +
jb loc_1008437  +
push [ebp+var_4]  +
push esi  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov eax Reserved +
mov [ebp+var_4] ebx +
jmp loc_1002AC1  +
mov eax Reserved +
cmp eax edi +
jz loc_10088F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088F2  +
cmp byte ptr [eax+19h] 1 +
jb loc_10088F2  +
push [ebp+var_4]  +
push esi  +
push 16h  +
jmp loc_1008307  +
mov eax Reserved +
cmp eax edi +
jz loc_10088F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088F2  +
cmp byte ptr [eax+19h] 5 +
jb loc_10088F2  +
push [ebp+var_4]  +
push esi  +
push 1Ah  +
jmp loc_1008307  +
mov eax Reserved +
cmp eax edi +
jz loc_10088F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088F2  +
cmp byte ptr [eax+19h] 1 +
jb loc_10088F2  +
push [ebp+var_4]  +
push esi  +
push 1Ch  +
jmp loc_1008307  +
push esi  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1002C20  +
mov eax Reserved +
cmp eax edi +
jz loc_10088F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088F2  +
cmp byte ptr [eax+19h] 1 +
jb loc_10088F2  +
push [ebp+var_4]  +
push esi  +
push 20h  +
jmp loc_1008307  +
mov eax Reserved +
cmp eax edi +
jz loc_10088F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088F2  +
cmp byte ptr [eax+19h] 1 +
jb loc_10088F2  +
push [ebp+var_4]  +
push esi  +
push 22h  +
jmp loc_1008307  +
call sub_1003B35  +
test eax eax +
jz loc_1002D13  +
xor ebx ebx +
cmp dword_1015100 ebx +
jnz loc_1008551  +
push ebx  +
push hDesktop  +
call sub_10066A7  +
mov eax Reserved +
cmp eax edi +
jz loc_1008574  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008574  +
cmp byte ptr [eax+19h] 4 +
jb loc_1008574  +
push esi  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
lea eax [ebp+hKey] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call sub_100AD82  +
mov [ebp+var_4] eax +
cmp dword_1015100 ebx +
jnz loc_1008598  +
push ebx  +
push dword_1015170  +
call sub_10066A7  +
cmp [ebp+var_4] ebx +
jz loc_10085C9  +
mov eax Reserved +
cmp eax edi +
jz loc_10088F2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088F2  +
cmp byte ptr [eax+19h] 1 +
jb loc_10088F2  +
push [ebp+var_4]  +
push esi  +
push 24h  +
jmp loc_1008307  +
cmp [ebp+var_18] 1 +
push 0Ch  +
pop eax  +
mov word_10150D4 ax +
jnz loc_1002D13  +
mov eax Reserved +
cmp eax edi +
jz loc_100891B  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088FD  +
cmp byte ptr [eax+19h] 4 +
jb loc_10088FD  +
push esi  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_10088ED  +
mov eax Reserved +
cmp eax edi +
jz loc_10088DE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088DE  +
cmp byte ptr [eax+19h] 1 +
jb loc_10088DE  +
push [ebp+var_4]  +
push esi  +
push 27h  +
jmp loc_10086FB  +
call ebx  +
mov [ebp+var_4] eax +
mov eax Reserved +
cmp eax edi +
jz loc_10088DE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088DE  +
cmp byte ptr [eax+19h] 1 +
jb loc_10088DE  +
push [ebp+var_4]  +
push esi  +
push 29h  +
jmp loc_10086FB  +
mov eax Reserved +
cmp eax edi +
jz loc_1008691  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008691  +
cmp byte ptr [eax+19h] 1 +
jb loc_1008691  +
push ebx  +
push esi  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push ebx  +
call ds:RtlNtStatusToDosError  +
mov [ebp+var_4] eax +
jmp loc_1008706  +
mov eax Reserved +
cmp eax edi +
jz loc_1002DA6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1002D88  +
cmp byte ptr [eax+19h] 2 +
jb loc_1002D88  +
push [ebp+var_4]  +
push esi  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1002D83  +
mov eax Reserved +
cmp eax edi +
jz loc_10088DE  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088DE  +
cmp byte ptr [eax+19h] 5 +
jb loc_10088DE  +
push [ebp+var_4]  +
push esi  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov eax Reserved +
jmp loc_10088DE  +
mov eax Reserved +
cmp eax edi +
jz loc_1008733  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008733  +
cmp byte ptr [eax+19h] 4 +
jb loc_1008733  +
push esi  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_1011FAB  +
jmp loc_1002DD1  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
push 4  +
push 80000BBBh  +
push 2  +
call sub_100E37B  +
add esp 14h +
mov [ebp+var_4] ebx +
jmp loc_1002E04  +
mov eax Reserved +
cmp eax edi +
jz loc_1002E28  +
test byte ptr [eax+1Ch] 2 +
jz loc_1002E28  +
cmp byte ptr [eax+19h] 2 +
jb loc_1002E28  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push esi  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1002E28  +
mov eax Reserved +
cmp eax edi +
jz loc_1002E4B  +
test byte ptr [eax+1Ch] 2 +
jz loc_1002E4B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1002E4B  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push esi  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1002E46  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100881D  +
mov eax Reserved +
cmp eax edi +
jz loc_1008808  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008808  +
cmp byte ptr [eax+19h] 3 +
jb loc_1008808  +
push [ebp+var_4]  +
push esi  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push 3E8h  +
call ds:Sleep  +
mov eax Reserved +
jmp loc_1002E55  +
push 10h  +
pop eax  +
mov word_10150D4 ax +
mov eax Reserved +
cmp eax edi +
jz loc_1008849  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008849  +
cmp byte ptr [eax+19h] 4 +
jb loc_1008849  +
push esi  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push offset dword_10089B8  +
call sub_100AFD3  +
mov eax Reserved +
cmp eax edi +
jz loc_1008876  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008876  +
cmp byte ptr [eax+19h] 4 +
jb loc_1008876  +
push esi  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
call sub_100C3B3  +
push offset dword_10089C8  +
call sub_100AFD3  +
lea eax [ebp+Data] +
push eax  +
call sub_100BBC3  +
test eax eax +
jnz loc_10088B5  +
mov eax Reserved +
cmp eax edi +
jz loc_10088BA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10088BA  +
cmp byte ptr [eax+19h] 3 +
jb loc_10088BA  +
push esi  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax Reserved +
test [ebp+Data] 10h +
jz loc_10088C6  +
and [ebp+hKey.unused] 0 +
jmp loc_10088D4  +
test [ebp+Data] 4 +
push 0  +
pop ecx  +
setz cl  +
inc ecx  +
mov [ebp+hKey.unused] ecx +
push 11h  +
pop ecx  +
mov word_10150D4 cx +
cmp [ebp+hEvent] 0 +
jz loc_10088F2  +
push [ebp+hEvent]  +
call ds:CloseHandle  +
mov eax Reserved +
xor ebx ebx +
cmp [ebp+var_4] ebx +
jnz loc_100836A  +
cmp eax edi +
jz loc_100891B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100891B  +
cmp byte ptr [eax+19h] 5 +
jb loc_100891B  +
push esi  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push ebx  +
push ebx  +
call sub_100E34D  +
push 10h  +
push 6  +
push 3EAh  +
call sub_100E301  +
mov eax Reserved +
cmp eax edi +
jz loc_1008953  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008953  +
cmp byte ptr [eax+19h] 4 +
jb loc_1008953  +
push esi  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push offset dword_10089D8  +
call sub_100AFD3  +
push dword ptr [ebp+Data]  +
call sub_100B247  +
push offset dword_10089E8  +
call sub_100AFD3  +
call sub_100FA38  +
call sub_100B07B  +
call sub_100BA2B  +
call sub_100AF29  +
mov eax Reserved +
cmp eax edi +
jz loc_10089A6  +
test byte ptr [eax+1Ch] 1 +
jz loc_10089A6  +
cmp byte ptr [eax+19h] 4 +
jb loc_10089A6  +
push esi  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push [ebp+hKey.unused]  +
call sub_100B2E3  +
jmp loc_100839A  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0B  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008B0B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008B0B  +
push dword ptr [ebp-4]  +
push edi  +
push 1Bh  +
jmp loc_1008B00  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0B  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008B0B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008B0B  +
push dword ptr [ebp-4]  +
push edi  +
push 1Ch  +
jmp loc_1008B00  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0B  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008B0B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008B0B  +
push dword ptr [ebp-4]  +
push edi  +
push 1Dh  +
jmp loc_1008B00  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0B  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008B0B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008B0B  +
push dword ptr [ebp-4]  +
push edi  +
push 1Eh  +
jmp loc_1008B00  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0B  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008B0B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008B0B  +
push dword ptr [ebp-4]  +
push edi  +
push 1Fh  +
jmp loc_1008B00  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0B  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008B0B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008B0B  +
push dword ptr [ebp-4]  +
push edi  +
push 20h  +
jmp loc_1008B00  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B0B  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008B0B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008B0B  +
push dword ptr [ebp-4]  +
push edi  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
cmp [ebp-4] ebx +
jz loc_1002031  +
cmp BindingVector ebx +
jz loc_1008B57  +
push offset BindingVector  +
call ds:RpcBindingVectorFree  +
test eax eax +
jz loc_1008B51  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008B51  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008B51  +
cmp byte ptr [eax+19h] 3 +
jb loc_1008B51  +
push edi  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov BindingVector ebx +
xor eax eax +
mov edi offset UuidVector +
stos   +
push ebx  +
stos   +
lea eax [ebp-4] +
push eax  +
push 4  +
push 80000BBBh  +
push 2  +
call sub_100E37B  +
add esp 14h +
jmp loc_1002031  +
***
call ds:__imp_GetLastError  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10032BE  +
test byte ptr [eax+1Ch] 8 +
jz loc_10032BE  +
cmp byte ptr [eax+19h] 3 +
jb loc_10032BE  +
push esi  +
push offset loc_1002214  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_10032BE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10032BE  +
test byte ptr [eax+1Ch] 8 +
jz loc_10032BE  +
cmp byte ptr [eax+19h] 4 +
jb loc_10032BE  +
push offset loc_1002214  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_10032BE  +
***
test eax eax +
jnz $+2  +
pop ebp  +
retn 4  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006DE4  +
test byte ptr [eax+1Ch] 8 +
jz loc_1006DE4  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006DE4  +
push edi  +
push offset loc_1002214  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1006DE4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006DE3  +
test byte ptr [eax+1Ch] 8 +
jz loc_1006DE3  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006DE3  +
push edi  +
push offset loc_1002214  +
push 12h  +
jmp loc_1008C98  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006DE3  +
test byte ptr [eax+1Ch] 8 +
jz loc_1006DE3  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006DE3  +
push edi  +
push offset loc_1002214  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1006DE3  +
***
push 0Eh  +
pop esi  +
jmp loc_1006EC6  +
cmp esi 6CCh +
jz loc_1006E7C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006EC0  +
test byte ptr [eax+1Ch] 8 +
jz loc_1006EC0  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006EC0  +
push esi  +
push offset loc_1002214  +
push 0Ah  +
jmp loc_1008D16  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006EC0  +
test byte ptr [eax+1Ch] 8 +
jz loc_1006EC0  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006EC0  +
push esi  +
push offset loc_1002214  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1006EC0  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008D50  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008D50  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008D50  +
push offset loc_1002214  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push esi  +
call ds:RtlNtStatusToDosError  +
jmp loc_1006CD4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008D50  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008D50  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008D50  +
push offset loc_1002214  +
push 26h  +
jmp loc_1008D45  +
push 0Eh  +
pop esi  +
jmp loc_1006CD6  +
call ds:__imp_GetLastError  +
jmp loc_1006CD4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006CD6  +
test byte ptr [eax+1Ch] 8 +
jz loc_1006CD6  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006CD6  +
push esi  +
push offset loc_1002214  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1006CD6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006CCF  +
test byte ptr [eax+1Ch] 8 +
jz loc_1006CCF  +
cmp byte ptr [eax+19h] 4 +
jb loc_1006CCF  +
push offset loc_1002214  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1006CCF  +
***
xor eax eax +
jmp loc_1006BE1  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008E38  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008E38  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008E38  +
push offset dword_100A6F0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
xor eax eax +
jmp loc_1006A56  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008E69  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008E69  +
cmp byte ptr [eax+19h] 5 +
jb loc_1008E69  +
push offset dword_100A6F0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
lea eax [ebp+var_4] +
push eax  +
call sub_100575D  +
lea eax [edi+edi] +
push eax  +
call sub_1006A60  +
mov [ebp+var_4] eax +
mov esi edi +
test eax eax +
jz loc_1008EC6  +
push edi  +
jmp loc_1006A39  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1008EB4  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008EB4  +
cmp byte ptr [eax+19h] 2 +
jb loc_1008EB4  +
push offset dword_100A6F0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
lea eax [ebp+var_4] +
push eax  +
call sub_100575D  +
and [ebp+var_4] 0 +
jmp loc_1006A51  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1006A51  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006A51  +
cmp byte ptr [eax+19h] 2 +
jb loc_1006A51  +
push offset dword_100A6F0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1006A51  +
***
push 0Dh  +
pop esi  +
jmp loc_10039F8  +
push 1  +
push 9  +
call sub_1012131  +
push 1  +
push 12h  +
call sub_1012131  +
push offset aOBagBadPaiAFaS  +
push [ebp+pObjectName]  +
call sub_100E13B  +
test eax eax +
jz loc_10039F0  +
push edi  +
push 9  +
call sub_1012131  +
push edi  +
push 12h  +
call sub_1012131  +
xor esi esi +
jmp loc_10039F8  +
***
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push esi  +
push [ebp+hKey]  +
mov dword ptr [ebp+Data] ebx +
call ds:RegSetValueExW  +
jmp loc_1006859  +
***
mov eax 8000h +
push eax  +
push ebx  +
mov [ebp+NumberOfBytesRead] eax +
call ds:LocalAlloc  +
mov esi eax +
cmp esi ebx +
jz loc_1001AA8  +
push ebx  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
mov eax [ebp+NumberOfBytesRead] +
add eax 0FFFFFFFEh +
push eax  +
push esi  +
push [ebp+hObject]  +
call ds:ReadFile  +
mov edi eax +
jmp loc_1001AAA  +
mov eax [ebp+NumberOfBytesRead] +
push esi  +
push edi  +
push ebx  +
push ebx  +
mov [esi+eax] bl +
mov eax [ebp+NumberOfBytesRead] +
push 400003E9h  +
push 4  +
mov [esi+eax+1] bl +
call sub_100E37B  +
add esp 18h +
test eax eax +
jz loc_1001AB3  +
xor edi edi +
jmp loc_1001AB3  +
push esi  +
call ds:LocalFree  +
jmp loc_1001ABB  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1001AC5  +
***
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_10090F0  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10090F0  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10090F0  +
push eax  +
push offset dword_100A6F0  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
xor eax eax +
jmp loc_1004119  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_10090F0  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
lea eax [ebp+lpSrc] +
push eax  +
call sub_100575D  +
jmp loc_10090F0  +
mov ecx [ebp+lpSrc] +
mov [ecx+0FFEh] ax +
jmp loc_1004071  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100408F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100408F  +
cmp byte ptr [eax+19h] 2 +
jb loc_100408F  +
push [ebp+lpSrc]  +
push [ebp+lpValueName]  +
push offset dword_100A6F0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B908  +
jmp loc_100408F  +
mov ecx [ebp+lpSrc] +
mov [ecx+0FFEh] ax +
jmp loc_10040D9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10040E4  +
test byte ptr [eax+1Ch] 1 +
jz loc_10040E4  +
cmp byte ptr [eax+19h] 2 +
jb loc_10040E4  +
push [ebp+var_30]  +
push [ebp+lpValueName]  +
push offset dword_100A6F0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B908  +
jmp loc_10040E4  +
***
lea eax [ebp-440h] +
push eax  +
call ds:DeleteFileW  +
jmp loc_1001A2C  +
***
cmp al 46h +
jg loc_10091D7  +
movsx eax al +
sub eax 37h +
jmp loc_1004A51  +
or eax 0FFFFFFFFh +
jmp loc_1004A51  +
cmp cl 46h +
jg loc_10091EF  +
movsx ecx cl +
sub ecx 37h +
jmp loc_1004A6D  +
or ecx 0FFFFFFFFh +
jmp loc_1004A6D  +
cmp al 46h +
jg loc_1009206  +
movsx eax al +
sub eax 37h +
jmp loc_1004AFC  +
or eax 0FFFFFFFFh +
jmp loc_1004AFC  +
cmp cl 46h +
jg loc_100921E  +
movsx ecx cl +
sub ecx 37h +
jmp loc_1004B26  +
or ecx 0FFFFFFFFh +
jmp loc_1004B26  +
movsx eax al +
sub eax 30h +
jmp loc_1004BC1  +
cmp al 46h +
jg loc_1009240  +
movsx eax al +
sub eax 37h +
jmp loc_1004BC1  +
or eax 0FFFFFFFFh +
jmp loc_1004BC1  +
cmp cl 46h +
jg loc_1009258  +
movsx ecx cl +
sub ecx 37h +
jmp loc_1004BEB  +
or ecx 0FFFFFFFFh +
jmp loc_1004BEB  +
cmp al 46h +
jg loc_100926F  +
movsx eax al +
sub eax 37h +
jmp loc_1004C7D  +
or eax 0FFFFFFFFh +
jmp loc_1004C7D  +
cmp cl 46h +
jg loc_1009287  +
movsx ecx cl +
sub ecx 37h +
jmp loc_1004C95  +
or ecx 0FFFFFFFFh +
jmp loc_1004C95  +
***
mov ecx Reserved +
cmp ecx edi +
jz loc_1009301  +
test [ecx+1Ch] bl +
jz loc_10092E5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10092E5  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push esi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_10092DA  +
mov ecx Reserved +
cmp ecx edi +
jz loc_1009301  +
test [ecx+1Ch] bl +
jz loc_10092E5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_10092E5  +
push eax  +
push esi  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
mov ecx Reserved +
cmp ecx edi +
jz loc_1009301  +
test [ecx+1Ch] bl +
jz loc_1009301  +
cmp [ecx+19h] bl +
jb loc_1009301  +
push esi  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10015B6  +
push ebx  +
push 13h  +
call sub_1012131  +
push ebx  +
call ds:NtShutdownSystem  +
jmp loc_100706F  +
***
mov eax Reserved +
cmp eax edi +
jz loc_1009339  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009339  +
cmp byte ptr [eax+19h] 1 +
jb loc_1009339  +
push ecx  +
push esi  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push 1  +
push 13h  +
call sub_1012131  +
push 1  +
call ds:NtShutdownSystem  +
jmp loc_100358B  +
***
mov eax Reserved +
cmp eax esi +
jz loc_1009382  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009382  +
cmp byte ptr [eax+19h] 2 +
jb loc_1009382  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset dword_10030E4  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov edi 0C000009Ah +
jmp loc_1006FCB  +
call sub_1002F01  +
test eax eax +
jz loc_1006FCB  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10093C3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10093C3  +
cmp byte ptr [eax+19h] 2 +
jb loc_10093C3  +
push offset dword_10030E4  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov edi 0C0000260h +
jmp loc_1006FCB  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1006FCB  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1006FCB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1006FCB  +
push eax  +
push offset dword_10030E4  +
push 17h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_1006FCB  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1006FD5  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1006FD5  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1006FD5  +
push eax  +
push offset dword_10030E4  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_1006FD5  +
***
push [ebp+arg_4]  +
call sub_1006FF7  +
jmp loc_1003370  +
push 10h  +
pop edi  +
jmp loc_100337C  +
***
push [ebp+hKey]  +
mov dword_10156F0 esi +
call ds:RegCloseKey  +
jmp loc_1003ACC  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10020CD  +
test byte ptr [eax+1Ch] 20h +
jz loc_10020CD  +
cmp byte ptr [eax+19h] 2 +
jb loc_10020CD  +
push esi  +
push offset dword_100A85C  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_10020CD  +
***
call ds:__imp_GetLastError  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10027BE  +
test byte ptr [eax+1Ch] 20h +
jz loc_10027BE  +
cmp byte ptr [eax+19h] 2 +
jb loc_10027BE  +
push esi  +
push offset dword_100A85C  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_10027BE  +
***
call ds:__imp_GetLastError  +
mov edi eax +
jmp loc_1003BE2  +
push eax  +
call ds:LocalSize  +
cmp eax [ebp+uBytes] +
jnb loc_1003BE2  +
push 2  +
push [ebp+uBytes]  +
push dword ptr [esi]  +
call ds:LocalReAlloc  +
cmp eax edi +
jz loc_10094F2  +
mov [esi] eax +
jmp loc_1003BE2  +
***
test esi esi +
jz loc_1005AC9  +
and dword ptr [esi] 0 +
jmp loc_1005AC9  +
***
mov eax large fs:18h +
mov eax [eax+30h] +
cmp [eax+2] bl +
jnz loc_10014D4  +
jmp loc_10014D8  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aTracingcontrol  +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov [ebp+var_8] eax +
call ds:RegCloseKey  +
cmp [ebp+var_8] ebx +
setz [ebp+var_2]  +
jmp loc_1001500  +
mov eax dword ptr [ebp+Data] +
cmp eax dword_1015108 +
jnz loc_1005A6E  +
jmp loc_100151E  +
cmp [ebp+var_1] 0 +
jz loc_10059D7  +
or dword ptr [esi+40h] 80000h +
mov dword ptr [esi+44h] 5 +
jmp loc_10059D7  +
push 2  +
push esi  +
push ebx  +
push ecx  +
push eax  +
call ControlTraceW  +
jmp loc_1005A11  +
mov [ebp+var_8] 0Dh +
jmp loc_1005A68  +
***
int 3  +
jmp loc_1001436  +
***
push eax  +
call sub_101223A  +
mov dword_10151D4 esi +
jmp loc_1001472  +
***
push eax  +
call sub_1012799  +
mov dword_10151D8 esi +
jmp loc_100147F  +
***
movzx eax cx +
jmp loc_1001B1E  +
***
lea ecx [ebp-2Ch] +
push ecx  +
push 5  +
call eax  +
jmp loc_1001B29  +
***
push edi  +
call FreeLibrary  +
mov [ebp+8] esi +
jmp loc_1001B29  +
***
call GetLastError  +
cmp eax 7Eh +
jz loc_1009658  +
cmp eax 0C1h +
jnz loc_100968A  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_100966E  +
mov [ebp+8] eax +
jmp loc_1001B29  +
***
mov dword ptr [ebp-4] 1 +
jmp loc_100968A  +
call GetLastError  +
cmp eax 7Fh +
jnz loc_1003146  +
jmp loc_1001B52  +
***
push dword ptr [ebp-8]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
jmp loc_1001B61  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_10158B4 eax +
cmp dword_101510C 0 +
jnz loc_1009760  +
push eax  +
call ds:_exit  +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 0FFh +
call sub_10015E2  +
retn   +
***
push (offset dword_1003C50+4)  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_1007160  +
***
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
***
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_1007209  +
***
cmp ax 3 +
jnz loc_10071B7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_1003C85  +
not eax  +
mov dword_10150C8 eax +
jmp loc_1003CDB  +
***
mov dword ptr [esi+18h] 0C0000002h +
jmp loc_10034AF  +
cmp eax 2 +
jz loc_1003460  +
cmp eax 3 +
jnz loc_100347C  +
jmp loc_1003460  +
***
push esi  +
push eax  +
push esi  +
lea eax [ebp+var_6C] +
push eax  +
call edi  +
mov ebx eax +
jmp loc_10028BB  +
***
mov dword_1015150 esi +
jmp loc_1003D40  +
mov dword_1015158 offset loc_1011CA1 +
jmp loc_1003D5E  +
mov dword_1015160 edx +
jmp loc_1003D8B  +
mov dword_1015164 esi +
jmp loc_1003D9C  +
mov dword_1015168 edx +
jmp loc_1003DAD  +
***
xor edi edi +
jmp sub_1007371  +
***
call sub_1011CEF  +
jmp locret_100737D  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10021DB  +
test byte ptr [eax+1Ch] 1 +
jz loc_10021DB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10021DB  +
push dword ptr [ebp-6Ch]  +
push offset dword_100AB60  +
push 15h  +
jmp loc_1009A65  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10021DB  +
test [eax+1Ch] bl +
jz loc_10021DB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10021DB  +
push dword ptr [ebp-6Ch]  +
push offset dword_100AB60  +
push 16h  +
jmp loc_1009A65  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10021DB  +
test [eax+1Ch] bl +
jz loc_10021DB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10021DB  +
push dword ptr [ebp-6Ch]  +
push offset dword_100AB60  +
push 17h  +
jmp loc_1009A65  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10021DB  +
test [eax+1Ch] bl +
jz loc_10021DB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10021DB  +
push dword ptr [ebp-6Ch]  +
push offset dword_100AB60  +
push 18h  +
jmp loc_1009A65  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10021DB  +
test [eax+1Ch] bl +
jz loc_10021DB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10021DB  +
push dword ptr [ebp-6Ch]  +
push offset dword_100AB60  +
push 19h  +
jmp loc_1009A65  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10021DB  +
test [eax+1Ch] bl +
jz loc_10021DB  +
cmp byte ptr [eax+19h] 2 +
jb loc_10021DB  +
push dword ptr [ebp-6Ch]  +
push offset dword_100AB60  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_10021DB  +
***
call sub_1011CEF  +
jmp locret_100224D  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10057CC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10057CC  +
cmp byte ptr [eax+19h] 2 +
jb loc_10057CC  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset dword_10017BC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_10057CC  +
***
push esi  +
call ds:RtlNtStatusToDosError  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1003605  +
test byte ptr [eax+1Ch] 1 +
jz loc_1003605  +
cmp byte ptr [eax+19h] 2 +
jb loc_1003605  +
push esi  +
push offset dword_10017BC  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1003605  +
***
call ebx  +
mov [ebp-1Ch] eax +
mov eax Reserved +
cmp eax esi +
jz loc_1001769  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001769  +
cmp byte ptr [eax+19h] 2 +
jb loc_1001769  +
push dword ptr [ebp-1Ch]  +
push edi  +
push 12h  +
jmp loc_1009C83  +
call ebx  +
mov [ebp-1Ch] eax +
mov eax Reserved +
cmp eax esi +
jz loc_1001769  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001769  +
cmp byte ptr [eax+19h] 2 +
jb loc_1001769  +
push dword ptr [ebp-1Ch]  +
push edi  +
push 13h  +
jmp loc_1009C83  +
mov eax Reserved +
cmp eax esi +
jz loc_1001769  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001769  +
cmp [eax+19h] bl +
jb loc_1001769  +
push dword ptr [ebp-1Ch]  +
push edi  +
push 15h  +
jmp loc_1009C83  +
mov dword ptr [ebp-1Ch] 5B4h +
mov eax Reserved +
cmp eax esi +
jz loc_1001769  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001769  +
cmp [eax+19h] bl +
jb loc_1001769  +
push dword ptr [ebp+0Ch]  +
push edi  +
push 17h  +
jmp loc_1009C83  +
mov eax Reserved +
cmp eax esi +
jz loc_1001769  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001769  +
cmp [eax+19h] bl +
jb loc_1001769  +
push dword ptr [ebp-1Ch]  +
push edi  +
push 18h  +
jmp loc_1009C83  +
mov [ebp-1Ch] ecx +
mov eax Reserved +
cmp eax esi +
jz loc_1001769  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001769  +
cmp [eax+19h] bl +
jb loc_1001769  +
push ecx  +
push edi  +
push 19h  +
jmp loc_1009C83  +
mov dword ptr [ebp-1Ch] 5B4h +
mov eax Reserved +
cmp eax esi +
jz loc_1001769  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001769  +
cmp [eax+19h] bl +
jb loc_1001769  +
push dword ptr [ebp-6Ch]  +
push edi  +
push 1Ah  +
jmp loc_1009C83  +
call ebx  +
mov [ebp-1Ch] eax +
mov eax 5B4h +
cmp [ebp-1Ch] eax +
jz loc_1009C93  +
mov eax Reserved +
cmp eax esi +
jz loc_1001769  +
test byte ptr [eax+1Ch] 1 +
jz loc_1001769  +
cmp byte ptr [eax+19h] 2 +
jb loc_1001769  +
push dword ptr [ebp-1Ch]  +
push edi  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1001769  +
mov ecx [ebp+0Ch] +
cmp [ebp-24h] ecx +
jbe loc_1009CA3  +
mov [ebp-1Ch] eax +
jmp loc_1001769  +
mov eax Reserved +
cmp eax esi +
jz loc_1009CC7  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009CC7  +
cmp byte ptr [eax+19h] 4 +
jb loc_1009CC7  +
push ecx  +
push edi  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push 64h  +
call ds:Sleep  +
add dword ptr [ebp-24h] 64h +
jmp loc_100164B  +
***
call ds:__imp_GetLastError  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009D0B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1009D0B  +
cmp byte ptr [eax+19h] 2 +
jb loc_1009D0B  +
push edi  +
push offset dword_1003748  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
cmp [ebp+var_4] 0Ah +
jnb loc_1009D19  +
inc [ebp+var_4]  +
add ebx 64h +
jmp loc_1009D23  +
cmp [ebp+arg_4] 0 +
jz loc_1003DE1  +
push ebx  +
call ds:Sleep  +
jmp loc_1003DD2  +
***
push [ebp+arg_8]  +
push [ebp+hDesktop]  +
call ds:SwitchDesktopWithFade  +
jmp loc_10066E2  +
call ds:__imp_GetLastError  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1009D76  +
test byte ptr [eax+1Ch] 4 +
jz loc_1009D76  +
cmp byte ptr [eax+19h] 2 +
jb loc_1009D76  +
push [ebp+arg_8]  +
push esi  +
push offset dword_1003748  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
cmp ebx 0Ah +
jnb loc_1009D81  +
inc ebx  +
add edi 64h +
jmp loc_1009D8B  +
cmp [ebp+arg_4] 0 +
jz loc_10066EA  +
push edi  +
call ds:Sleep  +
jmp loc_10066CE  +
***
mov ecx [eax+4] +
jmp loc_1005B09  +
call ds:__imp_GetLastError  +
mov [ebp-1Ch] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005B3E  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005B3E  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005B3E  +
push dword ptr [ebp-1Ch]  +
push offset dword_1003748  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1005B3E  +
call ds:__imp_GetLastError  +
mov [ebp-1Ch] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005B38  +
test [eax+1Ch] bl +
jz loc_1005B38  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005B38  +
push dword ptr [ebp-1Ch]  +
push offset dword_1003748  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1005B38  +
***
xor ebx ebx +
jmp sub_1006119  +
***
call ds:__imp_GetLastError  +
mov [ebp-1Ch] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005C6A  +
test [eax+1Ch] bl +
jz loc_1005C6A  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005C6A  +
push dword ptr [ebp-1Ch]  +
push offset dword_1003748  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1005C6A  +
call ds:__imp_GetLastError  +
mov [ebp-1Ch] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005C64  +
test [eax+1Ch] bl +
jz loc_1005C64  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005C64  +
push dword ptr [ebp-1Ch]  +
push offset dword_1003748  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1005C64  +
***
mov dword ptr [ebp-20h] 4 +
push edi  +
push esi  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-30h] +
push eax  +
call sub_10050A4  +
jmp loc_1005D1E  +
call ds:__imp_GetLastError  +
mov [ebp-1Ch] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005D57  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005D57  +
cmp [eax+19h] bl +
jb loc_1005D57  +
push dword ptr [ebp-1Ch]  +
push offset dword_1003748  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1005D57  +
call ds:__imp_GetLastError  +
mov [ebp-1Ch] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1005D51  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005D51  +
cmp [eax+19h] bl +
jb loc_1005D51  +
push dword ptr [ebp-1Ch]  +
push offset dword_1003748  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1005D51  +
***
push 0Eh  +
pop eax  +
jmp loc_100509A  +
***
xor esi esi +
jmp sub_1003DEF  +
***
mov edi [ebp+14h] +
mov eax [edi] +
cmp eax esi +
jz loc_100A18C  +
push eax  +
call ds:CloseDesktop  +
mov [edi] esi +
mov edi [ebp+10h] +
mov eax [edi] +
cmp eax esi +
jz loc_100A19E  +
push eax  +
call ds:CloseDesktop  +
mov [edi] esi +
mov edi [ebp+8] +
mov eax [edi] +
cmp eax esi +
jz locret_1003DF8  +
push eax  +
call ds:CloseWindowStation  +
mov [edi] esi +
jmp locret_1003DF8  +
***
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1005BBA  +
test byte ptr [ecx+1Ch] 2 +
jz loc_1005BBA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1005BBA  +
push eax  +
push offset dword_100AB70  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_1005BBA  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1003E4C  +
test byte ptr [eax+1Ch] 2 +
jz loc_1003E4C  +
cmp byte ptr [eax+19h] 2 +
jb loc_1003E4C  +
push offset dword_100AB70  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_1003E4C  +
***
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100430D  +
push 2  +
pop ebx  +
test [eax+1Ch] bl +
jz loc_100430D  +
cmp [eax+19h] bl +
jb loc_100430D  +
push offset dword_100AB70  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_100430D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100430D  +
push 2  +
pop ebx  +
test [eax+1Ch] bl +
jz loc_100430D  +
cmp [eax+19h] bl +
jb loc_100430D  +
push offset dword_100AB70  +
push 0Bh  +
jmp loc_100A25E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100430D  +
push 2  +
pop ebx  +
test [eax+1Ch] bl +
jz loc_100430D  +
cmp [eax+19h] bl +
jb loc_100430D  +
push offset dword_100AB70  +
push 0Ch  +
jmp loc_100A25E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100430D  +
test [eax+1Ch] bl +
jz loc_100430D  +
cmp [eax+19h] bl +
jb loc_100430D  +
push dword ptr [ebp-20h]  +
push offset dword_100AB70  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100430D  +
mov dword ptr [ebp-20h] 0C0000017h +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100430D  +
test [eax+1Ch] bl +
jz loc_100430D  +
cmp [eax+19h] bl +
jb loc_100430D  +
push offset dword_100AB70  +
push 0Eh  +
jmp loc_100A25E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100A366  +
test [eax+1Ch] bl +
jz loc_100A366  +
cmp [eax+19h] bl +
jb loc_100A366  +
push dword ptr [ebp-20h]  +
push offset dword_100AB70  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
lea eax [ebp-2Ch] +
push eax  +
call sub_1005BCF  +
jmp loc_100430D  +
***
cmp [ebp-28h] edi +
jz loc_100A382  +
lea eax [ebp-28h] +
push eax  +
call sub_1005BCF  +
push dword ptr [ebp-20h]  +
call ds:RtlNtStatusToDosError  +
push eax  +
call ds:SetLastError  +
jmp locret_1004368  +
***
call ds:__imp_GetLastError  +
mov [ebp-44h] eax +
jmp loc_10062ED  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push dword ptr [ebp-40h]  +
push offset dword_100A610  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_10062ED  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push dword ptr [ebp-40h]  +
push offset dword_100A610  +
push 0Bh  +
jmp loc_100A3DD  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push dword ptr [ebp-40h]  +
push offset dword_100A610  +
push 0Ch  +
jmp loc_100A3DD  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push dword ptr [ebp-40h]  +
push offset dword_100A610  +
push 0Dh  +
jmp loc_100A3DD  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push dword ptr [ebp-40h]  +
push offset dword_100A610  +
push 0Eh  +
jmp loc_100A3DD  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push dword ptr [ebp-40h]  +
push offset dword_100A610  +
push 0Fh  +
jmp loc_100A3DD  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push dword ptr [ebp-40h]  +
push offset dword_100A610  +
push 10h  +
jmp loc_100A3DD  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push dword ptr [ebp-40h]  +
push offset dword_100A610  +
push 11h  +
jmp loc_100A3DD  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push dword ptr [ebp-40h]  +
push offset dword_100A610  +
push 12h  +
jmp loc_100A3DD  +
push esi  +
call ds:RtlNtStatusToDosError  +
mov [ebp-44h] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10062ED  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062ED  +
cmp byte ptr [eax+19h] 2 +
jb loc_10062ED  +
push esi  +
push offset dword_100A610  +
push 13h  +
jmp loc_100A3DD  +
***
mov eax large fs:18h +
mov eax [eax+30h] +
cmp [eax+2] bl +
jnz loc_1003E81  +
jmp loc_1003F25  +
cmp [ebp+Type] esi +
jnz loc_1003ED7  +
cmp dword ptr [ebp+Data] ebx +
setz al  +
mov edi eax +
jmp loc_1003ED7  +
cmp byte ptr [eax+19h] 5 +
jb loc_1003F09  +
push esi  +
push offset dword_100AB80  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1003F09  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_100AC12  +
cmp word ptr [edx] 0 +
jnz loc_100ABF7  +
push 0Eh  +
jmp loc_100AC14  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100ABFD  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100AC15  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100AC26  +
cmp word ptr [edx] 0 +
jnz loc_100AC2B  +
mov edx offset aNull_1 +
jmp loc_100AC2B  +
mov edx offset aNull +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_100AC72  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100AC66  +
sub eax edx +
inc eax  +
jmp loc_100AC75  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_100AC80  +
mov ecx offset aNull_0 +
push 0  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi Reserved +
push edi  +
mov edi offset Reserved +
cmp esi edi +
jnz loc_100ACDD  +
jmp loc_100ACE7  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_100ACDB  +
push ecx  +
push eax  +
call ds:EtwUnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_100ACBF  +
mov Reserved edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_1015794 +
push ebx  +
xor ebx ebx +
push edi  +
mov edi offset dword_1015798 +
test eax eax +
jbe loc_100AD55  +
push esi  +
mov esi edi +
lea eax [ebp+ExitCode] +
push eax  +
push dword ptr [esi]  +
call ds:GetExitCodeProcess  +
test eax eax +
jz loc_100AD23  +
cmp [ebp+ExitCode] 103h +
jz loc_100AD45  +
push dword ptr [esi]  +
call ds:CloseHandle  +
mov eax dword_1015794 +
mov ecx dword_1015794[eax*4] +
dec eax  +
mov dword_1015794 eax +
mov [esi] ecx +
cmp ebx eax +
jz loc_100AD4A  +
jmp loc_100AD0A  +
mov eax dword_1015794 +
inc ebx  +
add esi 4 +
cmp ebx eax +
jb loc_100AD0A  +
pop esi  +
test eax eax +
jnz loc_100AD5C  +
xor eax eax +
inc eax  +
jmp loc_100AD79  +
push 0  +
push 0FA0h  +
push 0  +
push edi  +
push eax  +
call ds:WaitForMultipleObjectsEx  +
xor ecx ecx +
cmp eax 102h +
setnz cl  +
mov eax ecx +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100ADB1  +
test byte ptr [eax+1Ch] 2 +
jz loc_100ADB1  +
cmp byte ptr [eax+19h] 5 +
jb loc_100ADB1  +
push offset dword_10025AC  +
push 5Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push ebx  +
mov ebx [ebp+hKey] +
push esi  +
xor esi esi +
inc esi  +
cmp dword_10150FC 0 +
push edi  +
mov edi [ebp+arg_0] +
jz loc_100AE07  +
call sub_100EC21  +
lea eax [ebp+hKey] +
push eax  +
push 2001Bh  +
push 0  +
push offset aSystemSetup  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100AE01  +
push offset aSetupshutdownr  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov [edi] esi +
mov [ebx] esi +
jmp loc_100AE23  +
cmp dword_10150F8 2 +
jnz loc_100AE23  +
call sub_100EC21  +
push ebx  +
call sub_100E5FE  +
neg eax  +
sbb eax eax +
neg eax  +
mov [edi] eax +
cmp dword ptr [edi] 0 +
jnz loc_100AE35  +
call sub_100E688  +
cmp eax esi +
jnz loc_100AE35  +
mov [edi] esi +
mov [ebx] esi +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
push 6  +
push dword ptr [ebp+8]  +
call sub_100E2D4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov eax Reserved +
mov esi offset Reserved +
mov edi offset dword_10025AC +
cmp eax esi +
jz loc_100AE96  +
test byte ptr [eax+1Ch] 8 +
jz loc_100AE96  +
cmp byte ptr [eax+19h] 4 +
jb loc_100AE96  +
push dword ptr [ebp+Data]  +
push edi  +
push 62h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
push 0  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov ebx eax +
test ebx ebx +
jnz loc_100AEDB  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push offset aShutdownflags  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
mov ebx eax +
call ds:RegCloseKey  +
jmp loc_100AEFF  +
mov eax Reserved +
cmp eax esi +
jz loc_100AEFF  +
test byte ptr [eax+1Ch] 8 +
jz loc_100AEFF  +
cmp byte ptr [eax+19h] 3 +
jb loc_100AEFF  +
push ebx  +
push edi  +
push 63h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov eax hhk +
test eax eax +
jz locret_100AF7A  +
push eax  +
call ds:UnhookWindowsHookEx  +
test eax eax +
jnz loc_100AF73  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100AF73  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AF73  +
cmp byte ptr [eax+19h] 2 +
jb loc_100AF73  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset dword_10025AC  +
push 6Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
and hhk 0 +
retn   +
***
mov eax dword_10150D0 +
test eax eax +
jz locret_100AF97  +
push eax  +
call ds:HeapDestroy  +
and dword_10150D0 0 +
retn   +
***
mov ecx dword_1015218 +
mov edx dword_101521C +
push esi  +
mov esi ecx +
xor eax eax +
or esi edx +
pop esi  +
jz locret_100AFC9  +
push edx  +
push ecx  +
call ds:EtwEventUnregister  +
and dword_1015218 0 +
and dword_101521C 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1015218 +
mov ecx dword_101521C +
mov edx eax +
or edx ecx +
jz loc_100B011  +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_100B011  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword_101521C  +
push dword_1015218  +
call ds:EtwEventWrite  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1015218 +
mov ecx dword_101521C +
mov edx eax +
sub esp 10h +
or edx ecx +
jz locret_100B072  +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz locret_100B072  +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+arg_4] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_0]  +
mov [ebp+var_8] 4 +
push dword_101521C  +
push dword_1015218  +
call ds:EtwEventWrite  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push 1  +
push esi  +
call ds:CreateEventW  +
mov [ebp+hHandle] eax +
mov ebx offset dword_10025AC +
cmp eax esi +
jnz loc_100B0D4  +
or [ebp+hHandle] 0FFFFFFFFh +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B0D4  +
test byte ptr [eax+1Ch] 8 +
jz loc_100B0D4  +
cmp byte ptr [eax+19h] 5 +
jb loc_100B0D4  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push ebx  +
push 4Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov edi offset dword_1015618 +
mov [ebp+var_8] 6 +
cmp dword ptr [edi] 0 +
jz loc_100B1A1  +
mov esi [ebp+hHandle] +
cmp esi 0FFFFFFFFh +
jz loc_100B0F8  +
push esi  +
call ds:ResetEvent  +
mov eax [edi] +
push esi  +
push dword ptr [eax+8]  +
call ds:RtlDeregisterWaitEx  +
cmp eax 103h +
jnz loc_100B1E7  +
cmp esi 0FFFFFFFFh +
jz loc_100B1B2  +
push 1  +
push 1D4C0h  +
push [ebp+hHandle]  +
call ds:WaitForSingleObjectEx  +
mov esi eax +
cmp esi 0C0h +
jz loc_100B118  +
test esi esi +
jz loc_100B1F3  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100B175  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100B175  +
cmp byte ptr [ecx+19h] 5 +
jb loc_100B175  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push esi  +
push ebx  +
push 4Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
mov ecx Reserved +
mov eax 0C0000001h +
cmp ecx offset Reserved +
jz loc_100B1A1  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100B1A1  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100B1A1  +
push eax  +
mov eax [edi] +
push dword ptr [eax]  +
push ebx  +
push 52h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100ABE1  +
add edi 4 +
dec [ebp+var_8]  +
jnz loc_100B0E0  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100B1E0  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100B1E0  +
cmp byte ptr [ecx+19h] 5 +
jb loc_100B1E0  +
push ebx  +
push 50h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10015B6  +
mov ecx Reserved +
mov eax 0C0000001h +
jmp loc_100B1ED  +
mov ecx Reserved +
test eax eax +
jge loc_100B1F9  +
jmp loc_100B17A  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100B21F  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100B21F  +
cmp byte ptr [ecx+19h] 5 +
jb loc_100B21F  +
mov eax [edi] +
push dword ptr [eax]  +
push ebx  +
push 51h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100375D  +
mov eax [edi] +
cmp dword ptr [eax] 0 +
jz loc_100B22C  +
push eax  +
call sub_100575D  +
mov eax [edi] +
push dword ptr [eax+4]  +
call ds:CloseHandle  +
push edi  +
call sub_100575D  +
jmp loc_100B1A1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push dword ptr [ebp+Data]  +
xor ebx ebx +
call sub_100AE5D  +
mov eax Reserved +
mov esi offset Reserved +
mov edi offset dword_10025AC +
cmp eax esi +
jz loc_100B286  +
test byte ptr [eax+1Ch] 8 +
jz loc_100B286  +
cmp byte ptr [eax+19h] 5 +
jb loc_100B286  +
push edi  +
push 5Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 20h  +
push 6  +
push 3E8h  +
call sub_100E301  +
test dword ptr [ebp+Data] 100h +
jnz loc_100B2D5  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 0Fh  +
call I_ScSendTSMessage  +
mov ebx eax +
test ebx ebx +
jz loc_100B2D5  +
mov eax Reserved +
cmp eax esi +
jz loc_100B2D3  +
test byte ptr [eax+1Ch] 8 +
jz loc_100B2D3  +
cmp byte ptr [eax+19h] 2 +
jb loc_100B2D3  +
push ebx  +
push edi  +
push 5Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov eax Reserved +
mov edi offset Reserved +
cmp eax edi +
jz loc_100B319  +
test byte ptr [eax+1Ch] 8 +
jz loc_100B319  +
cmp byte ptr [eax+19h] 5 +
jb loc_100B319  +
push offset dword_10025AC  +
push 5Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 80000001h  +
call ds:SetThreadExecutionState  +
push 1  +
push 13h  +
call sub_1012131  +
push 20h  +
push 6  +
push 3E9h  +
call sub_100E301  +
cmp [ebp+arg_0] 1 +
push 15h  +
pop ebx  +
jnz loc_100B348  +
push 17h  +
jmp loc_100B350  +
cmp [ebp+arg_0] 2 +
jnz loc_100B351  +
push 1Dh  +
pop ebx  +
push ebx  +
push offset dword_100B4B0  +
call sub_100B01A  +
xor esi esi +
push esi  +
push ebx  +
call ds:ExitWindowsEx  +
test eax eax +
jnz loc_100B372  +
call ds:__imp_GetLastError  +
mov esi eax +
push esi  +
push offset dword_100B4C0  +
call sub_100B01A  +
mov eax Reserved +
cmp eax edi +
jz loc_100B3A5  +
test byte ptr [eax+1Ch] 8 +
jz loc_100B3A5  +
cmp byte ptr [eax+19h] 5 +
jb loc_100B3A5  +
push esi  +
push offset dword_10025AC  +
push 60h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
test esi esi +
jz loc_100B3C6  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
push 8  +
push 0C0000BBDh  +
push 1  +
mov [ebp+var_8] esi +
mov [ebp+var_4] ebx +
call sub_100E37B  +
add esp 14h +
push offset dword_100B470  +
call sub_100AFD3  +
call sub_100ACEF  +
push offset dword_100B480  +
call sub_100AFD3  +
push offset dword_100B490  +
call sub_100AFD3  +
push offset loc_100AE43  +
call sub_100FB37  +
push offset dword_100B4A0  +
call sub_100AFD3  +
push 10h  +
push 6  +
push 3EAh  +
call sub_100E301  +
call sub_100AF80  +
call sub_100ACAA  +
mov eax Reserved +
cmp eax edi +
jz loc_100B43F  +
test byte ptr [eax+1Ch] 8 +
jz loc_100B43F  +
cmp byte ptr [eax+19h] 4 +
jb loc_100B43F  +
push [ebp+arg_0]  +
push offset dword_10025AC  +
push 61h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push offset dword_100B4D0  +
call sub_100AFD3  +
push [ebp+arg_0]  +
call ds:NtShutdownSystem  +
push 0  +
push 13h  +
call sub_1012131  +
push 0FFFFFFFFh  +
call ds:Sleep  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_100B500  +
cmp edx 7FFFFFFFh +
jbe loc_100B502  +
mov eax ecx +
test eax eax +
jl loc_100B52B  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_100B51B  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_100B52B  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1001881  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 634h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 36h  +
pop ecx  +
mov esi offset aTheSystemProce +
lea edi [ebp-61Ch] +
movs   +
push 12Eh  +
lea eax [ebp-542h] +
push 0  +
push eax  +
movs   +
call memset  +
push 1Bh  +
pop ecx  +
mov esi offset aACriticalSyste +
lea edi [ebp-20Ch] +
movs   +
movs   +
push 19Ah  +
xor edi edi +
lea eax [ebp-19Eh] +
push edi  +
push eax  +
call memset  +
add esp 18h +
mov [ebp-620h] edi +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100B5CF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B5CF  +
cmp byte ptr [eax+19h] 1 +
jb loc_100B5CF  +
push dword ptr [ebx]  +
push offset dword_10025AC  +
push 4Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100375D  +
cmp dword_1015898 edi +
jnz loc_100B710  +
cmp dword_10150FC edi +
jnz loc_100B710  +
mov eax [ebx+10h] +
mov dword_1015600[eax*4] edi +
lea eax [ebp-620h] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetExitCodeProcess  +
mov esi 104h +
cmp dword_1015600 edi +
jz loc_100B650  +
cmp [ebp-620h] edi +
mov eax offset aD +
jg loc_100B620  +
mov eax offset a08x +
push dword ptr [ebp-620h]  +
push eax  +
lea eax [ebp-414h] +
push esi  +
push eax  +
call sub_1002691  +
lea eax [ebp-414h] +
push eax  +
push dword ptr [ebx]  +
push 2  +
push edi  +
push edi  +
push 0C00003F7h  +
push 1  +
call sub_100E37B  +
add esp 2Ch +
push 0BB8h  +
call sub_100DFFE  +
mov [ebp-624h] eax +
cmp eax edi +
jz loc_100B683  +
push 103h  +
push eax  +
push esi  +
lea eax [ebp-61Ch] +
push eax  +
call sub_100B4E5  +
lea eax [ebp-624h] +
push eax  +
call sub_100575D  +
push dword ptr [ebp-620h]  +
lea eax [ebp-61Ch] +
push dword ptr [ebx]  +
push eax  +
lea eax [ebp-414h] +
push esi  +
push eax  +
call sub_1002691  +
mov ebx ds:RtlInitUnicodeString +
add esp 14h +
lea eax [ebp-414h] +
push eax  +
lea eax [ebp-62Ch] +
push eax  +
call ebx  +
push 0BB9h  +
call sub_100DFFE  +
mov [ebp-624h] eax +
cmp eax edi +
jz loc_100B6E6  +
push eax  +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
call sub_1001845  +
lea eax [ebp-624h] +
push eax  +
call sub_100575D  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-634h] +
push eax  +
call ebx  +
push 50006h  +
push 3Ch  +
lea eax [ebp-634h] +
push eax  +
lea eax [ebp-62Ch] +
push eax  +
call sub_100BDB3  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_10015A4  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ebp+0Ch] 0 +
jnz loc_100B8CD  +
push esi  +
mov esi [ebp+8] +
push 1  +
lea eax [esi+0Ch] +
push eax  +
call ds:InterlockedExchange  +
cmp eax 1 +
jz loc_100B8CC  +
lea eax [ebp+0Ch] +
push eax  +
push 0  +
push esi  +
push offset loc_100B534  +
push 0  +
push 0  +
call ds:CreateThread  +
test eax eax +
jnz loc_100B8C5  +
push 1  +
push 7Dh  +
call ds:SleepEx  +
jmp loc_100B89F  +
***
push eax  +
call ds:CloseHandle  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_100B942  +
cmp word ptr [edx] 0 +
jnz loc_100B926  +
mov [ebp+arg_14] 0Eh +
jmp loc_100B949  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B92B  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_14] eax +
jmp loc_100B949  +
mov [ebp+arg_14] 0Ah +
mov ebx offset aNull +
test edx edx +
jz loc_100B95F  +
cmp word ptr [edx] 0 +
jnz loc_100B961  +
mov edx offset aNull_1 +
jmp loc_100B961  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_100B98B  +
cmp word ptr [edi] 0 +
jnz loc_100B972  +
push 0Eh  +
jmp loc_100B98D  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B977  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_100B98E  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_100B9A3  +
cmp word ptr [edi] 0 +
jnz loc_100B99F  +
mov eax offset aNull_1 +
jmp loc_100B9A5  +
mov eax edi +
jmp loc_100B9A5  +
mov eax ebx +
push 0  +
push [ebp+arg_14]  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_100B9ED  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B9E1  +
sub eax edx +
inc eax  +
jmp loc_100B9F0  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_100B9FB  +
mov ecx offset aNull_0 +
push 0  +
push 4  +
lea edx [ebp+arg_18] +
push edx  +
push 4  +
lea edx [ebp+arg_14] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop esi  +
pop ebp  +
retn 1Ch  +
***
cmp dword_10150E0 0 +
push ebx  +
mov ebx ds:RpcServerUnregisterIf +
push esi  +
push edi  +
mov edi offset Reserved +
mov esi offset loc_1002214 +
jz loc_100BAA8  +
push 1  +
push 0  +
push off_10156E8  +
call ebx  +
test eax eax +
jz loc_100BA7E  +
mov ecx Reserved +
cmp ecx edi +
jz loc_100BAA8  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100BAA8  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100BAA8  +
push eax  +
push esi  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_100BAA8  +
mov eax Reserved +
cmp eax edi +
jz loc_100BAA1  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BAA1  +
cmp byte ptr [eax+19h] 4 +
jb loc_100BAA1  +
push esi  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
and dword_10150E0 0 +
mov eax BindingVector +
test eax eax +
jz loc_100BB50  +
push offset UuidVector  +
push eax  +
push IfSpec  +
call ds:RpcEpUnregister  +
test eax eax +
jz loc_100BAF2  +
mov ecx Reserved +
cmp ecx edi +
jz loc_100BB15  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100BB15  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100BB15  +
push eax  +
push esi  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_100BB15  +
mov eax Reserved +
cmp eax edi +
jz loc_100BB15  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BB15  +
cmp byte ptr [eax+19h] 4 +
jb loc_100BB15  +
push esi  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push offset BindingVector  +
call ds:RpcBindingVectorFree  +
test eax eax +
jz loc_100BB49  +
mov ecx Reserved +
cmp ecx edi +
jz loc_100BB49  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100BB49  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100BB49  +
push eax  +
push esi  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
and BindingVector 0 +
cmp dword_10150DC 0 +
jz loc_100BBBA  +
push 1  +
push 0  +
push IfSpec  +
call ebx  +
test eax eax +
jz loc_100BB90  +
mov ecx Reserved +
cmp ecx edi +
jz loc_100BBBA  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100BBBA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100BBBA  +
push eax  +
push esi  +
push 19h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_100BBBA  +
mov eax Reserved +
cmp eax edi +
jz loc_100BBB3  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BBB3  +
cmp byte ptr [eax+19h] 4 +
jb loc_100BBB3  +
push esi  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
and dword_10150DC 0 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_1015184 +
push esi  +
xor ebx ebx +
xor edi edi +
call ds:RtlEnterCriticalSection  +
test eax eax +
jl loc_100BBE0  +
inc edi  +
cmp dword_10158A4 2 +
jl loc_100BBFB  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100BBF8  +
mov ecx dword_10158A8 +
mov [eax] ecx +
xor ebx ebx +
inc ebx  +
test edi edi +
jz loc_100BC06  +
push esi  +
call ds:RtlLeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
push 18h  +
pop eax  +
push 1Ah  +
mov word ptr [ebp+var_C] ax +
pop eax  +
mov esi 5C000h +
xor edi edi +
push esi  +
mov [ebp+var_4] edi +
mov word ptr [ebp+var_C+2] ax +
mov [ebp+var_8] offset aWinlogon_exe +
call sub_1006A60  +
mov [ebp+var_4] eax +
cmp eax edi +
jz loc_100BD8E  +
push ebx  +
push edi  +
push esi  +
push eax  +
push 5  +
call ds:NtQuerySystemInformation  +
cmp eax edi +
jge loc_100BCF3  +
mov ecx Reserved +
mov ebx offset Reserved +
mov edi offset loc_1002214 +
cmp ecx ebx +
jz loc_100BC91  +
test byte ptr [ecx+1Ch] 20h +
jz loc_100BC91  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100BC91  +
push eax  +
push edi  +
push 58h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
push [ebp+arg_0]  +
push 3Ch  +
push 2  +
push dword ptr ds:7FFE02D8h  +
call sub_1011880  +
test eax eax +
jz loc_100BCD7  +
mov ecx Reserved +
cmp ecx ebx +
jz loc_100BCD7  +
test byte ptr [ecx+1Ch] 20h +
jz loc_100BCD7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100BCD7  +
push eax  +
push dword ptr ds:7FFE02D8h  +
mov eax Reserved +
push edi  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
xor esi esi +
inc esi  +
push [ebp+arg_0]  +
push 3Ch  +
push 2  +
push esi  +
call sub_1011880  +
inc esi  +
cmp esi 64h +
ja loc_100BD84  +
jmp loc_100BCDA  +
mov esi [ebp+var_4] +
cmp [esi] edi +
jz loc_100BD84  +
mov ebx offset Reserved +
mov edi offset loc_1002214 +
push 1  +
lea eax [ebp+var_C] +
push eax  +
lea eax [esi+38h] +
push eax  +
call ds:RtlCompareUnicodeString  +
test eax eax +
jnz loc_100BD7D  +
mov eax Reserved +
cmp eax ebx +
jz loc_100BD42  +
test byte ptr [eax+1Ch] 20h +
jz loc_100BD42  +
cmp byte ptr [eax+19h] 4 +
jb loc_100BD42  +
push dword ptr [esi+50h]  +
push edi  +
push 5Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push [ebp+arg_0]  +
push 3Ch  +
push 2  +
push dword ptr [esi+50h]  +
call sub_1011880  +
test eax eax +
jz loc_100BD7D  +
mov ecx Reserved +
cmp ecx ebx +
jz loc_100BD7D  +
test byte ptr [ecx+1Ch] 20h +
jz loc_100BD7D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100BD7D  +
push eax  +
push dword ptr [esi+50h]  +
push edi  +
push 5Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B8D6  +
add esi [esi] +
cmp dword ptr [esi] 0 +
jnz loc_100BD08  +
lea eax [ebp+var_4] +
push eax  +
call sub_100575D  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
push offset unk_1015184  +
call ds:RtlEnterCriticalSection  +
mov ebx ds:DeleteTimerQueueTimer +
xor esi esi +
inc esi  +
xor edi edi +
mov [ebp+var_8] eax +
cmp dword_10158A4 esi +
jnz loc_100BDE9  +
push edi  +
push dword_101589C  +
push edi  +
call ebx  +
mov eax dword_10158A0 +
cmp eax edi +
jz loc_100BE32  +
push edi  +
push eax  +
push edi  +
call ebx  +
test eax eax +
jnz loc_100BE25  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100BE2A  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BE2A  +
cmp byte ptr [eax+19h] 2 +
jb loc_100BE2A  +
push offset loc_1002214  +
push 5Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax Reserved +
mov dword_10158A0 edi +
jmp loc_100BE37  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100BE5C  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BE5C  +
cmp byte ptr [eax+19h] 5 +
jb loc_100BE5C  +
push offset loc_1002214  +
push 5Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
cmp [ebp+var_8] edi +
mov dword_10158A4 3 +
jl loc_100BE76  +
push offset unk_1015184  +
call ds:RtlLeaveCriticalSection  +
lea eax [ebp+var_4] +
push eax  +
push 2000000h  +
push 0FFFFFFFFh  +
call ds:NtOpenProcessToken  +
cmp eax edi +
jl loc_100BF53  +
push 13h  +
pop eax  +
push esi  +
mov [ebp+var_14] eax +
lea eax [ebp+var_1C] +
push eax  +
push edi  +
push [ebp+var_4]  +
xor ecx ecx +
push edi  +
push offset unk_101517C  +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
mov [ebp+var_10] ecx +
mov [ebp+var_C] edi +
call ds:NtPrivilegeObjectAuditAlarm  +
push [ebp+var_4]  +
mov ebx eax +
call ds:NtClose  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
call sub_100BC14  +
mov eax [ebp+arg_C] +
mov [ebp+var_34] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_3C] 20h +
mov [ebp+var_38] 2 +
mov [ebp+var_30] esi +
cmp eax edi +
jz loc_100BEF4  +
mov eax [eax+4] +
mov [ebp+var_28] eax +
jmp loc_100BEF7  +
mov [ebp+var_28] edi +
lea eax [ebp+var_3C] +
push eax  +
mov [ebp+var_24] edi +
mov [ebp+var_20] edi +
call ds:RecordShutdownReason  +
mov eax [ebp+arg_8] +
imul eax eax +
push eax  +
call ds:Sleep  +
push esi  +
push 13h  +
call sub_1012131  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100BF4A  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BF4A  +
cmp byte ptr [eax+19h] 4 +
jb loc_100BF4A  +
push esi  +
push offset loc_1002214  +
push 5Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push esi  +
call ds:NtShutdownSystem  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push edi  +
call sub_1002F01  +
test eax eax +
jz loc_100BF79  +
xor eax eax +
jmp loc_100C0D0  +
push esi  +
lea eax [ebp+var_28] +
push eax  +
xor esi esi +
inc esi  +
push esi  +
push 0  +
mov [ebp+var_28] 0Ch +
call WinStationGetTermSrvCountersValue  +
test al al +
jz loc_100C097  +
mov ecx [ebp+var_20] +
mov [ebp+var_4] ecx +
mov eax Reserved +
mov edi offset Reserved +
mov ebx offset loc_1002214 +
cmp eax edi +
jz loc_100BFCC  +
test byte ptr [eax+1Ch] 8 +
jz loc_100BFCC  +
cmp byte ptr [eax+19h] 5 +
jb loc_100BFCC  +
push ecx  +
push ebx  +
push 60h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
cmp [ebp+var_4] 0 +
jnz loc_100BFD9  +
xor eax eax +
jmp loc_100C0CF  +
cmp [ebp+arg_0] 0 +
jz loc_100C092  +
mov [ebp+var_C] esi +
mov esi 4C0h +
push esi  +
call sub_1006A60  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_100C05D  +
lea ecx [ebp+var_10] +
push ecx  +
push esi  +
push eax  +
push 8  +
push [ebp+arg_0]  +
push 0  +
call WinStationQueryInformationW  +
test al al +
jz loc_100C04E  +
mov eax [ebp+var_8] +
mov eax [eax] +
and [ebp+var_C] 0 +
cmp eax 4 +
jz loc_100C025  +
test eax eax +
jz loc_100C025  +
cmp eax 3 +
jnz loc_100C04E  +
mov eax Reserved +
cmp eax edi +
jz loc_100C04B  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C04B  +
cmp byte ptr [eax+19h] 5 +
jb loc_100C04B  +
push [ebp+arg_0]  +
push ebx  +
push 61h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
dec [ebp+var_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_100575D  +
cmp [ebp+var_C] 0 +
jz loc_100C092  +
mov eax Reserved +
cmp eax edi +
jz loc_100C08F  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C08F  +
cmp byte ptr [eax+19h] 5 +
jb loc_100C08F  +
call ds:__imp_GetLastError  +
push eax  +
push [ebp+arg_0]  +
mov eax Reserved +
push ebx  +
push 62h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
dec [ebp+var_4]  +
mov eax [ebp+var_4] +
jmp loc_100C0CF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C0CD  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C0CD  +
cmp byte ptr [eax+19h] 2 +
jb loc_100C0CD  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push offset loc_1002214  +
push 5Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov eax esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Binding] +
push eax  +
push [ebp+ClientBinding]  +
xor ebx ebx +
mov [ebp+Binding] ebx +
mov [ebp+String] ebx +
mov [ebp+NetworkAddr] ebx +
call ds:RpcBindingServerFromClient  +
mov edi eax +
cmp edi ebx +
jz loc_100C132  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C1F7  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C1F7  +
cmp byte ptr [eax+19h] 2 +
jb loc_100C1F7  +
push edi  +
push offset loc_1002214  +
push 63h  +
jmp loc_100C1AA  +
lea eax [ebp+String] +
push eax  +
push [ebp+Binding]  +
call ds:RpcBindingToStringBindingW  +
mov edi eax +
cmp edi ebx +
jz loc_100C173  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C1F7  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C1F7  +
cmp byte ptr [eax+19h] 2 +
jb loc_100C1F7  +
push edi  +
push offset loc_1002214  +
push 64h  +
jmp loc_100C1AA  +
push ebx  +
push ebx  +
lea eax [ebp+NetworkAddr] +
push eax  +
push ebx  +
push ebx  +
push [ebp+String]  +
call ds:RpcStringBindingParseW  +
mov edi eax +
cmp edi ebx +
jz loc_100C1B7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C1F7  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C1F7  +
cmp byte ptr [eax+19h] 2 +
jb loc_100C1F7  +
push edi  +
push offset loc_1002214  +
push 65h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100C1F7  +
push [ebp+NetworkAddr]  +
call sub_1006B9B  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp eax ebx +
jnz loc_100C1F7  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C1F2  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C1F2  +
cmp byte ptr [eax+19h] 2 +
jb loc_100C1F2  +
push offset loc_1002214  +
push 66h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov edi 6B9h +
lea eax [ebp+Binding] +
push eax  +
call ds:RpcBindingFree  +
mov esi ds:RpcStringFreeW +
cmp [ebp+String] ebx +
jz loc_100C212  +
lea eax [ebp+String] +
push eax  +
call esi  +
cmp [ebp+NetworkAddr] ebx +
jz loc_100C21D  +
lea eax [ebp+NetworkAddr] +
push eax  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 130h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor edi edi +
push edi  +
push offset aSoftwareMicros  +
push 80000002h  +
mov dword ptr [ebp+Data] edi +
mov [ebp+cbData] 4 +
mov [ebp+hKey] edi +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_100C2E9  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset aShutdownsessio  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
cmp eax edi +
jnz loc_100C2E9  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C2DB  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C2DB  +
cmp byte ptr [eax+19h] 4 +
jb loc_100C2DB  +
push dword ptr [ebp+Data]  +
push offset loc_1002214  +
push 67h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov eax Reserved +
mov esi dword ptr [ebp+Data] +
imul esi esi +
jmp loc_100C32E  +
push 118h  +
lea eax [ebp+VersionInformation.dwMajorVersion] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jz loc_100C324  +
cmp [ebp+var_6] 1 +
mov esi 2BF20h +
jz loc_100C329  +
mov esi 0DBBA0h +
mov eax Reserved +
cmp [ebp+hKey] edi +
jz loc_100C347  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C36D  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C36D  +
cmp byte ptr [eax+19h] 5 +
jb loc_100C36D  +
push esi  +
push offset loc_1002214  +
push 68h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10015A4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
call sub_1002F01  +
test eax eax +
jnz locret_100C54D  +
call sub_1003B35  +
test eax eax +
jnz locret_100C54D  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
mov [ebp+var_4] 1 +
call WinStationSystemShutdownWait  +
mov ebx eax +
mov eax Reserved +
mov esi offset Reserved +
mov edi offset loc_1002214 +
cmp eax esi +
jz loc_100C41C  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C41C  +
cmp byte ptr [eax+19h] 4 +
jb loc_100C41C  +
push [ebp+var_4]  +
push ebx  +
push edi  +
push 69h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
mov eax [ebp+var_4] +
mov [ebp+var_8] eax +
test ebx ebx +
jz loc_100C54A  +
test eax eax +
jz loc_100C4EC  +
lea eax [ebp+var_8] +
push eax  +
push 0EA60h  +
call WinStationSystemShutdownWait  +
mov ebx eax +
mov eax Reserved +
cmp eax esi +
jz loc_100C46E  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C46E  +
cmp byte ptr [eax+19h] 4 +
jb loc_100C46E  +
push [ebp+var_8]  +
push ebx  +
push edi  +
push 6Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
mov eax Reserved +
test ebx ebx +
jz loc_100C54A  +
cmp ebx 102h +
jnz loc_100C4CD  +
mov ecx [ebp+var_8] +
cmp [ebp+var_4] ecx +
jz loc_100C4B7  +
cmp eax esi +
jz loc_100C4AB  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C4AB  +
cmp byte ptr [eax+19h] 4 +
jb loc_100C4AB  +
push ecx  +
push [ebp+var_4]  +
push edi  +
push 6Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
mov ecx [ebp+var_8] +
mov [ebp+var_4] ecx +
test ecx ecx +
jz loc_100C4EC  +
jmp loc_100C432  +
cmp eax esi +
jz loc_100C4EC  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C4EC  +
cmp byte ptr [eax+19h] 4 +
jb loc_100C4EC  +
push ecx  +
push edi  +
push 6Bh  +
jmp loc_100C4E1  +
cmp eax esi +
jz loc_100C4EC  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C4EC  +
cmp byte ptr [eax+19h] 3 +
jb loc_100C4EC  +
push ebx  +
push edi  +
push 6Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
call sub_100C22B  +
mov ebx eax +
mov eax Reserved +
cmp eax esi +
jz loc_100C517  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C517  +
cmp byte ptr [eax+19h] 4 +
jb loc_100C517  +
push ebx  +
push edi  +
push 6Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
call WinStationSystemShutdownWait  +
mov ecx Reserved +
cmp ecx esi +
jz loc_100C54A  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100C54A  +
cmp byte ptr [ecx+19h] 4 +
jb loc_100C54A  +
push [ebp+var_8]  +
push eax  +
push ebx  +
push edi  +
push 6Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100F019  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1015218 +
mov ecx dword_101521C +
mov edx eax +
sub esp 20h +
or edx ecx +
jz locret_100C5BA  +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz locret_100C5BA  +
push 4  +
lea eax [ebp+arg_4] +
mov [ebp+var_20] eax +
pop eax  +
mov [ebp+var_18] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_20] +
push eax  +
push 2  +
push [ebp+arg_0]  +
xor ecx ecx +
push dword_101521C  +
lea edx [ebp+arg_8] +
push dword_1015218  +
mov [ebp+var_1C] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
call ds:EtwEventWrite  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword_1015218 +
mov ecx dword_101521C +
push ebx  +
mov ebx [ebp+arg_4] +
mov edx eax +
or edx ecx +
push esi  +
mov esi [ebp+arg_8] +
jz loc_100C64C  +
push ebx  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_100C64C  +
and [ebp+var_20] 0 +
and [ebp+var_18] 0 +
push edi  +
lea edi [ebp+var_14] +
movs   +
movs   +
lea eax [ebp+arg_C] +
mov [ebp+var_24] eax +
movs   +
lea eax [ebp+var_14] +
push eax  +
push 2  +
mov [ebp+var_1C] 4 +
movs   +
call ds:EtwEventActivityIdControl  +
cmp [ebp+arg_0] 0 +
pop edi  +
lea eax [ebp+var_24] +
push eax  +
push 1  +
push ebx  +
push dword_101521C  +
push dword_1015218  +
jz loc_100C646  +
call ds:EtwEventWriteStartScenario  +
jmp loc_100C64C  +
call ds:EtwEventWriteEndScenario  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push [ebp+BindingHandle]  +
xor ebx ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
call ds:RpcImpersonateClient  +
mov [ebp+BindingHandle] eax +
cmp eax ebx +
jnz loc_100C740  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
xor esi esi +
inc esi  +
push esi  +
push 8  +
push 0FFFFFFFEh  +
mov [ebp+var_C] esi +
call ds:NtOpenThreadToken  +
cmp eax ebx +
jge loc_100C6AF  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp+BindingHandle] eax +
jmp loc_100C73F  +
push edi  +
push 13h  +
pop edi  +
lea eax [ebp+var_10] +
push eax  +
push dword_10151C8  +
push [ebp+var_4]  +
call CheckTokenMembership  +
test eax eax +
jz loc_100C735  +
cmp [ebp+var_10] ebx +
jz loc_100C6D4  +
push 18h  +
pop edi  +
xor ebx ebx +
and [ebp+var_14] 0 +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+var_4]  +
mov [ebp+var_24] esi +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
mov [ebp+var_18] ebx +
call ds:NtPrivilegeCheck  +
test eax eax +
jge loc_100C700  +
cmp eax 0C0000061h +
jnz loc_100C719  +
push [ebp+var_8]  +
lea eax [ebp+var_24] +
push eax  +
push 0  +
push [ebp+var_4]  +
push 0  +
push offset unk_101517C  +
call ds:NtPrivilegeObjectAuditAlarm  +
test eax eax +
jge loc_100C726  +
push eax  +
call ds:RtlNtStatusToDosError  +
jmp loc_100C73B  +
cmp byte ptr [ebp+var_8] 0 +
jnz loc_100C73E  +
mov [ebp+BindingHandle] 5 +
jmp loc_100C73E  +
call ds:__imp_GetLastError  +
mov [ebp+BindingHandle] eax +
pop edi  +
pop esi  +
cmp [ebp+var_4] 0 +
pop ebx  +
jz loc_100C750  +
push [ebp+var_4]  +
call ds:NtClose  +
cmp [ebp+var_C] 0 +
jz loc_100C75C  +
call ds:RpcRevertToSelf  +
mov eax [ebp+BindingHandle] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push 50h  +
lea eax [ebp+var_54] +
push edi  +
push eax  +
mov [ebp+StringBinding] edi +
mov [ebp+String] edi +
mov [ebp+var_58] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+StringBinding] +
push eax  +
push esi  +
call ds:RpcBindingToStringBindingW  +
cmp eax edi +
jz loc_100C7DC  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100C8FA  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100C8FA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100C8FA  +
push eax  +
push offset loc_1002214  +
push 0Ch  +
jmp loc_100C8BE  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+String] +
push eax  +
push edi  +
push [ebp+StringBinding]  +
call ds:RpcStringBindingParseW  +
cmp eax edi +
jz loc_100C824  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100C8FA  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100C8FA  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100C8FA  +
push eax  +
push offset loc_1002214  +
push 0Dh  +
jmp loc_100C8BE  +
mov ebx ds:_wcsicmp +
push offset Protseq  +
push [ebp+String]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C885  +
push offset aNcacn_ip_tcp  +
push [ebp+String]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100C885  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C8FA  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C8FA  +
cmp byte ptr [eax+19h] 2 +
jb loc_100C8FA  +
push [ebp+String]  +
push offset loc_1002214  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100375D  +
jmp loc_100C8FA  +
push 2  +
pop ebx  +
lea eax [ebp+var_58] +
push eax  +
push esi  +
mov [ebp+var_58] ebx +
mov [ebp+var_54] edi +
call ds:RpcServerInqCallAttributesW  +
cmp eax edi +
jz loc_100C8CB  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100C8FA  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100C8FA  +
cmp [ecx+19h] bl +
jb loc_100C8FA  +
push eax  +
push offset loc_1002214  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_100C8FA  +
cmp [ebp+var_40] 6 +
jz loc_100C8FF  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100C8FA  +
test byte ptr [eax+1Ch] 8 +
jz loc_100C8FA  +
cmp [eax+19h] bl +
jb loc_100C8FA  +
push offset loc_1002214  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 5  +
pop ebx  +
jmp loc_100C90A  +
push esi  +
push [ebp+arg_0]  +
call sub_100C661  +
mov ebx eax +
mov esi ds:RpcStringFreeW +
cmp [ebp+String] edi +
jz loc_100C91B  +
lea eax [ebp+String] +
push eax  +
call esi  +
cmp [ebp+StringBinding] edi +
jz loc_100C926  +
lea eax [ebp+StringBinding] +
push eax  +
call esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi offset unk_1015184 +
push esi  +
call ds:RtlEnterCriticalSection  +
test eax eax +
jge loc_100C963  +
push eax  +
call ds:RtlNtStatusToDosError  +
jmp loc_100C96A  +
mov [ebp+var_4] 1 +
cmp dword_10158A4 2 +
jl loc_100C9AE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100CB43  +
test byte ptr [eax+1Ch] 8 +
jz loc_100CB43  +
cmp byte ptr [eax+19h] 3 +
jb loc_100CB43  +
push offset loc_1002214  +
push 4Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_100CB43  +
test [ebp+arg_0] 80000000h +
jnz loc_100C9D1  +
test byte ptr [ebp+arg_0] 0Ch +
jz loc_100C9D1  +
push [ebp+arg_0]  +
push offset dword_100A6E0  +
push offset dword_100A680  +
push 1  +
call sub_100C5C3  +
push ebx  +
push edi  +
push dword_10150E8  +
call ds:SetEvent  +
mov [ebp+var_8] eax +
mov ebx offset loc_1002214 +
test eax eax +
jnz loc_100CA23  +
call ds:__imp_GetLastError  +
mov ecx Reserved +
mov edi offset Reserved +
cmp ecx edi +
jz loc_100CA64  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100CA64  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100CA64  +
push eax  +
push ebx  +
push 4Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
mov ecx Reserved +
jmp loc_100CA64  +
mov ecx Reserved +
mov edi offset Reserved +
cmp ecx edi +
jz loc_100CA52  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100CA52  +
cmp byte ptr [ecx+19h] 5 +
jb loc_100CA52  +
push ebx  +
push 50h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10015B6  +
mov ecx Reserved +
mov eax [ebp+arg_0] +
mov dword_10158A4 2 +
mov dword_10158A8 eax +
cmp [ebp+var_4] 0 +
jz loc_100CA7B  +
push esi  +
call ds:RtlLeaveCriticalSection  +
and [ebp+var_4] 0 +
mov ecx Reserved +
cmp [ebp+var_8] 0 +
jz loc_100CB41  +
cmp ecx edi +
jz loc_100CAA3  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100CAA3  +
cmp byte ptr [ecx+19h] 4 +
jb loc_100CAA3  +
push ebx  +
push 51h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10015B6  +
call WinStationSystemShutdownStarted  +
test eax eax +
jz loc_100CAD1  +
mov ecx Reserved +
cmp ecx edi +
jz loc_100CAD7  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100CAD7  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100CAD7  +
push eax  +
push ebx  +
push 52h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
mov ecx Reserved +
mov al byte ptr [ebp+arg_0] +
xor esi esi +
inc esi  +
test al 4 +
jz loc_100CAE5  +
push 3  +
jmp loc_100CAEB  +
test al 8 +
jz loc_100CAEC  +
push 9  +
pop esi  +
test al al +
jns loc_100CAF3  +
or esi 40h +
test al 40h +
jz loc_100CAFD  +
or esi 100000h +
cmp ecx edi +
jz loc_100CB1B  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100CB1B  +
cmp byte ptr [ecx+19h] 5 +
jb loc_100CB1B  +
push ebx  +
push 53h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10015B6  +
or esi 20004h +
push esi  +
push 0  +
push offset dword_100A670  +
call sub_100C554  +
lea eax [ebp+arg_0] +
push eax  +
push 0  +
push esi  +
push 1  +
call sub_100F699  +
mov esi offset unk_1015184 +
pop edi  +
pop ebx  +
cmp [ebp+var_4] 0 +
jz loc_100CB50  +
push esi  +
call ds:RtlLeaveCriticalSection  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetTimeFormatW +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpDate]  +
mov esi 800h +
push ebx  +
push esi  +
mov [ebp+var_8] ebx +
mov dword ptr [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
call edi  +
mov [ebp+cchDate] eax +
cmp eax ebx +
jnz loc_100CBC3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100CD18  +
test byte ptr [eax+1Ch] 8 +
jz loc_100CD18  +
cmp byte ptr [eax+19h] 2 +
jb loc_100CD18  +
call ds:__imp_GetLastError  +
push eax  +
push offset loc_1002214  +
push 48h  +
jmp loc_100CCB3  +
add eax eax +
push eax  +
call sub_1006A60  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_100CD18  +
push [ebp+cchDate]  +
push eax  +
push ebx  +
push [ebp+lpDate]  +
push ebx  +
push esi  +
call edi  +
test eax eax +
jnz loc_100CC1D  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100CD18  +
test byte ptr [eax+1Ch] 8 +
jz loc_100CD18  +
cmp byte ptr [eax+19h] 2 +
jb loc_100CD18  +
call ds:__imp_GetLastError  +
push eax  +
push offset loc_1002214  +
push 49h  +
jmp loc_100CCB3  +
mov edi ds:GetDateFormatW +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpDate]  +
push 2  +
push esi  +
call edi  +
mov [ebp+cchDate] eax +
cmp eax ebx +
jnz loc_100CC69  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100CD18  +
test byte ptr [eax+1Ch] 8 +
jz loc_100CD18  +
cmp byte ptr [eax+19h] 2 +
jb loc_100CD18  +
call ds:__imp_GetLastError  +
push eax  +
push offset loc_1002214  +
push 4Ah  +
jmp loc_100CCB3  +
add eax eax +
push eax  +
call sub_1006A60  +
mov dword ptr [ebp+var_4] eax +
cmp eax ebx +
jz loc_100CD26  +
push [ebp+cchDate]  +
push eax  +
push ebx  +
push [ebp+lpDate]  +
push 2  +
push esi  +
call edi  +
test eax eax +
jnz loc_100CCC5  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100CD18  +
test byte ptr [eax+1Ch] 8 +
jz loc_100CD18  +
cmp byte ptr [eax+19h] 2 +
jb loc_100CD18  +
call ds:__imp_GetLastError  +
push eax  +
push offset loc_1002214  +
push 4Bh  +
mov eax Reserved +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100CD18  +
mov eax dword ptr [ebp+var_4] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100CCCB  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax [ebp+var_8] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_100CCE1  +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx+2] +
lea eax [esi+esi] +
push eax  +
call sub_1006A60  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_100CD18  +
push [ebp+var_8]  +
push dword ptr [ebp+var_4]  +
push offset aSS  +
push esi  +
push eax  +
call sub_1002691  +
add esp 14h +
cmp dword ptr [ebp+var_4] ebx +
jz loc_100CD26  +
lea eax [ebp+var_4] +
push eax  +
call sub_100575D  +
cmp [ebp+var_8] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100CD37  +
lea eax [ebp+var_8] +
push eax  +
call sub_100575D  +
mov eax [ebp+var_10] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
or ebx 0FFFFFFFFh +
push esi  +
push edi  +
mov [ebp+var_218] eax +
cmp eax ebx +
jz loc_100CD82  +
push 3Ch  +
xor edx edx +
pop ecx  +
div  ecx +
mov ebx eax +
and [ebp+var_210] 0 +
mov eax Reserved +
mov esi offset Reserved +
mov edi offset loc_1002214 +
cmp eax esi +
jz loc_100CDB7  +
test byte ptr [eax+1Ch] 8 +
jz loc_100CDB7  +
cmp byte ptr [eax+19h] 4 +
jb loc_100CDB7  +
push ebx  +
push edi  +
push 4Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
cmp ebx 0FFFFFFFFh +
jnz loc_100CDC3  +
push 0FA1h  +
jmp loc_100CDD8  +
test ebx ebx +
jnz loc_100CDCE  +
push 0FA2h  +
jmp loc_100CDD8  +
cmp ebx 1 +
jnz loc_100CE02  +
push 0FA3h  +
call sub_100DFFE  +
mov [ebp+var_210] eax +
test eax eax +
jz loc_100CF1B  +
push eax  +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
call sub_1001845  +
jmp loc_100CEF2  +
and [ebp+var_214] 0 +
push 0FA0h  +
call sub_100DFFE  +
mov [ebp+var_210] eax +
test eax eax +
jz loc_100CF1B  +
lea eax [ebp+Date] +
push eax  +
call ds:GetLocalTime  +
lea eax [ebp+FileTime] +
push eax  +
lea eax [ebp+Date] +
push eax  +
call ds:SystemTimeToFileTime  +
test eax eax +
jz loc_100CEB2  +
mov eax [ebp+var_218] +
mov ecx 989680h +
mul  ecx +
add [ebp+FileTime.dwLowDateTime] eax +
lea eax [ebp+Date] +
push eax  +
adc [ebp+FileTime.dwHighDateTime] edx +
lea eax [ebp+FileTime] +
push eax  +
call ds:FileTimeToSystemTime  +
test eax eax +
jz loc_100CEB2  +
lea eax [ebp+Date] +
push eax  +
call sub_100CB5A  +
mov [ebp+var_214] eax +
mov eax Reserved +
cmp eax esi +
jz loc_100CEB2  +
test byte ptr [eax+1Ch] 8 +
jz loc_100CEB2  +
cmp byte ptr [eax+19h] 4 +
jb loc_100CEB2  +
push [ebp+var_214]  +
push edi  +
push 4Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100375D  +
mov eax [ebp+var_214] +
test eax eax +
jnz loc_100CEC1  +
mov eax offset dword_100369C +
push eax  +
push ebx  +
push [ebp+var_210]  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_1002691  +
add esp 14h +
cmp [ebp+var_214] 0 +
jz loc_100CEF2  +
lea eax [ebp+var_214] +
push eax  +
call sub_100575D  +
lea eax [ebp+var_210] +
push eax  +
call sub_100575D  +
lea eax [ebp+var_224] +
push eax  +
push 0  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_218]  +
push 2  +
call sub_100F873  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax [ebp+arg_4] +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp eax esi +
jz loc_100CF4E  +
mov eax [eax+4] +
mov [ebp+arg_4] eax +
jmp loc_100CF51  +
mov [ebp+arg_4] esi +
push offset unk_1015184  +
call ds:RtlEnterCriticalSection  +
cmp eax esi +
jge loc_100CF6F  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp+arg_4] eax +
jmp loc_100D106  +
mov eax dword_10158A4 +
cmp eax esi +
jz loc_100D0F4  +
cmp eax 1 +
jz loc_100CF9C  +
jle loc_100D0F4  +
cmp eax 3 +
jg loc_100D0F4  +
mov [ebp+arg_4] 45Bh +
jmp loc_100D0FB  +
or [ebp+var_1C] 0FFFFFFFFh +
push ebx  +
push edi  +
push esi  +
mov [ebp+var_24] 20h +
mov [ebp+var_20] 80h +
mov [ebp+var_18] 2 +
mov [ebp+var_10] esi +
call ds:RpcImpersonateClient  +
mov ebx offset Reserved +
mov edi offset loc_1002214 +
test eax eax +
jnz loc_100D02E  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+ClientBinding]  +
call sub_100C0DB  +
mov eax Reserved +
cmp eax ebx +
jz loc_100D004  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D004  +
cmp byte ptr [eax+19h] 5 +
jb loc_100D004  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push edi  +
push 54h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B908  +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
mov [ebp+var_8] eax +
lea eax [ebp+var_24] +
push eax  +
call ds:RecordShutdownReason  +
call ds:RpcRevertToSelf  +
cmp [ebp+var_4] esi +
jz loc_100D02E  +
lea eax [ebp+var_4] +
push eax  +
call sub_100575D  +
push esi  +
push dword_101589C  +
push esi  +
mov esi ds:DeleteTimerQueueTimer +
call esi  +
test eax eax +
jnz loc_100D052  +
call ds:__imp_GetLastError  +
mov [ebp+arg_4] eax +
mov eax Reserved +
jmp loc_100D085  +
mov eax Reserved +
cmp eax ebx +
jz loc_100D07A  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D07A  +
cmp byte ptr [eax+19h] 5 +
jb loc_100D07A  +
push edi  +
push 55h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax Reserved +
and dword_10158A4 0 +
and [ebp+arg_4] 0 +
mov ecx dword_10158A0 +
test ecx ecx +
jz loc_100D0C9  +
push 0  +
push ecx  +
push 0  +
call esi  +
test eax eax +
jnz loc_100D0BD  +
mov eax Reserved +
cmp eax ebx +
jz loc_100D0C2  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D0C2  +
cmp byte ptr [eax+19h] 2 +
jb loc_100D0C2  +
push edi  +
push 56h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax Reserved +
and dword_10158A0 0 +
cmp eax ebx +
jz loc_100D0E7  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D0E7  +
cmp byte ptr [eax+19h] 4 +
jb loc_100D0E7  +
push edi  +
push 57h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 0  +
push 0FFFFFFFFh  +
call sub_100CD51  +
pop edi  +
pop ebx  +
jmp loc_100D0FB  +
mov [ebp+arg_4] 45Ch +
push offset unk_1015184  +
call ds:RtlLeaveCriticalSection  +
mov eax [ebp+arg_4] +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax [ebp+arg_14] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_18] eax +
mov [ebp+var_10] esi +
mov [ebp+var_14] esi +
mov [ebp+hObject] esi +
mov ebx offset loc_1002214 +
mov ecx offset Reserved +
cmp [ebp+arg_8] esi +
jz loc_100D17C  +
test al 2 +
jz loc_100D17C  +
push 57h  +
pop esi  +
mov eax Reserved +
cmp eax ecx +
jz loc_100DC60  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DC3E  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DC3E  +
push ebx  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_100DBFE  +
test al al +
jns loc_100D1AD  +
test al 18h +
jz loc_100D1AD  +
push 57h  +
pop esi  +
mov eax Reserved +
cmp eax ecx +
jz loc_100DC60  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DC3E  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DC3E  +
push ebx  +
push 2Ah  +
jmp loc_100D16C  +
cmp [ebp+arg_8] esi +
jnz loc_100D455  +
cmp [ebp+hToken] esi +
jnz loc_100D1F2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D426  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D426  +
cmp byte ptr [eax+19h] 4 +
jb loc_100D426  +
push ebx  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_100D426  +
lea eax [ebp+hObject] +
push eax  +
push [ebp+arg_0]  +
call WTSQueryUserToken  +
test eax eax +
jnz loc_100D27C  +
mov esi ds:__imp_GetLastError +
call esi  +
cmp eax 3F0h +
jz loc_100D24D  +
call esi  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC03  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DC03  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DC03  +
push esi  +
push ebx  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100DBFE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D426  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D426  +
cmp byte ptr [eax+19h] 4 +
jb loc_100D426  +
push [ebp+arg_0]  +
push ebx  +
push 2Dh  +
jmp loc_100D41B  +
mov esi ds:NtQueryInformationToken +
lea eax [ebp+dwBytes] +
push eax  +
push 0  +
push 0  +
push 1  +
push [ebp+hObject]  +
call esi  +
mov edi 0C0000023h +
mov [ebp+var_4] eax +
cmp eax edi +
jz loc_100D2D5  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC03  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DC03  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DC03  +
push [ebp+var_4]  +
push ebx  +
push 2Eh  +
jmp loc_100D23D  +
push [ebp+dwBytes]  +
call sub_1006A60  +
mov [ebp+var_10] eax +
test eax eax +
jnz loc_100D2EC  +
push 0Eh  +
pop esi  +
jmp loc_100DBFE  +
lea ecx [ebp+dwBytes] +
push ecx  +
push [ebp+dwBytes]  +
push eax  +
push 1  +
push [ebp+hObject]  +
call esi  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_100D33A  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC03  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DC03  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DC03  +
push [ebp+var_4]  +
push ebx  +
push 2Fh  +
jmp loc_100D23D  +
lea eax [ebp+dwBytes] +
push eax  +
push 0  +
push 0  +
push 1  +
push [ebp+hToken]  +
call esi  +
mov [ebp+var_4] eax +
cmp eax edi +
jz loc_100D388  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC03  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DC03  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DC03  +
push [ebp+var_4]  +
push ebx  +
push 30h  +
jmp loc_100D23D  +
push [ebp+dwBytes]  +
call sub_1006A60  +
mov [ebp+var_14] eax +
test eax eax +
jz loc_100D2E4  +
lea ecx [ebp+dwBytes] +
push ecx  +
push [ebp+dwBytes]  +
push eax  +
push 1  +
push [ebp+hToken]  +
call esi  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_100D3E9  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov esi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC03  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DC03  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DC03  +
push [ebp+var_4]  +
push ebx  +
push 31h  +
jmp loc_100D23D  +
mov eax [ebp+var_10] +
push dword ptr [eax]  +
mov eax [ebp+var_14] +
push dword ptr [eax]  +
call EqualSid  +
test eax eax +
jnz loc_100D42C  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D426  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D426  +
cmp byte ptr [eax+19h] 4 +
jb loc_100D426  +
push [ebp+arg_0]  +
push ebx  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
or [ebp+arg_14] 2 +
jmp loc_100D455  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D455  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D455  +
cmp byte ptr [eax+19h] 4 +
jb loc_100D455  +
push [ebp+arg_0]  +
push ebx  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push offset unk_1015184  +
call ds:RtlEnterCriticalSection  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_100D475  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov esi eax +
jmp loc_100DBFE  +
cmp dword_10158A4 2 +
jl loc_100D48A  +
mov [ebp+arg_20] 45Bh +
jmp loc_100DBE8  +
mov eax dword_1015218 +
mov ecx dword_101521C +
mov edi [ebp+arg_C] +
mov edx eax +
or edx ecx +
jz loc_100D572  +
mov esi offset dword_100DC70 +
push esi  +
push ecx  +
push eax  +
call ds:EtwEventEnabled  +
test al al +
jz loc_100D572  +
xor edx edx +
mov ecx offset dword_100369C +
cmp edi edx +
jz loc_100D4D1  +
mov eax [edi+4] +
cmp eax edx +
jz loc_100D4D1  +
cmp [edi] dx +
jbe loc_100D4D1  +
mov ecx eax +
lea edi [ebp+arg_8] +
mov [ebp+var_88] edi +
lea eax [ebp+arg_0] +
lea edi [ebp+arg_10] +
mov [ebp+var_98] eax +
push 4  +
pop eax  +
mov [ebp+var_78] edi +
lea edi [ebp+arg_14] +
mov [ebp+var_90] eax +
mov [ebp+var_80] eax +
mov [ebp+var_70] eax +
mov [ebp+var_68] edi +
mov [ebp+var_60] eax +
mov [ebp+var_50] eax +
lea edi [ebp+arg_18] +
mov eax ecx +
mov [ebp+var_94] edx +
mov [ebp+var_8C] edx +
mov [ebp+var_84] edx +
mov [ebp+var_7C] edx +
mov [ebp+var_74] edx +
mov [ebp+var_6C] edx +
mov [ebp+var_64] edx +
mov [ebp+var_5C] edx +
mov [ebp+var_54] edx +
mov [ebp+var_4C] edx +
mov [ebp+var_58] edi +
lea edx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
test di di +
jnz loc_100D536  +
and [ebp+var_44] 0 +
and [ebp+var_3C] 0 +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+var_40] eax +
lea eax [ebp+var_98] +
push eax  +
push 6  +
push esi  +
push dword_101521C  +
mov [ebp+var_48] ecx +
push dword_1015218  +
call ds:EtwEventWrite  +
test byte ptr [ebp+arg_14] 1 +
jnz loc_100D5BC  +
push [ebp+arg_0]  +
call sub_100BF5F  +
test eax eax +
jz loc_100D5BC  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100D5B0  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100D5B0  +
cmp byte ptr [ecx+19h] 4 +
jb loc_100D5B0  +
push eax  +
push [ebp+arg_0]  +
push ebx  +
push 34h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B8D6  +
mov [ebp+arg_20] 4A7h +
jmp loc_100DBE8  +
cmp [ebp+arg_0] 0 +
jnz loc_100D5F3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D5ED  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D5ED  +
cmp byte ptr [eax+19h] 3 +
jb loc_100D5ED  +
push ebx  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax Reserved +
or [ebp+arg_14] 2 +
jmp loc_100D5F8  +
mov eax Reserved +
cmp [ebp+arg_10] 0 +
jbe loc_100D62B  +
cmp eax offset Reserved +
jz loc_100D627  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D627  +
cmp byte ptr [eax+19h] 3 +
jb loc_100D627  +
push [ebp+arg_10]  +
push ebx  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov eax Reserved +
or [ebp+arg_14] 2 +
test [ebp+arg_14] 1Ch +
jnz loc_100D638  +
or [ebp+arg_14] 8 +
mov esi [ebp+arg_20] +
mov edi [ebp+arg_1C] +
cmp eax offset Reserved +
jz loc_100D666  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D666  +
cmp byte ptr [eax+19h] 5 +
jb loc_100D666  +
push esi  +
push edi  +
push ebx  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B908  +
mov eax Reserved +
cmp [ebp+arg_C] 0 +
mov edx [ebp+arg_14] +
push 20h  +
mov [ebp+var_34] edx +
mov edx [ebp+arg_18] +
pop ecx  +
mov [ebp+var_38] ecx +
mov [ebp+var_30] edx +
mov [ebp+var_2C] 1 +
jz loc_100D690  +
mov edx [ebp+arg_C] +
mov edx [edx+4] +
mov [ebp+var_24] edx +
jmp loc_100D694  +
and [ebp+var_24] 0 +
mov edx [ebp+arg_14] +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
test dl 2 +
jnz loc_100D842  +
cmp [ebp+arg_8] 0 +
jnz loc_100D842  +
test edx edx +
js loc_100D6D0  +
test dl 0Ch +
jz loc_100D6D0  +
push edx  +
push offset dword_100A6E0  +
push offset dword_100A680  +
push 1  +
call sub_100C5C3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D6F4  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D6F4  +
cmp byte ptr [eax+19h] 5 +
jb loc_100D6F4  +
push [ebp+arg_0]  +
push ebx  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov al byte ptr [ebp+arg_14] +
xor edi edi +
inc edi  +
test al 4 +
jz loc_100D702  +
push 3  +
jmp loc_100D708  +
test al 8 +
jz loc_100D709  +
push 9  +
pop edi  +
test al al +
jns loc_100D710  +
or edi 40h +
test al 40h +
jz loc_100D71A  +
or edi 100000h +
mov esi edi +
or esi 2000h +
push esi  +
push [ebp+arg_0]  +
push offset dword_100A670  +
call sub_100C554  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push 1  +
push [ebp+arg_0]  +
call sub_10117F9  +
mov [ebp+arg_20] eax +
test eax eax +
jnz loc_100D750  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100D78D  +
mov [ebp+arg_20] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DBE8  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DBE8  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DBE8  +
push [ebp+arg_20]  +
push [ebp+arg_0]  +
push ebx  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
jmp loc_100DBE8  +
cmp [ebp+hToken] 0 +
jz loc_100D7E3  +
push [ebp+hToken]  +
call ImpersonateLoggedOnUser  +
test eax eax +
jnz loc_100D7E3  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DBE8  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DBE8  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DBE8  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push ebx  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100DBE8  +
lea eax [ebp+var_38] +
push eax  +
mov [ebp+var_34] edi +
call ds:RecordShutdownReason  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100D82D  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100D82D  +
cmp byte ptr [ecx+19h] 5 +
jb loc_100D82D  +
test eax eax +
mov eax offset aSucceeded +
jnz loc_100D818  +
mov eax offset aFailed +
push [ebp+var_30]  +
push [ebp+var_34]  +
push eax  +
push ebx  +
push 39h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B9CF  +
cmp [ebp+hToken] 0 +
jz loc_100DBE8  +
call RevertToSelf  +
jmp loc_100DBE8  +
cmp dword_10158A4 1 +
jnz loc_100D8E0  +
test dl cl +
jnz loc_100D85F  +
mov [ebp+arg_20] 4A6h +
jmp loc_100DBE8  +
mov esi ds:DeleteTimerQueueTimer +
xor edi edi +
push edi  +
push dword_101589C  +
push edi  +
call esi  +
cmp eax 1 +
jnz loc_100D8A2  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D89C  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D89C  +
cmp byte ptr [eax+19h] 5 +
jb loc_100D89C  +
push ebx  +
push 3Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov dword_10158A4 edi +
mov eax dword_10158A0 +
cmp eax edi +
jz loc_100D8E0  +
push edi  +
push eax  +
push edi  +
call esi  +
test eax eax +
jnz loc_100D8DA  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D8DA  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D8DA  +
cmp byte ptr [eax+19h] 2 +
jb loc_100D8DA  +
push ebx  +
push 3Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov dword_10158A0 edi +
xor esi esi +
test [ebp+arg_14] 80000000h +
jnz loc_100D9B6  +
cmp [ebp+hToken] esi +
jz loc_100D941  +
push [ebp+hToken]  +
call ImpersonateLoggedOnUser  +
test eax eax +
jnz loc_100D941  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100D9B6  +
test byte ptr [eax+1Ch] 8 +
jz loc_100D9B6  +
cmp byte ptr [eax+19h] 2 +
jb loc_100D9B6  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push ebx  +
push 3Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100D9B6  +
test byte ptr [ebp+arg_14] 4 +
mov [ebp+var_34] 1 +
jz loc_100D957  +
mov [ebp+var_34] 3 +
jmp loc_100D964  +
test byte ptr [ebp+arg_14] 8 +
jz loc_100D964  +
mov [ebp+var_34] 9 +
lea eax [ebp+var_38] +
push eax  +
call ds:RecordShutdownReason  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100D9AB  +
test byte ptr [ecx+1Ch] 8 +
jz loc_100D9AB  +
cmp byte ptr [ecx+19h] 5 +
jb loc_100D9AB  +
cmp eax esi +
mov eax offset aSucceeded +
jnz loc_100D996  +
mov eax offset aFailed +
push [ebp+var_30]  +
push [ebp+var_34]  +
push eax  +
push ebx  +
push 3Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B9CF  +
cmp [ebp+hToken] esi +
jz loc_100D9B6  +
call RevertToSelf  +
cmp [ebp+arg_10] esi +
jbe loc_100DBDC  +
mov edi ds:CreateTimerQueueTimer +
push 0Ah  +
xor ebx ebx +
pop esi  +
mov eax [ebp+arg_10] +
imul eax eax +
push 10h  +
push 0  +
push eax  +
push [ebp+var_18]  +
push offset sub_100C93E  +
push 0  +
push offset dword_101589C  +
call edi  +
test eax eax +
jnz loc_100DA3D  +
call ds:__imp_GetLastError  +
mov [ebp+arg_20] eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DA23  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DA23  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DA23  +
push [ebp+arg_20]  +
push offset loc_1002214  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push 12Ch  +
call ds:Sleep  +
inc ebx  +
cmp ebx esi +
jl loc_100D9CA  +
mov eax Reserved +
jmp loc_100DB24  +
mov eax [ebp+arg_10] +
push 3Ch  +
xor edx edx +
pop ecx  +
div  ecx +
cmp eax esi +
ja loc_100DA54  +
push 2  +
pop ecx  +
cmp ecx eax +
sbb esi esi +
and esi ecx +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DA81  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DA81  +
cmp byte ptr [eax+19h] 4 +
jb loc_100DA81  +
mov ebx offset loc_1002214 +
push ebx  +
push 41h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_100DA86  +
mov ebx offset loc_1002214 +
push 0  +
push [ebp+arg_10]  +
call sub_100CD51  +
test esi esi +
jz loc_100DB1B  +
mov ecx [ebp+arg_10] +
mov eax esi +
imul eax eax +
sub ecx eax +
imul ecx ecx +
push 10h  +
push 0  +
push ecx  +
push eax  +
push offset sub_100CD51  +
push 0  +
push offset dword_10158A0  +
call edi  +
test eax eax +
jnz loc_100DAF4  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DB20  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DB20  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DB20  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push ebx  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100DB1B  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DB20  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DB20  +
cmp byte ptr [eax+19h] 4 +
jb loc_100DB20  +
push esi  +
push ebx  +
push 43h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov eax Reserved +
and [ebp+arg_20] 0 +
xor ebx ebx +
cmp [ebp+arg_20] ebx +
jz loc_100DB61  +
cmp eax offset Reserved +
jz loc_100DBE8  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DBE8  +
cmp byte ptr [eax+19h] 2 +
jb loc_100DBE8  +
push offset loc_1002214  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_100DBE8  +
mov edi offset Reserved +
cmp eax edi +
jz loc_100DB8D  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DB8D  +
cmp byte ptr [eax+19h] 5 +
jb loc_100DB8D  +
push offset loc_1002214  +
push 45h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax Reserved +
mov esi [ebp+arg_C] +
mov dword_10158A4 1 +
cmp esi ebx +
jz loc_100DBD7  +
cmp [esi+4] ebx +
jz loc_100DBD7  +
cmp eax edi +
jz loc_100DBC5  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DBC5  +
cmp byte ptr [eax+19h] 5 +
jb loc_100DBC5  +
push offset loc_1002214  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
lea eax [ebp+hToken] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
push [ebp+arg_10]  +
push 2  +
call sub_100F873  +
mov [ebp+arg_20] ebx +
jmp loc_100DBE8  +
push esi  +
push [ebp+var_18]  +
call sub_100C93E  +
mov [ebp+arg_20] esi +
push offset unk_1015184  +
call ds:RtlLeaveCriticalSection  +
mov esi [ebp+arg_20] +
mov [ebp+var_4] eax +
mov ebx offset loc_1002214 +
mov eax Reserved +
xor edi edi +
cmp [ebp+var_10] edi +
jz loc_100DC18  +
lea eax [ebp+var_10] +
push eax  +
call sub_100575D  +
mov eax Reserved +
cmp [ebp+var_14] edi +
jz loc_100DC2B  +
lea eax [ebp+var_14] +
push eax  +
call sub_100575D  +
mov eax Reserved +
cmp [ebp+hObject] edi +
jz loc_100DC3E  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100DC60  +
test byte ptr [eax+1Ch] 8 +
jz loc_100DC60  +
cmp byte ptr [eax+19h] 5 +
jb loc_100DC60  +
push esi  +
push ebx  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
push 0Ch  +
push offset dword_100DCE0  +
call sub_10017FB  +
xor eax eax +
mov [ebp-1Ch] eax +
mov [ebp-4] eax +
push eax  +
push eax  +
call sub_100CF31  +
mov [ebp-1Ch] eax +
jmp loc_100DCC8  +
mov eax [ebp-14h] +
mov eax [eax] +
push dword ptr [eax]  +
call ds:RpcExceptionFilter  +
retn   +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_10015E2  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test cl 0Bh +
jz loc_100DD59  +
test cl 2 +
jz loc_100DD18  +
push 7  +
pop eax  +
jmp loc_100DD28  +
push 0  +
pop eax  +
test cl 8 +
setz al  +
lea eax ds:0Bh[eax*8] +
test cl 40h +
jz loc_100DD32  +
or eax 80h +
test ecx 100000h +
jz loc_100DD3D  +
or eax 40h +
push offset aWininit_exe  +
push offset a127_0_0_1  +
push 80070000h  +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_100D113  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+ReturnLength] 57h +
mov [ebp+var_10] edi +
mov [ebp+var_14] edi +
mov [ebp+hToken] edi +
mov [ebp+TokenInformation] edi +
mov [ebp+var_C] edi +
cmp esi edi +
jz loc_100DE00  +
mov edx [esi+4] +
cmp edx edi +
jnz loc_100DDCF  +
xor eax eax +
cmp ax [esi] +
jnz loc_100DE03  +
cmp ax [esi+2] +
jmp loc_100DDFE  +
movzx ecx word ptr [esi] +
test cl 1 +
jnz loc_100DE03  +
mov eax ecx +
and eax 0FFFEh +
mov ebx 400h +
cmp ax bx +
jnb loc_100DE03  +
movzx eax word ptr [esi+2] +
movzx ecx cx +
inc ecx  +
inc ecx  +
cmp ecx eax +
jnz loc_100DE03  +
shr eax 1 +
xor ecx ecx +
cmp cx [edx+eax*2-2] +
jnz loc_100DE03  +
mov [ebp+ReturnLength] edi +
cmp [ebp+arg_8] 12CC0300h +
jb loc_100DE13  +
mov [ebp+ReturnLength] 57h +
cmp [ebp+ReturnLength] edi +
jnz loc_100DEFD  +
push edi  +
call ds:RpcImpersonateClient  +
mov ebx ds:RpcRevertToSelf +
mov [ebp+ReturnLength] eax +
cmp eax edi +
jnz loc_100DEE8  +
xor eax eax +
lea ecx [ebp+hToken] +
push ecx  +
inc eax  +
push eax  +
push 0Ch  +
push 0FFFFFFFEh  +
mov [ebp+var_14] eax +
call ds:NtOpenThreadToken  +
cmp eax edi +
jge loc_100DE5C  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp+ReturnLength] eax +
jmp loc_100DEE8  +
lea eax [ebp+var_10] +
push eax  +
push dword_10151C8  +
push [ebp+hToken]  +
call CheckTokenMembership  +
test eax eax +
jnz loc_100DE7B  +
call ds:__imp_GetLastError  +
jmp loc_100DE54  +
cmp [ebp+var_10] edi +
jnz loc_100DE99  +
lea eax [ebp+ReturnLength] +
push eax  +
push 4  +
lea eax [ebp+TokenInformation] +
push eax  +
push 0Ch  +
push [ebp+hToken]  +
call GetTokenInformation  +
test eax eax +
jz loc_100DE73  +
call ebx  +
mov [ebp+ReturnLength] eax +
lea eax [ebp+var_C] +
push eax  +
push [ebp+ClientBinding]  +
mov [ebp+var_14] edi +
call sub_100C0DB  +
mov eax [ebp+arg_14] +
cmp eax edi +
jz loc_100DEB9  +
mov eax [eax+4] +
jmp loc_100DEBB  +
xor eax eax +
push eax  +
push [ebp+var_C]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+var_10]  +
push [ebp+hToken]  +
push [ebp+TokenInformation]  +
call sub_100D113  +
mov [ebp+ReturnLength] eax +
cmp [ebp+var_C] edi +
jz loc_100DEE8  +
lea eax [ebp+var_C] +
push eax  +
call sub_100575D  +
cmp [ebp+hToken] edi +
jz loc_100DEF6  +
push [ebp+hToken]  +
call ds:NtClose  +
cmp [ebp+var_14] edi +
jz loc_100DEFD  +
call ebx  +
mov eax [ebp+ReturnLength] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
xor edi edi +
mov [ebp+var_8] ebx +
call ds:RpcImpersonateClient  +
mov esi eax +
cmp esi ebx +
jnz loc_100DF98  +
lea eax [ebp+var_8] +
push eax  +
inc edi  +
push edi  +
push 8  +
push 0FFFFFFFEh  +
call ds:NtOpenThreadToken  +
cmp eax ebx +
jge loc_100DF4E  +
push eax  +
call ds:RtlNtStatusToDosError  +
jmp loc_100DF6B  +
lea eax [ebp+var_C] +
push eax  +
push dword_10151C8  +
push [ebp+var_8]  +
call CheckTokenMembership  +
test eax eax +
jnz loc_100DF6F  +
call ds:__imp_GetLastError  +
mov esi eax +
jmp loc_100DF98  +
cmp [ebp+var_C] ebx +
jz loc_100DF7D  +
mov [ebp+var_4] 1 +
jmp loc_100DF89  +
cmp [ebp+arg_C] bl +
jz loc_100DF89  +
mov [ebp+var_4] 3 +
cmp [ebp+arg_10] bl +
jz loc_100DF94  +
or [ebp+var_4] 4 +
jmp loc_100DF98  +
or [ebp+var_4] 8 +
cmp [ebp+var_8] ebx +
jz loc_100DFA6  +
push [ebp+var_8]  +
call ds:NtClose  +
cmp edi ebx +
jz loc_100DFB0  +
call ds:RpcRevertToSelf  +
cmp esi ebx +
jnz loc_100DFC9  +
push ebx  +
push [ebp+arg_14]  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call sub_100DD91  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 80070000h  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DF0C  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
movzx eax di +
xor ebx ebx +
push ebx  +
shr eax 4 +
inc eax  +
push eax  +
push 6  +
push ebx  +
call ds:FindResourceExW  +
cmp eax ebx +
jz loc_100E06B  +
push esi  +
push eax  +
push ebx  +
call ds:LoadResource  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_100E06A  +
and edi 0Fh +
jmp loc_100E042  +
movzx eax ax +
dec edi  +
lea esi [esi+eax*2] +
movzx eax word ptr [esi] +
inc esi  +
inc esi  +
test edi edi +
jnz loc_100E03B  +
movzx edi ax +
add edi edi +
lea eax [edi+2] +
push eax  +
call sub_1006A60  +
mov ebx eax +
test ebx ebx +
jz loc_100E06A  +
push edi  +
push esi  +
push ebx  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
xor edi edi +
push 20019h  +
push edi  +
push offset aSoftwareMicr_1  +
push 80000002h  +
mov [ebp+var_4] edi +
mov [ebp+dwBytes] edi +
mov [ebp+hKey] edi +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_100E106  +
mov esi ds:RegQueryValueExW +
lea eax [ebp+dwBytes] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
cmp eax edi +
jnz loc_100E106  +
push [ebp+dwBytes]  +
call sub_1006A60  +
mov [ebp+var_4] eax +
cmp eax edi +
jz loc_100E106  +
lea ecx [ebp+dwBytes] +
push ecx  +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
cmp eax edi +
jnz loc_100E106  +
cmp [ebp+Type] 1 +
jnz loc_100E106  +
mov eax [ebp+dwBytes] +
cmp eax 2 +
jb loc_100E106  +
mov ecx [ebp+var_4] +
shr eax 1 +
cmp [ecx+eax*2-2] di +
jz loc_100E11F  +
cmp [ebp+var_4] edi +
jz loc_100E114  +
lea eax [ebp+var_4] +
push eax  +
call sub_100575D  +
push [ebp+arg_4]  +
call sub_1006B9B  +
mov [ebp+var_4] eax +
cmp [ebp+hKey] edi +
pop edi  +
pop esi  +
jz loc_100E12F  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
xor esi esi +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+hMem] +
push eax  +
push 1  +
push [ebp+arg_4]  +
mov [ebp+pDacl] esi +
mov [ebp+pSacl] esi +
mov [ebp+psidGroup] esi +
mov [ebp+psidOowner] esi +
mov [ebp+dwErrCode] esi +
mov [ebp+bDaclPresent] esi +
mov [ebp+bDaclDefaulted] esi +
mov [ebp+bGroupDefaulted] esi +
mov [ebp+bOwnerDefaulted] esi +
mov [ebp+bSaclPresent] esi +
mov [ebp+bSaclDefaulted] esi +
mov [ebp+hMem] esi +
xor ebx ebx +
mov dword ptr [ebp+pControl] esi +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_100E20D  +
lea eax [ebp+dwRevision] +
push eax  +
lea eax [ebp+pControl] +
push eax  +
push [ebp+hMem]  +
call GetSecurityDescriptorControl  +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_100E20D  +
lea eax [ebp+bOwnerDefaulted] +
push eax  +
lea eax [ebp+psidOowner] +
push eax  +
push [ebp+hMem]  +
call GetSecurityDescriptorOwner  +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_100E20D  +
lea eax [ebp+bGroupDefaulted] +
push eax  +
lea eax [ebp+psidGroup] +
push eax  +
push [ebp+hMem]  +
call GetSecurityDescriptorGroup  +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_100E20D  +
lea eax [ebp+bDaclDefaulted] +
push eax  +
lea eax [ebp+pDacl] +
push eax  +
lea eax [ebp+bDaclPresent] +
push eax  +
push [ebp+hMem]  +
call GetSecurityDescriptorDacl  +
mov [ebp+arg_4] eax +
cmp eax esi +
jz loc_100E20D  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pSacl] +
push eax  +
lea eax [ebp+bSaclPresent] +
push eax  +
push [ebp+hMem]  +
call GetSecurityDescriptorSacl  +
mov [ebp+arg_4] eax +
cmp eax esi +
jnz loc_100E21B  +
call ds:__imp_GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_100E2AA  +
cmp [ebp+psidOowner] esi +
jz loc_100E223  +
xor ebx ebx +
inc ebx  +
cmp [ebp+psidGroup] esi +
jz loc_100E22B  +
or ebx 2 +
push edi  +
mov edi SetNamedSecurityInfoW +
cmp ebx esi +
jz loc_100E24D  +
push esi  +
push esi  +
push [ebp+psidGroup]  +
push [ebp+psidOowner]  +
push ebx  +
push 1  +
push [ebp+pObjectName]  +
call edi  +
mov [ebp+dwErrCode] eax +
cmp eax esi +
jnz loc_100E2A6  +
xor eax eax +
cmp [ebp+bDaclPresent] esi +
jz loc_100E26E  +
mov eax 1000h +
and ax [ebp+pControl] +
movzx eax ax +
neg eax  +
sbb eax eax +
and eax 60000000h +
add eax 20000004h +
cmp [ebp+bSaclPresent] esi +
jz loc_100E28B  +
or eax 8 +
test dword ptr [ebp+pControl] 2000h +
jz loc_100E286  +
or eax 40000000h +
jmp loc_100E28B  +
or eax 10000000h +
cmp eax esi +
jz loc_100E2A9  +
push [ebp+pSacl]  +
push [ebp+pDacl]  +
push esi  +
push esi  +
push eax  +
push 1  +
push [ebp+pObjectName]  +
call edi  +
mov [ebp+dwErrCode] eax +
cmp eax esi +
jz loc_100E2A9  +
mov [ebp+arg_4] esi +
pop edi  +
cmp [ebp+hMem] esi +
jz loc_100E2B8  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+arg_4] esi +
pop esi  +
pop ebx  +
jnz loc_100E2C8  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+arg_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
call sub_1002F01  +
test eax eax +
jnz loc_100E2F5  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1010AB9  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
call sub_1002F01  +
test eax eax +
jnz loc_100E341  +
push [ebp+arg_0]  +
call sub_100DFFE  +
mov [ebp+var_4] eax +
cmp eax esi +
jz loc_100E33E  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_1010AB9  +
mov esi eax +
lea eax [ebp+var_4] +
push eax  +
call sub_100575D  +
jmp loc_100E341  +
push 0Eh  +
pop esi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
call sub_1002F01  +
test eax eax +
jnz loc_100E36F  +
lea eax [ebp+hExistingToken] +
push eax  +
push [ebp+hExistingToken]  +
push [ebp+arg_0]  +
call sub_101099D  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push 8  +
pop eax  +
cmp [ebp+arg_10] eax +
jbe loc_100E38E  +
mov [ebp+arg_10] eax +
xor eax eax +
cmp [ebp+arg_10] eax +
jbe loc_100E3A7  +
lea ecx [ebp+arg_10] +
add ecx 4 +
mov edx [ecx] +
mov [ebp+eax*4+var_20] edx +
inc eax  +
cmp eax [ebp+arg_10] +
jb loc_100E398  +
push esi  +
push edi  +
push offset SourceName  +
push 0  +
call RegisterEventSourceW  +
mov esi eax +
test esi esi +
jnz loc_100E3E0  +
call ds:__imp_GetLastError  +
cmp eax 6BAh +
jz loc_100E3D0  +
cmp eax 6B5h +
jnz loc_100E3DB  +
push 3E8h  +
call ds:Sleep  +
push 6  +
pop edi  +
jmp loc_100E3FD  +
push [ebp+arg_C]  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push [ebp+arg_4]  +
push 0  +
push [ebp+arg_0]  +
push esi  +
call sub_10121A3  +
mov edi eax +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E42B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E42B  +
cmp byte ptr [eax+19h] 4 +
jb loc_100E42B  +
push edi  +
push [ebp+arg_4]  +
push offset dword_100A6F0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
test esi esi +
jz loc_100E436  +
push esi  +
call DeregisterEventSource  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_100E482  +
cmp word ptr [edx] 0 +
jnz loc_100E467  +
push 0Eh  +
jmp loc_100E484  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E46D  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100E485  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100E496  +
cmp word ptr [edx] 0 +
jnz loc_100E49B  +
mov edx offset aNull_1 +
jmp loc_100E49B  +
mov edx offset aNull +
push 0  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push offset aInstallation_s  +
lea eax [ebp+var_10] +
xor esi esi +
push eax  +
mov [ebp+var_4] esi +
call ds:RtlInitUnicodeString  +
push esi  +
lea eax [ebp+var_10] +
mov [ebp+var_20] eax +
push esi  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_28] 18h +
mov [ebp+var_24] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
mov [ebp+var_14] esi +
call ds:NtCreateEvent  +
cmp eax esi +
mov [ebp+var_8] eax +
jl loc_100E51C  +
mov eax [ebp+var_4] +
mov dword_10158B0 eax +
jmp loc_100E55F  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100E549  +
test byte ptr [eax+1Ch] 4 +
jz loc_100E549  +
cmp byte ptr [eax+19h] 2 +
jb loc_100E549  +
push [ebp+var_8]  +
push offset dword_100A84C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
push 4  +
push 80000BBCh  +
push 2  +
call sub_100E37B  +
add esp 14h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push 57h  +
pop esi  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
push 0  +
push offset aSystemSetup  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100E5ED  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push offset sub_1006968  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
xor eax eax +
test esi esi +
setz al  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 2001Bh  +
xor esi esi +
push esi  +
push offset aSystemSetup  +
push 80000002h  +
mov dword ptr [ebp+Data] esi +
xor ebx ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100E67B  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
mov esi offset aSetupshutdownr +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100E672  +
cmp [ebp+Type] 4 +
jnz loc_100E672  +
mov eax dword ptr [ebp+Data] +
cmp eax 2 +
ja loc_100E672  +
mov ecx [ebp+arg_0] +
push esi  +
push [ebp+hKey]  +
mov [ecx] eax +
inc ebx  +
call ds:RegDeleteValueW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push offset aSystemSetup  +
push 80000002h  +
mov dword ptr [ebp+Data] esi +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100E6DF  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset aSystemsetupinp  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp dword ptr [ebp+Data] esi +
jz loc_100E6E7  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jz loc_100E76F  +
cmp [ebp+arg_4] esi +
jz loc_100E76F  +
cmp [ebp+arg_8] esi +
jz loc_100E76F  +
push edi  +
push offset aSyssetup_dll  +
call ds:LoadLibraryW  +
mov edi eax +
cmp edi esi +
jz loc_100E76E  +
push offset sub_100E794  +
push edi  +
call ds:__imp_GetProcAddress  +
cmp eax esi +
jz loc_100E767  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
push esi  +
push esi  +
push esi  +
call eax  +
mov esi eax +
push edi  +
call ds:__imp_FreeLibrary  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
jo loc_100E7ED  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 124h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 25h  +
push dword ptr [esi+4]  +
xor edi edi +
mov [ebp+var_11C] edi +
mov [ebp+var_120] edi +
call ds:wcschr  +
pop ecx  +
pop ecx  +
mov [ebp+hMem] eax +
cmp eax edi +
jz loc_100E893  +
push 208h  +
push edi  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax edi +
jz loc_100EBE5  +
mov ebx ds:ExpandEnvironmentStringsW +
mov edi 104h +
push edi  +
push eax  +
push dword ptr [esi+4]  +
call ebx  +
mov [ebp+cbData] eax +
test eax eax +
jz loc_100E827  +
cmp eax edi +
jbe loc_100E881  +
push [ebp+hMem]  +
mov edi ds:LocalFree +
call edi  +
mov eax [ebp+cbData] +
test eax eax +
jz loc_100EBE5  +
lea eax [eax+eax+2] +
push eax  +
push 0  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_100EBE5  +
push [ebp+cbData]  +
push eax  +
push dword ptr [esi+4]  +
call ebx  +
mov [ebp+cbData] eax +
test eax eax +
jnz loc_100E881  +
push [ebp+hMem]  +
call edi  +
jmp loc_100EBE5  +
mov eax [esi+4] +
mov [ebp+var_120] eax +
mov eax [ebp+hMem] +
mov [esi+4] eax +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
xor edi edi +
push edi  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100EBE5  +
mov ebx ds:RegQueryValueExW +
lea eax [ebp+Data] +
mov [ebp+lpData] eax +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push dword ptr [esi]  +
mov [ebp+cbData] 100h +
push [ebp+hKey]  +
call ebx  +
cmp eax edi +
jz loc_100E949  +
cmp eax 3 +
jz loc_100EA2A  +
cmp eax 2 +
jz loc_100EA2A  +
push [ebp+cbData]  +
push edi  +
call ds:LocalAlloc  +
mov [ebp+lpData] eax +
cmp eax edi +
jz loc_100EBD9  +
lea ecx [ebp+cbData] +
push ecx  +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push dword ptr [esi]  +
push [ebp+hKey]  +
call ebx  +
test eax eax +
jnz loc_100EBA1  +
mov eax [ebp+cbData] +
mov ebx [ebp+lpData] +
shr eax 1 +
xor ecx ecx +
mov [ebx+eax*2-2] cx +
mov [ebp+var_110] ebx +
cmp ebx edi +
jz loc_100EA97  +
cmp word ptr [ebx] 0 +
jz loc_100EA97  +
push 2Ch  +
push ebx  +
call ds:wcschr  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_100E98C  +
xor eax eax +
mov [ebx] ax +
push dword ptr [esi+4]  +
mov edi [ebp+var_110] +
push edi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100EA7D  +
mov eax [esi+8] +
test eax eax +
jz loc_100EBA1  +
cmp eax 1 +
jz loc_100EBA1  +
cmp eax 2 +
jnz loc_100EA7D  +
test ebx ebx +
jz loc_100EA6C  +
lea edi [ebx+2] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E9D3  +
mov ecx [ebp+cbData] +
shr ecx 1 +
add ecx ecx +
sub eax edx +
mov edx [ebp+lpData] +
sub ecx ebx +
sar eax 1 +
lea ecx [ecx+edx-2] +
sar ecx 1 +
inc eax  +
cmp eax ecx +
jnb loc_100EA14  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100EA03  +
sub eax edx +
sar eax 1 +
lea ecx [eax+1] +
lea eax [ecx+ecx] +
push eax  +
push edi  +
push [ebp+var_110]  +
call ds:memmove  +
add esp 0Ch +
jmp loc_100EA71  +
mov eax [esi+8] +
cmp eax edi +
jz loc_100EA3A  +
cmp eax 1 +
jnz loc_100EBD9  +
mov ecx [esi+4] +
mov eax ecx +
lea ebx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_100EA42  +
sub eax ebx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push ecx  +
push 1  +
push edi  +
push dword ptr [esi]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
jmp loc_100EBD9  +
xor eax eax +
mov [edi] ax +
mov [ebp+var_11C] 1 +
jmp loc_100EA8F  +
test ebx ebx +
jz loc_100EA97  +
push 2Ch  +
pop eax  +
mov [ebx] ax +
inc ebx  +
inc ebx  +
mov [ebp+var_110] ebx +
test ebx ebx +
jnz loc_100E96C  +
mov eax [esi+8] +
cmp eax 1 +
jz loc_100EAA7  +
test eax eax +
jnz loc_100EB64  +
mov eax [esi+4] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100EAAD  +
mov ecx [ebp+cbData] +
sub eax edx +
sar eax 1 +
lea ebx [ecx+eax*2+4] +
push ebx  +
push 0  +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_100EB64  +
xor eax eax +
mov [edi] ax +
cmp dword ptr [esi+8] 1 +
jnz loc_100EB0F  +
push dword ptr [esi+4]  +
mov [ebp+var_110] ebx +
shr [ebp+var_110] 1 +
push [ebp+var_110]  +
push edi  +
call sub_1001845  +
push offset dword_100EBF8  +
push [ebp+var_110]  +
push edi  +
call sub_10018E7  +
push [ebp+lpData]  +
shr ebx 1 +
push ebx  +
push edi  +
call sub_10018E7  +
cmp dword ptr [esi+8] 0 +
jnz loc_100EB3A  +
push offset dword_100EBF8  +
push ebx  +
push edi  +
call sub_10018E7  +
push dword ptr [esi+4]  +
push ebx  +
push edi  +
call sub_10018E7  +
lea eax [ebp+Data] +
cmp [ebp+lpData] eax +
jz loc_100EB54  +
push [ebp+lpData]  +
call ds:LocalFree  +
mov [ebp+lpData] edi +
mov [ebp+var_11C] 1 +
cmp [ebp+var_11C] 0 +
jz loc_100EBA1  +
mov eax [ebp+lpData] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100EB76  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push 1  +
push 0  +
push dword ptr [esi]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
lea eax [ebp+Data] +
cmp [ebp+lpData] eax +
jz loc_100EBBB  +
push [ebp+lpData]  +
call ds:LocalFree  +
cmp [ebp+hMem] 0 +
jz loc_100EBD9  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [ebp+var_120] +
mov [esi+4] eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
push 6  +
mov esi offset off_1015708 +
pop edi  +
push esi  +
call sub_100E7A9  +
add esi 0Ch +
dec edi  +
jnz loc_100EC0D  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 121Ch +
call sub_1003F4C  +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
call sub_100EC01  +
mov esi ds:RegOpenKeyExW +
lea eax [ebp+hKey] +
push eax  +
push 2000000h  +
xor ebx ebx +
push ebx  +
push offset aSystemSetup  +
mov edi 80000002h +
push edi  +
call esi  +
cmp eax ebx +
jnz loc_100ED09  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push ebx  +
push ebx  +
push offset aCmdline  +
push [ebp+hKey]  +
mov [ebp+cbData] 800h +
call ds:RegQueryValueExW  +
cmp eax ebx +
jnz loc_100ECCE  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100ECFB  +
test byte ptr [eax+1Ch] 4 +
jz loc_100ECFB  +
cmp byte ptr [eax+19h] 5 +
jb loc_100ECFB  +
lea ecx [ebp+Data] +
push ecx  +
push offset dword_100A84C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100375D  +
jmp loc_100ECFB  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100ECFB  +
test byte ptr [ecx+1Ch] 4 +
jz loc_100ECFB  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100ECFB  +
push eax  +
push offset dword_100A84C  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_100ED36  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100ED36  +
test byte ptr [ecx+1Ch] 4 +
jz loc_100ED36  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100ED36  +
push eax  +
push offset dword_100A84C  +
push 0Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
push ebx  +
call sub_100E5A1  +
mov eax dword_10150F8 +
cmp eax 4 +
jz loc_100ED7B  +
cmp eax 2 +
jz loc_100ED7B  +
lea eax [ebp+hKey] +
push eax  +
push 2001Bh  +
push ebx  +
push offset aSoftwareMicr_0  +
push edi  +
mov [ebp+hKey] ebx +
call esi  +
test eax eax +
jnz loc_100ED7B  +
push offset aAutoadminlogon  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp dword_1015100 ebx +
jz loc_100EDB2  +
push offset winsta  +
push offset aSWinlogon  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_1002691  +
add esp 10h +
push 10h  +
push 258h  +
push 320h  +
call sub_100E71D  +
mov esi ds:GetAsyncKeyState +
push 0A0h  +
lea edi [ebp+Data] +
call esi  +
push 0A1h  +
movzx ebx ax +
call esi  +
xor esi esi +
movzx ecx ax +
mov eax 8000h +
cmp dword_10158AC esi +
jz loc_100EDE3  +
mov ecx eax +
mov edx ecx +
or edx ebx +
test edx eax +
jz loc_100EE20  +
test ecx eax +
mov eax offset aD_0 +
jnz loc_100EDF9  +
mov eax offset dword_100369C +
lea ecx [ebp+Data] +
push ecx  +
push eax  +
push offset aNtsdSS  +
lea eax [ebp+CommandLine] +
push 400h  +
push eax  +
call sub_1002691  +
add esp 14h +
lea edi [ebp+CommandLine] +
lea eax [ebp+var_20C] +
cmp dword_1015100 esi +
jnz loc_100EE33  +
mov eax offset aWinsta0Default +
push esi  +
lea ecx [ebp+hObject] +
push ecx  +
push esi  +
push esi  +
push esi  +
push esi  +
push 2  +
push eax  +
push edi  +
call sub_1006A7F  +
cmp eax esi +
jz loc_100EE8B  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100EF7D  +
test byte ptr [ecx+1Ch] 4 +
jz loc_100EF7D  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100EF7D  +
push edi  +
push eax  +
push offset dword_100A84C  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100E451  +
jmp loc_100EF7D  +
mov esi dword_1015100 +
neg esi  +
sbb esi esi +
and esi 0F731401h +
dec esi  +
mov eax Reserved +
mov edi offset Reserved +
cmp eax edi +
jz loc_100EECB  +
test byte ptr [eax+1Ch] 4 +
jz loc_100EECB  +
cmp byte ptr [eax+19h] 5 +
jb loc_100EECB  +
mov ebx offset dword_100A84C +
push ebx  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_100EED0  +
mov ebx offset dword_100A84C +
push esi  +
push [ebp+hObject]  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jz loc_100EF4D  +
cmp eax 0FFFFFFFFh +
jz loc_100EF27  +
lea eax [ebp+ExitCode] +
push eax  +
push [ebp+hObject]  +
call ds:GetExitCodeProcess  +
mov eax Reserved +
cmp eax edi +
jz loc_100EF71  +
test byte ptr [eax+1Ch] 4 +
jz loc_100EF71  +
cmp byte ptr [eax+19h] 5 +
jb loc_100EF71  +
push [ebp+ExitCode]  +
push ebx  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100EF71  +
mov eax Reserved +
cmp eax edi +
jz loc_100EF71  +
test byte ptr [eax+1Ch] 4 +
jz loc_100EF71  +
cmp byte ptr [eax+19h] 2 +
jb loc_100EF71  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push ebx  +
push 11h  +
jmp loc_100EF1A  +
mov eax Reserved +
cmp eax edi +
jz loc_100EF71  +
test byte ptr [eax+1Ch] 4 +
jz loc_100EF71  +
cmp byte ptr [eax+19h] 2 +
jb loc_100EF71  +
push esi  +
push ebx  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_18] +
push eax  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_18] +
test edx edx +
jz loc_100F082  +
cmp word ptr [edx] 0 +
jnz loc_100F067  +
push 0Eh  +
jmp loc_100F084  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100F06D  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100F085  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100F096  +
cmp word ptr [edx] 0 +
jnz loc_100F09B  +
mov edx offset aNull_1 +
jmp loc_100F09B  +
mov edx offset aNull +
push 0  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_20] +
push ecx  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 40h +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov eax Reserved +
mov esi offset Reserved +
mov ebx offset dword_100A85C +
cmp eax esi +
jz loc_100F144  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F144  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F144  +
push dword ptr [ebp+10h]  +
push ebx  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov edi [ebp+14h] +
mov ecx [ebp+8] +
and dword ptr [edi] 0 +
mov eax 204h +
cmp ecx eax +
ja loc_100F36F  +
jz loc_100F346  +
mov eax ecx +
dec eax  +
jz loc_100F2FA  +
sub eax 0FFh +
jz loc_100F230  +
sub eax 100h +
jz loc_100F207  +
dec eax  +
jz loc_100F1DE  +
dec eax  +
jz loc_100F1B5  +
dec eax  +
jnz loc_100F39F  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push ebx  +
push 19h  +
jmp loc_100F50B  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push ebx  +
push 18h  +
jmp loc_100F50B  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push ebx  +
push 17h  +
jmp loc_100F50B  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push ebx  +
push 16h  +
jmp loc_100F50B  +
mov eax Reserved +
cmp eax esi +
jz loc_100F256  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F256  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F256  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
cmp dword ptr [ebp+0Ch] 10h +
jz loc_100F2AF  +
cmp dword ptr [ebp+0Ch] 20h +
jz loc_100F26A  +
and dword ptr [edi] 0 +
jmp loc_100F516  +
push edi  +
push 40000Dh  +
push 1  +
push dword ptr ds:7FFE02D8h  +
call sub_10117F9  +
test eax eax +
jz loc_100F516  +
mov [edi] eax +
mov ecx Reserved +
cmp ecx esi +
jz loc_100F516  +
test byte ptr [ecx+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100F516  +
push eax  +
push ebx  +
push 11h  +
jmp loc_100F2EF  +
push edi  +
push 9  +
push 1  +
push dword ptr ds:7FFE02D8h  +
call sub_10117F9  +
test eax eax +
jz loc_100F516  +
mov [edi] eax +
mov ecx Reserved +
cmp ecx esi +
jz loc_100F516  +
test byte ptr [ecx+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100F516  +
push eax  +
push ebx  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
jmp loc_100F3CA  +
mov eax Reserved +
cmp eax esi +
jz loc_100F320  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F320  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F320  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
test byte ptr [ebp+0Ch] 0Bh +
jz loc_100F516  +
push 0  +
call sub_100BBC3  +
test eax eax +
jnz loc_100F516  +
push dword ptr [ebp+0Ch]  +
call sub_100DD01  +
jmp loc_100F516  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push ebx  +
push 1Ah  +
jmp loc_100F50B  +
mov eax ecx +
sub eax 205h +
jz loc_100F4F3  +
sub eax 1FBh +
jz loc_100F4CB  +
dec eax  +
jz loc_100F4AB  +
dec eax  +
jz loc_100F491  +
dec eax  +
jz loc_100F46B  +
dec eax  +
jz loc_100F3D4  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 3 +
jb loc_100F516  +
push ecx  +
push ebx  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100F516  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_100F516  +
mov eax Reserved +
cmp eax esi +
jz loc_100F401  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F401  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F401  +
push ebx  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push 0  +
push 0FFFFFFFFh  +
push 0  +
call WTSDisconnectSession  +
test eax eax +
jnz loc_100F442  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 2 +
jb loc_100F516  +
call ds:__imp_GetLastError  +
push eax  +
mov eax Reserved +
push ebx  +
push 0Ch  +
jmp loc_100F3C4  +
***
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push ebx  +
push 0Dh  +
jmp loc_100F50B  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push ebx  +
push 15h  +
jmp loc_100F50B  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push ebx  +
push 12h  +
jmp loc_100F50B  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push 14h  +
jmp loc_100F3C4  +
***
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100F516  +
mov eax Reserved +
cmp eax esi +
jz loc_100F516  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F516  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F516  +
push ebx  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov eax Reserved +
mov esi offset Reserved +
mov edi offset dword_100A85C +
cmp eax esi +
jz loc_100F562  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F562  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F562  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push edi  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F051  +
mov eax [ebp+18h] +
and dword ptr [eax] 0 +
mov eax [ebp+8] +
dec eax  +
dec eax  +
jz loc_100F5D4  +
sub eax 2FEh +
jz loc_100F59E  +
mov eax Reserved +
cmp eax esi +
jz loc_100F5D4  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F5D4  +
cmp byte ptr [eax+19h] 3 +
jb loc_100F5D4  +
push dword ptr [ebp+8]  +
push edi  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100F5D4  +
mov eax Reserved +
cmp eax esi +
jz loc_100F5C7  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F5C7  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F5C7  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
push edi  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100ABE1  +
push dword ptr [ebp+0Ch]  +
push 6  +
push dword ptr [ebp+10h]  +
call sub_100E2D4  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov eax Reserved +
mov esi offset Reserved +
mov edi offset dword_100A85C +
cmp eax esi +
jz loc_100F62C  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F62C  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F62C  +
mov ecx [ebp+0Ch] +
push dword ptr [ecx+0Ch]  +
push dword ptr [ecx+8]  +
push dword ptr [ecx+4]  +
push dword ptr [ecx]  +
push dword ptr [ebp+8]  +
push edi  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F0CA  +
mov eax Reserved +
mov ecx [ebp+8] +
sub ecx 101h +
jz loc_100F667  +
dec ecx  +
jz loc_100F652  +
dec ecx  +
jnz loc_100F68B  +
cmp eax esi +
jz loc_100F685  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F685  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F685  +
push edi  +
push 23h  +
jmp loc_100F67A  +
cmp eax esi +
jz loc_100F685  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F685  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F685  +
push edi  +
push 22h  +
jmp loc_100F67A  +
cmp eax esi +
jz loc_100F685  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F685  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F685  +
push edi  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax [ebp+14h] +
and dword ptr [eax] 0 +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
mov [ebp+var_C] esi +
call sub_1002F01  +
test eax eax +
jz loc_100F6FC  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_101183E  +
cmp eax esi +
jz loc_100F859  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100F859  +
test byte ptr [ecx+1Ch] 20h +
jz loc_100F859  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100F859  +
push eax  +
push offset dword_100A85C  +
push 24h  +
jmp loc_100F765  +
cmp dword_10150FC esi +
jz loc_100F717  +
cmp dword_10150F8 2 +
jz loc_100F717  +
mov eax [ebp+arg_C] +
mov [eax] esi +
jmp loc_100F859  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push esi  +
push esi  +
call WTSEnumerateSessionsW  +
test eax eax +
jnz loc_100F775  +
call ds:__imp_GetLastError  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100F859  +
test byte ptr [ecx+1Ch] 20h +
jz loc_100F859  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100F859  +
push eax  +
push offset dword_100A85C  +
push 25h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_100F859  +
mov [ebp+var_8] esi +
cmp [ebp+var_C] esi +
jbe loc_100F859  +
mov eax Reserved +
push ebx  +
push edi  +
xor ebx ebx +
mov edi offset dword_100A85C +
mov ecx [ebp+var_4] +
mov ecx [ebx+ecx] +
cmp ecx 10000h +
jb loc_100F7CD  +
cmp eax offset Reserved +
jz loc_100F845  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F845  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F845  +
push ecx  +
push edi  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100F840  +
cmp eax offset Reserved +
jz loc_100F7F5  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F7F5  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F7F5  +
push ecx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push edi  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F019  +
push [ebp+arg_4]  +
mov eax [ebp+var_4] +
push [ebp+arg_0]  +
push dword ptr [ebx+eax]  +
call sub_101183E  +
mov esi eax +
test esi esi +
jz loc_100F83E  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F839  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F839  +
cmp byte ptr [eax+19h] 2 +
jb loc_100F839  +
mov ecx [ebp+var_4] +
push esi  +
push dword ptr [ebx+ecx]  +
push edi  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
mov eax [ebp+arg_C] +
mov [eax] esi +
xor esi esi +
mov eax Reserved +
inc [ebp+var_8]  +
mov ecx [ebp+var_8] +
add ebx 0Ch +
cmp ecx [ebp+var_C] +
jb loc_100F78F  +
pop edi  +
pop ebx  +
cmp [ebp+var_4] esi +
pop esi  +
jz loc_100F867  +
push [ebp+var_4]  +
call WTSFreeMemory  +
xor eax eax +
inc eax  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
mov [ebp+var_C] esi +
call sub_1002F01  +
test eax eax +
jz loc_100F8D9  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_1011880  +
cmp eax esi +
jz loc_100FA1E  +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100FA1E  +
test byte ptr [ecx+1Ch] 20h +
jz loc_100FA1E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100FA1E  +
push eax  +
push offset dword_100A85C  +
push 29h  +
jmp loc_100F927  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push esi  +
push esi  +
call WTSEnumerateSessionsW  +
test eax eax +
jnz loc_100F937  +
call ds:__imp_GetLastError  +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_100FA1E  +
test byte ptr [ecx+1Ch] 20h +
jz loc_100FA1E  +
cmp byte ptr [ecx+19h] 2 +
jb loc_100FA1E  +
push eax  +
push offset dword_100A85C  +
push 2Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1002F89  +
jmp loc_100FA1E  +
mov [ebp+var_8] esi +
cmp [ebp+var_C] esi +
jbe loc_100FA1E  +
mov eax Reserved +
push ebx  +
push edi  +
xor ebx ebx +
mov edi offset dword_100A85C +
mov ecx [ebp+var_4] +
mov ecx [ebx+ecx] +
cmp ecx 10000h +
jb loc_100F98F  +
cmp eax offset Reserved +
jz loc_100FA0A  +
test byte ptr [eax+1Ch] 20h +
jz loc_100FA0A  +
cmp byte ptr [eax+19h] 5 +
jb loc_100FA0A  +
push ecx  +
push edi  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_100FA05  +
cmp eax offset Reserved +
jz loc_100F9B7  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F9B7  +
cmp byte ptr [eax+19h] 5 +
jb loc_100F9B7  +
push ecx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push edi  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100F019  +
push [ebp+arg_8]  +
mov eax [ebp+var_4] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ebx+eax]  +
call sub_1011880  +
mov esi eax +
test esi esi +
jz loc_100FA03  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100F9FE  +
test byte ptr [eax+1Ch] 20h +
jz loc_100F9FE  +
cmp byte ptr [eax+19h] 2 +
jb loc_100F9FE  +
mov ecx [ebp+var_4] +
push esi  +
push dword ptr [ebx+ecx]  +
push edi  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B8D6  +
mov eax [ebp+arg_10] +
mov [eax] esi +
xor esi esi +
mov eax Reserved +
inc [ebp+var_8]  +
mov ecx [ebp+var_8] +
add ebx 0Ch +
cmp ecx [ebp+var_C] +
jb loc_100F951  +
pop edi  +
pop ebx  +
cmp [ebp+var_4] esi +
pop esi  +
jz loc_100FA2C  +
push [ebp+var_4]  +
call WTSFreeMemory  +
xor eax eax +
inc eax  +
leave   +
retn 14h  +
***
call sub_10017FB  +
and dword ptr [ebp-1Ch] 0 +
and dword ptr [ebp-4] 0 +
call sub_1011CEF  +
mov [ebp-1Ch] eax +
jmp loc_100FA67  +
mov eax [ebp-14h] +
mov eax [eax] +
push dword ptr [eax]  +
call ds:RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_10015E2  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_14] +
push edi  +
test esi esi +
jz loc_100FABA  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100FAAC  +
sub eax edx +
lea edi [eax+1] +
jmp loc_100FABD  +
push 5  +
pop edi  +
mov [ebp+arg_14] esi +
test esi esi +
jnz loc_100FACB  +
mov [ebp+arg_14] offset aNull_0 +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_100FAF5  +
cmp word ptr [edx] 0 +
jnz loc_100FADC  +
push 0Eh  +
jmp loc_100FAF7  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100FAE1  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_100FAF8  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100FB09  +
cmp word ptr [edx] 0 +
jnz loc_100FB0E  +
mov edx offset aNull_1 +
jmp loc_100FB0E  +
mov edx offset aNull +
push 0  +
push edi  +
push [ebp+arg_14]  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 28h +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
call sub_10027D1  +
mov eax [ebp+8] +
mov [ebp-350h] eax +
xor esi esi +
mov [ebp-338h] esi +
push 4  +
pop edi  +
mov [ebp-33Ch] edi +
mov [ebp-340h] esi +
mov [ebp-348h] esi +
mov [ebp-344h] esi +
mov [ebp-34Ch] esi +
lea eax [ebp-338h] +
push eax  +
push 3  +
pop ebx  +
push ebx  +
push esi  +
push offset aSystemCurren_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov [ebp-334h] eax +
cmp eax esi +
jz loc_100FBD6  +
mov eax Reserved +
mov esi offset Reserved +
cmp eax esi +
jz loc_100FEE2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FEE2  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FEE2  +
push dword ptr [ebp-334h]  +
push offset dword_100FFD8  +
push 0Ah  +
jmp loc_100FED2  +
lea eax [ebp-33Ch] +
push eax  +
lea eax [ebp-34Ch] +
push eax  +
lea eax [ebp-340h] +
push eax  +
push esi  +
push offset aRestoreinprogr  +
push dword ptr [ebp-338h]  +
mov esi ds:RegQueryValueExW +
call esi  +
mov [ebp-334h] eax +
test eax eax +
jnz loc_100FEAC  +
cmp [ebp-340h] edi +
jnz loc_100FE9E  +
cmp [ebp-34Ch] eax +
jnz loc_100FC5E  +
mov eax Reserved +
mov esi offset Reserved +
cmp eax esi +
jz loc_100FEE2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FEE2  +
cmp byte ptr [eax+19h] 4 +
jb loc_100FEE2  +
push offset dword_100FFD8  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_100FEDD  +
mov dword ptr [ebp-33Ch] 20Ah +
lea eax [ebp-33Ch] +
push eax  +
lea eax [ebp-330h] +
push eax  +
lea eax [ebp-340h] +
push eax  +
push 0  +
push offset aRestoremodule  +
push dword ptr [ebp-338h]  +
call esi  +
mov [ebp-334h] eax +
xor edi edi +
cmp eax edi +
jnz loc_100FE64  +
cmp dword ptr [ebp-340h] 1 +
jnz loc_100FE64  +
mov eax [ebp-33Ch] +
cmp eax 2 +
jb loc_100FE64  +
shr eax 1 +
xor ecx ecx +
cmp cx [ebp+eax*2-332h] +
jnz loc_100FE64  +
mov dword ptr [ebp-33Ch] 105h +
lea eax [ebp-33Ch] +
push eax  +
lea eax [ebp-124h] +
push eax  +
lea eax [ebp-340h] +
push eax  +
push edi  +
push offset aRestorefunctio  +
push dword ptr [ebp-338h]  +
call ds:RegQueryValueExA  +
mov [ebp-334h] eax +
cmp eax edi +
jnz loc_100FE1E  +
cmp dword ptr [ebp-340h] 1 +
jnz loc_100FE1E  +
mov eax [ebp-33Ch] +
cmp eax 1 +
jb loc_100FE1E  +
cmp byte ptr [ebp+eax-125h] 0 +
jnz loc_100FE1E  +
mov eax Reserved +
mov esi offset Reserved +
cmp eax esi +
jz loc_100FD6D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FD6D  +
cmp byte ptr [eax+19h] 4 +
jb loc_100FD6D  +
lea ecx [ebp-124h] +
push ecx  +
lea ecx [ebp-330h] +
push ecx  +
push offset dword_100FFD8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100FA99  +
lea eax [ebp-330h] +
push eax  +
call ds:LoadLibraryW  +
mov [ebp-348h] eax +
cmp eax edi +
jnz loc_100FDC3  +
call ds:__imp_GetLastError  +
mov [ebp-334h] eax +
mov eax Reserved +
cmp eax esi +
jz loc_100FEE2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FEE2  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FEE2  +
push dword ptr [ebp-334h]  +
push offset dword_100FFD8  +
push 10h  +
jmp loc_100FED2  +
lea ecx [ebp-124h] +
push ecx  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [ebp-344h] eax +
cmp eax edi +
jnz loc_100FEDD  +
call ds:__imp_GetLastError  +
mov [ebp-334h] eax +
mov eax Reserved +
cmp eax esi +
jz loc_100FEE2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FEE2  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FEE2  +
push dword ptr [ebp-334h]  +
push offset dword_100FFD8  +
push 11h  +
jmp loc_100FED2  +
cmp [ebp-334h] edi +
jnz loc_100FE30  +
mov dword ptr [ebp-334h] 0Dh +
mov eax Reserved +
mov esi offset Reserved +
cmp eax esi +
jz loc_100FEE2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FEE2  +
cmp [eax+19h] bl +
jb loc_100FEE2  +
push dword ptr [ebp-334h]  +
push offset dword_100FFD8  +
push 0Eh  +
jmp loc_100FED2  +
cmp [ebp-334h] edi +
jnz loc_100FE76  +
mov dword ptr [ebp-334h] 0Dh +
mov eax Reserved +
mov esi offset Reserved +
cmp eax esi +
jz loc_100FEE2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FEE2  +
cmp [eax+19h] bl +
jb loc_100FEE2  +
push dword ptr [ebp-334h]  +
push offset dword_100FFD8  +
push 0Dh  +
jmp loc_100FED2  +
test eax eax +
jnz loc_100FEAC  +
mov dword ptr [ebp-334h] 0Dh +
mov eax Reserved +
mov esi offset Reserved +
cmp eax esi +
jz loc_100FEE2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FEE2  +
cmp [eax+19h] bl +
jb loc_100FEE2  +
push dword ptr [ebp-334h]  +
push offset dword_100FFD8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov eax Reserved +
cmp dword ptr [ebp-344h] 0 +
jz loc_100FF9D  +
and dword ptr [ebp-4] 0 +
cmp eax esi +
jz loc_100FF15  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FF15  +
cmp byte ptr [eax+19h] 4 +
jb loc_100FF15  +
push offset dword_100FFD8  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push dword ptr [ebp-350h]  +
call dword ptr [ebp-344h]  +
mov eax Reserved +
cmp eax esi +
jz loc_100FF96  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FF96  +
cmp byte ptr [eax+19h] 4 +
jb loc_100FF96  +
push offset dword_100FFD8  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
jmp loc_100FF96  +
mov eax [ebp-14h] +
mov eax [eax] +
push dword ptr [eax]  +
call ds:RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_100FF85  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FF85  +
cmp byte ptr [eax+19h] 2 +
jb loc_100FF85  +
push offset dword_100FFD8  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push offset aRestoreinprogr  +
push dword ptr [ebp-338h]  +
call ds:RegDeleteValueW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
cmp dword ptr [ebp-338h] 0 +
jz loc_100FFB2  +
push dword ptr [ebp-338h]  +
call ds:RegCloseKey  +
cmp dword ptr [ebp-348h] 0 +
jz loc_100FFC7  +
push dword ptr [ebp-348h]  +
call ds:__imp_FreeLibrary  +
mov eax [ebp-334h] +
call sub_100228C  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10015A4  +
push offset dword_10150C4  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10100C0  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10100C0  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10100BA  +
cmp eax 19930521h +
jz loc_10100BA  +
cmp eax 19930522h +
jz loc_10100BA  +
cmp eax 1994000h +
jnz loc_10100C0  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10100EC  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10100E8  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_101014D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1010145  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_101014F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1010135  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_10017FB  +
and dword ptr [ebp-4] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_10100D6  +
pop ecx  +
test eax eax +
jz loc_10101B6  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_1010110  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10101B6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10101BF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_10015E2  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10153A8 eax +
mov dword_10153A4 ecx +
mov dword_10153A0 edx +
mov dword_101539C ebx +
mov dword_1015398 esi +
mov dword_1015394 edi +
mov word_10153C0 ss +
mov word_10153B4 cs +
mov word_1015390 ds +
mov word_101538C es +
mov word_1015388 fs +
mov word_1015384 gs +
pushf   +
pop dword_10153B8  +
mov eax [ebp+0] +
mov dword_10153AC eax +
mov eax [ebp+4] +
mov dword_10153B0 eax +
lea eax [ebp+8] +
mov dword_10153BC eax +
mov eax [ebp-320h] +
mov dword_10152F8 10001h +
mov eax dword_10153B0 +
mov dword_10152B4 eax +
mov dword_10152A8 0C0000409h +
mov dword_10152AC 1 +
mov eax dword_10150C4 +
mov [ebp-328h] eax +
mov eax dword_10150C8 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
retn   +
***
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push esi  +
xor esi esi +
cmp Binding esi +
jz loc_1010480  +
mov eax dword_10158C8 +
cmp eax esi +
jz loc_1010480  +
push esi  +
push eax  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jnz loc_1010480  +
inc esi  +
mov eax esi +
pop esi  +
retn   +
***
mov eax hObject +
test eax eax +
jz locret_10104A0  +
push eax  +
call ds:CloseHandle  +
and hObject 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:CreateEventW +
xor ebx ebx +
push ebx  +
push ebx  +
push 1  +
lea eax [ebp+EventAttributes] +
push eax  +
mov [ebp+EventAttributes.nLength] 0Ch +
mov [ebp+EventAttributes.lpSecurityDescriptor] ebx +
mov [ebp+EventAttributes.bInheritHandle] 1 +
call esi  +
mov dword_10158C0 eax +
cmp eax ebx +
jz loc_10104EF  +
push ebx  +
push ebx  +
push 1  +
lea eax [ebp+EventAttributes] +
push eax  +
call esi  +
mov hEvent eax +
cmp eax ebx +
jnz loc_10104F9  +
call ds:__imp_GetLastError  +
mov esi eax +
jmp loc_10104FB  +
xor esi esi +
cmp esi ebx +
jz loc_1010504  +
call sub_10110ED  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push offset dword_10105B0  +
call sub_100AFD3  +
xor esi esi +
cmp Binding esi +
jz loc_101053F  +
push offset Binding  +
call ds:RpcBindingFree  +
mov edi eax +
mov Binding esi +
jmp loc_1010541  +
xor edi edi +
mov dword_10158D0 esi +
cmp [ebp+arg_0] esi +
jz loc_1010594  +
mov eax hEvent +
cmp eax esi +
jz loc_101055C  +
push eax  +
call ds:SetEvent  +
mov eax dword_10158C8 +
cmp eax esi +
jz loc_1010594  +
push 2710h  +
push eax  +
call ds:WaitForSingleObject  +
test eax eax +
jz loc_1010582  +
push esi  +
push dword_10158C8  +
call ds:TerminateProcess  +
push dword_10158C8  +
call ds:CloseHandle  +
mov dword_10158C8 esi +
call sub_10110ED  +
push offset dword_10105C0  +
call sub_100AFD3  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4E8h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov [ebp+hToken] eax +
mov eax [ebp+arg_8] +
push offset dword_10108A8  +
mov [ebp+var_484] eax +
call sub_100AFD3  +
mov edi [ebp+arg_0] +
shr edi 1Eh +
and edi 1 +
push 0  +
pop esi  +
jz loc_1010625  +
call ds:GetCurrentProcessId  +
mov [ebp+var_47C] eax +
jmp loc_101062B  +
mov [ebp+var_47C] esi +
mov [ebp+StringBinding] esi +
cmp [ebp+arg_0] esi +
jz loc_10107BA  +
call sub_10104A6  +
mov ebx eax +
cmp ebx esi +
jnz loc_1010745  +
mov ebx 100h +
lea eax [ebp+CommandLine] +
cmp edi esi +
jnz loc_1010674  +
push dword_1015118  +
push offset aLogonui_exe  +
push offset aSFlags0xLx  +
push ebx  +
push eax  +
call sub_1002691  +
add esp 14h +
jmp loc_1010694  +
push [ebp+var_47C]  +
push dword_1015118  +
push offset aLogonui_exe  +
push offset aSFlags0xLxTest  +
push ebx  +
push eax  +
call sub_1002691  +
add esp 18h +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
cmp eax esi +
jz loc_10106A9  +
push 7Ah  +
pop ebx  +
jmp loc_1010745  +
push 44h  +
lea eax [ebp+StartupInfo] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp+StartupInfo.cb] 44h +
mov [ebp+StartupInfo.lpDesktop] offset aWinsta0Winlogo +
cmp edi esi +
jz loc_10106D9  +
mov [ebp+StartupInfo.lpDesktop] esi +
mov eax dword_10158C0 +
or [ebp+StartupInfo.hStdError] 0FFFFFFFFh +
mov [ebp+StartupInfo.hStdInput] eax +
mov eax hEvent +
mov [ebp+StartupInfo.hStdOutput] eax +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push esi  +
push esi  +
push esi  +
push 1  +
push esi  +
push esi  +
lea eax [ebp+CommandLine] +
push eax  +
mov [ebp+StartupInfo.dwFlags] ebx +
push esi  +
cmp [ebp+hToken] esi +
jnz loc_1010729  +
call ds:CreateProcessW  +
jmp loc_1010735  +
push [ebp+hToken]  +
call CreateProcessAsUserW  +
test eax eax +
jnz loc_101078D  +
call ds:__imp_GetLastError  +
mov ebx eax +
cmp ebx esi +
jz loc_101074F  +
push offset dword_10108C8  +
call sub_100AFD3  +
cmp [ebp+StringBinding] esi +
jz loc_1010764  +
lea eax [ebp+StringBinding] +
push eax  +
call ds:RpcStringFreeW  +
cmp ebx esi +
jz loc_1010770  +
push [ebp+arg_0]  +
call sub_101050F  +
push offset dword_10108B8  +
call sub_100AFD3  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 0Ch  +
mov eax [ebp+hObject] +
push dword ptr [ebp-490h]  +
mov dword_10158C8 eax +
call ds:CloseHandle  +
mov eax [ebp-48Ch] +
mov ecx [ebp+var_484] +
push esi  +
push eax  +
mov [ecx] eax +
call ds:RegisterLogonProcess  +
cmp edi esi +
jz loc_10107C6  +
mov eax [ebp+var_47C] +
jmp loc_10107DE  +
mov eax large fs:18h +
mov eax [eax+30h] +
mov eax [eax+1D4h] +
cmp eax esi +
jnz loc_10107DE  +
mov eax ds:7FFE02D8h +
lea ecx [ebp+ObjUuid] +
push ecx  +
push eax  +
call sub_1011121  +
mov ebx eax +
cmp ebx esi +
jnz loc_1010745  +
lea eax [ebp+StringBinding] +
push eax  +
push esi  +
push esi  +
push esi  +
push offset Protseq  +
lea eax [ebp+ObjUuid] +
push eax  +
call ds:RpcStringBindingComposeW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1010745  +
push offset Binding  +
push [ebp+StringBinding]  +
call ds:RpcBindingFromStringBindingW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1010745  +
cmp edi esi +
jnz loc_101074F  +
push 111h  +
lea eax [ebp+ServerPrincName] +
push eax  +
call sub_1011197  +
test eax eax +
jz loc_101074F  +
xor eax eax +
inc eax  +
mov [ebp+SecurityQOS.Version] eax +
mov [ebp+SecurityQOS.Capabilities] eax +
mov [ebp+SecurityQOS.IdentityTracking] esi +
mov [ebp+SecurityQOS.ImpersonationType] 2 +
lea eax [ebp+SecurityQOS] +
push eax  +
push esi  +
push esi  +
push 0Ah  +
push 6  +
lea eax [ebp+ServerPrincName] +
push eax  +
push Binding  +
call ds:RpcBindingSetAuthInfoExW  +
mov ebx eax +
cmp ebx esi +
jz loc_101074F  +
push 12Ch  +
call ds:Sleep  +
jmp loc_1010870  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax large fs:18h +
mov eax [eax+30h] +
lea ecx [ebp+hKey] +
push ecx  +
push 1000Bh  +
push dword ptr [eax+1D4h]  +
call sub_101125D  +
test eax eax +
jl loc_10109D8  +
push 0  +
push [ebp+hKey]  +
call ds:RegDeleteTreeW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [ebp+hExistingToken] 0 +
jz loc_10109F9  +
call sub_1010489  +
push offset hObject  +
push 1  +
push 0  +
push 0  +
push 0Bh  +
push [ebp+hExistingToken]  +
call DuplicateTokenEx  +
push [ebp+arg_8]  +
push [ebp+hExistingToken]  +
push [ebp+arg_0]  +
call sub_10105D5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
xor esi esi +
inc ebx  +
cmp dword_10158D0 esi +
jz loc_1010A37  +
call sub_101045A  +
test eax eax +
jz loc_1010A31  +
inc esi  +
jmp loc_1010AAE  +
push ebx  +
call sub_101050F  +
cmp dword_10158C0 esi +
jnz loc_1010A5B  +
lea eax [ebp+var_4] +
push eax  +
push hObject  +
push ebx  +
call sub_10105D5  +
test eax eax +
jnz loc_1010AA8  +
cmp dword_10158C0 esi +
jz loc_1010AA8  +
push 7530h  +
push dword_10158C0  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_1010AA8  +
mov esi ds:RpcMgmtIsServerListening +
push edi  +
push Binding  +
call esi  +
mov edi 6B3h +
jmp loc_1010A99  +
push 12Ch  +
call ds:Sleep  +
push Binding  +
call esi  +
cmp eax edi +
jz loc_1010A86  +
mov dword_10158D0 ebx +
mov esi ebx +
pop edi  +
jmp loc_1010AAE  +
push ebx  +
call sub_101050F  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_10027D1  +
mov eax [ebp+8] +
mov [ebp-154h] eax +
cmp dword_1015750 0FFFFFFFFh +
jnz loc_1010C09  +
push 118h  +
push 0  +
lea eax [ebp-134h] +
push eax  +
call memset  +
add esp 0Ch +
mov dword_1015750 40h +
mov dword ptr [ebp-138h] 11Ch +
lea eax [ebp-138h] +
push eax  +
call ds:GetVersionExW  +
test eax eax +
jz loc_1010B29  +
cmp byte ptr [ebp-1Eh] 1 +
jnz loc_1010B29  +
mov dword_1015750 10h +
lea eax [ebp-13Ch] +
push eax  +
mov ebx 20019h +
push ebx  +
push 0  +
push offset aSoftwareMicr_0  +
mov edi 80000002h +
push edi  +
mov esi ds:RegOpenKeyExW +
call esi  +
test eax eax +
jnz loc_1010B9C  +
mov dword ptr [ebp-140h] 4 +
lea eax [ebp-140h] +
push eax  +
lea eax [ebp-144h] +
push eax  +
lea eax [ebp-148h] +
push eax  +
push 0  +
push offset aUiverbositylev  +
push dword ptr [ebp-13Ch]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1010B90  +
mov eax [ebp-144h] +
mov dword_1015750 eax +
push dword ptr [ebp-13Ch]  +
call ds:RegCloseKey  +
lea eax [ebp-13Ch] +
push eax  +
push ebx  +
push 0  +
push offset aSoftwareMicros  +
push edi  +
call esi  +
test eax eax +
jnz loc_1010C09  +
mov dword ptr [ebp-140h] 4 +
lea eax [ebp-140h] +
push eax  +
lea eax [ebp-144h] +
push eax  +
lea eax [ebp-148h] +
push eax  +
push 0  +
push offset aVerbosestatus  +
push dword ptr [ebp-13Ch]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1010BFD  +
mov eax [ebp-144h] +
neg eax  +
sbb eax eax +
and eax 30h +
add eax 10h +
mov dword_1015750 eax +
push dword ptr [ebp-13Ch]  +
call ds:RegCloseKey  +
mov eax dword_1015750 +
cmp [ebp+10h] eax +
jbe loc_1010C17  +
xor eax eax +
jmp loc_1010C6B  +
push 15h  +
pop esi  +
call sub_1010A10  +
test eax eax +
jz loc_1010C69  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-154h]  +
push Binding  +
call sub_1010CD9  +
mov esi eax +
jmp loc_1010C5C  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-150h] eax +
push eax  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov esi [ebp-150h] +
mov [ebp-14Ch] esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax esi +
call sub_100228C  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
push offset pFormat  +
push offset pStubDescriptor  +
call NdrClientCall2  +
add esp 0Ch +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
leave   +
retn 0Ch  +
***
mov eax hEvent +
push esi  +
mov esi ds:CloseHandle +
test eax eax +
jz loc_1011107  +
push eax  +
call esi  +
and hEvent 0 +
mov eax dword_10158C0 +
test eax eax +
jz loc_101111A  +
push eax  +
call esi  +
and dword_10158C0 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+arg_0]  +
push offset a3bdb59a0D7364d  +
push 25h  +
push [ebp+arg_4]  +
call sub_1002691  +
add esp 10h +
test eax eax +
jl loc_1011143  +
xor eax eax +
jmp loc_1011146  +
movzx eax ax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 27Ch +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+var_278] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
xor edi edi +
push edi  +
push 16h  +
mov [ebp+var_278] 44h +
call CreateWellKnownSid  +
test eax eax +
jz loc_1011238  +
lea eax [ebp+var_27C] +
push eax  +
lea eax [ebp+var_274] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_270] +
push eax  +
lea eax [ebp+var_26C] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
mov [ebp+var_270] 101h +
mov [ebp+var_274] 10h +
call ds:LookupAccountSidLocalW  +
test eax eax +
jz loc_1011238  +
lea eax [ebp+var_26C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push offset aSS_0  +
push [ebp+arg_4]  +
push esi  +
call sub_1002691  +
add esp 14h +
test eax eax +
jl loc_1011238  +
inc edi  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10015A4  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:RegOpenKeyExW +
push edi  +
mov edi [ebp+arg_8] +
lea eax [ebp+hKey] +
push eax  +
push 8  +
push 0  +
push offset aSoftwareMicr_5  +
push 80000002h  +
call esi  +
and dword ptr [edi] 0 +
mov ebx eax +
test ebx ebx +
jnz loc_10112CB  +
push dword ptr [ebp+arg_0]  +
lea eax [ebp+SubKey] +
push offset aD  +
push 8  +
push eax  +
call sub_1002691  +
add esp 10h +
test eax eax +
jl loc_10112C2  +
push edi  +
push [ebp+samDesired]  +
lea eax [ebp+SubKey] +
push ebx  +
push eax  +
push [ebp+hKey]  +
call esi  +
mov ebx eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi]  +
call ds:RpcBindingUnbind  +
test eax eax +
jnz loc_10113A1  +
push esi  +
call ds:RpcBindingFree  +
test eax eax +
jnz loc_10113A1  +
and [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10017FB  +
push 44h  +
lea eax [ebp-68h] +
push eax  +
call ds:RpcAsyncInitializeHandle  +
xor esi esi +
cmp eax esi +
jnz loc_10114A1  +
push esi  +
push esi  +
push esi  +
push esi  +
call ds:CreateEventW  +
mov ebx eax +
mov [ebp-24h] ebx +
cmp ebx esi +
jnz loc_10113E7  +
xor eax eax +
jmp loc_10114A1  +
mov [ebp-54h] esi +
mov dword ptr [ebp-48h] 1 +
mov [ebp-44h] ebx +
mov [ebp-1Ch] esi +
mov [ebp-4] esi +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
lea eax [ebp-68h] +
push eax  +
call sub_10118C5  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_101143C  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
push eax  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov ebx [ebp-24h] +
xor esi esi +
cmp [ebp-1Ch] esi +
jz loc_101144D  +
push ebx  +
call ds:CloseHandle  +
mov eax [ebp-1Ch] +
jmp loc_10114A1  +
push 0FFFFFFFFh  +
push ebx  +
mov esi ds:WaitForSingleObject +
call esi  +
mov edi eax +
cmp edi 102h +
jnz loc_101147C  +
push 1  +
lea eax [ebp-68h] +
push eax  +
call ds:RpcAsyncCancelCall  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_1011480  +
push 0FFFFFFFFh  +
push ebx  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_1011499  +
test edi edi +
jnz loc_1011499  +
push edi  +
lea eax [ebp-68h] +
push eax  +
call ds:RpcAsyncCompleteCall  +
mov [ebp-1Ch] eax +
push ebx  +
call ds:CloseHandle  +
mov ecx [ebp+14h] +
mov eax [ebp-1Ch] +
mov [ecx] eax +
call sub_10015E2  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0 +
push esi  +
mov esi [ebp+8] +
mov eax [esi+14h] +
mov [ebp+8] eax +
jnz loc_1011535  +
push 0  +
push esi  +
call ds:RpcAsyncCompleteCall  +
push esi  +
call sub_10114F1  +
lea eax [ebp+8] +
push eax  +
call ds:RpcBindingFree  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_10027D1  +
mov ebx [ebp-80h] +
xor esi esi +
cmp [ebp-7Ch] esi +
jz locret_101161A  +
cmp [ebx] esi +
jz locret_101161A  +
push ebx  +
call ds:RpcBindingFree  +
mov [ebx] esi +
retn   +
***
call sub_10017FB  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
push 44h  +
call sub_10114D1  +
mov esi eax +
mov [ebp-24h] esi +
cmp esi ebx +
jnz loc_101166A  +
push 0Eh  +
pop eax  +
jmp loc_10116EF  +
push 44h  +
push esi  +
call ds:RpcAsyncInitializeHandle  +
mov edi eax +
cmp edi ebx +
jz loc_1011681  +
push esi  +
call sub_10114F1  +
jmp loc_10116ED  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call ds:RpcBindingCopy  +
mov edi eax +
cmp edi ebx +
jnz loc_1011679  +
mov eax [ebp-1Ch] +
mov [esi+14h] eax +
mov dword ptr [esi+20h] 5 +
mov dword ptr [esi+24h] offset loc_1011511 +
mov [ebp-4] ebx +
push ebx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-1Ch]  +
push esi  +
call sub_10118C5  +
jmp loc_10116E6  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
push eax  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov edi [ebp-20h] +
push dword ptr [ebp-24h]  +
call sub_10114F1  +
lea eax [ebp-1Ch] +
push eax  +
call ds:RpcBindingFree  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax edi +
call sub_10015E2  +
retn 0Ch  +
***
call sub_10017FB  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
push 44h  +
call sub_10114D1  +
mov esi eax +
mov [ebp-24h] esi +
cmp esi ebx +
jnz loc_1011742  +
push 0Eh  +
pop eax  +
jmp loc_10117CA  +
push 44h  +
push esi  +
call ds:RpcAsyncInitializeHandle  +
mov edi eax +
cmp edi ebx +
jz loc_1011759  +
push esi  +
call sub_10114F1  +
jmp loc_10117C8  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call ds:RpcBindingCopy  +
mov edi eax +
cmp edi ebx +
jnz loc_1011751  +
mov eax [ebp-1Ch] +
mov [esi+14h] eax +
mov dword ptr [esi+20h] 5 +
mov dword ptr [esi+24h] offset loc_1011511 +
mov [ebp-4] ebx +
push ebx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-1Ch]  +
push esi  +
call sub_10118E9  +
jmp loc_10117C1  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-20h] eax +
push eax  +
call I_RpcExceptionFilter  +
retn   +
mov esp [ebp-18h] +
mov edi [ebp-20h] +
push dword ptr [ebp-24h]  +
call sub_10114F1  +
lea eax [ebp-1Ch] +
push eax  +
call ds:RpcBindingFree  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax edi +
call sub_10015E2  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1011549  +
mov esi eax +
test esi esi +
jnz loc_1011832  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
call sub_10113AB  +
mov esi eax +
lea eax [ebp+var_4] +
push eax  +
call sub_101137F  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1011549  +
mov esi eax +
test esi esi +
jnz loc_1011874  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
call sub_1011641  +
mov esi eax +
lea eax [ebp+var_4] +
push eax  +
call sub_101137F  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1011549  +
mov esi eax +
test esi esi +
jnz loc_10118B9  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
call sub_1011719  +
mov esi eax +
lea eax [ebp+var_4] +
push eax  +
call sub_101137F  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
push offset byte_100A9AA  +
push offset stru_100AA68  +
call NdrAsyncClientCall  +
add esp 0Ch +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
push offset byte_100AA06  +
push offset stru_100AA68  +
call NdrAsyncClientCall  +
add esp 0Ch +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_101192B  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101191F  +
sub eax edx +
inc eax  +
jmp loc_101192E  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_1011939  +
mov ecx offset aNull_0 +
push 0  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call EtwTraceMessage  +
add esp 20h +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_10119A5  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10119A5  +
test byte ptr [eax+1Ch] 1 +
jz loc_10119A5  +
cmp byte ptr [eax+19h] 2 +
jb loc_10119A5  +
push offset dword_100AB60  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jnz loc_10119F6  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_10119F6  +
test byte ptr [eax+1Ch] 1 +
jz loc_10119F6  +
cmp byte ptr [eax+19h] 2 +
jb loc_10119F6  +
push offset dword_100AB60  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
pop ebp  +
retn 4  +
***
call sub_10017FB  +
xor esi esi +
cmp [ebp-24h] esi +
jz locret_1011BBA  +
call ds:RpcRevertToSelf  +
test eax eax +
jz locret_1011BBA  +
mov eax Reserved +
cmp eax offset Reserved +
jz locret_1011BBA  +
test byte ptr [eax+1Ch] 1 +
jz locret_1011BBA  +
cmp byte ptr [eax+19h] 2 +
jb locret_1011BBA  +
push offset dword_100AB60  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
retn   +
***
call sub_10119FF  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 5 +
retn 8  +
***
call sub_10027D1  +
mov eax [ebp-74h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
mov dword ptr [eax] 0C00000AFh +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
mov dword ptr [eax] 0C00000AFh +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov dword ptr [eax] 0C00000AFh +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
cmp dword_101511C edi +
jz loc_1011D25  +
push offset stru_1015148  +
push dword_10151E8  +
push off_10156B4  +
call ds:RpcEpUnregister  +
cmp eax edi +
jz loc_1011D1F  +
mov ebx eax +
jmp loc_1011D25  +
mov dword_101511C edi +
cmp dword_10151E8 edi +
jz loc_1011D46  +
push offset dword_10151E8  +
call ds:RpcBindingVectorFree  +
cmp eax edi +
jz loc_1011D40  +
mov ebx eax +
jmp loc_1011D46  +
mov dword_10151E8 edi +
mov esi ds:RpcServerUnregisterIf +
cmp dword_1015120 edi +
jz loc_1011D6D  +
push 1  +
push edi  +
push off_10156B4  +
call esi  +
cmp eax edi +
jz loc_1011D67  +
mov ebx eax +
jmp loc_1011D6D  +
mov dword_1015120 edi +
cmp dword_1015124 edi +
jz loc_1011D8E  +
push 1  +
push edi  +
push off_10156EC  +
call esi  +
cmp eax edi +
jz loc_1011D88  +
mov ebx eax +
jmp loc_1011D8E  +
mov dword_1015124 edi +
mov dword_1015150 edi +
mov dword_1015154 edi +
mov dword_1015158 edi +
mov dword_101515C edi +
mov dword_1015160 edi +
mov dword_1015164 edi +
mov dword_1015168 edi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
call ds:RpcServerTestCancel  +
test eax eax +
jnz loc_1011DDC  +
push 71Ah  +
jmp loc_1011E17  +
test byte ptr [ebp+18h] 1 +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
jz loc_1011DF7  +
call dword_1015164  +
jmp loc_1011DFD  +
call dword_1015150  +
test eax eax +
jz loc_1011E20  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1011E14  +
push 0  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncCompleteCall  +
jmp loc_1011E20  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncAbortCall  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
call ds:RpcServerTestCancel  +
test eax eax +
jnz loc_1011E42  +
push 71Ah  +
jmp loc_1011E80  +
test byte ptr [ebp+1Ch] 1 +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
jz loc_1011E60  +
call dword_1015168  +
jmp loc_1011E66  +
call dword_1015160  +
test eax eax +
jz loc_1011E89  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1011E7D  +
push 0  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncCompleteCall  +
jmp loc_1011E89  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncAbortCall  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
call ds:RpcServerTestCancel  +
test eax eax +
jnz loc_1011EAB  +
push 71Ah  +
jmp loc_1011ED9  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp+10h]  +
call dword_1015158  +
test eax eax +
jz loc_1011EE2  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1011ED6  +
push 0  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncCompleteCall  +
jmp loc_1011EE2  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncAbortCall  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
call ds:RpcServerTestCancel  +
test eax eax +
jnz loc_1011F04  +
push 71Ah  +
jmp loc_1011F2F  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp+10h] +
push eax  +
call dword_101515C  +
test eax eax +
jz loc_1011F38  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1011F2C  +
push 0  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncCompleteCall  +
jmp loc_1011F38  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncAbortCall  +
pop ebp  +
retn 5Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
call ds:RpcServerTestCancel  +
test eax eax +
jnz loc_1011F5A  +
push 71Ah  +
jmp loc_1011F87  +
lea eax [ebp+0Ch] +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
call dword_1015154  +
test eax eax +
jz loc_1011F90  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_1011F84  +
push 0  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncCompleteCall  +
jmp loc_1011F90  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RpcAsyncAbortCall  +
pop ebp  +
retn 14h  +
***
retn 4  +
***
call sub_10017FB  +
cmp [ebp-20h] edi +
jz locret_10120EE  +
push dword ptr [ebp-20h]  +
call ds:RegCloseKey  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ds:RtlAdjustPrivilege +
push edi  +
lea eax [ebp-1] +
push eax  +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call esi  +
mov edi eax +
cmp edi 0C000007Ch +
jnz loc_1012167  +
lea eax [ebp-1] +
push eax  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call esi  +
mov edi eax +
test edi edi +
jge loc_1012196  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012196  +
test byte ptr [eax+1Ch] 2 +
jz loc_1012196  +
cmp byte ptr [eax+19h] 2 +
jb loc_1012196  +
push edi  +
push offset dword_100AB70  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_10017FB  +
xor eax eax +
mov [ebp-1Ch] eax +
mov [ebp-4] eax +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ReportEventW  +
test eax eax +
jnz loc_10121E3  +
call ds:__imp_GetLastError  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10121FF  +
mov eax [ebp-1Ch] +
call sub_10015E2  +
retn 20h  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:RtlUnhandledExceptionFilter  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+hObject]  +
push 0  +
push 43Ah  +
call ds:OpenProcess  +
mov [ebp+hObject] eax +
test eax eax +
jz locret_10122B7  +
push ebx  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
mov ebx ds:CloseHandle +
test eax eax +
jz loc_10122B1  +
push offset aDbgbreakpoint  +
push eax  +
call ds:__imp_GetProcAddress  +
test eax eax +
jz loc_10122B1  +
push esi  +
lea ecx [ebp+ThreadId] +
push ecx  +
push 4  +
push 0  +
push eax  +
push 8000h  +
push 0  +
push [ebp+hObject]  +
call ds:CreateRemoteThread  +
mov esi eax +
test esi esi +
jz loc_10122B0  +
push 2  +
push esi  +
call ds:SetThreadPriority  +
push esi  +
call ds:ResumeThread  +
push esi  +
call ebx  +
pop esi  +
push [ebp+hObject]  +
call ebx  +
pop ebx  +
leave   +
retn 4  +
***
call sub_10027D1  +
xor ebx ebx +
cmp [ebp-22Ch] ebx +
jz locret_10125E8  +
push dword ptr [ebp-22Ch]  +
call ds:RegCloseKey  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 478h +
mov eax dword_10150C4 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx 104h +
push ebx  +
lea eax [ebp+var_414] +
push eax  +
call sub_10122E5  +
test eax eax +
jnz loc_1012803  +
mov eax Reserved +
cmp eax offset Reserved +
jz loc_1012A47  +
test byte ptr [eax+1Ch] 8 +
jz loc_1012A47  +
cmp byte ptr [eax+19h] 2 +
jb loc_1012A47  +
push [ebp+dwProcessId]  +
push offset dword_100AB80  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
jmp loc_1012A47  +
push esi  +
mov esi [ebp+dwProcessId] +
push edi  +
push esi  +
xor edi edi +
push edi  +
push 400h  +
call ds:OpenProcess  +
mov [ebp+ProcessHandle] eax +
cmp eax edi +
jz loc_1012A11  +
lea ecx [ebp+var_424] +
push ecx  +
push 4  +
lea ecx [ebp+var_41C] +
push ecx  +
push 7  +
push eax  +
mov [ebp+var_41C] edi +
call ds:NtQueryInformationProcess  +
cmp eax edi +
jl loc_10129CE  +
lea eax [ebp+hToken] +
push eax  +
push 2000000h  +
push [ebp+ProcessHandle]  +
call OpenProcessToken  +
test eax eax +
jz loc_10129A3  +
push 44h  +
pop esi  +
push esi  +
lea eax [ebp+StartupInfo] +
push edi  +
push eax  +
call memset  +
push [ebp+dwProcessId]  +
xor eax eax +
lea edi [ebp+hObject] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_414] +
push eax  +
push offset aSDPD  +
lea eax [ebp+CommandLine] +
push ebx  +
push eax  +
mov [ebp+StartupInfo.cb] esi +
call sub_1002691  +
xor eax eax +
add esp 20h +
mov esi offset Reserved +
mov edi offset dword_100AB80 +
cmp [ebp+var_41C] eax +
jz loc_10128FC  +
mov eax Reserved +
cmp eax esi +
jz loc_10128E8  +
test byte ptr [eax+1Ch] 8 +
jz loc_10128E8  +
cmp byte ptr [eax+19h] 2 +
jb loc_10128E8  +
push [ebp+dwProcessId]  +
push edi  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F89  +
push offset aPv  +
push ebx  +
lea eax [ebp+CommandLine] +
push eax  +
call sub_10018E7  +
xor eax eax +
lea ecx [ebp+hObject] +
push ecx  +
lea ecx [ebp+StartupInfo] +
push ecx  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+CommandLine] +
push ecx  +
push eax  +
push [ebp+hToken]  +
call CreateProcessAsUserW  +
test eax eax +
jz loc_1012963  +
mov eax Reserved +
cmp eax esi +
jz loc_101294B  +
test byte ptr [eax+1Ch] 8 +
jz loc_101294B  +
cmp byte ptr [eax+19h] 4 +
jb loc_101294B  +
push edi  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10015B6  +
push dword ptr [ebp-430h]  +
mov esi ds:CloseHandle +
call esi  +
push [ebp+hObject]  +
call esi  +
jmp loc_1012995  +
call ds:__imp_GetLastError  +
mov ecx Reserved +
cmp ecx esi +
jz loc_1012995  +
test byte ptr [ecx+1Ch] 8 +
jz loc_1012995  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1012995  +
push eax  +
lea eax [ebp+CommandLine] +
push eax  +
push edi  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100ABE1  +
push [ebp+hToken]  +
call ds:CloseHandle  +
jmp loc_1012A03  +
call ds:__imp_GetLastError  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1012A03  +
test byte ptr [ecx+1Ch] 8 +
jz loc_1012A03  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1012A03  +
push eax  +
push esi  +
push offset dword_100AB80  +
push 12h  +
jmp loc_10129F8  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1012A03  +
test byte ptr [ecx+1Ch] 8 +
jz loc_1012A03  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1012A03  +
push eax  +
push esi  +
push offset dword_100AB80  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B8D6  +
push [ebp+ProcessHandle]  +
call ds:CloseHandle  +
jmp loc_1012A45  +
call ds:__imp_GetLastError  +
mov ecx Reserved +
cmp ecx offset Reserved +
jz loc_1012A45  +
test byte ptr [ecx+1Ch] 8 +
jz loc_1012A45  +
cmp byte ptr [ecx+19h] 2 +
jb loc_1012A45  +
push eax  +
push esi  +
push offset dword_100AB80  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B8D6  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_10015A4  +
leave   +
retn 4  +
***
jmp ds:NdrServerCall2  +
***
jmp ds:NdrAsyncServerCall  +
***
sbb al [eax+1] +
add [eax+eax*2] ch +
add [eax] eax +
inc esi  +
inc eax  +
add [eax] eax +
inc eax  +
add [eax] eax +
add byte ptr [eax+1] 0 +
xchg eax esp +
inc eax  +
add [eax] eax +
lods   +
inc eax  +
add [eax] eax +
retf 140h  +
***
retn 143h  +
***
retf 4E01h  +
***
dec ebx  +
jns $+3  +
retf   +
***
add gs:[eax] al +
retf 4802h  +
***
