mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
cmp eax 1Dh +
ja loc_100C2C8  +
movzx eax ds:byte_100C2EC[eax] +
jmp ds:off_100C2D4[eax*4]  +
mov ecx [ebp+arg_4] +
lea edx [ecx+ecx] +
mov eax (offset asc_101C000+132h) +
sub eax edx +
cmp eax offset asc_101C000 +
jnb loc_100C2CD  +
mov eax offset asc_101C000 +
pop ebp  +
retn 8  +
mov eax [ebp+arg_4] +
lea ecx [eax+eax] +
mov eax (offset asc_101C138+132h) +
sub eax ecx +
cmp eax offset asc_101C138 +
jnb loc_100C2CD  +
mov eax offset asc_101C138 +
pop ebp  +
retn 8  +
mov edx [ebp+arg_4] +
lea ecx [edx+edx] +
mov eax (offset asc_101C270+132h) +
sub eax ecx +
cmp eax offset asc_101C270 +
jnb loc_100C2CD  +
mov eax offset asc_101C270 +
pop ebp  +
retn 8  +
mov edx [ebp+arg_4] +
lea ecx [edx+edx] +
mov eax (offset asc_101C3B8+132h) +
sub eax ecx +
cmp eax offset asc_101C3B8 +
jnb loc_100C2CD  +
mov eax offset asc_101C3B8 +
pop ebp  +
retn 8  +
mov edx [ebp+arg_4] +
lea ecx [edx+edx] +
mov eax (offset asc_101C4F0+132h) +
sub eax ecx +
cmp eax offset asc_101C4F0 +
jnb loc_100C2CD  +
mov eax offset asc_101C4F0 +
pop ebp  +
retn 8  +
mov eax offset word_10014D0 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
nop   +
mov eax off_101C9E0[esi] +
push ebx  +
push eax  +
call ds:_wcsicmp  +
add esp 8 +
test eax eax +
jz loc_100C34A  +
add esi 14h +
inc edi  +
cmp esi 35Ch +
jb loc_100C320  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
mov ecx [ebp+arg_4] +
mov [ecx] edi +
pop edi  +
pop esi  +
mov eax 1 +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100C3C4  +
mov eax [esi] +
mov edx [eax+18h] +
mov ecx esi +
call edx  +
or eax edx +
jz loc_100C3C4  +
mov eax [esi] +
mov edx [eax+24h] +
mov ecx esi +
call edx  +
push edx  +
push eax  +
mov eax [esi] +
mov edx [eax+20h] +
mov ecx esi +
call edx  +
push edx  +
push eax  +
mov eax [esi] +
mov edx [eax+28h] +
mov ecx esi +
call edx  +
push edx  +
push eax  +
mov eax [esi] +
mov edx [eax+1Ch] +
mov ecx esi +
call edx  +
push edx  +
push eax  +
mov eax [esi] +
mov edx [eax+18h] +
mov ecx esi +
call edx  +
push edx  +
push eax  +
push offset a8i64u5i64u5i64  +
call ds:wprintf  +
add esp 2Ch +
pop esi  +
pop ebp  +
retn 4  +
push offset a0  +
call ds:wprintf  +
add esp 4 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea eax [eax+eax*4] +
mov ecx dword_101C9DC[eax*4] +
push offset word_10014D0  +
push ecx  +
push offset aS  +
call ds:wprintf  +
add esp 0Ch +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push esi  +
mov esi [ebp+arg_8] +
lea eax [esi-1] +
cmp eax 29h +
ja loc_100D029  +
push ebx  +
push edi  +
jmp ds:off_100D034[eax*4]  +
mov eax [ebp+arg_4] +
mov edi [eax+8] +
xor ebx ebx +
test edi edi +
jz loc_100C468  +
lea ecx [ecx+0] +
push offset asc_1001698  +
call ds:wprintf  +
mov edi [edi+8] +
add esp 4 +
add ebx 2 +
test edi edi +
jnz loc_100C450  +
mov edx [ebp+arg_4] +
lea ecx [esi+esi*4] +
mov eax dword_101C9DC[ecx*4] +
mov ecx [edx+0Ch] +
add ecx 8 +
push ecx  +
sub eax ebx +
push eax  +
push eax  +
push offset a_Ws  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov edx [ebp+arg_4] +
mov eax [edx+0Ch] +
mov eax [eax+4] +
dec eax  +
cmp eax 5 +
ja loc_100C54F  +
jmp ds:off_100D0DC[eax*4]  +
mov eax offset aDb +
push eax  +
call ds:wprintf  +
add esp 4 +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax offset aOe +
push eax  +
call ds:wprintf  +
add esp 4 +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax offset aAe +
push eax  +
call ds:wprintf  +
add esp 4 +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax offset aPri +
push eax  +
call ds:wprintf  +
add esp 4 +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax offset aLv +
push eax  +
call ds:wprintf  +
add esp 4 +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax offset aIdx +
push eax  +
call ds:wprintf  +
add esp 4 +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax offset a??? +
push eax  +
call ds:wprintf  +
add esp 4 +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+0Ch] +
mov eax [edx+88h] +
jmp loc_100CFFC  +
mov eax [ebp+arg_4] +
mov ecx [eax+0Ch] +
mov edx [ecx+8Ch] +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
push edx  +
push ecx  +
push offset aD  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov edx [ebp+arg_4] +
mov eax [edx+10h] +
mov ecx [eax+0Ch] +
mov edx [eax+4] +
neg ecx  +
sbb ecx ecx +
and ecx 0FFFFFFFAh +
add ecx 73h +
push ecx  +
push edx  +
push 5  +
push offset aDC  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_4] +
mov ecx [eax+10h] +
mov edx [ecx+18h] +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
push edx  +
push ecx  +
push offset aD  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov edi [ebp+arg_4] +
mov edx [edi+10h] +
mov eax [edx+18h] +
mov ebx [ebp+arg_0] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __allrem  +
push 0  +
push 2710h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
test edx edx +
jl loc_100C667  +
jg loc_100C65E  +
cmp eax 5 +
jb loc_100C667  +
mov [ebp+arg_4] 1 +
jmp loc_100C66E  +
mov [ebp+arg_4] 0 +
mov eax [edi+10h] +
mov eax [eax+18h] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
mov ebx edx +
mov edi eax +
push ebx  +
push edi  +
call __allrem  +
push 0  +
push 3E8h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
add eax [ebp+arg_4] +
jmp loc_100CC28  +
mov eax [ebp+arg_4] +
mov ecx [eax+10h] +
mov edx [ecx+18h] +
fild  dword ptr [ecx+18h] +
test edx edx +
jge loc_100C6D1  +
fadd  ds:dbl_1001618 +
mov eax [ebp+arg_0] +
mov ecx [eax+44h] +
fild  dword ptr [eax+44h] +
test ecx ecx +
jge loc_100C6E4  +
fadd  ds:dbl_1001618 +
fdivp st(1) st +
sub esp 8 +
lea edx [esi+esi*4] +
mov eax dword_101C9DC[edx*4] +
dec eax  +
fmul  ds:dbl_1001610 +
fstp  [esp+1Ch+var_1C] +
push 2  +
push eax  +
push offset a_F  +
call ds:wprintf  +
add esp 14h +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+0Ch] +
cmp dword ptr [edx+4] 1 +
jz loc_100CA1F  +
mov eax [ebp+arg_0] +
mov eax [eax+5Ch] +
test eax eax +
jz loc_100CA1F  +
mov ecx [ecx+10h] +
mov edx [ecx+18h] +
fild  dword ptr [ecx+18h] +
test edx edx +
jge loc_100C74A  +
fadd  ds:dbl_1001618 +
mov [ebp+arg_4] eax +
fild  [ebp+arg_4] +
test eax eax +
jge loc_100C75A  +
fadd  ds:dbl_1001618 +
fdivp st(1) st +
sub esp 8 +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
dec ecx  +
fmul  ds:dbl_1001610 +
fstp  [esp+1Ch+var_1C] +
push 2  +
push ecx  +
push offset a_F  +
call ds:wprintf  +
add esp 14h +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+10h] +
mov eax [edx+1Ch] +
jmp loc_100CFFC  +
mov edi [ebp+arg_4] +
mov eax [edi+10h] +
mov eax [eax+1Ch] +
mov ebx [ebp+arg_0] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __allrem  +
push 0  +
push 2710h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
test edx edx +
jl loc_100C7F8  +
jg loc_100C7EF  +
cmp eax 5 +
jb loc_100C7F8  +
mov [ebp+arg_4] 1 +
jmp loc_100C7FF  +
mov [ebp+arg_4] 0 +
mov ecx [edi+10h] +
mov eax [ecx+1Ch] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
mov ebx edx +
mov edi eax +
push ebx  +
push edi  +
call __allrem  +
push 0  +
push 3E8h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
add eax [ebp+arg_4] +
jmp loc_100C97A  +
mov ecx [ebp+arg_4] +
mov edx [ecx+0Ch] +
cmp dword ptr [edx+4] 1 +
jz loc_100CA1F  +
mov eax [ebp+arg_0] +
mov eax [eax+5Ch] +
test eax eax +
jz loc_100CA1F  +
mov ecx [ecx+10h] +
mov edx [ecx+1Ch] +
fild  dword ptr [ecx+1Ch] +
test edx edx +
jge loc_100C87D  +
fadd  ds:dbl_1001618 +
mov [ebp+arg_4] eax +
fild  [ebp+arg_4] +
test eax eax +
jge loc_100C88D  +
fadd  ds:dbl_1001618 +
fdivp st(1) st +
sub esp 8 +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
dec ecx  +
fmul  ds:dbl_1001610 +
fstp  [esp+1Ch+var_1C] +
push 2  +
push ecx  +
push offset a_F  +
call ds:wprintf  +
add esp 14h +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+10h] +
mov eax [edx+20h] +
jmp loc_100CFFC  +
mov edi [ebp+arg_4] +
mov eax [edi+10h] +
mov eax [eax+20h] +
mov ebx [ebp+arg_0] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __allrem  +
push 0  +
push 2710h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
test edx edx +
jl loc_100C92B  +
jg loc_100C922  +
cmp eax 5 +
jb loc_100C92B  +
mov [ebp+arg_4] 1 +
jmp loc_100C932  +
mov [ebp+arg_4] 0 +
mov ecx [edi+10h] +
mov eax [ecx+20h] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
mov ebx edx +
mov edi eax +
push ebx  +
push edi  +
call __allrem  +
push 0  +
push 3E8h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
add eax [ebp+arg_4] +
push eax  +
push 0  +
push 400h  +
push ebx  +
push edi  +
call __alldiv  +
push eax  +
lea edx [esi+esi*4] +
mov eax dword_101C9DC[edx*4] +
sub eax 4 +
push eax  +
push offset aD_03d  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+0Ch] +
cmp dword ptr [edx+4] 1 +
jz loc_100CA1F  +
mov eax [ebp+arg_0] +
mov eax [eax+5Ch] +
test eax eax +
jz loc_100CA1F  +
mov ecx [ecx+10h] +
mov edx [ecx+20h] +
fild  dword ptr [ecx+20h] +
test edx edx +
jge loc_100C9DA  +
fadd  ds:dbl_1001618 +
mov [ebp+arg_4] eax +
fild  [ebp+arg_4] +
test eax eax +
jge loc_100C9EA  +
fadd  ds:dbl_1001618 +
fdivp st(1) st +
sub esp 8 +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
dec ecx  +
fmul  ds:dbl_1001610 +
fstp  [esp+1Ch+var_1C] +
push 2  +
push ecx  +
push offset a_F  +
call ds:wprintf  +
add esp 14h +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
lea edx [esi+esi*4] +
mov eax dword_101C9DC[edx*4] +
push offset word_10014D0  +
push eax  +
push offset aS  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+14h] +
cmp dword ptr [edx+4] 0 +
mov eax offset aYes +
jnz loc_100CA5E  +
mov eax offset aNo +
push eax  +
call ds:wprintf  +
add esp 4 +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_4] +
mov ecx [eax+14h] +
mov edx [ecx+8] +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
push edx  +
push ecx  +
push offset aD  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov edi [ebp+arg_4] +
mov edx [edi+14h] +
mov eax [edx+8] +
mov ebx [ebp+arg_0] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __allrem  +
push 0  +
push 2710h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
test edx edx +
jl loc_100CAFC  +
jg loc_100CAF3  +
cmp eax 5 +
jb loc_100CAFC  +
mov [ebp+arg_4] 1 +
jmp loc_100CB03  +
mov [ebp+arg_4] 0 +
mov eax [edi+14h] +
mov eax [eax+8] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
mov ebx edx +
mov edi eax +
push ebx  +
push edi  +
call __allrem  +
push 0  +
push 3E8h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
add eax [ebp+arg_4] +
jmp loc_100CC28  +
mov eax [ebp+arg_4] +
mov ecx [eax+14h] +
mov edx [ecx+0Ch] +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
push edx  +
push ecx  +
push offset aD  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov edi [ebp+arg_4] +
mov edx [edi+14h] +
mov eax [edx+0Ch] +
mov ebx [ebp+arg_0] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __allrem  +
push 0  +
push 2710h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
test edx edx +
jl loc_100CBD9  +
jg loc_100CBD0  +
cmp eax 5 +
jb loc_100CBD9  +
mov [ebp+arg_4] 1 +
jmp loc_100CBE0  +
mov [ebp+arg_4] 0 +
mov eax [edi+14h] +
mov eax [eax+0Ch] +
mul  dword ptr [ebx+24h] +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
push 0  +
push 400h  +
mov ebx edx +
mov edi eax +
push ebx  +
push edi  +
call __allrem  +
push 0  +
push 3E8h  +
push edx  +
push eax  +
call __allmul  +
push 0  +
push 400h  +
push edx  +
push eax  +
call __alldiv  +
add eax [ebp+arg_4] +
push eax  +
push 0  +
push 400h  +
push ebx  +
push edi  +
call __alldiv  +
lea ecx [esi+esi*4] +
mov edx dword_101C9DC[ecx*4] +
push eax  +
sub edx 4 +
push edx  +
push offset aD_03d  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_4] +
mov ecx [eax+14h] +
mov edx [ecx+10h] +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
push edx  +
push ecx  +
push offset aD  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov edx [ebp+arg_4] +
mov eax [edx+14h] +
mov ecx [eax+14h] +
test ecx ecx +
jz loc_100CCCD  +
mov edx [ecx] +
mov eax [edx+2Ch] +
call eax  +
sub esp 8 +
fstp  [esp+1Ch+var_1C] +
lea ecx [esi+esi*4] +
mov edx dword_101C9DC[ecx*4] +
push 2  +
push edx  +
push offset a_F_0  +
call ds:wprintf  +
add esp 14h +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
push offset aNA  +
push ecx  +
push offset aS  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov edx [ebp+arg_4] +
mov eax [edx+14h] +
mov ecx [eax+14h] +
mov edx [ecx] +
mov eax [edx+8] +
mov [ebp+arg_4] ecx +
call eax  +
mov ebx ds:wprintf +
xor edi edi +
mov [ebp+var_8] 34h +
mov [ebp+var_4] 0 +
mov esi offset dword_10015C0 +
cmp edi 0Ah +
jz loc_100CD2E  +
mov esi offset asc_10015BC +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov edx [edx+10h] +
lea eax [ebp+var_8] +
push eax  +
mov eax dword_101C72C[edi*8] +
push eax  +
mov eax dword_101C728[edi*8] +
push eax  +
call edx  +
push esi  +
test eax eax +
jnz loc_100CD67  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
push eax  +
push ecx  +
push 0Ah  +
push offset aI64uWs  +
call ebx  +
add esp 14h +
jmp loc_100CD75  +
push 0  +
push 0Ah  +
push offset aDWs  +
call ebx  +
add esp 10h +
inc edi  +
cmp edi 0Bh +
jb loc_100CD11  +
mov ecx [ebp+arg_4] +
mov edx [ecx] +
mov eax [edx+8] +
call eax  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+14h] +
mov eax [edx+18h] +
jmp loc_100CFFC  +
mov eax [ebp+arg_4] +
mov ecx [eax+14h] +
mov edx [ecx+1Ch] +
mov eax [edx+4] +
push eax  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+14h] +
mov eax [edx+1Ch] +
mov ecx [eax+8] +
push ecx  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov edx [ebp+arg_4] +
mov eax [edx+14h] +
mov ecx [eax+1Ch] +
mov edx [ecx+0Ch] +
push edx  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_4] +
mov ecx [eax+14h] +
mov edx [ecx+1Ch] +
mov eax [edx+14h] +
push eax  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+18h] +
mov eax [edx+4] +
push eax  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+18h] +
mov eax [edx+8] +
push eax  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+18h] +
mov eax [edx+0Ch] +
push eax  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+18h] +
mov eax [edx+10h] +
push eax  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+18h] +
mov eax [edx+14h] +
push eax  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+18h] +
mov eax [edx+18h] +
push eax  +
call sub_100C360  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+0Ch] +
mov eax [edx+90h] +
test eax eax +
jz loc_100D021  +
mov eax [eax+4] +
lea ecx [esi+esi*4] +
mov edx dword_101C9DC[ecx*4] +
push eax  +
dec edx  +
push edx  +
push offset aD_0  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_4] +
mov ecx [eax+0Ch] +
mov eax [ecx+90h] +
test eax eax +
jz loc_100D021  +
mov edx [eax+8] +
shr edx 0Ah +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
push edx  +
push ecx  +
push offset aD  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov edx [ebp+arg_4] +
mov eax [edx+0Ch] +
mov eax [eax+90h] +
test eax eax +
jz loc_100D021  +
mov ecx [eax+0Ch] +
lea edx [esi+esi*4] +
mov eax dword_101C9DC[edx*4] +
push ecx  +
push eax  +
push offset asc_1001584  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+0Ch] +
mov eax [edx+90h] +
test eax eax +
jz loc_100D021  +
mov eax [eax+10h] +
jmp loc_100CEC5  +
mov eax [ebp+arg_4] +
mov ecx [eax+0Ch] +
mov eax [ecx+90h] +
test eax eax +
jz loc_100D021  +
mov edx [eax+14h] +
lea eax [esi+esi*4] +
mov ecx dword_101C9DC[eax*4] +
push edx  +
dec ecx  +
push ecx  +
jmp loc_100CED2  +
mov edx [ebp+arg_4] +
mov eax [edx+0Ch] +
mov eax [eax+90h] +
test eax eax +
jz loc_100D021  +
mov ecx [eax+18h] +
shr ecx 0Ah +
lea edx [esi+esi*4] +
mov eax dword_101C9DC[edx*4] +
push ecx  +
push eax  +
push offset aD  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
mov ecx [ebp+arg_4] +
mov edx [ecx+0Ch] +
mov eax [edx+90h] +
test eax eax +
jz loc_100D021  +
mov eax [eax+1Ch] +
shr eax 0Ah +
lea ecx [esi+esi*4] +
mov edx dword_101C9DC[ecx*4] +
push eax  +
push edx  +
push offset aD  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
push esi  +
call sub_100C3E0  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100D117  +
mov eax 0FFFFFC15h +
pop edi  +
pop ebp  +
retn 4  +
push esi  +
push 80h  +
call ds:__imp_malloc  +
add esp 4 +
mov esi eax +
push 80h  +
test esi esi +
jnz loc_100D14A  +
push offset aFailedToAlloca  +
call ds:wprintf  +
add esp 8 +
pop esi  +
mov eax 0FFFFFC0Dh +
pop edi  +
pop ebp  +
retn 4  +
push 0  +
push esi  +
call memset  +
mov eax 20h +
xor ecx ecx +
add esp 0Ch +
mov [esi+0Ch] ax +
mov dword ptr [esi+18h] 0 +
mov [esi+0Eh] cx +
mov [edi] esi +
pop esi  +
xor eax eax +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ds:wprintf +
push edi  +
movzx edi word ptr [ebp+arg_4] +
push edi  +
push offset aC  +
call esi  +
mov ebx [ebp+arg_8] +
push edi  +
push ebx  +
push offset aWsspaceUsageOp  +
call esi  +
push edi  +
push offset aC  +
call esi  +
push edi  +
push ebx  +
push offset aWsFFieldFieldC  +
call esi  +
mov eax [ebp+arg_C] +
push edi  +
push eax  +
push ebx  +
push offset aWsWsSpaceInfoF  +
call esi  +
mov ecx [ebp+arg_C] +
push edi  +
push ecx  +
push ebx  +
push offset aWsWsSetsOfFiel  +
call esi  +
mov edx [ebp+arg_C] +
add esp 48h +
push edi  +
push edx  +
push ebx  +
push offset aWsWsFSpacehint  +
call esi  +
mov eax [ebp+arg_C] +
push edi  +
push eax  +
push ebx  +
push offset aWsWsForTheObje  +
call esi  +
mov ecx [ebp+arg_C] +
push edi  +
push ecx  +
push ebx  +
push offset aWsWsFDefaultPr  +
call esi  +
mov edx [ebp+arg_C] +
push edi  +
push edx  +
push ebx  +
push offset aWsWsFLegacyPri  +
call esi  +
mov eax [ebp+arg_C] +
add esp 40h +
push edi  +
push eax  +
push ebx  +
push offset aWsWsFields_C  +
call esi  +
mov ecx [ebp+arg_C] +
push edi  +
push ecx  +
push ebx  +
push offset aWsWsFAllPrintO  +
call esi  +
mov edx [ebp+arg_C] +
push edi  +
push edx  +
push ebx  +
push offset aWsWsWhichWeCol  +
call esi  +
mov eax [ebp+arg_C] +
push edi  +
push eax  +
push ebx  +
push offset aWsWsIndependan  +
call esi  +
mov eax ebx +
add esp 40h +
mov [ebp+arg_4] 0 +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D251  +
mov ecx [ebp+arg_C] +
sub eax edx +
lea edx [ecx+2] +
sar eax 1 +
mov [ebp+var_C] edx +
lea esp [esp+0] +
mov dx [ecx] +
add ecx 2 +
test dx dx +
jnz loc_100D270  +
sub ecx [ebp+var_C] +
mov edx 1 +
sar ecx 1 +
add eax ecx +
mov [ebp+var_C] eax +
mov [ebp+var_8] edx +
jmp loc_100D296  +
mov edx [ebp+var_8] +
mov eax [ebp+var_C] +
cmp [ebp+arg_4] eax +
jnb loc_100D2B7  +
push eax  +
push 20h  +
call sub_100C210  +
push eax  +
push offset aWs  +
call esi  +
mov eax [ebp+var_C] +
mov edx [ebp+var_8] +
add esp 8 +
add [ebp+arg_4] eax +
mov [ebp+var_4] offset dword_10015C0 +
cmp edx 2Ah +
jz loc_100D2CA  +
mov [ebp+var_4] offset asc_100176C +
cmp eax [ebp+arg_4] +
jz loc_100D334  +
mov eax [ebp+var_4] +
lea ecx [eax+2] +
mov [ebp+var_10] ecx +
jmp loc_100D2E0  +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D2E0  +
sub eax [ebp+var_10] +
sar eax 1 +
mov [ebp+var_14] eax +
lea eax [edx+edx*4] +
mov eax off_101C9E0[eax*4] +
lea ecx [eax+2] +
mov [ebp+var_10] ecx +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D303  +
sub eax [ebp+var_10] +
mov ecx [ebp+var_14] +
sar eax 1 +
add eax ecx +
add eax [ebp+arg_4] +
cmp eax [ebp+arg_0] +
jb loc_100D334  +
push edi  +
push offset aC  +
call esi  +
add esp 8 +
mov [ebp+arg_4] 0 +
jmp loc_100D387  +
lea ebx [edx+edx*4] +
mov edx [ebp+var_4] +
mov eax off_101C9E0[ebx*4] +
push edx  +
push eax  +
push offset aWsWs  +
call esi  +
mov eax off_101C9E0[ebx*4] +
add esp 0Ch +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D357  +
mov ecx [ebp+var_4] +
sub eax edx +
sar eax 1 +
lea ebx [ecx+2] +
lea esp [esp+0] +
mov dx [ecx] +
add ecx 2 +
test dx dx +
jnz loc_100D370  +
sub ecx ebx +
mov ebx [ebp+arg_8] +
sar ecx 1 +
add ecx eax +
add [ebp+arg_4] ecx +
mov eax [ebp+var_8] +
inc eax  +
mov [ebp+var_8] eax +
cmp eax 2Bh +
jb loc_100D290  +
mov eax [ebp+arg_C] +
lea edx [eax+2] +
lea ecx [ecx+0] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D3A0  +
sub eax edx +
sar eax 1 +
push edi  +
add eax 0FFFFFFFCh +
push eax  +
push 20h  +
call sub_100C210  +
push eax  +
push ebx  +
push offset aWsCsvWsPrintAl  +
call esi  +
push edi  +
push offset aC  +
call esi  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ecx+4] +
xor eax eax +
test esi esi +
jbe loc_100D418  +
mov edx [ecx+8] +
jmp loc_100D400  +
mov ecx [edx] +
lea ecx [ecx+ecx*4] +
mov ecx dword_101C9DC[ecx*4] +
add edx 4 +
sub esi 1 +
lea eax [eax+ecx+1] +
jnz loc_100D400  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax offset aSpaceDump +
mov [ebp+var_10] 0 +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D447  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
sub eax edx +
push edi  +
sar eax 1 +
push ebx  +
mov esi eax +
call sub_100D3E0  +
cmp esi eax +
jbe loc_100D481  +
mov eax offset aSpaceDump +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D470  +
sub eax edx +
sar eax 1 +
jmp loc_100D487  +
push ebx  +
call sub_100D3E0  +
mov esi ds:wprintf +
push offset aSpaceDump  +
push offset aWs_0  +
mov [ebp+var_8] eax +
call esi  +
mov eax offset aSpaceDump +
add esp 8 +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D4A7  +
mov edi [ebp+var_8] +
sub eax edx +
sar eax 1 +
sub edi eax +
mov eax 0 +
mov [ebp+arg_4] eax +
jz loc_100D50C  +
jmp loc_100D4CA  +
mov eax [ebp+arg_4] +
cmp eax [ebx+4] +
jnb loc_100D50C  +
mov ecx [ebx+8] +
mov eax [ecx+eax*4] +
lea edx [eax+eax*4] +
mov esi dword_101C9DC[edx*4] +
inc esi  +
cmp edi esi +
jnb loc_100D4E6  +
mov esi edi +
push esi  +
push 2Ah  +
call sub_100C210  +
push eax  +
push offset aWs_0  +
call ds:wprintf  +
inc [ebp+arg_4]  +
sub edi esi +
mov esi ds:wprintf +
add esp 8 +
test edi edi +
jnz loc_100D4C7  +
push offset asc_1001570  +
call esi  +
xor eax eax +
add esp 4 +
mov [ebp+var_C] eax +
mov [ebp+arg_4] eax +
cmp [ebx+4] eax +
jbe loc_100D725  +
mov eax [ebx+8] +
mov ecx [ebp+arg_4] +
mov eax [eax+ecx*4] +
lea edx [eax+eax*4] +
mov eax dword_101C9E4[edx*4] +
xor edi edi +
mov [ebp+var_4] edi +
cmp eax edi +
jz loc_100D571  +
mov [ebp+var_C] 1 +
lea ebx [ebx+0] +
cmp word ptr [eax] 0 +
jz loc_100D56E  +
push 2Ch  +
push eax  +
call ds:wcschr  +
add esp 8 +
test eax eax +
jz loc_100D56E  +
add eax 2 +
inc edi  +
test eax eax +
jnz loc_100D550  +
mov [ebp+var_4] edi +
mov eax [ebx+8] +
mov ecx [ebp+arg_4] +
mov eax [eax+ecx*4] +
cmp eax 1 +
jz loc_100D64B  +
cmp eax 2 +
jz loc_100D64B  +
cmp word ptr [ebx+0Ch] 2Ch +
jnz loc_100D5FA  +
cmp word ptr [ebx+0Eh] 0 +
jnz loc_100D5FA  +
lea edi [eax+eax*4] +
add edi edi +
add edi edi +
cmp dword_101C9E4[edi] 0 +
jz loc_100D5FA  +
mov edx off_101C9E0[edi] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D5B5  +
push edx  +
mov edx [ebp+var_4] +
sub eax esi +
push edx  +
sar eax 1 +
push 2Ch  +
mov esi eax +
call sub_100C210  +
push eax  +
mov eax dword_101C9DC[edi] +
sub eax esi +
sub eax [ebp+var_4] +
push eax  +
push 20h  +
call sub_100C210  +
push eax  +
push offset aWsWsWs  +
call ds:wprintf  +
add esp 10h +
jmp loc_100D68F  +
lea ecx [eax+eax*4] +
mov eax off_101C9E0[ecx*4] +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100D607  +
mov ecx [ebp+arg_4] +
sub eax edx +
mov edx [ebx+8] +
mov ecx [edx+ecx*4] +
lea ecx [ecx+ecx*4] +
add ecx ecx +
mov edx off_101C9E0[ecx+ecx] +
add ecx ecx +
mov ecx dword_101C9DC[ecx] +
sar eax 1 +
push edx  +
sub ecx eax +
push ecx  +
push 20h  +
call sub_100C210  +
push eax  +
push offset aWsWs  +
call esi  +
add esp 0Ch +
jmp loc_100D695  +
lea ecx [eax+eax*4] +
add ecx ecx +
mov edi off_101C9E0[ecx+ecx] +
add ecx ecx +
mov eax edi +
lea esi [eax+2] +
mov edi edi +
mov dx [eax] +
add eax 2 +
test dx dx +
jnz loc_100D660  +
mov edx dword_101C9DC[ecx] +
sub eax esi +
sar eax 1 +
sub edx eax +
push edx  +
push 20h  +
call sub_100C210  +
push eax  +
push edi  +
push offset aWsWs  +
call ds:wprintf  +
add esp 0Ch +
mov esi ds:wprintf +
mov eax [ebx+4] +
mov edi [ebp+arg_4] +
dec eax  +
cmp edi eax +
lea eax [ebx+0Ch] +
jnz loc_100D6A8  +
mov eax offset asc_1001570 +
push eax  +
push offset aWs_0  +
call esi  +
inc edi  +
add esp 8 +
mov [ebp+arg_4] edi +
cmp edi [ebx+4] +
jb loc_100D527  +
cmp [ebp+var_C] 0 +
jz loc_100D725  +
xor edi edi +
cmp [ebx+4] edi +
jbe loc_100D725  +
lea ecx [ecx+0] +
mov ecx [ebx+8] +
mov eax [ecx+edi*4] +
lea eax [eax+eax*4] +
add eax eax +
mov ecx dword_101C9E4[eax+eax] +
add eax eax +
test ecx ecx +
jz loc_100D6EB  +
push ecx  +
jmp loc_100D6FA  +
mov edx dword_101C9DC[eax] +
push edx  +
push 20h  +
call sub_100C210  +
push eax  +
push offset aWs_0  +
call esi  +
mov eax [ebx+4] +
dec eax  +
add esp 8 +
cmp edi eax +
lea eax [ebx+0Ch] +
jnz loc_100D714  +
mov eax offset asc_1001570 +
push eax  +
push offset aWs_0  +
call esi  +
inc edi  +
add esp 8 +
cmp edi [ebx+4] +
jb loc_100D6D0  +
mov edi [ebp+var_8] +
xor eax eax +
mov [ebp+arg_4] eax +
test edi edi +
jz loc_100D778  +
jmp loc_100D736  +
mov eax [ebp+arg_4] +
cmp eax [ebx+4] +
jnb loc_100D778  +
mov ecx [ebx+8] +
mov eax [ecx+eax*4] +
lea edx [eax+eax*4] +
mov esi dword_101C9DC[edx*4] +
inc esi  +
cmp edi esi +
jnb loc_100D752  +
mov esi edi +
push esi  +
push 3Dh  +
call sub_100C210  +
push eax  +
push offset aWs_0  +
call ds:wprintf  +
inc [ebp+arg_4]  +
sub edi esi +
mov esi ds:wprintf +
add esp 8 +
test edi edi +
jnz loc_100D733  +
push offset asc_1001570  +
call esi  +
xor edi edi +
add esp 4 +
cmp [ebx+4] edi +
jbe loc_100D7D0  +
mov esi [ebp+arg_0] +
lea esp [esp+0] +
mov eax [ebx+8] +
mov ecx [eax+edi*4] +
push ecx  +
push esi  +
push ebx  +
call sub_100C420  +
mov [ebp+var_10] eax +
test eax eax +
jl loc_100D7DD  +
mov edx [ebx+4] +
dec edx  +
lea eax [ebx+0Ch] +
cmp edi edx +
jnz loc_100D7B5  +
mov eax offset asc_1001570 +
push eax  +
push offset aWs_0  +
call ds:wprintf  +
inc edi  +
add esp 8 +
cmp edi [ebx+4] +
jb loc_100D790  +
mov esi ds:wprintf +
push offset asc_1001570  +
call esi  +
mov eax [ebp+var_10] +
add esp 4 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
xor edi edi +
cmp [esi+4] eax +
jbe loc_100D843  +
push ebx  +
mov eax [esi+8] +
mov ecx [eax+edi*4] +
mov edx [ebp+arg_4] +
push ecx  +
push edx  +
push esi  +
call sub_100C420  +
mov ebx eax +
test ebx ebx +
jl loc_100D840  +
mov eax [esi+4] +
dec eax  +
cmp edi eax +
lea eax [esi+0Ch] +
jnz loc_100D82B  +
mov eax offset asc_1001570 +
push eax  +
push offset aWs_0  +
call ds:wprintf  +
inc edi  +
add esp 8 +
cmp edi [esi+4] +
jb loc_100D804  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
test eax eax +
jnz loc_100D863  +
pop ebp  +
retn 4  +
mov ecx [eax+0Ch] +
xor eax eax +
cmp dword ptr [ecx+88h] 1 +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
test eax eax +
jnz loc_100D893  +
pop ebp  +
retn 4  +
mov ecx [eax+0Ch] +
xor eax eax +
cmp dword ptr [ecx+4] 4 +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
test eax eax +
jnz loc_100D8C3  +
pop ebp  +
retn 4  +
mov ecx [eax+0Ch] +
xor eax eax +
cmp dword ptr [ecx+4] 5 +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
test eax eax +
jnz loc_100D8F3  +
pop ebp  +
retn 4  +
mov ecx [eax+0Ch] +
xor eax eax +
cmp dword ptr [ecx+4] 6 +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi [ebp+8] +
cmp dword ptr [edi] 1Ch +
mov dword ptr [ebp-4] 0 +
jz loc_100D940  +
push offset aTheEseEngineDi  +
call ds:wprintf  +
add esp 4 +
mov eax 0FFFFFC15h +
pop edi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov eax [edi+0Ch] +
test eax eax +
jnz loc_100D961  +
push offset aTheEseEngine_0  +
call ds:wprintf  +
add esp 4 +
mov eax 0FFFFFC15h +
pop edi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ebx  +
mov ebx [eax+4] +
mov [ebp+8] ebx +
test ebx ebx +
jle loc_100DC8E  +
cmp ebx 6 +
jg loc_100DC8E  +
cmp ebx 1 +
jnz loc_100D9C7  +
cmp dword ptr [edi+10h] 0 +
mov eax [ebp+0Ch] +
jz loc_100D9B8  +
mov ecx [edi+10h] +
mov edx [ecx+18h] +
mov [eax+44h] edx +
mov ecx [edi+10h] +
mov ecx [ecx+18h] +
mov [eax+60h] ecx +
mov edx [edi+10h] +
sub ecx [edx+1Ch] +
mov [eax+60h] ecx +
mov ecx [edi+10h] +
mov edx [ecx+1Ch] +
add [eax+48h] edx +
mov ecx [edi+14h] +
test ecx ecx +
jz loc_100D9B8  +
mov ecx [ecx+0Ch] +
sub [eax+60h] ecx +
push eax  +
push edi  +
call sub_100D430  +
pop ebx  +
pop edi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push esi  +
mov esi [ebp+0Ch] +
inc dword ptr [esi+ebx*4+28h]  +
mov eax [edi+10h] +
test eax eax +
jz loc_100DA0C  +
mov edx [edi+0Ch] +
cmp dword ptr [edx+4] 4 +
jnz loc_100D9E5  +
mov eax [eax+18h] +
mov [esi+5Ch] eax +
mov ecx [edi+10h] +
mov edx [ecx+1Ch] +
add [esi+48h] edx +
cmp ebx 2 +
jnz loc_100D9FE  +
mov eax [edi+10h] +
mov ecx [eax+18h] +
add [esi+4Ch] ecx +
jmp loc_100DA0C  +
cmp ebx 3 +
jnz loc_100DA0C  +
mov edx [edi+10h] +
mov eax [edx+18h] +
add [esi+50h] eax +
cmp dword ptr [edi+14h] 0 +
jz loc_100DA24  +
mov ecx [edi+14h] +
mov edx [ecx+8] +
add [esi+54h] edx +
mov eax [edi+14h] +
mov ecx [eax+0Ch] +
add [esi+58h] ecx +
mov edx [edi+10h] +
test edx edx +
jz loc_100DC11  +
cmp dword ptr [edi+14h] 0 +
jz loc_100DC11  +
push edi  +
call sub_100D850  +
test eax eax +
jz loc_100DA49  +
mov edx [edx+18h] +
sub [esi+60h] edx +
cmp ebx 4 +
jnz loc_100DB3C  +
mov eax [esi+68h] +
test eax eax +
jnz loc_100DA64  +
cmp [esi+74h] eax +
jz loc_100DB0A  +
test eax eax +
mov ebx ds:wprintf +
jz loc_100DAB0  +
test eax eax +
jge loc_100DA87  +
push eax  +
mov eax [esi+64h] +
push eax  +
push offset aDatabaseIssueO  +
call ebx  +
mov ecx [esi+68h] +
add esp 0Ch +
add [esi+7Ch] ecx +
jmp loc_100DAA2  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_100DA9C  +
mov edx [esi+64h] +
push eax  +
push edx  +
push offset aTableObjidDLea  +
call ebx  +
add esp 0Ch +
mov eax [esi+68h] +
add [esi+78h] eax +
mov dword ptr [esi+64h] 0 +
mov dword ptr [esi+68h] 0 +
mov eax [esi+74h] +
test eax eax +
jz loc_100DB07  +
jge loc_100DAD0  +
mov ecx [esi+6Ch] +
push eax  +
push ecx  +
push offset aDatabaseIssueO  +
call ebx  +
mov edx [esi+74h] +
add esp 0Ch +
add [esi+7Ch] edx +
jmp loc_100DAFC  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_100DAF6  +
cmp dword ptr [esi+70h] 5 +
mov ecx offset aLv_0 +
jz loc_100DAE6  +
mov ecx offset aIndex +
push eax  +
mov eax [esi+6Ch] +
push eax  +
push ecx  +
push offset aWsObjidDLeaked  +
call ebx  +
add esp 10h +
mov ecx [esi+74h] +
add [esi+78h] ecx +
xor eax eax +
mov [esi+6Ch] eax +
mov [esi+70h] eax +
mov [esi+74h] eax +
mov ebx [ebp+8] +
mov edx [edi+0Ch] +
mov eax [edx+88h] +
mov [esi+64h] eax +
mov ecx [edi+10h] +
mov eax [ecx+18h] +
mov [esi+68h] eax +
mov edx [edi+10h] +
sub eax [edx+1Ch] +
mov [esi+68h] eax +
mov ecx [edi+14h] +
sub eax [ecx+8] +
mov [esi+68h] eax +
mov edx [edi+14h] +
sub eax [edx+0Ch] +
mov [esi+68h] eax +
jmp loc_100DB59  +
push edi  +
call sub_100D880  +
test eax eax +
jz loc_100DB4F  +
mov eax [edi+10h] +
mov ecx [eax+18h] +
sub [esi+68h] ecx +
cmp ebx 5 +
jz loc_100DB7F  +
cmp ebx 6 +
jz loc_100DB7F  +
push edi  +
call sub_100D8B0  +
test eax eax +
jnz loc_100DB71  +
push edi  +
call sub_100D8E0  +
test eax eax +
jz loc_100DC11  +
mov edx [edi+10h] +
mov eax [edx+18h] +
sub [esi+74h] eax +
jmp loc_100DC11  +
mov eax [esi+74h] +
test eax eax +
jz loc_100DBDE  +
jge loc_100DBA3  +
mov ecx [esi+6Ch] +
push eax  +
push ecx  +
push offset aDatabaseIssueO  +
call ds:wprintf  +
mov edx [esi+74h] +
add esp 0Ch +
add [esi+7Ch] edx +
jmp loc_100DBD3  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_100DBCD  +
cmp dword ptr [esi+70h] 5 +
mov ecx offset aLv_0 +
jz loc_100DBB9  +
mov ecx offset aIndex +
push eax  +
mov eax [esi+6Ch] +
push eax  +
push ecx  +
push offset aWsObjidDLeaked  +
call ds:wprintf  +
add esp 10h +
mov ecx [esi+74h] +
add [esi+78h] ecx +
xor eax eax +
mov [esi+6Ch] eax +
mov [esi+70h] eax +
mov [esi+74h] eax +
mov edx [edi+0Ch] +
mov eax [edx+88h] +
mov [esi+6Ch] eax +
mov [esi+70h] ebx +
mov ecx [edi+10h] +
mov eax [ecx+18h] +
mov [esi+74h] eax +
mov edx [edi+10h] +
sub eax [edx+1Ch] +
mov [esi+74h] eax +
mov ecx [edi+14h] +
sub eax [ecx+8] +
mov [esi+74h] eax +
mov edx [edi+14h] +
sub eax [edx+0Ch] +
mov [esi+74h] eax +
lea eax [ebx-2] +
cmp eax 4 +
ja loc_100DC82  +
jmp ds:off_100DCAC[eax*4]  +
cmp dword ptr [esi+18h] 0 +
jz loc_100DC82  +
cmp dword ptr [esi+14h] 0 +
jnz loc_100DC78  +
mov eax [edi+10h] +
test eax eax +
jz loc_100DC78  +
mov eax [eax+18h] +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
test eax eax +
jge loc_100DC46  +
fadd  ds:dbl_1001618 +
mov ecx [esi+44h] +
fild  dword ptr [esi+44h] +
test ecx ecx +
jge loc_100DC56  +
fadd  ds:dbl_1001618 +
fdivp st(1) st +
fcomp  dbl_101C628 +
fnstsw  ax +
test ah 5 +
jp loc_100DC78  +
mov eax [ebp-4] +
mov dword ptr [esi+20h] 1 +
pop esi  +
pop ebx  +
pop edi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push edi  +
push esi  +
call sub_100D7F0  +
mov [ebp-4] eax +
mov eax [ebp-4] +
pop esi  +
pop ebx  +
pop edi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ebx  +
push offset aUnknownBtreeEn  +
call ds:wprintf  +
add esp 8 +
pop ebx  +
mov eax 0FFFFFC15h +
pop edi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_100DF75  +
cmp [ebp+arg_4] 0 +
jnz loc_100DF75  +
cmp dword ptr [esi+20h] 0 +
push ebx  +
mov ebx ds:wprintf +
jz loc_100DD18  +
fld  dbl_101C628 +
sub esp 8 +
fmul  ds:dbl_1001610 +
fstp  [esp+20h+var_20] +
push offset aNoteSomeSmallT  +
call ebx  +
add esp 0Ch +
push esi  +
call sub_100D3E0  +
xor ecx ecx +
mov [ebp+arg_0] eax +
mov [ebp+var_4] ecx +
test eax eax +
jz loc_100DD74  +
jmp loc_100DD36  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
cmp ecx [esi+4] +
jnb loc_100DD74  +
mov edx [esi+8] +
mov ecx [edx+ecx*4] +
lea ecx [ecx+ecx*4] +
mov edi dword_101C9DC[ecx*4] +
inc edi  +
cmp eax edi +
jnb loc_100DD52  +
mov edi eax +
push edi  +
push 2Dh  +
call sub_100C210  +
push eax  +
push offset aWs_0  +
call ebx  +
mov eax [ebp+arg_0] +
inc [ebp+var_4]  +
sub eax edi +
add esp 8 +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_100DD30  +
push offset asc_1001570  +
call ebx  +
push offset asc_1001570  +
call ebx  +
mov edx [esi+38h] +
push edx  +
push offset aEnumeratedDTab  +
call ebx  +
add esp 10h +
test byte ptr [esi] 2 +
jz loc_100DDA6  +
mov eax [esi+34h] +
add eax [esi+30h] +
push eax  +
push offset aDInternalTrees  +
call ebx  +
add esp 8 +
mov ecx [esi+40h] +
mov edx [esi+3Ch] +
push ecx  +
push edx  +
push offset aDLongValueTree  +
call ebx  +
push offset asc_1001570  +
call ebx  +
add esp 10h +
test byte ptr [esi] 2 +
jz loc_100DF74  +
mov eax [esi+44h] +
push eax  +
push offset aPagesD  +
call ebx  +
fild  dword ptr [esi+44h] +
mov ecx [esi+44h] +
add esp 8 +
test ecx ecx +
jge loc_100DDE6  +
fadd  ds:dbl_1001618 +
mov edx [esi+48h] +
fild  dword ptr [esi+48h] +
test edx edx +
jge loc_100DDF6  +
fadd  ds:dbl_1001618 +
test byte ptr [esi] 4 +
fdiv st st(1) +
fld  ds:dbl_1001610 +
fmul st(1) st +
fxch  st(1) +
fst  [ebp+var_C] +
jnz loc_100DE55  +
fstp  st(2) +
sub esp 8 +
mov eax ecx +
fxch  st(1) +
fstp  [esp+20h+var_20] +
sub eax edx +
push edx  +
mov edx eax +
mov [ebp+arg_0] edx +
fild  [ebp+arg_0] +
test edx edx +
jge loc_100DE2B  +
fadd  ds:dbl_1001618 +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
test ecx ecx +
jge loc_100DE3B  +
fadd  ds:dbl_1001618 +
fdivp st(1) st +
sub esp 8 +
fmulp st(1) st +
fstp  [esp+2Ch+var_2C] +
push eax  +
push offset aDUsed_1fDAvail  +
call ebx  +
add esp 1Ch +
jmp loc_100DF3D  +
mov eax [esi+58h] +
fstp  st +
mov ecx eax +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
test ecx ecx +
jge loc_100DE6C  +
fadd  ds:dbl_1001618 +
fdivrp st(2) st +
sub esp 8 +
fmulp st(1) st +
fstp  [esp+20h+var_20] +
push eax  +
push offset aDData_1f  +
call ebx  +
mov eax [esi+54h] +
add eax [esi+50h] +
add eax [esi+4Ch] +
mov edx eax +
mov [ebp+arg_0] edx +
fild  [ebp+arg_0] +
test edx edx +
jge loc_100DE99  +
fadd  ds:dbl_1001618 +
mov ecx [esi+44h] +
fild  dword ptr [esi+44h] +
test ecx ecx +
jge loc_100DEA9  +
fadd  ds:dbl_1001618 +
fdivp st(1) st +
add esp 8 +
fmul  ds:dbl_1001610 +
fstp  [esp+20h+var_20] +
push eax  +
push offset aDOverhead_1f  +
call ebx  +
add esp 10h +
cmp dword ptr [esi+1Ch] 0 +
jz loc_100DF0B  +
cmp dword ptr [esi+38h] 1 +
jbe loc_100DF0B  +
mov ecx [esi+60h] +
mov eax [esi+78h] +
mov edx [esi+44h] +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
mov [ebp+var_4] eax +
fiadd  [ebp+var_4] +
fild  dword ptr [esi+44h] +
test edx edx +
jge loc_100DEF0  +
fadd  ds:dbl_1001618 +
fdivp st(1) st +
sub esp 8 +
add ecx eax +
fmul  ds:dbl_1001610 +
fstp  [esp+20h+var_20] +
push ecx  +
push offset aDLeaked_1f  +
call ebx  +
add esp 10h +
fld  [ebp+var_C] +
mov eax [esi+48h] +
sub esp 8 +
fstp  [esp+20h+var_20] +
push eax  +
push offset aDAvailable_1f  +
call ebx  +
push offset asc_1001570  +
call ebx  +
mov eax [esi+7Ch] +
add esp 14h +
test eax eax +
jz loc_100DF3D  +
neg eax  +
push eax  +
push offset aThereAreDOverb  +
call ebx  +
add esp 8 +
mov eax [esi+24h] +
mul  dword ptr [esi+44h] +
test edx edx +
jl loc_100DF6A  +
jg loc_100DF50  +
cmp eax 6400000h +
jbe loc_100DF6A  +
fld  ds:dbl_1001F50 +
fcomp  [ebp+var_C] +
fnstsw  ax +
test ah 5 +
jp loc_100DF6A  +
push offset aNoteThisDataba  +
call ebx  +
add esp 4 +
push offset asc_1001570  +
call ebx  +
add esp 4 +
pop ebx  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_100DF93  +
cmp [ebp+arg_4] 0 +
jnz loc_100DF93  +
mov eax [esi+78h] +
add eax [esi+60h] +
neg eax  +
sbb eax eax +
and eax 0FFFFFB4Ah +
mov [ebp+arg_4] eax +
mov eax [esi+8] +
mov edi ds:__imp_free +
test eax eax +
jz loc_100DFA6  +
push eax  +
call edi  +
add esp 4 +
push esi  +
call edi  +
mov eax [ebp+arg_4] +
add esp 4 +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
mov eax 0 +
jz loc_100DFD9  +
cmp edx 7FFFFFFFh +
jbe loc_100DFDE  +
mov eax 80070057h +
test eax eax +
jl loc_100E043  +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
xor eax eax +
push edi  +
mov esi edx +
test edx edx +
jz loc_100E033  +
mov edi [ebp+arg_8] +
mov ebx 7FFFFFFEh +
sub ebx edx +
sub edi ecx +
lea esp [esp+0] +
lea edx [ebx+esi] +
test edx edx +
jz loc_100E02F  +
movzx edx word ptr [edi+ecx] +
test dx dx +
jz loc_100E02F  +
mov [ecx] dx +
add ecx 2 +
sub esi 1 +
jnz loc_100E000  +
pop edi  +
sub ecx 2 +
xor edx edx +
pop esi  +
mov eax 8007007Ah +
mov [ecx] dx +
pop ebx  +
pop ebp  +
retn 0Ch  +
test esi esi +
jnz loc_100E03B  +
sub ecx 2 +
mov eax 8007007Ah +
pop edi  +
xor edx edx +
pop esi  +
mov [ecx] dx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
shr esi 1 +
push edi  +
mov eax 0 +
jz loc_100E06C  +
cmp esi 7FFFFFFFh +
jbe loc_100E071  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_100E089  +
lea edi [ebp+arg_4] +
mov ecx esi +
mov edx ebx +
call sub_100E460  +
mov edi [ebp+arg_4] +
jmp loc_100E08B  +
xor edi edi +
test eax eax +
jl loc_100E0EC  +
mov ecx esi +
sub ecx edi +
lea edx [ebx+edi*2] +
mov eax 0 +
jz loc_100E0DF  +
mov ebx ecx +
sub ebx esi +
lea edi [ebx+edi+7FFFFFFFh] +
mov ebx [ebp+arg_8] +
sub ebx edx +
lea ecx [ecx+0] +
test edi edi +
jz loc_100E0DB  +
movzx esi word ptr [ebx+edx] +
test si si +
jz loc_100E0DB  +
mov [edx] si +
dec ecx  +
add edx 2 +
dec edi  +
test ecx ecx +
jnz loc_100E0B0  +
pop edi  +
sub edx 2 +
pop esi  +
mov eax 8007007Ah +
mov [edx] cx +
pop ebx  +
pop ebp  +
retn 0Ch  +
test ecx ecx +
jnz loc_100E0E7  +
sub edx 2 +
mov eax 8007007Ah +
xor ecx ecx +
mov [edx] cx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
test ebx ebx +
jz loc_100E37D  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_100E37D  +
cmp dword ptr [ebx+8] 0 +
jnz loc_100E37D  +
push esi  +
mov esi ds:_wcsicmp +
push offset aDefault  +
push edi  +
call esi  +
add esp 8 +
test eax eax +
jnz loc_100E147  +
mov edi offset aNameTypeOwnedM +
jmp loc_100E23A  +
push offset aLegacy  +
push edi  +
call esi  +
add esp 8 +
test eax eax +
jnz loc_100E167  +
mov edi offset aNameTypeObjidf +
mov dword ptr [ebx+14h] 1 +
jmp loc_100E23A  +
push offset aLeaked  +
push edi  +
call esi  +
add esp 8 +
test eax eax +
jnz loc_100E18E  +
mov eax 1 +
mov edi offset aNameTypeObji_0 +
mov [ebx+14h] eax +
mov [ebx+18h] eax +
mov [ebx+1Ch] eax +
jmp loc_100E23A  +
push offset aSpacehints  +
push edi  +
call esi  +
add esp 8 +
test eax eax +
jnz loc_100E1A7  +
mov edi offset aNameTypeShIden +
jmp loc_100E23A  +
push offset aAll  +
push edi  +
call esi  +
add esp 8 +
test eax eax +
jnz loc_100E23A  +
lea esi [eax+2] +
mov edx 14h +
mov eax off_101C9E0[edx] +
lea edi [eax+2] +
jmp loc_100E1D0  +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100E1D0  +
sub eax edi +
sar eax 1 +
add edx 14h +
lea esi [esi+eax*2+2] +
cmp edx 35Ch +
jb loc_100E1C2  +
push esi  +
call ds:__imp_malloc  +
mov ebx eax +
add esp 4 +
test ebx ebx +
jz loc_100E2AE  +
xor eax eax +
mov [ebx] ax +
mov edi 14h +
lea esp [esp+0] +
mov ecx off_101C9E0[edi] +
push ecx  +
push esi  +
push ebx  +
call sub_100E050  +
push offset asc_10015BC  +
push esi  +
push ebx  +
call sub_100E050  +
add edi 14h +
cmp edi 35Ch +
jb loc_100E210  +
mov edi ebx +
mov ebx [ebp+arg_0] +
push 2Ch  +
push edi  +
mov esi 4 +
call ds:wcschr  +
add esp 8 +
test eax eax +
jz loc_100E266  +
nop   +
add eax 2 +
push 2Ch  +
push eax  +
add esi 4 +
call ds:wcschr  +
add esp 8 +
test eax eax +
jnz loc_100E250  +
test edi edi +
jz loc_100E28E  +
mov eax edi +
lea edx [eax+2] +
nop   +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100E270  +
sub eax edx +
sar eax 1 +
test eax eax +
jz loc_100E28E  +
cmp word ptr [edi+eax*2-2] 2Ch +
jnz loc_100E28E  +
sub esi 4 +
push esi  +
call ds:__imp_malloc  +
add esp 4 +
mov [ebx+8] eax +
test eax eax +
jnz loc_100E2BA  +
push esi  +
push offset aFailedToAlloca  +
call ds:wprintf  +
add esp 8 +
pop esi  +
pop edi  +
mov eax 0FFFFFC0Dh +
pop ebx  +
pop ebp  +
retn 8  +
or dword ptr [ebx] 1 +
mov [ebp+arg_0] 0 +
test edi edi +
jz loc_100E33B  +
cmp word ptr [edi] 0 +
jz loc_100E33B  +
push 2Ch  +
push edi  +
call ds:wcschr  +
mov esi eax +
add esp 8 +
test esi esi +
jz loc_100E2E5  +
xor edx edx +
mov [esi] dx +
lea eax [ebp+arg_4] +
push eax  +
push edi  +
call sub_100C310  +
test eax eax +
jz loc_100E362  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov edx [ebx+8] +
mov [edx+ecx*4] eax +
inc ecx  +
lea eax [eax+eax*4] +
mov [ebp+arg_0] ecx +
mov ecx dword_101C9E8[eax*4] +
or [ebx] ecx +
test esi esi +
jz loc_100E320  +
mov edx 2Ch +
mov [esi] dx +
lea edi [esi+2] +
jmp loc_100E337  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100E325  +
sub eax edx +
sar eax 1 +
lea edi [edi+eax*2] +
test edi edi +
jnz loc_100E2C8  +
mov eax [ebp+arg_0] +
mov [ebx+4] eax +
test eax eax +
jnz loc_100E359  +
mov eax [ebx+8] +
push eax  +
call ds:__imp_free  +
add esp 4 +
mov dword ptr [ebx+8] 0 +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
push edi  +
push offset aDidNotRecogniz  +
call ds:wprintf  +
add esp 8 +
pop esi  +
pop edi  +
mov eax 0FFFFFC15h +
pop ebx  +
pop ebp  +
retn 8  +
pop edi  +
mov eax 0FFFFFC15h +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100E3A5  +
mov eax 0FFFFFC15h +
pop ebp  +
retn 1Ch  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_100E3B1  +
mov ecx [ecx] +
mov [eax+24h] ecx +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_100E3BC  +
mov edx [ecx] +
or [eax] edx +
mov ecx [ebp+arg_C] +
test ecx ecx +
jz loc_100E3C8  +
mov ecx [ecx] +
mov [eax+14h] ecx +
mov ecx [ebp+arg_10] +
test ecx ecx +
jz loc_100E3D4  +
mov edx [ecx] +
mov [eax+18h] edx +
mov ecx [ebp+arg_14] +
test ecx ecx +
jz loc_100E3E3  +
or dword ptr [eax] 4 +
mov ecx [ecx] +
mov [eax+1Ch] ecx +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_100E3FA  +
push ecx  +
push 8  +
add eax 0Ch +
push eax  +
call sub_100DFC0  +
test eax eax +
jnz loc_100E39C  +
xor eax eax +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
push edi  +
test esi esi +
jz loc_100E445  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_100E445  +
cmp [esi+8] eax +
jnz loc_100E43B  +
push offset aDefault_0  +
push esi  +
call sub_100E100  +
test eax eax +
jl loc_100E44A  +
mov ecx [esi] +
mov [edi] ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax 0FFFFFC15h +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100E483  +
lea esp [esp+0] +
cmp [edx] ax +
jz loc_100E47F  +
add edx 2 +
sub ecx 1 +
jnz loc_100E470  +
jmp loc_100E483  +
test ecx ecx +
jnz loc_100E488  +
mov eax 80070057h +
test edi edi +
jz loc_100E49C  +
test eax eax +
jl loc_100E496  +
sub esi ecx +
mov [edi] esi +
pop esi  +
retn   +
mov dword ptr [edi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aDefragmentatio  +
call esi  +
push 0Ah  +
push offset aDescriptionPer  +
call esi  +
mov eax [ebp+arg_0] +
push 0Ah  +
push eax  +
push offset aSyntaxSDDataba  +
call esi  +
push 0Ah  +
push offset aParametersData  +
call esi  +
push 0Ah  +
push offset aOptionsZeroOrM  +
call esi  +
push 0Ah  +
push offset aTDbSetTemp_Dat  +
call esi  +
push 0Ah  +
push offset aPPreserveTempo  +
call esi  +
add esp 44h +
push 0Ah  +
push offset aBDbMakeBackupC  +
call esi  +
push 0Ah  +
push offset a2Set2kDatabase  +
call esi  +
push 0Ah  +
push offset a4Set4kDatabase  +
call esi  +
push 0Ah  +
push offset a8Set8kDatabase  +
call esi  +
push 0Ah  +
push offset a16Set16kDataba  +
call esi  +
push 0Ah  +
push offset a32Set32kDataba  +
call esi  +
push 0Ah  +
push offset aOSuppressLogoC  +
call esi  +
push 0Ah  +
push offset aNotes1IfInstat  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aIsPreservedUnc  +
call esi  +
push 0Ah  +
push offset aContainTheDefr  +
call esi  +
add esp 10h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aRecoveryC  +
call esi  +
push 0Ah  +
push offset aDescriptionP_0  +
call esi  +
push 0Ah  +
push offset aCleanShutdownS  +
call esi  +
mov eax [ebp+arg_0] +
push 0Ah  +
push eax  +
push offset aSyntaxSR3Chara  +
call esi  +
push 0Ah  +
push offset aOptionsZeroOrM  +
call esi  +
push 0Ah  +
push offset aLPathLocationO  +
call esi  +
push 0Ah  +
push offset aDefaultCurrent  +
call esi  +
add esp 44h +
push 0Ah  +
push offset aSPathLocationO  +
call esi  +
push 0Ah  +
push offset aDefaultCurrent  +
call esi  +
push 0Ah  +
push offset aIIgnoreMismatc  +
call esi  +
push 0Ah  +
push offset aTOnSuccessfulR  +
call esi  +
push 0Ah  +
push offset aULogStopRecove  +
call esi  +
push 0Ah  +
push offset aToStopWhenACer  +
call esi  +
push 0Ah  +
push offset aLogIsTheLogGen  +
call esi  +
push 0Ah  +
push offset aTheReplayWillG  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aDPathLocationO  +
call esi  +
push 0Ah  +
push offset aIfPathNotSpeci  +
call esi  +
push 0Ah  +
push offset aOriginallyLogg  +
call esi  +
push 0Ah  +
push offset aNPath1Path2New  +
call esi  +
push 0Ah  +
push offset aIfTheDatabaseF  +
call esi  +
push 0Ah  +
push offset aCanBeSpecified  +
call esi  +
push 0Ah  +
push offset aIfACertainData  +
call esi  +
push 0Ah  +
push offset aToAllowRecover  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aNotValidWithDS  +
call esi  +
push 0Ah  +
push offset aAAllowRecovery  +
call esi  +
push 0Ah  +
push offset aIntegrityCanSt  +
call esi  +
push 0Ah  +
push offset a2Set2kDataba_0  +
call esi  +
push 0Ah  +
push offset a4Set4kDataba_0  +
call esi  +
push 0Ah  +
push offset a8Set8kDataba_0  +
call esi  +
push 0Ah  +
push offset a16Set16kData_0  +
call esi  +
push 0Ah  +
push offset a32Set32kData_0  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aOSuppressLog_0  +
call esi  +
add esp 8 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aIntegrityC  +
call esi  +
push 0Ah  +
push offset aDescriptionVer  +
call esi  +
mov eax [ebp+arg_0] +
push 0Ah  +
push eax  +
push offset aSyntaxSGDataba  +
call esi  +
push 0Ah  +
push offset aParametersDa_0  +
call esi  +
push 0Ah  +
push offset aOptionsZeroOrM  +
call esi  +
push 0Ah  +
push offset aTDbSetTemp_D_0  +
call esi  +
push 0Ah  +
push offset aFNameSetPrefix  +
call esi  +
add esp 44h +
push 0Ah  +
push offset aDefaultDatabas  +
call esi  +
push 0Ah  +
push offset a2Set2kDataba_1  +
call esi  +
push 0Ah  +
push offset a4Set4kDataba_1  +
call esi  +
push 0Ah  +
push offset a8Set8kDataba_1  +
call esi  +
push 0Ah  +
push offset a16Set16kData_1  +
call esi  +
push 0Ah  +
push offset a32Set32kData_1  +
call esi  +
push 0Ah  +
push offset aOSuppressLog_1  +
call esi  +
push 0Ah  +
push offset aNotes1Integrit  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aDatabaseIsInAD  +
call esi  +
push 0Ah  +
push offset aRecommendedTha  +
call esi  +
push 0Ah  +
push offset aCheckRecoveryI  +
call esi  +
push 0Ah  +
push offset aDatabaseOperat  +
call esi  +
add esp 20h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aChecksumC  +
call esi  +
push 0Ah  +
push offset aDescriptionV_0  +
call esi  +
push 0Ah  +
push offset aCheckpointFile  +
call esi  +
mov eax [ebp+arg_0] +
push 0Ah  +
push eax  +
push offset aSyntaxSKFileNa  +
call esi  +
push 0Ah  +
push offset aParametersFile  +
call esi  +
push 0Ah  +
push offset aOptionsZeroOrM  +
call esi  +
push 0Ah  +
push offset aTDbSetTemp_D_1  +
call esi  +
add esp 44h +
push 0Ah  +
push offset aPXAddArtificia  +
call esi  +
push 0Ah  +
push offset aDefaultNoPause  +
call esi  +
push 0Ah  +
push offset aEDonTChecksumD  +
call esi  +
push 0Ah  +
push offset a2Set2kDataba_2  +
call esi  +
push 0Ah  +
push offset a4Set4kDataba_2  +
call esi  +
push 0Ah  +
push offset a8Set8kDataba_2  +
call esi  +
push 0Ah  +
push offset a16Set16kData_2  +
call esi  +
push 0Ah  +
push offset a32Set32kData_2  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aOSuppressLog_2  +
call esi  +
push 0Ah  +
push offset aNotes1ThisOper  +
call esi  +
push 0Ah  +
push offset a2IfTheFileIsNo  +
call esi  +
push 0Ah  +
push offset aIgnored_C  +
call esi  +
push 0Ah  +
push offset a3ThePausePOpti  +
call esi  +
push 0Ah  +
push offset aMechanism_ItOn  +
call esi  +
push 0Ah  +
push offset aOfADatabaseFil  +
call esi  +
add esp 38h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aCopyFileC  +
call esi  +
push 0Ah  +
push offset aDescriptionCop  +
call esi  +
mov eax [ebp+arg_0] +
push 0Ah  +
push eax  +
push offset aSyntaxSYSource  +
call esi  +
push 0Ah  +
push offset aParametersSour  +
call esi  +
push 0Ah  +
push offset aOptionsZeroOrM  +
call esi  +
push 0Ah  +
push offset aDFileDestinati  +
call esi  +
push 0Ah  +
push offset aCurrentDirecto  +
call esi  +
add esp 44h +
push 0Ah  +
push offset aOSuppressLog_2  +
call esi  +
push 0Ah  +
push offset aNotes1IfPerfor  +
call esi  +
push 0Ah  +
push offset aAtTheEndOfTheF  +
call esi  +
add esp 18h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aRepairC  +
call esi  +
push 0Ah  +
push offset aDescriptionRep  +
call esi  +
mov eax [ebp+arg_0] +
push 0Ah  +
push eax  +
push offset aSyntaxSPDataba  +
call esi  +
push 0Ah  +
push offset aParametersDa_1  +
call esi  +
push 0Ah  +
push offset aOptionsZeroOrM  +
call esi  +
push 0Ah  +
push offset aTDbSetTemp_D_2  +
call esi  +
push 0Ah  +
push offset aDefaultTemprep  +
call esi  +
add esp 44h +
push 0Ah  +
push offset aFNameSetPref_0  +
call esi  +
push 0Ah  +
push offset aDefaultDatab_0  +
call esi  +
push 0Ah  +
push offset aGRunIntegrityC  +
call esi  +
push 0Ah  +
push offset a2Set2kDataba_3  +
call esi  +
push 0Ah  +
push offset a4Set4kDataba_3  +
call esi  +
push 0Ah  +
push offset a8Set8kDataba_3  +
call esi  +
push 0Ah  +
push offset a16Set16kData_3  +
call esi  +
push 0Ah  +
push offset a32Set32kData_3  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aOSuppressLog_3  +
call esi  +
push 0Ah  +
push offset aNotes1RepairDo  +
call esi  +
push 0Ah  +
push offset aIsInADirtyShut  +
call esi  +
push 0Ah  +
push offset aRecommendedT_0  +
call esi  +
push 0Ah  +
push offset aRecoveryIsFirs  +
call esi  +
push 0Ah  +
push offset aOperationsForT  +
call esi  +
push 0Ah  +
push offset a2TheGOptionPau  +
call esi  +
push 0Ah  +
push offset aRepairIsPerfor  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aOverridesTheOO  +
call esi  +
add esp 8 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aFileDumpC  +
call esi  +
push 0Ah  +
push offset aDescriptionGen  +
call esi  +
mov eax [ebp+arg_0] +
push 0Ah  +
push eax  +
push offset aSyntaxSMModeMo  +
call esi  +
push 0Ah  +
push offset aParametersMode  +
call esi  +
push 0Ah  +
push offset aFileDumpToPerf  +
call esi  +
push 0Ah  +
push offset aHDumpDatabaseH  +
call esi  +
push 0Ah  +
push offset aKDumpCheckpoin  +
call esi  +
add esp 44h +
push 0Ah  +
push offset aLDumpLogFileOr  +
call esi  +
push 0Ah  +
push offset aMDumpMetaDataC  +
call esi  +
push 0Ah  +
push offset aSDumpSpaceUsag  +
call esi  +
push 0Ah  +
push offset aUDumpUndefined  +
call esi  +
push 0Ah  +
push offset aFilenameNameOf  +
call esi  +
push 0Ah  +
push offset aSpecifiedFileS  +
call esi  +
push 0Ah  +
push offset aBeingRequested  +
call esi  +
push 0Ah  +
push offset aFilenameMustBe  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aOptionsZeroOrM  +
call esi  +
push 0Ah  +
push offset aPPgnoDumpTheSp  +
call esi  +
push 0Ah  +
push offset aTTablePerformD  +
call esi  +
push 0Ah  +
push offset aVVerboseC  +
call esi  +
push 0Ah  +
push offset a2Set2kDatabase  +
call esi  +
push 0Ah  +
push offset a4Set4kDatabase  +
call esi  +
push 0Ah  +
push offset a8Set8kDatabase  +
call esi  +
push 0Ah  +
push offset a16Set16kDataba  +
call esi  +
add esp 40h +
push 0Ah  +
push offset a32Set32kDataba  +
call esi  +
push 0Ah  +
push offset aOSuppressLogoC  +
call esi  +
push 0Ah  +
push offset aCFileForDumpOf  +
call esi  +
push 0Ah  +
push offset aLogFileInCsvFo  +
call esi  +
push 0Ah  +
push offset aXForDumpOfASin  +
call esi  +
push 0Ah  +
push offset aFixupOfTornWri  +
call esi  +
push 0Ah  +
push offset aIfNecessaryNot  +
call esi  +
push 0Ah  +
push offset aToTheLogFileC  +
call esi  +
add esp 40h +
push offset asc_1007A08  +
push offset asc_10079E0  +
push 0Ah  +
push 50h  +
call sub_100D180  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aUpgradeC  +
call esi  +
push 0Ah  +
push offset aDescriptionUpg  +
call esi  +
push 0Ah  +
push offset aMicrosoftRWind  +
call esi  +
mov eax [ebp+arg_0] +
push 0Ah  +
push eax  +
push offset aSyntaxSUDataba  +
call esi  +
push 0Ah  +
push offset aParametersDa_2  +
call esi  +
push 0Ah  +
push offset aDPrevious_dllP  +
call esi  +
push 0Ah  +
push offset aWithTheRelease  +
call esi  +
add esp 44h +
push 0Ah  +
push offset aWindowsNtFromW  +
call esi  +
push 0Ah  +
push offset aOptionsZeroOrM  +
call esi  +
push 0Ah  +
push offset aBDbMakeBacku_0  +
call esi  +
push 0Ah  +
push offset aTDbSetTemporar  +
call esi  +
push 0Ah  +
push offset aPPreserveTem_0  +
call esi  +
push 0Ah  +
push offset a2Set2kDataba_4  +
call esi  +
push 0Ah  +
push offset a4Set4kDataba_4  +
call esi  +
push 0Ah  +
push offset a8Set8kDataba_4  +
call esi  +
add esp 40h +
push 0Ah  +
push offset a16Set16kData_4  +
call esi  +
push 0Ah  +
push offset a32Set32kData_4  +
call esi  +
push 0Ah  +
push offset aOSuppressLog_4  +
call esi  +
push 0Ah  +
push offset aNotes1ThisUtil  +
call esi  +
push 0Ah  +
push offset aAfterAnInterna  +
call esi  +
push 0Ah  +
push offset aIfNecessaryThi  +
call esi  +
push 0Ah  +
push offset aReleaseOfAMajo  +
call esi  +
push 0Ah  +
push offset aWindowsNt_C  +
call esi  +
add esp 40h +
push 0Ah  +
push offset a2BeforeUpgradi  +
call esi  +
push 0Ah  +
push offset aState_AnErrorW  +
call esi  +
push 0Ah  +
push offset a3IfInstatingIs  +
call esi  +
push 0Ah  +
push offset aIsPreservedU_0  +
call esi  +
push 0Ah  +
push offset aContainTheUpgr  +
call esi  +
add esp 28h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aSecureC  +
call esi  +
push 0Ah  +
push offset aDescriptionRem  +
call esi  +
mov eax [ebp+arg_0] +
push 0Ah  +
push eax  +
push offset aSyntaxSZDataba  +
call esi  +
push 0Ah  +
push offset aParametersDa_3  +
call esi  +
push 0Ah  +
push offset a2Set2kDataba_5  +
call esi  +
push 0Ah  +
push offset a4Set4kDataba_5  +
call esi  +
push 0Ah  +
push offset a8Set8kDataba_5  +
call esi  +
add esp 44h +
push 0Ah  +
push offset a16Set16kData_5  +
call esi  +
push 0Ah  +
push offset a32Set32kData_5  +
call esi  +
push 0Ah  +
push offset aOSuppressLog_5  +
call esi  +
add esp 18h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ds:GetTickCount  +
sub eax [ebp+arg_0] +
mov ecx 3E8h +
xor edx edx +
div  ecx +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov eax [ebp+arg_8] +
mov [eax] edx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push ebx  +
mov ebx 2 +
cmp eax 8 +
ja loc_100EDD6  +
jz loc_100EDED  +
mov ecx eax +
sub ecx ebx +
jz loc_100EDED  +
sub ecx ebx +
jz loc_100EDED  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
cmp eax 0Ah +
jb loc_100EF78  +
cmp eax 0Ch +
jbe loc_100EDED  +
cmp eax 0FFFFFFFFh +
jnz loc_100EF78  +
mov ecx [ebp+10h] +
cmp ecx 8 +
ja loc_100EF78  +
push esi  +
push edi  +
jmp ds:off_100EF80[ecx*4]  +
mov ecx [ebp+14h] +
mov eax [ecx+4] +
mov ecx [ecx+8] +
mov edx 64h +
mul  edx +
push 0  +
push ecx  +
push edx  +
push eax  +
call __alldiv  +
sub eax dword_101D474 +
cmp eax ebx +
jl loc_100EF76  +
mov edi ds:wprintf +
shr eax 1 +
mov esi eax +
push offset a_  +
call edi  +
add dword_101D474 ebx +
add esp 4 +
sub esi 1 +
jnz loc_100EE34  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
cmp eax 8 +
ja loc_100EE6B  +
jz loc_100EE64  +
sub eax ebx +
jnz loc_100EE96  +
mov edi offset aScanning +
jmp loc_100EEA0  +
mov edi offset aRestore +
jmp loc_100EEA0  +
cmp eax 0Ch +
ja loc_100EE91  +
jz loc_100EE8A  +
sub eax 0Ah +
jz loc_100EE83  +
sub eax 1 +
jnz loc_100EE96  +
mov edi offset aSecuring +
jmp loc_100EEA0  +
mov edi offset aUpgrade +
jmp loc_100EEA0  +
mov edi offset aUpgradingRecor +
jmp loc_100EEA0  +
cmp eax 0FFFFFFFFh +
jz loc_100EE9D  +
mov edi offset aDefragmentat_0 +
jmp loc_100EEA0  +
mov edi [ebp+14h] +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
mov eax edi +
add esp 8 +
lea edx [eax+2] +
mov cx [eax] +
add eax ebx +
test cx cx +
jnz loc_100EEB7  +
sub eax edx +
push 0Ah  +
sar eax 1 +
push 0Ah  +
mov edx 1Fh +
sub edx eax +
push offset aStatusComplete  +
shr edx 1 +
push edi  +
add edx eax +
push edx  +
push offset aSSCC  +
call esi  +
push offset a01020304050607  +
call esi  +
push offset asc_1009C20  +
call esi  +
push offset asc_1009C08  +
call esi  +
add esp 24h +
pop edi  +
pop esi  +
mov dword_101D474 0 +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi ds:wprintf +
mov eax 64h +
sub eax dword_101D474 +
cmp eax ebx +
jl loc_100EF3B  +
shr eax 1 +
mov esi eax +
push offset a_  +
call edi  +
add dword_101D474 ebx +
add esp 4 +
sub esi 1 +
jnz loc_100EF26  +
push 0Ah  +
push 0Ah  +
push offset a_CC  +
call edi  +
add esp 0Ch +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov eax [ebp+14h] +
test eax eax +
jz loc_100EF64  +
cmp dword ptr [eax] 1Ch +
jnz loc_100EF64  +
cmp dword ptr [eax+8] 0 +
jnz loc_100EF76  +
push 0Ah  +
push 0Ah  +
push offset aCrecoverystepI  +
call ds:wprintf  +
add esp 0Ch +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push edi  +
mov edi eax +
mov eax [edi+0Ch] +
mov ecx [edi] +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
sub eax 1 +
mov [ebp+var_C] offset dword_10015C0 +
mov [ebp+var_8] ecx +
jz loc_100F082  +
sub eax 1 +
jz loc_100F058  +
sub eax 1 +
jnz loc_100F0AD  +
mov ebx ds:wprintf +
push esi  +
push ecx  +
push offset aErrorAccessToS  +
call ebx  +
mov edi [edi+28h] +
add esp 0Ch +
test edi 4000000h +
jz loc_100F09F  +
cmp esi 0FFFFFB4Ah +
jz loc_100F021  +
cmp esi 0FFFFFB38h +
jz loc_100F021  +
cmp esi 0FFFFFC06h +
jnz loc_100F09F  +
test edi 3A01000h +
jz loc_100F041  +
cmp esi 0FFFFFB4Ah +
jz loc_100F09F  +
cmp esi 0FFFFFB38h +
jz loc_100F09F  +
cmp esi 0FFFFFC06h +
jz loc_100F09F  +
push 0Ah  +
push 0Ah  +
push offset aCCthisMayHaveH  +
call ebx  +
push offset aExplicitlySett  +
call ebx  +
add esp 10h +
jmp loc_100F09F  +
mov ecx [ebp+arg_4] +
mov edx ds:off_1009E10[ecx*4] +
mov eax [ebp+esi*4+var_C] +
mov ecx ds:off_1009E04[esi*4] +
mov ebx ds:wprintf +
push edx  +
push eax  +
push ecx  +
push offset aErrorSSCannotB  +
call ebx  +
add esp 10h +
jmp loc_100F09F  +
mov edx [ebp+esi*4+var_C] +
mov eax ds:off_1009E04[esi*4] +
mov ebx ds:wprintf +
push edx  +
push eax  +
push offset aErrorSSpecific  +
call ebx  +
add esp 0Ch +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call ebx  +
add esp 0Ch +
pop edi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
sub esp 2Ch +
cmp [ecx+50h] eax +
jnz loc_100F11D  +
push esi  +
lea edx [ebp+SystemInfo] +
push edx  +
call ds:GetSystemInfo  +
mov esi [ebp+SystemInfo.lpMaximumApplicationAddress] +
sub esi [ebp+SystemInfo.lpMinimumApplicationAddress] +
push 4  +
push 0  +
lea eax [ebp+var_4] +
push eax  +
push 40h  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov [ebp+var_8] 0FFFFFFFFh +
mov [ebp+var_4] 0 +
call JetGetSystemParameterW  +
xor edx edx +
lea eax [esi-20000000h] +
div  [ebp+var_4] +
push 0  +
lea ecx [ebp+var_8] +
push eax  +
push 17h  +
push 0FFFFFFFFh  +
push ecx  +
call JetSetSystemParameterW  +
pop esi  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 424h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor eax eax +
push 208h  +
mov edi ecx +
push eax  +
lea ecx [ebp-41Ah] +
push ecx  +
mov [ebp+var_41C] ax +
call memset  +
xor edx edx +
push 208h  +
push edx  +
lea eax [ebp-20Eh] +
push eax  +
mov [ebp+var_210] dx +
call memset  +
add esp 18h +
cmp dword ptr [edi+0Ch] 0 +
jnz loc_100F18E  +
mov ecx [ebp+arg_0] +
mov [edi+0Ch] ecx +
mov edx [edi+0Ch] +
mov esi ds:_wfullpath +
push 104h  +
push edx  +
lea eax [ebp+var_210] +
push eax  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_100F1EA  +
mov edi [edi+0Ch] +
mov ecx ds:off_1009E0C +
push edi  +
push ecx  +
mov esi ds:wprintf +
push offset aErrorSSpecific  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 18h +
pop edi  +
mov eax 0FFFFFC01h +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
mov eax [edi] +
test eax eax +
jnz loc_100F227  +
mov esi ds:wprintf +
push offset aSourceDatabase  +
push offset aUsageErrorMiss  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
pop edi  +
mov eax 0FFFFFC15h +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
push 104h  +
push eax  +
lea edx [ebp+var_41C] +
push edx  +
call esi  +
add esp 0Ch +
test eax eax +
jnz loc_100F24B  +
mov edi [edi] +
mov eax ds:off_1009E08 +
push edi  +
push eax  +
jmp loc_100F1B8  +
mov eax [edi+28h] +
mov [ebp+var_420] 0 +
test eax 3A01000h +
jnz loc_100F2E9  +
mov edx [edi] +
push 11h  +
push 4  +
lea ecx [ebp+var_420] +
push ecx  +
push edx  +
call JetGetDatabaseFileInfoW  +
test eax eax +
jnz loc_100F2E9  +
push eax  +
mov eax [ebp+var_420] +
push eax  +
push 40h  +
push 0  +
push 0  +
call JetSetSystemParameterW  +
test eax eax +
jl loc_100F3D9  +
mov eax [ebp+var_420] +
cmp eax 800h +
jnz loc_100F2AB  +
or dword ptr [edi+28h] 2000000h +
jmp loc_100F2E9  +
cmp eax 1000h +
jnz loc_100F2BB  +
or dword ptr [edi+28h] 200000h +
jmp loc_100F2E9  +
cmp eax 2000h +
jnz loc_100F2CB  +
or dword ptr [edi+28h] 1000h +
jmp loc_100F2E9  +
cmp eax 4000h +
jnz loc_100F2DB  +
or dword ptr [edi+28h] 1000000h +
jmp loc_100F2E9  +
cmp eax 8000h +
jnz loc_100F2E9  +
or dword ptr [edi+28h] 800000h +
mov edx [edi] +
push 13h  +
push 4  +
lea ecx [ebp+var_424] +
push ecx  +
push edx  +
call JetGetDatabaseFileInfoW  +
mov esi eax +
test esi esi +
jz loc_100F367  +
cmp esi 0FFFFFC06h +
jnz loc_100F311  +
mov esi 0FFFFFB4Ah +
jmp loc_100F315  +
test esi esi +
jge loc_100F35D  +
mov eax [edi+28h] +
test eax 4000000h +
jz loc_100F33E  +
test eax 3A01000h +
jz loc_100F33E  +
cmp esi 0FFFFFB4Ah +
jz loc_100F35D  +
cmp esi 0FFFFFB38h +
jz loc_100F35D  +
cmp esi 0FFFFFC06h +
jz loc_100F35D  +
push 0  +
push 3  +
mov eax edi +
call sub_100EFB0  +
pop edi  +
mov eax esi +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
mov [ebp+var_424] 0 +
test ebx ebx +
jz loc_100F373  +
mov eax [ebp+var_424] +
mov [ebx] eax +
lea ecx [ebp+var_210] +
push ecx  +
lea edx [ebp+var_41C] +
push edx  +
call ds:_wcsicmp  +
add esp 8 +
test eax eax +
jnz loc_100F3D0  +
mov eax ds:off_1009E18 +
mov edi [edi] +
mov ecx ds:off_1009E08 +
mov esi ds:wprintf +
push eax  +
push edi  +
push ecx  +
push offset aErrorSSCannotB  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 1Ch +
pop edi  +
mov eax 0FFFFFBFCh +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
mov ecx edi +
call sub_100F0C0  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 410h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100F486  +
push 101h  +
lea ecx [ebp+var_40C] +
push ecx  +
push 101h  +
lea edx [ebp+var_208] +
push edx  +
push 0  +
push 0  +
push 0  +
push 0  +
push eax  +
call sub_1014519  +
lea eax [ebp+var_208] +
add esp 24h +
lea edx [eax+2] +
mov edi edi +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100F440  +
sub eax edx +
sar eax 1 +
cmp eax 3 +
jnz loc_100F486  +
lea eax [ebp+var_40C] +
lea edx [eax+2] +
lea ecx [ecx+0] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100F460  +
sub eax edx +
sar eax 1 +
jnz loc_100F486  +
mov eax 1 +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ds:wprintf +
push eax  +
push offset aUsageErrorInva  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40Ch +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push 101h  +
mov esi ecx +
lea ecx [ebp+var_208] +
push ecx  +
push 101h  +
lea edx [ebp+var_40C] +
push edx  +
push 0  +
push 0  +
push 0  +
push 0  +
push eax  +
call sub_1014519  +
lea eax [ebp+var_208] +
push eax  +
lea ecx [ebp+var_40C] +
push ecx  +
push 0  +
push 0  +
shr esi 1 +
push esi  +
push edi  +
call sub_10143F0  +
mov ecx [ebp+var_4] +
add esp 3Ch +
xor ecx ebp +
pop esi  +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
***
movzx ecx cx +
cmp ecx 75h +
ja loc_100F5D8  +
movzx ecx ds:byte_100F5F8[ecx] +
jmp ds:off_100F5DC[ecx*4]  +
mov dword ptr [eax+10h] 7 +
mov eax 1 +
retn   +
mov dword ptr [eax+10h] 0Ah +
mov eax 1 +
retn   +
mov dword ptr [eax+10h] 2 +
mov eax 1 +
retn   +
mov dword ptr [eax+10h] 13h +
mov eax 1 +
retn   +
mov dword ptr [eax+10h] 8 +
mov eax 1 +
retn   +
mov dword ptr [eax+10h] 5 +
mov dword ptr [eax+4Ch] offset loc_100D910 +
add eax 50h +
push eax  +
call sub_100D100  +
test eax eax +
jl loc_100F5D8  +
mov eax 1 +
retn   +
xor eax eax +
retn   +
***
movzx eax ax +
add eax 0FFFFFFBDh +
cmp eax 2Ah +
ja loc_100F6A6  +
movzx eax ds:byte_100F6B8[eax] +
jmp ds:off_100F6AC[eax*4]  +
or dword ptr [ecx+28h] 4000h +
mov eax 1 +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov edx dword_101CD64 +
push ebx  +
push edi  +
mov [ebp+var_4] 1 +
cmp edx 0FFFFFFFFh +
jz loc_100F71E  +
cmp dword_101D470 edx +
jz loc_100F71E  +
mov eax dword_101D46C +
mov ebx [eax+edx*4] +
jmp loc_100F720  +
xor ebx ebx +
mov eax [esi+24h] +
mov [ebp+var_8] 0FFFFFFFFh +
cmp eax 5 +
jnz loc_100F811  +
movzx ecx word ptr [ebx+4] +
xor eax eax +
cmp ax cx +
jz loc_100F757  +
cmp ax [ebx+6] +
jnz loc_100F757  +
mov eax [esi+20h] +
call sub_100F560  +
mov [ebp+var_4] eax +
add ebx 2 +
jmp loc_100F8E0  +
mov [ebp+var_C] edx +
mov [ebp+var_4] 0 +
mov eax dword_101CD64 +
inc eax  +
cmp eax 0FFFFFFFFh +
jl loc_100F7F4  +
mov ecx dword_101D470 +
cmp eax ecx +
jle loc_100F77C  +
mov eax ecx +
mov dword_101CD64 eax +
cmp eax 0FFFFFFFFh +
jz loc_100F7FC  +
cmp ecx eax +
jz loc_100F7FC  +
mov ecx dword_101D46C +
mov edi [ecx+eax*4] +
test edi edi +
jz loc_100F7FC  +
movzx edx word ptr [edi] +
push edx  +
push offset asc_100349C  +
call ds:wcschr  +
add esp 8 +
test eax eax +
jz loc_100F7CB  +
movzx ecx word ptr [edi+2] +
xor eax eax +
cmp ax cx +
jz loc_100F7CB  +
xor edx edx +
cmp dx [edi+4] +
jnz loc_100F7CB  +
mov eax [esi+20h] +
call sub_100F560  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_100F761  +
mov eax dword_101CD64 +
mov [ebp+var_8] eax +
mov eax [ebp+var_C] +
cmp eax 0FFFFFFFFh +
jge loc_100F8CB  +
mov dword_101CD64 0FFFFFFFFh +
jmp loc_100F8E0  +
or eax 0FFFFFFFFh +
mov dword_101CD64 eax +
cmp [ebp+var_4] 0 +
jnz loc_100F7D6  +
mov eax [esi+20h] +
xor ecx ecx +
call sub_100F560  +
mov [ebp+var_4] eax +
jmp loc_100F7D1  +
cmp eax 0Ah +
jnz loc_100F8FD  +
movzx eax word ptr [ebx+4] +
xor ecx ecx +
cmp cx ax +
jz loc_100F83D  +
cmp cx [ebx+6] +
jnz loc_100F83D  +
mov ecx esi +
call sub_100F680  +
mov [ebp+var_4] eax +
add ebx 2 +
jmp loc_100F8E0  +
mov [ebp+var_C] edx +
mov [ebp+var_4] 0 +
mov eax dword_101CD64 +
inc eax  +
cmp eax 0FFFFFFFFh +
jl loc_100F8C3  +
mov ecx dword_101D470 +
cmp eax ecx +
jle loc_100F85E  +
mov eax ecx +
mov dword_101CD64 eax +
cmp eax 0FFFFFFFFh +
jz loc_100F7D6  +
cmp ecx eax +
jz loc_100F7D6  +
mov edx dword_101D46C +
mov edi [edx+eax*4] +
test edi edi +
jz loc_100F7D6  +
movzx eax word ptr [edi] +
push eax  +
push offset asc_100349C  +
call ds:wcschr  +
add esp 8 +
test eax eax +
jz loc_100F8B8  +
movzx eax word ptr [edi+2] +
xor ecx ecx +
cmp cx ax +
jz loc_100F8B8  +
xor edx edx +
cmp dx [edi+4] +
jnz loc_100F8B8  +
mov ecx esi +
call sub_100F680  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_100F847  +
jmp loc_100F7D1  +
or eax 0FFFFFFFFh +
jmp loc_100F7D6  +
mov ecx dword_101D470 +
cmp eax ecx +
mov dword_101CD64 ecx +
jg loc_100F8E0  +
mov dword_101CD64 eax +
cmp [ebp+var_4] 0 +
jnz loc_100F8FD  +
push 0Ah  +
push 0Ah  +
push offset aUsageErrorIn_1  +
push offset aSCC  +
call ds:wprintf  +
add esp 10h +
add ebx 4 +
xor eax eax +
cmp ax [ebx] +
jnz loc_100F947  +
mov eax dword_101CD64 +
inc eax  +
cmp eax 0FFFFFFFFh +
jge loc_100F91F  +
or ecx 0FFFFFFFFh +
mov dword_101CD64 ecx +
xor ebx ebx +
jmp loc_100F94D  +
mov edx dword_101D470 +
cmp eax edx +
mov ecx edx +
jg loc_100F92D  +
mov ecx eax +
mov dword_101CD64 ecx +
cmp ecx 0FFFFFFFFh +
jz loc_100F91B  +
cmp edx ecx +
jz loc_100F91B  +
mov edx dword_101D46C +
mov ebx [edx+ecx*4] +
jmp loc_100F94D  +
mov ecx dword_101CD64 +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100FA93  +
mov edi 800000h +
lea ecx [ecx+0] +
test ebx ebx +
jz loc_100FA90  +
cmp ecx [ebp+var_8] +
jz loc_100FA6E  +
movzx eax word ptr [ebx] +
push eax  +
push offset asc_100349C  +
call ds:wcschr  +
add esp 8 +
test eax eax +
jnz loc_100F9F2  +
mov eax [esi+24h] +
sub eax 2 +
jz loc_100F9C0  +
sub eax 1 +
jz loc_100F9A9  +
xor eax eax +
cmp [esi] eax +
setz al  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100F9D7  +
mov [esi] ebx +
jmp loc_100FA6E  +
xor eax eax +
cmp [esi+10h] eax +
setz al  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100F9D7  +
mov [esi+10h] ebx +
jmp loc_100FA6E  +
xor eax eax +
cmp [esi+18h] eax +
setz al  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100F9D7  +
mov [esi+18h] ebx +
jmp loc_100FA6E  +
push ebx  +
mov ebx ds:wprintf +
push offset aUsageErrorIn_2  +
call ebx  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call ebx  +
jmp loc_100FA6B  +
movzx eax word ptr [ebx+2] +
add eax 0FFFFFFDFh +
cmp eax 4Eh +
ja loc_100FA3B  +
movzx ecx ds:byte_100FAE4[eax] +
jmp ds:off_100FAC4[ecx*4]  +
or dword ptr [esi+28h] 2000000h +
jmp loc_100FA6E  +
or dword ptr [esi+28h] 200000h +
jmp loc_100FA6E  +
or dword ptr [esi+28h] 1000h +
jmp loc_100FA6E  +
or dword ptr [esi+28h] 1000000h +
jmp loc_100FA6E  +
or [esi+28h] edi +
jmp loc_100FA6E  +
or dword ptr [esi+28h] 1 +
jmp loc_100FA6E  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100FA4B  +
push esi  +
push ebx  +
call eax  +
mov [ebp+var_4] eax +
jmp loc_100FA6E  +
push ebx  +
mov ebx ds:wprintf +
push offset aUsageErrorInva  +
call ebx  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call ebx  +
mov [ebp+var_4] 0 +
add esp 14h +
mov eax dword_101CD64 +
inc eax  +
cmp eax 0FFFFFFFFh +
jge loc_100FA9B  +
or ecx 0FFFFFFFFh +
mov dword_101CD64 ecx +
xor eax eax +
cmp [ebp+var_4] 0 +
mov ebx eax +
jnz loc_100F960  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov edx dword_101D470 +
cmp eax edx +
mov ecx edx +
jg loc_100FAA9  +
mov ecx eax +
mov dword_101CD64 ecx +
cmp ecx 0FFFFFFFFh +
jz loc_100FA82  +
cmp edx ecx +
jz loc_100FA82  +
mov edx dword_101D46C +
mov eax [edx+ecx*4] +
jmp loc_100FA84  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push 54h  +
lea eax [ebp+var_54] +
push 0  +
push eax  +
call memset  +
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_C] +
mov [ebp+var_30] edx +
mov edx [ebp+arg_0] +
mov [ebp+var_38] ecx +
mov ecx [ebp+arg_10] +
mov [ebp+var_50] edx +
add esp 0Ch +
mov [ebp+var_2C] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_24] ecx +
mov ecx [ebp+arg_14] +
lea edx [ebp+var_54] +
push edx  +
mov [ebp+var_54] 54h +
mov [ebp+var_44] 0Ch +
mov [ebp+var_3C] eax +
mov [ebp+var_8] ecx +
call JetDBUtilitiesW  +
mov esp ebp +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push 54h  +
lea eax [ebp+var_54] +
push 0  +
push eax  +
call memset  +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_C] +
mov [ebp+var_50] edx +
add esp 0Ch +
mov [ebp+var_38] ecx +
mov ecx [ebp+arg_8] +
lea edx [ebp+var_54] +
push edx  +
mov [ebp+var_54] 54h +
mov [ebp+var_44] 0Eh +
mov [ebp+var_3C] eax +
mov [ebp+var_8] ecx +
call JetDBUtilitiesW  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
cmp dword ptr [ebp+8] 0 +
push edi  +
mov edi [ebp+0Ch] +
jnz loc_100FC2A  +
test edi edi +
jz loc_100FDA7  +
push ebx  +
mov ebx [ebp+38h] +
cmp dword ptr [ebx] 0FFFFFFFFh +
push esi  +
mov esi ds:wprintf +
jnz loc_100FCBF  +
push 0Ah  +
push offset aC  +
call esi  +
mov eax offset aFileCopy +
add esp 8 +
lea edx [eax+2] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_100FC52  +
push 0Ah  +
sub eax edx +
sar eax 1 +
push 0Ah  +
mov ecx 1Fh +
sub ecx eax +
push offset aStatusComplete  +
shr ecx 1 +
push offset aFileCopy  +
add ecx eax +
push ecx  +
push offset aSSCC  +
call esi  +
push offset a01020304050607  +
call esi  +
push offset asc_1009C20  +
call esi  +
push offset asc_1009C08  +
call esi  +
mov edi [ebp+0Ch] +
add esp 24h +
mov dword_101D474 0 +
test edi edi +
jnz loc_100FCB3  +
mov dword ptr [ebx] 1 +
jmp loc_100FCBF  +
cmp edi 64h +
sbb edx edx +
neg edx  +
add edx 2 +
mov [ebx] edx +
mov eax [ebx] +
sub eax 1 +
mov ebx [ebp+10h] +
mov dword ptr [ebp-0Ch] 0Ch +
jz loc_100FD05  +
sub eax 1 +
jz loc_100FCFA  +
sub eax 1 +
jnz loc_100FD0E  +
mov eax [ebp+8] +
mov edx edi +
mov cl 7 +
call __allshr  +
mov edx [ebp+14h] +
mov [ebp-4] eax +
mov eax ebx +
mov cl 7 +
call __allshr  +
mov [ebp-8] eax +
jmp loc_100FD0E  +
mov eax [ebp+14h] +
mov [ebp-4] edi +
mov [ebp-8] eax +
jmp loc_100FD0E  +
mov ecx [ebp+8] +
mov [ebp-4] ecx +
mov [ebp-8] ebx +
cmp ebx [ebp+8] +
jnz loc_100FD5F  +
cmp [ebp+14h] edi +
jnz loc_100FD5F  +
mov eax 64h +
sub eax dword_101D474 +
cmp eax 2 +
jl loc_100FD46  +
shr eax 1 +
mov edi eax +
lea esp [esp+0] +
push offset a_  +
call esi  +
add dword_101D474 2 +
add esp 4 +
sub edi 1 +
jnz loc_100FD30  +
push 0Ah  +
push 0Ah  +
push offset a_CC  +
call esi  +
add esp 0Ch +
pop esi  +
pop ebx  +
xor eax eax +
pop edi  +
mov esp ebp +
pop ebp  +
retn 34h  +
***
mov eax [ebp-8] +
mov ecx [ebp-4] +
mov edx 64h +
mul  edx +
push 0  +
push ecx  +
push edx  +
push eax  +
call __alldiv  +
sub eax dword_101D474 +
mov ebx 2 +
cmp eax ebx +
jl loc_100FDA5  +
shr eax 1 +
mov edi eax +
lea esp [esp+0] +
push offset a_  +
call esi  +
add dword_101D474 ebx +
add esp 4 +
sub edi 1 +
jnz loc_100FD90  +
pop esi  +
pop ebx  +
xor eax eax +
pop edi  +
mov esp ebp +
pop ebp  +
retn 34h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push ebx  +
push esi  +
push edi  +
push offset aMovingSToS___  +
mov ebx eax +
call ds:wprintf  +
add esp 0Ch +
push ebx  +
push esi  +
push edi  +
call ds:MoveFileExW  +
test eax eax +
jnz loc_100FE70  +
call ds:GetLastError  +
test ebx 0FFFFFFFEh +
jz loc_100FE19  +
push 0Ah  +
push offset aFailed  +
push offset aSC  +
call ds:wprintf  +
add esp 0Ch +
mov eax 0FFFFFBF8h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
cmp eax 78h +
jnz loc_100FE8C  +
test bl 1 +
jz loc_100FE2A  +
push esi  +
call ds:DeleteFileW  +
push esi  +
push edi  +
call ds:MoveFileW  +
test eax eax +
jnz loc_100FE70  +
call ds:GetLastError  +
cmp eax 11h +
jnz loc_100FE6C  +
push offset aCopying___  +
push offset aS_0  +
call ds:wprintf  +
add esp 8 +
not ebx  +
and ebx 1 +
push ebx  +
push esi  +
push edi  +
call ds:CopyFileW  +
test eax eax +
jnz loc_100FE70  +
call ds:GetLastError  +
test eax eax +
jnz loc_100FDFA  +
push 0Ah  +
push offset aDone  +
push offset aSC  +
call ds:wprintf  +
add esp 0Ch +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
cmp eax 11h +
jnz loc_100FE6C  +
push offset ProcName  +
push offset ModuleName  +
call ds:GetModuleHandleA  +
push eax  +
call ds:GetProcAddress  +
mov [ebp+var_4] 0 +
mov [ebp+var_8] 0FFFFFFFFh +
test eax eax +
jz loc_100FEED  +
not ebx  +
and ebx 1 +
push ebx  +
lea ecx [ebp+var_4] +
push ecx  +
lea edx [ebp+var_8] +
push edx  +
push offset loc_100FC10  +
push esi  +
push edi  +
call eax  +
test eax eax +
jz loc_100FEED  +
mov eax 1 +
neg eax  +
sbb eax eax +
and eax 408h +
add eax 0FFFFFBF8h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
xor eax eax +
neg eax  +
sbb eax eax +
and eax 408h +
add eax 0FFFFFBF8h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ecx [edi+4] +
xor eax eax +
test ecx ecx +
jz loc_100FF28  +
push ecx  +
push eax  +
push 2  +
push eax  +
push esi  +
call JetSetSystemParameterW  +
test eax eax +
jl locret_100FFA4  +
mov ecx [edi+8] +
test ecx ecx +
jz loc_100FF40  +
push ecx  +
push 0  +
push 0  +
push 0  +
push esi  +
call JetSetSystemParameterW  +
test eax eax +
jl locret_100FFA4  +
mov ecx [edi+38h] +
test ecx ecx +
jz loc_100FF5F  +
push 0  +
lea eax ds:0[ecx*4] +
push eax  +
push 16h  +
push 0  +
push esi  +
call JetSetSystemParameterW  +
test eax eax +
jl locret_100FFA4  +
mov ecx [edi+3Ch] +
test ecx ecx +
jz loc_100FF77  +
push 0  +
push ecx  +
push 12h  +
push 0  +
push esi  +
call JetSetSystemParameterW  +
test eax eax +
jl locret_100FFA4  +
mov ecx [edi+18h] +
test ecx ecx +
jz loc_100FF8F  +
push ecx  +
push 0  +
push 3  +
push 0  +
push esi  +
call JetSetSystemParameterW  +
test eax eax +
jl locret_100FFA4  +
mov ecx [edi+50h] +
test ecx ecx +
jz locret_100FFA4  +
push 0  +
push ecx  +
push 17h  +
push 0  +
push esi  +
call off_101CD40  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov edi esi +
test eax eax +
jz loc_100FFD0  +
cmp eax 0FFFFFFFFh +
jz loc_100FFD0  +
push 0  +
push eax  +
call off_101CD54  +
test esi esi +
jl loc_100FFD4  +
mov esi eax +
test esi esi +
jge loc_100FFE2  +
push 2  +
push ebx  +
call off_101CD3C  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
push 1  +
push ebx  +
call off_101CD3C  +
test eax eax +
jnz loc_100FFF5  +
test edi edi +
jle loc_100FFF5  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
call ds:GetTickCount  +
sub eax [ebp+arg_C] +
xor edx edx +
mov ecx 3E8h +
div  ecx +
cmp [ebp+arg_8] 0 +
mov esi ds:wprintf +
mov edi edx +
mov ebx eax +
jz loc_1010038  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 0Ch +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1010056  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1010056  +
push edi  +
push ebx  +
push eax  +
push ecx  +
push offset aOperationTermi  +
call esi  +
add esp 14h +
jmp loc_1010062  +
push edi  +
push ebx  +
push offset aOperationTer_0  +
call esi  +
add esp 0Ch +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
dec ecx  +
cmp ecx 10h +
ja loc_10100BE  +
jmp ds:off_10100D4[ecx*4]  +
mov eax 1 +
jmp loc_10100C3  +
mov eax 2 +
jmp loc_10100C3  +
mov eax 6 +
jmp loc_10100C3  +
mov eax 0Ah +
jmp loc_10100C3  +
mov eax 14h +
jmp loc_10100C3  +
cmp eax 20h +
jl loc_10100C3  +
mov eax 20h +
jmp loc_10100C3  +
mov eax 10h +
cmp eax edx +
jg loc_10100C9  +
mov eax edx +
cmp eax 20h +
jle locret_10100D3  +
mov eax 20h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
dec ecx  +
push edi  +
mov edi [ebp+arg_0] +
cmp ecx 10h +
ja loc_101023F  +
jmp ds:off_1010290[ecx*4]  +
xor ecx ecx +
cmp [eax] cl +
setnz cl  +
add ecx 30h +
push ecx  +
push offset aC  +
call ds:wprintf  +
add esp 8 +
pop edi  +
pop ebp  +
retn 4  +
movzx edx byte ptr [eax] +
push edx  +
push offset a2_2x  +
call ds:wprintf  +
add esp 8 +
pop edi  +
pop ebp  +
retn 4  +
movsx eax word ptr [eax] +
push eax  +
lea ecx [edi-1] +
push ecx  +
push ecx  +
push offset a_D  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebp  +
retn 4  +
movzx edx word ptr [eax] +
push edx  +
lea ecx [edi-1] +
push ecx  +
push ecx  +
push offset a_U  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebp  +
retn 4  +
mov eax [eax] +
jmp loc_1010172  +
mov edx [eax] +
push edx  +
lea ecx [edi-1] +
push ecx  +
push ecx  +
push offset a_U  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebp  +
retn 4  +
mov edx [eax+4] +
mov eax [eax] +
push edx  +
push eax  +
lea ecx [edi-1] +
push ecx  +
push ecx  +
push offset a_I64d  +
call ds:wprintf  +
add esp 14h +
pop edi  +
pop ebp  +
retn 4  +
fld  dword ptr [eax] +
sub esp 8 +
fstp  [esp+0Ch+var_C] +
add edi 0FFFFFFFAh +
push edi  +
push offset a_4g  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebp  +
retn 4  +
fld  qword ptr [eax] +
sub esp 8 +
fstp  [esp+0Ch+var_C] +
add edi 0FFFFFFFAh +
push edi  +
push offset a_4g  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebp  +
retn 4  +
cmp edi edx +
jge loc_1010229  +
mov edx edi +
push eax  +
push edx  +
push edx  +
push offset a_Hs  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop ebp  +
retn 4  +
push ebx  +
mov ebx eax +
lea eax [edx+edx] +
cmp edi eax +
push esi  +
mov [ebp+arg_0] edi +
jl loc_1010250  +
mov [ebp+arg_0] eax +
xor esi esi +
cmp [ebp+arg_0] esi +
jle loc_1010271  +
movzx ecx byte ptr [ebx] +
push ecx  +
push offset a2_2x_0  +
call ds:wprintf  +
add esi eax +
add esp 8 +
inc ebx  +
cmp esi [ebp+arg_0] +
jl loc_1010257  +
cmp esi edi +
jge loc_1010289  +
push offset word_10014D0  +
call ds:wprintf  +
add esi eax +
add esp 4 +
cmp esi edi +
jl loc_1010275  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
mov edx [eax+4] +
push ebx  +
xor ebx ebx +
mov ecx 1 +
mov [esi] ebx +
mov [ebp+var_7C] ecx +
mov [ebp+var_58] ecx +
mov [ebp+var_34] ecx +
mov [ebp+var_10] ecx +
mov ecx [eax+10h] +
push edi  +
mov edi [eax+18h] +
mov [ebp+var_94] ecx +
mov ecx [eax+14h] +
mov eax [eax+2Ch] +
push ebx  +
mov [ebp+var_70] ecx +
mov ecx 4 +
push 80000000h  +
mov [ebp+var_68] ecx +
mov [ebp+var_44] ecx +
mov [ebp+var_20] ecx +
mov ecx [ebp+arg_0] +
push edx  +
push ecx  +
mov [ebp+var_4] edx +
mov [ebp+var_84] ebx +
mov [ebp+var_80] ebx +
mov [ebp+var_78] ebx +
mov [ebp+var_74] ebx +
mov [ebp+var_60] ebx +
mov [ebp+var_5C] ebx +
mov [ebp+var_54] ebx +
mov [ebp+var_50] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_8C] 41h +
mov [ebp+var_4C] edi +
mov [ebp+var_28] eax +
call JetMove  +
cmp eax ebx +
jl loc_101044B  +
mov edx [ebp+arg_8] +
cmp [esi] edx +
jnb loc_101044B  +
mov eax [esi] +
mov edi [ebp+arg_4] +
imul eax eax +
push 41h  +
lea ecx [eax+edi+10h] +
push ebx  +
push ecx  +
call memset  +
mov edx [esi] +
imul edx edx +
lea eax [edx+edi] +
lea ecx [eax+10h] +
lea edx [eax+4] +
add esp 0Ch +
mov [ebp+var_6C] eax +
add eax 8 +
push 4  +
mov [ebp+var_24] eax +
lea eax [ebp+var_94] +
mov [ebp+var_90] ecx +
mov ecx [ebp+var_4] +
push eax  +
mov [ebp+var_48] edx +
mov edx [ebp+arg_0] +
push ecx  +
push edx  +
call JetRetrieveColumns  +
cmp eax ebx +
jl loc_101044B  +
mov eax [esi] +
imul eax eax +
add eax [ebp+var_88] +
mov [eax+edi+10h] bl +
mov ecx [esi] +
imul ecx ecx +
add edi ecx +
lea eax [edi+10h] +
lea ecx [eax+1] +
nop   +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_1010400  +
sub eax ecx +
mov ecx [edi+4] +
mov edx eax +
mov eax [edi+8] +
call sub_1010080  +
mov edx [ebp+var_4] +
push ebx  +
push 1  +
mov [edi+0Ch] eax +
mov eax [ebp+arg_0] +
inc dword ptr [esi]  +
push edx  +
push eax  +
call JetMove  +
cmp eax 0FFFFF9BDh +
jz loc_1010449  +
cmp eax ebx +
jl loc_101044B  +
mov ecx [ebp+arg_8] +
cmp [esi] ecx +
jb loc_1010391  +
pop edi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
xor eax eax +
pop edi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
xor edi edi +
test ebx ebx +
jle loc_1010490  +
mov esi ecx +
add esi 10h +
mov eax [esi-4] +
push esi  +
push eax  +
push eax  +
push offset a_S  +
call ds:printf  +
add esp 10h +
add edi eax +
add esi 54h +
sub ebx 1 +
jnz loc_1010472  +
mov esi ds:wprintf +
push 0Ah  +
push offset aC  +
call esi  +
add esp 8 +
test edi edi +
jle loc_10104B5  +
push offset asc_100A0D4  +
call esi  +
add esp 4 +
sub edi 1 +
jnz loc_10104A6  +
push 0Ah  +
push offset aC  +
call esi  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebx  +
mov ebx eax +
test ebx ebx +
jle loc_1010510  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
add edi 4 +
add esi 4 +
mov eax [edi+8] +
mov edx [esi+8] +
mov ecx [edi] +
push eax  +
mov eax [esi] +
call sub_1010120  +
push offset word_10014D0  +
call ds:wprintf  +
add esp 4 +
add esi 24h +
add edi 54h +
sub ebx 1 +
jnz loc_10104E5  +
pop edi  +
pop esi  +
push 0Ah  +
push offset aC  +
call ds:wprintf  +
add esp 8 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
test edi edi +
jl loc_1010544  +
cmp edi 0FEE0h +
jle loc_101054F  +
mov eax 0FFFFFC15h +
mov esp ebp +
pop ebp  +
retn 10h  +
mov ecx [ebp+arg_8] +
push ebx  +
push esi  +
mov eax edi +
call sub_1010460  +
mov eax edi +
shl eax 8 +
push eax  +
call loc_1013C00  +
mov esi eax +
xor ecx ecx +
mov eax edi +
mov edx 24h +
mul  edx +
seto cl  +
mov [ebp+var_8] esi +
neg ecx  +
or ecx eax +
push ecx  +
call loc_1013C00  +
mov ebx eax +
add esp 8 +
mov [ebp+var_4] ebx +
test ebx ebx +
jz loc_1010593  +
test esi esi +
jnz loc_101059D  +
mov esi 0FFFFFC0Dh +
jmp loc_1010653  +
test edi edi +
jle loc_10105E1  +
mov ecx [ebp+arg_8] +
mov edx esi +
lea eax [ebx+8] +
mov esi edi +
jmp loc_10105B0  +
mov ebx [ecx] +
mov [eax-8] ebx +
xor ebx ebx +
mov [eax-4] edx +
mov dword ptr [eax] 100h +
mov [eax+8] ebx +
mov [eax+0Ch] ebx +
mov dword ptr [eax+10h] 1 +
add ecx 54h +
add edx 100h +
add eax 24h +
sub esi 1 +
jnz loc_10105B0  +
mov ebx [ebp+var_4] +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push 0  +
push 80000000h  +
push eax  +
push ecx  +
call JetMove  +
mov esi eax +
mov [ebp+var_4] 0 +
test esi esi +
jl loc_1010649  +
mov edx [ebp+var_4] +
cmp edx [ebp+arg_C] +
jge loc_1010649  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push edi  +
push ebx  +
push eax  +
push ecx  +
call JetRetrieveColumns  +
mov esi eax +
test esi esi +
jl loc_1010653  +
mov ecx [ebp+arg_8] +
mov eax edi +
mov edx ebx +
call sub_10104D0  +
test esi esi +
jl loc_1010653  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
push 0  +
push 1  +
push edx  +
push eax  +
call JetMove  +
inc [ebp+var_4]  +
mov esi eax +
test esi esi +
jge loc_1010602  +
cmp esi 0FFFFF9BDh +
jnz loc_1010653  +
xor esi esi +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1010663  +
push eax  +
call sub_1013B9F  +
add esp 4 +
test ebx ebx +
jz loc_1010670  +
push ebx  +
call sub_1013B9F  +
add esp 4 +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push esi  +
or eax 0FFFFFFFFh +
mov [ebp+var_4] eax +
mov [ebp+var_50] eax +
lea eax [ebp+var_4] +
push eax  +
push 4  +
push 0  +
push 0  +
push ecx  +
push edx  +
push ebx  +
mov [ebp+var_54] 44h +
call JetOpenTableW  +
mov esi eax +
test esi esi +
jl loc_101073A  +
mov ecx [ebp+var_4] +
push 1  +
push 44h  +
lea eax [ebp+var_54] +
push eax  +
push 0  +
push ecx  +
push ebx  +
call JetGetTableColumnInfoA  +
mov esi eax +
test esi esi +
jl loc_101073A  +
mov esi [ebp+var_4C] +
xor ecx ecx +
mov eax esi +
mov edx 54h +
mul  edx +
seto cl  +
push edi  +
mov [ebp+var_8] esi +
neg ecx  +
or ecx eax +
push ecx  +
call loc_1013C00  +
mov edi eax +
add esp 4 +
mov [ebp+var_C] edi +
test edi edi +
jnz loc_1010701  +
mov esi 0FFFFFC0Dh +
jmp loc_101072C  +
push esi  +
push edi  +
push ebx  +
lea esi [ebp+var_10] +
lea eax [ebp+var_54] +
call sub_10102E0  +
mov esi eax +
test esi esi +
jl loc_101072C  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
push eax  +
push edi  +
mov edi [ebp+var_8] +
push ecx  +
push ebx  +
call sub_1010530  +
mov edi [ebp+var_C] +
mov esi eax +
test edi edi +
jz loc_1010739  +
push edi  +
call sub_1013B9F  +
add esp 4 +
pop edi  +
mov eax [ebp+var_50] +
cmp eax 0FFFFFFFFh +
jz loc_1010749  +
push eax  +
push ebx  +
call JetCloseTable  +
mov eax [ebp+var_4] +
cmp eax 0FFFFFFFFh +
jz loc_1010758  +
push eax  +
push ebx  +
call JetCloseTable  +
mov eax esi +
pop esi  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push 0  +
push 10h  +
push 0Ah  +
mov ebx eax +
push 0  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] 0FFFFFFFFh +
mov [ebp+var_4] 0FFFFFFFFh +
mov [ebp+var_C] 0FFFFFFFFh +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1010842  +
push 0  +
push 0  +
push 2Dh  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1010842  +
push 0  +
push 0  +
push 36h  +
push 0  +
lea edx [ebp+var_8] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1010842  +
lea eax [ebp+var_8] +
push eax  +
call off_101CD34  +
mov esi eax +
test esi esi +
jl loc_1010842  +
mov edx [ebp+var_8] +
push 0  +
push 0  +
lea ecx [ebp+var_4] +
push ecx  +
push edx  +
call JetBeginSessionW  +
mov esi eax +
test esi esi +
jl loc_1010842  +
mov eax [ebp+var_4] +
push 1  +
push ebx  +
push eax  +
call JetAttachDatabaseW  +
mov esi eax +
test esi esi +
jl loc_1010842  +
mov edx [ebp+var_4] +
push 1  +
lea ecx [ebp+var_C] +
push ecx  +
push 0  +
push ebx  +
push edx  +
call JetOpenDatabaseW  +
mov esi eax +
test esi esi +
jl loc_1010842  +
mov edx [ebp+var_C] +
mov ebx [ebp+var_4] +
push 7FFFFFFFh  +
mov ecx offset aMsysunicodefix +
call sub_1010680  +
mov esi eax +
mov eax [ebp+var_C] +
cmp eax 0FFFFFFFFh +
jz loc_1010856  +
push 0  +
push eax  +
mov eax [ebp+var_4] +
push eax  +
call JetCloseDatabase  +
mov eax [ebp+var_4] +
cmp eax 0FFFFFFFFh +
jz loc_1010867  +
push 0  +
push eax  +
call off_101CD54  +
mov eax [ebp+var_8] +
cmp eax 0FFFFFFFFh +
jz loc_1010875  +
push eax  +
call JetTerm  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push edi  +
push 0Ah  +
push offset aC  +
mov edi eax +
mov [ebp+var_8] 0 +
call ds:wprintf  +
add esp 8 +
push offset aOff  +
push 0  +
push 22h  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
call JetSetSystemParameterW  +
test eax eax +
jl loc_10109B6  +
push 0  +
push 0  +
push 23h  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
call JetSetSystemParameterW  +
test eax eax +
jl loc_10109B6  +
push 0  +
push 0  +
push 0Ah  +
push 0  +
lea edx [ebp+var_8] +
push edx  +
call JetSetSystemParameterW  +
test eax eax +
jl loc_10109B6  +
push esi  +
lea esi [ebp+var_8] +
call sub_100FF10  +
xor esi esi +
cmp eax esi +
jl loc_10109B5  +
mov eax [ebx+10h] +
cmp eax 13h +
jnz loc_1010927  +
mov eax [edi] +
call sub_1010770  +
jmp loc_10109B5  +
mov ecx [edi] +
mov [ebx+1Ch] ecx +
cmp eax 5 +
jnz loc_10109AC  +
mov eax [edi+28h] +
mov [ebp+var_4] esi +
test eax 2000000h +
jz loc_1010947  +
mov [ebp+var_4] 800h +
jmp loc_1010955  +
test eax 200000h +
jz loc_1010955  +
mov [ebp+var_4] 1000h +
test eax 1000h +
jz loc_1010965  +
mov [ebp+var_4] 2000h +
jmp loc_1010983  +
test eax 1000000h +
jz loc_1010975  +
mov [ebp+var_4] 4000h +
jmp loc_1010983  +
test eax 800000h +
jz loc_1010983  +
mov [ebp+var_4] 8000h +
mov eax [ebx+50h] +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call sub_100E390  +
cmp eax esi +
jl loc_10109B5  +
mov edx [ebx+50h] +
lea ecx [ebx+18h] +
push ecx  +
push edx  +
call sub_100E410  +
cmp eax esi +
jl loc_10109B5  +
jmp loc_10109AF  +
mov [ebx+4Ch] esi +
push ebx  +
call JetDBUtilitiesW  +
pop esi  +
cmp dword ptr [ebx+10h] 5 +
pop edi  +
jnz loc_10109C7  +
push eax  +
mov eax [ebx+50h] +
push eax  +
call sub_100DCD0  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor eax eax +
push edi  +
test ebx ebx +
jz loc_10109E9  +
cmp ebx 7FFFFFFFh +
jbe loc_10109EE  +
mov eax 80070057h +
test eax eax +
jl loc_1010A04  +
mov edx [ebp+arg_0] +
lea edi [ebp+arg_4] +
mov ecx ebx +
call sub_100E460  +
mov esi [ebp+arg_4] +
jmp loc_1010A06  +
xor esi esi +
test eax eax +
jl loc_1010A6C  +
mov eax [ebp+arg_0] +
mov ecx ebx +
sub ecx esi +
lea edx [eax+esi*2] +
mov eax 0 +
jz loc_1010A5F  +
mov edi ecx +
sub edi ebx +
mov ebx [ebp+arg_8] +
lea edi [edi+esi+7FFFFFFFh] +
sub ebx edx +
jmp loc_1010A30  +
test edi edi +
jz loc_1010A5B  +
movzx esi word ptr [ebx+edx] +
test si si +
jz loc_1010A5B  +
mov [edx] si +
dec ecx  +
add edx 2 +
dec edi  +
test ecx ecx +
jnz loc_1010A30  +
pop edi  +
sub edx 2 +
pop esi  +
mov eax 8007007Ah +
mov [edx] cx +
pop ebx  +
pop ebp  +
retn 0Ch  +
test ecx ecx +
jnz loc_1010A67  +
sub edx 2 +
mov eax 8007007Ah +
xor ecx ecx +
mov [edx] cx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
mov eax 0 +
jz loc_1010A99  +
cmp ecx 7FFFFFFFh +
jbe loc_1010A9E  +
mov eax 80070057h +
test eax eax +
jl loc_1010AE7  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea esi [ecx-1] +
mov ecx [ebp+arg_8] +
lea eax [ebp+arg_C] +
push eax  +
push ecx  +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1010AD7  +
cmp eax esi +
ja loc_1010AD7  +
jnz loc_1010AE2  +
xor edx edx +
mov [edi+esi*2] dx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
mov [edi+esi*2] ax +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 1  +
push 6  +
push offset aD_D  +
lea eax [ebp+var_24] +
push 20h  +
push eax  +
call sub_1010A80  +
mov esi ds:wprintf +
push 0Ah  +
push offset aExtensibleStor  +
call esi  +
push 0Ah  +
lea ecx [ebp+var_24] +
push ecx  +
push offset aVersionSC  +
call esi  +
push 0Ah  +
push offset aCopyrightCMicr  +
call esi  +
push 0Ah  +
push offset aC  +
call esi  +
mov ecx [ebp+var_4] +
add esp 38h +
xor ecx ebp +
pop esi  +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
call sub_1010AF0  +
mov esi ds:wprintf +
push 0Ah  +
push 0Ah  +
push offset aDescriptionDat  +
push offset aSCC  +
call esi  +
push 0Ah  +
push offset aModesOfOperati  +
push offset aSC  +
call esi  +
push edi  +
push offset aDefragmentat_1  +
call esi  +
push 0Ah  +
push offset aC  +
call esi  +
push edi  +
push offset aRecoverySRLogf  +
call esi  +
push 0Ah  +
push offset aC  +
call esi  +
push edi  +
push offset aIntegritySGDat  +
call esi  +
add esp 44h +
push 0Ah  +
push offset aC  +
call esi  +
push edi  +
push offset aChecksumSKFile  +
call esi  +
push 0Ah  +
push offset aC  +
call esi  +
push edi  +
push offset aRepairSPDataba  +
call esi  +
push 0Ah  +
push offset aC  +
call esi  +
push edi  +
push offset aFileDumpSMMode  +
call esi  +
push 0Ah  +
push offset aC  +
call esi  +
push edi  +
push offset aCopyFileSYSour  +
call esi  +
add esp 40h +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aC  +
call esi  +
push 0Ah  +
push offset aPressAKeyForMo  +
push offset aSC  +
call esi  +
push 0Ah  +
push offset aDDefragmentati  +
push offset aSC  +
call esi  +
push 0Ah  +
push offset aPRepairMFileDu  +
push offset aSC  +
call esi  +
push offset asc_1002788  +
push offset aS_0  +
call esi  +
call ds:_getch  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
movzx ebx ax +
call esi  +
movzx eax bx +
add esp 48h +
add eax 0FFFFFFBCh +
pop esi  +
pop ebx  +
cmp eax 36h +
ja locret_1010CB9  +
movzx eax ds:byte_1010CE4[eax] +
jmp ds:off_1010CBC[eax*4]  +
push edi  +
call sub_100E4B0  +
retn   +
push edi  +
call sub_100E580  +
retn   +
push edi  +
call sub_100E6E0  +
retn   +
push edi  +
call sub_100E7C0  +
retn   +
push edi  +
call sub_100E950  +
retn   +
push edi  +
call sub_100EA60  +
retn   +
push edi  +
call sub_100E8C0  +
retn   +
push edi  +
call sub_100EBC0  +
retn   +
push edi  +
call sub_100ECF0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
xor eax eax +
cmp ax [esi] +
jnz loc_1010DB9  +
mov eax dword_101CD64 +
mov ecx dword_101D470 +
inc eax  +
cmp eax 0FFFFFFFFh +
push edi  +
mov edi esi +
jge loc_1010D8A  +
or eax 0FFFFFFFFh +
mov dword_101CD64 eax +
xor esi esi +
test esi esi +
jz loc_1010D76  +
movzx eax word ptr [esi] +
push eax  +
push offset asc_100349C  +
call ds:wcschr  +
add esp 8 +
test eax eax +
jz loc_1010DB8  +
mov eax dword_101CD64 +
mov ecx dword_101D470 +
dec eax  +
cmp eax 0FFFFFFFFh +
mov esi edi +
jge loc_1010DA9  +
mov dword_101CD64 0FFFFFFFFh +
jmp loc_1010DB8  +
cmp eax ecx +
jle loc_1010D90  +
mov eax ecx +
mov dword_101CD64 eax +
cmp eax 0FFFFFFFFh +
jz loc_1010D4F  +
cmp ecx eax +
jz loc_1010D4F  +
mov edx dword_101D46C +
mov esi [edx+eax*4] +
jmp loc_1010D51  +
cmp eax ecx +
mov dword_101CD64 ecx +
jg loc_1010DB8  +
mov dword_101CD64 eax +
pop edi  +
mov ecx 3Ah +
cmp cx [esi] +
jnz loc_1010DCD  +
add esi 2 +
mov edx ecx +
cmp dx [esi] +
jz loc_1010DC3  +
xor eax eax +
cmp ax [esi] +
jnz loc_1010DE1  +
cmp [ebp+arg_4] eax +
jnz loc_1010DE1  +
push ebx  +
push offset aUsageErrorMiss  +
jmp loc_1010DFB  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1010DF5  +
mov [eax] esi +
mov eax 1 +
pop esi  +
pop ebp  +
retn 8  +
push ebx  +
push offset aUsageErrorDupl  +
mov esi ds:wprintf +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push eax  +
mov eax [ebp+arg_0] +
mov esi ecx +
push esi  +
mov ebx edx +
call sub_1010D20  +
mov ebx eax +
test ebx ebx +
jz loc_1010E83  +
test edi edi +
jz loc_1010E83  +
mov dword ptr [edi] 0 +
mov esi [esi] +
mov eax esi +
lea edx [eax+2] +
lea esp [esp+0] +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_1010E50  +
sub eax edx +
sar eax 1 +
cmp eax 2 +
jb loc_1010E81  +
push 3Ah  +
add esi 4 +
push esi  +
call ds:wcschr  +
add esp 8 +
test eax eax +
jz loc_1010E81  +
lea ecx [eax+2] +
xor edx edx +
mov [edi] ecx +
mov [eax] dx +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
movzx ecx word ptr [eax+2] +
push ebx  +
push esi  +
add ecx 0FFFFFFBEh +
push edi  +
mov esi 1 +
cmp ecx 36h +
ja loc_1010FDA  +
movzx ecx ds:byte_1011024[ecx] +
jmp ds:off_1011004[ecx*4]  +
mov edx [ebp+0Ch] +
push 0  +
add edx 10h +
push edx  +
add eax 4 +
mov ebx offset aBackupDatabase +
call sub_1010D20  +
pop edi  +
mov esi eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax [ebp+0Ch] +
or dword ptr [eax+28h] 8 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax [ebp+0Ch] +
or dword ptr [eax+28h] 4 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
push 0  +
add ecx 0Ch +
push ecx  +
add eax 4 +
mov ebx offset aTemporaryDatab +
call sub_1010D20  +
pop edi  +
mov esi eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add eax 4 +
push eax  +
call ds:_wtol  +
mov edx [ebp+0Ch] +
add esp 4 +
mov [edx+38h] eax +
test eax eax +
jg loc_1010FF8  +
push 0Ah  +
push 0Ah  +
push offset aUsageErrorIn_3  +
push offset aSCC  +
call ds:wprintf  +
add esp 10h +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add eax 4 +
push eax  +
call ds:_wtol  +
mov ecx [ebp+0Ch] +
add esp 4 +
mov [ecx+3Ch] eax +
test eax eax +
jg loc_1010FF8  +
push 0Ah  +
push 0Ah  +
push offset aUsageErrorIn_4  +
push offset aSCC  +
call ds:wprintf  +
add esp 10h +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi [ebp+0Ch] +
add edi 50h +
push edi  +
add eax 4 +
push offset aD_1  +
push eax  +
call sub_10142BE  +
add esp 0Ch +
cmp eax 1 +
jnz loc_1010FB8  +
cmp dword ptr [edi] 0 +
jge loc_1010FF8  +
push 0Ah  +
push 0Ah  +
push offset aUsageErrorIn_5  +
push offset aSCC  +
call ds:wprintf  +
add esp 10h +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov esi ds:wprintf +
push eax  +
push offset aUsageErrorInva  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
movzx ecx word ptr [edi+2] +
add ecx 0FFFFFFBFh +
mov eax 1 +
cmp ecx 34h +
ja loc_1011366  +
movzx ecx ds:byte_10113BC[ecx] +
jmp ds:off_1011390[ecx*4]  +
mov ecx [ebp+0Ch] +
or dword ptr [ecx+2Ch] 4 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
and dword ptr [ecx+2Ch] 0FFFFFFBFh +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
or dword ptr [ecx+2Ch] 80h +
or dword ptr [ecx+28h] 400000h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov eax [ebp+0Ch] +
or dword ptr [eax+2Ch] 8 +
mov ebx [eax+20h] +
mov eax ds:dword_10037F0 +
mov ecx ds:dword_10037F4 +
mov esi ds:wprintf +
add edi 4 +
cmp word ptr [edi] 0 +
mov [ebp-8] eax +
mov [ebp-4] ecx +
jnz loc_1011102  +
mov [ebx+0Ch] eax +
mov [ebx+10h] ecx +
mov eax 1 +
jmp loc_101113B  +
lea edx [ebp-4] +
push edx  +
push offset aU  +
push edi  +
call sub_10142BE  +
add esp 0Ch +
cmp eax 1 +
jnz loc_1011126  +
mov eax [ebp-4] +
mov [ebx+10h] eax +
mov eax 1 +
jmp loc_101113B  +
push 0Ah  +
push 0Ah  +
push offset aUsageErrorIn_0  +
push offset aSCC  +
call esi  +
add esp 10h +
xor eax eax +
cmp word ptr [edi] 0 +
jz loc_1011384  +
cmp dword ptr [ebx+10h] 0 +
jg loc_1011384  +
push 0Ah  +
push 0Ah  +
push offset aUsageErrorIn_0  +
push offset aSCC  +
call esi  +
add esp 10h +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
or dword ptr [ecx+2Ch] 10h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
push 0  +
add ecx 4 +
push ecx  +
lea eax [edi+4] +
mov ebx offset aLogfilePath +
call sub_1010D20  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edx [ebp+0Ch] +
push 0  +
add edx 8 +
push edx  +
lea eax [edi+4] +
mov ebx offset aSystemPath +
call sub_1010D20  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add edi 4 +
push edi  +
call ds:_wtol  +
mov ecx [ebp+0Ch] +
add esp 4 +
pop edi  +
pop esi  +
mov [ecx+4Ch] eax +
mov eax 1 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov esi [ebp+0Ch] +
cmp dword ptr [esi+10h] 0 +
jnz loc_1011225  +
cmp dword ptr [esi+14h] 0 +
jnz loc_1011225  +
cmp dword ptr [esi+54h] 0 +
jnz loc_1011225  +
push 1  +
push esi  +
lea eax [edi+4] +
mov ebx offset aDatabaseDirect +
call sub_1010D20  +
test eax eax +
jz loc_1011384  +
mov edx [esi] +
xor ecx ecx +
cmp cx [edx] +
jnz loc_1011384  +
pop edi  +
mov dword ptr [esi] offset a_ +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push 0Ah  +
push 0Ah  +
push offset aUsageErrorOnly  +
push offset aSCC  +
call ds:wprintf  +
add esp 10h +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov ebx [ebp+0Ch] +
xor esi esi +
cmp [ebx+10h] esi +
jnz loc_1011225  +
cmp [ebx+14h] esi +
jnz loc_1011225  +
cmp [ebx] esi +
jnz loc_1011225  +
cmp [ebx+54h] esi +
jnz loc_10112C9  +
push 4  +
push esi  +
lea edx [ebp+0Ch] +
push edx  +
push 67h  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov [ebp+0Ch] esi +
call JetGetSystemParameterW  +
test eax eax +
jg loc_101127F  +
mov dword ptr [ebp+0Ch] 6 +
mov eax [ebp+0Ch] +
add eax eax +
mov [ebx+54h] eax +
add eax eax +
add eax eax +
add eax eax +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [ebx+5Ch] eax +
cmp eax esi +
jnz loc_10112C6  +
mov edi ds:wprintf +
push offset aUsageErrorUnab  +
call edi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call edi  +
add esp 10h +
pop edi  +
mov [ebx+54h] esi +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov [ebx+58h] esi +
cmp word ptr [edi+4] 2Ah +
lea eax [edi+4] +
jnz loc_1011311  +
cmp [edi+6] si +
jz loc_10112FF  +
mov edi ds:wprintf +
push offset aUsageErrorIn_6  +
call edi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call edi  +
add esp 10h +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
or dword ptr [ebx+2Ch] 20h +
pop edi  +
pop esi  +
mov eax 1 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov ecx [ebx+58h] +
mov edx [ebx+5Ch] +
mov [edx+ecx*8] esi +
mov ecx [ebx+58h] +
mov edx [ebx+5Ch] +
mov [edx+ecx*8+4] esi +
mov ecx [ebx+58h] +
mov edx [ebx+5Ch] +
lea edi [edx+ecx*8] +
push eax  +
lea ecx [edi+4] +
mov eax 1 +
mov edx offset aDatabaseLocati +
call sub_1010E20  +
cmp eax esi +
jz loc_1011384  +
mov ecx [ebx+58h] +
mov edx [ebx+5Ch] +
cmp [edx+ecx*8+4] esi +
lea ecx [edx+ecx*8+4] +
jnz loc_101135A  +
mov dword ptr [ecx] offset a_ +
inc dword ptr [ebx+58h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov esi ds:wprintf +
push edi  +
push offset aUsageErrorInva  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
movzx edx word ptr [ecx+2] +
add edx 0FFFFFFBEh +
push ebx  +
mov eax 1 +
cmp edx 32h +
ja loc_101147C  +
movzx edx ds:byte_10114B8[edx] +
jmp ds:off_10114A4[edx*4]  +
mov ecx [ebp+0Ch] +
or dword ptr [ecx+28h] 400h +
pop ebx  +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
or dword ptr [ecx+28h] 200h +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax [ebp+0Ch] +
add eax 0Ch +
push 0  +
push eax  +
lea eax [ecx+4] +
mov ebx offset aTemporaryDatab +
call sub_1010D20  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edx [ebp+0Ch] +
push 0  +
add edx 1Ch +
push edx  +
lea eax [ecx+4] +
mov ebx offset aReportFileName +
call sub_1010D20  +
pop ebx  +
pop ebp  +
retn 8  +
***
push esi  +
mov esi ds:wprintf +
push ecx  +
push offset aUsageErrorInva  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
movzx ecx word ptr [eax+2] +
push ebx  +
push esi  +
add ecx 0FFFFFFBBh +
push edi  +
mov edi 1 +
cmp ecx 2Fh +
ja loc_10115A4  +
movzx ecx ds:byte_10115E0[ecx] +
jmp ds:off_10115CC[ecx*4]  +
mov eax [ebp+0Ch] +
and dword ptr [eax+28h] 0FFFEFFFFh +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edx [ebp+0Ch] +
push 0  +
add edx 0Ch +
push edx  +
add eax 4 +
mov ebx offset aTemporaryDatab +
call sub_1010D20  +
mov edi eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov ebx [ebp+0Ch] +
lea esi [ebx+40h] +
push esi  +
add eax 4 +
push offset aD_1  +
push eax  +
call sub_10142BE  +
add esp 0Ch +
cmp eax 1 +
jnz loc_1011582  +
cmp dword ptr [esi] 0 +
jl loc_1011582  +
mov eax edi +
pop edi  +
pop esi  +
mov dword ptr [ebx+44h] 3E8h +
pop ebx  +
pop ebp  +
retn 8  +
***
push 0Ah  +
push 0Ah  +
push offset aUsageErrorIn_7  +
push offset aSCC  +
call ds:wprintf  +
add esp 10h +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov esi ds:wprintf +
push eax  +
push offset aUsageErrorInva  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
movzx edx word ptr [ecx+2] +
add edx 0FFFFFFBAh +
push ebx  +
mov eax 1 +
cmp edx 2Eh +
ja loc_101169C  +
movzx edx ds:byte_10116D8[edx] +
jmp ds:off_10116C4[edx*4]  +
mov eax [ebp+0Ch] +
add eax 0Ch +
push 0  +
push eax  +
lea eax [ecx+4] +
mov ebx offset aTemporaryDatab +
call sub_1010D20  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
or dword ptr [ecx+28h] 200h +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edx [ebp+0Ch] +
push 0  +
add edx 1Ch +
push edx  +
lea eax [ecx+4] +
mov ebx offset aReportFileName +
call sub_1010D20  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
or dword ptr [ecx+28h] 100000h +
pop ebx  +
pop ebp  +
retn 8  +
***
push esi  +
mov esi ds:wprintf +
push ecx  +
push offset aUsageErrorInva  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push 0  +
push 0  +
push 101h  +
lea ecx [ebp+var_208] +
push ecx  +
push 0  +
push 0  +
push 0  +
push 0  +
push eax  +
call sub_1014519  +
add esp 24h +
lea edx [ebp+var_208] +
push edx  +
push 8  +
push esi  +
call sub_100DFC0  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+0Ch] +
push esi  +
mov esi [ecx+20h] +
mov ecx [ebp+8] +
movzx edx word ptr [ecx+2] +
xor eax eax +
add edx 0FFFFFFBFh +
mov [ebp-4] eax +
cmp edx 37h +
ja loc_10118E1  +
movzx edx ds:byte_1011930[edx] +
jmp ds:off_1011910[edx*4]  +
cmp dword ptr [esi+10h] 1 +
jnz loc_1011849  +
or dword ptr [esi+18h] 1 +
mov eax 1 +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
cmp dword ptr [esi+10h] 5 +
jnz loc_10117ED  +
push 0  +
push 0  +
push 0  +
lea eax [ebp-4] +
push eax  +
push 0  +
mov dword ptr [ebp-4] 1 +
mov ecx [esi+50h] +
push 0  +
push ecx  +
call sub_100E390  +
mov eax 1 +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
or dword ptr [esi+18h] 10000000h +
mov eax 1 +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov eax [esi+10h] +
test eax eax +
jle loc_1011849  +
cmp eax 2 +
jle loc_1011811  +
cmp eax 5 +
jnz loc_1011849  +
add ecx 4 +
mov [esi+28h] ecx +
mov eax 1 +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
cmp dword ptr [esi+10h] 5 +
jnz loc_1011909  +
add ecx 4 +
mov dword ptr [ebp-4] 1 +
mov edx [esi+50h] +
push ecx  +
push edx  +
call sub_100E100  +
test eax eax +
jge loc_1011906  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push 0  +
add ecx 4 +
push 0  +
push ecx  +
mov dword ptr [esi+10h] 3 +
call ds:wcstol  +
add esp 0Ch +
mov [esi+34h] eax +
mov eax 1 +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
cmp dword ptr [esi+10h] 5 +
jnz loc_10118AB  +
push offset asc_10015BC  +
push 0  +
push 0  +
push 0  +
push 0  +
mov dword ptr [ebp-4] 1 +
mov eax [esi+50h] +
push 0  +
push eax  +
call sub_100E390  +
test eax eax +
jz loc_1011906  +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
or dword ptr [esi+18h] 40000h +
push ebx  +
push 0  +
add esi 30h +
push esi  +
lea eax [ecx+4] +
mov ebx offset aCsvOutputDataF +
call sub_1010D20  +
pop ebx  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
or dword ptr [esi+18h] 80000h +
mov eax 1 +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov esi ds:wprintf +
push ecx  +
push offset aUsageErrorInva  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
xor eax eax +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov eax [ebp-4] +
pop esi  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
movzx ecx word ptr [eax+2] +
cmp ecx 44h +
jz loc_10119AA  +
cmp ecx 64h +
jz loc_10119AA  +
push esi  +
mov esi ds:wprintf +
push eax  +
push offset aUsageErrorInva  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [ebp+0Ch] +
push ebx  +
push 0  +
add ecx 0Ch +
push ecx  +
add eax 4 +
mov ebx offset aDestinationFil +
call sub_1010D20  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 878h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
test byte ptr [ebx+28h] 20h +
jz loc_10119FF  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn   +
mov ecx [ebx] +
push esi  +
lea eax [ebp+FindFileData] +
push eax  +
push ecx  +
call ds:FindFirstFileW  +
mov ecx [ebx] +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_1011A86  +
push 0  +
push 0  +
push 0  +
push 0  +
push 105h  +
lea edx [ebp+var_41C] +
push edx  +
push 105h  +
lea eax [ebp+var_628] +
push eax  +
push ecx  +
call sub_1014519  +
push 0  +
push 0  +
lea edx [ebp+var_41C] +
push edx  +
lea eax [ebp+var_628] +
push eax  +
lea ecx [ebp+var_210] +
push 105h  +
push ecx  +
call sub_10143F0  +
add esp 3Ch +
lea edx [ebp+FindFileData.cFileName] +
push edx  +
push 20Ah  +
lea eax [ebp+var_210] +
push eax  +
call sub_100E050  +
push esi  +
call ds:FindClose  +
jmp loc_1011A98  +
push ecx  +
push 20Ah  +
lea edx [ebp+var_210] +
push edx  +
call sub_100DFC0  +
mov esi [ebx+10h] +
test esi esi +
jz loc_1011AE3  +
xor eax eax +
lea edi [ebp+var_210] +
call sub_100FDC0  +
mov edi eax +
test edi edi +
jge loc_1011AE3  +
mov eax [ebx+10h] +
mov esi ds:wprintf +
push eax  +
push offset aErrorCouldNotB  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 14h +
pop esi  +
mov eax edi +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn   +
test byte ptr [ebx+28h] 4 +
jnz loc_1011B43  +
mov edi [ebx+0Ch] +
mov eax 1 +
lea esi [ebp+var_210] +
call sub_100FDC0  +
mov edi eax +
test edi edi +
jge loc_1011B39  +
mov edx [ebx+0Ch] +
mov ecx esi +
push ecx  +
push edx  +
mov eax esi +
mov esi ds:wprintf +
push eax  +
push offset aErrorCouldNotR  +
call esi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call esi  +
add esp 1Ch +
pop esi  +
mov eax edi +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn   +
mov ecx [ebx+0Ch] +
push ecx  +
call ds:DeleteFileW  +
mov ecx [ebp+var_4] +
pop esi  +
mov eax edi +
xor ecx ebp +
pop edi  +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0CE4h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+24h] 2 +
push esi  +
mov esi ecx +
mov [ebp+var_CDC] esi +
jnz loc_1011DD2  +
test dword ptr [eax+28h] 3A01000h +
jnz loc_1011DD2  +
mov ecx [esi] +
push ebx  +
push edi  +
push 20Ah  +
lea eax [ebp+var_218] +
push eax  +
xor edi edi +
push edi  +
push 3  +
push 0FFFFFFFFh  +
push ecx  +
call JetGetSystemParameterW  +
cmp eax edi +
jl loc_1011D80  +
push offset asc_100A380  +
push 105h  +
lea edx [ebp+var_218] +
push edx  +
call sub_10109D0  +
mov ecx [esi] +
push 20Ah  +
lea eax [ebp+var_424] +
push eax  +
push edi  +
push 2  +
push 0FFFFFFFFh  +
push ecx  +
call JetGetSystemParameterW  +
cmp eax edi +
mov [ebp+var_CD0] eax +
jl loc_1011D7A  +
push edi  +
push edi  +
push edi  +
push edi  +
push 100h  +
lea edx [ebp+var_624] +
push edx  +
push 3  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+var_424] +
push ecx  +
call sub_1014519  +
mov eax [esi] +
add esp 24h +
push 4  +
push edi  +
lea edx [ebp+var_CD4] +
push edx  +
push 88h  +
push 0FFFFFFFFh  +
push eax  +
mov [ebp+var_CD4] edi +
call JetGetSystemParameterW  +
cmp eax edi +
mov [ebp+var_CD0] eax +
jl loc_1011D7A  +
mov ebx [ebp+var_CD4] +
not ebx  +
mov [ebp+var_CE4] offset aLog +
mov [ebp+var_CE0] offset aJtx +
and ebx 1 +
mov [ebp+var_CD8] edi +
mov ecx [ebp+ebx*4+var_CE4] +
push ecx  +
lea edx [ebp+var_218] +
push edx  +
lea eax [ebp+var_624] +
push eax  +
lea ecx [ebp+var_C] +
push ecx  +
lea edx [ebp+FileName] +
push 104h  +
push edx  +
call sub_10143F0  +
add esp 18h +
lea eax [ebp+FindFileData] +
push eax  +
lea ecx [ebp+FileName] +
push ecx  +
mov edi 1 +
call ds:FindFirstFileW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_1011D54  +
test edi edi +
jz loc_1011D54  +
push 100h  +
lea edx [ebp+var_A2C] +
push edx  +
push 105h  +
lea eax [ebp+var_218] +
push eax  +
push 0  +
push 0  +
push 0  +
lea ecx [ebp+FindFileData.cFileName] +
push 0  +
push ecx  +
call sub_1014519  +
lea edx [ebp+var_A2C] +
push edx  +
lea eax [ebp+var_218] +
push eax  +
lea ecx [ebp+var_624] +
push ecx  +
lea edx [ebp+var_C] +
push edx  +
lea eax [ebp+var_424] +
push 105h  +
push eax  +
call sub_10143F0  +
add esp 3Ch +
push 0  +
push 50h  +
lea ecx [ebp+var_A7C] +
push ecx  +
lea edx [ebp+var_424] +
push edx  +
call JetGetLogFileInfoW  +
test eax eax +
jge loc_1011D93  +
lea eax [ebp+FindFileData] +
push eax  +
push esi  +
call ds:FindNextFileW  +
mov edi eax +
jmp loc_1011CC3  +
push esi  +
call ds:FindClose  +
mov eax [ebp+var_CD8] +
inc eax  +
mov ecx 1 +
sub ecx ebx +
mov [ebp+var_CD8] eax +
mov ebx ecx +
cmp eax 2 +
jb loc_1011C71  +
mov eax [ebp+var_CD0] +
pop edi  +
pop ebx  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
push esi  +
call ds:FindClose  +
mov edx [ebp+var_A30] +
mov eax [ebp+var_CDC] +
push 0  +
push edx  +
push 40h  +
push 0  +
push eax  +
call JetSetSystemParameterW  +
mov [ebp+var_CD0] eax +
test eax eax +
jl loc_1011D7A  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50Ch +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ds:GetTickCount +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_418] edi +
mov [ebp+var_41C] 0FFFFFFFFh +
mov [ebp+var_428] edi +
call ebx  +
push offset aHeapsetinforma  +
push offset ModuleName  +
mov [ebp+var_48C] eax +
mov [ebp+var_420] edi +
mov [ebp+var_490] edi +
call ds:GetModuleHandleA  +
push eax  +
call ds:GetProcAddress  +
cmp eax edi +
jz loc_1011E5F  +
push edi  +
push edi  +
push 1  +
push edi  +
call eax  +
mov eax [ebp+arg_0] +
push 60h  +
lea ecx [ebp+DistanceToMoveHigh] +
push 0  +
push ecx  +
mov dword_101D470 eax +
mov dword_101D46C esi +
mov dword_101CD64 0FFFFFFFFh +
call memset  +
push 54h  +
lea edx [ebp+var_504] +
push 0  +
push edx  +
mov [ebp+var_440] 2 +
call memset  +
mov edi ds:wprintf +
xor eax eax +
push 0Ah  +
mov [ebp+var_4B0] eax +
push offset aC  +
mov [ebp+var_504] 54h +
mov [ebp+var_4AC] eax +
mov [ebp+var_4A8] eax +
mov [ebp+var_4A4] eax +
mov [ebp+var_4A0] eax +
mov [ebp+var_49C] eax +
mov [ebp+var_498] eax +
mov [ebp+var_494] eax +
mov [ebp+var_4B0] 20h +
call edi  +
add esp 20h +
call ds:GetCurrentProcessId  +
mov esi eax +
mov eax dword_101D470 +
cmp eax 2 +
jge loc_1011F23  +
push 0Ah  +
push 0Ah  +
push offset aUsageErrorNoMo  +
push offset aSCC  +
call edi  +
add esp 10h +
jmp loc_1012059  +
cmp eax 1 +
jge loc_1011F5D  +
mov dword_101CD64 eax +
xor eax eax +
movzx ecx word ptr [eax] +
push ecx  +
push offset asc_100349C  +
call ds:wcschr  +
add esp 8 +
test eax eax +
jnz loc_1011F76  +
push 0Ah  +
push 0Ah  +
push offset aUsageErrorMode  +
push offset aSCC  +
call edi  +
add esp 10h +
jmp loc_1012059  +
mov dword_101CD64 1 +
cmp eax 1 +
jz loc_1011F2D  +
mov eax dword_101D46C +
mov eax [eax+4] +
jmp loc_1011F2F  +
push esi  +
push offset aTempD_edb  +
push 40h  +
push offset unk_101D168  +
call sub_101429D  +
push esi  +
push offset aTempdfrgD_edb  +
push 40h  +
push offset unk_101D368  +
call sub_101429D  +
push esi  +
push offset aTempupgdD_edb  +
push 40h  +
push offset unk_101D2E8  +
call sub_101429D  +
push esi  +
push offset aTemprepairD_ed  +
push 40h  +
push offset unk_101D268  +
call sub_101429D  +
add esp 40h +
push esi  +
push offset aTempintegD_edb  +
push 40h  +
push offset unk_101D0E8  +
call sub_101429D  +
push esi  +
push offset aTempscrubD_edb  +
push 40h  +
push offset unk_101D3E8  +
call sub_101429D  +
push esi  +
push offset aTempchksumD_ed  +
push 40h  +
push offset unk_101D1E8  +
call sub_101429D  +
mov eax dword_101CD64 +
add esp 30h +
cmp eax 0FFFFFFFFh +
jz loc_1012017  +
cmp dword_101D470 eax +
jz loc_1012017  +
mov edx dword_101D46C +
mov eax [edx+eax*4] +
jmp loc_1012019  +
xor eax eax +
movzx eax word ptr [eax+2] +
add eax 0FFFFFFC1h +
cmp eax 3Bh +
ja loc_1012126  +
movzx eax ds:byte_1013A74[eax] +
jmp ds:off_1013A4C[eax*4]  +
mov [ebp+var_464] 1 +
push offset loc_1010E90  +
lea esi [ebp+DistanceToMoveHigh] +
call sub_100F6F0  +
test eax eax +
jnz loc_1012173  +
mov ecx dword_101D470 +
xor eax eax +
cmp ecx eax +
jge loc_101213E  +
mov dword_101CD64 ecx +
jmp loc_101214E  +
lea ecx [ebp+var_4B0] +
mov [ebp+var_464] 2 +
mov [ebp+var_45C] 40h +
mov [ebp+var_468] ecx +
push offset loc_1011060  +
jmp loc_1012046  +
mov [ebp+var_464] 0 +
push offset loc_1011400  +
jmp loc_1012046  +
or [ebp+var_460] 10000h +
mov [ebp+var_464] 0Ch +
push offset loc_10114F0  +
jmp loc_1012046  +
mov [ebp+var_464] 6 +
push offset loc_1011620  +
jmp loc_1012046  +
lea edx [ebp+var_504] +
mov [ebp+var_464] 5 +
mov [ebp+var_468] edx +
push offset loc_1011770  +
jmp loc_1012046  +
mov [ebp+var_464] 0Dh +
push offset loc_1011970  +
jmp loc_1012046  +
mov [ebp+var_464] 8 +
push offset loc_100F4A0  +
jmp loc_1012046  +
push 0Ah  +
push 0Ah  +
push offset aUsageErrorIn_1  +
push offset aSCC  +
call edi  +
add esp 10h +
jmp loc_1012059  +
mov dword_101CD64 eax +
cmp ecx eax +
jz loc_101214E  +
mov eax dword_101D46C +
mov eax [eax] +
push eax  +
call ds:_wcsupr  +
add esp 4 +
mov edi eax +
call sub_1010B60  +
pop edi  +
pop esi  +
or eax 0FFFFFFFFh +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn   +
push 0  +
push 1  +
push 81h  +
push 0  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
push offset aEseutil  +
push 0  +
push 22h  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 1  +
push 9Ch  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push offset unk_101D168  +
push 0  +
push 1  +
push 0  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov eax [ebp+var_460] +
test al 1 +
jnz loc_1012202  +
call sub_1010AF0  +
mov eax [ebp+var_460] +
mov ecx [ebp+var_464] +
cmp ecx 0Ah +
jz loc_1012212  +
cmp ecx 3 +
jnz loc_1012224  +
test eax 3A01000h +
jnz loc_1012224  +
or eax 200000h +
mov [ebp+var_460] eax +
test eax 2000000h +
jz loc_101223F  +
push 0  +
push 800h  +
push 40h  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
jmp loc_1012258  +
test eax 200000h +
jz loc_101226D  +
push 0  +
push 1000h  +
push 40h  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov eax [ebp+var_460] +
test eax 1000h +
jz loc_1012288  +
push 0  +
push 2000h  +
push 40h  +
push 0  +
lea ecx [ebp+var_418] +
push ecx  +
jmp loc_10122BC  +
test eax 1000000h +
jz loc_10122A3  +
push 0  +
push 4000h  +
push 40h  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
jmp loc_10122BC  +
test eax 800000h +
jz loc_10122CB  +
push 0  +
push 8000h  +
push 40h  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F0C0  +
mov esi eax +
test esi esi +
jl loc_1013937  +
call ebx  +
mov [ebp+var_48C] eax +
mov eax [ebp+var_464] +
cmp eax 0Dh +
ja loc_101362E  +
jmp ds:off_1013AB0[eax*4]  +
cmp [ebp+var_470] 0 +
jnz loc_101232B  +
push offset aLogfileBaseNam  +
push offset aUsageErrorMiss  +
call edi  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call edi  +
add esp 14h +
mov esi 0FFFFFC15h +
jmp loc_1013937  +
push 0Ah  +
push offset aInitiatingReco  +
call edi  +
mov ecx [ebp+var_470] +
push 0Ah  +
push ecx  +
push offset aLogfileBaseN_0  +
call edi  +
mov eax [ebp+var_43C] +
add esp 14h +
test eax eax +
jz loc_1012381  +
push 0Ah  +
push eax  +
push offset aTempDatabaseSi  +
call edi  +
mov edx [ebp+var_43C] +
add esp 0Ch +
push 0  +
push edx  +
push 13h  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov eax [ebp+var_484] +
test eax eax +
jnz loc_1012390  +
mov eax offset aCurrentDirec_0 +
push 0Ah  +
push eax  +
push offset aLogFilesSC  +
call edi  +
mov eax [ebp+var_480] +
add esp 0Ch +
test eax eax +
jnz loc_10123AC  +
mov eax offset aCurrentDirec_0 +
push 0Ah  +
push eax  +
push offset aSystemFilesSC  +
call edi  +
mov eax [ebp+DistanceToMoveHigh] +
add esp 0Ch +
test eax eax +
jz loc_10123FF  +
cmp eax offset a_ +
jnz loc_10123CF  +
mov eax offset aCurrentDirec_0 +
push 0Ah  +
push eax  +
push offset aDatabaseDire_0  +
call edi  +
mov ecx [ebp+DistanceToMoveHigh] +
add esp 0Ch +
push ecx  +
push 0  +
push 71h  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
test [ebp+var_460] 400000h +
jz loc_1012429  +
push 0  +
push 1  +
push 34h  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov eax [ebp+var_430] +
test eax eax +
jz loc_10124A2  +
xor esi esi +
test eax eax +
jle loc_101248D  +
lea esp [esp+0] +
mov ecx [ebp+var_42C] +
mov eax [ecx+esi*8+4] +
test eax eax +
jnz loc_1012453  +
mov eax offset aEmpty +
push eax  +
push offset aNewDatabaseLoc  +
call edi  +
mov edx [ebp+var_42C] +
mov eax [edx+esi*8] +
add esp 8 +
push 0Ah  +
test eax eax +
jz loc_101247A  +
push eax  +
push offset aOriginalDataba  +
call edi  +
add esp 0Ch +
jmp loc_1012484  +
push offset aC  +
call edi  +
add esp 8 +
inc esi  +
cmp esi [ebp+var_430] +
jl loc_1012440  +
test byte ptr [ebp+var_45C] 20h +
jz loc_10124A2  +
push 0Ah  +
push offset aDefaultDatab_1  +
call edi  +
add esp 8 +
push offset aOn  +
push 0  +
push 22h  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0Ah  +
push offset aC  +
call edi  +
add esp 8 +
test byte ptr [ebp+var_45C] 8 +
jz loc_10124F7  +
push 0  +
push 0  +
push 30h  +
push 0  +
lea ecx [ebp+var_418] +
push ecx  +
call off_101CD40  +
mov esi eax +
test esi esi +
jl loc_1013937  +
lea edi [ebp+DistanceToMoveHigh] +
lea esi [ebp+var_418] +
call sub_100FF10  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov edx edi +
push edx  +
lea ecx [ebp+var_418] +
call sub_1011B60  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov eax [ebp+var_478] +
test eax eax +
jnz loc_10125F0  +
mov eax [ebp+var_430] +
mov ecx [ebp+var_42C] +
mov [ebp+var_4A8] eax +
mov [ebp+var_4AC] ecx +
test eax eax +
jnz loc_101255B  +
or [ebp+var_45C] 20h +
push offset aPerformingSoft  +
mov [ebp+var_494] offset loc_100EDB0 +
mov [ebp+var_420] 1 +
call ds:wprintf  +
mov edx [ebp+var_45C] +
add esp 4 +
push edx  +
lea eax [ebp+var_4B0] +
push eax  +
lea ecx [ebp+var_418] +
push ecx  +
call JetInit3W  +
mov esi eax +
mov edi esi +
test esi esi +
jge loc_10125B0  +
mov edx [ebp+var_418] +
push 2  +
push edx  +
call off_101CD3C  +
jmp loc_10125CB  +
mov eax [ebp+var_418] +
push 1  +
push eax  +
call off_101CD3C  +
mov esi eax +
test esi esi +
jnz loc_10125CD  +
test edi edi +
jle loc_10125CB  +
mov esi edi +
test esi esi +
jl loc_1013931  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call ds:wprintf  +
mov edi ds:wprintf +
add esp 0Ch +
jmp loc_10138A7  +
mov ecx [ebp+var_474] +
push eax  +
test ecx ecx +
jz loc_101260C  +
push ecx  +
push offset aRestoringToSFr  +
call ds:wprintf  +
add esp 0Ch +
jmp loc_101261A  +
push offset aRestoringToCur  +
call ds:wprintf  +
add esp 8 +
mov ecx [ebp+var_474] +
mov edx [ebp+var_478] +
push offset loc_100EDB0  +
push ecx  +
push edx  +
call JetRestore2W  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
mov esi eax +
call ds:wprintf  +
add esp 0Ch +
test esi esi +
jl loc_1013931  +
mov edi ds:wprintf +
jmp loc_10138A7  +
push offset unk_101D268  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0Ah  +
push offset aInitiatingRepa  +
call edi  +
mov eax [ebp+DistanceToMoveHigh] +
push 0Ah  +
push eax  +
push offset aDatabaseSC  +
call edi  +
mov ecx [ebp+lpFileName] +
push 0Ah  +
push ecx  +
push offset aTemp_DatabaseS  +
call edi  +
add esp 20h +
push offset aRepair_off  +
push ebx  +
push 22h  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
mov [ebp+var_420] 1 +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov ecx [ebp+var_418] +
push 20Ah  +
lea eax [ebp+var_220] +
push eax  +
push ebx  +
push 1  +
push ebx  +
push ecx  +
call JetGetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov edx [ebp+lpFileName] +
push edx  +
push ebx  +
push 1  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 2Eh  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 23h  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 100h  +
push 12h  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 2Dh  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 36h  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 2710h  +
push 6  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 2710h  +
push 7  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 1  +
push 41h  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 80h  +
push 5  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 2710h  +
push 0Ah  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
lea edi [ebp+DistanceToMoveHigh] +
lea esi [ebp+var_418] +
call sub_100FF10  +
mov esi eax +
test esi esi +
jl loc_1013931  +
lea edx [ebp+var_418] +
push edx  +
call off_101CD34  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov ecx [ebp+var_418] +
push offset dword_10015C0  +
push offset aUser  +
lea eax [ebp+var_41C] +
push eax  +
push ecx  +
call JetBeginSessionW  +
mov esi eax +
test esi esi +
jl loc_10135D3  +
mov ecx [ebp+var_460] +
xor eax eax +
test ecx 100h +
jz loc_10128A2  +
mov eax 100h +
test ecx 200h +
jz loc_10128AD  +
or eax 8 +
test ecx 100000h +
jz loc_10128BC  +
or eax 10000h +
jmp loc_10128C6  +
test cl 1 +
jz loc_10128C6  +
or eax 8000h +
mov edx [ebp+var_46C] +
mov ecx [ebp+var_478] +
push eax  +
mov eax [ebp+var_468] +
push offset loc_100EDB0  +
push edx  +
mov edx [ebp+DistanceToMoveHigh] +
push eax  +
mov eax [ebp+var_41C] +
push ecx  +
push edx  +
push eax  +
call sub_100FB40  +
mov esi eax +
cmp esi 0FFFFFB38h +
jnz loc_1012C21  +
mov eax [ebp+var_41C] +
mov ebx [ebp+var_418] +
xor ecx ecx +
call sub_100FFB0  +
lea ecx [ebp+var_220] +
push ecx  +
push 0  +
push 1  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
mov [ebp+var_418] 0 +
mov [ebp+var_41C] 0FFFFFFFFh +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov edi ds:wprintf +
mov al byte ptr [ebp+var_460] +
mov [ebp+var_424] 0 +
test al 8 +
jz loc_1012970  +
mov [ebp+var_424] 20h +
test al 2 +
jz loc_101297B  +
or [ebp+var_424] 40h +
test al 4 +
jz loc_1012989  +
or [ebp+var_424] 100h +
push offset unk_101D368  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_10135D9  +
push 0Ah  +
push offset aInitiatingDefr  +
call edi  +
mov eax [ebp+DistanceToMoveHigh] +
push 0Ah  +
push eax  +
push offset aDatabaseSC_0  +
call edi  +
add esp 14h +
push offset aOff  +
push ebx  +
push 22h  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
mov [ebp+var_420] 1 +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 23h  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 100h  +
push 12h  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 2Eh  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 2Dh  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 36h  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 2710h  +
push 6  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 2710h  +
push 7  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 2710h  +
push 0Ah  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 1  +
push 41h  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
lea edi [ebp+DistanceToMoveHigh] +
lea esi [ebp+var_418] +
call sub_100FF10  +
mov esi eax +
test esi esi +
jl loc_1013931  +
lea edx [ebp+var_418] +
push edx  +
call off_101CD34  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov ecx [ebp+var_418] +
push offset dword_10015C0  +
push offset aUser  +
lea eax [ebp+var_41C] +
push eax  +
push ecx  +
call JetBeginSessionW  +
mov esi eax +
test esi esi +
jl loc_10135D3  +
mov edx [ebp+lpFileName] +
push edx  +
call ds:DeleteFileW  +
mov ecx [ebp+DistanceToMoveHigh] +
mov eax [ebp+var_41C] +
mov edx [ebp+lpFileName] +
mov [ebp+var_4E8] ecx +
mov [ebp+var_500] eax +
mov eax [ebp+var_424] +
lea ecx [ebp+var_504] +
push ecx  +
mov [ebp+var_4F4] 11h +
mov [ebp+var_4DC] edx +
mov [ebp+var_4D8] ebx +
mov [ebp+var_4EC] eax +
mov [ebp+var_4B8] offset loc_100EDB0 +
call JetDBUtilitiesW  +
mov esi eax +
test esi esi +
jl loc_10135D3  +
mov eax [ebp+var_41C] +
mov ebx [ebp+var_418] +
xor ecx ecx +
call sub_100FFB0  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov ebx edi +
call sub_10119D0  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov edi ds:wprintf +
push 0Ah  +
push 0Ah  +
push offset aCnoteC  +
call edi  +
push 0Ah  +
push offset aItIsRecommende  +
call edi  +
push 0Ah  +
push offset aOfThisDatabase  +
call edi  +
push 0Ah  +
push offset aDefragmentat_2  +
call edi  +
push 0Ah  +
push 0Ah  +
push offset aItWasInAtTheTi  +
call edi  +
add esp 30h +
jmp loc_10138A7  +
test esi esi +
jl loc_10135D3  +
mov eax [ebp+var_41C] +
mov ebx [ebp+var_418] +
xor ecx ecx +
mov [ebp+var_428] esi +
call sub_100FFB0  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov edi ds:wprintf +
push 0Ah  +
push offset aNoteC  +
call edi  +
push 0Ah  +
push offset aItIsRecommende  +
call edi  +
push 0Ah  +
push offset aOfThisDatabase  +
call edi  +
push 0Ah  +
push offset aRepairTheDatab  +
call edi  +
push 0Ah  +
push 0Ah  +
push offset aItWasInAtTheTi  +
call edi  +
add esp 2Ch +
jmp loc_10138A7  +
mov edx [ebp+DistanceToMoveHigh] +
xor eax eax +
push edx  +
mov [ebp+var_10] eax +
mov [ebp+var_424] eax +
call sub_100F3F0  +
or [ebp+var_460] 4000000h +
push offset unk_101D1E8  +
lea ebx [ebp+var_424] +
lea ecx [ebp+DistanceToMoveHigh] +
mov [ebp+hObject] eax +
call sub_100F130  +
mov ebx [ebp+var_424] +
mov esi eax +
test ebx ebx +
jnz loc_1012CDD  +
cmp [ebp+hObject] ebx +
jz loc_1012CDD  +
mov ebx 3 +
xor esi esi +
jmp loc_1012CE5  +
test esi esi +
jl loc_1013937  +
push 0Ah  +
push offset aInitiatingChec  +
call edi  +
add esp 8 +
mov [ebp+var_420] 1 +
cmp ebx 5 +
ja loc_1012E14  +
jmp ds:off_1013AE8[ebx*4]  +
mov eax [ebp+DistanceToMoveHigh] +
push 0Ah  +
push eax  +
push offset aCheckpointFi_0  +
call edi  +
add esp 0Ch +
or [ebp+var_460] 10000h +
jmp loc_1012E37  +
cmp [ebp+hObject] 0 +
jnz loc_1012D46  +
mov ecx [ebp+DistanceToMoveHigh] +
push 0Ah  +
push ecx  +
push offset aLogFileSC  +
call edi  +
add esp 0Ch +
mov ecx [ebp+DistanceToMoveHigh] +
and [ebp+var_460] 0FFFEFFFFh +
lea eax [ebp+var_C] +
lea edx [ebp+var_504] +
push ecx  +
mov esi eax +
mov [ebp+var_468] edx +
mov [ebp+var_464] 5 +
mov [ebp+var_4F4] 8 +
mov [ebp+var_470] eax +
mov [ebp+var_4EC] 40h +
call sub_1011710  +
push 0  +
push 0  +
push 2Dh  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 1  +
push 41h  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
lea eax [ebp+DistanceToMoveHigh] +
lea ebx [ebp+var_504] +
call sub_1010890  +
mov esi eax +
test esi esi +
jl loc_1013937  +
jmp loc_1012E37  +
mov ecx [ebp+DistanceToMoveHigh] +
push 0Ah  +
push 0Ah  +
push ecx  +
push offset aDatabaseSCC  +
call edi  +
push 0Ah  +
push offset aThisIsATempora  +
call edi  +
add esp 18h +
and [ebp+var_460] 0FFFEFFFFh +
jmp loc_1012E37  +
mov edx [ebp+DistanceToMoveHigh] +
push 0Ah  +
push edx  +
push offset aDatabaseSC  +
call edi  +
mov eax [ebp+lpFileName] +
push 0Ah  +
push eax  +
push offset aTemp_DatabaseS  +
call edi  +
add esp 18h +
test [ebp+var_460] 10000h +
jz loc_1012EA3  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call edi  +
add esp 0Ch +
push 4  +
push 0  +
lea ecx [ebp+hObject] +
push ecx  +
push 40h  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov [ebp+hObject] 0 +
call JetGetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov eax [ebp+var_444] +
mov ecx [ebp+var_448] +
lea edx [ebp+var_10] +
push edx  +
mov edx [ebp+hObject] +
push eax  +
mov eax [ebp+DistanceToMoveHigh] +
push ecx  +
push 0  +
push edx  +
push eax  +
call sub_1019B30  +
test eax eax +
jz loc_1012FB3  +
xor esi esi +
cmp [ebp+var_10] 0 +
jz loc_1012F6F  +
mov esi 0FFFFFB4Ah +
jmp loc_1013937  +
mov eax [ebp+DistanceToMoveHigh] +
mov [ebp+var_420] 1 +
test eax eax +
jnz loc_1012EE4  +
push offset aSourceFile  +
push offset aUsageErrorMiss  +
call edi  +
add esp 8 +
mov esi 0FFFFFC15h +
jmp loc_1013937  +
mov ebx ds:_wfullpath +
push 104h  +
push eax  +
lea ecx [ebp+var_220] +
push ecx  +
call ebx  +
add esp 0Ch +
test eax eax +
jnz loc_1012F1B  +
mov edx [ebp+DistanceToMoveHigh] +
push edx  +
push offset aErrorSourceFil  +
call edi  +
add esp 8 +
mov esi 0FFFFFC01h +
jmp loc_1013937  +
mov eax [ebp+lpFileName] +
test eax eax +
jnz loc_1012F82  +
mov eax [ebp+DistanceToMoveHigh] +
push eax  +
mov ecx 20Ah +
lea edi [ebp+var_220] +
call sub_100F4E0  +
mov ecx edi +
mov edi ds:wprintf +
mov [ebp+lpFileName] ecx +
push 0Ah  +
push offset aInitiatingCopy  +
call edi  +
mov ecx [ebp+lpFileName] +
mov edx [ebp+DistanceToMoveHigh] +
add esp 8 +
push ecx  +
push edx  +
call sub_10190B0  +
test eax eax +
jz loc_1012FB3  +
xor esi esi +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call edi  +
add esp 0Ch +
jmp loc_10138A7  +
push 104h  +
push eax  +
lea edx [ebp+var_220] +
push edx  +
call ebx  +
add esp 0Ch +
test eax eax +
jnz loc_1012F4A  +
mov eax [ebp+lpFileName] +
push eax  +
push offset aErrorDestinati  +
call edi  +
add esp 8 +
mov esi 0FFFFFC01h +
jmp loc_1013937  +
mov [ebp+var_490] 1 +
jmp loc_1013937  +
push offset unk_101D3E8  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0Ah  +
push offset aInitiatingSecu  +
call edi  +
mov eax [ebp+DistanceToMoveHigh] +
push 0Ah  +
push eax  +
push offset aDatabaseSC  +
call edi  +
add esp 14h +
push offset aScrub_off  +
push ebx  +
push 22h  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
mov [ebp+var_420] 1 +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 23h  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 2Dh  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 36h  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 1  +
push 41h  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 10h  +
push 5  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
lea edi [ebp+DistanceToMoveHigh] +
lea esi [ebp+var_418] +
call sub_100FF10  +
mov esi eax +
test esi esi +
jl loc_1013931  +
lea ecx [ebp+var_418] +
push ecx  +
call off_101CD34  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov eax [ebp+var_418] +
push offset dword_10015C0  +
push offset aUser  +
lea edx [ebp+var_41C] +
push edx  +
push eax  +
call JetBeginSessionW  +
mov esi eax +
test esi esi +
jl loc_10135D3  +
mov ecx [ebp+DistanceToMoveHigh] +
mov edx [ebp+var_41C] +
push ebx  +
push offset loc_100EDB0  +
push ecx  +
push edx  +
call sub_100FBB0  +
mov esi eax +
test esi esi +
jl loc_10135D3  +
mov eax [ebp+var_41C] +
mov ebx [ebp+var_418] +
xor ecx ecx +
call sub_100FFB0  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov edi ds:wprintf +
push 0Ah  +
push offset aWarningC  +
call edi  +
push 0Ah  +
push 0Ah  +
push offset aYouMustDeleteT  +
call edi  +
push 0Ah  +
push offset aNoteC  +
call edi  +
push 0Ah  +
push offset aItIsRecommende  +
call edi  +
push 0Ah  +
push offset aOfThisDatabase  +
call edi  +
push 0Ah  +
push offset aRepairTheDatab  +
call edi  +
push 0Ah  +
push 0Ah  +
push offset aItWasInAtTheTi  +
call edi  +
add esp 40h +
jmp loc_10138A7  +
push offset unk_101D0E8  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0Ah  +
push offset aInitiatingInte  +
call edi  +
mov eax [ebp+DistanceToMoveHigh] +
push 0Ah  +
push eax  +
push offset aDatabaseSC  +
call edi  +
mov ecx [ebp+lpFileName] +
push 0Ah  +
push ecx  +
push offset aTemp_DatabaseS  +
call edi  +
mov eax [ebp+var_468] +
add esp 20h +
test eax eax +
jz loc_10131F5  +
push 0Ah  +
push eax  +
push offset aTableSC  +
call edi  +
add esp 0Ch +
push offset aOff  +
push 0  +
push 22h  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
mov [ebp+var_420] 1 +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov eax [ebp+lpFileName] +
push eax  +
push 0  +
push 1  +
push 0  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 0  +
push 23h  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 0  +
push 2Eh  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 0  +
push 2Dh  +
push 0  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 0  +
push 36h  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 2710h  +
push 6  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 2710h  +
push 7  +
push 0  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 1  +
push 41h  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 80h  +
push 5  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 2710h  +
push 0Ah  +
push 0  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
lea edi [ebp+DistanceToMoveHigh] +
lea esi [ebp+var_418] +
call sub_100FF10  +
mov esi eax +
test esi esi +
jl loc_1013931  +
lea edx [ebp+var_418] +
push edx  +
call off_101CD34  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov ecx [ebp+var_418] +
push offset dword_10015C0  +
push offset aUser  +
lea eax [ebp+var_41C] +
push eax  +
push ecx  +
call JetBeginSessionW  +
mov esi eax +
test esi esi +
jl loc_10135D3  +
mov ecx [ebp+var_460] +
mov eax 100h +
test ecx 200h +
jz loc_10133CE  +
mov eax 108h +
test ecx 400h +
jz loc_10133DB  +
or eax 800h +
test cl 1 +
jz loc_10133E5  +
or eax 8000h +
mov edx [ebp+var_46C] +
mov ecx [ebp+var_478] +
push eax  +
mov eax [ebp+var_468] +
push offset loc_100EDB0  +
push edx  +
mov edx [ebp+DistanceToMoveHigh] +
push eax  +
mov eax [ebp+var_41C] +
push ecx  +
push edx  +
push eax  +
call sub_100FB40  +
mov esi eax +
test esi esi +
jl loc_10135D3  +
mov eax [ebp+var_41C] +
mov ebx [ebp+var_418] +
xor ecx ecx +
call sub_100FFB0  +
mov edi ds:wprintf +
mov esi eax +
test esi esi +
jl loc_1013937  +
jmp loc_10138A7  +
push offset unk_101D2E8  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push offset aOff  +
push ebx  +
push 22h  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 23h  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 100h  +
push 12h  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push ebx  +
push 2Eh  +
push ebx  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 2710h  +
push 6  +
push ebx  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push ebx  +
push 2710h  +
push 7  +
push ebx  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
lea edi [ebp+DistanceToMoveHigh] +
lea esi [ebp+var_418] +
mov [ebp+var_420] 1 +
call sub_100FF10  +
mov esi eax +
test esi esi +
jl loc_1013931  +
lea ecx [ebp+var_418] +
push ecx  +
call off_101CD34  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov eax [ebp+var_418] +
push offset dword_10015C0  +
push offset aUser  +
lea edx [ebp+var_41C] +
push edx  +
push eax  +
call JetBeginSessionW  +
mov esi eax +
test esi esi +
jl loc_10135D3  +
mov ecx [ebp+lpFileName] +
mov edx [ebp+var_41C] +
push ecx  +
push edx  +
call off_101CD50  +
mov eax [ebp+lpFileName] +
push eax  +
call ds:DeleteFileW  +
mov eax [ebp+var_460] +
mov edx [ebp+DistanceToMoveHigh] +
mov ecx edx +
test al 20h +
jnz loc_10135AB  +
mov ecx [ebp+lpFileName] +
and eax 8 +
add eax eax +
add eax eax +
push eax  +
lea eax [ebp+var_50C] +
push eax  +
push offset loc_100EDB0  +
push ecx  +
mov ecx [ebp+var_41C] +
push edx  +
push ecx  +
call JetCompactW  +
mov esi eax +
test esi esi +
jge loc_10135F1  +
mov edi ds:wprintf +
mov eax [ebp+var_41C] +
mov ebx [ebp+var_418] +
mov ecx esi +
call sub_100FFB0  +
jmp loc_1013937  +
mov eax [ebp+var_41C] +
mov ebx [ebp+var_418] +
xor ecx ecx +
call sub_100FFB0  +
mov esi eax +
test esi esi +
jl loc_1013931  +
lea ebx [ebp+DistanceToMoveHigh] +
call sub_10119D0  +
mov esi eax +
test esi esi +
jl loc_1013931  +
mov edi ds:wprintf +
jmp loc_10138A7  +
cmp eax 5 +
jnz loc_1013880  +
push 0  +
push 0  +
push 2Dh  +
push 0  +
lea edx [ebp+var_418] +
push edx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 0  +
push 36h  +
push 0  +
lea eax [ebp+var_418] +
push eax  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0  +
push 1  +
push 41h  +
push 0  +
lea ecx [ebp+var_418] +
push ecx  +
call JetSetSystemParameterW  +
mov esi eax +
test esi esi +
jl loc_1013937  +
cmp [ebp+DistanceToMoveHigh] 0 +
jnz loc_10136A4  +
push offset aDatabaseFilena  +
jmp loc_101230C  +
push 0Ah  +
push offset aInitiatingFile  +
call edi  +
mov eax [ebp+var_4F4] +
dec eax  +
add esp 8 +
cmp eax 12h +
ja loc_1013880  +
movzx edx ds:byte_1013B28[eax] +
jmp ds:off_1013B00[edx*4]  +
mov ecx [ebp+DistanceToMoveHigh] +
lea eax [ebp+var_14] +
push ecx  +
mov esi eax +
mov [ebp+var_470] eax +
call sub_1011710  +
jmp loc_1013880  +
mov edx [ebp+DistanceToMoveHigh] +
push 0Ah  +
push edx  +
push offset aLogFileSC_0  +
call edi  +
mov eax [ebp+var_4CC] +
mov ecx [ebp+var_4D0] +
mov edx [ebp+var_4FC] +
push 0Ah  +
push eax  +
push ecx  +
push edx  +
push offset aNodeDDDC  +
call edi  +
mov eax [ebp+var_4C0] +
mov ecx [ebp+var_4C4] +
mov edx [ebp+var_4C8] +
push 0Ah  +
push eax  +
push ecx  +
push edx  +
push offset aLgpos06x04x04x  +
call edi  +
add esp 34h +
jmp loc_1013880  +
mov eax [ebp+DistanceToMoveHigh] +
push 0Ah  +
push eax  +
push offset aCheckpointFi_1  +
jmp loc_101387B  +
push offset unk_101D168  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov ecx [ebp+DistanceToMoveHigh] +
push 0Ah  +
push ecx  +
push offset aDatabaseSWillB  +
jmp loc_101387B  +
or [ebp+var_460] 4000000h +
push offset unk_101D168  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov edx [ebp+DistanceToMoveHigh] +
push 0Ah  +
push edx  +
push offset aDatabaseSC_1  +
call edi  +
add esp 0Ch +
cmp [ebp+var_4D8] ebx +
jnz loc_1013880  +
mov eax [ebp+var_4D0] +
push 0Ah  +
push eax  +
push offset aPageDC  +
jmp loc_101387B  +
push offset unk_101D168  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov ecx [ebp+DistanceToMoveHigh] +
push 0Ah  +
push ecx  +
push offset aDatabaseSC_1  +
call edi  +
mov edx [ebp+var_4CC] +
mov eax [ebp+var_4D0] +
push 0Ah  +
push edx  +
push eax  +
push offset aNodeDDC  +
call edi  +
add esp 1Ch +
jmp loc_1013880  +
or [ebp+var_460] 4000000h +
push offset unk_101D168  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov ecx [ebp+DistanceToMoveHigh] +
push 0Ah  +
push ecx  +
jmp loc_1013876  +
push offset unk_101D168  +
xor ebx ebx +
lea ecx [ebp+DistanceToMoveHigh] +
call sub_100F130  +
mov esi eax +
test esi esi +
jl loc_1013937  +
mov edx [ebp+DistanceToMoveHigh] +
push 0Ah  +
push edx  +
push offset aDatabaseSC_2  +
call edi  +
add esp 0Ch +
lea eax [ebp+DistanceToMoveHigh] +
lea ebx [ebp+var_504] +
call sub_1010890  +
mov esi eax +
test esi esi +
jl loc_1013937  +
push 0Ah  +
push offset aC  +
call edi  +
add esp 8 +
mov eax [ebp+var_48C] +
lea ecx [ebp+var_10] +
push ecx  +
lea edx [ebp+hObject] +
push edx  +
push eax  +
call sub_100ED80  +
mov ebx [ebp+var_428] +
test ebx ebx +
jz loc_1013A17  +
push 400h  +
lea edx [ebp+var_414] +
push edx  +
lea eax [ebp+var_428] +
push eax  +
xor ecx ecx +
push 46h  +
mov word ptr [ebp+var_414] cx +
mov ecx [ebp+var_418] +
push 0FFFFFFFFh  +
push ecx  +
mov [ebp+var_428] ebx +
call JetGetSystemParameterW  +
cmp [ebp+var_420] 0 +
jz loc_1013912  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call edi  +
add esp 0Ch +
mov edx [ebp+var_10] +
mov eax [ebp+hObject] +
push edx  +
push eax  +
lea ecx [ebp+var_414] +
push ecx  +
push ebx  +
push offset aOperationCompl  +
call edi  +
add esp 14h +
jmp loc_1013A29  +
mov edi ds:wprintf +
call ds:GetTickCount  +
sub eax [ebp+var_48C] +
xor edx edx +
mov ecx 3E8h +
div  ecx +
cmp [ebp+var_420] 0 +
mov ebx edx +
mov [ebp+var_428] eax +
jz loc_101396B  +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call edi  +
add esp 0Ch +
cmp [ebp+var_490] 0 +
jz loc_101398E  +
mov edx [ebp+var_428] +
push ebx  +
push edx  +
push offset aOperationTer_0  +
call edi  +
add esp 0Ch +
or esi 0FFFFFFFFh +
jmp loc_1013A29  +
push 400h  +
lea ecx [ebp+var_414] +
push ecx  +
lea edx [ebp+var_428] +
push edx  +
xor eax eax +
push 46h  +
mov word ptr [ebp+var_414] ax +
mov eax [ebp+var_418] +
push 0FFFFFFFFh  +
push eax  +
mov [ebp+var_428] esi +
call JetGetSystemParameterW  +
cmp [ebp+var_464] 2 +
jnz loc_10139FA  +
cmp esi 0FFFFFDBAh +
jz loc_10139EC  +
cmp esi 0FFFFFDB6h +
jz loc_10139EC  +
cmp esi 0FFFFFDF0h +
jnz loc_10139FA  +
push 0Ah  +
push 0Ah  +
push offset aWcRecoveryHasI  +
jmp loc_10139F5  +
push 0Ah  +
push 0Ah  +
push offset aWcRecoveryHa_0  +
call edi  +
add esp 0Ch +
mov ecx [ebp+var_48C] +
mov edx [ebp+var_420] +
push ecx  +
push edx  +
lea eax [ebp+var_414] +
push eax  +
push esi  +
call sub_1010000  +
jmp loc_1013A29  +
mov edx [ebp+var_10] +
mov eax [ebp+hObject] +
push edx  +
push eax  +
push offset aOperationCom_0  +
call edi  +
add esp 0Ch +
push 0Ah  +
push 0Ah  +
push offset aCC  +
call edi  +
mov ecx [ebp+var_4] +
add esp 0Ch +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_100B2F4 +
jnz loc_1013B64  +
cmp dword ptr [esi+8] 0 +
jnz loc_1013B64  +
mov eax off_101CD78 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_100B2F4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp free  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_1013B7D  +
push offset dword_101B1D8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100B2F4 +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1013BF4  +
push esi  +
call free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
jmp loc_1013C17  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_1013C26  +
push dword ptr [ebp+8]  +
call malloc  +
pop ecx  +
test eax eax +
jz loc_1013C0A  +
leave   +
retn   +
***
test byte ptr dword_101D484 1 +
mov esi offset dword_101D478 +
jnz loc_1013C4D  +
or dword_101D484 1 +
mov ecx esi +
call sub_1013B40  +
push offset loc_101B1BD  +
call sub_1014B33  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_1013B7D  +
push offset dword_101B1D8  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1013C86  +
test eax eax +
jnz loc_1013C8B  +
mov ecx [esi] +
test ecx ecx +
jz loc_1013C83  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1013C77  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_101D4AC +
push offset dword_101D49C  +
push dword_101D4A8  +
mov dword_101D49C eax +
push offset dword_101D48C  +
push offset dword_101D490  +
push offset dword_101D488  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_101D498 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1013D13  +
cmp eax esi +
jnz loc_1013D06  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_1013D16  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1013CED  +
xor esi esi +
inc esi  +
mov eax dword_1037824 +
cmp eax esi +
jnz loc_1013D29  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1013D64  +
mov eax dword_1037824 +
test eax eax +
jnz loc_1013D5E  +
mov dword_1037824 esi +
push offset dword_1001250  +
push offset dword_1001244  +
call sub_1013C6A  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1013D64  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1013E2E  +
mov dword_101D4A4 esi +
mov eax dword_1037824 +
cmp eax esi +
jnz loc_1013D88  +
push offset dword_1001240  +
push offset dword_1001234  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1037824 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1013D95  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1037838 ebx +
jz loc_1013DB6  +
push offset dword_1037838  +
call sub_1014C59  +
pop ecx  +
test eax eax +
jz loc_1013DB6  +
push ebx  +
push 2  +
push ebx  +
call dword_1037838  +
push dword_101D48C  +
push dword_101D490  +
push dword_101D488  +
call sub_1011DF0  +
add esp 0Ch +
mov dword_101D4A0 eax +
cmp dword_101D494 ebx +
jnz loc_1013E14  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_101D4A0 eax +
xor ebx ebx +
cmp dword_101D494 ebx +
jnz loc_1013E14  +
push eax  +
call ds:_exit  +
cmp dword_101D4A4 ebx +
jnz loc_1013E22  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_101D4A0 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1013E4B  +
xor eax eax +
jmp loc_1013E98  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1013E47  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1013E85  +
cmp ecx 20Bh +
jnz loc_1013E47  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1013E47  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1013E93  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1013E47  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_101D494 eax +
call sub_1014DF2  +
push eax  +
call ds:__set_app_type  +
or dword_103782C 0FFFFFFFFh +
or dword_1037830 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_101D4B4 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_101D4B0 +
mov [eax] ecx +
call sub_1014D84  +
cmp dword_101CDC8 0 +
jnz loc_1013EF1  +
push offset sub_1014D84  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1014D6C  +
xor eax eax +
retn   +
***
call sub_1014E31  +
jmp sub_1013CCB  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_1013F39  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jge loc_1013F80  +
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_1013F9B  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_1013FBA  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov eax [esp+arg_0] +
div  ecx +
mov eax edx +
xor edx edx +
dec edi  +
jns loc_1014006  +
jmp loc_101400D  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_1013FC8  +
div  ecx +
mov ecx eax +
mul  [esp+arg_C] +
xchg eax ecx +
mul  [esp+arg_8] +
add edx ecx +
jb loc_1013FF3  +
cmp edx [esp+arg_4] +
ja loc_1013FF3  +
jb loc_1013FFB  +
cmp eax [esp+arg_0] +
jbe loc_1013FFB  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
dec edi  +
jns loc_101400D  +
neg edx  +
neg eax  +
sbb edx 0 +
pop edi  +
pop ebx  +
retn 10h  +
***
push ebx  +
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jge loc_1014041  +
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_101405D  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_1014079  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_10140BA  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_1014087  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_10140B5  +
cmp edx [esp+arg_4] +
ja loc_10140B5  +
jb loc_10140B6  +
cmp eax [esp+arg_0] +
jbe loc_10140B6  +
dec esi  +
xor edx edx +
mov eax esi +
dec edi  +
jnz loc_10140C4  +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
cmp ecx dword_101CDB0 +
jnz loc_10140FE  +
retn 0  +
jmp loc_1014EC7  +
***
cmp cl 40h +
jnb loc_101412B  +
cmp cl 20h +
jnb loc_1014120  +
shrd eax edx +
sar edx cl +
retn   +
mov eax edx +
sar edx 1Fh +
and cl 1Fh +
sar eax cl +
retn   +
sar edx 1Fh +
mov eax edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10140F3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1014136  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_1014245  +
cmp [ebp+arg_4] esi +
ja loc_1014265  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_10141E1  +
add esp 14h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
cmp [ebp+arg_8] esi +
jz loc_1014245  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_1015D2E  +
add esp 10h +
cmp eax esi +
jge loc_1014261  +
xor ecx ecx +
mov [edi] cx +
cmp eax 0FFFFFFFEh +
jnz loc_101425E  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_1014251  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1014230  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jnz loc_10142E9  +
call ds:__imp__errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10141E1  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1014310  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_10142EF  +
lea ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_4]  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+arg_0]  +
call sub_1017194  +
add esp 10h +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp [ebp+arg_C] edi +
jnz loc_101433A  +
cmp esi edi +
jnz loc_101433E  +
cmp [ebp+arg_4] edi +
jnz loc_1014345  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
cmp esi edi +
jz loc_1014345  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
ja loc_1014360  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_10141E1  +
add esp 14h +
mov eax esi +
jmp loc_1014335  +
cmp [ebp+arg_C] edi +
jnz loc_101436C  +
xor eax eax +
mov [esi] ax +
jmp loc_1014333  +
mov edx [ebp+arg_8] +
cmp edx edi +
jnz loc_101437A  +
xor eax eax +
mov [esi] ax +
jmp loc_1014345  +
cmp [ebp+arg_C] 0FFFFFFFFh +
mov eax esi +
jnz loc_1014396  +
movzx ecx word ptr [edx] +
mov [eax] cx +
inc eax  +
inc eax  +
inc edx  +
inc edx  +
cmp cx di +
jz loc_10143B7  +
dec ebx  +
jnz loc_1014382  +
jmp loc_10143B7  +
movzx ecx word ptr [edx] +
mov [eax] cx +
inc eax  +
inc eax  +
inc edx  +
inc edx  +
cmp cx di +
jz loc_10143AD  +
dec ebx  +
jz loc_10143AD  +
dec [ebp+arg_C]  +
jnz loc_1014396  +
cmp [ebp+arg_C] edi +
jnz loc_10143B7  +
xor ecx ecx +
mov [eax] cx +
cmp ebx edi +
jnz loc_1014333  +
xor eax eax +
cmp [ebp+arg_C] 0FFFFFFFFh +
jnz loc_10143D7  +
mov ecx [ebp+arg_4] +
push 50h  +
mov [esi+ecx*2-2] ax +
pop eax  +
jmp loc_1014335  +
mov [esi] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_101434F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_1014406  +
cmp [ebp+arg_4] edi +
ja loc_1014426  +
call _errno  +
push 16h  +
pop ecx  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov esi ecx +
mov [eax] ecx +
call sub_10141E1  +
add esp 14h +
mov eax esi +
jmp loc_101450F  +
mov ecx [ebp+arg_8] +
xor ebx ebx +
push 2  +
pop esi  +
cmp ecx edi +
jz loc_1014452  +
movzx ecx word ptr [ecx] +
cmp cx di +
jz loc_1014452  +
mov ebx esi +
cmp [ebp+arg_4] esi +
jbe loc_10144F4  +
mov [eax] cx +
push 3Ah  +
add eax esi +
pop ecx  +
mov [eax] cx +
add eax esi +
mov ecx [ebp+arg_C] +
cmp ecx edi +
jz loc_1014496  +
cmp [ecx] di +
jz loc_1014496  +
inc ebx  +
cmp ebx [ebp+arg_4] +
jnb loc_10144F4  +
mov dx [ecx] +
mov [eax] dx +
add ecx esi +
add eax esi +
cmp [ecx] di +
jnz loc_101445E  +
sub ecx esi +
movzx ecx word ptr [ecx] +
cmp cx 2Fh +
jz loc_1014496  +
cmp cx 5Ch +
jz loc_1014496  +
inc ebx  +
cmp ebx [ebp+arg_4] +
jnb loc_10144F4  +
push 5Ch  +
pop ecx  +
mov [eax] cx +
add eax esi +
mov ecx [ebp+arg_10] +
cmp ecx edi +
jz loc_10144B4  +
jmp loc_10144AF  +
inc ebx  +
cmp ebx [ebp+arg_4] +
jnb loc_10144F4  +
mov dx [ecx] +
mov [eax] dx +
add eax esi +
add ecx esi +
cmp [ecx] di +
jnz loc_101449F  +
mov ecx [ebp+arg_14] +
cmp ecx edi +
jz loc_10144EE  +
movzx edx word ptr [ecx] +
cmp dx di +
jz loc_10144EE  +
cmp dx 2Eh +
jz loc_10144E9  +
inc ebx  +
cmp ebx [ebp+arg_4] +
jnb loc_10144F4  +
push 2Eh  +
pop edx  +
mov [eax] dx +
add eax esi +
jmp loc_10144E9  +
inc ebx  +
cmp ebx [ebp+arg_4] +
jnb loc_10144F4  +
mov dx [ecx] +
mov [eax] dx +
add eax esi +
add ecx esi +
cmp [ecx] di +
jnz loc_10144D9  +
inc ebx  +
cmp ebx [ebp+arg_4] +
jbe loc_1014508  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx] ax +
call _errno  +
push 22h  +
jmp loc_101440D  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_4] ebx +
cmp edi ebx +
jz loc_10145D5  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jnz loc_1014544  +
cmp [ebp+arg_8] ebx +
jnz loc_10145D5  +
jmp loc_101454D  +
cmp [ebp+arg_8] ebx +
jz loc_10145D5  +
cmp [ebp+arg_C] ebx +
jnz loc_1014559  +
cmp [ebp+arg_10] ebx +
jnz loc_10145D5  +
jmp loc_101455E  +
cmp [ebp+arg_10] ebx +
jz loc_10145D5  +
cmp [ebp+arg_14] ebx +
jnz loc_101456A  +
cmp [ebp+arg_18] ebx +
jnz loc_10145D5  +
jmp loc_101456F  +
cmp [ebp+arg_18] ebx +
jz loc_10145D5  +
cmp [ebp+arg_1C] ebx +
jnz loc_10145D0  +
cmp [ebp+arg_20] ebx +
jnz loc_10145D5  +
cmp word ptr [edi] 5Ch +
jnz loc_1014597  +
cmp word ptr [edi+2] 5Ch +
jnz loc_1014597  +
cmp word ptr [edi+4] 3Fh +
jnz loc_1014597  +
cmp word ptr [edi+6] 5Ch +
jnz loc_1014597  +
add edi 8 +
xor eax eax +
inc eax  +
mov esi edi +
cmp [esi] bx +
jz loc_10145A8  +
dec eax  +
inc esi  +
inc esi  +
cmp eax ebx +
ja loc_101459C  +
cmp word ptr [esi] 3Ah +
jnz loc_10145E1  +
cmp ecx ebx +
jz loc_10145CB  +
cmp [ebp+arg_8] 3 +
jb loc_10146C1  +
push 2  +
push edi  +
push [ebp+arg_8]  +
push ecx  +
call sub_1014318  +
add esp 10h +
lea edi [esi+2] +
jmp loc_10145EA  +
cmp [ebp+arg_20] ebx +
jnz loc_1014579  +
mov [ebp+var_4] 1 +
jmp loc_10146C1  +
cmp ecx ebx +
jz loc_10145EA  +
xor eax eax +
mov [ecx] ax +
movzx eax word ptr [edi] +
and [ebp+arg_0] ebx +
mov esi edi +
test ax ax +
jz loc_101464B  +
movzx eax ax +
cmp ax 2Fh +
jz loc_1014611  +
cmp ax 5Ch +
jz loc_1014611  +
cmp ax 2Eh +
jnz loc_1014614  +
mov [ebp+arg_0] esi +
jmp loc_1014614  +
lea ebx [esi+2] +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_10145FA  +
test ebx ebx +
jz loc_101464B  +
cmp [ebp+arg_C] 0 +
jz loc_1014647  +
mov eax ebx +
sub eax edi +
sar eax 1 +
cmp [ebp+arg_10] eax +
jbe loc_10146BF  +
push eax  +
push edi  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1014318  +
add esp 10h +
mov edi ebx +
jmp loc_1014657  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1014657  +
xor ecx ecx +
mov [eax] cx +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10146AC  +
cmp eax edi +
jb loc_10146AC  +
cmp [ebp+arg_14] 0 +
jz loc_1014681  +
sub eax edi +
sar eax 1 +
cmp [ebp+arg_18] eax +
jbe loc_10146BF  +
push eax  +
push edi  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
call sub_1014318  +
add esp 10h +
cmp [ebp+arg_1C] 0 +
jz loc_101474E  +
sub esi [ebp+arg_0] +
sar esi 1 +
cmp [ebp+arg_20] esi +
jbe loc_10146BF  +
push esi  +
push [ebp+arg_0]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
call sub_1014318  +
add esp 10h +
jmp loc_101474E  +
cmp [ebp+arg_14] 0 +
jz loc_1014742  +
sub esi edi +
sar esi 1 +
cmp [ebp+arg_18] esi +
ja loc_1014732  +
xor ebx ebx +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_10146D2  +
cmp [ebp+arg_8] ebx +
jbe loc_10146D2  +
xor ecx ecx +
mov [eax] cx +
mov eax [ebp+arg_C] +
cmp eax ebx +
jz loc_10146E3  +
cmp [ebp+arg_10] ebx +
jbe loc_10146E3  +
xor ecx ecx +
mov [eax] cx +
mov eax [ebp+arg_14] +
cmp eax ebx +
jz loc_10146F4  +
cmp [ebp+arg_18] ebx +
jbe loc_10146F4  +
xor ecx ecx +
mov [eax] cx +
mov eax [ebp+arg_1C] +
cmp eax ebx +
jz loc_1014705  +
cmp [ebp+arg_20] ebx +
jbe loc_1014705  +
xor ecx ecx +
mov [eax] cx +
call _errno  +
cmp edi ebx +
jnz loc_1014724  +
push 16h  +
pop esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [eax] esi +
call sub_10141E1  +
add esp 14h +
mov eax esi +
jmp loc_1014750  +
cmp [ebp+var_4] ebx +
jnz loc_101470E  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov eax ecx +
jmp loc_1014750  +
push esi  +
push edi  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
call sub_1014318  +
add esp 10h +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_101474E  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_10148F6  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1014A23  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_1014988  +
jmp loc_1014930  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_101495B  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_1014992  +
jg loc_101499B  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1014930  +
cmp [ebp+var_1] 0 +
jz loc_1014988  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_101497A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_1014968  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10149CF  +
cmp dword_1037834 0 +
jz loc_10149CF  +
push offset dword_1037834  +
call sub_1014C59  +
add esp 4 +
test eax eax +
jz loc_10149CF  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_1037834  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_10149F0  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1014A08  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_1014988  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_1014968  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1014A6E  +
push esi  +
call sub_1013B9F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1014AA9  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1014B98  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1014B98  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1014B92  +
cmp eax 19930521h +
jz loc_1014B92  +
cmp eax 19930522h +
jz loc_1014B92  +
cmp eax 1994000h +
jnz loc_1014B98  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1014B58+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1014BE6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1014BE2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1014C4D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1014C45  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1014C4F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1014C35  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1014BD0  +
pop ecx  +
test eax eax +
jz loc_1014CB6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1014C10  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1014CB6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1014CBF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10140F3  +
push offset dword_101CDB0  +
call sub_10148C0  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1014DE5  +
cmp ecx 0FFFFFFFFh +
jz loc_1014DE5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1014DDE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1014DDE  +
cmp edx 10000000h +
jnb loc_1014DDE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1014DDE  +
jmp loc_1014DD9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1014E27  +
push eax  +
call sub_1014D8C  +
test eax eax +
jz loc_1014E27  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1014E1C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1014E27  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101CDB0 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1014E63  +
test eax ebx +
jz loc_1014E63  +
not eax  +
mov dword_101CDB4 eax +
jmp loc_1014EBE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1014EAA  +
test dword_101CDB0 ebx +
jnz loc_1014EAF  +
mov esi 0BB40E64Fh +
mov dword_101CDB0 esi +
not esi  +
mov dword_101CDB4 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_101D5B8 eax +
mov dword_101D5B4 ecx +
mov dword_101D5B0 edx +
mov dword_101D5AC ebx +
mov dword_101D5A8 esi +
mov dword_101D5A4 edi +
mov word_101D5D0 ss +
mov word_101D5C4 cs +
mov word_101D5A0 ds +
mov word_101D59C es +
mov word_101D598 fs +
mov word_101D594 gs +
pushf   +
pop dword_101D5C8  +
mov eax [ebp+0] +
mov dword_101D5BC eax +
mov eax [ebp+4] +
mov dword_101D5C0 eax +
lea eax [ebp+8] +
mov dword_101D5CC eax +
mov eax [ebp-320h] +
mov dword_101D508 10001h +
mov eax dword_101D5C0 +
mov dword_101D4C4 eax +
mov dword_101D4B8 0C0000409h +
mov dword_101D4BC 1 +
mov eax dword_101CDB0 +
mov [ebp-328h] eax +
mov eax dword_101CDB4 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
or eax eax +
jnz loc_1014FE1  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  [esp+arg_8] +
mov ecx eax +
mov eax esi +
mul  [esp+arg_8] +
add edx ecx +
jmp loc_1015028  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_1014FEF  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_101501D  +
cmp edx [esp+arg_4] +
ja loc_101501D  +
jb loc_1015026  +
cmp eax [esp+arg_0] +
jbe loc_1015026  +
dec esi  +
sub eax [esp+arg_8] +
sbb edx [esp+arg_C] +
xor ebx ebx +
sub eax [esp+arg_0] +
sbb edx [esp+arg_4] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1015073  +
mov eax [ebp+arg_0] +
jb loc_101506A  +
cmp eax 0FFFFFFFFh +
ja loc_1015073  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn   +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mul  [ebp+arg_4] +
push [ebp+arg_8]  +
push edx  +
push eax  +
call sub_1015055  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_28] eax +
xor eax eax +
inc eax  +
push edi  +
mov edi [ebp+arg_4] +
test [ebp+arg_14] al +
jz loc_10150CC  +
sub [ebp+arg_C] 20h +
test [ebp+arg_14] 80h +
mov [ebp+var_24] 25h +
jz loc_10150DD  +
push 2  +
mov byte ptr [ebp-23h] 23h +
pop eax  +
push esi  +
mov [ebp+eax+var_24] 2Eh +
push 0Ah  +
lea eax [ebp+eax-23h] +
push eax  +
push [ebp+arg_10]  +
call ds:_itoa  +
lea eax [ebp+var_24] +
add esp 0Ch +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10150FC  +
mov cl byte ptr [ebp+arg_C] +
sub eax esi +
mov [ebp+eax+var_24] cl +
mov byte ptr [ebp+eax-23h] 0 +
mov eax [ebp+arg_8] +
lea esi [edi+eax-1] +
mov byte ptr [esi] 0 +
push ecx  +
push ecx  +
mov ecx [ebp+var_28] +
fld  qword ptr [ecx] +
lea ecx [ebp+var_24] +
fstp  [esp+38h+var_38] +
push ecx  +
push eax  +
push edi  +
call ds:_snprintf  +
add esp 14h +
cmp byte ptr [esi] 0 +
pop esi  +
jnz loc_1015142  +
test eax eax +
jle loc_1015142  +
xor eax eax +
jmp loc_1015148  +
push 16h  +
mov byte ptr [edi] 0 +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10140F3  +
leave   +
retn   +
***
mov ecx [eax+0Ch] +
test cl 40h +
jz loc_1015168  +
cmp dword ptr [eax+8] 0 +
jz loc_101519D  +
add dword ptr [eax+4] 0FFFFFFFEh +
mov edx 0FFFFh +
js loc_1015180  +
mov ecx [eax] +
mov [ecx] si +
add dword ptr [eax] 2 +
movzx ecx si +
jmp loc_1015188  +
or ecx 20h +
mov [eax+0Ch] ecx +
mov ecx edx +
cmp cx dx +
jnz loc_101519D  +
push eax  +
call ds:ferror  +
pop ecx  +
test eax eax +
jz loc_101519D  +
or dword ptr [edi] 0FFFFFFFFh +
retn   +
inc dword ptr [edi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi eax +
jle loc_10151CE  +
push esi  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_101515A  +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_10151CD  +
cmp [ebp+arg_4] 0 +
jg loc_10151B4  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebx+0Ch] 40h +
push edi  +
mov edi eax +
jz loc_10151F1  +
cmp dword ptr [ebx+8] 0 +
jnz loc_10151F1  +
mov eax [ebp+arg_4] +
add [edi] eax +
jmp loc_101522D  +
cmp [ebp+arg_4] 0 +
jle loc_101522D  +
push esi  +
mov eax [ebp+arg_0] +
movzx esi word ptr [eax] +
dec [ebp+arg_4]  +
mov eax ebx +
call sub_101515A  +
add [ebp+arg_0] 2 +
cmp dword ptr [edi] 0FFFFFFFFh +
jnz loc_1015226  +
call ds:__imp__errno  +
cmp dword ptr [eax] 2Ah +
jnz loc_101522C  +
push 3Fh  +
mov eax ebx +
pop esi  +
call sub_101515A  +
cmp [ebp+arg_4] 0 +
jg loc_10151F8  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 468h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_428] eax +
mov [ebp+var_418] ebx +
mov [ebp+var_44C] edi +
mov [ebp+var_408] edi +
mov [ebp+var_430] edi +
mov [ebp+var_40C] edi +
mov [ebp+var_424] edi +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_42C] edi +
cmp eax edi +
jnz loc_10152B9  +
call ds:__imp__errno  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_10141E1  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1015CF8  +
cmp esi edi +
jz loc_1015298  +
movzx ecx word ptr [esi] +
mov [ebp+var_420] edi +
mov [ebp+var_414] edi +
mov [ebp+var_440] edi +
mov [ebp+var_448] edi +
mov [ebp+var_41C] ecx +
cmp cx di +
jz loc_1015CF2  +
inc esi  +
inc esi  +
cmp [ebp+var_420] edi +
mov [ebp+var_450] esi +
jl loc_1015CDD  +
lea eax [ecx-20h] +
cmp ax 58h +
ja loc_1015313  +
movzx eax cx +
movzx eax byte ptr ds:ExceptionInfo.ExceptionRecord[eax] +
and eax 0Fh +
jmp loc_1015315  +
xor eax eax +
mov edx [ebp+var_440] +
imul eax eax +
movzx eax ds:byte_100B358[eax+edx] +
push 8  +
shr eax 4 +
pop edx  +
mov [ebp+var_440] eax +
cmp eax edx +
jz loc_1015298  +
cmp eax 7 +
ja loc_1015CBA  +
jmp ds:off_1015D09[eax*4]  +
or [ebp+var_40C] 0FFFFFFFFh +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_430] edi +
mov [ebp+var_424] edi +
mov [ebp+var_408] edi +
mov [ebp+var_42C] edi +
jmp loc_1015CC8  +
movzx eax cx +
sub eax 20h +
jz loc_10153CA  +
sub eax 3 +
jz loc_10153BB  +
sub eax edx +
jz loc_10153AF  +
dec eax  +
dec eax  +
jz loc_10153A3  +
sub eax 3 +
jnz loc_1015CBA  +
or [ebp+var_408] edx +
jmp loc_1015CC8  +
or [ebp+var_408] 4 +
jmp loc_1015CC8  +
or [ebp+var_408] 1 +
jmp loc_1015CC8  +
or [ebp+var_408] 80h +
jmp loc_1015CC8  +
or [ebp+var_408] 2 +
jmp loc_1015CC8  +
cmp cx 2Ah +
jnz loc_1015407  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_430] eax +
jge loc_1015CC8  +
or [ebp+var_408] 4 +
neg [ebp+var_430]  +
jmp loc_1015CC8  +
mov eax [ebp+var_430] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_430] eax +
jmp loc_1015CC8  +
mov [ebp+var_40C] edi +
jmp loc_1015CC8  +
cmp cx 2Ah +
jnz loc_1015458  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_40C] eax +
jge loc_1015CC8  +
or [ebp+var_40C] 0FFFFFFFFh +
jmp loc_1015CC8  +
mov eax [ebp+var_40C] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_40C] eax +
jmp loc_1015CC8  +
movzx eax cx +
cmp eax 49h +
jz loc_10154CC  +
cmp eax 68h +
jz loc_10154C0  +
cmp eax 6Ch +
jz loc_101549D  +
cmp eax 77h +
jnz loc_1015CC8  +
or [ebp+var_408] 800h +
jmp loc_1015CC8  +
cmp word ptr [esi] 6Ch +
jnz loc_10154B4  +
inc esi  +
inc esi  +
or [ebp+var_408] 1000h +
jmp loc_1015CC8  +
or [ebp+var_408] 10h +
jmp loc_1015CC8  +
or [ebp+var_408] 20h +
jmp loc_1015CC8  +
movzx eax word ptr [esi] +
cmp ax 36h +
jnz loc_10154EE  +
cmp word ptr [esi+2] 34h +
jnz loc_10154EE  +
add esi 4 +
or [ebp+var_408] 8000h +
jmp loc_1015CC8  +
cmp ax 33h +
jnz loc_101550D  +
cmp word ptr [esi+2] 32h +
jnz loc_101550D  +
add esi 4 +
and [ebp+var_408] 0FFFF7FFFh +
jmp loc_1015CC8  +
cmp ax 64h +
jz loc_1015CC8  +
cmp ax 69h +
jz loc_1015CC8  +
cmp ax 6Fh +
jz loc_1015CC8  +
cmp ax 75h +
jz loc_1015CC8  +
cmp ax 78h +
jz loc_1015CC8  +
cmp ax 58h +
jz loc_1015CC8  +
mov [ebp+var_440] edi +
mov eax [ebp+var_428] +
lea edi [ebp+var_420] +
mov esi ecx +
mov [ebp+var_42C] 1 +
call sub_101515A  +
jmp loc_1015CC0  +
movzx eax cx +
cmp eax 64h +
jg loc_10157C7  +
jz loc_101581A  +
cmp eax 53h +
jg loc_101569F  +
jz loc_101560B  +
sub eax 41h +
jz loc_10155A3  +
dec eax  +
dec eax  +
jz loc_10155EF  +
dec eax  +
dec eax  +
jz loc_10155A3  +
dec eax  +
dec eax  +
jnz loc_1015B1D  +
add ecx 20h +
mov dword ptr [ebp+var_438] 1 +
mov [ebp+var_41C] ecx +
or [ebp+var_408] 40h +
cmp [ebp+var_40C] edi +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov eax 200h +
mov [ebp+var_434] eax +
jge loc_1015849  +
mov [ebp+var_40C] 6 +
jmp loc_10158B0  +
test [ebp+var_408] 830h +
jnz loc_10156C1  +
or [ebp+var_408] 20h +
jmp loc_10156C1  +
test [ebp+var_408] 830h +
jnz loc_101561E  +
or [ebp+var_408] 20h +
mov edi [ebp+var_40C] +
cmp edi 0FFFFFFFFh +
jnz loc_101562E  +
mov edi 7FFFFFFFh +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_410] ebx +
jz loc_1015AE1  +
test ebx ebx +
jnz loc_101565C  +
mov eax off_101CDD0 +
mov [ebp+var_410] eax +
and [ebp+var_414] 0 +
mov esi [ebp+var_410] +
test edi edi +
jle loc_1015B1D  +
mov al [esi] +
test al al +
jz loc_1015B1D  +
movzx eax al +
push eax  +
call ds:isleadbyte  +
pop ecx  +
test eax eax +
jz loc_101568B  +
inc esi  +
inc esi  +
inc [ebp+var_414]  +
cmp [ebp+var_414] edi +
jl loc_1015671  +
jmp loc_1015B1D  +
sub eax 58h +
jz loc_1015939  +
dec eax  +
dec eax  +
jz loc_101573A  +
sub eax 7 +
jz loc_10155B6  +
dec eax  +
dec eax  +
jnz loc_1015B1D  +
movzx eax word ptr [ebx] +
add ebx 4 +
xor esi esi +
inc esi  +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_42C] esi +
mov [ebp+var_418] ebx +
mov dword ptr [ebp+var_458] eax +
jz loc_101571C  +
mov [ebp+var_444] al +
mov eax ds:__mb_cur_max +
mov byte ptr [ebp-443h] 0 +
push dword ptr [eax]  +
lea eax [ebp+var_444] +
push eax  +
lea eax [ebp+var_404] +
push eax  +
call ds:mbtowc  +
add esp 0Ch +
test eax eax +
jge loc_1015723  +
mov [ebp+var_454] esi +
jmp loc_1015723  +
mov [ebp+var_404] ax +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov [ebp+var_414] esi +
jmp loc_1015B1D  +
mov eax [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
cmp eax edi +
jz loc_10157AB  +
mov esi [eax+4] +
cmp esi edi +
jz loc_10157AB  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_1015298  +
test [ebp+var_408] 800h +
movzx eax cx +
jz loc_101579A  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_1015298  +
mov edx esi +
not edx  +
test dl cl +
jz loc_1015298  +
mov [ebp+var_410] esi +
shr eax 1 +
mov [ebp+var_42C] ecx +
jmp loc_1015B17  +
mov [ebp+var_42C] edi +
mov [ebp+var_410] esi +
jmp loc_1015B17  +
mov eax off_101CDD0 +
mov [ebp+var_410] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10157B9  +
sub eax edx +
jmp loc_1015B17  +
cmp eax 70h +
jg loc_1015945  +
jz loc_1015933  +
cmp eax 65h +
jl loc_1015B1D  +
cmp eax 67h +
jle loc_10155B6  +
cmp eax 69h +
jz loc_101581A  +
cmp eax 6Eh +
jz loc_1015298  +
cmp eax 6Fh +
jnz loc_1015B1D  +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] edx +
jz loc_101582B  +
or [ebp+var_408] 200h +
jmp loc_101582B  +
or [ebp+var_408] 40h +
mov [ebp+var_41C] 0Ah +
mov eax [ebp+var_408] +
test eax 8000h +
jz loc_10159A9  +
add ebx edx +
mov eax [ebx-8] +
mov edx [ebx-4] +
jmp loc_10159DE  +
jnz loc_101585D  +
cmp cx 67h +
jnz loc_10158B0  +
mov [ebp+var_40C] 1 +
jmp loc_10158B0  +
cmp [ebp+var_40C] eax +
jle loc_101586B  +
mov [ebp+var_40C] eax +
mov edi 0A3h +
cmp [ebp+var_40C] edi +
jle loc_10158B0  +
mov esi [ebp+var_40C] +
add esi 15Dh +
push esi  +
call ds:__imp_malloc  +
pop ecx  +
mov ecx [ebp+var_41C] +
mov [ebp+var_448] eax +
test eax eax +
jz loc_10158AA  +
mov [ebp+var_410] eax +
mov [ebp+var_434] esi +
jmp loc_10158B0  +
mov [ebp+var_40C] edi +
test byte ptr [ebp+var_408] 80h +
jz loc_10158C3  +
or dword ptr [ebp+var_438] 80h +
mov eax [ebx] +
push dword ptr [ebp+var_438]  +
mov esi [ebp+var_410] +
push [ebp+var_40C]  +
add ebx 8 +
mov [ebp+var_468] eax +
mov eax [ebx-4] +
mov [ebp+var_464] eax +
movsx eax cl +
push eax  +
push [ebp+var_434]  +
lea eax [ebp+var_468] +
push esi  +
push eax  +
mov [ebp+var_418] ebx +
call sub_10150A4  +
add esp 18h +
cmp byte ptr [esi] 2Dh +
jnz loc_101591E  +
or [ebp+var_408] 100h +
inc [ebp+var_410]  +
mov eax [ebp+var_410] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1015927  +
jmp loc_10157C0  +
mov [ebp+var_40C] edx +
mov [ebp+var_44C] 7 +
jmp loc_1015969  +
sub eax 73h +
jz loc_101561E  +
dec eax  +
dec eax  +
jz loc_1015821  +
sub eax 3 +
jnz loc_1015B1D  +
mov [ebp+var_44C] 27h +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] 10h +
jz loc_101582B  +
push 30h  +
pop eax  +
mov word ptr [ebp+var_43C] ax +
mov eax [ebp+var_44C] +
add eax 51h +
mov word ptr [ebp+var_43C+2] ax +
mov [ebp+var_424] 2 +
jmp loc_101582B  +
test eax 1000h +
jnz loc_101583C  +
add ebx 4 +
test al 20h +
jz loc_10159D2  +
mov [ebp+var_418] ebx +
test al 40h +
jz loc_10159CB  +
movsx eax word ptr [ebx-4] +
jmp loc_10159CF  +
movzx eax word ptr [ebx-4] +
cdq   +
jmp loc_10159E4  +
test al 40h +
mov eax [ebx-4] +
jz loc_10159DC  +
cdq   +
jmp loc_10159DE  +
xor edx edx +
mov [ebp+var_418] ebx +
test byte ptr [ebp+var_408] 40h +
jz loc_1015A08  +
cmp edx edi +
jg loc_1015A08  +
jl loc_10159F7  +
cmp eax edi +
jnb loc_1015A08  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_408] 100h +
test [ebp+var_408] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_1015A1A  +
xor ebx ebx +
cmp [ebp+var_40C] 0 +
jge loc_1015A2F  +
mov [ebp+var_40C] 1 +
jmp loc_1015A49  +
and [ebp+var_408] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_40C] eax +
jle loc_1015A49  +
mov [ebp+var_40C] eax +
mov eax edi +
or eax ebx +
jnz loc_1015A55  +
and [ebp+var_424] eax +
lea esi [ebp+var_205] +
mov eax [ebp+var_40C] +
dec [ebp+var_40C]  +
test eax eax +
jg loc_1015A71  +
mov eax edi +
or eax ebx +
jz loc_1015A9E  +
mov eax [ebp+var_41C] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call __aulldvrm  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_45C] ebx +
mov edi eax +
mov ebx edx +
jle loc_1015A99  +
add ecx [ebp+var_44C] +
mov [esi] cl +
dec esi  +
jmp loc_1015A5B  +
lea eax [ebp+var_205] +
sub eax esi +
inc esi  +
test [ebp+var_408] 200h +
mov [ebp+var_414] eax +
mov [ebp+var_410] esi +
jz loc_1015B1D  +
test eax eax +
jz loc_1015ACA  +
mov eax esi +
cmp byte ptr [eax] 30h +
jz loc_1015B1D  +
dec [ebp+var_410]  +
mov eax [ebp+var_410] +
inc [ebp+var_414]  +
mov byte ptr [eax] 30h +
jmp loc_1015B1D  +
test ebx ebx +
jnz loc_1015AF0  +
mov eax off_101CDD4 +
mov [ebp+var_410] eax +
mov eax [ebp+var_410] +
mov [ebp+var_42C] 1 +
jmp loc_1015B0B  +
dec edi  +
cmp word ptr [eax] 0 +
jz loc_1015B0F  +
inc eax  +
inc eax  +
test edi edi +
jnz loc_1015B02  +
sub eax [ebp+var_410] +
sar eax 1 +
mov [ebp+var_414] eax +
cmp [ebp+var_454] 0 +
jnz loc_1015C9D  +
mov eax [ebp+var_408] +
test al 40h +
jz loc_1015B5F  +
test eax 100h +
jz loc_1015B3F  +
push 2Dh  +
jmp loc_1015B4D  +
test al 1 +
jz loc_1015B47  +
push 2Bh  +
jmp loc_1015B4D  +
test al 2 +
jz loc_1015B5F  +
push 20h  +
pop ecx  +
mov word ptr [ebp+var_43C] cx +
mov [ebp+var_424] 1 +
mov esi [ebp+var_430] +
sub esi [ebp+var_414] +
sub esi [ebp+var_424] +
mov [ebp+var_45C] esi +
test al 0Ch +
jnz loc_1015B92  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_10151A5  +
add esp 0Ch +
push [ebp+var_424]  +
mov ebx [ebp+var_428] +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+var_420] +
call sub_10151D6  +
test byte ptr [ebp+var_408] 8 +
pop ecx  +
pop ecx  +
jz loc_1015BD6  +
test byte ptr [ebp+var_408] 4 +
jnz loc_1015BD6  +
push ebx  +
push esi  +
push 30h  +
lea eax [ebp+var_420] +
call sub_10151A5  +
add esp 0Ch +
cmp [ebp+var_42C] 0 +
jnz loc_1015C5B  +
mov eax [ebp+var_414] +
test eax eax +
jle loc_1015C5B  +
mov ecx [ebp+var_410] +
mov [ebp+var_41C] ecx +
mov [ebp+var_434] eax +
mov eax ds:__mb_cur_max +
push dword ptr [eax]  +
dec [ebp+var_434]  +
push [ebp+var_41C]  +
lea eax [ebp+var_458] +
push eax  +
call ds:mbtowc  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jle loc_1015C52  +
mov eax [ebp+var_428] +
mov esi dword ptr [ebp+var_458] +
lea edi [ebp+var_420] +
call sub_101515A  +
add [ebp+var_41C] ebx +
cmp [ebp+var_434] 0 +
mov esi [ebp+var_45C] +
jg loc_1015BFB  +
jmp loc_1015C74  +
or [ebp+var_420] 0FFFFFFFFh +
jmp loc_1015C74  +
push [ebp+var_414]  +
lea eax [ebp+var_420] +
push [ebp+var_410]  +
call sub_10151D6  +
pop ecx  +
pop ecx  +
cmp [ebp+var_420] 0 +
jl loc_1015C9D  +
test byte ptr [ebp+var_408] 4 +
jz loc_1015C9D  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_10151A5  +
add esp 0Ch +
cmp [ebp+var_448] 0 +
jz loc_1015CBA  +
push [ebp+var_448]  +
call ds:__imp_free  +
and [ebp+var_448] 0 +
pop ecx  +
mov ebx [ebp+var_418] +
mov esi [ebp+var_450] +
xor edi edi +
movzx eax word ptr [esi] +
mov [ebp+var_41C] eax +
cmp ax di +
jz loc_1015CDD  +
mov ecx eax +
jmp loc_10152E7  +
cmp [ebp+var_440] edi +
jz loc_1015CF2  +
cmp [ebp+var_440] 7 +
jnz loc_1015298  +
mov eax [ebp+var_420] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10140F3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0FFFFFFFFh +
jnz loc_1015D49  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_1015D7A  +
cmp edi 3FFFFFFFh +
jbe loc_1015D74  +
call ds:__imp__errno  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10141E1  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1015E05  +
lea eax [edi+edi] +
mov [ebp+var_1C] eax +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_14] 42h +
call sub_1015235  +
xor ecx ecx +
xor ebx ebx +
add esp 0Ch +
cmp eax ebx +
mov [ebp+arg_4] eax +
mov [esi+edi*2-2] cx +
jge loc_1015DBF  +
cmp [ebp+var_1C] ebx +
jl loc_1015E01  +
cmp esi ebx +
jz loc_1015E04  +
cmp edi ebx +
jbe loc_1015E04  +
mov [esi] cx +
jmp loc_1015E04  +
dec [ebp+var_1C]  +
js loc_1015DCE  +
mov eax [ebp+var_20] +
mov [eax] bl +
inc [ebp+var_20]  +
jmp loc_1015DDF  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_10187EE  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1015E01  +
dec [ebp+var_1C]  +
js loc_1015DEB  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_1015DFC  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_10187EE  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1015E01  +
mov eax [ebp+arg_4] +
jmp loc_1015E04  +
push 0FFFFFFFEh  +
pop eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [esi] +
cmp [ebp+arg_0] ebx +
jnz loc_1015EA0  +
mov eax [edi] +
cmp eax [ebp+arg_4] +
jnz loc_1015E8B  +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
pop ecx  +
mov eax ebx +
mul  ecx +
push edx  +
push eax  +
call sub_1015055  +
add esp 0Ch +
test eax eax +
jge loc_1015E43  +
xor eax eax +
jmp loc_1015EA3  +
push 4  +
push ebx  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [edi] eax +
test eax eax +
jz loc_1015E3F  +
push [ebp+arg_0]  +
mov eax [ebp+arg_8] +
push [ebp+arg_4]  +
mov dword ptr [eax] 1 +
push dword ptr [edi]  +
call memcpy  +
mov eax [esi] +
push esi  +
add eax eax +
push 2  +
push eax  +
mov [esi] eax +
call sub_1015085  +
add esp 18h +
test eax eax +
jge loc_1015EA0  +
push dword ptr [edi]  +
call ds:__imp_free  +
pop ecx  +
jmp loc_1015E3F  +
push 4  +
push ebx  +
push eax  +
call off_101CDE8  +
add esp 0Ch +
test eax eax +
jz loc_1015E3F  +
mov [edi] eax +
shl dword ptr [esi] 1 +
xor eax eax +
inc eax  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 0FF00h +
push esi  +
jnz loc_1015ED5  +
movzx esi word ptr [ebp+arg_0] +
mov eax esi +
and eax 0FFh +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1015ED5  +
mov eax esi +
jmp loc_1015EDF  +
movzx eax word ptr [ebp+arg_0] +
and eax 0FFFFFFDFh +
sub eax 7 +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 0FFFFh +
cmp ax [ebp+arg_0] +
jz loc_1015EFD  +
pop ebp  +
jmp loc_1018A81  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+arg_0]  +
inc dword ptr [edi]  +
call sub_101896A  +
movzx esi ax +
mov eax 0FFFFh +
pop ecx  +
cmp si ax +
jz loc_1015F31  +
push 8  +
push esi  +
call ds:iswctype  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1015F0A  +
mov ax si +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_28] edx +
mov edx [ebx] +
mov [ebp+var_10] edx +
mov edx [ebp+arg_0] +
push esi  +
and dl 8 +
movsx esi dl +
neg esi  +
sbb esi esi +
dec dword ptr [edi]  +
mov [ebp+var_1C] eax +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
mov [ebp+var_20] ecx +
call sub_1015EE7  +
mov eax [ebp+arg_0] +
mov [ebp+var_14] eax +
and [ebp+var_14] 10h +
pop ecx  +
pop ecx  +
jnz loc_1015F8A  +
dec [ebp+arg_10]  +
mov [ebp+var_18] eax +
and [ebp+var_18] 1 +
cmp [ebp+var_18] 0 +
jz loc_1015FA5  +
mov eax [ebp+arg_C] +
dec [ebp+arg_C]  +
test eax eax +
jz loc_10160C1  +
push [ebp+var_20]  +
inc dword ptr [edi]  +
call sub_101896A  +
pop ecx  +
mov ecx [ebp+var_1C] +
mov [ecx] ax +
mov ecx 0FFFFh +
mov [ebp+var_2C] ax +
cmp cx ax +
jz loc_10160AE  +
cmp [ebp+var_14] 0 +
jnz loc_1016024  +
test byte ptr [ebp+arg_0] 20h +
jz loc_1015FE6  +
cmp ax 9 +
jb loc_1015FE0  +
cmp ax 0Dh +
jbe loc_1015FE6  +
cmp ax 20h +
jnz loc_1016024  +
test byte ptr [ebp+arg_0] 40h +
jz loc_10160AE  +
mov cx ax +
shr cx 3 +
movzx edx cx +
cmp ax dx +
jb loc_10160AE  +
mov ecx eax +
and ecx 7 +
xor eax eax +
inc eax  +
shl eax cl +
movzx ecx dx +
mov edx [ebp+arg_4] +
movsx ecx byte ptr [ecx+edx] +
xor ecx esi +
test eax ecx +
jz loc_10160AE  +
mov eax dword ptr [ebp+var_2C] +
test byte ptr [ebp+arg_0] 4 +
jnz loc_10160A5  +
cmp [ebp+arg_10] 0 +
jz loc_10160E8  +
test byte ptr [ebp+arg_0] 2 +
jz loc_101604A  +
mov ecx [ebx] +
mov [ecx] ax +
add dword ptr [ebx] 2 +
dec [ebp+arg_10]  +
jmp loc_1015F91  +
mov ecx ds:__mb_cur_max +
mov edx [ebp+arg_10] +
push eax  +
cmp edx [ecx] +
jb loc_1016064  +
push dword ptr [ebx]  +
call ds:wctomb  +
pop ecx  +
pop ecx  +
jmp loc_1016093  +
lea eax [ebp+var_C] +
push eax  +
call ds:wctomb  +
pop ecx  +
pop ecx  +
mov [ebp+var_24] eax +
test eax eax +
jle loc_101607C  +
cmp eax [ebp+arg_10] +
ja loc_10160E8  +
cmp eax 5 +
ja loc_10160E8  +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx]  +
call memcpy  +
mov eax [ebp+var_24] +
add esp 0Ch +
test eax eax +
jle loc_1015F91  +
add [ebx] eax +
sub [ebp+arg_10] eax +
jmp loc_1015F91  +
add [ebp+var_10] 2 +
jmp loc_1015F91  +
dec dword ptr [edi]  +
mov eax [ebp+var_1C] +
movzx eax word ptr [eax] +
push [ebp+var_20]  +
push eax  +
call sub_1015EE7  +
pop ecx  +
pop ecx  +
mov eax [ebp+var_10] +
cmp eax [ebx] +
jz loc_1016102  +
test byte ptr [ebp+arg_0] 4 +
jnz loc_101611D  +
mov eax [ebp+var_28] +
inc dword ptr [eax]  +
cmp [ebp+var_14] 0 +
jnz loc_101611D  +
test byte ptr [ebp+arg_0] 2 +
mov eax [ebx] +
jz loc_101611A  +
xor ecx ecx +
mov [eax] cx +
jmp loc_101611D  +
call ds:__imp__errno  +
test byte ptr [ebp+arg_0] 2 +
mov dword ptr [eax] 0Ch +
jz loc_1016112  +
mov ecx [ebp+var_10] +
xor eax eax +
mov [ecx] ax +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10140F3  +
leave   +
retn   +
mov eax [ebp+var_10] +
mov byte ptr [eax] 0 +
jmp loc_1016102  +
mov byte ptr [eax] 0 +
xor eax eax +
jmp loc_1016105  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi 2000h +
push edi  +
xor ebx ebx +
call ds:__imp_malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1016156  +
call ds:__imp__errno  +
push 0Ch  +
pop ecx  +
mov [eax] ecx +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push edi  +
push 0  +
push esi  +
call memset  +
mov edx [ebp+arg_4] +
add dword ptr [edx] 2 +
mov eax [edx] +
add esp 0Ch +
push 5Eh  +
pop ecx  +
cmp cx [eax] +
jnz loc_1016178  +
inc eax  +
inc eax  +
or [ebp+arg_0] 8 +
push 5Dh  +
pop ecx  +
cmp cx [eax] +
jnz loc_1016213  +
push ecx  +
inc eax  +
pop ebx  +
inc eax  +
mov byte ptr [esi+0Bh] 20h +
jmp loc_1016213  +
movzx ecx cx +
inc eax  +
push 2Dh  +
pop edi  +
inc eax  +
mov [ebp+var_4] ecx +
cmp di cx +
jnz loc_10161F7  +
test bx bx +
jz loc_10161F7  +
movzx ecx word ptr [eax] +
push 5Dh  +
pop edi  +
cmp di cx +
jz loc_10161F7  +
movzx edi cx +
inc eax  +
inc eax  +
cmp bx di +
jnb loc_10161C0  +
movzx ecx di +
jmp loc_10161C6  +
movzx ecx bx +
movzx ebx di +
cmp bx cx +
ja loc_10161F3  +
sub ecx ebx +
inc ecx  +
movzx ecx cx +
movzx edx bx +
mov [ebp+var_4] ecx +
mov ecx edx +
shr ecx 3 +
lea edi [ecx+esi] +
mov ecx edx +
and ecx 7 +
mov bl 1 +
shl bl cl +
or [edi] bl +
inc edx  +
dec [ebp+var_4]  +
jnz loc_10161D7  +
mov edx [ebp+arg_4] +
xor ebx ebx +
jmp loc_1016213  +
movzx ecx word ptr [ebp+var_4] +
movzx ebx word ptr [ebp+var_4] +
mov edx ecx +
shr edx 3 +
lea edi [edx+esi] +
and ecx 7 +
mov dl 1 +
shl dl cl +
or [edi] dl +
mov edx [ebp+arg_4] +
movzx ecx word ptr [eax] +
push 5Dh  +
pop edi  +
cmp di cx +
jnz loc_1016191  +
cmp word ptr [eax] 0 +
jnz loc_101623A  +
or edi 0FFFFFFFFh +
push esi  +
call ds:__imp_free  +
pop ecx  +
mov eax edi +
jmp loc_1016151  +
push [ebp+arg_1C]  +
mov ecx [ebp+arg_18] +
push [ebp+arg_14]  +
mov ebx [ebp+arg_10] +
push [ebp+arg_8]  +
mov edi [ebp+arg_C] +
push esi  +
push [ebp+arg_0]  +
mov [edx] eax +
mov edx [ebp+arg_20] +
call sub_1015F3C  +
add esp 14h +
mov edi eax +
jmp loc_101622B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 31Ch +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_8] +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
mov [ebp+var_314] edx +
lea edx [ebp+var_2C0] +
mov [ebp+var_2D8] ecx +
mov [ebp+var_2E8] eax +
mov [ebp+var_2E0] edx +
mov [ebp+var_300] 15Eh +
mov [ebp+var_2FC] esi +
mov dword ptr [ebp+var_2C4] esi +
mov [ebp+var_31C] esi +
cmp eax esi +
jnz loc_10162E6  +
call ds:__imp__errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10141E1  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1017182  +
push edi  +
cmp ecx esi +
jnz loc_101630E  +
call ds:__imp__errno  +
or edi 0FFFFFFFFh +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10141E1  +
add esp 14h +
mov eax edi +
jmp loc_1017181  +
movzx eax word ptr [eax] +
mov [ebp+var_2D9] 0 +
mov [ebp+var_2CC] esi +
mov [ebp+var_2F8] esi +
cmp ax si +
jz loc_101717B  +
mov esi [ebp+var_2E8] +
xor edi edi +
push ebx  +
mov ebx ds:iswctype +
push 8  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1016387  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push [ebp+var_2D8]  +
lea edi [ebp+var_2CC] +
call sub_1015F04  +
movzx eax ax +
pop ecx  +
push eax  +
call sub_1015EE7  +
pop ecx  +
pop ecx  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
push 8  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1016370  +
xor edi edi +
jmp loc_10170D2  +
push 25h  +
pop eax  +
cmp ax [esi] +
jnz loc_1017092  +
mov [ebp+var_310] edi +
mov [ebp+var_2E4] edi +
mov [ebp+var_2F4] edi +
mov [ebp+var_2D0] edi +
mov [ebp+var_308] edi +
mov [ebp+var_2DA] 0 +
mov [ebp+var_2D3] 0 +
mov [ebp+var_2C5] 0 +
mov [ebp+var_2D2] 0 +
mov [ebp+var_2D1] 1 +
mov [ebp+var_30C] edi +
inc esi  +
inc esi  +
movzx ebx word ptr [esi] +
mov [ebp+var_2E8] esi +
test ebx 0FF00h +
jnz loc_101641A  +
movzx eax bl +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_101641A  +
mov eax [ebp+var_2D0] +
inc [ebp+var_2F4]  +
imul eax eax +
lea eax [eax+ebx-30h] +
mov [ebp+var_2D0] eax +
jmp loc_10164F4  +
cmp ebx 4Eh +
jg loc_10164BA  +
jz loc_10164F4  +
cmp ebx 2Ah +
jz loc_10164B2  +
cmp ebx 46h +
jz loc_10164F4  +
cmp ebx 49h +
jz loc_1016454  +
cmp ebx 4Ch +
jnz loc_10164C9  +
inc [ebp+var_2D1]  +
jmp loc_10164F4  +
movzx ecx word ptr [esi+2] +
cmp cx 36h +
jnz loc_1016483  +
lea eax [esi+4] +
cmp word ptr [eax] 34h +
jnz loc_1016483  +
inc [ebp+var_30C]  +
mov [ebp+var_2F0] edi +
mov [ebp+var_2EC] edi +
mov [ebp+var_2E8] eax +
mov esi eax +
jmp loc_10164F4  +
cmp cx 33h +
jnz loc_1016492  +
lea eax [esi+4] +
cmp word ptr [eax] 32h +
jz loc_1016479  +
cmp cx 64h +
jz loc_10164F4  +
cmp cx 69h +
jz loc_10164F4  +
cmp cx 6Fh +
jz loc_10164F4  +
cmp cx 78h +
jz loc_10164F4  +
cmp cx 58h +
jnz loc_10164C9  +
jmp loc_10164F4  +
inc [ebp+var_2D3]  +
jmp loc_10164F4  +
cmp ebx 68h +
jz loc_10164E8  +
cmp ebx 6Ch +
jz loc_10164D1  +
cmp ebx 77h +
jz loc_10164E0  +
inc [ebp+var_2C5]  +
jmp loc_10164F4  +
lea eax [esi+2] +
cmp word ptr [eax] 6Ch +
jz loc_1016467  +
inc [ebp+var_2D1]  +
inc [ebp+var_2D2]  +
jmp loc_10164F4  +
dec [ebp+var_2D1]  +
dec [ebp+var_2D2]  +
cmp [ebp+var_2C5] 0 +
jz loc_10163DA  +
cmp [ebp+var_2D3] 0 +
jnz loc_1016523  +
mov eax [ebp+var_314] +
mov ebx [eax] +
mov [ebp+var_318] eax +
add eax 4 +
mov [ebp+var_314] eax +
jmp loc_1016525  +
xor ebx ebx +
cmp [ebp+var_2D2] 0 +
mov [ebp+var_304] ebx +
mov [ebp+var_2C5] 0 +
jnz loc_1016558  +
movzx eax word ptr [esi] +
cmp ax 53h +
jz loc_1016551  +
mov [ebp+var_2D2] 1 +
cmp ax 43h +
jnz loc_1016558  +
mov [ebp+var_2D2] 0FFh +
mov eax [ebp+var_2E8] +
movzx esi word ptr [eax] +
or esi 20h +
cmp esi 6Eh +
jz loc_10165B3  +
cmp esi 63h +
jz loc_1016586  +
cmp esi 7Bh +
jz loc_1016586  +
push [ebp+var_2D8]  +
lea edi [ebp+var_2CC] +
call sub_1015F04  +
jmp loc_1016597  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
mov dword ptr [ebp+var_2C4] eax +
mov eax 0FFFFh +
pop ecx  +
cmp ax [ebp+var_2C4] +
jz loc_1017126  +
cmp [ebp+var_2F4] 0 +
jz loc_10165C9  +
cmp [ebp+var_2D0] 0 +
jz loc_10170E0  +
mov cl [ebp+var_2D3] +
test cl cl +
jnz loc_1016629  +
cmp esi 63h +
jz loc_10165E2  +
cmp esi 73h +
jz loc_10165E2  +
cmp esi 7Bh +
jnz loc_1016629  +
mov eax [ebp+var_318] +
mov ebx [eax] +
add eax 4 +
mov [ebp+var_318] eax +
add eax 4 +
xor edi edi +
mov [ebp+var_314] eax +
mov eax [eax-4] +
inc edi  +
mov [ebp+var_304] ebx +
mov [ebp+var_308] eax +
cmp eax edi +
jnb loc_101662C  +
cmp [ebp+var_2D2] 0 +
jle loc_10170EE  +
xor eax eax +
mov [ebx] ax +
jmp loc_10170F1  +
xor edi edi +
inc edi  +
cmp esi 6Fh +
jg loc_1016B09  +
jz loc_1016D24  +
cmp esi 63h +
jz loc_1016AEE  +
cmp esi 64h +
jz loc_1016D24  +
jle loc_1016B33  +
cmp esi 67h +
jle loc_1016698  +
cmp esi 69h +
jz loc_1016679  +
cmp esi 6Eh +
jnz loc_1016B33  +
mov eax [ebp+var_2CC] +
test cl cl +
jz loc_101704F  +
jmp loc_101707B  +
push 64h  +
pop esi  +
push 2Dh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1016B6F  +
mov [ebp+var_2DA] 1 +
jmp loc_1016B7B  +
push 2Dh  +
pop eax  +
xor ebx ebx +
cmp ax [ebp+var_2C4] +
jnz loc_10166B3  +
mov ecx [ebp+var_2E0] +
mov [ecx] ax +
mov ebx edi +
jmp loc_10166BF  +
push 2Bh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_10166E0  +
dec [ebp+var_2D0]  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
cmp [ebp+var_2F4] 0 +
jnz loc_10166F0  +
or [ebp+var_2D0] 0FFFFFFFFh +
test dword ptr [ebp+var_2C4] 0FF00h +
jnz loc_101678D  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_101678D  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_101678D  +
movsx ax byte ptr [ebp+var_2C4] +
mov ecx [ebp+var_2E0] +
inc [ebp+var_2E4]  +
mov [ecx+ebx*2] ax +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1015E0E  +
add esp 0Ch +
test eax eax +
jz loc_1017126  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
test eax 0FF00h +
jz loc_1016700  +
call ds:localeconv  +
mov eax [eax+30h] +
movzx eax word ptr [eax] +
movsx ecx byte ptr [ebp+var_2C4] +
mov [ebp+var_308] eax +
movzx eax ax +
cmp eax ecx +
jnz loc_10168B8  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_10168B8  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
mov ecx [ebp+var_2E0] +
movzx eax ax +
mov dword ptr [ebp+var_2C4] eax +
mov ax word ptr [ebp+var_308] +
mov [ecx+ebx*2] ax +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1015E0E  +
add esp 10h +
test eax eax +
jz loc_1017126  +
test dword ptr [ebp+var_2C4] 0FF00h +
jnz loc_10168B8  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_10168B8  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_10168B8  +
mov eax [ebp+var_2E0] +
mov cx [ebp+var_2C4] +
inc [ebp+var_2E4]  +
mov [eax+ebx*2] cx +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1015E0E  +
add esp 0Ch +
test eax eax +
jz loc_1017126  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
test eax 0FF00h +
jz loc_101682C  +
cmp [ebp+var_2E4] 0 +
jz loc_1016A5A  +
push 65h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jz loc_10168E1  +
push 45h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1016A5A  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_1016A5A  +
mov ecx [ebp+var_2E0] +
push 65h  +
pop eax  +
mov [ecx+ebx*2] ax +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1015E0E  +
add esp 0Ch +
test eax eax +
jz loc_1017126  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
pop ecx  +
movzx eax ax +
push 2Dh  +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
cmp cx ax +
jnz loc_101697F  +
push ecx  +
mov ecx [ebp+var_2E0] +
pop eax  +
mov [ecx+ebx*2] ax +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
call sub_1015E0E  +
add esp 0Ch +
test eax eax +
jz loc_1017126  +
jmp loc_101698B  +
push 2Bh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_10169BE  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jnz loc_10169A3  +
and [ebp+var_2D0] eax +
jmp loc_10169BE  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
test dword ptr [ebp+var_2C4] 0FF00h +
jnz loc_1016A5A  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1016A5A  +
mov eax [ebp+var_2D0] +
dec [ebp+var_2D0]  +
test eax eax +
jz loc_1016A5A  +
mov eax [ebp+var_2E0] +
mov cx [ebp+var_2C4] +
inc [ebp+var_2E4]  +
mov [eax+ebx*2] cx +
lea eax [ebp+var_2FC] +
push eax  +
lea eax [ebp+var_2C0] +
push eax  +
inc ebx  +
push ebx  +
lea edi [ebp+var_2E0] +
lea esi [ebp+var_300] +
call sub_1015E0E  +
add esp 0Ch +
test eax eax +
jz loc_1017126  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
test eax 0FF00h +
jz loc_10169CE  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push dword ptr [ebp+var_2C4]  +
call sub_1015EE7  +
cmp [ebp+var_2E4] 0 +
pop ecx  +
pop ecx  +
jz loc_1017126  +
cmp [ebp+var_2D3] 0 +
jnz loc_101707B  +
mov edi [ebp+var_300] +
mov esi [ebp+var_2E0] +
inc [ebp+var_2F8]  +
xor eax eax +
lea edi [edi+edi+2] +
push edi  +
mov [esi+ebx*2] ax +
call ds:__imp_malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_1017126  +
push edi  +
push esi  +
push ebx  +
call ds:wcstombs  +
push [ebp+var_308]  +
movsx eax [ebp+var_2D1] +
push ebx  +
push [ebp+var_304]  +
dec eax  +
push eax  +
call sub_10187A7  +
push ebx  +
call ds:__imp_free  +
add esp 20h +
jmp loc_101707B  +
cmp [ebp+var_2F4] 0 +
push 10h  +
pop eax  +
jnz loc_1016C80  +
inc [ebp+var_2D0]  +
jmp loc_1016C80  +
mov eax esi +
sub eax 70h +
jz loc_1016D1D  +
sub eax 3 +
jz loc_1016C74  +
dec eax  +
dec eax  +
jz loc_1016D24  +
sub eax 3 +
jz loc_101667C  +
sub eax 3 +
jz loc_1016B68  +
mov ax [ebp+var_2C4] +
mov edx [ebp+var_2E8] +
cmp [edx] ax +
jnz loc_10170FF  +
dec [ebp+var_2D9]  +
test cl cl +
jnz loc_101707B  +
mov eax [ebp+var_318] +
mov [ebp+var_314] eax +
jmp loc_101707B  +
push 40h  +
jmp loc_1016C76  +
push 2Bh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1016BB0  +
dec [ebp+var_2D0]  +
jnz loc_1016B95  +
cmp [ebp+var_2F4] 0 +
jz loc_1016B95  +
mov [ebp+var_2C5] 1 +
jmp loc_1016BB0  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
push 30h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1016D7A  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
pop ecx  +
movzx eax ax +
push 78h  +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
cmp cx ax +
jz loc_1016C33  +
push 58h  +
pop ecx  +
cmp cx ax +
jz loc_1016C33  +
mov [ebp+var_2E4] edi +
cmp esi 78h +
jz loc_1016C11  +
cmp [ebp+var_2F4] 0 +
jz loc_1016C0D  +
dec [ebp+var_2D0]  +
jnz loc_1016C0D  +
inc [ebp+var_2C5]  +
push 6Fh  +
jmp loc_1016C6E  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push eax  +
call sub_1015EE7  +
pop ecx  +
mov dword ptr [ebp+var_2C4] 30h +
jmp loc_1016D79  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
cmp [ebp+var_2F4] 0 +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
jz loc_1016C6C  +
sub [ebp+var_2D0] 2 +
cmp [ebp+var_2D0] edi +
jge loc_1016C6C  +
inc [ebp+var_2C5]  +
push 78h  +
pop esi  +
jmp loc_1016D7A  +
push 20h  +
cmp [ebp+var_2F4] 0 +
pop eax  +
jz loc_1016C82  +
or eax edi +
cmp [ebp+var_2D2] 0 +
jle loc_1016C8E  +
or eax 2 +
test cl cl +
jz loc_1016C95  +
or eax 4 +
cmp esi 7Bh +
jnz loc_1016CDA  +
lea ecx [ebp+var_2F8] +
push ecx  +
push [ebp+var_308]  +
lea ecx [ebp+var_304] +
push [ebp+var_2D8]  +
push [ebp+var_2D0]  +
push ecx  +
lea ecx [ebp+var_2CC] +
push ecx  +
lea ecx [ebp+var_2C4] +
push ecx  +
lea ecx [ebp+var_2E8] +
push ecx  +
push eax  +
call sub_1016126  +
add esp 24h +
jmp loc_1016D10  +
push [ebp+var_308]  +
lea ecx [ebp+var_2C4] +
push [ebp+var_2D0]  +
lea edx [ebp+var_2F8] +
push ecx  +
mov ecx [ebp+var_2D8] +
push 0  +
push eax  +
lea ebx [ebp+var_304] +
lea edi [ebp+var_2CC] +
call sub_1015F3C  +
add esp 14h +
test eax eax +
jnz loc_1017126  +
jmp loc_101707B  +
mov [ebp+var_2D1] 1 +
push 2Dh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1016D39  +
mov [ebp+var_2DA] 1 +
jmp loc_1016D45  +
push 2Bh  +
pop eax  +
cmp ax [ebp+var_2C4] +
jnz loc_1016D7A  +
dec [ebp+var_2D0]  +
jnz loc_1016D5F  +
cmp [ebp+var_2F4] 0 +
jz loc_1016D5F  +
mov [ebp+var_2C5] 1 +
jmp loc_1016D7A  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
mov dword ptr [ebp+var_2C4] eax +
pop ecx  +
cmp [ebp+var_30C] 0 +
jz loc_1016F12  +
cmp [ebp+var_2C5] 0 +
jnz loc_1016EE1  +
mov ebx 0FF00h +
cmp esi 78h +
jz loc_1016E23  +
cmp esi 70h +
jz loc_1016E23  +
test dword ptr [ebp+var_2C4] ebx +
jnz loc_1016EC8  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1016EC8  +
cmp esi 6Fh +
jnz loc_1016E00  +
push 38h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jbe loc_1016EC8  +
mov eax [ebp+var_2F0] +
mov ecx [ebp+var_2EC] +
shld ecx eax +
shl eax 3 +
mov [ebp+var_2F0] eax +
mov [ebp+var_2EC] ecx +
jmp loc_1016E7A  +
push 0  +
push 0Ah  +
push [ebp+var_2EC]  +
push [ebp+var_2F0]  +
call __allmul  +
mov [ebp+var_2F0] eax +
mov [ebp+var_2EC] edx +
jmp loc_1016E7A  +
test dword ptr [ebp+var_2C4] ebx +
jnz loc_1016EC8  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isxdigit  +
pop ecx  +
test eax eax +
jz loc_1016EC8  +
mov eax [ebp+var_2F0] +
mov ecx [ebp+var_2EC] +
push dword ptr [ebp+var_2C4]  +
shld ecx eax +
shl eax 4 +
mov [ebp+var_2F0] eax +
mov [ebp+var_2EC] ecx +
call sub_1015EAB  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
movzx eax [ebp+var_2C4] +
inc [ebp+var_2E4]  +
sub eax 30h +
cdq   +
add [ebp+var_2F0] eax +
adc [ebp+var_2EC] edx +
cmp [ebp+var_2F4] 0 +
jz loc_1016EA8  +
dec [ebp+var_2D0]  +
jz loc_1016EE1  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
jmp loc_1016D99  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push dword ptr [ebp+var_2C4]  +
call sub_1015EE7  +
pop ecx  +
pop ecx  +
cmp [ebp+var_2DA] 0 +
jz loc_101701B  +
mov eax [ebp+var_2F0] +
mov ecx [ebp+var_2EC] +
neg eax  +
adc ecx 0 +
neg ecx  +
mov [ebp+var_2F0] eax +
mov [ebp+var_2EC] ecx +
jmp loc_101701B  +
cmp [ebp+var_2C5] 0 +
mov ebx [ebp+var_310] +
jnz loc_101700A  +
mov edi 0FF00h +
cmp esi 78h +
jz loc_1016F76  +
cmp esi 70h +
jz loc_1016F76  +
test dword ptr [ebp+var_2C4] edi +
jnz loc_1016FF1  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1016FF1  +
cmp esi 6Fh +
jnz loc_1016F71  +
push 38h  +
pop eax  +
cmp ax [ebp+var_2C4] +
jbe loc_1016FF1  +
shl ebx 3 +
jmp loc_1016FA9  +
imul ebx ebx +
jmp loc_1016FA9  +
test dword ptr [ebp+var_2C4] edi +
jnz loc_1016FF1  +
movzx eax byte ptr [ebp+var_2C4] +
push eax  +
call ds:isxdigit  +
pop ecx  +
test eax eax +
jz loc_1016FF1  +
push dword ptr [ebp+var_2C4]  +
shl ebx 4 +
call sub_1015EAB  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
movzx eax [ebp+var_2C4] +
inc [ebp+var_2E4]  +
cmp [ebp+var_2F4] 0 +
lea ebx [ebx+eax-30h] +
mov [ebp+var_310] ebx +
jz loc_1016FD1  +
dec [ebp+var_2D0]  +
jz loc_101700A  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
movzx eax ax +
pop ecx  +
mov dword ptr [ebp+var_2C4] eax +
jmp loc_1016F2A  +
push [ebp+var_2D8]  +
dec [ebp+var_2CC]  +
push dword ptr [ebp+var_2C4]  +
call sub_1015EE7  +
pop ecx  +
pop ecx  +
cmp [ebp+var_2DA] 0 +
jz loc_101701B  +
neg ebx  +
mov [ebp+var_310] ebx +
cmp esi 46h +
jnz loc_1017027  +
and [ebp+var_2E4] 0 +
cmp [ebp+var_2E4] 0 +
jz loc_1017126  +
cmp [ebp+var_2D3] 0 +
jnz loc_101707B  +
inc [ebp+var_2F8]  +
mov ebx [ebp+var_304] +
mov eax [ebp+var_310] +
cmp [ebp+var_30C] 0 +
jz loc_101706B  +
mov eax [ebp+var_2F0] +
mov [ebx] eax +
mov eax [ebp+var_2EC] +
mov [ebx+4] eax +
jmp loc_101707B  +
cmp [ebp+var_2D1] 0 +
jz loc_1017078  +
mov [ebx] eax +
jmp loc_101707B  +
mov [ebx] ax +
add [ebp+var_2E8] 2 +
inc [ebp+var_2D9]  +
mov esi [ebp+var_2E8] +
xor edi edi +
jmp loc_10170B7  +
push [ebp+var_2D8]  +
inc [ebp+var_2CC]  +
call sub_101896A  +
pop ecx  +
mov cx [esi] +
movzx eax ax +
inc esi  +
inc esi  +
mov dword ptr [ebp+var_2C4] eax +
cmp cx ax +
jnz loc_1017118  +
mov eax 0FFFFh +
cmp ax [ebp+var_2C4] +
jnz loc_10170D2  +
cmp word ptr [esi] 25h +
jnz loc_1017126  +
cmp word ptr [esi+2] 6Eh +
jnz loc_1017126  +
movzx eax word ptr [esi] +
cmp ax di +
jnz loc_1016336  +
jmp loc_1017126  +
push [ebp+var_2D8]  +
push dword ptr [ebp+var_2C4]  +
jmp loc_101711F  +
mov byte ptr [ebx] 0 +
call ds:__imp__errno  +
mov dword ptr [eax] 0Ch +
jmp loc_1017126  +
push [ebp+var_2D8]  +
push dword ptr [ebp+var_2C4]  +
call sub_1015EE7  +
mov [ebp+var_31C] edi +
jmp loc_1017124  +
push [ebp+var_2D8]  +
push eax  +
call sub_1015EE7  +
pop ecx  +
pop ecx  +
cmp [ebp+var_2FC] 1 +
pop ebx  +
jnz loc_101713D  +
push [ebp+var_2E0]  +
call ds:__imp_free  +
pop ecx  +
mov eax 0FFFFh +
cmp ax [ebp+var_2C4] +
jnz loc_101715F  +
mov eax [ebp+var_2F8] +
test eax eax +
jnz loc_1017181  +
cmp [ebp+var_2D9] al +
jnz loc_1017181  +
jmp loc_1017181  +
cmp [ebp+var_31C] 1 +
jnz loc_101717B  +
call ds:__imp__errno  +
mov edi [ebp+var_2F8] +
xor esi esi +
jmp loc_10162F4  +
mov eax [ebp+var_2F8] +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10140F3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 20h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_10171C4  +
call ds:__imp__errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_10141E1  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_10171F9  +
cmp [ebp+arg_8] esi +
jz loc_10171A6  +
mov ecx [ebp+arg_4] +
cmp ecx 3FFFFFFFh +
ja loc_10171A6  +
push [ebp+arg_C]  +
mov [ebp+var_18] eax +
push [ebp+arg_8]  +
mov [ebp+var_20] eax +
lea eax [ecx+ecx] +
mov [ebp+var_1C] eax +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_14] 49h +
call sub_1016266  +
add esp 0Ch +
pop esi  +
leave   +
retn   +
***
mov ebx offset unk_101CDD8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_101728E  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_101728E  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_10141E1  +
add esp 14h +
xor eax eax +
jmp loc_101729D  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jnz loc_10172D4  +
call ds:__imp__errno  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10141E1  +
add esp 14h +
jmp loc_10173B2  +
mov eax [esi+0Ch] +
test al 83h +
jz loc_10173B2  +
test al 40h +
jnz loc_10173B2  +
test al 2 +
jz loc_10172F6  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_10173B2  +
or eax 1 +
mov [esi+0Ch] eax +
test eax 10Ch +
jz loc_10172B6  +
push dword ptr [esi+18h]  +
mov eax [esi+8] +
mov edi ds:_fileno +
push eax  +
push esi  +
mov [esi] eax +
call edi  +
pop ecx  +
push eax  +
call ds:_read  +
add esp 0Ch +
mov [esi+4] eax +
cmp eax ebx +
jz loc_10173A2  +
cmp eax 0FFFFFFFFh +
jz loc_10173A2  +
test byte ptr [esi+0Ch] 82h +
jnz loc_1017377  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1017362  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_1017362  +
push esi  +
call edi  +
mov ecx ds:__pioinfo +
sar eax 5 +
push esi  +
lea ebx [ecx+eax*4] +
call edi  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_1017367  +
mov eax ds:__badioinfo +
mov al [eax+4] +
and al 82h +
cmp al 82h +
jnz loc_1017377  +
or dword ptr [esi+0Ch] 2000h +
cmp dword ptr [esi+18h] 200h +
jnz loc_1017395  +
mov eax [esi+0Ch] +
test al 8 +
jz loc_1017395  +
test eax 400h +
jnz loc_1017395  +
mov dword ptr [esi+18h] 1000h +
mov ecx [esi] +
dec dword ptr [esi+4]  +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_10173B5  +
neg eax  +
sbb eax eax +
and eax 10h +
add eax 10h +
or [esi+0Ch] eax +
mov [esi+4] ebx +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+0Ah] +
push ebx  +
mov ebx ecx +
and ecx 8000h +
mov [ebp+var_14] ecx +
mov ecx [eax+6] +
mov [ebp+var_20] ecx +
mov ecx [eax+2] +
movzx eax word ptr [eax] +
and ebx 7FFFh +
sub ebx 3FFFh +
shl eax 10h +
push edi  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
cmp ebx 0FFFFC001h +
jnz loc_101742B  +
xor ebx ebx +
xor eax eax +
cmp [ebp+eax*4+var_20] ebx +
jnz loc_101741B  +
inc eax  +
cmp eax 3 +
jl loc_1017408  +
xor eax eax +
jmp loc_10178C0  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
push 2  +
stos   +
pop eax  +
jmp loc_10178C0  +
and [ebp+arg_0] 0 +
push esi  +
lea esi [ebp+var_20] +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov esi dword_101CDF8 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_10] ebx +
mov [ebp+var_C] eax +
jns loc_1017463  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
lea edi [ebp+eax*4+var_20] +
push 1Fh  +
xor eax eax +
pop ecx  +
sub ecx edx +
inc eax  +
shl eax cl +
mov [ebp+var_8] ecx +
test [edi] eax +
jz loc_1017509  +
mov eax [ebp+var_C] +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_1017491  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_101749B  +
inc eax  +
cmp eax 3 +
jl loc_101748C  +
jmp loc_1017509  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_10174B5  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+var_4] 0 +
sub ecx esi +
xor edx edx +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
add esi edx +
mov [ebp+arg_0] esi +
mov esi [ecx] +
cmp [ebp+arg_0] esi +
jb loc_10174F4  +
cmp [ebp+arg_0] edx +
jmp loc_10174F2  +
test ecx ecx +
jz loc_1017506  +
and [ebp+var_4] 0 +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
mov [ebp+arg_0] esi +
cmp esi edx +
jb loc_10174F4  +
cmp esi 1 +
jnb loc_10174FB  +
mov [ebp+var_4] 1 +
dec eax  +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov ecx [ebp+var_4] +
jns loc_10174D7  +
mov [ebp+arg_0] ecx +
mov ecx [ebp+var_8] +
or eax 0FFFFFFFFh +
shl eax cl +
and [edi] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_1017529  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
cmp [ebp+arg_0] 0 +
jz loc_1017530  +
inc ebx  +
mov eax dword_101CDF4 +
mov ecx eax +
sub ecx dword_101CDF8 +
cmp ebx ecx +
jge loc_101754E  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
jmp loc_101775B  +
cmp ebx eax +
jg loc_1017765  +
sub eax [ebp+var_10] +
lea esi [ebp+var_2C] +
mov ecx eax +
lea edi [ebp+var_20] +
movs   +
cdq   +
and edx 1Fh +
add eax edx +
movs   +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
movs   +
jns loc_101757C  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1017597  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_10175DD  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_10175E2  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_10175D1  +
mov esi dword_101CDF8 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_C] eax +
jns loc_1017611  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
push 1Fh  +
pop ecx  +
sub ecx edx +
xor edx edx +
inc edx  +
shl edx cl +
lea ebx [ebp+eax*4+var_20] +
mov [ebp+var_10] ecx +
test [ebx] edx +
jz loc_10176AC  +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_101763C  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_1017646  +
inc eax  +
cmp eax 3 +
jl loc_1017637  +
jmp loc_10176AC  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_1017660  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+arg_0] 0 +
xor edx edx +
sub ecx esi +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
lea edi [esi+edx] +
cmp edi esi +
jb loc_101767C  +
cmp edi edx +
jnb loc_1017683  +
mov [ebp+arg_0] 1 +
mov [ecx] edi +
mov ecx [ebp+arg_0] +
jmp loc_10176A9  +
test ecx ecx +
jz loc_10176AC  +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
xor edi edi +
cmp esi edx +
jb loc_10176A2  +
cmp esi 1 +
jnb loc_10176A5  +
xor edi edi +
inc edi  +
mov [ecx] esi +
mov ecx edi +
dec eax  +
jns loc_101768A  +
mov ecx [ebp+var_10] +
or eax 0FFFFFFFFh +
shl eax cl +
and [ebx] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_10176CC  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
mov ecx dword_101CDFC +
inc ecx  +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_10176ED  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1017708  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_101774E  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1017753  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1017742  +
push 2  +
xor ebx ebx +
pop eax  +
jmp loc_10178BF  +
cmp ebx dword_101CDF0 +
mov ecx dword_101CDFC +
jl loc_1017824  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
or [ebp+var_20] 80000000h +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_10177A0  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_10177BB  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1017801  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1017806  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_10177F5  +
mov eax dword_101CDF0 +
mov ecx dword_101CE04 +
lea ebx [ecx+eax] +
xor eax eax +
inc eax  +
jmp loc_10178BF  +
mov eax dword_101CE04 +
and [ebp+var_20] 7FFFFFFFh +
add ebx eax +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_101784C  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or esi 0FFFFFFFFh +
mov ecx edx +
shl esi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not esi  +
mov ecx [ebp+arg_0] +
mov edi [ebp+ecx*4+var_20] +
mov ecx edi +
and ecx esi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr edi cl +
mov ecx [ebp+arg_0] +
or edi [ebp+var_C] +
mov [ebp+ecx*4+var_20] edi +
mov edi [ebp+var_10] +
mov ecx [ebp+var_4] +
shl edi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] edi +
jl loc_1017867  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_10178B0  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_10178B5  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_10178A4  +
xor eax eax +
pop esi  +
push 1Fh  +
pop ecx  +
sub ecx dword_101CDFC +
shl ebx cl +
mov ecx [ebp+var_14] +
neg ecx  +
sbb ecx ecx +
and ecx 80000000h +
or ebx ecx +
mov ecx dword_101CE00 +
or ebx [ebp+var_20] +
cmp ecx 40h +
jnz loc_10178F5  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_1C] +
mov [ecx+4] ebx +
mov [ecx] edx +
jmp loc_10178FF  +
cmp ecx 20h +
jnz loc_10178FF  +
mov ecx [ebp+arg_4] +
mov [ecx] ebx +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+0Ah] +
push ebx  +
mov ebx ecx +
and ecx 8000h +
mov [ebp+var_14] ecx +
mov ecx [eax+6] +
mov [ebp+var_20] ecx +
mov ecx [eax+2] +
movzx eax word ptr [eax] +
and ebx 7FFFh +
sub ebx 3FFFh +
shl eax 10h +
push edi  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
cmp ebx 0FFFFC001h +
jnz loc_1017974  +
xor ebx ebx +
xor eax eax +
cmp [ebp+eax*4+var_20] ebx +
jnz loc_1017964  +
inc eax  +
cmp eax 3 +
jl loc_1017951  +
xor eax eax +
jmp loc_1017E09  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
push 2  +
stos   +
pop eax  +
jmp loc_1017E09  +
and [ebp+arg_0] 0 +
push esi  +
lea esi [ebp+var_20] +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov esi dword_101CE10 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_10] ebx +
mov [ebp+var_C] eax +
jns loc_10179AC  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
lea edi [ebp+eax*4+var_20] +
push 1Fh  +
xor eax eax +
pop ecx  +
sub ecx edx +
inc eax  +
shl eax cl +
mov [ebp+var_8] ecx +
test [edi] eax +
jz loc_1017A52  +
mov eax [ebp+var_C] +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_10179DA  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_10179E4  +
inc eax  +
cmp eax 3 +
jl loc_10179D5  +
jmp loc_1017A52  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_10179FE  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+var_4] 0 +
sub ecx esi +
xor edx edx +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
add esi edx +
mov [ebp+arg_0] esi +
mov esi [ecx] +
cmp [ebp+arg_0] esi +
jb loc_1017A3D  +
cmp [ebp+arg_0] edx +
jmp loc_1017A3B  +
test ecx ecx +
jz loc_1017A4F  +
and [ebp+var_4] 0 +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
mov [ebp+arg_0] esi +
cmp esi edx +
jb loc_1017A3D  +
cmp esi 1 +
jnb loc_1017A44  +
mov [ebp+var_4] 1 +
dec eax  +
mov edx [ebp+arg_0] +
mov [ecx] edx +
mov ecx [ebp+var_4] +
jns loc_1017A20  +
mov [ebp+arg_0] ecx +
mov ecx [ebp+var_8] +
or eax 0FFFFFFFFh +
shl eax cl +
and [edi] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_1017A72  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
cmp [ebp+arg_0] 0 +
jz loc_1017A79  +
inc ebx  +
mov eax dword_101CE0C +
mov ecx eax +
sub ecx dword_101CE10 +
cmp ebx ecx +
jge loc_1017A97  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
jmp loc_1017CA4  +
cmp ebx eax +
jg loc_1017CAE  +
sub eax [ebp+var_10] +
lea esi [ebp+var_2C] +
mov ecx eax +
lea edi [ebp+var_20] +
movs   +
cdq   +
and edx 1Fh +
add eax edx +
movs   +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
movs   +
jns loc_1017AC5  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1017AE0  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1017B26  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1017B2B  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1017B1A  +
mov esi dword_101CE10 +
dec esi  +
lea ecx [esi+1] +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
sar eax 5 +
mov edx ecx +
and edx 8000001Fh +
mov [ebp+var_C] eax +
jns loc_1017B5A  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
push 1Fh  +
pop ecx  +
sub ecx edx +
xor edx edx +
inc edx  +
shl edx cl +
lea ebx [ebp+eax*4+var_20] +
mov [ebp+var_10] ecx +
test [ebx] edx +
jz loc_1017BF5  +
or edx 0FFFFFFFFh +
shl edx cl +
not edx  +
test [ebp+eax*4+var_20] edx +
jmp loc_1017B85  +
cmp [ebp+eax*4+var_20] 0 +
jnz loc_1017B8F  +
inc eax  +
cmp eax 3 +
jl loc_1017B80  +
jmp loc_1017BF5  +
mov eax esi +
cdq   +
push 1Fh  +
pop ecx  +
and edx ecx +
add eax edx +
sar eax 5 +
and esi 8000001Fh +
jns loc_1017BA9  +
dec esi  +
or esi 0FFFFFFE0h +
inc esi  +
and [ebp+arg_0] 0 +
xor edx edx +
sub ecx esi +
inc edx  +
shl edx cl +
lea ecx [ebp+eax*4+var_20] +
mov esi [ecx] +
lea edi [esi+edx] +
cmp edi esi +
jb loc_1017BC5  +
cmp edi edx +
jnb loc_1017BCC  +
mov [ebp+arg_0] 1 +
mov [ecx] edi +
mov ecx [ebp+arg_0] +
jmp loc_1017BF2  +
test ecx ecx +
jz loc_1017BF5  +
lea ecx [ebp+eax*4+var_20] +
mov edx [ecx] +
lea esi [edx+1] +
xor edi edi +
cmp esi edx +
jb loc_1017BEB  +
cmp esi 1 +
jnb loc_1017BEE  +
xor edi edi +
inc edi  +
mov [ecx] esi +
mov ecx edi +
dec eax  +
jns loc_1017BD3  +
mov ecx [ebp+var_10] +
or eax 0FFFFFFFFh +
shl eax cl +
and [ebx] eax +
mov eax [ebp+var_C] +
inc eax  +
cmp eax 3 +
jge loc_1017C15  +
push 3  +
pop ecx  +
lea edi [ebp+eax*4+var_20] +
sub ecx eax +
xor eax eax +
stos   +
mov ecx dword_101CE14 +
inc ecx  +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1017C36  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1017C51  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1017C97  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1017C9C  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1017C8B  +
push 2  +
xor ebx ebx +
pop eax  +
jmp loc_1017E08  +
cmp ebx dword_101CE08 +
mov ecx dword_101CE14 +
jl loc_1017D6D  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
stos   +
or [ebp+var_20] 80000000h +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1017CE9  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or edi 0FFFFFFFFh +
mov ecx edx +
shl edi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not edi  +
mov ebx [ebp+arg_0] +
lea ebx [ebp+ebx*4+var_20] +
mov esi [ebx] +
mov ecx esi +
and ecx edi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr esi cl +
mov ecx [ebp+var_4] +
or esi [ebp+var_C] +
mov [ebx] esi +
mov esi [ebp+var_10] +
shl esi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] esi +
jl loc_1017D04  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1017D4A  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1017D4F  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1017D3E  +
mov eax dword_101CE08 +
mov ecx dword_101CE1C +
lea ebx [ecx+eax] +
xor eax eax +
inc eax  +
jmp loc_1017E08  +
mov eax dword_101CE1C +
and [ebp+var_20] 7FFFFFFFh +
add ebx eax +
mov eax ecx +
cdq   +
and edx 1Fh +
add eax edx +
mov edx ecx +
sar eax 5 +
and edx 8000001Fh +
jns loc_1017D95  +
dec edx  +
or edx 0FFFFFFE0h +
inc edx  +
and [ebp+var_C] 0 +
and [ebp+arg_0] 0 +
or esi 0FFFFFFFFh +
mov ecx edx +
shl esi cl +
mov [ebp+var_4] 20h +
sub [ebp+var_4] edx +
not esi  +
mov ecx [ebp+arg_0] +
mov edi [ebp+ecx*4+var_20] +
mov ecx edi +
and ecx esi +
mov [ebp+var_10] ecx +
mov ecx edx +
shr edi cl +
mov ecx [ebp+arg_0] +
or edi [ebp+var_C] +
mov [ebp+ecx*4+var_20] edi +
mov edi [ebp+var_10] +
mov ecx [ebp+var_4] +
shl edi cl +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
mov [ebp+var_C] edi +
jl loc_1017DB0  +
mov esi eax +
push 2  +
shl esi 2 +
lea ecx [ebp+var_18] +
pop edx  +
sub ecx esi +
cmp edx eax +
jl loc_1017DF9  +
mov esi [ecx] +
mov [ebp+edx*4+var_20] esi +
jmp loc_1017DFE  +
and [ebp+edx*4+var_20] 0 +
dec edx  +
sub ecx 4 +
test edx edx +
jge loc_1017DED  +
xor eax eax +
pop esi  +
push 1Fh  +
pop ecx  +
sub ecx dword_101CE14 +
shl ebx cl +
mov ecx [ebp+var_14] +
neg ecx  +
sbb ecx ecx +
and ecx 80000000h +
or ebx ecx +
mov ecx dword_101CE18 +
or ebx [ebp+var_20] +
cmp ecx 40h +
jnz loc_1017E3E  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_1C] +
mov [ecx+4] ebx +
mov [ecx] edx +
jmp loc_1017E48  +
cmp ecx 20h +
jnz loc_1017E48  +
mov ecx [ebp+arg_4] +
mov [ecx] ebx +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_18] 404Eh +
mov [eax] esi +
mov [eax+4] esi +
mov [eax+8] esi +
cmp [ebp+arg_4] esi +
jbe loc_1017FC9  +
mov edx [eax] +
mov ebx [eax+4] +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
mov ecx edx +
shr ecx 1Fh +
lea edi [edx+edx] +
lea edx [ebx+ebx] +
or edx ecx +
mov ecx [eax+8] +
mov esi ebx +
shr esi 1Fh +
add ecx ecx +
or ecx esi +
mov [ebp+var_14] edi +
mov esi edi +
and [ebp+var_14] 0 +
mov ebx edx +
shr ebx 1Fh +
add ecx ecx +
shr edi 1Fh +
or ecx ebx +
mov ebx [ebp+var_10] +
add esi esi +
add edx edx +
or edx edi +
lea edi [esi+ebx] +
mov [eax] esi +
mov [eax+4] edx +
mov [eax+8] ecx +
cmp edi esi +
jb loc_1017EDA  +
cmp edi ebx +
jnb loc_1017EE1  +
mov [ebp+var_14] 1 +
xor ebx ebx +
mov [eax] edi +
cmp [ebp+var_14] ebx +
jz loc_1017F04  +
lea esi [edx+1] +
cmp esi edx +
jb loc_1017EF6  +
cmp esi 1 +
jnb loc_1017EF9  +
xor ebx ebx +
inc ebx  +
mov [eax+4] esi +
test ebx ebx +
jz loc_1017F04  +
inc ecx  +
mov [eax+8] ecx +
mov ecx [eax+4] +
mov edx [ebp+var_C] +
lea ebx [ecx+edx] +
xor esi esi +
cmp ebx ecx +
jb loc_1017F17  +
cmp ebx edx +
jnb loc_1017F1A  +
xor esi esi +
inc esi  +
mov [eax+4] ebx +
test esi esi +
jz loc_1017F24  +
inc dword ptr [eax+8]  +
mov ecx [ebp+var_8] +
add [eax+8] ecx +
and [ebp+var_14] 0 +
lea ecx [edi+edi] +
mov edx edi +
shr edx 1Fh +
lea edi [ebx+ebx] +
or edi edx +
mov edx [eax+8] +
mov esi ebx +
shr esi 1Fh +
lea ebx [edx+edx] +
mov edx [ebp+arg_0] +
or ebx esi +
mov [eax] ecx +
mov [eax+4] edi +
mov [eax+8] ebx +
movsx edx byte ptr [edx] +
lea esi [ecx+edx] +
mov [ebp+var_10] edx +
cmp esi ecx +
jb loc_1017F64  +
cmp esi edx +
jnb loc_1017F6B  +
mov [ebp+var_14] 1 +
cmp [ebp+var_14] 0 +
mov [eax] esi +
jz loc_1017F8F  +
lea ecx [edi+1] +
xor edx edx +
cmp ecx edi +
jb loc_1017F81  +
cmp ecx 1 +
jnb loc_1017F84  +
xor edx edx +
inc edx  +
mov [eax+4] ecx +
test edx edx +
jz loc_1017F8F  +
inc ebx  +
mov [eax+8] ebx +
dec [ebp+arg_4]  +
inc [ebp+arg_0]  +
cmp [ebp+arg_4] 0 +
ja loc_1017E83  +
xor esi esi +
jmp loc_1017FC9  +
mov ecx [eax+4] +
mov edx ecx +
shr edx 10h +
mov [eax+8] edx +
mov edx [eax] +
mov edi edx +
shl ecx 10h +
shr edi 10h +
or ecx edi +
shl edx 10h +
add [ebp+var_18] 0FFF0h +
mov [eax+4] ecx +
mov [eax] edx +
cmp [eax+8] esi +
jz loc_1017FA3  +
mov ebx 8000h +
test [eax+8] ebx +
jnz loc_1018008  +
mov esi [eax] +
mov edi [eax+4] +
add [ebp+var_18] 0FFFFh +
mov ecx esi +
add esi esi +
shr ecx 1Fh +
mov [eax] esi +
lea esi [edi+edi] +
or esi ecx +
mov ecx [eax+8] +
mov edx edi +
shr edx 1Fh +
add ecx ecx +
or ecx edx +
mov [eax+4] esi +
mov [eax+8] ecx +
test ecx ebx +
jz loc_1017FD8  +
mov cx word ptr [ebp+var_18] +
mov [eax+0Ah] cx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10140F3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
xor ecx ecx +
push ebx  +
push esi  +
xor esi esi +
mov [ebp+var_78] eax +
mov eax [ebp+arg_4] +
inc esi  +
push edi  +
mov [ebp+var_70] eax +
lea edi [ebp+var_20] +
mov [ebp+var_74] ecx +
mov [ebp+var_68] esi +
mov [ebp+var_4C] ecx +
mov [ebp+var_58] ecx +
mov [ebp+var_5C] ecx +
mov [ebp+var_60] ecx +
mov [ebp+var_64] ecx +
mov [ebp+var_50] ecx +
mov [ebp+var_6C] ecx +
mov [ebp+var_54] edx +
mov al [edx] +
cmp al 20h +
jz loc_1018080  +
cmp al 9 +
jz loc_1018080  +
cmp al 0Ah +
jz loc_1018080  +
cmp al 0Dh +
jnz loc_1018083  +
inc edx  +
jmp loc_101806E  +
mov bl 30h +
mov al [edx] +
inc edx  +
cmp ecx 0Bh +
ja loc_101827E  +
jmp ds:off_1018684[ecx*4]  +
mov cl al +
sub cl 31h +
cmp cl 8 +
ja loc_10180A8  +
push 3  +
pop ecx  +
dec edx  +
jmp loc_1018085  +
cmp al [ebp+arg_1C] +
jnz loc_10180B2  +
push 5  +
pop ecx  +
jmp loc_1018085  +
movsx eax al +
sub eax 2Bh +
jz loc_10180D7  +
dec eax  +
dec eax  +
jz loc_10180CB  +
sub eax 3 +
jnz loc_101821C  +
mov ecx esi +
jmp loc_1018085  +
push 2  +
pop ecx  +
mov [ebp+var_74] 8000h +
jmp loc_1018085  +
and [ebp+var_74] 0 +
push 2  +
pop ecx  +
jmp loc_1018085  +
mov cl al +
sub cl 31h +
mov [ebp+var_58] esi +
cmp cl 8 +
jbe loc_10180A2  +
cmp al [ebp+arg_1C] +
jnz loc_10180F6  +
push 4  +
jmp loc_10180AF  +
cmp al 2Bh +
jz loc_1018122  +
cmp al 2Dh +
jz loc_1018122  +
cmp al bl +
jz loc_10180C7  +
cmp al 43h +
jle loc_101821C  +
cmp al 45h +
jle loc_101811E  +
cmp al 63h +
jle loc_101821C  +
cmp al 65h +
jg loc_101821C  +
push 6  +
jmp loc_10180AF  +
dec edx  +
push 0Bh  +
jmp loc_10180AF  +
mov cl al +
sub cl 31h +
cmp cl 8 +
jbe loc_10180A2  +
cmp al [ebp+arg_1C] +
jz loc_10180AD  +
cmp al bl +
jz loc_10180C7  +
mov edx [ebp+var_54] +
jmp loc_1018247  +
mov [ebp+var_58] esi +
jmp loc_1018169  +
cmp al 39h +
jg loc_101816D  +
cmp [ebp+var_4C] 19h +
jnb loc_1018163  +
inc [ebp+var_4C]  +
sub al bl +
mov [edi] al +
inc edi  +
jmp loc_1018166  +
inc [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_101814F  +
cmp al [ebp+arg_1C] +
jz loc_10180F2  +
cmp al 2Bh +
jz loc_1018122  +
cmp al 2Dh +
jz loc_1018122  +
jmp loc_1018102  +
cmp [ebp+var_4C] 0 +
mov [ebp+var_58] esi +
mov [ebp+var_5C] esi +
jnz loc_10181AE  +
jmp loc_1018190  +
dec [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jz loc_101818A  +
jmp loc_10181AE  +
cmp al 39h +
jg loc_1018172  +
cmp [ebp+var_4C] 19h +
jnb loc_10181AB  +
inc [ebp+var_4C]  +
sub al bl +
mov [edi] al +
inc edi  +
dec [ebp+var_50]  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1018196  +
jmp loc_1018172  +
sub al bl +
mov [ebp+var_5C] esi +
cmp al 9 +
ja loc_1018142  +
push 4  +
jmp loc_10180A4  +
lea ecx [edx-2] +
mov [ebp+var_54] ecx +
mov cl al +
sub cl 31h +
cmp cl 8 +
ja loc_10181DB  +
push 9  +
jmp loc_10180A4  +
movsx eax al +
sub eax 2Bh +
jz loc_1018203  +
dec eax  +
dec eax  +
jz loc_10181F7  +
sub eax 3 +
jnz loc_1018142  +
push 8  +
jmp loc_10180AF  +
or [ebp+var_68] 0FFFFFFFFh +
push 7  +
pop ecx  +
jmp loc_1018085  +
push 7  +
jmp loc_10180AF  +
mov [ebp+var_60] esi +
jmp loc_1018212  +
mov al [edx] +
inc edx  +
cmp al bl +
jz loc_101820F  +
sub al 31h +
cmp al 8 +
jbe loc_10181D4  +
dec edx  +
jmp loc_1018247  +
mov cl al +
sub cl 31h +
cmp cl 8 +
jbe loc_10181D4  +
cmp al bl +
jmp loc_10181EA  +
cmp [ebp+arg_18] 0 +
jz loc_101827A  +
movsx eax al +
sub eax 2Bh +
lea ecx [edx-1] +
mov [ebp+var_54] ecx +
jz loc_1018203  +
dec eax  +
dec eax  +
jz loc_10181F7  +
mov edx ecx +
cmp [ebp+var_58] 0 +
mov eax [ebp+var_70] +
mov [eax] edx +
jz loc_101862F  +
push 18h  +
pop eax  +
cmp [ebp+var_4C] eax +
jbe loc_101826E  +
cmp [ebp+var_9] 5 +
jl loc_1018267  +
inc [ebp+var_9]  +
dec edi  +
inc [ebp+var_50]  +
mov [ebp+var_4C] eax +
cmp [ebp+var_4C] 0 +
jbe loc_1018656  +
jmp loc_10182D3  +
push 0Ah  +
pop ecx  +
dec edx  +
cmp ecx 0Ah +
jnz loc_1018085  +
jmp loc_1018247  +
mov [ebp+var_60] esi +
xor ecx ecx +
jmp loc_10182A9  +
cmp al 39h +
jg loc_10182B4  +
imul ecx ecx +
movsx esi al +
lea ecx [ecx+esi-30h] +
cmp ecx 1450h +
jg loc_10182AF  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_1018290  +
jmp loc_10182B4  +
mov ecx 1451h +
mov [ebp+var_64] ecx +
jmp loc_10182C4  +
cmp al 39h +
jg loc_101821C  +
mov al [edx] +
inc edx  +
cmp al bl +
jge loc_10182B9  +
jmp loc_101821C  +
dec [ebp+var_4C]  +
inc [ebp+var_50]  +
dec edi  +
cmp byte ptr [edi] 0 +
jz loc_10182CD  +
lea eax [ebp+var_3C] +
push eax  +
push [ebp+var_4C]  +
lea eax [ebp+var_20] +
push eax  +
call sub_1017E51  +
mov eax [ebp+var_64] +
xor edx edx +
add esp 0Ch +
cmp [ebp+var_68] edx +
jge loc_10182F8  +
neg eax  +
add eax [ebp+var_50] +
cmp [ebp+var_60] edx +
jnz loc_1018303  +
add eax [ebp+arg_10] +
cmp [ebp+var_5C] edx +
jnz loc_101830B  +
sub eax [ebp+arg_14] +
cmp eax 1450h +
jg loc_1018638  +
cmp eax 0FFFFEBB0h +
jl loc_101864F  +
mov ecx offset unk_101CE20 +
sub ecx 60h +
mov [ebp+var_54] eax +
cmp eax edx +
jz loc_101861D  +
jge loc_1018343  +
neg eax  +
mov ecx offset unk_101CF80 +
mov [ebp+var_54] eax +
sub ecx 60h +
cmp [ebp+arg_C] edx +
jnz loc_101834E  +
xor eax eax +
mov word ptr [ebp+var_3C] ax +
cmp [ebp+var_54] edx +
jz loc_101861D  +
jmp loc_101835E  +
mov ecx [ebp+var_7C] +
xor edx edx +
mov eax [ebp+var_54] +
sar [ebp+var_54] 3 +
add ecx 54h +
and eax 7 +
mov [ebp+var_7C] ecx +
cmp eax edx +
jz loc_1018613  +
imul eax eax +
add eax ecx +
mov ebx eax +
mov eax 8000h +
cmp [ebx] ax +
jb loc_1018395  +
mov esi ebx +
lea edi [ebp+var_48] +
movs   +
movs   +
movs   +
dec [ebp+var_48+2]  +
lea ebx [ebp+var_48] +
movzx ecx word ptr [ebx+0Ah] +
xor eax eax +
mov [ebp+var_50] eax +
mov [ebp+var_2C] eax +
mov [ebp+var_28] eax +
mov [ebp+var_24] eax +
mov eax [ebp+var_32] +
mov esi ecx +
mov edx 7FFFh +
xor esi eax +
and eax edx +
and ecx edx +
and esi 8000h +
mov edi 7FFFh +
lea edx [ecx+eax] +
mov [ebp+var_70] esi +
movzx edx dx +
cmp ax di +
jnb loc_10185F5  +
cmp cx di +
jnb loc_10185F5  +
mov edi 0BFFDh +
cmp dx di +
ja loc_10185F5  +
mov esi 3FBFh +
cmp dx si +
ja loc_1018402  +
xor eax eax +
mov [ebp+var_38] eax +
mov [ebp+var_3C] eax +
jmp loc_1018610  +
xor esi esi +
cmp ax si +
jnz loc_1018428  +
inc edx  +
test dword ptr [ebp-34h] 7FFFFFFFh +
jnz loc_1018428  +
cmp [ebp+var_38] esi +
jnz loc_1018428  +
cmp [ebp+var_3C] esi +
jnz loc_1018428  +
xor eax eax +
mov word ptr [ebp+var_32] ax +
jmp loc_1018613  +
cmp cx si +
jnz loc_101844E  +
inc edx  +
test dword ptr [ebx+8] 7FFFFFFFh +
jnz loc_101844E  +
cmp [ebx+4] esi +
jnz loc_101844E  +
cmp [ebx] esi +
jnz loc_101844E  +
mov [ebp-34h] esi +
mov [ebp+var_38] esi +
mov [ebp+var_3C] esi +
jmp loc_1018613  +
mov [ebp+var_68] esi +
lea edi [ebp+var_28] +
mov [ebp+var_58] 5 +
mov eax [ebp+var_68] +
mov ecx [ebp+var_58] +
add eax eax +
mov [ebp+var_64] ecx +
test ecx ecx +
jle loc_10184BC  +
lea eax [ebp+eax+var_3C] +
mov [ebp+var_5C] eax +
lea eax [ebx+8] +
mov [ebp+var_60] eax +
mov eax [ebp+var_5C] +
mov ecx [ebp+var_60] +
movzx ecx word ptr [ecx] +
movzx eax word ptr [eax] +
and [ebp+var_4C] 0 +
imul eax ecx +
mov ecx [edi-4] +
lea esi [ecx+eax] +
cmp esi ecx +
jb loc_1018498  +
cmp esi eax +
jnb loc_101849F  +
mov [ebp+var_4C] 1 +
cmp [ebp+var_4C] 0 +
mov [edi-4] esi +
jz loc_10184AB  +
inc word ptr [edi]  +
add [ebp+var_5C] 2 +
sub [ebp+var_60] 2 +
dec [ebp+var_64]  +
cmp [ebp+var_64] 0 +
jg loc_1018477  +
inc edi  +
inc edi  +
inc [ebp+var_68]  +
dec [ebp+var_58]  +
cmp [ebp+var_58] 0 +
jg loc_101845B  +
add edx 0C002h +
test dx dx +
jle loc_101850C  +
mov edi [ebp+var_24] +
test edi edi +
js loc_1018507  +
mov esi [ebp+var_28] +
mov eax [ebp+var_2C] +
shl [ebp+var_2C] 1 +
shr eax 1Fh +
mov ecx esi +
add esi esi +
or esi eax +
shr ecx 1Fh +
lea eax [edi+edi] +
or eax ecx +
add edx 0FFFFh +
mov [ebp+var_28] esi +
mov [ebp+var_24] eax +
test dx dx +
jg loc_10184D5  +
test dx dx +
jg loc_1018559  +
add edx 0FFFFh +
test dx dx +
jge loc_1018559  +
mov eax edx +
neg eax  +
movzx esi ax +
add edx esi +
test byte ptr [ebp+var_2C] 1 +
jz loc_1018529  +
inc [ebp+var_50]  +
mov eax [ebp+var_24] +
mov edi [ebp+var_28] +
mov ecx [ebp+var_28] +
shr [ebp+var_24] 1 +
shl eax 1Fh +
shr edi 1 +
or edi eax +
mov eax [ebp+var_2C] +
shl ecx 1Fh +
shr eax 1 +
or eax ecx +
dec esi  +
mov [ebp+var_28] edi +
mov [ebp+var_2C] eax +
jnz loc_1018520  +
cmp [ebp+var_50] esi +
jz loc_1018559  +
or word ptr [ebp+var_2C] 1 +
mov eax 8000h +
mov ecx eax +
cmp word ptr [ebp+var_2C] cx +
ja loc_1018577  +
mov ecx [ebp+var_2C] +
and ecx 1FFFFh +
cmp ecx 18000h +
jnz loc_10185AB  +
cmp [ebp+var_2C+2] 0FFFFFFFFh +
jnz loc_10185A8  +
and [ebp+var_2C+2] 0 +
cmp [ebp+var_28+2] 0FFFFFFFFh +
jnz loc_10185A3  +
and [ebp+var_28+2] 0 +
mov ecx 0FFFFh +
cmp word ptr [ebp+var_24+2] cx +
jnz loc_101859D  +
mov word ptr [ebp+var_24+2] ax +
inc edx  +
jmp loc_10185AB  +
inc word ptr [ebp+var_24+2]  +
jmp loc_10185AB  +
inc [ebp+var_28+2]  +
jmp loc_10185AB  +
inc [ebp+var_2C+2]  +
mov eax 7FFFh +
cmp dx ax +
jb loc_10185D8  +
xor eax eax +
xor ecx ecx +
cmp word ptr [ebp+var_70] ax +
mov [ebp+var_38] eax +
setz cl  +
mov [ebp+var_3C] eax +
dec ecx  +
and ecx 80000000h +
add ecx 7FFF8000h +
mov [ebp-34h] ecx +
jmp loc_1018613  +
mov ax word ptr [ebp+var_2C+2] +
or edx [ebp+var_70] +
mov word ptr [ebp+var_3C] ax +
mov eax [ebp+var_28] +
mov [ebp+var_3C+2] eax +
mov eax [ebp+var_24] +
mov [ebp+var_38+2] eax +
mov word ptr [ebp+var_32] dx +
jmp loc_1018613  +
xor eax eax +
test si si +
setz al  +
and [ebp+var_38] 0 +
dec eax  +
and eax 80000000h +
add eax 7FFF8000h +
and [ebp+var_3C] 0 +
mov [ebp-34h] eax +
cmp [ebp+var_54] 0 +
jnz loc_1018359  +
mov eax [ebp-34h] +
movzx ecx word ptr [ebp+var_3C] +
mov esi [ebp+var_3C+2] +
mov edx [ebp+var_38+2] +
shr eax 10h +
jmp loc_101865E  +
mov [ebp+var_6C] 4 +
jmp loc_1018656  +
xor esi esi +
mov eax 7FFFh +
mov edx 80000000h +
xor ecx ecx +
mov [ebp+var_6C] 2 +
jmp loc_101865E  +
mov [ebp+var_6C] 1 +
xor ecx ecx +
xor eax eax +
xor edx edx +
xor esi esi +
mov edi [ebp+var_78] +
or eax [ebp+var_74] +
mov [edi] cx +
mov ecx [ebp+var_4] +
mov [edi+2] esi +
mov [edi+0Ah] ax +
mov eax [ebp+var_6C] +
mov [edi+6] edx +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10140F3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi [ebp+arg_0] +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_1018024  +
mov ebx eax +
lea eax [ebp+var_10] +
push esi  +
push eax  +
call sub_10173BF  +
add esp 28h +
test bl 3 +
jnz loc_1018711  +
cmp eax 1 +
jnz loc_1018708  +
push 3  +
pop eax  +
jmp loc_101871D  +
cmp eax 2 +
jnz loc_101871B  +
push 4  +
jmp loc_1018705  +
test bl 1 +
jnz loc_101870D  +
test bl 2 +
jnz loc_1018703  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10140F3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi [ebp+arg_0] +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_1018024  +
mov ebx eax +
lea eax [ebp+var_10] +
push esi  +
push eax  +
call sub_1017908  +
add esp 28h +
test bl 3 +
jnz loc_1018788  +
cmp eax 1 +
jnz loc_101877F  +
push 3  +
pop eax  +
jmp loc_1018794  +
cmp eax 2 +
jnz loc_1018792  +
push 4  +
jmp loc_101877C  +
test bl 1 +
jnz loc_1018784  +
test bl 2 +
jnz loc_101877A  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10140F3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp [ebp+arg_0] 0 +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
jz loc_10187D3  +
lea eax [ebp+var_8] +
push eax  +
call sub_10186B9  +
mov ecx [ebp+var_8] +
mov eax [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+var_4] +
mov [eax+4] ecx +
jmp loc_10187E4  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1018730  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
add esp 0Ch +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call ds:_fileno  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_1018822  +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_1018962  +
test al 40h +
jz loc_1018834  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_1018816  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_101884D  +
mov [esi+4] ebx +
test al 10h +
jz loc_10188A8  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
mov [ebp+var_4] ebx +
test eax 10Ch +
jnz loc_10188B0  +
mov eax ds:_iob +
lea ecx [eax+20h] +
cmp esi ecx +
jz loc_1018879  +
add eax 40h +
cmp esi eax +
jnz loc_1018887  +
push [ebp+arg_4]  +
call ds:_isatty  +
pop ecx  +
test eax eax +
jnz loc_10188B0  +
call ds:__imp__errno  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10141E1  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1018961  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_10188A0  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_1018933  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+1] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_10188E4  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
jmp loc_1018929  +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jz loc_1018907  +
cmp eax 0FFFFFFFEh +
jz loc_1018907  +
mov edx ds:__pioinfo +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
add eax [edx+ecx*4] +
jmp loc_101890C  +
mov eax ds:__badioinfo +
test byte ptr [eax+4] 20h +
jz loc_1018929  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call ds:_lseeki64  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_101894F  +
mov eax [esi+8] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
jmp loc_101894A  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jz loc_1018958  +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_1018960  +
mov eax [ebp+arg_0] +
and eax 0FFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi dword ptr [ebp+arg_0] +
test byte ptr [esi+0Ch] 40h +
push edi  +
jnz loc_1018A5F  +
mov edi ds:_fileno +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10189B7  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_10189B7  +
push ebx  +
push esi  +
call edi  +
mov ecx ds:__pioinfo +
sar eax 5 +
push esi  +
lea ebx [ecx+eax*4] +
call edi  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
pop ebx  +
jmp loc_10189BC  +
mov eax ds:__badioinfo +
test byte ptr [eax+4] 80h +
jz loc_1018A5F  +
xor edi edi +
inc edi  +
dec dword ptr [esi+4]  +
js loc_10189D8  +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_10189DF  +
push esi  +
call sub_10172A5  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_10189EE  +
mov eax 0FFFFh +
jmp loc_1018A78  +
mov [ebp+var_4] al +
movzx eax al +
push eax  +
call ds:isleadbyte  +
pop ecx  +
test eax eax +
jz loc_1018A34  +
dec dword ptr [esi+4]  +
js loc_1018A0F  +
mov ecx [esi] +
movzx eax byte ptr [ecx] +
inc ecx  +
mov [esi] ecx +
jmp loc_1018A16  +
push esi  +
call sub_10172A5  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1018A2E  +
movsx eax [ebp+var_4] +
push esi  +
push eax  +
call ungetc  +
pop ecx  +
mov eax 0FFFFh +
jmp loc_1018A77  +
push 2  +
mov [ebp-3] al +
pop edi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call ds:mbtowc  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_1018A59  +
call ds:__imp__errno  +
mov dword ptr [eax] 2Ah +
jmp loc_10189E4  +
mov ax [ebp+arg_0] +
jmp loc_1018A78  +
add dword ptr [esi+4] 0FFFFFFFEh +
js loc_1018A71  +
mov ecx [esi] +
movzx eax word ptr [ecx] +
add ecx 2 +
mov [esi] ecx +
jmp loc_1018A78  +
push esi  +
call sub_1018BD5  +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx dword ptr [ebp+arg_0] +
push ebx  +
mov ebx 0FFFFh +
push esi  +
mov esi [ebp+arg_4] +
mov eax ebx +
push edi  +
cmp cx ax +
jz loc_1018B25  +
mov eax [esi+0Ch] +
test al 1 +
jnz loc_1018AB7  +
test al al +
jns loc_1018B25  +
test al 2 +
jnz loc_1018B25  +
test al 40h +
jnz loc_1018B78  +
mov edi ds:_fileno +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1018AFA  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_1018AFA  +
push esi  +
call edi  +
mov ecx ds:__pioinfo +
sar eax 5 +
push esi  +
lea ebx [ecx+eax*4] +
call edi  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
mov ebx 0FFFFh +
jmp loc_1018AFF  +
mov eax ds:__badioinfo +
test byte ptr [eax+4] 80h +
jz loc_1018B75  +
push dword ptr [ebp+arg_0]  +
lea eax [ebp+var_C] +
push eax  +
call ds:wctomb  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_1018B36  +
call ds:__imp__errno  +
mov dword ptr [eax] 2Ah +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10140F3  +
leave   +
retn   +
mov ecx [esi+8] +
add ecx eax +
cmp [esi] ecx +
jnb loc_1018B4C  +
cmp dword ptr [esi+4] 0 +
jnz loc_1018B25  +
cmp eax [esi+18h] +
jg loc_1018B25  +
mov [esi] ecx +
lea ecx [eax-1] +
test ecx ecx +
jl loc_1018B60  +
dec dword ptr [esi]  +
dec ecx  +
mov dl [ebp+ecx-0Bh] +
mov edi [esi] +
mov [edi] dl +
jns loc_1018B53  +
add [esi+4] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 1 +
mov [esi+0Ch] eax +
mov ax [ebp+arg_0] +
jmp loc_1018B27  +
mov ecx dword ptr [ebp+arg_0] +
mov eax [esi+8] +
add eax 2 +
cmp [esi] eax +
jnb loc_1018B90  +
cmp dword ptr [esi+4] 0 +
jnz loc_1018B25  +
cmp dword ptr [esi+18h] 2 +
jb loc_1018B25  +
mov [esi] eax +
add dword ptr [esi] 0FFFFFFFEh +
test byte ptr [esi+0Ch] 40h +
mov eax [esi] +
jz loc_1018BAA  +
cmp [eax] cx +
jz loc_1018BAD  +
add eax 2 +
mov [esi] eax +
jmp loc_1018B25  +
mov [eax] cx +
mov eax [esi+0Ch] +
add dword ptr [esi+4] 2 +
and eax 0FFFFFFEFh +
or eax 1 +
mov [esi+0Ch] eax +
mov ax cx +
jmp loc_1018B27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jnz loc_1018C04  +
call ds:__imp__errno  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_10141E1  +
add esp 14h +
jmp loc_1018CEE  +
mov eax [esi+0Ch] +
test al 83h +
jz loc_1018CEE  +
test al 40h +
jnz loc_1018CEE  +
test al 2 +
jz loc_1018C26  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_1018CEE  +
or eax 1 +
mov [esi+0Ch] eax +
test eax 10Ch +
jz loc_1018BE6  +
push dword ptr [esi+18h]  +
mov eax [esi+8] +
mov edi ds:_fileno +
push eax  +
push esi  +
mov [esi] eax +
call edi  +
pop ecx  +
push eax  +
call ds:_read  +
add esp 0Ch +
mov [esi+4] eax +
cmp eax ebx +
jz loc_1018CDE  +
cmp eax 1 +
jz loc_1018CDE  +
cmp eax 0FFFFFFFFh +
jz loc_1018CDE  +
test byte ptr [esi+0Ch] 82h +
jnz loc_1018CB0  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1018C9B  +
push esi  +
call edi  +
pop ecx  +
cmp eax 0FFFFFFFEh +
jz loc_1018C9B  +
push esi  +
call edi  +
mov ecx ds:__pioinfo +
sar eax 5 +
push esi  +
lea ebx [ecx+eax*4] +
call edi  +
and eax 1Fh +
imul eax eax +
add eax [ebx] +
pop ecx  +
pop ecx  +
jmp loc_1018CA0  +
mov eax ds:__badioinfo +
mov al [eax+4] +
and al 82h +
cmp al 82h +
jnz loc_1018CB0  +
or dword ptr [esi+0Ch] 2000h +
cmp dword ptr [esi+18h] 200h +
jnz loc_1018CCE  +
mov eax [esi+0Ch] +
test al 8 +
jz loc_1018CCE  +
test eax 400h +
jnz loc_1018CCE  +
mov dword ptr [esi+18h] 1000h +
mov ecx [esi] +
add dword ptr [esi+4] 0FFFFFFFEh +
movzx eax word ptr [ecx] +
add ecx 2 +
mov [esi] ecx +
jmp loc_1018CF3  +
neg eax  +
sbb eax eax +
and eax 10h +
add eax 10h +
or [esi+0Ch] eax +
mov [esi+4] ebx +
mov eax 0FFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
cmp [esi+1C8h] ebx +
push edi  +
jle loc_1018D50  +
mov edi esi +
mov ecx [esi+1C4h] +
push 1  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
push edi  +
push ecx  +
call ds:GetOverlappedResult  +
test eax eax +
jz loc_1018D5B  +
mov edx [ebp+NumberOfBytesTransferred] +
cmp edx [edi+14h] +
jnz loc_1018D6D  +
inc ebx  +
add edi 1Ch +
cmp ebx [esi+1C8h] +
jl loc_1018D24  +
pop edi  +
mov eax 1 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
push offset aFailureGetover  +
call sub_101A030  +
pop edi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
push offset aFailureGetov_0  +
call sub_101A030  +
pop edi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [eax+1CCh] +
push esi  +
mov esi [eax+1D4h] +
add ecx 0FFFh +
shr ecx 0Ch +
mov [eax+1E4h] esi +
mov esi [eax+1D8h] +
shl ecx 0Ch +
mov [eax+1E8h] esi +
mov [ebp+NumberOfBytesWritten] 0 +
mov [eax+1D0h] ecx +
pop esi  +
test ecx ecx +
jnz loc_1018DE2  +
mov dword ptr [edx] 1 +
mov eax 1 +
mov esp ebp +
pop ebp  +
retn   +
mov dword ptr [edx] 0 +
lea ecx [eax+1DCh] +
push ecx  +
mov ecx [eax+1D0h] +
lea edx [ebp+NumberOfBytesWritten] +
push edx  +
mov edx [eax+1F0h] +
mov eax [eax+1C4h] +
push ecx  +
push edx  +
push eax  +
call ds:WriteFile  +
test eax eax +
jnz loc_1018DD9  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_1018DD9  +
push offset aFailureWritefi  +
call sub_101A030  +
xor eax eax +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
mov edx eax +
sar edx 1Fh +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
mov [edi+1D4h] ecx +
mov [edi+1D8h] eax +
mov [edi+1CCh] ebx +
mov [edi+1C8h] ebx +
mov [ebp+arg_8] ebx +
lea edx [edi+28h] +
lea esp [esp+0] +
cmp eax esi +
jg loc_1019022  +
jl loc_1018E93  +
cmp ecx [ebp+arg_C] +
jnb loc_1019022  +
mov edi eax +
sar edi 1Fh +
mov [edx-20h] ecx +
mov edi ecx +
add ecx 10000h +
mov [edx-1Ch] eax +
mov [ebp+var_4] eax +
adc eax 0 +
cmp eax esi +
jg loc_1018EBE  +
jl loc_1018EB7  +
cmp ecx [ebp+arg_C] +
jnb loc_1018EBE  +
mov ebx ecx +
mov [ebp+var_4] eax +
jmp loc_1018EC4  +
mov ebx [ebp+arg_C] +
mov [ebp+var_4] esi +
sub ebx edi +
mov edi [ebp+arg_0] +
mov [edx-14h] ebx +
add [edi+1CCh] ebx +
cmp eax esi +
jg loc_1018FEA  +
mov ebx [ebp+arg_C] +
jl loc_1018EE7  +
cmp ecx ebx +
jnb loc_1018FEA  +
mov edi eax +
sar edi 1Fh +
mov [edx-4] ecx +
mov edi ecx +
add ecx 10000h +
mov [edx] eax +
mov [ebp+var_4] eax +
adc eax 0 +
cmp eax esi +
jg loc_1018F10  +
jl loc_1018F09  +
cmp ecx ebx +
jnb loc_1018F10  +
mov ebx ecx +
mov [ebp+var_4] eax +
jmp loc_1018F13  +
mov [ebp+var_4] esi +
sub ebx edi +
mov edi [ebp+arg_0] +
mov [edx+8] ebx +
add [edi+1CCh] ebx +
cmp eax esi +
jg loc_1019002  +
mov ebx [ebp+arg_C] +
jl loc_1018F36  +
cmp ecx ebx +
jnb loc_1019002  +
mov edi eax +
sar edi 1Fh +
mov [edx+18h] ecx +
mov edi ecx +
add ecx 10000h +
mov [edx+1Ch] eax +
mov [ebp+var_4] eax +
adc eax 0 +
cmp eax esi +
jg loc_1018F60  +
jl loc_1018F59  +
cmp ecx ebx +
jnb loc_1018F60  +
mov ebx ecx +
mov [ebp+var_4] eax +
jmp loc_1018F63  +
mov [ebp+var_4] esi +
sub ebx edi +
mov edi [ebp+arg_0] +
mov [edx+24h] ebx +
add [edi+1CCh] ebx +
cmp eax esi +
jg loc_101901C  +
mov ebx [ebp+arg_C] +
jl loc_1018F86  +
cmp ecx ebx +
jnb loc_101901C  +
mov edi eax +
sar edi 1Fh +
mov [edx+34h] ecx +
mov edi ecx +
add ecx 10000h +
mov [edx+38h] eax +
mov [ebp+var_4] eax +
adc eax 0 +
cmp eax esi +
jg loc_1018FB0  +
jl loc_1018FA9  +
cmp ecx ebx +
jnb loc_1018FB0  +
mov ebx ecx +
mov [ebp+var_4] eax +
jmp loc_1018FB3  +
mov [ebp+var_4] esi +
sub ebx edi +
mov edi [ebp+arg_0] +
mov [edx+40h] ebx +
add [edi+1CCh] ebx +
mov ebx [ebp+arg_8] +
add ebx 4 +
add edx 70h +
cmp ebx 10h +
mov [ebp+arg_8] ebx +
jl loc_1018E80  +
mov [edi+1C8h] ebx +
pop edi  +
pop esi  +
mov eax 1 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 14h  +
mov ebx [ebp+arg_8] +
inc ebx  +
mov [edi+1C8h] ebx +
pop edi  +
pop esi  +
mov eax 1 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 14h  +
mov ebx [ebp+arg_8] +
add ebx 2 +
mov [edi+1C8h] ebx +
pop edi  +
pop esi  +
mov eax 1 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 14h  +
mov ebx [ebp+arg_8] +
add ebx 3 +
mov [edi+1C8h] ebx +
pop edi  +
pop esi  +
mov eax 1 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
cmp [edi+1C8h] ebx +
push esi  +
jle loc_1019093  +
lea esi [edi+18h] +
mov eax [esi-4] +
mov edx [esi] +
add eax 0FFFh +
lea ecx [esi-18h] +
push ecx  +
shr eax 0Ch +
push 0  +
shl eax 0Ch +
push eax  +
mov eax [edi+1C0h] +
push edx  +
push eax  +
call ds:ReadFile  +
test eax eax +
jnz loc_1019087  +
call ds:GetLastError  +
cmp eax 3E5h +
jnz loc_101909B  +
inc ebx  +
add esi 1Ch +
cmp ebx [edi+1C8h] +
jl loc_1019051  +
pop esi  +
mov eax 1 +
pop ebx  +
retn   +
push offset aFailureReadfil  +
call sub_101A030  +
pop esi  +
xor eax eax +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1F6Ch +
call __alloca_probe  +
push ebx  +
push esi  +
push edi  +
push 1F40h  +
xor ebx ebx +
lea eax [ebp+var_1F6C] +
push ebx  +
push eax  +
mov [ebp+hFile] 0FFFFFFFFh +
call memset  +
mov edi [ebp+DistanceToMoveHigh] +
movzx ecx word ptr [edi] +
push ecx  +
call ds:iswascii  +
add esp 10h +
test eax eax +
mov eax edi +
jnz loc_10190F8  +
mov eax offset aUnprintable +
mov esi ds:wprintf +
push eax  +
push offset aSourceFile_64l  +
call esi  +
push offset asc_100B760  +
call esi  +
mov edx [ebp+lpFileName] +
movzx eax word ptr [edx] +
push eax  +
call ds:iswascii  +
add esp 10h +
test eax eax +
mov eax [ebp+lpFileName] +
jnz loc_1019129  +
mov eax offset aUnprintable +
push eax  +
push offset aDestinationF_0  +
call esi  +
push offset asc_100B720  +
call esi  +
add esp 0Ch +
push offset aCopyProgressCo  +
call sub_101A0A0  +
push ebx  +
push 68000000h  +
push 3  +
push ebx  +
push 3  +
push 80000000h  +
push edi  +
mov edi ds:CreateFileW +
call edi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1019177  +
push offset aFailureCreatef  +
call sub_101A030  +
xor edi edi +
jmp loc_1019522  +
lea ecx [ebp+DistanceToMoveHigh] +
push ecx  +
push eax  +
call ds:GetFileSize  +
mov esi eax +
mov [ebp+lDistanceToMove] esi +
cmp esi 0FFFFFFFFh +
jnz loc_10191A7  +
call ds:GetLastError  +
test eax eax +
jz loc_10191A7  +
push offset aFailureGetfile  +
call sub_101A030  +
xor edi edi +
jmp loc_101950B  +
mov ecx [ebp+DistanceToMoveHigh] +
push ebx  +
push 0E0000000h  +
push 1  +
xor eax eax +
push ebx  +
or eax esi +
push ebx  +
xor edx edx +
mov [ebp+var_14] eax +
mov eax [ebp+lpFileName] +
push 40000000h  +
or ecx edx +
push eax  +
mov [ebp+var_10] ecx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
call edi  +
mov edi eax +
mov [ebp+hFile] edi +
cmp edi 0FFFFFFFFh +
jnz loc_10191EE  +
push offset aFailureCreatef  +
call sub_101A030  +
xor edi edi +
jmp loc_101950B  +
push ebx  +
add esi 0FFFh +
lea ecx [ebp+DistanceToMoveHigh] +
push ecx  +
shr esi 0Ch +
shl esi 0Ch +
push esi  +
push edi  +
call ds:SetFilePointer  +
cmp eax 0FFFFFFFFh +
jnz loc_1019227  +
call ds:GetLastError  +
test eax eax +
jz loc_1019227  +
push offset aFailureSetfile  +
call sub_101A030  +
xor edi edi +
jmp loc_101950B  +
push edi  +
call ds:SetEndOfFile  +
test eax eax +
jnz loc_1019243  +
push offset aFailureSetendo  +
call sub_101A030  +
xor edi edi +
jmp loc_101950B  +
mov [ebp+lpFileName] ebx +
lea esi [ebp+var_1DA8] +
jmp loc_1019255  +
mov edi [ebp+hFile] +
xor ebx ebx +
mov edx [ebp+hObject] +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [esi-4] edx +
mov [esi] edi +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
mov [esi+14h] ebx +
mov [esi+20h] ebx +
mov [esi+24h] ebx +
call ds:CreateEventW  +
mov [esi+28h] eax +
cmp eax ebx +
jz loc_1019471  +
push 4  +
push 1000h  +
push 100000h  +
push ebx  +
call ds:VirtualAlloc  +
mov [esi+2Ch] eax +
cmp eax ebx +
jz loc_1019482  +
lea edi [esi-1BCh] +
jmp loc_10192B0  +
mov eax [esi+2Ch] +
push 0  +
push 0  +
push 0  +
add eax ebx +
push 0  +
mov [edi+10h] eax +
mov dword ptr [edi] 0 +
mov dword ptr [edi+4] 0 +
call ds:CreateEventW  +
mov [edi+8] eax +
test eax eax +
jz loc_1019490  +
add ebx 10000h +
add edi 1Ch +
cmp ebx 100000h +
jl loc_10192B0  +
mov ecx [ebp+var_10] +
mov edx [ebp+var_14] +
mov eax [ebp+var_4] +
push ecx  +
mov ecx [ebp+var_8] +
push edx  +
push eax  +
push ecx  +
lea ebx [esi-1C4h] +
push ebx  +
call sub_1018E40  +
mov edi eax +
test edi edi +
jz loc_1019509  +
mov edi ebx +
call sub_1019040  +
mov edi eax +
test edi edi +
jz loc_1019509  +
mov edx [esi+8] +
add [ebp+var_8] edx +
mov eax [ebp+lpFileName] +
adc [ebp+var_4] 0 +
inc eax  +
add esi 1F4h +
cmp eax 10h +
mov [ebp+lpFileName] eax +
jl loc_1019250  +
xor eax eax +
lea ebx [ebp+var_1F6C] +
mov esi ebx +
mov [ebp+var_20] eax +
mov [ebp+var_1C] eax +
mov [ebp+lpFileName] eax +
mov [ebp+var_24] 1 +
call sub_1018D10  +
mov edi eax +
test edi edi +
jz loc_1019509  +
nop   +
lea edx [ebp+lpFileName] +
mov eax ebx +
call sub_1018D90  +
mov edi eax +
test edi edi +
jz loc_1019509  +
cmp [ebp+lpFileName] 0 +
jnz loc_10194BA  +
mov edx [ebx+1C4h] +
push 1  +
lea eax [ebp+NumberOfBytesTransferred] +
push eax  +
lea ecx [ebx+1DCh] +
push ecx  +
push edx  +
call ds:GetOverlappedResult  +
test eax eax +
jz loc_101949E  +
mov eax [ebp+NumberOfBytesTransferred] +
cmp eax [ebx+1D0h] +
jnz loc_10194AC  +
mov ecx [ebp+var_10] +
mov esi [ebp+var_14] +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
push ecx  +
push esi  +
push edx  +
push eax  +
push ebx  +
call sub_1018E40  +
mov edi eax +
test edi edi +
jz loc_1019509  +
mov ecx [ebx+1CCh] +
add [ebp+var_8] ecx +
mov edi ebx +
adc [ebp+var_4] 0 +
call sub_1019040  +
mov edi eax +
test edi edi +
jz loc_1019509  +
mov edx [ebx+1D0h] +
mov eax [ebp+var_20] +
mov ecx [ebp+var_1C] +
add eax edx +
push 0  +
adc ecx 0 +
push 64h  +
push ecx  +
push eax  +
mov [ebp+var_20] eax +
mov [ebp+var_1C] ecx +
call __allmul  +
mov ecx [ebp+var_10] +
push ecx  +
push esi  +
push edx  +
push eax  +
call __alldiv  +
push eax  +
call sub_101A110  +
mov eax [ebp+var_24] +
lea edx [eax+1] +
and edx 8000000Fh +
mov [ebp+lpFileName] 0 +
jns loc_101944B  +
dec edx  +
or edx 0FFFFFFF0h +
inc edx  +
imul eax eax +
lea ebx [ebp+eax+var_1F6C] +
mov esi ebx +
mov [ebp+var_24] edx +
call sub_1018D10  +
mov edi eax +
test edi edi +
jnz loc_1019370  +
jmp loc_1019509  +
push offset aFailureCreatee  +
call sub_101A030  +
xor edi edi +
jmp loc_101950B  +
push offset aFailureVirtual  +
call sub_101A030  +
xor edi edi +
jmp loc_101950B  +
push offset aFailureCreatee  +
call sub_101A030  +
xor edi edi +
jmp loc_1019509  +
push offset aFailureGetov_1  +
call sub_101A030  +
xor edi edi +
jmp loc_1019509  +
push offset aFailureGetov_2  +
call sub_101A030  +
xor edi edi +
jmp loc_1019509  +
mov ecx [ebp+lDistanceToMove] +
mov esi [ebp+hFile] +
push 0  +
lea eax [ebp+DistanceToMoveHigh] +
push eax  +
push ecx  +
push esi  +
call ds:SetFilePointer  +
cmp eax 0FFFFFFFFh +
jnz loc_10194EB  +
call ds:GetLastError  +
test eax eax +
jz loc_10194EB  +
push offset aFailureSetfile  +
call sub_101A030  +
xor edi edi +
jmp loc_1019509  +
push esi  +
call ds:SetEndOfFile  +
test eax eax +
jnz loc_1019504  +
push offset aFailureSetendo  +
call sub_101A030  +
xor edi edi +
jmp loc_1019509  +
call sub_101A170  +
xor ebx ebx +
mov edx [ebp+hObject] +
mov esi ds:CloseHandle +
push edx  +
call esi  +
mov eax [ebp+hFile] +
cmp eax 0FFFFFFFFh +
jz loc_1019522  +
push eax  +
call esi  +
lea esi [ebp+var_1D7C] +
mov [ebp+lpFileName] 10h +
nop   +
mov eax [esi] +
cmp eax ebx +
jz loc_1019543  +
push 8000h  +
push ebx  +
push eax  +
call ds:VirtualFree  +
add esi 1F4h +
sub [ebp+lpFileName] 1 +
jnz loc_1019530  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov dword_101D814 esi +
mov ecx 0Bh +
mov eax 1 +
shl eax cl +
cmp esi eax +
jz loc_1019597  +
inc ecx  +
cmp ecx 10h +
jl loc_1019574  +
mov eax 10000h +
cdq   +
idiv  esi +
pop esi  +
mov dword_101D804 eax +
pop ebp  +
retn 4  +
mov edx 20h +
sub edx ecx +
mov dword_101D7DC edx +
mov eax 10000h +
cdq   +
idiv  esi +
mov dword_101D7E0 ecx +
pop esi  +
mov dword_101D804 eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
mov eax 20h +
push esi  +
mov esi [edx] +
cmp esi [ecx] +
jnz loc_1019605  +
sub eax 4 +
add ecx 4 +
add edx 4 +
cmp eax 4 +
jnb loc_10195E1  +
xor eax eax +
xor edx edx +
test eax eax +
setz dl  +
mov al dl +
pop esi  +
pop ebp  +
retn 8  +
movzx eax byte ptr [edx] +
movzx esi byte ptr [ecx] +
sub eax esi +
jnz loc_1019631  +
movzx eax byte ptr [edx+1] +
movzx esi byte ptr [ecx+1] +
sub eax esi +
jnz loc_1019631  +
movzx eax byte ptr [edx+2] +
movzx esi byte ptr [ecx+2] +
sub eax esi +
jnz loc_1019631  +
movzx eax byte ptr [edx+3] +
movzx ecx byte ptr [ecx+3] +
sub eax ecx +
sar eax 1Fh +
or eax 1 +
xor edx edx +
test eax eax +
setz dl  +
mov al dl +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ds:wprintf +
push offset asc_100B720  +
call esi  +
mov eax [edi] +
push eax  +
push offset aDPagesSeen  +
call esi  +
mov ecx [edi+4] +
push ecx  +
push offset aDBadChecksums  +
call esi  +
mov edx [edi+8] +
push edx  +
push offset aDCorrectableCh  +
call esi  +
mov eax [edi+0Ch] +
push eax  +
push offset aDUninitialized  +
call esi  +
mov ecx [edi+10h] +
push ecx  +
push offset aDWrongPageNumb  +
call esi  +
mov edx [edi+20h] +
mov eax [edi+1Ch] +
mov ecx [edi+18h] +
push edx  +
push eax  +
push ecx  +
push offset a0xI64xHighestD  +
call esi  +
push offset asc_100B760  +
call esi  +
mov edx [edi+28h] +
add esp 40h +
push edx  +
push offset aDReadsPerforme  +
call esi  +
mov eax 100000h +
cdq   +
idiv  dword_101D814 +
xor edx edx +
add esp 8 +
mov ecx eax +
mov eax [edi] +
div  ecx +
mov ecx eax +
mov eax 10624DD3h +
mul  [ebp+arg_0] +
shr edx 6 +
mov [ebp+var_C] ecx +
mov [ebp+arg_0] edx +
cmp edx 1 +
ja loc_10196FB  +
mov [ebp+arg_0] 1 +
mov eax ecx +
xor edx edx +
div  [ebp+arg_0] +
mov ecx [edi+28h] +
xor ebx ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_10] eax +
cmp ecx ebx +
jz loc_1019729  +
mov eax [edi+2Ch] +
xor edx edx +
div  ecx +
mov edx [edi+30h] +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax [edi+34h] +
mov [ebp+var_8] eax +
mov ecx [ebp+var_C] +
push ecx  +
push offset aDMbRead  +
call esi  +
mov edx [ebp+arg_0] +
push edx  +
push offset aDSecondsTaken  +
call esi  +
mov eax [ebp+var_10] +
push eax  +
push offset aDMbSecond  +
call esi  +
mov ecx [edi+2Ch] +
push ecx  +
push offset aDMillisecondsU  +
call esi  +
push ebx  +
push offset aDMillisecondsP  +
call esi  +
mov edx [ebp+var_4] +
push edx  +
push offset aDMillisecondsF  +
call esi  +
mov eax [ebp+var_8] +
push eax  +
push offset aDMillisecond_0  +
call esi  +
push offset asc_100B760  +
call esi  +
add esp 3Ch +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
push offset Addend  +
call ds:InterlockedIncrement  +
mov edi eax +
dec edi  +
cmp edi dword_1037818 +
jge loc_1019853  +
mov ecx dword_103781C +
test ecx ecx +
jz loc_10197CF  +
xor edx edx +
lea eax [edi+1] +
div  ecx +
test edx edx +
jnz loc_10197CF  +
mov ecx dwMilliseconds +
push ecx  +
call ds:Sleep  +
mov ecx dword_101D804 +
mov eax dword_101D808 +
mov edx ecx +
imul edx edi +
sub eax edx +
cmp ecx eax +
jge loc_10197E7  +
mov eax ecx +
mov [esi+1Ch] eax +
mov ecx dword_101D804 +
imul ecx edi +
mov [esi+20h] ecx +
imul eax dword_101D814 +
mov [esi+18h] eax +
mov eax ecx +
mov ecx dword_101D7E0 +
mov edx eax +
shl edx cl +
mov [esi+8] edx +
mov ecx dword_101D7DC +
shr eax cl +
mov [esi+0Ch] eax +
call ds:GetTickCount  +
mov ecx [esi+14h] +
mov edx [esi+64h] +
push esi  +
push 0  +
mov [esi+24h] eax +
mov eax [esi+18h] +
push eax  +
push ecx  +
push edx  +
call ds:ReadFile  +
test eax eax +
jnz loc_101986B  +
call ds:GetLastError  +
cmp eax 3E5h +
jz loc_101986B  +
push offset aFailureReadfil  +
call sub_101A030  +
mov eax [esi+60h] +
push eax  +
call ds:SetEvent  +
test eax eax +
jnz loc_101986B  +
push offset aFailureSeteven  +
call sub_101A030  +
pop edi  +
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov ecx [esi+20h] +
mov eax [esi+14h] +
mov edx [esi+1Ch] +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
xor ecx ecx +
xor eax eax +
mov [ebp+var_20] edx +
mov [ebp+var_14] eax +
cmp edx ecx +
jbe loc_1019A4D  +
push ebx  +
push edi  +
jmp loc_10198D0  +
mov edi dword_101D814 +
imul edi eax +
add edi [ebp+var_18] +
mov edx 1 +
add [esi+28h] edx +
cmp [edi] ecx +
jnz loc_10198F5  +
cmp [edi+4] ecx +
jnz loc_10198F5  +
add [esi+34h] edx +
jmp loc_1019A3B  +
mov edx [ebp+var_1C] +
lea eax [eax+edx+1] +
cmp eax 2 +
setbe dl  +
mov [ebp+var_3] dl +
mov [ebp+var_2] 0 +
test dl dl +
jz loc_1019912  +
mov [ebp+var_8] ecx +
jmp loc_1019918  +
lea ebx [eax-2] +
mov [ebp+var_8] ebx +
lea ebx [eax-2] +
mov [ebp+var_10] ebx +
mov ebx offset aHeader +
test dl dl +
jnz loc_101992C  +
mov ebx offset dword_10015C0 +
mov [ebp+var_60] ecx +
mov [ebp+var_5C] ecx +
mov [ebp+var_58] ecx +
mov [ebp+var_54] ecx +
mov [ebp+var_50] ecx +
mov [ebp+var_4C] ecx +
mov [ebp+var_48] ecx +
mov [ebp+var_44] ecx +
mov [ebp+var_40] ecx +
mov [ebp+var_3C] ecx +
mov [ebp+var_38] ecx +
mov [ebp+var_34] ecx +
mov [ebp+var_30] ecx +
mov [ebp+var_2C] ecx +
mov [ebp+var_28] ecx +
mov [ebp+var_24] ecx +
mov byte ptr [ebp+var_1] 0 +
mov [ebp+var_C] ecx +
cmp eax dword_101D808 +
jnz loc_1019981  +
cmp [edi+4] ecx +
jnz loc_1019981  +
cmp [edi+8] ecx +
jnz loc_1019981  +
cmp [edi+0Ch] ecx +
jnz loc_1019981  +
mov al 1 +
cmp [edi+18h] ecx +
jz loc_1019984  +
mov al [ebp+var_2] +
test dl dl +
jnz loc_1019991  +
test al al +
mov eax 13h +
jz loc_1019996  +
mov eax 17h +
lea ecx [ebp+var_C] +
push ecx  +
lea edx [ebp+var_1] +
push edx  +
lea ecx [ebp+var_40] +
push ecx  +
mov ecx [ebp+var_8] +
lea edx [ebp+var_60] +
push edx  +
mov edx dword_101D814 +
push 1  +
push ecx  +
push eax  +
push edx  +
push edi  +
call sub_101AF10  +
lea eax [ebp+var_40] +
push eax  +
lea ecx [ebp+var_60] +
push ecx  +
call sub_10195D0  +
test al al +
jnz loc_10199EC  +
mov edx [ebp+var_10] +
mov eax ds:_iob +
push ebx  +
push edx  +
add eax 40h +
push offset aErrorPageDSChe  +
push eax  +
call ds:fwprintf  +
add esp 10h +
inc dword ptr [esi+2Ch]  +
jmp loc_1019A39  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_1019A15  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_10] +
mov eax ds:_iob +
push ecx  +
push ebx  +
push edx  +
add eax 40h +
push offset aWarningPageDSC  +
push eax  +
call ds:fwprintf  +
add esp 14h +
inc dword ptr [esi+30h]  +
cmp [ebp+var_3] 0 +
jnz loc_1019A39  +
mov eax [edi+8] +
mov edi [edi+0Ch] +
cmp edi [esi+44h] +
jb loc_1019A39  +
ja loc_1019A2D  +
cmp eax [esi+40h] +
jbe loc_1019A39  +
mov ecx [ebp+var_8] +
mov [esi+40h] eax +
mov [esi+44h] edi +
mov [esi+48h] ecx +
xor ecx ecx +
mov eax [ebp+var_14] +
inc eax  +
mov [ebp+var_14] eax +
cmp eax [ebp+var_20] +
jb loc_10198D0  +
pop edi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push ebx  +
push esi  +
push edi  +
push 1  +
call ds:GetCurrentThread  +
push eax  +
call ds:SetThreadPriorityBoost  +
mov edi [ebp+NumberOfBytesTransferred] +
mov ebx ds:GetQueuedCompletionStatus +
push 0FFFFFFFFh  +
lea eax [ebp+Overlapped] +
push eax  +
lea ecx [ebp+CompletionKey] +
push ecx  +
lea edx [ebp+NumberOfBytesTransferred] +
push edx  +
push edi  +
mov [ebp+Overlapped] 0 +
call ebx  +
test eax eax +
jz loc_1019AF9  +
nop   +
call ds:GetTickCount  +
mov edx [ebp+Overlapped] +
mov esi edx +
test edx edx +
jz loc_1019B18  +
mov ecx [ebp+NumberOfBytesTransferred] +
cmp ecx [edx+18h] +
jnz loc_1019B0E  +
sub eax [edx+24h] +
inc dword ptr [edx+50h]  +
add [edx+54h] eax +
cmp eax [edx+58h] +
lea ecx [edx+28h] +
jbe loc_1019ACB  +
mov [ecx+30h] eax +
cmp eax [ecx+34h] +
jnb loc_1019AD3  +
mov [ecx+34h] eax +
call sub_10198A0  +
call sub_1019790  +
push 0FFFFFFFFh  +
lea edx [ebp+Overlapped] +
push edx  +
lea eax [ebp+CompletionKey] +
push eax  +
lea ecx [ebp+NumberOfBytesTransferred] +
push ecx  +
push edi  +
mov [ebp+Overlapped] 0 +
call ebx  +
test eax eax +
jnz loc_1019AA0  +
push offset aFailureGetqueu  +
call sub_101A030  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
push offset aFailureGetqu_0  +
call sub_101A030  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+FileSizeHigh] +
movzx eax word ptr [edi] +
xor ebx ebx +
push eax  +
mov [ebp+var_8] ebx +
mov [ebp+CompletionPort] ebx +
call ds:iswascii  +
add esp 4 +
test eax eax +
mov eax edi +
jnz loc_1019B5E  +
mov eax offset aUnprintable +
mov esi ds:wprintf +
push eax  +
push offset aFile_64ls  +
call esi  +
mov eax [ebp+arg_C] +
add esp 8 +
cmp eax ebx +
jz loc_1019B85  +
mov ecx [ebp+arg_10] +
push eax  +
push ecx  +
push offset aPauseThrottleU  +
call esi  +
add esp 0Ch +
push offset asc_100B720  +
call esi  +
mov edx [ebp+hObject] +
add esp 4 +
push edx  +
call sub_1019560  +
mov esi ds:IsProcessorFeaturePresent +
push 6  +
call esi  +
test eax eax +
setnz al  +
push 0Ah  +
mov byte_101D80D al +
call esi  +
push 1A000h  +
test eax eax +
setnz cl  +
push ebx  +
push offset unk_101D818  +
mov byte_101D80C cl +
mov dword_101D808 ebx +
mov dword_1037818 ebx +
mov Addend ebx +
mov dword_103781C ebx +
mov dwMilliseconds ebx +
mov dword_101D7E4 ebx +
mov dword_101D7E8 ebx +
mov dword_101D7EC ebx +
mov dword_101D7F0 ebx +
mov dword_101D7F4 ebx +
mov dword_101D7F8 ebx +
mov dword_101D7FC ebx +
mov dword_101D800 ebx +
call memset  +
add esp 0Ch +
mov eax offset dword_101D874 +
mov dword ptr [eax] 10000000h +
add eax 68h +
cmp eax 1037874h +
jl loc_1019C21  +
push ebx  +
push 68000000h  +
push 3  +
push ebx  +
push 3  +
push 80000000h  +
push edi  +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1019C5F  +
push offset aFailureCreatef  +
call sub_101A030  +
jmp loc_1019FA4  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
call ds:CreateIoCompletionPort  +
mov [ebp+CompletionPort] eax +
cmp eax ebx +
jnz loc_1019C7F  +
push offset aFailureCreatei  +
call sub_101A030  +
jmp loc_1019F51  +
mov edi ds:CreateThread +
mov esi offset dword_101D7E4 +
lea ebx [ebx+0] +
mov edx [ebp+CompletionPort] +
push ebx  +
push ebx  +
push edx  +
push offset StartAddress  +
push ebx  +
push ebx  +
call edi  +
mov [esi] eax +
cmp eax ebx +
jz loc_1019CDE  +
add esi 4 +
cmp esi offset dword_101D804 +
jl loc_1019C90  +
mov ecx [ebp+hObject] +
lea eax [ebp+FileSizeHigh] +
push eax  +
push ecx  +
call ds:GetFileSize  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_1019CED  +
call ds:GetLastError  +
test eax eax +
jz loc_1019CED  +
push offset aFailureGetfile  +
call sub_101A030  +
jmp loc_1019F51  +
push offset aFailureCreatet  +
call sub_101A030  +
jmp loc_1019F51  +
mov ecx [ebp+arg_8] +
cmp ecx ebx +
jz loc_1019D19  +
mov eax dword_101D814 +
push ebx  +
cdq   +
push ecx  +
push edx  +
push eax  +
call __allmul  +
mov edi [ebp+FileSizeHigh] +
cmp edx edi +
ja loc_1019D1C  +
jb loc_1019D10  +
cmp eax esi +
jnb loc_1019D1C  +
mov edi edx +
mov esi eax +
mov [ebp+FileSizeHigh] edi +
jmp loc_1019D1C  +
mov edi [ebp+FileSizeHigh] +
mov ecx dword_101D7E0 +
shr esi cl +
mov ecx dword_101D7DC +
shl edi cl +
mov ecx dword_101D804 +
add esi edi +
lea eax [ecx+esi-1] +
cdq   +
idiv  ecx +
mov dword_101D808 esi +
mov dword_1037818 eax +
call ds:GetTickCount  +
mov ebx ds:VirtualAlloc +
mov [ebp+arg_8] eax +
mov edi offset unk_101D82C +
lea ebx [ebx+0] +
mov ecx dword_101D814 +
mov eax dword_101D804 +
mov edx [ebp+hObject] +
imul eax ecx +
mov [edi+50h] edx +
cmp eax ecx +
jb loc_1019F30  +
push 4  +
push 1000h  +
push eax  +
push 0  +
call ebx  +
mov [edi] eax +
test eax eax +
jz loc_1019F37  +
push 0  +
push 0  +
push 0  +
push 0  +
call ds:CreateEventW  +
mov [edi+4Ch] eax +
test eax eax +
jz loc_1019F3E  +
lea esi [edi-14h] +
call sub_1019790  +
add edi 68h +
cmp edi offset dword_103782C +
jl loc_1019D60  +
push offset aChecksumStatus  +
call sub_101A0A0  +
mov edx hHandle +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_C] +
mov edi ds:WaitForSingleObjectEx +
push 0  +
push 0C8h  +
push edx  +
mov dwMilliseconds eax +
mov dword_103781C ecx +
call edi  +
cmp eax 102h +
jnz loc_1019E21  +
mov eax Addend +
imul eax eax +
cdq   +
idiv  dword_1037818 +
push eax  +
call sub_101A110  +
mov eax hHandle +
push 0  +
push 0C8h  +
push eax  +
call edi  +
cmp eax 102h +
jz loc_1019DF6  +
test eax eax +
jnz loc_1019F45  +
mov esi offset unk_101D8A8 +
mov edi edi +
mov ecx [esi+38h] +
push 0  +
push 0FFFFFFFFh  +
push ecx  +
call edi  +
test eax eax +
jnz loc_1019F45  +
mov edx [esi] +
add dword_101D840 edx +
mov eax [esi+4] +
add dword_101D844 eax +
mov ecx [esi+8] +
add dword_101D848 ecx +
mov edx [esi+0Ch] +
add dword_101D84C edx +
mov eax [esi+10h] +
add dword_101D850 eax +
mov eax [esi+1Ch] +
mov edx dword_101D85C +
mov ecx [esi+18h] +
cmp edx eax +
ja loc_1019E9D  +
jb loc_1019E8A  +
mov edx dword_101D858 +
cmp edx ecx +
jnb loc_1019E9D  +
mov dword_101D858 ecx +
mov dword_101D85C eax +
mov eax [esi+20h] +
mov dword_101D860 eax +
mov ecx [esi+28h] +
add dword_101D868 ecx +
mov edx [esi+2Ch] +
add dword_101D86C edx +
mov eax [esi+30h] +
cmp dword_101D870 eax +
jnb loc_1019EBF  +
mov dword_101D870 eax +
mov eax [esi+34h] +
cmp dword_101D874 eax +
jbe loc_1019ECF  +
mov dword_101D874 eax +
add esi 68h +
cmp esi 1037840h +
jl loc_1019E30  +
call ds:GetTickCount  +
mov esi eax +
call sub_101A170  +
sub esi [ebp+arg_8] +
mov edi offset dword_101D840 +
push esi  +
call sub_1019650  +
cmp dword_101D844 0 +
mov ecx 1 +
jnz loc_1019F13  +
cmp dword_101D850 0 +
mov [ebp+var_8] ecx +
jz loc_1019F1A  +
mov [ebp+var_8] 0 +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_1019F4F  +
xor edx edx +
cmp [ebp+var_8] edx +
mov [ebp+var_8] ecx +
setz dl  +
mov [eax] edx +
jmp loc_1019F4F  +
push offset aFailureVirtu_0  +
jmp loc_1019F4A  +
push offset aFailureVirtual  +
jmp loc_1019F4A  +
push offset aFailureCreatee  +
jmp loc_1019F4A  +
push offset aFailureWaitfor  +
call sub_101A030  +
xor ebx ebx +
cmp [ebp+CompletionPort] ebx +
jz loc_1019FA4  +
mov esi ds:PostQueuedCompletionStatus +
mov edi ds:Sleep +
mov ebx offset dword_101D7E4 +
cmp dword ptr [ebx] 0 +
jz loc_1019F97  +
mov eax [ebp+CompletionPort] +
push 0  +
push 0  +
push 0  +
push eax  +
call esi  +
test eax eax +
jnz loc_1019F97  +
lea esp [esp+0] +
push 3E8h  +
call edi  +
mov ecx [ebp+CompletionPort] +
push 0  +
push 0  +
push 0  +
push ecx  +
call esi  +
test eax eax +
jz loc_1019F80  +
add ebx 4 +
cmp ebx offset dword_101D804 +
jl loc_1019F67  +
xor ebx ebx +
mov edi ds:WaitForSingleObject +
mov esi offset dword_101D7E4 +
nop   +
mov eax [esi] +
cmp eax ebx +
jz loc_1019FC4  +
push 0FFFFFFFFh  +
push eax  +
call edi  +
mov edx [esi] +
push edx  +
call ds:CloseHandle  +
add esi 4 +
cmp esi offset dword_101D804 +
jl loc_1019FB0  +
mov eax [ebp+hObject] +
cmp eax 0FFFFFFFFh +
jz loc_1019FDE  +
push eax  +
call ds:CloseHandle  +
mov eax [ebp+CompletionPort] +
cmp eax ebx +
jz loc_1019FEC  +
push eax  +
call ds:CloseHandle  +
mov edi ds:VirtualFree +
mov esi offset hHandle +
mov eax [esi-4Ch] +
cmp eax ebx +
jz loc_101A007  +
push 8000h  +
push ebx  +
push eax  +
call edi  +
mov eax [esi] +
cmp eax ebx +
jz loc_101A014  +
push eax  +
call ds:CloseHandle  +
add esi 68h +
cmp esi 1037878h +
jl loc_1019FF7  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 0  +
push 0  +
lea eax [ebp+hMem] +
push eax  +
push 400h  +
mov [ebp+hMem] 0 +
call ds:GetLastError  +
push eax  +
push 0  +
push 1100h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_101A081  +
mov ecx [ebp+hMem] +
mov edx [ebp+arg_0] +
mov eax ds:_iob +
push ecx  +
push edx  +
add eax 40h +
push offset aLsLs  +
push eax  +
call ds:fwprintf  +
add esp 10h +
mov ecx [ebp+hMem] +
push ecx  +
call ds:LocalFree  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov edi edi +
mov cx [eax] +
add eax 2 +
test cx cx +
jnz loc_101A0B0  +
sub eax esi +
mov esi ds:wprintf +
sar eax 1 +
mov ecx 33h +
sub ecx eax +
shr ecx 1 +
push edx  +
add ecx eax +
push ecx  +
push offset aLs  +
call esi  +
push offset a010203040506_0  +
call esi  +
push offset asc_100BE78  +
call esi  +
push offset asc_1009C08  +
call esi  +
add esp 18h +
mov dword_1037820 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
jl loc_101A122  +
mov eax 64h +
sub eax dword_1037820 +
cmp eax 2 +
jl loc_101A158  +
push esi  +
shr eax 1 +
push edi  +
mov edi ds:wprintf +
mov esi eax +
lea esp [esp+0] +
push offset a_  +
call edi  +
add dword_1037820 2 +
add esp 4 +
sub esi 1 +
jnz loc_101A140  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax 64h +
sub eax dword_1037820 +
push edi  +
cmp eax 2 +
mov edi ds:wprintf +
jl loc_101A1A7  +
shr eax 1 +
push esi  +
mov esi eax +
lea esp [esp+0] +
push offset a_  +
call edi  +
add dword_1037820 2 +
add esp 4 +
sub esi 1 +
jnz loc_101A190  +
pop esi  +
push offset a__0  +
call edi  +
add esp 4 +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
mov edx [ebp+0Ch] +
xor eax 89ABCDEFh +
add ecx 18h +
push esi  +
mov esi [ecx-18h] +
xor esi [ecx-14h] +
sub edx 20h +
xor esi [ecx-10h] +
add ecx 20h +
xor esi [ecx-2Ch] +
xor esi [ecx-28h] +
xor esi [ecx-24h] +
xor esi [ecx-1Ch] +
xor esi [ecx-20h] +
xor eax esi +
test edx edx +
jnz loc_101A1D6  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx] +
mov edx [ebp+0Ch] +
xor eax 89ABCDEFh +
add ecx 1Ch +
push esi  +
mov esi [ecx-1Ch] +
xor esi [ecx-18h] +
prefetchnta byte ptr [ecx+24h]  +
xor esi [ecx-14h] +
sub edx 20h +
xor esi [ecx-10h] +
add ecx 20h +
xor esi [ecx-2Ch] +
xor esi [ecx-28h] +
xor esi [ecx-24h] +
xor esi [ecx-20h] +
xor eax esi +
test edx edx +
jnz loc_101A226  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
mov ebx esp +
sub esp 8 +
and esp 0FFFFFFF0h +
add esp 4 +
push ebp  +
mov ebp [ebx+4] +
mov [esp+4] ebp +
mov ebp esp +
mov eax [ebx+8] +
mov edx [eax] +
mov ecx [ebx+0Ch] +
sub esp 1Ch +
add ecx eax +
xor edx 89ABCDEFh +
push esi  +
pxor xmm0 xmm0 +
add eax 10h +
jmp loc_101A2A0  +
movdqa xmm2 oword ptr [eax] +
movdqa xmm1 oword ptr [eax-10h] +
movdqa xmm3 oword ptr [eax+20h] +
prefetchnta byte ptr [eax+0F0h]  +
pxor xmm1 xmm2 +
movdqa xmm2 oword ptr [eax+10h] +
pxor xmm2 xmm3 +
movdqa xmm3 oword ptr [eax+60h] +
pxor xmm1 xmm2 +
movdqa xmm2 oword ptr [eax+40h] +
pxor xmm0 xmm1 +
movdqa xmm1 oword ptr [eax+30h] +
pxor xmm1 xmm2 +
movdqa xmm2 oword ptr [eax+50h] +
sub eax 0FFFFFF80h +
lea esi [eax-10h] +
pxor xmm2 xmm3 +
pxor xmm1 xmm2 +
pxor xmm0 xmm1 +
cmp esi ecx +
jb loc_101A2A0  +
movdqa oword ptr [ebp-10h] xmm0 +
mov eax [ebp-4] +
xor eax [ebp-8] +
pop esi  +
xor eax [ebp-0Ch] +
xor eax [ebp-10h] +
xor eax edx +
mov esp ebp +
pop ebp  +
mov esp ebx +
pop ebx  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+0Ch] +
mov edx [ebp+8] +
shr eax 2 +
push ebx  +
mov [ebp-18h] eax +
xor eax eax +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+8] eax +
mov [ebp-4] eax +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
mov edi 0FF800000h +
mov [ebp-8] eax +
mov [ebp-0Ch] eax +
cmp [ebp+14h] al +
jnz loc_101A364  +
mov ecx [edx+eax*4] +
mov [ebp-8] ecx +
mov ecx [edx+eax*4+4] +
mov [ebp-0Ch] ecx +
mov esi [edx+eax*4+8] +
mov ecx [edx+eax*4+0Ch] +
xor ecx esi +
xor ecx [ebp-0Ch] +
add eax 8 +
xor ecx [ebp-8] +
mov esi ecx +
shr esi 10h +
xor esi ecx +
mov ecx esi +
shr ecx 8 +
xor ecx esi +
mov esi [edx+eax*4-10h] +
xor esi [ebp-8] +
and ecx 0FFh +
xor [ebp+8] esi +
movsx ecx ds:byte_100C000[ecx] +
mov esi [edx+eax*4-0Ch] +
xor esi [ebp-0Ch] +
and ecx edi +
xor [ebp-4] esi +
mov esi [edx+eax*4-8] +
xor esi [edx+eax*4-18h] +
xor ebx ecx +
xor [ebp-14h] esi +
mov ecx [edx+eax*4-4] +
mov esi ecx +
xor ecx [edx+eax*4-8] +
xor esi [edx+eax*4-14h] +
xor ecx [edx+eax*4-0Ch] +
xor [ebp-10h] esi +
xor ecx [edx+eax*4-10h] +
sub edi 7FFF80h +
mov esi ecx +
shr esi 10h +
xor esi ecx +
mov ecx esi +
shr ecx 8 +
xor ecx esi +
and ecx 0FFh +
movsx ecx ds:byte_100C000[ecx] +
and ecx edi +
mov [ebp+14h] ebx +
xor ebx ecx +
sub edi 7FFF80h +
cmp eax [ebp-18h] +
jb loc_101A357  +
mov ecx [ebp-4] +
xor ecx [ebp+8] +
mov edx [ebp-10h] +
mov edi [ebp-14h] +
mov eax ecx +
shr eax 10h +
xor eax ecx +
mov esi edx +
xor esi edi +
xor edi [ebp+8] +
xor edx [ebp-4] +
mov ecx esi +
shr ecx 10h +
xor ecx esi +
mov esi edi +
shr esi 10h +
xor esi edi +
mov [ebp+14h] esi +
mov [ebp+8] edi +
mov esi edx +
shr esi 10h +
xor esi edx +
mov edi esi +
shr edi 8 +
xor edi esi +
and edi 0FFh +
movsx esi ds:byte_100C000[edi] +
mov edi ecx +
shr edi 8 +
xor edi ecx +
and edi 0FFh +
movsx ecx ds:byte_100C000[edi] +
and ecx 40h +
and esi 20h +
or esi ecx +
mov ecx [ebp+14h] +
mov edi ecx +
xor edx [ebp+8] +
shr edi 8 +
xor edi ecx +
and edi 0FFh +
movsx ecx ds:byte_100C000[edi] +
and ecx 200000h +
or esi ecx +
mov ecx eax +
shr ecx 8 +
xor ecx eax +
and ecx 0FFh +
movsx eax ds:byte_100C000[ecx] +
and eax 400000h +
or esi eax +
or ebx esi +
mov ecx edx +
xor esi esi +
mov edx 0FFFF0000h +
mov eax 1 +
lea ebx [ebx+0] +
mov edi eax +
and edi ecx +
neg edi  +
sbb edi edi +
neg edi  +
neg edi  +
and edi edx +
add eax eax +
xor esi edi +
sub edx 0FFFFh +
test eax eax +
jnz loc_101A4C0  +
mov eax [ebp+0Ch] +
xor ecx [ebp+10h] +
mov edx eax +
shl edx 13h +
dec edx  +
and edx ebx +
shl eax 13h +
xor edx esi +
dec eax  +
and eax ebx +
and edx 1F001Fh +
xor edx eax +
xor eax eax +
xor esi esi +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
shr eax 2 +
push ebx  +
mov [ebp-18h] eax +
xor eax eax +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+8] eax +
mov [ebp-4] eax +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
mov edi 0FF800000h +
mov [ebp-8] eax +
mov [ebp-0Ch] eax +
cmp [ebp+14h] al +
jnz loc_101A554  +
mov edx [ecx+eax*4] +
mov [ebp-8] edx +
mov edx [ecx+eax*4+4] +
mov [ebp-0Ch] edx +
mov esi [ecx+eax*4+8] +
mov edx [ecx+eax*4+0Ch] +
xor edx esi +
xor edx [ebp-0Ch] +
prefetchnta byte ptr [ecx+eax*4+80h]  +
xor edx [ebp-8] +
add eax 8 +
mov esi edx +
shr esi 10h +
xor esi edx +
mov edx esi +
shr edx 8 +
xor edx esi +
mov esi [ecx+eax*4-10h] +
xor esi [ebp-8] +
and edx 0FFh +
xor [ebp+8] esi +
movsx edx ds:byte_100C000[edx] +
mov esi [ecx+eax*4-0Ch] +
xor esi [ebp-0Ch] +
and edx edi +
xor [ebp-4] esi +
mov esi [ecx+eax*4-8] +
xor esi [ecx+eax*4-18h] +
xor ebx edx +
xor [ebp-14h] esi +
mov edx [ecx+eax*4-4] +
mov esi edx +
xor edx [ecx+eax*4-8] +
xor esi [ecx+eax*4-14h] +
xor edx [ecx+eax*4-0Ch] +
xor [ebp-10h] esi +
xor edx [ecx+eax*4-10h] +
sub edi 7FFF80h +
mov esi edx +
shr esi 10h +
xor esi edx +
mov edx esi +
shr edx 8 +
xor edx esi +
and edx 0FFh +
movsx edx ds:byte_100C000[edx] +
and edx edi +
mov [ebp+14h] ebx +
xor ebx edx +
sub edi 7FFF80h +
cmp eax [ebp-18h] +
jb loc_101A547  +
mov ecx [ebp-4] +
xor ecx [ebp+8] +
mov edx [ebp-10h] +
mov edi [ebp-14h] +
mov eax ecx +
shr eax 10h +
xor eax ecx +
mov esi edx +
xor esi edi +
xor edi [ebp+8] +
xor edx [ebp-4] +
mov ecx esi +
shr ecx 10h +
xor ecx esi +
mov esi edi +
shr esi 10h +
xor esi edi +
mov [ebp+14h] esi +
mov [ebp+8] edi +
mov esi edx +
shr esi 10h +
xor esi edx +
mov edi esi +
shr edi 8 +
xor edi esi +
and edi 0FFh +
movsx esi ds:byte_100C000[edi] +
mov edi ecx +
shr edi 8 +
xor edi ecx +
and edi 0FFh +
movsx ecx ds:byte_100C000[edi] +
and ecx 40h +
and esi 20h +
or esi ecx +
mov ecx [ebp+14h] +
mov edi ecx +
xor edx [ebp+8] +
shr edi 8 +
xor edi ecx +
and edi 0FFh +
movsx ecx ds:byte_100C000[edi] +
and ecx 200000h +
or esi ecx +
mov ecx eax +
shr ecx 8 +
xor ecx eax +
and ecx 0FFh +
movsx eax ds:byte_100C000[ecx] +
and eax 400000h +
or esi eax +
or ebx esi +
mov ecx edx +
xor esi esi +
mov edx 0FFFF0000h +
mov eax 1 +
mov edi eax +
and edi ecx +
neg edi  +
sbb edi edi +
neg edi  +
neg edi  +
and edi edx +
add eax eax +
xor esi edi +
sub edx 0FFFFh +
test eax eax +
jnz loc_101A6B2  +
mov eax [ebp+0Ch] +
xor ecx [ebp+10h] +
mov edx eax +
shl edx 13h +
dec edx  +
and edx ebx +
shl eax 13h +
xor edx esi +
dec eax  +
and eax ebx +
and edx 1F001Fh +
xor edx eax +
xor eax eax +
xor esi esi +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebx  +
mov ebx esp +
sub esp 8 +
and esp 0FFFFFF80h +
add esp 4 +
push ebp  +
mov ebp [ebx+4] +
mov [esp+4] ebp +
mov ebp esp +
sub esp 178h +
mov eax dword_101CDB0 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebx+0Ch] +
mov ecx [ebx+8] +
shr eax 4 +
mov [ebp-108h] eax +
xor eax eax +
push esi  +
pxor xmm6 xmm6 +
push edi  +
mov [ebp-10Ch] eax +
movdqa oword ptr [ebp-30h] xmm6 +
movdqa oword ptr [ebp-40h] xmm6 +
movdqa oword ptr [ebp-20h] xmm6 +
mov edi 0FE000000h +
cmp [ebx+14h] al +
jz loc_101A77C  +
movdqa xmm1 oword ptr [ecx] +
movdqa xmm0 xmm6 +
punpckhqdq xmm0 xmm1 +
jmp loc_101A786  +
mov edx eax +
shl edx 4 +
movdqa xmm0 oword ptr [edx+ecx] +
lea edx [eax+20h] +
shl edx 4 +
prefetchnta byte ptr [edx+ecx]  +
add edx ecx +
lea edx [eax+1] +
shl edx 4 +
movdqa xmm1 oword ptr [edx+ecx] +
movdqa oword ptr [ebp-50h] xmm0 +
pxor xmm0 xmm1 +
lea edx [eax+2] +
shl edx 4 +
movdqa xmm2 oword ptr [edx+ecx] +
pxor xmm0 xmm2 +
lea edx [eax+3] +
shl edx 4 +
movdqa xmm3 oword ptr [edx+ecx] +
pxor xmm0 xmm3 +
pshufd xmm4 xmm0 +
pxor xmm0 xmm4 +
pshufd xmm4 xmm0 +
pxor xmm0 xmm4 +
movd edx xmm0 +
mov esi edx +
shr esi 10h +
xor esi edx +
mov edx esi +
shr edx 8 +
xor edx esi +
and edx 0FFh +
movsx edx ds:byte_100C000[edx] +
and edx edi +
xor [ebp-10Ch] edx +
pxor xmm6 oword ptr [ebp-50h] +
lea edx [eax+4] +
shl edx 4 +
movdqa xmm0 oword ptr [edx+ecx] +
lea edx [eax+5] +
shl edx 4 +
movdqa xmm4 oword ptr [edx+ecx] +
lea edx [eax+6] +
shl edx 4 +
movdqa xmm5 oword ptr [edx+ecx] +
lea edx [eax+7] +
shl edx 4 +
movdqa xmm7 oword ptr [edx+ecx] +
movdqa oword ptr [ebp-60h] xmm7 +
movdqa xmm7 oword ptr [ebp-30h] +
pxor xmm7 xmm1 +
movdqa xmm1 oword ptr [ebp-40h] +
pxor xmm1 xmm2 +
pxor xmm1 xmm5 +
movdqa xmm2 xmm1 +
movdqa xmm1 oword ptr [ebp-20h] +
pxor xmm1 xmm3 +
pxor xmm6 xmm0 +
movdqa oword ptr [ebp-20h] xmm1 +
movdqa xmm1 oword ptr [ebp-60h] +
movdqa xmm3 oword ptr [ebp-20h] +
pxor xmm0 xmm4 +
pxor xmm0 xmm5 +
pxor xmm0 xmm1 +
pxor xmm3 xmm1 +
pshufd xmm1 xmm0 +
pxor xmm0 xmm1 +
pshufd xmm1 xmm0 +
pxor xmm0 xmm1 +
movd esi xmm0 +
mov edx esi +
shr edx 10h +
xor edx esi +
mov esi edx +
shr esi 8 +
xor esi edx +
sub edi 1FFFE00h +
and esi 0FFh +
movsx edx ds:byte_100C000[esi] +
pxor xmm7 xmm4 +
movdqa oword ptr [ebp-30h] xmm7 +
movdqa oword ptr [ebp-40h] xmm2 +
movdqa oword ptr [ebp-20h] xmm3 +
and edx edi +
xor [ebp-10Ch] edx +
add eax 8 +
sub edi 1FFFE00h +
cmp eax [ebp-108h] +
jb loc_101A77C  +
xor esi esi +
movdqa oword ptr [ebp-100h] xmm6 +
movdqa oword ptr [ebp-0F0h] xmm7 +
movdqa oword ptr [ebp-0E0h] xmm2 +
movdqa oword ptr [ebp-0D0h] xmm3 +
mov [ebp-104h] esi +
mov edx 0FFA00040h +
lea ecx [ebp-0F8h] +
mov dword ptr [ebp-108h] 4 +
lea ecx [ecx+0] +
mov edi [ecx-8] +
mov eax edi +
xor esi edi +
shr eax 10h +
xor eax edi +
mov edi eax +
shr edi 8 +
xor edi eax +
and edi 0FFh +
movsx eax ds:byte_100C000[edi] +
lea edi [edx+3FFFC0h] +
and eax edi +
xor [ebp-104h] eax +
mov edi [ecx-4] +
mov eax edi +
xor esi edi +
shr eax 10h +
xor eax edi +
mov edi eax +
shr edi 8 +
xor edi eax +
and edi 0FFh +
movsx eax ds:byte_100C000[edi] +
lea edi [edx+1FFFE0h] +
and eax edi +
xor [ebp-104h] eax +
mov edi [ecx] +
mov eax edi +
xor esi edi +
shr eax 10h +
xor eax edi +
mov edi eax +
shr edi 8 +
xor edi eax +
and edi 0FFh +
movsx eax ds:byte_100C000[edi] +
mov edi [ecx+4] +
and eax edx +
xor [ebp-104h] eax +
mov eax edi +
xor esi edi +
shr eax 10h +
xor eax edi +
mov edi eax +
shr edi 8 +
xor edi eax +
and edi 0FFh +
movsx eax ds:byte_100C000[edi] +
lea edi [edx-1FFFE0h] +
and eax edi +
mov edi [ebp-104h] +
xor edi eax +
add ecx 10h +
sub edx 7FFF80h +
sub dword ptr [ebp-108h] 1 +
mov [ebp-104h] edi +
jnz loc_101A920  +
mov dword ptr [ebp-108h] 0 +
mov dword ptr [ebp-104h] 0FFFF0000h +
mov eax 1 +
jmp loc_101AA10  +
mov ecx [ebp-108h] +
mov edx eax +
and edx esi +
neg edx  +
sbb edx edx +
and edx [ebp-104h] +
sub dword ptr [ebp-104h] 0FFFFh +
xor ecx edx +
add eax eax +
mov [ebp-108h] ecx +
test eax eax +
jnz loc_101AA10  +
mov edx [ebx+0Ch] +
xor esi [ebx+10h] +
shl edx 13h +
dec edx  +
and edx [ebp-10Ch] +
and ecx 1F001Fh +
and edx 0FE00FE00h +
or edx ecx +
and edi 1E001E0h +
xor ecx ecx +
or edx edi +
or edx ecx +
mov ecx [ebp-4] +
or eax esi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10140F3  +
mov esp ebp +
pop ebp  +
mov esp ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_10] +
mov eax [ebp+arg_8] +
mov edx [ebp+arg_C] +
xor edx [ebp+arg_4] +
xor eax ecx +
mov ecx [ebp+arg_0] +
push esi  +
mov esi eax +
shr esi 10h +
lea ecx ds:0FFFFFFFFh[ecx*8] +
xor esi eax +
and esi ecx +
cmp ecx esi +
jnz loc_101AADD  +
xor esi esi +
mov eax 1 +
lea ecx [esi+20h] +
test eax edx +
jz loc_101AACA  +
inc esi  +
rol eax 1 +
sub ecx 1 +
jnz loc_101AAC5  +
cmp esi 1 +
jnz loc_101AADD  +
mov al 1 +
pop esi  +
pop ebp  +
retn 14h  +
xor al al +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax ecx +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
and ecx 80000007h +
push esi  +
mov esi [ebp+arg_0] +
jns loc_101AB14  +
dec ecx  +
or ecx 0FFFFFFF8h +
inc ecx  +
mov dl 1 +
shl dl cl +
xor [eax+esi] dl +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
cmp ecx 2000h +
setbe dl  +
mov [ebp+var_1] dl +
test dl dl +
jnz loc_101AB4B  +
shr ecx 2 +
movzx edx dl +
neg edx  +
sbb edx edx +
sub eax 13h +
push ebx  +
and edx 0FFFFFFFDh +
push esi  +
add edx 4 +
xor esi esi +
mov [ebp+var_10] ecx +
xor ecx ecx +
neg eax  +
sbb eax eax +
and eax 0FFFFFED2h +
add eax 12Dh +
mov [ebp+var_20] eax +
or eax 0FFFFFFFFh +
push edi  +
mov [ebp+var_C] edx +
mov [ebp+var_30] esi +
mov [ebp+var_2C] ecx +
mov [ebp+var_28] ecx +
mov [ebp+var_24] ecx +
mov [ebp+var_1C] eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
mov [ebp+var_8] eax +
cmp edx esi +
jbe loc_101AC4E  +
lea esp [esp+0] +
mov eax [ebp+esi*8+arg_30] +
mov ecx [ebp+esi*8+arg_10] +
mov ebx [ebp+esi*8+arg_34] +
mov edi [ebp+esi*8+arg_14] +
cmp ecx eax +
jnz loc_101ABBC  +
cmp edi ebx +
jnz loc_101ABBC  +
xor eax eax +
jmp loc_101ABEE  +
push ebx  +
push eax  +
mov eax [ebp+var_10] +
push edi  +
push ecx  +
push eax  +
call sub_101AA90  +
test al al +
jz loc_101ABE6  +
xor edi ebx +
and edi 0FFFFh +
cmp [ebp+esi*4+var_20] edi +
jz loc_101ABE6  +
mov [ebp+esi*4+var_20] edi +
mov eax 0FFFFFFF3h +
jmp loc_101ABEB  +
mov eax 0FFFFFFE3h +
mov edx [ebp+var_C] +
mov [ebp+esi*4+var_30] eax +
cmp eax 0FFFFFFE3h +
jz loc_101AC9E  +
cmp eax 0FFFFFFF3h +
jnz loc_101AC45  +
cmp [ebp+var_8] 0FFFFFFFFh +
jnz loc_101AC45  +
mov eax [ebp+esi*4+var_20] +
mov ecx esi +
imul ecx [ebp+var_10] +
cmp [ebp+var_1] 0 +
lea ecx [eax+ecx*8] +
mov [ebp+var_8] ecx +
jnz loc_101AC45  +
test esi esi +
jnz loc_101AC45  +
cmp ecx 140h +
jb loc_101AC45  +
cmp ecx 200h +
jnb loc_101AC45  +
mov edx ecx +
add edx 0FFFFFF00h +
push edx  +
lea eax [ebp+arg_10] +
push eax  +
call sub_101AAF0  +
mov edx [ebp+var_C] +
inc esi  +
cmp esi edx +
jb loc_101ABA0  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
mov byte ptr [eax] 1 +
mov eax [ebp+var_8] +
xor esi esi +
cmp [ebp+arg_4] 0 +
mov [ecx] eax +
jz loc_101ACA4  +
mov edi [ebp+arg_0] +
cmp esi edx +
jnb loc_101ACA4  +
cmp [ebp+esi*4+var_30] 0FFFFFFF3h +
jnz loc_101AC98  +
mov ecx [ebp+esi*4+var_20] +
mov eax ecx +
cdq   +
and edx 7 +
add eax edx +
sar eax 3 +
and ecx 80000007h +
jns loc_101AC8E  +
dec ecx  +
or ecx 0FFFFFFF8h +
inc ecx  +
mov dl 1 +
shl dl cl +
xor [edi+eax] dl +
mov edx [ebp+var_C] +
inc esi  +
add edi [ebp+var_10] +
jmp loc_101AC67  +
mov ecx [ebp+arg_8] +
mov byte ptr [ecx] 0 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 50h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1019880  +
test al al +
jz loc_101ACE5  +
call sub_1019890  +
test al al +
jz loc_101ACDE  +
mov eax offset loc_101A260 +
jmp loc_101ACEA  +
mov eax offset loc_101A210 +
jmp loc_101ACEA  +
mov eax offset loc_101A1C0 +
mov off_101D0DC eax +
pop ebp  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1019880  +
test al al +
jz loc_101AD25  +
call sub_1019890  +
test al al +
jz loc_101AD1E  +
mov eax offset loc_101A710 +
jmp loc_101AD2A  +
mov eax offset loc_101A510 +
jmp loc_101AD2A  +
mov eax offset loc_101A320 +
mov off_101D0E0 eax +
pop ebp  +
jmp eax  +
***
cmp dword_101D814 2000h +
mov edx [ecx] +
mov [eax] edx +
ja loc_101AD6B  +
mov ecx [ecx+4] +
mov [eax+4] ecx +
xor ecx ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
retn   +
mov edx [ecx+4] +
mov [eax+4] edx +
mov edx [ecx+28h] +
mov [eax+8] edx +
mov edx [ecx+2Ch] +
mov [eax+0Ch] edx +
mov edx [ecx+30h] +
mov [eax+10h] edx +
mov edx [ecx+34h] +
mov [eax+14h] edx +
mov edx [ecx+38h] +
mov ecx [ecx+3Ch] +
mov [eax+18h] edx +
mov [eax+1Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 13h +
jnz loc_101ADB4  +
call sub_101AD40  +
pop ebp  +
retn 4  +
mov ecx [ecx] +
mov [eax] ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
cmp [ebp+arg_4] 13h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi eax +
mov edi ecx +
jnz loc_101AED8  +
mov al [edi+25h] +
shr al 5 +
and al 1 +
jz loc_101AEBE  +
xor eax eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
cmp esi 2000h +
jbe loc_101AE93  +
mov ecx [ebp+arg_8] +
push eax  +
push ecx  +
shr esi 2 +
push esi  +
lea edx [esi+edi] +
push edx  +
call off_101D0E0  +
push 0  +
mov [ebp+var_18] eax +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
lea ecx [edi+esi*2] +
push ecx  +
mov [ebp+var_14] edx +
call off_101D0E0  +
push 0  +
mov [ebp+var_C] edx +
mov edx [ebp+arg_8] +
mov [ebp+var_10] eax +
push edx  +
lea eax [edi+esi*2] +
push esi  +
add eax esi +
push eax  +
call off_101D0E0  +
cmp [ebp+arg_C] 0 +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
jz loc_101AE93  +
mov ecx [ebp+var_18] +
mov [edi+28h] ecx +
mov ecx [ebp+var_14] +
mov [edi+2Ch] ecx +
mov ecx [ebp+var_10] +
mov [edi+30h] ecx +
mov ecx [ebp+var_C] +
mov [edi+34h] ecx +
mov [edi+38h] eax +
mov [edi+3Ch] edx +
mov edx [ebp+arg_8] +
push 1  +
push edx  +
push esi  +
push edi  +
call off_101D0E0  +
mov edi ebx +
mov [ebp+var_20] eax +
mov ecx 8 +
lea esi [ebp+var_20] +
mov [ebp+var_1C] edx +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
push esi  +
push edi  +
call off_101D0DC  +
xor ecx ecx +
or ecx [ebp+arg_8] +
xor edx edx +
or eax edx +
mov [ebx] eax +
mov [ebx+4] ecx +
xor eax eax +
jmp loc_101AEE7  +
push esi  +
push edi  +
call off_101D0DC  +
mov [ebx] eax +
xor eax eax +
mov [ebx+4] eax +
pop edi  +
mov [ebx+1Ch] eax +
mov [ebx+18h] eax +
mov [ebx+14h] eax +
mov [ebx+10h] eax +
mov [ebx+0Ch] eax +
mov [ebx+8] eax +
pop esi  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov ecx [ebp+arg_20] +
sub esp 24h +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov byte ptr [eax] 0 +
push edi  +
mov dword ptr [ecx] 0FFFFFFFFh +
cmp ebx 13h +
jnz loc_101AF41  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_24] +
call sub_101AD40  +
xor eax eax +
jmp loc_101AF60  +
mov edx [ebp+arg_0] +
mov eax [edx] +
mov [ebp+var_24] eax +
xor eax eax +
mov [ebp+var_20] eax +
mov [ebp+var_1C] eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov edi [ebp+arg_14] +
push eax  +
mov eax [ebp+arg_4] +
mov ecx 8 +
lea esi [ebp+var_24] +
movs   +
mov ecx [ebp+arg_C] +
push ecx  +
mov ecx [ebp+arg_0] +
push ebx  +
lea edx [ebp+var_24] +
push edx  +
call sub_101ADE0  +
mov esi eax +
mov [ebp+var_4] eax +
mov eax [ebp+arg_18] +
mov ecx 8 +
mov edi eax +
movs   +
cmp ebx 13h +
jnz loc_101AFA9  +
mov ecx [ebp+arg_0] +
mov cl [ecx+25h] +
shr cl 5 +
and cl 1 +
mov byte ptr [ebp+arg_8+3] cl +
jmp loc_101AFAD  +
mov byte ptr [ebp+arg_8+3] 0 +
mov edx [ebp+arg_14] +
push edx  +
push eax  +
call sub_10195D0  +
test al al +
jnz loc_101B037  +
cmp byte ptr [ebp+arg_8+3] al +
jz loc_101B037  +
mov esi [ebp+var_4] +
mov eax [ebp+arg_20] +
mov edx [ebp+arg_10] +
sub esp 20h +
mov edi esp +
sub esp 20h +
mov ecx 8 +
movs   +
mov esi [ebp+arg_14] +
mov edi esp +
push eax  +
mov ecx 8 +
movs   +
mov ecx [ebp+arg_1C] +
mov esi [ebp+arg_0] +
push ecx  +
mov ecx [ebp+arg_4] +
push edx  +
push esi  +
mov eax ebx +
call sub_101AB30  +
cmp byte ptr [ebp+arg_10] 0 +
jz loc_101B037  +
push ebx  +
mov ecx esi +
lea eax [ebp+var_24] +
call sub_101ADA0  +
mov edi [ebp+arg_14] +
mov esi eax +
mov eax [ebp+arg_C] +
push 1  +
push eax  +
mov eax [ebp+arg_4] +
mov ecx 8 +
movs   +
push ebx  +
lea ecx [ebp+var_24] +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_101ADE0  +
mov edi [ebp+arg_18] +
mov ecx 8 +
mov esi eax +
movs   +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 24h  +
***
mov eax off_101C134 +
mov dword_101CBEC eax +
mov dword_101CC00 eax +
mov dword_101CC14 eax +
mov dword_101CC28 eax +
mov dword_101CC3C eax +
mov dword_101CC50 eax +
mov dword_101CC64 eax +
mov dword_101CC78 eax +
mov dword_101CC8C eax +
mov dword_101CCA0 eax +
retn   +
***
mov dword_101D478 offset off_100B2F4 +
mov ecx offset dword_101D478 +
jmp ??1exception@@UAE@XZ  +
***
retf 6904h  +
***
