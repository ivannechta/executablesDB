mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_1001CC3  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_1001CC3  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_1001CC3  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_1001CC3  +
xor eax eax +
inc eax  +
jmp loc_1001CC5  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1001CE2  +
cmp eax 0FFFFFFFFh +
jbe loc_1001CE9  +
mov eax 80070057h +
jmp loc_1001CF0  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_1001CCE  +
test eax eax +
jge loc_1001D1A  +
xor eax eax +
jmp locret_1001D23  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_1001CCE  +
test eax eax +
jge loc_1001D4D  +
xor eax eax +
jmp locret_1001D59  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 8007000Eh +
push 1  +
setz al  +
dec eax  +
and eax 6 +
add eax 0C0000017h +
push eax  +
call sub_1001DC7  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1001E45  +
cmp eax 0Ch +
jz loc_1001E3E  +
cmp eax 16h +
jz loc_1001E37  +
cmp eax 22h +
jz loc_1001E37  +
cmp eax 50h +
jz loc_1001E45  +
push 80004005h  +
call loc_1001DE5  +
push 80070057h  +
jmp loc_1001E32  +
push 8007000Eh  +
jmp loc_1001E32  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_1001E0D  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_1001E0D  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1001E0D  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscat_s  +
add esp 0Ch +
push eax  +
call sub_1001E0D  +
pop ebp  +
retn   +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_1001F32  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1001EF7  +
test eax eax +
jl loc_1001F59  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
call ds:GetLastError  +
test eax eax +
jle locret_1001F74  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_1001F90  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
test eax eax +
jz loc_1001FAF  +
push eax  +
call ds:CoRevokeClassObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pUnk] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
test eax eax +
jz loc_1002009  +
push edi  +
lea ecx [ebp+pUnk] +
push ecx  +
push offset dword_10013DC  +
push dword ptr [esi+0Ch]  +
call eax  +
mov edi eax +
test edi edi +
jl loc_1001FF9  +
lea eax [esi+14h] +
push eax  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push [ebp+pUnk]  +
push dword ptr [esi]  +
call ds:CoRegisterClassObject  +
mov edi eax +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_1002006  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1002055  +
push ebx  +
mov ebx [esi+8] +
cmp ebx [esi+0Ch] +
jnb loc_1002047  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_100203E  +
mov eax [edi+10h] +
test eax eax +
jz loc_100203A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+10h] 0 +
add ebx 4 +
cmp ebx [esi+0Ch] +
jb loc_1002027  +
pop edi  +
lea eax [esi+10h] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
jmp loc_1002079  +
mov eax [esi] +
test eax eax +
jz loc_1002076  +
push [ebp+arg_0]  +
call dword ptr [eax+20h]  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_100206A  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_10020D7  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_10020CF  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_10020CF  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_10020C8  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_10020C8  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_10020A7  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100211D  +
mov esi ds:CharNextW +
cmp word ptr [edi] 0 +
jz loc_100211D  +
mov eax [ebp+lpsz] +
jmp loc_1002110  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_1002114  +
cmp [edi] cx +
jz loc_1002125  +
push eax  +
call esi  +
test eax eax +
jnz loc_1002100  +
push edi  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_10020F5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
push edi  +
call esi  +
jmp loc_100211F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
movzx eax word ptr [ebx] +
push esi  +
mov esi ds:CharUpperW +
push edi  +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jz loc_10021A9  +
cmp di ax +
jnz loc_1002198  +
cmp di 20h +
jz loc_1002198  +
cmp di 9 +
jz loc_1002198  +
mov edi ds:CharNextW +
push ebx  +
call edi  +
push [ebp+lpsz]  +
mov ebx eax +
call edi  +
mov [ebp+lpsz] eax +
movzx eax word ptr [ebx] +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jnz loc_100215A  +
test di di +
jz loc_10021A9  +
cmp di 20h +
jz loc_10021A9  +
cmp di 9 +
jnz loc_10021BA  +
test ax ax +
jz loc_10021C5  +
cmp ax 20h +
jz loc_10021C5  +
cmp ax 9 +
jz loc_10021C5  +
cmp di ax +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
jmp loc_10021C7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_1002225  +
cmp dword ptr [esi+8] 0 +
jnz loc_1002225  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_1002207  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov [esi+4] eax +
jmp loc_1002225  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_1002225  +
push offset aRegdeletekeyw  +
push eax  +
call ds:GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_1002239  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_100224F  +
mov eax [esi+8] +
test eax eax +
jz loc_1002249  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_100224F  +
call ds:GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_1002270  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_10022B2  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_10022C2  +
mov ecx esi +
call sub_1002259  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10022FE  +
mov ecx esi +
call sub_1002259  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_1002343  +
push 80004005h  +
call loc_1001DE5  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_1002389  +
push 80004005h  +
call loc_1001DE5  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_100238B  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_10023FB  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_10023FB  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_1002418  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_1001CF9  +
mov [esi+8] eax +
test eax eax +
jz loc_1002432  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_10024C3  +
cmp ecx ebx +
jle loc_10024C3  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_1002483  +
cmp edi 3FFFFFFFh +
jg loc_10024C3  +
add edi edi +
cmp ecx edi +
jge loc_1002460  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_1001D2C  +
test eax eax +
jz loc_10024C3  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_10024C3  +
mov edx [esi+4] +
cmp eax edx +
jge loc_10024C3  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_10024C3  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1001E4E  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_10024C5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_1009118 1 +
jnz loc_1002534  +
or dword_1009118 1 +
push 8  +
pop eax  +
mov word_10090FC ax +
mov eax 4008h +
push 13h  +
mov word_1009104 ax +
pop eax  +
push 11h  +
mov word_100910C ax +
pop eax  +
mov lpString2 offset aS +
mov dword_1009100 offset aM +
mov dword_1009108 offset aD +
mov dword_1009110 offset aB +
mov word_1009114 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1002558  +
inc esi  +
cmp esi 4 +
jb loc_1002537  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_10090FC[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_1002553  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_10025A4  +
cmp eax 39h +
jle loc_100259F  +
cmp eax 40h +
jle loc_10025A4  +
cmp eax 46h +
jle loc_100259A  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_10025A4  +
add eax 0FFFFFFA9h +
jmp loc_10025A6  +
add eax 0FFFFFFC9h +
jmp loc_10025A6  +
add eax 0FFFFFFD0h +
jmp loc_10025A6  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1001480[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_10025D8  +
inc esi  +
cmp esi 0Eh +
jb loc_10025B7  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_1001484[esi*8] +
jmp loc_10025D3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_1002604  +
jmp loc_1002612  +
cmp cx [ebp+arg_4] +
jz loc_100260E  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_10025F7  +
jmp loc_1002610  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_100263E  +
cmp eax 0Ah +
jle loc_1002639  +
cmp eax 0Dh +
jz loc_1002639  +
cmp eax 20h +
jnz loc_100263E  +
xor eax eax +
inc eax  +
jmp loc_1002640  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_100265C  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_100261C  +
test eax eax +
jnz loc_1002650  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_1002649  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_1002696  +
mov eax 80020009h +
jmp loc_1002776  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_1002724  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_1002707  +
mov ecx esi +
call sub_10023DE  +
test eax eax +
jnz loc_100270E  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_10026CD  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_100277B  +
test eax eax +
jle loc_1002705  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_10026F8  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_10026B3  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_100277B  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_1002772  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_100261C  +
test eax eax +
jnz loc_100276D  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_100277B  +
test eax eax +
jle loc_1002764  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_1002757  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1002724  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_1002774  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_100139C +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_10027B4  +
add esi 4 +
cmp esi offset dword_10013CC +
jl loc_1002792  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_10027AF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_10027E7  +
xor eax eax +
jmp locret_10027F0  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_100284E  +
push esi  +
call sub_1002672  +
test eax eax +
jl loc_1002850  +
mov ecx edi +
call sub_1002649  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_1002672  +
test eax eax +
jl loc_1002850  +
push esi  +
mov ecx edi +
call sub_1002672  +
test eax eax +
jl loc_1002850  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10075A8  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1002879  +
mov eax 80070057h +
jmp loc_10028A1  +
xor eax eax +
push esi  +
mov esi [edi+8] +
inc eax  +
jmp loc_100289B  +
test eax eax +
jl loc_10028A0  +
mov ecx [esi] +
test ecx ecx +
jz loc_1002898  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push ecx  +
call sub_1001FB8  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_1002882  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_10028BF  +
mov eax 80070057h +
jmp loc_10028E0  +
push esi  +
mov esi [edi+8] +
xor eax eax +
jmp loc_10028DA  +
test eax eax +
jnz loc_10028DF  +
mov ecx [esi] +
test ecx ecx +
jz loc_10028D7  +
push ecx  +
call sub_1001F99  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_10028C7  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_1002907  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_1002925  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_100290F  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_100298B  +
dec eax  +
jz loc_1002982  +
push 57h  +
pop eax  +
jmp loc_10029F9  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_10029B1  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_10029DA  +
cmp dword ptr [esi+10h] 0 +
jz loc_10029DA  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_10029F7  +
test cl 2 +
jz loc_10029E8  +
mov esi [esi+10h] +
test esi esi +
jz loc_10029E8  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1009000 +
push edi  +
mov edi offset dword_10090A0 +
jmp loc_1002A44  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_100295C  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1002A1B  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1009000 +
push edi  +
mov edi offset off_1009000 +
cmp esi edi +
jz loc_1002A90  +
jmp loc_1002A86  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1002A84  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_1002A68  +
mov off_1009000 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1002AAB  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_1001D7A  +
cmp dword ptr [esi] 0 +
jnz loc_1002A9F  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_1002AD0  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1002ADF  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1002B05  +
cmp eax [ecx+8] +
jge loc_1002B05  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1002B37  +
cmp eax [ecx+8] +
jge loc_1002B37  +
mov ecx [ecx+4] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1002B77  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_10023BE  +
test al al +
jnz loc_1002B80  +
inc edi  +
cmp edi [esi+8] +
jl loc_1002B5E  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_1002B7A  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001D62  +
test eax eax +
jnz loc_1002BB4  +
push 8007000Eh  +
call loc_1001DE5  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:GetMessageW +
push edi  +
xor edi edi +
jmp loc_1002BE8  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jg loc_1002BD4  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1001CCE  +
test eax eax +
jge loc_1002C1C  +
push eax  +
call loc_1001DE5  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
xor eax offset dword_10090F4 +
mov ecx edx +
mov [esi+28h] eax +
call sub_1001EF7  +
test eax eax +
jge loc_1002C60  +
mov byte_10090E8 1 +
jmp loc_1002C67  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_1002CA9  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1002C8F  +
push edi  +
call sub_10028EA  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_1002C9C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_10022CC  +
mov edi eax +
cmp edi esi +
jz loc_1002D23  +
lea ecx [ebp+var_214] +
call sub_1002259  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10075A8  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_1002D41  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_1002CB1  +
cmp eax esi +
jnz loc_1002D8C  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_1002D2B  +
lea ecx [ebp+var_214] +
call sub_1002259  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_10021D3  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_1002259  +
mov eax esi +
jmp loc_1002D13  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1002DD8  +
push edi  +
mov ecx esi +
call loc_1002AEB  +
push dword ptr [eax]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
push edi  +
mov ecx esi +
call loc_1002B1C  +
push dword ptr [eax]  +
call ??_V@YAXPAX@Z  +
inc edi  +
cmp edi [esi+8] +
pop ecx  +
jl loc_1002DB2  +
mov ecx esi +
call sub_1002AB7  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+lpString] 0 +
push esi  +
mov esi ecx +
jnz loc_1002DFC  +
xor eax eax +
jmp loc_1002E20  +
push [ebp+lpString]  +
and [ebp+var_4] 0 +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_100243E  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1002A98  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea ecx [esi+4] +
call sub_1002DA5  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+lpString] ecx +
mov ecx [ebp+arg_C] +
xor edx edx +
mov [ebp+var_240] edi +
mov [ebp+pptlib] ecx +
cmp edi edx +
jz loc_100302C  +
cmp ecx edx +
jz loc_100302C  +
mov [edi] edx +
mov [ecx] edx +
mov esi 104h +
push esi  +
lea ecx [ebp+szFile] +
push ecx  +
push eax  +
mov [ebp+var_238] edx +
call ds:GetModuleFileNameW  +
mov ebx eax +
test ebx ebx +
jnz loc_1002EE1  +
call sub_1001F60  +
mov esi eax +
lea ecx [ebp+var_238] +
call sub_1002A98  +
mov eax esi +
jmp loc_1003031  +
cmp ebx esi +
jnz loc_1002EEC  +
mov esi 8007007Ah +
jmp loc_1002ECF  +
xor esi esi +
lea eax [ebp+szFile] +
cmp [ebp+szFile] si +
jz loc_1002F2A  +
movzx ecx [ebp+szFile] +
movzx ecx cx +
cmp ecx 2Eh +
jz loc_1002F15  +
cmp ecx 5Ch +
jnz loc_1002F17  +
xor esi esi +
jmp loc_1002F17  +
mov esi eax +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1002F04  +
test esi esi +
jnz loc_1002F32  +
mov [ebp+var_230] eax +
jmp loc_1002F38  +
mov [ebp+var_230] esi +
cmp [ebp+lpString] 0 +
jz loc_1002F86  +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea ecx [eax+ebx] +
cmp ecx ebx +
jb loc_1003022  +
cmp ecx eax +
jb loc_1003022  +
mov eax 10Eh +
cmp ecx eax +
jnb loc_1003022  +
push [ebp+lpString]  +
sub eax ebx +
push eax  +
lea eax [ebp+ebx*2+szFile] +
push eax  +
call sub_1001E74  +
add esp 0Ch +
push [ebp+pptlib]  +
mov ebx ds:LoadTypeLib +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jge loc_1003001  +
mov eax [ebp+var_230] +
mov esi offset a_tlb +
lea edi [ebp+var_10] +
movs   +
lea ecx [ebp+szFile] +
sub eax ecx +
sar eax 1 +
movs   +
lea ecx [eax+5] +
movs   +
cmp ecx 104h +
ja loc_1003022  +
lea ecx [ebp+var_10] +
push ecx  +
mov ecx 10Eh +
sub ecx eax +
push ecx  +
push [ebp+var_230]  +
call sub_1001E74  +
add esp 0Ch +
push [ebp+pptlib]  +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jl loc_1002ECF  +
mov edi [ebp+var_240] +
lea eax [ebp+szFile] +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
test eax eax +
jnz loc_1002ECF  +
mov esi 8007000Eh +
jmp loc_1002ECF  +
mov esi 80004005h +
jmp loc_1002ECF  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 10h  +
***
push offset unk_100911C  +
mov byte ptr [ecx+3Ch] 0 +
call sub_1002865  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002B4E  +
cmp eax 0FFFFFFFFh +
jnz loc_100307A  +
xor eax eax +
jmp loc_1003084  +
push eax  +
mov ecx esi +
call loc_1002B1C  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_10030A8  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_10030B6  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_10030DA  +
push [ebp+arg_0]  +
call sub_1002B96  +
jmp loc_10030DF  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_1003106  +
push [ebp+arg_0]  +
call sub_1002B96  +
jmp loc_100310B  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
push offset unk_100911C  +
mov esi ecx +
call sub_10028AB  +
cmp byte ptr [esi+3Ch] 0 +
mov edi eax +
jz loc_1003138  +
push dword ptr [esi+38h]  +
call ds:Sleep  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
mov dword ptr [esi] offset off_1001694 +
call sub_1002E2A  +
lea eax [esi+10h] +
cmp byte ptr [eax+18h] 0 +
jz loc_1003167  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
add esi 4 +
mov ecx esi +
call sub_1002DA5  +
mov ecx esi +
pop esi  +
jmp sub_1002AB7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_100318D  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003142  +
test [ebp+arg_0] 1 +
jz loc_10031CA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_1003061  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
mov [ebp+var_58] ebx +
test edi edi +
jz loc_1003342  +
test ebx ebx +
jz loc_1003342  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp+var_54] +
call sub_1002403  +
xor ecx ecx +
cmp [ebp+pv] ecx +
jnz loc_1003268  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_1003347  +
mov [esi] edi +
mov [ebp+var_48] ecx +
cmp [edi] cx +
jz loc_1003311  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_10032ED  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_10032ED  +
push 25h  +
push eax  +
call sub_10025E6  +
mov edi eax +
test edi edi +
jz loc_1003327  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_1003330  +
push eax  +
push ecx  +
lea eax [ebp+var_44] +
push 20h  +
push eax  +
call sub_1001E97  +
mov ecx [esi+4] +
add esp 10h +
lea eax [ebp+var_44] +
push eax  +
call sub_10031D6  +
test eax eax +
jz loc_1003327  +
push eax  +
lea ecx [ebp+var_54] +
call sub_1002DE9  +
test eax eax +
jz loc_1003339  +
cmp [esi] edi +
jz loc_10032FC  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jnz loc_10032E1  +
jmp loc_10032FC  +
push 1  +
push eax  +
lea ecx [ebp+var_54] +
call sub_100243E  +
test eax eax +
jz loc_1003339  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_100327C  +
mov ebx [ebp+var_58] +
xor ecx ecx +
mov eax [ebp+pv] +
mov [ebp+pv] ecx +
mov [ebx] eax +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax [ebp+var_48] +
jmp loc_1003347  +
mov [ebp+var_48] 80020009h +
jmp loc_1003319  +
mov [ebp+var_48] 80004005h +
jmp loc_1003319  +
mov [ebp+var_48] 8007000Eh +
jmp loc_1003319  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+libID]  +
push [ebp+hModule]  +
call sub_1002E5C  +
mov esi eax +
test esi esi +
jl loc_10033C1  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+libID] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jl loc_10033C1  +
mov eax [ebp+libID] +
push dword ptr [eax+14h]  +
movzx ecx word ptr [eax+1Ah] +
push dword ptr [eax+10h]  +
push ecx  +
movzx ecx word ptr [eax+18h] +
push ecx  +
push eax  +
call ds:UnRegisterTypeLib  +
push [ebp+libID]  +
mov esi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10033CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+ptlib] +
push ecx  +
lea ecx [ebp+szFullPath] +
push ecx  +
push edi  +
xor ebx ebx +
push eax  +
mov [ebp+szFullPath] ebx +
mov [ebp+ptlib] ebx +
call sub_1002E5C  +
mov esi eax +
cmp esi ebx +
jl loc_1003545  +
mov eax [ebp+ptlib] +
lea edx [ebp+var_218] +
push edx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
mov [ebp+var_218] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_1003524  +
cmp [ebp+var_218] ebx +
jz loc_1003524  +
push [ebp+szFullPath]  +
call ds:SysStringLen  +
push eax  +
push [ebp+szFullPath]  +
lea eax [ebp+sz] +
push 104h  +
push eax  +
call sub_1001E97  +
xor eax eax +
add esp 10h +
mov [ebp+var_6] ax +
cmp edi ebx +
jz loc_10034C9  +
mov esi ds:lstrlenW +
lea eax [ebp+sz] +
push eax  +
call esi  +
push edi  +
mov ebx eax +
call esi  +
mov ecx eax +
mov edx ebx +
sub edx ecx +
lea eax [ebp+edx*2+sz] +
mov esi eax +
xor ebx ebx +
cmps   +
jnz loc_10034C7  +
cmp edx 104h +
jnb loc_10034C7  +
xor ecx ecx +
mov [eax] cx +
xor ebx ebx +
lea edi [ebp+sz] +
mov esi edi +
cmp [ebp+sz] bx +
jz loc_10034FF  +
push esi  +
call ds:CharNextW  +
movzx ecx word ptr [esi] +
cmp cx 5Ch +
jz loc_10034F6  +
cmp cx 2Fh +
jz loc_10034F6  +
cmp cx 3Ah +
jnz loc_10034F8  +
mov edi eax +
mov esi eax +
cmp [eax] bx +
jnz loc_10034DA  +
lea eax [ebp+sz] +
sub edi eax +
sar edi 1 +
cmp edi 104h +
jnb loc_100351B  +
xor eax eax +
mov [ebp+edi*2+sz] ax +
lea eax [ebp+sz] +
push eax  +
jmp loc_1003525  +
push ebx  +
push [ebp+szFullPath]  +
push [ebp+ptlib]  +
call ds:RegisterTypeLib  +
push [ebp+var_218]  +
mov esi eax +
call ds:SysFreeString  +
mov eax [ebp+ptlib] +
cmp eax ebx +
jz loc_1003555  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+szFullPath]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1BCh +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
mov [ebp+rguid] eax +
mov [ebp+ppv] ebx +
cmp esi ebx +
jnz loc_10035AF  +
xor eax eax +
jmp loc_10037F1  +
push offset dword_1001BFC  +
push eax  +
call sub_1001C95  +
test eax eax +
jnz loc_10035A8  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jge loc_10035EE  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_10035A8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10035A8  +
mov eax esi +
push edi  +
mov [ebp+cSubKeys] eax +
cmp [esi] ebx +
jnz loc_1003807  +
cmp [ebp+arg_8] ebx +
jnz loc_10037DE  +
push 40h  +
lea eax [ebp+sz] +
push eax  +
push [ebp+rguid]  +
call ds:StringFromGUID2  +
push offset aClsid  +
mov esi 80h +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
mov [ebp+var_1BC] ebx +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_1001E0D  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1001EBD  +
push offset aRequiredCatego  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push eax  +
call sub_1001E0D  +
mov edi 20019h +
push edi  +
lea ecx [ebp+SubKey] +
mov eax 80000000h +
push ecx  +
push eax  +
lea ecx [ebp+hKey] +
mov [ebp+var_1B8] eax +
mov [ebp+var_1B4] ebx +
mov [ebp+var_1B0] ebx +
mov [ebp+hKey] ebx +
mov [ebp+var_1A8] ebx +
mov [ebp+var_1A4] ebx +
mov [ebp+cSubKeys] ebx +
call sub_10022CC  +
test eax eax +
jnz loc_100370E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov [ebp+rguid] eax +
call sub_1002259  +
cmp [ebp+rguid] ebx +
jnz loc_100370E  +
cmp [ebp+cSubKeys] ebx +
jnz loc_100370E  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_10021D3  +
push offset aClsid  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_1001E0D  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1001EBD  +
push offset aImplementedCat  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push eax  +
call sub_1001E0D  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+var_1B8]  +
lea ecx [ebp+hKey] +
call sub_10022CC  +
test eax eax +
jnz loc_10037BD  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov esi eax +
call sub_1002259  +
cmp esi ebx +
jnz loc_10037BD  +
cmp [ebp+cSubKeys] ebx +
jnz loc_10037BD  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_10021D3  +
lea ecx [ebp+hKey] +
call sub_1002259  +
lea ecx [ebp+var_1B8] +
call sub_1002259  +
lea ecx [ebp+var_1BC] +
call sub_1002A98  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_10037EE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 0Ch  +
mov eax [ebp+cSubKeys] +
mov esi [eax+4] +
lea edi [ebp+var_194] +
movs   +
movs   +
lea edx [ebp+var_194] +
movs   +
push edx  +
push 1  +
push [ebp+rguid]  +
movs   +
cmp [ebp+arg_8] ebx +
jz loc_1003858  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_100383B  +
call dword ptr [ecx+14h]  +
jmp loc_100383E  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jge loc_100386E  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1003854  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_10037F0  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_100386B  +
call dword ptr [ecx+18h]  +
jmp loc_100386E  +
call dword ptr [ecx+20h]  +
add [ebp+cSubKeys] 8 +
mov eax [ebp+cSubKeys] +
cmp [eax] ebx +
jnz loc_1003801  +
jmp loc_10035FF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_1009060 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10038AE  +
xor eax eax +
jmp loc_10038DC  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_10038AA  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_100308E  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002BFE  +
push eax  +
mov ecx esi +
call sub_10030BF  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002BFE  +
push eax  +
mov ecx esi +
call sub_10030EB  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1002BFE  +
push eax  +
mov ecx esi +
call sub_10030EB  +
pop esi  +
pop ebp  +
retn 4  +
***
and dword ptr [esi+30h] 0 +
push 0  +
push 0  +
mov [esi+2Ch] eax +
mov dword ptr [esi+34h] 1388h +
mov dword ptr [esi+38h] 3E8h +
mov byte ptr [esi+3Ch] 1 +
mov byte ptr [esi+3Eh] 0 +
call ds:CoInitializeEx  +
test eax eax +
jge loc_10039AD  +
cmp eax 80010106h +
jnz loc_10039A4  +
push offset aMscoree_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_10039B1  +
mov byte_10090E8 1 +
jmp loc_10039BD  +
mov byte ptr [esi+3Eh] 1 +
push 1  +
mov ecx offset unk_100911C +
call sub_100205C  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi offset unk_100911C +
push 0  +
mov ecx esi +
call sub_100205C  +
mov ecx edi +
call sub_1002C71  +
mov ecx esi +
call sub_1002013  +
cmp byte ptr [edi+3Eh] 0 +
jz loc_10039F4  +
call ds:CoUninitialize  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_1002C71  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
call sub_1003047  +
mov esi eax +
test esi esi +
jnz loc_1003A22  +
mov ecx edi +
call sub_1002BC0  +
test esi esi +
jl loc_1003A2D  +
mov ecx edi +
call sub_1003117  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
mov [ebp+var_18] ecx +
cmp [ebp+lpString] eax +
jz loc_1003B1A  +
cmp [ebp+arg_4] eax +
jz loc_1003B1A  +
push ebx  +
push esi  +
mov esi ds:lstrlenW +
push edi  +
push [ebp+lpString]  +
mov [ebp+var_4] eax +
call esi  +
lea edi [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
push [ebp+arg_4]  +
mov ebx eax +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
call esi  +
lea esi [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
test ebx ebx +
jz loc_1003AEA  +
test eax eax +
jz loc_1003AEA  +
push edi  +
push [ebp+lpString]  +
push edi  +
push ebx  +
call sub_1001E4E  +
push esi  +
push [ebp+arg_4]  +
push esi  +
push [ebp+var_8]  +
call sub_1001E4E  +
mov ecx [ebp+var_18] +
add esp 20h +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_1003889  +
test eax eax +
jnz loc_1003AF3  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1003AFB  +
and [ebp+var_10] 0 +
and [ebp+var_C] 0 +
push [ebp+var_C]  +
call ??_V@YAXPAX@Z  +
push [ebp+var_10]  +
call ??_V@YAXPAX@Z  +
pop ecx  +
pop ecx  +
xor eax eax +
cmp [ebp+var_4] eax +
pop edi  +
pop esi  +
setnl al  +
pop ebx  +
jmp locret_1003B1C  +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
jz loc_1003B7C  +
cmp [ebp+arg_8] 0 +
jz loc_1003B7C  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
push [ebp+arg_8]  +
and [ebp+arg_0] 0 +
push [ebp+lpString]  +
lea ecx [esi+4] +
call sub_1003A3A  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
lea ecx [ebp+arg_0] +
call sub_1002A98  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
pop edi  +
add eax 8007000Eh +
pop esi  +
jmp loc_1003B81  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 211Ch +
call __alloca_probe  +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_211C] eax +
lea eax [ebp+String1] +
xor edi edi +
push eax  +
mov [ebp+var_2118] ecx +
mov [ebp+var_2114] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_210C] edi +
call sub_1002672  +
cmp eax edi +
jl loc_1003E67  +
lea eax [ebp+var_210C] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call sub_10024D1  +
test eax eax +
jnz loc_1003C04  +
mov eax 80020009h +
jmp loc_1003E67  +
mov ecx [ebp+var_2118] +
call sub_1002649  +
mov ecx [ebp+var_2118] +
lea eax [ebp+String1] +
push eax  +
call sub_1002672  +
cmp eax edi +
jl loc_1003E67  +
movzx eax word ptr [ebp+var_210C] +
sub eax 8 +
jz loc_1003E31  +
sub eax 9 +
jz loc_1003D4A  +
dec eax  +
dec eax  +
jz loc_1003D0E  +
sub eax 3FF5h +
jnz loc_1003E50  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
push eax  +
lea ecx [ebp+lpData] +
mov [ebp+lpData] edi +
call sub_100390B  +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_1003CE9  +
cmp [ebp+String1] 0 +
lea edi [ebp+String1] +
jz loc_1003CC3  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_1003CB6  +
cmp word ptr [eax] 30h +
jnz loc_1003CB6  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_1003CBD  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_1003C96  +
mov ecx [ebp+var_2114] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_100236E  +
mov esi eax +
xor edi edi +
jmp loc_1003CEC  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2104] +
cmp [ebp+lpData] eax +
jz loc_1003E44  +
lea ecx [ebp+lpData] +
call sub_1002B89  +
jmp loc_1003E44  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String1] +
push eax  +
mov [ebp+var_2114] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_1002308  +
lea ecx [ebp+var_2114] +
mov esi eax +
call sub_1002A98  +
jmp loc_1003E44  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_210C] eax +
test al 1 +
jz loc_1003D6B  +
mov eax 80004005h +
jmp loc_1003E67  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
push ebx  +
lea ecx [ebp+lpData] +
mov [ebp+lpData] edi +
call sub_100392F  +
cmp [ebp+lpData] edi +
jnz loc_1003DA3  +
lea eax [ebp+var_2104] +
test eax eax +
jz loc_1003D61  +
lea ecx [ebp+lpData] +
call sub_1002B89  +
jmp loc_1003D61  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_210C] edi +
jle loc_1003DFB  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax [ebp+edi*2+String1] +
push eax  +
call sub_1002570  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_210C] +
jl loc_1003DBB  +
mov esi [ebp+var_2114] +
xor edi edi +
mov esi [esi] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push esi  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2104] +
cmp [ebp+lpData] eax +
jz loc_1003E44  +
lea ecx [ebp+lpData] +
call sub_1002B89  +
jmp loc_1003E44  +
push 1  +
lea eax [ebp+String1] +
push eax  +
push ebx  +
mov ecx esi +
call sub_100232B  +
mov esi eax +
cmp esi edi +
jz loc_1003E50  +
push esi  +
call sub_1001F7A  +
jmp loc_1003E67  +
push [ebp+var_211C]  +
mov ecx [ebp+var_2118] +
call sub_1002672  +
cmp eax edi +
jl loc_1003E67  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 225Ch +
call __alloca_probe  +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_2214] eax +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_2210] ecx +
mov [ebp+var_2220] ebx +
mov [ebp+var_221C] ebx +
mov [ebp+var_2218] ebx +
mov [ebp+var_2258] eax +
call sub_1002672  +
mov esi eax +
cmp esi ebx +
jmp loc_10043D7  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2224] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_1003F0A  +
test ebx ebx +
jz loc_1003FC7  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002672  +
mov esi eax +
test esi esi +
jl loc_1004441  +
cmp [ebp+arg_8] 0 +
jz loc_1003FC7  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_2230] esi +
mov [ebp+var_222C] esi +
mov [ebp+var_2228] esi +
call sub_10025E6  +
test eax eax +
jnz loc_10043E5  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002787  +
test eax eax +
jz loc_1003F7C  +
mov eax [ebp+var_2214] +
push edi  +
lea ecx [ebp+var_2230] +
mov [ebp+var_2230] eax +
call sub_1002CB1  +
mov [ebp+var_2230] esi +
cmp ebx esi +
jz loc_1003FBC  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002672  +
mov esi eax +
test esi esi +
jl loc_10043F7  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10027F9  +
lea ecx [ebp+var_2230] +
mov esi eax +
call sub_1002259  +
test esi esi +
jl loc_1004441  +
jmp loc_1004392  +
lea ecx [ebp+var_2230] +
call sub_1002259  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1003FF3  +
mov ecx [ebp+var_2210] +
and [ebp+var_2224] eax +
push edi  +
call sub_1002672  +
mov esi eax +
test esi esi +
jl loc_1004441  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1004110  +
mov ecx [ebp+var_2210] +
lea eax [ebp+ValueName] +
push eax  +
call sub_1002672  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_1004441  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002672  +
mov esi eax +
cmp esi ebx +
jl loc_1004441  +
cmp word ptr [edi] 3Dh +
jnz loc_10043F0  +
cmp [ebp+arg_8] ebx +
jz loc_1004096  +
mov eax [ebp+var_2214] +
mov ecx [ebp+var_2210] +
mov [ebp+var_2248] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2248] +
push eax  +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_1003B8A  +
lea ecx [ebp+var_2248] +
mov esi eax +
mov [ebp+var_2248] ebx +
call sub_1002259  +
cmp esi ebx +
jmp loc_1003FB1  +
cmp [ebp+arg_C] ebx +
jnz loc_10040FF  +
cmp [ebp+var_2224] ebx +
jz loc_10040FF  +
push 20006h  +
push ebx  +
push [ebp+var_2214]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2238] ebx +
mov [ebp+var_2234] ebx +
call sub_10022CC  +
cmp eax ebx +
jnz loc_10043FF  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_10040F4  +
cmp eax 2 +
jnz loc_10043FF  +
lea ecx [ebp+hKey] +
call sub_1002259  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10027F9  +
jmp loc_1003ECE  +
push 5Ch  +
push edi  +
call sub_10025E6  +
test eax eax +
jnz loc_10043F0  +
cmp [ebp+arg_8] eax +
jz loc_10041BF  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_10022CC  +
test eax eax +
jz loc_1004183  +
push 20019h  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_10022CC  +
test eax eax +
jz loc_1004183  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_1002277  +
mov esi eax +
cmp esi ebx +
jnz loc_100440D  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002672  +
mov esi eax +
test esi esi +
jl loc_1004441  +
cmp word ptr [edi] 3Dh +
jnz loc_1004392  +
mov ecx [ebp+var_2210] +
push edi  +
push 0  +
lea eax [ebp+var_2220] +
push eax  +
call sub_1003B8A  +
mov esi eax +
jmp loc_1003FAF  +
cmp [ebp+arg_C] 0 +
jnz loc_10041E0  +
push 20019h  +
push edi  +
push [ebp+var_2214]  +
lea ecx [ebp+var_2220] +
call sub_10022CC  +
mov ebx eax +
jmp loc_10041E3  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_10041EE  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1001E0D  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002672  +
mov esi eax +
test esi esi +
jl loc_1004441  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_10027F9  +
mov esi eax +
test esi esi +
jl loc_1004441  +
cmp word ptr [edi] 7Bh +
jnz loc_1004286  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1004286  +
push [ebp+arg_C]  +
mov ecx [ebp+var_2210] +
push 0  +
push [ebp+var_2220]  +
push edi  +
call sub_1003E7D  +
mov esi eax +
test esi esi +
jge loc_1004270  +
cmp [ebp+arg_C] 0 +
jz loc_1004441  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002672  +
mov esi eax +
test esi esi +
jl loc_1004441  +
mov eax [ebp+var_2258] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_10043D9  +
test ebx ebx +
jz loc_10042B1  +
test eax eax +
jnz loc_10043D9  +
push ebx  +
call sub_1001F7A  +
mov esi eax +
jmp loc_1004441  +
test eax eax +
jz loc_1004308  +
push [ebp+var_2220]  +
mov ecx [ebp+var_2210] +
call sub_10027BD  +
test eax eax +
jz loc_1004308  +
mov ecx [ebp+var_2210] +
lea eax [ebp+SubKey] +
push eax  +
call sub_1002787  +
test eax eax +
jz loc_10043D9  +
cmp [ebp+var_2224] 0 +
jz loc_10043D9  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2220] +
call sub_1002CB1  +
jmp loc_10043D9  +
push [ebp+var_2220]  +
mov ecx [ebp+var_2210] +
call sub_10027BD  +
lea ecx [ebp+var_2220] +
mov [ebp+var_225C] eax +
call sub_1002259  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_1004420  +
cmp [ebp+var_2224] eax +
jz loc_10043D9  +
cmp [ebp+var_225C] eax +
jnz loc_10043D9  +
mov [ebp+var_2250] eax +
mov [ebp+var_224C] eax +
mov eax [ebp+var_2214] +
mov [ebp+var_2254] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2254] +
call sub_10021D3  +
and [ebp+var_2254] 0 +
test eax eax +
jnz loc_100442E  +
lea ecx [ebp+var_2254] +
call sub_1002259  +
cmp [ebp+arg_8] 0 +
jz loc_10043D9  +
cmp word ptr [edi] 7Bh +
jnz loc_10043D9  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_10043D9  +
mov ecx [ebp+var_2210] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_2220]  +
push edi  +
call sub_1003E7D  +
mov esi eax +
test esi esi +
jl loc_1004441  +
mov ecx [ebp+var_2210] +
push edi  +
call sub_1002672  +
mov esi eax +
test esi esi +
jl loc_1004441  +
cmp word ptr [edi] 7Dh +
jnz loc_1003ED7  +
jmp loc_1004441  +
lea ecx [ebp+var_2230] +
call sub_1002259  +
mov esi 80020009h +
jmp loc_1004441  +
lea ecx [ebp+var_2230] +
jmp loc_100443C  +
push eax  +
call sub_1001F7A  +
lea ecx [ebp+hKey] +
jmp loc_100443A  +
lea ecx [ebp+var_2220] +
call sub_1002259  +
push esi  +
call sub_1001F7A  +
jmp loc_100444E  +
lea ecx [ebp+var_2220] +
call sub_1002259  +
push ebx  +
jmp loc_1004419  +
push eax  +
call sub_1001F7A  +
lea ecx [ebp+var_2254] +
mov esi eax +
call sub_1002259  +
lea ecx [ebp+var_2220] +
call sub_1002259  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov edx ecx +
push edi  +
mov dword ptr [edx] offset off_1001694 +
and dword ptr [edx+4] 0 +
and dword ptr [edx+8] 0 +
and dword ptr [edx+0Ch] 0 +
lea esi [edx+10h] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10044AB  +
mov eax 80070057h +
jmp loc_100451E  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_100450C  +
mov ebx [edx] +
test ebx ebx +
jz loc_10044FA  +
cmp [ebp+arg_8] 0 +
jz loc_10044DA  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_10044FA  +
push 1  +
call dword ptr [ebx+4]  +
test eax eax +
jl loc_100451C  +
push 1  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_1003579  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_100451C  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_10044BD  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_100451C  +
cmp [ebp+arg_4] 0 +
jz loc_100451C  +
push 0  +
push dword ptr [esi+4]  +
call sub_10033E3  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100453E  +
mov eax 80070057h +
jmp loc_10045B1  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_100459F  +
mov ebx [edx] +
test ebx ebx +
jz loc_100458D  +
cmp [ebp+arg_8] 0 +
jz loc_100456D  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_100458D  +
push 0  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_1003579  +
test eax eax +
jl loc_10045AF  +
push 0  +
call dword ptr [ebx+4]  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_10045AF  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_1004550  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_10045AF  +
cmp [ebp+arg_4] 0 +
jz loc_10045AF  +
push 0  +
push dword ptr [esi+4]  +
call sub_100335D  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_10045EB  +
mov eax 80004003h +
jmp loc_100461C  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_100460D  +
push esi  +
push offset dword_1001758  +
push 1  +
push edi  +
push offset dword_100136C  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_1004619  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
xor eax eax +
cmp edi eax +
jnz loc_1004660  +
cmp [esi+3Ch] al +
jz loc_1004653  +
push dword ptr [esi+30h]  +
mov byte ptr [esi+3Dh] 1 +
call ds:SetEvent  +
jmp loc_1004660  +
push eax  +
push eax  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax] +
push offset aBbc4356aF00446  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10039C6  +
test byte ptr [ebp+8] 1 +
jz loc_10046A5  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpString] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_100320B  +
mov edi eax +
test edi edi +
jl loc_10047A8  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_100479A  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1002672  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_1004799  +
lea eax [ebp+String1] +
push eax  +
call sub_10025AF  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_10047E2  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1002672  +
mov edi eax +
cmp edi ebx +
jl loc_1004799  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_10047E2  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_10047B8  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_1003E7D  +
mov edi eax +
test edi edi +
jge loc_10047CC  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_1003E7D  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10075A8  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_1003E7D  +
mov edi eax +
cmp edi ebx +
jl loc_1004799  +
mov ecx esi +
call sub_1002649  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1004705  +
jmp loc_1004799  +
mov edi 80020009h +
jmp loc_1004799  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_100911C  +
call sub_1004495  +
test eax eax +
jl loc_1004819  +
mov ecx dword_10090EC +
test ecx ecx +
jz loc_1004819  +
push hModule  +
call ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10090F0 +
test eax eax +
jz loc_1004836  +
call eax  +
test eax eax +
jl loc_1004846  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_100911C  +
call sub_1004528  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpLibFileName] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push 2  +
push edi  +
push eax  +
mov [ebp+var_410] edi +
mov [ebp+var_414] ecx +
mov [ebp+var_418] edi +
mov [ebp+lpString] edi +
call ds:LoadLibraryExW  +
mov [ebp+hLibModule] eax +
cmp eax edi +
jnz loc_10048AA  +
call sub_1001F60  +
mov esi eax +
jmp loc_100498B  +
push ebx  +
push esi  +
push eax  +
call ds:FindResourceW  +
mov esi eax +
cmp esi edi +
jnz loc_10048C3  +
call sub_1001F60  +
jmp loc_100497D  +
push esi  +
push [ebp+hLibModule]  +
call ds:LoadResource  +
mov ebx eax +
cmp ebx edi +
jz loc_10048B9  +
push esi  +
push [ebp+hLibModule]  +
call ds:SizeofResource  +
mov esi eax +
lea eax [esi+1] +
cmp eax esi +
jnb loc_1004928  +
lea eax [ebp+var_404] +
cmp [ebp+lpString] eax +
jz loc_1004905  +
lea ecx [ebp+lpString] +
call sub_1002B89  +
mov esi 8007000Eh +
lea ecx [ebp+var_410] +
call sub_1002A98  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 10h  +
push eax  +
lea ecx [ebp+lpString] +
call sub_10038E7  +
cmp [ebp+lpString] edi +
jnz loc_1004943  +
mov esi 8007000Eh +
jmp loc_100497F  +
push esi  +
push [ebp+lpString]  +
push esi  +
push ebx  +
push edi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax edi +
jz loc_10048B9  +
mov edx [ebp+lpString] +
push [ebp+arg_C]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push [ebp+lpString]  +
lea ecx [ebp+var_418] +
call sub_10046B1  +
mov esi eax +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
lea eax [ebp+var_404] +
cmp [ebp+lpString] eax +
jz loc_100490A  +
lea ecx [ebp+lpString] +
call sub_1002B89  +
jmp loc_100490A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 1  +
push [ebp+arg_C]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_100484F  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1002A98  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 0  +
push [ebp+arg_C]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_100484F  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_1002A98  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A64h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_A64] +
call sub_1004464  +
lea ecx [ebp+var_A54] +
call sub_1001F47  +
mov ebx eax +
test ebx ebx +
jge loc_1004A76  +
lea ecx [ebp+var_A64] +
call sub_1003142  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 10h  +
test esi esi +
jz loc_1004A95  +
jmp loc_1004A8F  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp+var_A64] +
push eax  +
call sub_1003B25  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_1004A7C  +
mov eax [edi] +
lea ecx [ebp+var_A64] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_1004ABA  +
mov esi eax +
lea ecx [ebp+var_A64] +
call sub_1003142  +
mov eax esi +
jmp loc_1004A65  +
mov edi hModule +
mov esi 104h +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
push edi  +
mov [ebp+var_A38] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_1004AF2  +
call sub_1001F60  +
mov esi eax +
lea ecx [ebp+var_A38] +
call sub_1002A98  +
jmp loc_1004AAB  +
cmp eax esi +
jnz loc_1004B08  +
lea ecx [ebp+var_A38] +
call sub_1002A98  +
mov esi 8007007Ah +
jmp loc_1004AAB  +
lea eax [ebp+LibFileName] +
push eax  +
push 208h  +
lea eax [ebp+var_A34] +
push eax  +
call sub_1002089  +
cmp edi ebx +
jz loc_1004B37  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_1004B37  +
lea eax [ebp+var_A34] +
jmp loc_1004B9C  +
push 22h  +
pop eax  +
mov word ptr [ebp+String] ax +
lea eax [ebp+var_A34] +
push eax  +
push 20Bh  +
lea eax [ebp+String+2] +
push eax  +
call sub_1001D92  +
test al al +
jnz loc_1004B72  +
lea ecx [ebp+var_A38] +
call sub_1002A98  +
mov esi 80004005h +
jmp loc_1004AAB  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov word ptr [ebp+eax+String] cx +
xor ecx ecx +
mov word ptr [ebp+eax+String+2] cx +
lea eax [ebp+String] +
push eax  +
push offset String  +
lea eax [ebp+var_A64] +
push eax  +
call sub_1003B25  +
mov esi eax +
cmp esi ebx +
jl loc_1004AE5  +
lea eax [ebp+var_A34] +
push eax  +
push offset aModule_raw  +
lea eax [ebp+var_A64] +
push eax  +
call sub_1003B25  +
mov esi eax +
cmp esi ebx +
jl loc_1004AE5  +
push offset aRegistry  +
push dword ptr [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_A64] +
push eax  +
cmp [ebp+arg_8] ebx +
jz loc_1004BFF  +
call sub_10049B2  +
jmp loc_1004AE3  +
call sub_10049E8  +
jmp loc_1004AE3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_10] offset aAppid +
push 65h  +
push dword_10090F4  +
mov [ebp+var_C] offset aBbc4356aF00446 +
call sub_1004A1E  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
mov [ebp+var_10] ecx +
mov esi offset asc_10017DC +
lea edi [ebp+sz] +
movs   +
lea ecx [ebp+sz] +
push ecx  +
push eax  +
movs   +
call sub_10020E1  +
xor edi edi +
jmp loc_1004CAB  +
push offset sz  +
push esi  +
call sub_100212F  +
test eax eax +
jz loc_1004CC4  +
push offset aRegserver  +
push esi  +
call sub_100212F  +
test eax eax +
jz loc_1004CE1  +
lea eax [ebp+sz] +
push eax  +
push esi  +
call sub_10020E1  +
mov esi eax +
cmp esi edi +
jnz loc_1004C83  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 8  +
mov ecx [ebp+var_10] +
push edi  +
push 1  +
call sub_1004822  +
cmp eax edi +
mov [ebx] eax +
jl loc_1004CDD  +
push edi  +
call sub_1004C0E  +
mov [ebx] eax +
xor al al +
jmp loc_1004CB3  +
push 1  +
call sub_1004C0E  +
cmp eax edi +
mov [ebx] eax +
jl loc_1004CDD  +
mov ecx [ebp+var_10] +
push edi  +
push 1  +
call sub_10047EE  +
jmp loc_1004CDB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp byte_10090E8 0 +
push esi  +
mov esi ecx +
jz loc_1004D17  +
or eax 0FFFFFFFFh +
jmp loc_1004D41  +
and [ebp+var_4] 0 +
call ds:GetCommandLineW  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1004C49  +
cmp al 1 +
jnz loc_1004D3E  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1003A02  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset unk_1009080 +
push esi  +
call sub_1002934  +
push offset aSyncHostTrace  +
mov dword_10090A0 offset dword_10013CC +
mov off_1009000 esi +
call sub_1002A05  +
push [ebp+arg_C]  +
mov ecx offset dword_10090A8 +
call sub_1004D00  +
mov esi eax +
call sub_1002A53  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1004DA7  +
xor eax eax +
jmp loc_1004DC6  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1004DB5  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_1004DC1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 10h  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_1004ED5  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1004EC9  +
sub eax edx +
inc eax  +
jmp loc_1004ED8  +
push 5  +
pop eax  +
mov ecx esi +
test esi esi +
jnz loc_1004EE3  +
mov ecx offset aNull +
push 0  +
push eax  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop esi  +
pop ebp  +
retn 14h  +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
mov eax 80070057h +
test ecx ecx +
jz loc_1004F26  +
xor eax eax +
and [ecx] eax +
pop ebp  +
retn 8  +
***
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_1004F43  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_1004F5C  +
mov eax 80004003h +
jmp loc_1004F64  +
and dword ptr [eax] 0 +
mov eax 80040110h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1004F97  +
cmp dword ptr [eax+4] 0 +
jnz loc_1004F97  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_1004F97  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_1004F97  +
xor eax eax +
inc eax  +
jmp loc_1004F99  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+14h] +
mov eax 80004003h +
test esi esi +
jz loc_1004FDD  +
and dword ptr [esi] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1004FD0  +
push dword ptr [ebp+10h]  +
call sub_1004F6D  +
test eax eax +
jnz loc_1004FD0  +
mov eax 80040110h +
jmp loc_1004FDD  +
mov eax [ebp+8] +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+24h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
mov ecx dword_10090F4 +
mov eax [ecx] +
jz loc_1004FFF  +
call dword ptr [eax+4]  +
jmp loc_1005002  +
call dword ptr [eax+8]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 2 +
jnz loc_1005043  +
cmp dword ptr [ebp+18h] 0 +
jz loc_100502B  +
mov eax [ebp+14h] +
imul eax eax +
xor edx edx +
div  dword ptr [ebp+18h] +
jmp loc_100502D  +
xor eax eax +
mov ecx [ebp+8] +
cmp dword ptr [ecx+28h] 0 +
jz loc_1005039  +
add eax 32h +
mov ecx [ecx+50h] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0Ch]  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov eax ecx +
lea ecx [eax+4] +
mov dword ptr [ecx] 0C0000001h +
mov dword ptr [eax] offset off_10018A4 +
jmp loc_1004F2F  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1004DE0  +
mov dword ptr [esi] offset off_10018A4 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+54h] +
test eax eax +
jz loc_1005097  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+50h] +
test eax eax +
jz loc_10050A4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [esi+34h] +
cmp byte ptr [eax+18h] 0 +
jz loc_10050B8  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
lea ecx [esi+8] +
pop esi  +
jmp loc_1004F2F  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+8] +
call sub_1004DE0  +
xor ebx ebx +
push 6  +
mov [esi+28h] ebx +
mov [esi+2Ch] ebx +
lea edx [esi+34h] +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov [edx+18h] bl +
mov [esi+50h] ebx +
pop edi  +
mov [esi+54h] ebx +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov dword ptr [ebp-4] 80070057h +
mov eax off_1009000 +
mov esi offset off_1009000 +
mov edi offset dword_1001834 +
mov ebx 2000h +
cmp eax esi +
jz loc_1005145  +
test [eax+1Ch] ebx +
jz loc_1005145  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005145  +
push edi  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E02  +
mov eax off_1009000 +
mov ecx [ebp+8] +
cmp dword ptr [ecx+2Ch] 0 +
jnz loc_100517B  +
cmp eax esi +
jz loc_1005170  +
test [eax+1Ch] ebx +
jz loc_1005170  +
cmp byte ptr [eax+19h] 1 +
jb loc_1005170  +
push offset aM_econflictpol  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004EB7  +
call ds:DebugBreak  +
mov eax off_1009000 +
mov ecx [ebp+8] +
cmp dword ptr [ecx+2Ch] 3 +
jnz loc_10051AC  +
cmp eax esi +
jz loc_10051A6  +
test [eax+1Ch] ebx +
jz loc_10051A6  +
cmp byte ptr [eax+19h] 1 +
jb loc_10051A6  +
push offset aM_econflictp_0  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004EB7  +
call ds:DebugBreak  +
mov ebx [ebp+0Ch] +
test ebx ebx +
jz loc_10053CC  +
mov eax [ebx] +
and dword ptr [ebp-0Ch] 0 +
and dword ptr [ebp-8] 0 +
lea ecx [ebp-0Ch] +
push ecx  +
push ebx  +
call dword ptr [eax+0Ch]  +
mov [ebp-4] eax +
test eax eax +
jge loc_1005200  +
mov eax off_1009000 +
cmp eax esi +
jz loc_10053B2  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10053B2  +
push dword ptr [ebp-4]  +
push edi  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
jmp loc_10053B2  +
mov eax [ebx] +
lea ecx [ebp-8] +
push ecx  +
push ebx  +
call dword ptr [eax+10h]  +
mov [ebp-4] eax +
test eax eax +
jge loc_1005233  +
mov eax off_1009000 +
cmp eax esi +
jz loc_10053B2  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10053B2  +
push dword ptr [ebp-4]  +
push edi  +
push 0Eh  +
jmp loc_10051F0  +
***
mov eax [ebp-0Ch] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov [ebp-4] eax +
test eax eax +
jge loc_1005269  +
mov eax off_1009000 +
cmp eax esi +
jz loc_10053B2  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10053B2  +
push dword ptr [ebp-4]  +
push edi  +
push 0Fh  +
jmp loc_10051F0  +
***
mov eax [ebp-8] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov [ebp-4] eax +
test eax eax +
jge loc_10052A2  +
mov eax off_1009000 +
cmp eax esi +
jz loc_10053B2  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10053B2  +
push dword ptr [ebp-4]  +
push edi  +
push 10h  +
jmp loc_10051F0  +
***
test byte ptr [ebp-10h] 1 +
jz loc_10052D8  +
mov eax off_1009000 +
cmp eax esi +
jz loc_10052D3  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10052D3  +
cmp byte ptr [eax+19h] 2 +
jb loc_10052D3  +
push edi  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E02  +
mov eax off_1009000 +
xor ebx ebx +
inc ebx  +
jmp loc_1005320  +
test byte ptr [ebp-14h] 1 +
jz loc_100530E  +
mov eax off_1009000 +
cmp eax esi +
jz loc_1005309  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005309  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005309  +
push edi  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E02  +
mov eax off_1009000 +
push 2  +
pop ebx  +
jmp loc_1005320  +
mov eax [ebp+8] +
xor ebx ebx +
cmp dword ptr [eax+2Ch] 1 +
mov eax off_1009000 +
setnz bl  +
inc ebx  +
cmp eax esi +
jz loc_1005347  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005347  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005347  +
push ebx  +
push edi  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
mov eax off_1009000 +
cmp ebx 1 +
jz loc_100537D  +
cmp ebx 2 +
jz loc_100537D  +
cmp eax esi +
jz loc_1005377  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005377  +
cmp byte ptr [eax+19h] 1 +
jb loc_1005377  +
push offset aSraSra_accept_  +
push edi  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004EB7  +
call ds:DebugBreak  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+20h]  +
mov ecx eax +
mov [ebp-4] ecx +
test ecx ecx +
jge loc_10053B2  +
mov eax off_1009000 +
cmp eax esi +
jz loc_10053B2  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10053B2  +
push ecx  +
push ecx  +
push edi  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E85  +
mov eax [ebp-8] +
test eax eax +
jz loc_10053BF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-0Ch] +
test eax eax +
jz loc_10053CC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40Ch +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_3F0] 0 +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+pv] +
stos   +
stos   +
stos   +
stos   +
lea edx [ebp+var_3F0] +
push edx  +
lea edx [ebp+var_3F8] +
mov ebx ecx +
mov ecx [ebp+arg_0] +
stos   +
mov eax [ecx] +
and [ebp+var_3FC] 0 +
push edx  +
push ecx  +
call dword ptr [eax+18h]  +
test eax eax +
jge loc_1005457  +
mov ecx off_1009000 +
cmp ecx offset off_1009000 +
jz loc_100557E  +
test dword ptr [ecx+1Ch] 2000h +
jz loc_100557E  +
push eax  +
push offset dword_1001834  +
push 23h  +
jmp loc_1005573  +
mov eax [ebp+var_3F0] +
test eax eax +
jz loc_100557E  +
lea edx [ebp+var_3F4] +
push edx  +
xor ecx ecx +
lea edx [ebp+var_3EC] +
mov edi 1F4h +
push edx  +
mov word ptr [ebp+var_3EC] cx +
mov [ebp+var_3F4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi ds:SHStrDupW +
test eax eax +
jnz loc_10054D7  +
lea eax [ebp+pv] +
push eax  +
lea eax [ebp+var_3EC] +
push eax  +
call esi  +
test eax eax +
jge loc_10054D7  +
mov ecx off_1009000 +
cmp ecx offset off_1009000 +
jz loc_100557E  +
test dword ptr [ecx+1Ch] 2000h +
jz loc_100557E  +
push eax  +
push offset dword_1001834  +
push 24h  +
jmp loc_1005573  +
lea edx [ebp+var_3F4] +
push edx  +
xor eax eax +
mov word ptr [ebp+var_3EC] ax +
mov eax [ebp+var_3F0] +
lea edx [ebp+var_3EC] +
push edx  +
mov [ebp+var_3F4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jnz loc_1005539  +
lea eax [ebp+var_404] +
push eax  +
lea eax [ebp+var_3EC] +
push eax  +
call esi  +
test eax eax +
jge loc_1005539  +
mov ecx off_1009000 +
cmp ecx offset off_1009000 +
jz loc_100557E  +
test dword ptr [ecx+1Ch] 2000h +
jz loc_100557E  +
push eax  +
push offset dword_1001834  +
push 25h  +
jmp loc_1005573  +
mov eax [ebx+54h] +
mov ecx [eax] +
lea edx [ebp+var_40C] +
push edx  +
lea edx [ebp+pv] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jge loc_100557E  +
mov ecx off_1009000 +
cmp ecx offset off_1009000 +
jz loc_100557E  +
test dword ptr [ecx+1Ch] 2000h +
jz loc_100557E  +
push eax  +
push offset dword_1001834  +
push 26h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1004E59  +
mov esi ds:CoTaskMemFree +
xor edi edi +
cmp [ebp+pv] edi +
jz loc_100559C  +
push [ebp+pv]  +
call esi  +
mov [ebp+pv] edi +
cmp [ebp+var_404] edi +
jz loc_10055B2  +
push [ebp+var_404]  +
call esi  +
mov [ebp+var_404] edi +
cmp [ebp+var_400] edi +
jz loc_10055C8  +
push [ebp+var_400]  +
call esi  +
mov [ebp+var_400] edi +
mov eax [ebp+var_3F0] +
cmp eax edi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10055DB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10075A8  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
mov esi [ebp+arg_8] +
and dword ptr [esi] 0 +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_8] +
push edx  +
push 1  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov edi eax +
test edi edi +
jge loc_100564A  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1005694  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005694  +
push edi  +
push [ebp+arg_4]  +
push offset dword_1001834  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E28  +
jmp loc_1005694  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1001894  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jge loc_100568B  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1005694  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005694  +
push edi  +
push offset dword_1001834  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
jmp loc_1005694  +
mov eax [ebp+var_4] +
and [ebp+var_4] 0 +
mov [esi] eax +
mov eax [ebp+var_8] +
test eax eax +
jz loc_10056A1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10056AE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [ecx] +
cmp eax edx +
jz loc_10056D2  +
push edx  +
push ecx  +
call sub_1004D96  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_10056F0  +
push [ebp+arg_0]  +
push ecx  +
call sub_1004D96  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1005716  +
mov ecx [eax] +
push esi  +
push offset dword_100194C  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100504E  +
test [ebp+arg_0] 1 +
jz loc_100573C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1005069  +
mov dword ptr [esi] offset off_100195C +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_10057F8  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_10057F8  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_100578A  +
mov eax 80004003h +
jmp loc_10057FD  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_1004F6D  +
test eax eax +
jz loc_10057EA  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_10057FD  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_10057C8  +
push [ebp+arg_8]  +
push eax  +
call sub_1001C95  +
test eax eax +
jz loc_10057E7  +
cmp edi 1 +
jz loc_1005799  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_10057FD  +
cmp [ebp+arg_4] 0 +
jnz loc_10057E7  +
test eax eax +
jl loc_10057FD  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_10057AB  +
mov eax 80004002h +
jmp loc_10057FD  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001970  +
push ecx  +
call sub_1005763  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1005824  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005886  +
test esi esi +
jz loc_1005886  +
push 1  +
mov ecx esi +
call sub_1005722  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10050C6  +
mov dword ptr [esi] offset off_10019B8 +
mov dword ptr [esi+4] offset off_1001998 +
mov ecx dword_10090F4 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005902  +
test esi esi +
jz loc_1005902  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10058DB  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10058C0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10019D0  +
push ecx  +
call sub_1005763  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_100592D  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100594C  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10019B8 +
mov dword ptr [esi+4] offset off_1001998 +
mov dword ptr [esi+8] 0C0000001h +
mov ecx dword_10090F4 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_1005085  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005977  +
test byte ptr [ebp+8] 1 +
jz loc_10059C2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_10059E7  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFFCh +
call sub_10053DB  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
push edi  +
mov eax off_1009000 +
mov edi offset off_1009000 +
cmp eax edi +
jz loc_1005A2E  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005A2E  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005A2E  +
push offset dword_1001834  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E02  +
mov esi [ebp+8] +
lea ebx [esi+34h] +
push ebx  +
call ds:EnterCriticalSection  +
mov dword ptr [esi+28h] 1 +
add esi 50h +
push esi  +
lea ecx [ebp-4] +
call sub_10056BB  +
push ebx  +
call ds:LeaveCriticalSection  +
mov esi [ebp-4] +
test esi esi +
jz loc_1005A62  +
mov eax [esi] +
push esi  +
call dword ptr [eax+14h]  +
mov eax off_1009000 +
cmp eax edi +
jz loc_1005A8C  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005A8C  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005A8C  +
push offset dword_1001834  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E02  +
test esi esi +
jz loc_1005A96  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 288h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_8] 0 +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov [ebp+var_284] eax +
mov eax [ebp+arg_4] +
push edi  +
mov [ebp+var_264] ecx +
mov [ebp+var_288] eax +
mov ebx offset off_1009000 +
mov esi offset dword_1001834 +
jl loc_1005B15  +
mov eax off_1009000 +
cmp eax ebx +
jz loc_1005B0F  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005B0F  +
cmp byte ptr [eax+19h] 1 +
jb loc_1005B0F  +
push offset aFailedHrerror  +
push esi  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004EB7  +
call ds:DebugBreak  +
xor eax eax +
lea edi [ebp+pv] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_8] +
mov [ebp+dwMessageId] eax +
xor ecx ecx +
lea eax [ebp+pperrinfo] +
push eax  +
push ecx  +
mov [ebp+var_280] ecx +
mov [ebp+pperrinfo] ecx +
mov [ebp+var_270] 1 +
call ds:GetErrorInfo  +
xor edi edi +
test eax eax +
jnz loc_1005C1C  +
mov eax [ebp+pperrinfo] +
cmp eax edi +
jz loc_1005C1C  +
lea edx [ebp+var_260] +
push edx  +
mov [ebp+var_260] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1005BCA  +
lea eax [ebp+var_274] +
push eax  +
push [ebp+var_260]  +
call ds:SHStrDupW  +
cmp eax edi +
jge loc_1005BCA  +
mov ecx off_1009000 +
cmp ecx ebx +
jz loc_1005BB9  +
test dword ptr [ecx+1Ch] 2000h +
jz loc_1005BB9  +
push eax  +
push esi  +
push 28h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1004E59  +
push [ebp+var_260]  +
call ds:SysFreeString  +
jmp loc_1005D9C  +
push [ebp+var_260]  +
call ds:SysFreeString  +
mov eax [ebp+var_264] +
mov eax [eax+54h] +
mov ecx [eax] +
lea edx [ebp+var_280] +
push edx  +
lea edx [ebp+pv] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax edi +
jge loc_1005C8B  +
mov ecx off_1009000 +
cmp ecx ebx +
jz loc_1005D9C  +
test dword ptr [ecx+1Ch] 2000h +
jz loc_1005D9C  +
push eax  +
push esi  +
push 2Ah  +
jmp loc_1005C7B  +
push edi  +
push 12Ch  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
push [ebp+dwMessageId]  +
push edi  +
push 1000h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_1005BD6  +
lea eax [ebp+var_274] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
call ds:SHStrDupW  +
cmp eax edi +
jge loc_1005BD6  +
mov ecx off_1009000 +
cmp ecx ebx +
jz loc_1005D9C  +
test dword ptr [ecx+1Ch] 2000h +
jz loc_1005D9C  +
push eax  +
push esi  +
push 29h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1004E59  +
jmp loc_1005D9C  +
cmp [ebp+var_280] edi +
jz loc_1005D9C  +
push [ebp+var_284]  +
lea ecx [ebp+var_264] +
call sub_10056F9  +
cmp [ebp+var_264] edi +
jnz loc_1005CE2  +
mov eax off_1009000 +
cmp eax ebx +
jz loc_1005D9C  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005D9C  +
push 80004002h  +
push esi  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
jmp loc_1005D8C  +
push [ebp+var_288]  +
lea ecx [ebp+var_260] +
call sub_10056F9  +
cmp [ebp+var_260] edi +
jnz loc_1005D21  +
mov eax off_1009000 +
cmp eax ebx +
jz loc_1005D8C  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005D8C  +
push 80004002h  +
push esi  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_1005D77  +
mov eax [ebp+var_264] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax edi +
jge loc_1005D4A  +
mov ecx off_1009000 +
cmp ecx ebx +
jz loc_1005D7C  +
test dword ptr [ecx+1Ch] 2000h +
jz loc_1005D7C  +
push eax  +
push esi  +
push 2Dh  +
jmp loc_1005D71  +
mov eax [ebp+var_260] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax edi +
jge loc_1005D7C  +
mov ecx off_1009000 +
cmp ecx ebx +
jz loc_1005D7C  +
test dword ptr [ecx+1Ch] 2000h +
jz loc_1005D7C  +
push eax  +
push esi  +
push 2Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1004E59  +
mov eax [ebp+var_260] +
cmp eax edi +
jz loc_1005D8C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_264] +
cmp eax edi +
jz loc_1005D9C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi ds:CoTaskMemFree +
cmp [ebp+pv] edi +
jz loc_1005DB8  +
push [ebp+pv]  +
call esi  +
mov [ebp+pv] edi +
cmp [ebp+var_278] edi +
jz loc_1005DCE  +
push [ebp+var_278]  +
call esi  +
mov [ebp+var_278] edi +
cmp [ebp+var_274] edi +
jz loc_1005DE4  +
push [ebp+var_274]  +
call esi  +
mov [ebp+var_274] edi +
mov eax [ebp+pperrinfo] +
cmp eax edi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1005DF7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10075A8  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1005E20  +
mov eax 80004003h +
jmp loc_1005E7B  +
push ebx  +
push edi  +
push 28h  +
mov [eax] esi +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
mov ebx [ebp+8] +
pop ecx  +
cmp eax esi +
jz loc_1005E42  +
push ebx  +
mov ecx eax +
call sub_1005748  +
mov esi eax +
test esi esi +
jz loc_1005E77  +
lea ecx [esi+8] +
mov [esi+24h] ebx +
call sub_1001F47  +
mov edi eax +
test edi edi +
jl loc_1005E6E  +
xor edi edi +
test edi edi +
jnz loc_1005E6E  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1005E77  +
push 1  +
mov ecx esi +
call sub_1005722  +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_1005E98  +
mov eax 80004003h +
jmp loc_1005F15  +
and dword ptr [eax] 0 +
push esi  +
push edi  +
push 58h  +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1005EBC  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1005893  +
mov esi eax +
jmp loc_1005EBE  +
xor esi esi +
test esi esi +
jz loc_1005F11  +
push ebx  +
lea ebx [esi+8] +
push ebx  +
call ds:InterlockedIncrement  +
lea ecx [esi+0Ch] +
call sub_1001F47  +
mov edi eax +
test edi edi +
jl loc_1005EEB  +
lea ecx [esi+34h] +
call sub_1001F47  +
mov edi eax +
test edi edi +
jl loc_1005EEB  +
xor edi edi +
push ebx  +
call ds:InterlockedDecrement  +
pop ebx  +
test edi edi +
jnz loc_1005F08  +
push [ebp+arg_8]  +
mov eax [esi] +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1005F11  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp-0Ch] edi +
mov [ebp-8] edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
mov [ebp-4] edi +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1005F72  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005F72  +
cmp byte ptr [eax+19h] 2 +
jb loc_1005F72  +
mov esi offset dword_1001834 +
push esi  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E02  +
mov eax off_1009000 +
jmp loc_1005F77  +
mov esi offset dword_1001834 +
mov ebx [ebp+8] +
cmp [ebp+18h] edi +
jnz loc_1005FAF  +
mov esi 80070057h +
cmp eax offset off_1009000 +
jz loc_1005FA7  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1005FA7  +
push esi  +
push offset dword_1001834  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
mov [ebp+18h] esi +
jmp loc_10062D6  +
lea ecx [ebx+54h] +
cmp [ecx] edi +
jz loc_1005FC2  +
mov dword ptr [ebp+18h] 80004004h +
jmp loc_10062EE  +
push dword ptr [ebp+18h]  +
call sub_10056DB  +
mov eax [ebx] +
lea ecx [ebp-18h] +
push ecx  +
push offset dword_1001A04  +
push ebx  +
call dword ptr [eax]  +
cmp eax edi +
mov [ebp+18h] eax +
jge loc_1006012  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10062BB  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10062BB  +
push dword ptr [ebp+18h]  +
push esi  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
jmp loc_10062BB  +
lea eax [ebp-14h] +
push eax  +
push offset dword_1001A34  +
call WinSync_1  +
cmp eax edi +
mov [ebp+18h] eax +
jge loc_100604C  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10062BB  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10062BB  +
push dword ptr [ebp+18h]  +
push esi  +
push 19h  +
jmp loc_1006002  +
***
lea eax [ebp-10h] +
push eax  +
push offset stru_1001874  +
push 1  +
push edi  +
push offset stru_1001A24  +
call ds:CoCreateInstance  +
cmp eax edi +
mov [ebp+18h] eax +
jge loc_1006092  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10062BB  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10062BB  +
push dword ptr [ebp+18h]  +
push esi  +
push 1Ah  +
jmp loc_1006002  +
***
lea eax [ebp-0Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
push dword ptr [ebp-10h]  +
call sub_10055EE  +
cmp eax edi +
mov [ebp+18h] eax +
jge loc_10060E0  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10062BB  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10062BB  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E28  +
jmp loc_10062BB  +
mov eax [ebp-0Ch] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
mov esi offset dword_1001884 +
push esi  +
push eax  +
call dword ptr [ecx]  +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
push dword ptr [ebp-10h]  +
call sub_10055EE  +
cmp eax edi +
mov [ebp+18h] eax +
jge loc_1006136  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10062BB  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10062BB  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+10h]  +
push offset dword_1001834  +
push 1Ch  +
jmp loc_10060D0  +
***
cmp [ebp-4] edi +
jnz loc_100614D  +
mov eax [ebp-8] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push esi  +
push eax  +
call dword ptr [ecx]  +
cmp [ebp-4] edi +
jz loc_100615B  +
push dword ptr [ebp+14h]  +
mov eax [ebp-4] +
push dword ptr [ebp-4]  +
mov eax [eax] +
call dword ptr [eax+0Ch]  +
mov [ebp+10h] edi +
cmp [ebp+10h] edi +
jnz loc_10062BB  +
lea eax [ebx+34h] +
push eax  +
call ds:EnterCriticalSection  +
cmp [ebx+28h] edi +
jnz loc_100623E  +
cmp [ebx+2Ch] edi +
mov esi [ebp+14h] +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
push 0  +
jz loc_100619E  +
xor eax eax +
pop eax  +
cmps   +
lea esi [ebx+50h] +
push esi  +
push dword ptr [ebp-0Ch]  +
setz al  +
push dword ptr [ebp-8]  +
jmp loc_10061B0  +
xor eax eax +
pop eax  +
cmps   +
lea esi [ebx+50h] +
push esi  +
push dword ptr [ebp-8]  +
setnz al  +
push dword ptr [ebp-0Ch]  +
inc eax  +
mov [ebx+30h] eax +
mov eax [ebp-14h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
lea edi [ebx+34h] +
push edi  +
mov [ebp+18h] eax +
call ds:LeaveCriticalSection  +
cmp dword ptr [ebp+18h] 0 +
jl loc_100624D  +
mov eax [esi] +
push dword ptr [ebp-18h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+18h] eax +
test eax eax +
jl loc_100626E  +
mov eax [esi] +
mov ecx [eax] +
push 0  +
push 0  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp+18h] eax +
test eax eax +
jl loc_100628F  +
push edi  +
call ds:EnterCriticalSection  +
cmp dword ptr [ebx+2Ch] 0 +
jz loc_1006213  +
mov dword ptr [ebp+10h] 1 +
jmp loc_1006230  +
push 0  +
mov ecx esi +
call sub_10056DB  +
mov eax [ebp-4] +
mov dword ptr [ebx+2Ch] 1 +
test eax eax +
jz loc_1006230  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
push edi  +
call ds:LeaveCriticalSection  +
xor edi edi +
jmp loc_100615E  +
***
lea eax [ebx+34h] +
push eax  +
call ds:LeaveCriticalSection  +
jmp loc_1005FB6  +
***
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10062B9  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10062B9  +
push dword ptr [ebp+18h]  +
push offset dword_1001834  +
push 1Dh  +
jmp loc_10062AE  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10062B9  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10062B9  +
push dword ptr [ebp+18h]  +
push offset dword_1001834  +
push 1Eh  +
jmp loc_10062AE  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10062B9  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10062B9  +
push dword ptr [ebp+18h]  +
push offset dword_1001834  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
xor edi edi +
cmp [ebp+18h] edi +
jl loc_10062CD  +
mov eax [ebx+54h] +
mov ecx [eax] +
push 64h  +
push eax  +
call dword ptr [ecx+0Ch]  +
jmp loc_10062EE  +
cmp dword ptr [ebp+18h] 80004004h +
jz loc_10062EE  +
cmp [ebx+54h] edi +
jz loc_10062EE  +
push dword ptr [ebp+18h]  +
mov ecx ebx +
push dword ptr [ebp-8]  +
push dword ptr [ebp-0Ch]  +
call sub_1005AA4  +
mov [ebp+18h] edi +
lea esi [ebx+34h] +
push esi  +
call ds:EnterCriticalSection  +
push edi  +
lea ecx [ebx+50h] +
call sub_10056DB  +
push esi  +
call ds:LeaveCriticalSection  +
cmp [ebp-0Ch] edi +
jz loc_1006317  +
push edi  +
lea eax [ebp-0Ch] +
push eax  +
call sub_1004D96  +
cmp [ebp-8] edi +
jz loc_1006326  +
push edi  +
lea eax [ebp-8] +
push eax  +
call sub_1004D96  +
cmp [ebp-18h] edi +
jz loc_1006335  +
push edi  +
lea eax [ebp-18h] +
push eax  +
call sub_1004D96  +
cmp [ebp-14h] edi +
jz loc_1006344  +
push edi  +
lea eax [ebp-14h] +
push eax  +
call sub_1004D96  +
cmp [ebp-10h] edi +
jz loc_1006353  +
push edi  +
lea eax [ebp-10h] +
push eax  +
call sub_1004D96  +
cmp [ebp-4] edi +
jz loc_1006362  +
push edi  +
lea eax [ebp-4] +
push eax  +
call sub_1004D96  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_100638F  +
test dword ptr [eax+1Ch] 2000h +
jz loc_100638F  +
cmp byte ptr [eax+19h] 2 +
jb loc_100638F  +
push offset dword_1001834  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E02  +
mov eax [ebp-4] +
cmp eax edi +
jz loc_100639C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
cmp eax edi +
jz loc_10063A9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
cmp eax edi +
jz loc_10063B6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
cmp eax edi +
jz loc_10063C3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
cmp eax edi +
jz loc_10063D0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-0Ch] +
cmp eax edi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10063E0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+18h] +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1006408  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
call sub_1005E85  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp loc_1004F49  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 66h  +
push dword_10090F4  +
call sub_1004A1E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax [ecx] +
mov ecx [eax] +
push offset dword_1001A84  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 4  +
***
add ecx 24h +
push ecx  +
push offset stru_1001874  +
push 1  +
push 0  +
push offset stru_1001A24  +
call ds:CoCreateInstance  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1006480  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+28h] +
test eax eax +
jz loc_100648D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+8] +
pop esi  +
jmp loc_1004F2F  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
test eax eax +
jz loc_10064AD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+4] +
pop esi  +
jmp loc_1004F2F  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1004DE0  +
and dword ptr [esi+24h] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_1004DE0  +
and dword ptr [esi+28h] 0 +
and dword ptr [esi+2Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10064BB  +
mov dword ptr [esi] offset off_1001A94 +
mov ecx dword_10090F4 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1006540  +
test esi esi +
jz loc_1006540  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001AAC  +
push ecx  +
call sub_1005763  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_100654D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001A94 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_10090F4 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_100649B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006588  +
test byte ptr [ebp+8] 1 +
jz loc_10065CC  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10064D5  +
mov dword ptr [esi] offset off_1001AE4 +
mov dword ptr [esi+4] offset off_1001AD4 +
mov ecx dword_10090F4 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_100662C  +
test esi esi +
jz loc_100662C  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+20h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006605  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001B08  +
push ecx  +
call sub_1005763  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov ecx [ecx+28h] +
mov eax 8000000Ah +
test ecx ecx +
jz loc_1006684  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+0Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov ecx [ecx+28h] +
mov eax 8000000Ah +
test ecx ecx +
jz loc_10066AD  +
push dword ptr [ebp+10h]  +
mov eax [ecx] +
push dword ptr [ebp+0Ch]  +
push ecx  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov ecx [ecx+28h] +
mov eax 8000000Ah +
test ecx ecx +
jz loc_10066D6  +
push dword ptr [ebp+10h]  +
mov eax [ecx] +
push dword ptr [ebp+0Ch]  +
push ecx  +
call dword ptr [eax+14h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov ecx [ecx+28h] +
mov eax 8000000Ah +
test ecx ecx +
jz loc_10066FF  +
push dword ptr [ebp+10h]  +
mov eax [ecx] +
push dword ptr [ebp+0Ch]  +
push ecx  +
call dword ptr [eax+18h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov ecx [ecx+28h] +
mov eax 8000000Ah +
test ecx ecx +
jz loc_1006722  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+1Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1006648  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100672B  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001AE4 +
mov dword ptr [esi+4] offset off_1001AD4 +
mov dword ptr [esi+8] 0C0000001h +
mov ecx dword_10090F4 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_100646E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006756  +
test byte ptr [ebp+8] 1 +
jz loc_10067A1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
xor ebx ebx +
lea edi [esi+24h] +
mov [ebp-4] ebx +
lea ecx [ebp-4] +
cmp [edi] ebx +
jz loc_1006816  +
push edi  +
call sub_10056BB  +
push dword ptr [ebp-4]  +
mov esi [esi+28h] +
mov eax [esi] +
push ebx  +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax+18h]  +
mov esi eax +
cmp esi ebx +
jge loc_1006857  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006890  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006890  +
push esi  +
push offset dword_1001A74  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
jmp loc_1006890  +
mov esi [esi+28h] +
mov eax [esi] +
push ecx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_1006838  +
cmp [ebp-4] ebx +
jnz loc_1006834  +
mov esi 80004005h +
cmp esi ebx +
jge loc_1006857  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006890  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006890  +
push esi  +
push offset dword_1001A74  +
push 0Dh  +
jmp loc_1006809  +
***
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jge loc_1006885  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006890  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006890  +
push esi  +
push offset dword_1001A74  +
push 0Eh  +
jmp loc_1006809  +
***
lea eax [ebp-4] +
push eax  +
mov ecx edi +
call sub_10056BB  +
mov eax [ebp-4] +
cmp eax ebx +
jz loc_100689D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_10068BE  +
mov eax 80004003h +
jmp loc_100693A  +
and dword ptr [eax] 0 +
push esi  +
push edi  +
push 28h  +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10068E2  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_10064F3  +
mov esi eax +
jmp loc_10068E4  +
xor esi esi +
test esi esi +
jz loc_1006936  +
push ebx  +
lea ebx [esi+4] +
push ebx  +
call ds:InterlockedIncrement  +
lea ecx [esi+8] +
call sub_1001F47  +
mov edi eax +
test edi edi +
jl loc_1006910  +
mov ecx esi +
call sub_1006450  +
mov edi eax +
test edi edi +
jl loc_1006910  +
xor edi edi +
push ebx  +
call ds:InterlockedDecrement  +
pop ebx  +
test edi edi +
jnz loc_100692D  +
push [ebp+arg_8]  +
mov eax [esi] +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1006936  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ebx esi +
jnz loc_100695A  +
mov eax 80004003h +
jmp loc_10069A0  +
push edi  +
push 30h  +
mov [ebx] esi +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_1006978  +
push esi  +
mov ecx eax +
call sub_10065D8  +
mov esi eax +
test esi esi +
jz loc_100699B  +
lea ecx [esi+0Ch] +
call sub_1001F47  +
mov edi eax +
test edi edi +
jl loc_1006990  +
xor edi edi +
test edi edi +
jz loc_100699B  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+20h]  +
xor esi esi +
mov eax edi +
mov [ebx] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
and dword ptr [edi] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_1006943  +
mov ebx eax +
test ebx ebx +
jge loc_1006A0E  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10069F5  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10069F5  +
push ebx  +
push offset dword_1001A74  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
mov esi [ebp+var_4] +
test esi esi +
jz loc_1006A05  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+20h]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
mov esi [ebp+var_4] +
mov eax [esi] +
push edi  +
push offset dword_1001A84  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jge loc_1006A4C  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_10069F8  +
test dword ptr [eax+1Ch] 2000h +
jz loc_10069F8  +
push ebx  +
push offset dword_1001A74  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
jmp loc_10069F8  +
push [ebp+arg_0]  +
lea ecx [esi+2Ch] +
call sub_10056DB  +
push [ebp+arg_4]  +
lea ecx [esi+28h] +
call sub_10056DB  +
xor esi esi +
jmp loc_10069F8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+14h] +
xor ebx ebx +
push edi  +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
cmp esi ebx +
jnz loc_1006AB9  +
mov eax off_1009000 +
mov esi 80004003h +
cmp eax offset off_1009000 +
jz loc_1006AB2  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006AB2  +
push esi  +
push offset dword_1001A74  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
mov edi esi +
jmp loc_1006C98  +
mov eax [ebp+8] +
lea edx [ebp-8] +
push edx  +
push dword ptr [ebp+0Ch]  +
mov [esi] ebx +
mov eax [eax+24h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov edi eax +
cmp edi ebx +
jge loc_1006B09  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006C98  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006C98  +
push edi  +
push offset dword_1001A74  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
jmp loc_1006C98  +
mov eax [ebp-8] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
cmp edi ebx +
jge loc_1006B45  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006C98  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006C98  +
push edi  +
push offset dword_1001A74  +
push 11h  +
jmp loc_1006AF9  +
***
mov [ebp+14h] ebx +
cmp [ebp+10h] ebx +
jz loc_1006BB6  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp+14h] +
push edx  +
push ebx  +
push ebx  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi ebx +
jge loc_1006B97  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006C8B  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006C8B  +
push edi  +
push offset dword_1001A74  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
jmp loc_1006C8B  +
cmp [ebp+14h] ebx +
jnz loc_1006BA6  +
mov edi 80004005h +
jmp loc_1006C98  +
push esi  +
lea ecx [ebp+14h] +
call sub_1006433  +
mov edi eax +
jmp loc_1006C8B  +
xor eax eax +
lea edi [ebp-18h] +
stos   +
stos   +
stos   +
lea edx [ebp-18h] +
push edx  +
stos   +
mov eax [ebp-8] +
push offset dword_1001858  +
mov [ebp+8] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi ebx +
jge loc_1006C01  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006C8B  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006C8B  +
push edi  +
push offset dword_1001A74  +
push 13h  +
jmp loc_1006B87  +
***
lea eax [ebp+8] +
push eax  +
lea eax [ebp-18h] +
push eax  +
call ds:PropVariantToUInt32  +
mov edi eax +
lea eax [ebp-18h] +
push eax  +
call ds:PropVariantClear  +
cmp edi ebx +
jge loc_1006C41  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006C8B  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006C8B  +
push edi  +
push offset dword_1001A74  +
push 14h  +
jmp loc_1006B87  +
***
test byte ptr [ebp+8] 4 +
jz loc_1006C4E  +
mov edi 8000FFFFh +
jmp loc_1006C8B  +
lea eax [ebp+14h] +
push eax  +
push ebx  +
push dword ptr [ebp-4]  +
call sub_10069AB  +
mov edi eax +
cmp edi ebx +
jge loc_1006C83  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006C8B  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006C8B  +
push edi  +
push offset dword_1001A74  +
push 15h  +
jmp loc_1006B87  +
***
mov eax [ebp+14h] +
mov [ebp+14h] ebx +
mov [esi] eax +
mov eax [ebp+14h] +
cmp eax ebx +
jz loc_1006C98  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-4] +
cmp eax ebx +
jz loc_1006CA5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
cmp eax ebx +
jz loc_1006CB2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp-4] eax +
mov ecx [ebp+10h] +
mov edx [ebp+0Ch] +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp-38h] +
stos   +
stos   +
xor esi esi +
stos   +
mov [ebp-28h] ecx +
mov [ebp-18h] esi +
mov [ebp-20h] esi +
stos   +
cmp ecx esi +
jnz loc_1006D25  +
mov eax off_1009000 +
mov esi 80004003h +
cmp eax offset off_1009000 +
jz loc_1006E85  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006E85  +
push esi  +
push offset dword_1001A74  +
push 16h  +
jmp loc_1006E7A  +
mov [ecx] esi +
mov eax [ebx+24h] +
mov ecx [eax] +
lea esi [ebp-18h] +
push esi  +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
test esi esi +
jge loc_1006D65  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006E85  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006E85  +
push esi  +
push offset dword_1001A74  +
push 17h  +
jmp loc_1006E7A  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-38h] +
push edx  +
push offset dword_1001844  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1006E16  +
lea eax [ebp-14h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call ds:PropVariantToGUID  +
test eax eax +
jl loc_1006E16  +
push 4  +
pop ecx  +
lea edi [ebp-14h] +
mov esi offset dword_1001BFC +
xor eax eax +
cmps   +
jz loc_1006E16  +
mov ebx [ebx+24h] +
and [ebp-1Ch] eax +
mov eax [ebx] +
lea ecx [ebp-1Ch] +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
push ebx  +
call dword ptr [eax+30h]  +
test eax eax +
jl loc_1006E09  +
lea eax [ebp-38h] +
push eax  +
call ds:PropVariantClear  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-38h] +
push edx  +
push offset dword_1001858  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1006E09  +
and dword ptr [ebp-24h] 0 +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call ds:PropVariantToUInt32  +
test eax eax +
jl loc_1006E09  +
test byte ptr [ebp-24h] 8 +
jnz loc_1006E09  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+20h]  +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_1006E16  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [ebp-20h] 0 +
push dword ptr [ebp-28h]  +
jnz loc_1006E4C  +
lea ecx [ebp-18h] +
call sub_1006433  +
mov esi eax +
test esi esi +
jge loc_1006E85  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006E85  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006E85  +
push esi  +
push offset dword_1001A74  +
push 18h  +
jmp loc_1006E7A  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-20h]  +
call sub_10069AB  +
mov esi eax +
test esi esi +
jge loc_1006E85  +
mov eax off_1009000 +
cmp eax offset off_1009000 +
jz loc_1006E85  +
test dword ptr [eax+1Ch] 2000h +
jz loc_1006E85  +
push esi  +
push offset dword_1001A74  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E59  +
lea eax [ebp-38h] +
push eax  +
call ds:PropVariantClear  +
mov eax [ebp-20h] +
test eax eax +
jz loc_1006E9C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
test eax eax +
jz loc_1006EA9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp-4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10075A8  +
leave   +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_1006EDD  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_10068AB  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_1004F49  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
push 67h  +
push dword_10090F4  +
call sub_1004A1E  +
pop ebp  +
retn 4  +
***
mov dword ptr [esi+4] 1000000h +
mov dword ptr [esi+8] offset off_1007DD0 +
mov dword ptr [esi+0Ch] offset dword_1007DD8 +
call sub_1001EF7  +
test eax eax +
jge loc_1006F4F  +
mov byte_10090E8 1 +
jmp loc_1006F55  +
mov dword ptr [esi] 28h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1006F74  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_1006F96  +
mov eax 80070057h +
jmp loc_1006FA7  +
cmp dword ptr [eax] 2Ch +
jnz loc_1006F8F  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1001EF7  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1006FCA  +
cmp eax [ecx+4] +
jge loc_1006FCA  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1007019  +
mov eax 80070057h +
jmp loc_1007060  +
mov eax [esi] +
cmp eax edi +
jz loc_100705E  +
cmp eax 2Ch +
jnz loc_1007012  +
cmp [esi+24h] edi +
jle loc_1007049  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_1006FB0  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_100702D  +
pop ebx  +
lea ecx [esi+20h] +
call sub_1006F5F  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1001EE0  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
push eax  +
call ds:DeleteCriticalSection  +
lea ecx [esi+30h] +
pop esi  +
jmp sub_1006F5F  +
***
add eax offset byte_10090E8 +
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_100706B  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_1007149  +
cmp dword ptr [ebp-94h] 5 +
jb loc_100716A  +
jmp loc_1007166  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_100716A  +
cmp dword ptr [ebp-94h] 4 +
ja loc_1007166  +
jnz loc_100716A  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_100716A  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_1001B4C +
call sub_1001EF7  +
test eax eax +
jge loc_100718B  +
mov byte_10090E8 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10075A8  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10071DA  +
test eax eax +
jnz loc_10071DF  +
mov ecx [esi] +
test ecx ecx +
jz loc_10071D7  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10071CB  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1009208 +
push offset dword_10091F8  +
push dword_1009204  +
mov dword_10091F8 eax +
push offset unk_10091E8  +
push offset unk_10091EC  +
push offset unk_10091E4  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10091F4 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1007282  +
cmp eax esi +
jnz loc_1007275  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1007285  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100725C  +
xor esi esi +
inc esi  +
mov eax dword_1009534 +
cmp eax esi +
jnz loc_1007298  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10072C7  +
mov eax dword_1009534 +
test eax eax +
jnz loc_10072C1  +
mov dword_1009534 esi +
push offset dword_1001218  +
push offset dword_100120C  +
call sub_10071BE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10072C7  +
jmp loc_10073EB  +
mov dword_1009200 esi +
mov eax dword_1009534 +
cmp eax esi +
jnz loc_10072EB  +
push offset dword_1001208  +
push offset dword_10011F0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1009534 2 +
cmp [ebp+var_20] ebx +
jnz loc_10072F8  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1009544 ebx +
jz loc_1007319  +
push offset dword_1009544  +
call sub_10078A9  +
pop ecx  +
test eax eax +
jz loc_1007319  +
push ebx  +
push 2  +
push ebx  +
call dword_1009544  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_10073EB  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_100733E  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1007353  +
cmp cx 20h +
ja loc_1007353  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_100733E  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100735F  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1007362  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_10091FC eax +
cmp dword_10091F0 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1007394  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1007328  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_10091FC eax +
xor ebx ebx +
cmp dword_10091F0 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1009200 ebx +
jnz loc_10073D6  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10091FC +
jmp loc_10073F7  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1007414  +
xor eax eax +
jmp loc_1007461  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1007410  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100744E  +
cmp ecx 20Bh +
jnz loc_1007410  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1007410  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100745C  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1007410  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_10091F0 eax +
call sub_10079AF  +
push eax  +
call ds:__set_app_type  +
or dword_100953C 0FFFFFFFFh +
or dword_1009540 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1009210 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100920C +
mov [eax] ecx +
call sub_1004DD0  +
cmp dword_1009078 0 +
jnz loc_10074BA  +
push offset sub_1004DD0  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1007931  +
xor eax eax +
retn   +
***
call sub_10079EE  +
jmp ___tmainCRTStartup  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10075A8  +
push offset dword_100904C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
cmp ecx dword_100904C +
jnz loc_10075B3  +
retn 0  +
jmp loc_1007A8F  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_1007632  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_1007632  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_1007C2C  +
add esp 14h +
xor eax eax +
jmp loc_1007641  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1007661  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
jmp ds:_purecall  +
***
push offset loc_100757E  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_100904C +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10075A8  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10077EE  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10077EE  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10077E8  +
cmp eax 19930521h +
jz loc_10077E8  +
cmp eax 19930522h +
jz loc_10077E8  +
cmp eax 1994000h +
jnz loc_10077EE  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_10077B0+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1007836  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1007832  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100789D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1007895  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100789F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1007885  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1007820  +
pop ecx  +
test eax eax +
jz loc_1007906  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1007860  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007906  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100790F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10079A2  +
cmp ecx 0FFFFFFFFh +
jz loc_10079A2  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100799B  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100799B  +
cmp edx 10000000h +
jnb loc_100799B  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100799B  +
jmp loc_1007996  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10079E4  +
push eax  +
call sub_1007949  +
test eax eax +
jz loc_10079E4  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10079D9  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10079E4  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100904C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1007A20  +
test eax ebx +
jz loc_1007A20  +
not eax  +
mov dword_1009050 eax +
jmp loc_1007A7B  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1007A67  +
test dword_100904C ebx +
jnz loc_1007A6C  +
mov esi 0BB40E64Fh +
mov dword_100904C esi +
not esi  +
mov dword_1009050 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1009318 eax +
mov dword_1009314 ecx +
mov dword_1009310 edx +
mov dword_100930C ebx +
mov dword_1009308 esi +
mov dword_1009304 edi +
mov word_1009330 ss +
mov word_1009324 cs +
mov word_1009300 ds +
mov word_10092FC es +
mov word_10092F8 fs +
mov word_10092F4 gs +
pushf   +
pop dword_1009328  +
mov eax [ebp+0] +
mov dword_100931C eax +
mov eax [ebp+4] +
mov dword_1009320 eax +
lea eax [ebp+8] +
mov dword_100932C eax +
mov eax [ebp-320h] +
mov dword_1009268 10001h +
mov eax dword_1009320 +
mov dword_1009224 eax +
mov dword_1009218 0C0000409h +
mov dword_100921C 1 +
mov eax dword_100904C +
mov [ebp-328h] eax +
mov eax dword_1009050 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_100904C +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10075A8  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1007B81  +
***
jmp fword ptr (byte_10089FF-1008A12h)[eax]  +
***
jmp fword ptr [eax+0Bh]  +
***
jmp sub_10039C6  +
***
mov ecx offset unk_100911C +
jmp sub_1002013  +
***
retn 86h  +
***
