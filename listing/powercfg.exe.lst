pop edi  +
mov ecx 0F7767516h +
inc esp  +
mov word ptr [ebx+6] ss +
push ss  +
jg loc_1001866  +
int 3  +
cdq   +
and eax eax +
or edi [eax+ebp*4] +
enter 4E07h 0A9h +
jnb near ptr loc_100189D+1  +
adc al 0CBh +
retf   +
***
cdq   +
dec ecx  +
cmc   +
xlat   +
or ecx ebx +
loop near ptr loc_1001866+1  +
sti   +
icebp   +
pusha   +
test eax 889F4165h +
push eax  +
jns near ptr loc_1001884+3  +
into   +
xchg eax esi +
inc edi  +
out dx al +
adc al [eax] +
inc ecx  +
nop   +
pop ebp  +
dec ebx  +
wait   +
ja near ptr loc_10018D0+6  +
pop edi  +
mov edx 0C442148Bh +
loop near ptr loc_10018C0+3  +
movs dword ptr es:[di] dword ptr [si] +
call near ptr 6BB162D4h  +
loopne near ptr loc_10018D0+4  +
out 69h eax +
jnz near ptr loc_1001904+2  +
dec ecx  +
mov [eax-0FFAA5AFh] cl +
and esp [ecx+ebp+6Dh] +
lods   +
xchg eax esp +
into   +
jnb near ptr loc_1001873+2  +
inc ecx  +
sbb byte ptr [edi+21BA6363h] 0B4h +
jle loc_1001862  +
push ds  +
xchg eax edi +
dec edi  +
mov ebp 0A84455EEh +
ficomp  word ptr [esi+730E0459h] +
inc edi  +
mov ds:9C7648EFh eax +
fnstsw  word ptr [esi] +
dec esi  +
mov ch 66h +
push eax  +
stc   +
sub [eax] edi +
bound eax [eax-69669440h] +
push eax  +
lods   +
in al dx +
inc edi  +
xchg eax edx +
cmp ebp [edi+41h] +
xchg ecx [ebp-27h] +
jmp near ptr loc_1001957+5  +
***
retf   +
***
xlat   +
fsub  dword ptr [esi-66h] +
test dword ptr [edi-7] 5AA2B54Eh +
xor ch [edx-5Ch] +
imul ecx ebx +
cmp al 4Bh +
mov bl 0FEh +
aaa   +
inc esi  +
and ecx ebp +
iret   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi SetupDiGetDeviceRegistryPropertyW +
push edi  +
xor edi edi +
lea eax [ebp+PropertyBufferSize] +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+Property]  +
mov [ebp+PropertyBufferSize] edi +
push [ebp+DeviceInfoData]  +
push [ebp+DeviceInfoSet]  +
call esi  +
add [ebp+PropertyBufferSize] 2 +
push [ebp+PropertyBufferSize]  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_1002D4E  +
push edi  +
push [ebp+PropertyBufferSize]  +
push ebx  +
push edi  +
push [ebp+Property]  +
push [ebp+DeviceInfoData]  +
push [ebp+DeviceInfoSet]  +
call esi  +
test eax eax +
jnz loc_1002D4E  +
push ebx  +
call ds:LocalFree  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx dword ptr [ebp+arg_0] +
push edi  +
lea edi [ebx+8] +
cmp dword ptr [edi] 0 +
jnz loc_1002D82  +
push 52Bh  +
call sub_100BA15  +
push eax  +
call ds:wprintf  +
pop ecx  +
jmp loc_1002DEA  +
push esi  +
push 528h  +
call sub_100BA15  +
mov esi ds:wprintf +
push eax  +
call esi  +
pop ecx  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
call sub_1006556  +
mov edi eax +
test edi edi +
jz loc_1002DC0  +
push edi  +
call esi  +
cmp dword ptr [ebp+arg_0] 0 +
pop ecx  +
jz loc_1002DB8  +
push edi  +
call ds:LocalFree  +
push offset word_100132C  +
call esi  +
pop ecx  +
cmp dword ptr [ebx+1Ch] 0 +
jz loc_1002DE9  +
push 529h  +
call sub_100BA15  +
push eax  +
call esi  +
mov eax [ebx+1Ch] +
pop ecx  +
lea eax [eax+ebx+8] +
push eax  +
call sub_10052BE  +
push offset word_100132C  +
call esi  +
pop ecx  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
mov eax ecx +
sub eax 0 +
jz loc_1002E31  +
dec eax  +
jz loc_1002E2A  +
dec eax  +
dec eax  +
jz loc_1002E23  +
push ecx  +
push 524h  +
call sub_100BA15  +
push eax  +
call ds:wprintf  +
pop ecx  +
jmp loc_1002E42  +
push 527h  +
jmp loc_1002E36  +
push 526h  +
jmp loc_1002E36  +
push 525h  +
call sub_100BA15  +
push eax  +
call ds:wprintf  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 438h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi 2000h +
push esi  +
xor edi edi +
push 40h  +
mov [ebp+hMem] edi +
call ds:LocalAlloc  +
mov ebx eax +
mov [ebp+var_420] ebx +
cmp ebx edi +
jz loc_100303C  +
push esi  +
push ebx  +
push edi  +
push edi  +
push 32h  +
call ds:NtPowerInformation  +
cmp eax edi +
jge loc_1002EB6  +
cmp eax 0C0000022h +
jnz loc_1003030  +
push 14h  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1003030  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov eax [ebp+SystemTimeAsFileTime.dwLowDateTime] +
mov edi ds:wprintf +
mov [ebp+var_418] eax +
mov eax [ebp+SystemTimeAsFileTime.dwHighDateTime] +
mov esi ebx +
mov [ebp+var_414] eax +
mov ebx 400h +
mov eax [esi+8] +
or eax [esi+0Ch] +
jz loc_1003001  +
lea ecx [ebp+var_41C] +
lea eax [esi+14h] +
push ecx  +
push eax  +
call sub_1006556  +
mov [ebp+hMem] eax +
mov eax [ebp+var_418] +
add [esi+8] eax +
mov eax [ebp+var_414] +
adc [esi+0Ch] eax +
mov eax [esi+8] +
mov [ebp+FileTime.dwLowDateTime] eax +
mov eax [esi+0Ch] +
mov [ebp+FileTime.dwHighDateTime] eax +
lea eax [ebp+FileTime] +
push eax  +
push eax  +
call ds:FileTimeToLocalFileTime  +
lea eax [ebp+Time] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
call ds:FileTimeToSystemTime  +
push 100h  +
lea eax [ebp+DateStr] +
push eax  +
push 0  +
lea eax [ebp+Time] +
push eax  +
push 1  +
push ebx  +
call ds:GetDateFormatW  +
push 100h  +
lea eax [ebp+TimeStr] +
push eax  +
push 0  +
lea eax [ebp+Time] +
push eax  +
push 0  +
push ebx  +
call ds:GetTimeFormatW  +
lea eax [ebp+DateStr] +
push eax  +
lea eax [ebp+TimeStr] +
push eax  +
push [ebp+hMem]  +
push 5D6h  +
call sub_100BA15  +
push eax  +
call edi  +
add esp 10h +
cmp dword ptr [ebp+var_41C] 0 +
jz loc_1002FC5  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax [esi+28h] +
test eax eax +
jz loc_1002FF7  +
lea eax [eax+esi+14h] +
push 5D7h  +
mov [ebp+hMem] eax +
call sub_100BA15  +
push eax  +
call edi  +
pop ecx  +
push [ebp+hMem]  +
call sub_10052BE  +
push offset word_100132C  +
call edi  +
pop ecx  +
mov [ebp+hMem] 1 +
mov eax [esi] +
test eax eax +
jz loc_1003016  +
push offset word_100132C  +
add esi eax +
call edi  +
pop ecx  +
jmp loc_1002EE8  +
cmp [ebp+hMem] 0 +
jnz loc_100302D  +
push 5D8h  +
call sub_100BA15  +
push eax  +
call edi  +
pop ecx  +
xor edi edi +
inc edi  +
push [ebp+var_420]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
mov edx 80070057h +
jz loc_100306E  +
cmp ecx 7FFFFFFFh +
jbe loc_1003070  +
mov eax edx +
test eax eax +
jl loc_10030CF  +
push edi  +
mov edi [ebp+arg_C] +
shr edi 1 +
cmp edi 7FFFFFFEh +
jbe loc_100308E  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_10030CE  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10030BE  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10030BA  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_10030BA  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_10030A2  +
test esi esi +
jnz loc_10030C5  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
movzx edi word ptr [esi+8] +
lea ebx [edi+2] +
push ebx  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+DeviceInstanceId] eax +
test eax eax +
jz loc_1003225  +
push edi  +
add esi 0Ah +
push esi  +
push ebx  +
push eax  +
call sub_1003052  +
push [ebp+DeviceInstanceId]  +
push 520h  +
call sub_100BA15  +
mov esi ds:wprintf +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
xor ebx ebx +
push ebx  +
push ebx  +
call SetupDiCreateDeviceInfoList  +
mov [ebp+DeviceInfoSet] eax +
cmp eax 0FFFFFFFFh +
jz loc_100321C  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+DeviceInfoData] +
stos   +
lea eax [ebp+DeviceInfoData] +
push eax  +
push ebx  +
push ebx  +
push [ebp+DeviceInstanceId]  +
mov [ebp+DeviceInfoData.cbSize] 1Ch +
push [ebp+DeviceInfoSet]  +
call SetupDiOpenDeviceInfoW  +
test eax eax +
jz loc_1003213  +
push 0Ch  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push [ebp+DeviceInfoSet]  +
call sub_1002CF5  +
mov [ebp+var_30] eax +
cmp eax ebx +
jnz loc_100318A  +
mov eax offset dword_1001330 +
push eax  +
push 521h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
push ebx  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push [ebp+DeviceInfoSet]  +
call sub_1002CF5  +
mov [ebp+hMem] eax +
cmp eax ebx +
jnz loc_10031B3  +
mov eax offset dword_1001330 +
push eax  +
push 522h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
push 0Bh  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push [ebp+DeviceInfoSet]  +
call sub_1002CF5  +
mov edi eax +
cmp edi ebx +
jnz loc_10031DC  +
mov eax offset dword_1001330 +
push eax  +
push 523h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
cmp edi ebx +
jz loc_10031F7  +
push edi  +
call ds:LocalFree  +
cmp [ebp+hMem] ebx +
jz loc_1003205  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+var_30] ebx +
jz loc_1003213  +
push [ebp+var_30]  +
call ds:LocalFree  +
push [ebp+DeviceInfoSet]  +
call SetupDiDestroyDeviceInfoList  +
push [ebp+DeviceInstanceId]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax ecx +
sub eax 0 +
jz loc_100329D  +
dec eax  +
jz loc_1003283  +
dec eax  +
jz loc_1003269  +
push ecx  +
push 51Ch  +
call sub_100BA15  +
push eax  +
call ds:wprintf  +
pop ecx  +
pop ecx  +
jmp loc_10032B5  +
push 51Eh  +
call sub_100BA15  +
push eax  +
call ds:wprintf  +
pop ecx  +
push esi  +
call sub_1002D5C  +
jmp loc_10032B5  +
push 51Fh  +
call sub_100BA15  +
push eax  +
call ds:wprintf  +
pop ecx  +
push esi  +
call sub_1002DF5  +
jmp loc_10032B5  +
push 51Dh  +
call sub_100BA15  +
push eax  +
call ds:wprintf  +
pop ecx  +
push esi  +
call sub_10030D8  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov esi 400h +
xor edi edi +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_1003300  +
push esi  +
push ebx  +
push 0  +
push 0  +
push 23h  +
call ds:NtPowerInformation  +
cmp eax 0C0000023h +
jnz loc_1003307  +
push ebx  +
call ds:LocalFree  +
add esi esi +
jmp loc_10032D1  +
xor edi edi +
jmp loc_10033AC  +
test eax eax +
jl loc_10033AC  +
push dword ptr [ebx]  +
push 518h  +
call sub_100BA15  +
mov edi ds:wprintf +
push eax  +
call edi  +
and [ebp+var_8] 0 +
cmp dword ptr [ebx] 0 +
pop ecx  +
pop ecx  +
jbe loc_10033A9  +
lea eax [ebx+4] +
mov [ebp+var_10] eax +
push [ebp+var_8]  +
push 519h  +
call sub_100BA15  +
push eax  +
call edi  +
mov eax [ebp+var_10] +
mov esi [eax] +
pop ecx  +
pop ecx  +
add esi ebx +
push dword ptr [esi]  +
push 51Ah  +
call sub_100BA15  +
push eax  +
call edi  +
and [ebp+var_4] 0 +
cmp dword ptr [esi] 0 +
pop ecx  +
pop ecx  +
jbe loc_100339B  +
lea eax [esi+4] +
mov [ebp+var_C] eax +
push [ebp+var_4]  +
push 51Bh  +
call sub_100BA15  +
push eax  +
call edi  +
mov eax [ebp+var_C] +
mov eax [eax] +
pop ecx  +
pop ecx  +
add eax esi +
push eax  +
call sub_100323B  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add [ebp+var_C] 4 +
cmp eax [esi] +
jb loc_100336E  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add [ebp+var_10] 4 +
cmp eax [ebx] +
jb loc_1003335  +
xor edi edi +
inc edi  +
test ebx ebx +
jz loc_10033B7  +
push ebx  +
call ds:LocalFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor edi edi +
mov [ebp+hMem] ebx +
xor esi esi +
add esi 1000h +
cmp [ebp+hMem] ebx +
jz loc_10033EB  +
push [ebp+hMem]  +
call ds:LocalFree  +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax ebx +
jz loc_10036BC  +
push esi  +
push eax  +
push ebx  +
push ebx  +
push 2Dh  +
call ds:NtPowerInformation  +
cmp eax 0C0000023h +
jz loc_10033D7  +
cmp eax ebx +
jz loc_1003432  +
cmp eax 0C0000022h +
jnz loc_10036B3  +
push 14h  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_10036B3  +
push 5A4h  +
mov [ebp+var_C] ebx +
call sub_100BA15  +
mov esi ds:__iob_func +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov eax [ebp+hMem] +
mov [ebp+var_8] ebx +
mov edi offset word_100132C +
cmp [eax] ebx +
jbe loc_10034EB  +
add eax 4 +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
mov ebx [eax] +
add ebx [ebp+hMem] +
cmp dword ptr [ebx+4] 0 +
jz loc_10034D3  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebx+10h] +
push eax  +
call sub_1006556  +
push eax  +
mov [ebp+var_C] eax +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
cmp dword ptr [ebp+var_10] 0 +
jz loc_10034A3  +
push [ebp+var_C]  +
call ds:LocalFree  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov eax [ebx+24h] +
test eax eax +
jz loc_10034CC  +
lea eax [ebx+eax+10h] +
push eax  +
call sub_10052BE  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov [ebp+var_C] 1 +
inc [ebp+var_8]  +
mov eax [ebp+hMem] +
mov ecx [ebp+var_8] +
add [ebp+var_14] 4 +
cmp ecx [eax] +
jb loc_100346A  +
xor ebx ebx +
cmp [ebp+var_C] ebx +
jnz loc_1003501  +
push 5A8h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push 5A5h  +
mov [ebp+var_C] ebx +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov eax [ebp+hMem] +
mov [ebp+var_8] ebx +
cmp [eax] ebx +
jbe loc_10035BB  +
add eax 4 +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
mov ebx [eax] +
add ebx [ebp+hMem] +
cmp dword ptr [ebx+8] 0 +
jz loc_10035A3  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebx+10h] +
push eax  +
call sub_1006556  +
push eax  +
mov [ebp+var_C] eax +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
cmp dword ptr [ebp+var_10] 0 +
jz loc_1003573  +
push [ebp+var_C]  +
call ds:LocalFree  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov eax [ebx+24h] +
test eax eax +
jz loc_100359C  +
lea eax [ebx+eax+10h] +
push eax  +
call sub_10052BE  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov [ebp+var_C] 1 +
inc [ebp+var_8]  +
mov eax [ebp+hMem] +
mov ecx [ebp+var_8] +
add [ebp+var_14] 4 +
cmp ecx [eax] +
jb loc_100353A  +
xor ebx ebx +
cmp [ebp+var_C] ebx +
jnz loc_10035D1  +
push 5A8h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push 5A6h  +
mov [ebp+var_C] ebx +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov eax [ebp+hMem] +
mov [ebp+var_8] ebx +
cmp [eax] ebx +
jbe loc_100368E  +
add eax 4 +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
mov ebx [eax] +
add ebx [ebp+hMem] +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_1003677  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebx+10h] +
push eax  +
call sub_1006556  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_1003653  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
cmp dword ptr [ebp+var_10] 0 +
jz loc_1003647  +
push [ebp+var_C]  +
call ds:LocalFree  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov eax [ebx+24h] +
test eax eax +
jz loc_1003670  +
lea eax [ebx+eax+10h] +
push eax  +
call sub_10052BE  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov [ebp+var_C] 1 +
inc [ebp+var_8]  +
mov eax [ebp+hMem] +
mov ecx [ebp+var_8] +
add [ebp+var_14] 4 +
cmp ecx [eax] +
jb loc_100360A  +
cmp [ebp+var_C] 0 +
jnz loc_10036A4  +
push 5A8h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
xor edi edi +
inc edi  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
lea eax [ebp+cbMaxValueLen] +
push eax  +
lea eax [ebp+cbMaxValueNameLen] +
push eax  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push [ebp+hKey]  +
xor esi esi +
call ds:RegQueryInfoKeyW  +
cmp eax edi +
jnz loc_10037D7  +
mov eax [ebp+cbMaxValueNameLen] +
lea eax [eax+eax+2] +
push eax  +
push 40h  +
mov [ebp+cbValueName] eax +
call ds:LocalAlloc  +
mov [ebp+lpString] eax +
cmp eax edi +
jz loc_10037D7  +
push ebx  +
push 4  +
pop ebx  +
cmp [ebp+cbMaxValueLen] ebx +
ja loc_10037CD  +
mov esi ds:__iob_func +
mov [ebp+dwIndex] edi +
mov eax [ebp+cbMaxValueNameLen] +
inc eax  +
mov [ebp+cbValueName] eax +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+cbValueName] +
push eax  +
push [ebp+lpString]  +
mov [ebp+cbData] ebx +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ds:RegEnumValueW  +
mov [ebp+var_20] eax +
cmp eax edi +
jnz loc_10037BE  +
cmp [ebp+cbData] ebx +
jnz loc_10037BE  +
push [ebp+lpString]  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
test [ebp+Data] 1 +
jz loc_1003783  +
push offset String  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
test [ebp+Data] 2 +
jz loc_1003799  +
push offset aSystem  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
test [ebp+Data] bl +
jz loc_10037AE  +
push offset aAwaymode  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset word_100132C  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
inc [ebp+dwIndex]  +
cmp [ebp+var_20] edi +
jz loc_100372C  +
xor esi esi +
inc esi  +
push [ebp+lpString]  +
call ds:LocalFree  +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+phkResult] 0FFFFFFFFh +
and [ebp+var_10] 0 +
or [ebp+hKey] 0FFFFFFFFh +
and dword ptr [ebp+Data] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [esi] +
push edi  +
xor edi edi +
inc edi  +
cmp [ebp+arg_8] edi +
jbe loc_1003851  +
push offset aSystem_0  +
push dword ptr [esi+edi*4]  +
call sub_1003F3B  +
test al al +
jz loc_1003821  +
or dword ptr [ebp+Data] 2 +
push offset aAwaymode_0  +
push dword ptr [esi+edi*4]  +
call sub_1003F3B  +
test al al +
jz loc_1003836  +
or dword ptr [ebp+Data] 4 +
push offset aDisplay_0  +
push dword ptr [esi+edi*4]  +
call sub_1003F3B  +
test al al +
jz loc_100384B  +
or dword ptr [ebp+Data] 1 +
inc edi  +
cmp edi [ebp+arg_8] +
jb loc_100380C  +
lea eax [ebp+hKey] +
push eax  +
mov esi 20006h +
push esi  +
push 0  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
xor edi edi +
test eax eax +
jnz loc_10038C3  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
push edi  +
push esi  +
push edi  +
push edi  +
push edi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_10038C3  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push edi  +
push ebx  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
test eax eax +
jnz loc_10038C3  +
call PowerApplyPowerRequestOverride  +
test eax eax +
jnz loc_10038C3  +
cmp dword ptr [ebp+Data] edi +
jnz loc_10038BC  +
push ebx  +
push [ebp+phkResult]  +
call ds:RegDeleteValueW  +
mov [ebp+var_10] 1 +
cmp [ebp+hKey] 0FFFFFFFFh +
mov esi ds:RegCloseKey +
jz loc_10038DD  +
cmp [ebp+hKey] edi +
jz loc_10038DD  +
push [ebp+hKey]  +
call esi  +
or [ebp+hKey] 0FFFFFFFFh +
cmp [ebp+phkResult] 0FFFFFFFFh +
jz loc_10038ED  +
cmp [ebp+phkResult] edi +
jz loc_10038ED  +
push [ebp+phkResult]  +
call esi  +
mov eax [ebp+var_10] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
or [ebp+phkResult] 0FFFFFFFFh +
and [ebp+var_8] 0 +
or [ebp+hKey] 0FFFFFFFFh +
push ebx  +
push edi  +
mov edi ds:RegOpenKeyExW +
lea eax [ebp+hKey] +
push eax  +
mov ebx 20019h +
push ebx  +
push 0  +
push offset SubKey  +
push 80000002h  +
call edi  +
test eax eax +
jnz loc_1003A67  +
push esi  +
mov esi ds:__iob_func +
push offset aService  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+phkResult] +
push eax  +
push ebx  +
push 0  +
push offset aService_0  +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_1003992  +
push [ebp+phkResult]  +
call sub_10036C8  +
cmp [ebp+phkResult] 0FFFFFFFFh +
mov [ebp+var_8] eax +
jz loc_1003988  +
cmp [ebp+phkResult] 0 +
jz loc_1003988  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
or [ebp+phkResult] 0FFFFFFFFh +
cmp [ebp+var_8] 0 +
jz loc_1003A66  +
push offset word_100132C  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset aProcess  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+phkResult] +
push eax  +
push ebx  +
push 0  +
push offset aProcess_0  +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_10039F1  +
push [ebp+phkResult]  +
call sub_10036C8  +
cmp [ebp+phkResult] 0FFFFFFFFh +
mov [ebp+var_8] eax +
jz loc_10039EB  +
cmp [ebp+phkResult] 0 +
jz loc_10039EB  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
or [ebp+phkResult] 0FFFFFFFFh +
cmp [ebp+var_8] 0 +
jz loc_1003A66  +
push offset word_100132C  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset aDriver  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+phkResult] +
push eax  +
push ebx  +
xor ebx ebx +
push ebx  +
push offset aDriver_0  +
push [ebp+hKey]  +
call edi  +
test eax eax +
jnz loc_1003A4F  +
push [ebp+phkResult]  +
call sub_10036C8  +
cmp [ebp+phkResult] 0FFFFFFFFh +
mov [ebp+var_8] eax +
jz loc_1003A4A  +
cmp [ebp+phkResult] ebx +
jz loc_1003A4A  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
or [ebp+phkResult] 0FFFFFFFFh +
cmp [ebp+var_8] ebx +
jz loc_1003A66  +
push offset word_100132C  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov [ebp+var_8] 1 +
pop esi  +
cmp [ebp+hKey] 0FFFFFFFFh +
pop edi  +
pop ebx  +
jz loc_1003A7E  +
cmp [ebp+hKey] 0 +
jz loc_1003A7E  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax [ebp+var_8] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_1003AA4  +
call sub_10038FC  +
mov [ebp+var_4] eax +
jmp loc_1003B00  +
cmp edi 2 +
jb loc_1003B00  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx offset aService_0 +
push ebx  +
push dword ptr [esi]  +
call sub_1003F3B  +
test al al +
jnz loc_1003AE1  +
mov ebx offset aProcess_0 +
push ebx  +
push dword ptr [esi]  +
call sub_1003F3B  +
test al al +
jnz loc_1003AE1  +
mov ebx offset aDriver_0 +
push ebx  +
push dword ptr [esi]  +
call sub_1003F3B  +
test al al +
jz loc_1003AF2  +
dec edi  +
push edi  +
add esi 4 +
push esi  +
push ebx  +
call sub_10037E4  +
mov [ebp+var_4] eax +
jmp loc_1003AFE  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
pop esi  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_1003B1D  +
cmp ecx [ebp+arg_0] +
jbe loc_1003B22  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_1003B50  +
cmp [ebp+arg_0] eax +
jnz loc_1003B44  +
cmp ecx eax +
jnz loc_1003B49  +
cmp ecx [ebp+arg_4] +
jbe loc_1003B58  +
mov eax 80070057h +
jmp loc_1003B58  +
push [ebp+arg_4]  +
call sub_1003B0D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1003B96  +
cmp [ebp+arg_4] eax +
jz loc_1003B92  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1003B92  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1003B75  +
test esi esi +
jnz loc_1003B9E  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003BAC  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_1003BE2  +
test [ebp+arg_8] 1000h +
jz loc_1003BE2  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_1003C2A  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1003C12  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_1003C2A  +
test esi esi +
jbe loc_1003C43  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_1003C43  +
test [ebp+arg_8] 800h +
jz loc_1003C43  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push 4Ch  +
xor edi edi +
push 40h  +
mov [ebp+pvParam] edi +
call ds:LocalAlloc  +
mov esi eax +
cmp esi edi +
jz loc_1003CC0  +
push esi  +
call GetPwrCapabilities  +
movzx eax byte ptr [esi+6] +
mov dword_100E7A8 eax +
xor eax eax +
cmp dword ptr [esi+40h] 5 +
push esi  +
setnl al  +
mov dword_100E7AC eax +
movzx eax byte ptr [esi+8] +
mov dword_100E7B0 eax +
movzx ecx byte ptr [esi+4] +
movzx eax byte ptr [esi+5] +
or eax ecx +
movzx ecx byte ptr [esi+3] +
or eax ecx +
mov dword_100E7B4 eax +
movzx eax byte ptr [esi+15h] +
mov dword_100E7BC eax +
movzx eax byte ptr [esi+0Eh] +
mov dword_100E7C0 eax +
call ds:LocalFree  +
mov esi ds:SystemParametersInfoW +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push edi  +
push 53h  +
call esi  +
push edi  +
mov dword_100E7B8 eax +
lea eax [ebp+pvParam] +
push eax  +
push edi  +
push 54h  +
call esi  +
or dword_100E7B8 eax +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jnz loc_1003CFF  +
xor eax eax +
jmp loc_1003D10  +
push [ebp+arg_0]  +
call WriteGlobalPwrPolicy  +
test al al +
jz loc_1003D0E  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ds:SHDeleteKeyW +
push esi  +
push offset pszSubKey  +
mov esi 80000003h +
push esi  +
call ebx  +
lea eax [ebp+hKey] +
push eax  +
push offset a_defaultCont_0  +
push esi  +
call ds:RegCreateKeyW  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1003DAA  +
push edi  +
push eax  +
push [ebp+hKey]  +
mov edi offset a_defaultCont_1 +
push edi  +
push esi  +
call ds:SHCopyKeyW  +
push [ebp+hKey]  +
mov [ebp+var_8] eax +
call ds:RegCloseKey  +
cmp [ebp+var_8] 0 +
jnz loc_1003DA9  +
push edi  +
push esi  +
call ebx  +
lea eax [ebp+hKey] +
push eax  +
push offset a_defaultCont_2  +
push esi  +
call ds:RegCreateKeyW  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1003DA9  +
push eax  +
push [ebp+hKey]  +
push offset aControlPanelPo  +
push 80000001h  +
call ds:SHCopyKeyW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi offset aControlPanelPo +
push edi  +
mov esi 80000001h +
push esi  +
call ds:SHDeleteKeyW  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push esi  +
call ds:RegCreateKeyW  +
mov esi eax +
test esi esi +
jnz loc_1003DFF  +
push eax  +
push [ebp+hKey]  +
push offset a_defaultCont_1  +
push 80000003h  +
call ds:SHCopyKeyW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+1Ch] +
test esi esi +
jz loc_1003E71  +
push esi  +
push dword ptr [ebp+18h]  +
lea eax [ebp+8] +
push dword ptr [ebp+10h]  +
mov byte ptr [esi+4Ch] 64h +
push eax  +
mov byte ptr [esi+4Dh] 64h +
call WritePwrScheme  +
test al al +
jnz loc_1003E47  +
push esi  +
push dword ptr [ebp+18h]  +
lea eax [ebp+8] +
push dword ptr [ebp+10h]  +
push eax  +
call WritePwrScheme  +
test al al +
jz loc_1003E59  +
push dword ptr [ebp+8]  +
push offset aSuccessfullyUp  +
call ds:printf  +
pop ecx  +
pop ecx  +
jmp loc_1003E71  +
call ds:GetLastError  +
push eax  +
push dword ptr [ebp+8]  +
push offset aFailedToUpdate  +
call ds:printf  +
add esp 0Ch +
mov al 1 +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0ECh +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor edi edi +
push edi  +
push offset loc_1003E0A  +
call EnumPwrSchemes  +
mov esi 0E8h +
push esi  +
lea eax [ebp+var_EC] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push esi  +
lea eax [ebp+var_EC] +
push eax  +
push edi  +
push edi  +
push edi  +
call CallNtPowerInformation  +
test eax eax +
jnz loc_1003EE5  +
cmp [ebp+var_12] 64h +
jz loc_1003EE5  +
push edi  +
push edi  +
push esi  +
lea eax [ebp+var_EC] +
push eax  +
push edi  +
mov [ebp+var_12] 64h +
call CallNtPowerInformation  +
push esi  +
lea eax [ebp+var_EC] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push esi  +
lea eax [ebp+var_EC] +
push eax  +
push edi  +
push edi  +
push 1  +
call CallNtPowerInformation  +
test eax eax +
jnz loc_1003F26  +
cmp [ebp+var_12] 64h +
jz loc_1003F26  +
push edi  +
push edi  +
push esi  +
lea eax [ebp+var_EC] +
push eax  +
push 1  +
mov [ebp+var_12] 64h +
call CallNtPowerInformation  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_100A786  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax] +
push ebx  +
mov bl 1 +
cmp cx 2Dh +
jz loc_1003F55  +
cmp cx 2Fh +
jnz loc_1003F58  +
add eax 2 +
push [ebp+arg_4]  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003F6A  +
xor bl bl +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
call ds:CompareStringOrdinal  +
dec eax  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:__iob_func +
push edi  +
mov edi offset word_100132C +
xor ebx ebx +
push edi  +
mov [ebp+lpString] ebx +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+lpString] +
push eax  +
push off_100E000[ebx]  +
call ds:UuidToStringW  +
test eax eax +
jnz loc_1004040  +
push [ebp+lpString]  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset asc_1001BC4  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push off_100E004[ebx]  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
cmp [ebp+lpString] 0 +
jz loc_1004021  +
lea eax [ebp+lpString] +
push eax  +
call ds:RpcStringFreeW  +
add ebx 8 +
cmp ebx 108h +
jb loc_1003FC2  +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
xor eax eax +
jmp loc_100403B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push offset aScheme_current  +
push [ebp+arg_0]  +
xor edi edi +
mov [ebp+var_4] edi +
call sub_1003F3B  +
test al al +
jz loc_1004091  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
call PowerGetActiveScheme  +
test eax eax +
jnz loc_1004091  +
mov esi [ebp+var_4] +
mov eax offset unk_100E188 +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
jmp loc_10040B7  +
xor esi esi +
push off_100E004[esi*8]  +
push [ebp+arg_0]  +
call sub_1003F3B  +
test al al +
jnz loc_10040AE  +
inc esi  +
cmp esi 21h +
jb loc_1004093  +
jmp loc_10040B5  +
mov edi off_100E000[esi*8] +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call __EH_prolog3_catch  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100415A +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
mov [ebp+var_C] edi +
mov [ebp+hMem] edi +
cmp eax edi +
jnz loc_10041FE  +
push 3ECh  +
call sub_100BA15  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_10041AB  +
xor eax eax +
jmp loc_1004313  +
push edi  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push 400h  +
push [ebp+dwLanguageId]  +
call ds:RtlNtStatusToDosError  +
push eax  +
push edi  +
push 1300h  +
call ds:FormatMessageW  +
mov eax [ebp+var_C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10041D2  +
sub eax edx +
sar eax 1 +
mov esi eax +
mov eax [ebp+hMem] +
cmp eax edi +
jz loc_1004211  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_10041EC  +
sub eax edx +
sar eax 1 +
add esi eax +
jmp loc_1004211  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1004201  +
sub eax edx +
sar eax 1 +
mov esi eax +
push edi  +
call ds:GetModuleHandleW  +
push eax  +
push 3EDh  +
push [ebp+arg_8]  +
call sub_10040C2  +
mov edi eax +
mov [ebp+dwLanguageId] edi +
test edi edi +
jz loc_10042D6  +
mov eax [edi] +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
test eax eax +
jz loc_10042D6  +
mov eax [ebp+var_8] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100424C  +
sub eax edx +
sar eax 1 +
add esi eax +
lea eax [esi+esi+2] +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jnz loc_1004274  +
mov edi [ebp+dwLanguageId] +
jmp loc_10042E5  +
mov edx [ebx] +
test edx edx +
jnz loc_100428F  +
push [ebp+hMem]  +
lea eax [esi+1] +
push [ebp+var_C]  +
push eax  +
push edi  +
call swprintf_s  +
add esp 10h +
jmp loc_10042B1  +
mov eax edx +
lea ebx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1004294  +
sub eax ebx +
sar eax 1 +
push edx  +
inc eax  +
push eax  +
push edi  +
call wcscpy_s  +
mov ebx [ebp+arg_4] +
add esp 0Ch +
push [ebp+var_8]  +
inc esi  +
push esi  +
push edi  +
call wcscat_s  +
mov eax [ebx] +
add esp 0Ch +
test eax eax +
jz loc_10042CC  +
push eax  +
call ds:LocalFree  +
xor esi esi +
mov [ebx] edi +
mov edi [ebp+dwLanguageId] +
inc esi  +
jmp loc_10042E7  +
push 4BFh  +
call sub_100BA15  +
mov dword_100E7A0 eax +
xor esi esi +
cmp [ebp+hMem] 0 +
jz loc_10042F6  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+var_8] 0 +
jz loc_1004305  +
push [ebp+var_8]  +
call ds:LocalFree  +
test edi edi +
jz loc_1004311  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0D4h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push offset aOn  +
xor ebx ebx +
push esi  +
mov [ebp+uBytes] ebx +
mov [ebp+var_D0] 0C00000BBh +
call sub_1003F76  +
test al al +
jnz loc_10043FB  +
push 1  +
call sub_100BA15  +
mov edi ds:lstrcmpiW +
push eax  +
push esi  +
call edi  +
test eax eax +
jz loc_10043FB  +
push offset aOff  +
push esi  +
call sub_1003F76  +
test al al +
jnz loc_10043A9  +
push 2  +
call sub_100BA15  +
push eax  +
push esi  +
call edi  +
test eax eax +
jz loc_10043A9  +
push 3  +
call sub_100BA15  +
mov dword_100E7A0 eax +
xor eax eax +
jmp loc_1004552  +
lea eax [ebp+var_C5+1] +
push eax  +
mov byte ptr [ebp+var_C5] bl +
call ReadGlobalPwrPolicy  +
test al al +
jz loc_1004402  +
cmp [ebp+var_58] 3 +
jnz loc_10043D2  +
mov [ebp+var_58] ebx +
mov [ebp+uBytes] 1 +
cmp [ebp+var_70] 3 +
jnz loc_10043E5  +
mov [ebp+var_70] ebx +
mov [ebp+uBytes] 1 +
cmp [ebp+uBytes] ebx +
jz loc_1004402  +
lea eax [ebp+var_C5+1] +
push eax  +
call sub_1003CEE  +
jmp loc_1004402  +
mov byte ptr [ebp+var_C5] 1 +
cmp dword_100E7A8 ebx +
jnz loc_1004418  +
push 4  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1004438  +
push ebx  +
push ebx  +
push 1  +
lea eax [ebp+var_C5] +
push eax  +
push 0Ah  +
call CallNtPowerInformation  +
cmp eax ebx +
mov [ebp+var_D0] eax +
jge loc_100454F  +
mov edi [ebp+var_D0] +
mov [ebp+dwLanguageId] edi +
cmp dword_100E7A0 ebx +
jnz loc_1004467  +
cmp edi 0C0000061h +
jnz loc_100445B  +
push 306h  +
jmp loc_100445D  +
push 4  +
call sub_100BA15  +
mov dword_100E7A0 eax +
push ebx  +
push ebx  +
push offset hMem  +
mov esi 400h +
push esi  +
push edi  +
call ds:RtlNtStatusToDosError  +
push eax  +
push ebx  +
push 1300h  +
call ds:FormatMessageW  +
mov ebx ds:LocalAlloc +
push esi  +
push 40h  +
mov [ebp+uBytes] esi +
call ebx  +
mov edi eax +
test edi edi +
jz loc_10043A2  +
push [ebp+uBytes]  +
push edi  +
push 0  +
push 0  +
push 17h  +
call CallNtPowerInformation  +
mov [ebp+var_D0] eax +
test eax eax +
jge loc_10044E7  +
push edi  +
cmp eax 0C000009Ah +
jnz loc_1004510  +
add [ebp+uBytes] esi +
call ds:LocalFree  +
push [ebp+uBytes]  +
push 40h  +
call ebx  +
mov edi eax +
test edi edi +
jz loc_10043A2  +
cmp [ebp+var_D0] 0 +
jnz loc_10044A3  +
mov eax hMem +
mov ebx [edi] +
lea esi [edi+4] +
test eax eax +
jz loc_100450C  +
push eax  +
call ds:LocalFree  +
and hMem 0 +
add edi ebx +
jmp loc_1004546  +
call ds:LocalFree  +
jmp loc_10043A2  +
cmp byte ptr [esi+3] 1 +
jnz loc_100453F  +
cmp dword ptr [esi+8] 0Fh +
jnz loc_100452E  +
mov dword ptr [esi+8] 0Dh +
push esi  +
push offset hMem  +
push [ebp+dwLanguageId]  +
call sub_1004174  +
mov eax [esi+0Ch] +
lea esi [esi+eax+10h] +
cmp esi edi +
jb loc_100451B  +
jmp loc_10043A2  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
push 0Ah  +
xor esi esi +
push esi  +
push [ebp+arg_0]  +
call ds:wcstoul  +
add esp 0Ch +
push 8  +
mov [ebp+arg_0] eax +
lea eax [ebp+var_8] +
push eax  +
push 4  +
lea eax [ebp+arg_0] +
push eax  +
push 33h  +
call CallNtPowerInformation  +
cmp eax esi +
jge loc_10045C8  +
xor edi edi +
cmp hMem esi +
jnz loc_1004602  +
push esi  +
push esi  +
push offset hMem  +
push 400h  +
push eax  +
call ds:RtlNtStatusToDosError  +
push eax  +
push esi  +
push 1300h  +
call ds:FormatMessageW  +
jmp loc_1004602  +
push offset aOff  +
call sub_100431F  +
mov edi eax +
cmp edi esi +
jz loc_1004602  +
push offset aOn  +
call sub_100431F  +
mov edi eax +
cmp edi esi +
jz loc_1004602  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push 3FCh  +
call sub_100BA15  +
push eax  +
call ds:wprintf  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push 4Bh  +
xor esi esi +
lea eax [ebp+var_50+1] +
push esi  +
push eax  +
mov byte ptr [ebp+var_50] 0 +
call memset  +
mov edi ds:LocalAlloc +
add esp 0Ch +
mov [ebp+var_54] esi +
mov [ebp+var_58] esi +
mov [ebp+var_70] esi +
mov [ebp+var_6C] esi +
mov [ebp+var_68] esi +
mov esi 400h +
push esi  +
push 40h  +
mov ebx esi +
call edi  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_10046AA  +
push ebx  +
push [ebp+hMem]  +
push 0  +
push 0  +
push 17h  +
call CallNtPowerInformation  +
mov [ebp+var_60] eax +
test eax eax +
jge loc_1004695  +
cmp eax 0C000009Ah +
jnz loc_10046AA  +
push [ebp+hMem]  +
add ebx esi +
call ds:LocalFree  +
push ebx  +
push 40h  +
call edi  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_10046AA  +
cmp [ebp+var_60] 0 +
jnz loc_1004661  +
mov eax [ebp+hMem] +
mov eax [eax] +
mov [ebp+var_68] 1 +
mov [ebp+var_70] eax +
push 4Ch  +
lea eax [ebp+var_50] +
push eax  +
push 0  +
push 0  +
push 4  +
call CallNtPowerInformation  +
test eax eax +
jge loc_10046C9  +
push 4BEh  +
jmp loc_1004A85  +
cmp byte ptr [ebp+var_50+3] 0 +
jnz loc_10046DB  +
cmp [ebp+var_4C] 0 +
jnz loc_10046DB  +
cmp [ebp+var_4B] 0 +
jz loc_10046E2  +
mov [ebp+var_54] 1 +
cmp [ebp+var_4A] 0 +
jz loc_10046F5  +
cmp [ebp+var_48] 0 +
jz loc_10046F5  +
mov [ebp+var_58] 1 +
cmp [ebp+var_54] 0 +
mov esi ds:__iob_func +
jnz loc_100470B  +
cmp [ebp+var_58] 0 +
jz loc_1004878  +
push 4C0h  +
call sub_100BA15  +
push eax  +
call esi  +
push 20h  +
pop edi  +
add eax edi +
push eax  +
call sub_100B4C8  +
mov ebx offset asc_1001BFC +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
cmp [ebp+var_54] 0 +
jz loc_100480F  +
push 4C8h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push 4C9h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
cmp byte ptr [ebp+var_50+3] 0 +
jz loc_10047A3  +
push 4CAh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
cmp [ebp+var_4C] 0 +
jz loc_10047C9  +
push 4CBh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
cmp [ebp+var_4B] 0 +
jz loc_10047EF  +
push 4CCh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push 4CDh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
cmp [ebp+var_58] 0 +
jz loc_1004835  +
push 4CEh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
cmp [ebp+var_3F] 0 +
jz loc_1004867  +
cmp [ebp+var_4B] 0 +
jz loc_1004867  +
cmp [ebp+var_58] 0 +
jz loc_1004867  +
push 4D0h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push offset word_100132C  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
jmp loc_1004880  +
push 20h  +
mov ebx offset asc_1001BFC +
pop edi  +
cmp byte ptr [ebp+var_50+3] 0 +
jz loc_10048A2  +
cmp [ebp+var_4C] 0 +
jz loc_10048A2  +
cmp [ebp+var_4B] 0 +
jz loc_10048A2  +
cmp [ebp+var_58] 0 +
jz loc_10048A2  +
cmp [ebp+var_3F] 0 +
jnz loc_1004A58  +
push 4C1h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push offset word_100132C  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
and [ebp+var_64] 0 +
mov eax [ebp+var_64] +
xor ecx ecx +
sub eax ecx +
jz loc_1004925  +
dec eax  +
jz loc_1004912  +
dec eax  +
jz loc_10048FF  +
dec eax  +
jnz loc_1004A19  +
xor edx edx +
cmp [ebp+var_58] ecx +
mov [ebp+var_54] 3EDh +
setz dl  +
mov eax 4CEh +
mov [ebp+var_60] 3 +
mov ecx edx +
jmp loc_100493C  +
xor ecx ecx +
cmp [ebp+var_4B] cl +
mov eax 4B6h +
mov [ebp+var_60] 2 +
jmp loc_1004932  +
xor ecx ecx +
cmp [ebp+var_4C] cl +
mov eax 4B5h +
mov [ebp+var_60] 1 +
jmp loc_1004932  +
mov [ebp+var_60] ecx +
xor ecx ecx +
cmp byte ptr [ebp+var_50+3] cl +
mov eax 4B4h +
mov [ebp+var_54] 450h +
setz cl  +
test ecx ecx +
jz loc_1004A19  +
push eax  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push offset word_100132C  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
cmp [ebp+var_64] 3 +
jnz loc_1004985  +
cmp [ebp+var_4A] 0 +
jz loc_1004985  +
push 4D1h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
cmp [ebp+var_68] 0 +
jz loc_1004A19  +
mov eax [ebp+hMem] +
mov ecx [ebp+var_70] +
lea edi [eax+4] +
add eax ecx +
mov [ebp+var_78] eax +
cmp edi eax +
jnb loc_1004A16  +
cmp dword ptr [edi+8] 0Fh +
jnz loc_10049AE  +
mov dword ptr [edi+8] 0Dh +
mov eax [ebp+var_60] +
cmp byte ptr [edi+eax] 0 +
jz loc_1004A0A  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
push [ebp+var_54]  +
push edi  +
call sub_10040C2  +
mov ebx eax +
test ebx ebx +
jz loc_1004A80  +
mov eax [ebx] +
lea ecx [ebp+lpString] +
push ecx  +
mov ecx ebx +
call dword ptr [eax+4]  +
test eax eax +
jz loc_1004A80  +
push [ebp+lpString]  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+lpString]  +
call ds:LocalFree  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax]  +
mov ebx offset asc_1001BFC +
mov eax [edi+0Ch] +
lea edi [edi+eax+10h] +
cmp edi [ebp+var_78] +
jb loc_10049A1  +
push 20h  +
pop edi  +
inc [ebp+var_64]  +
cmp [ebp+var_64] 4 +
jb loc_10048CA  +
cmp [ebp+var_3F] 0 +
jz loc_1004A38  +
cmp [ebp+var_4B] 0 +
jz loc_1004A38  +
cmp [ebp+var_58] 0 +
jnz loc_1004A58  +
push 4D0h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
mov [ebp+var_6C] 1 +
cmp [ebp+hMem] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1004A71  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_6C] +
xor ecx ebp +
call sub_100A786  +
leave   +
retn   +
push 4BFh  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1004A5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push offset aAll_devices_ve  +
push esi  +
mov [ebp+uBytes] 208h +
call sub_1003F76  +
test al al +
jz loc_1004AE8  +
push 2  +
call DevicePowerOpen  +
mov bl al +
test bl bl +
jz loc_1004AD4  +
call DevicePowerClose  +
mov bl al +
test bl bl +
jnz loc_1004C8B  +
push 2EDh  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1004C8B  +
push [ebp+uBytes]  +
mov [ebp+arg_0] 30000000h +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1004C8E  +
push edi  +
push offset aWake_from_s1_s  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004B1F  +
mov edi 200000h +
jmp loc_1004C06  +
push offset aWake_from_s2_s  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004B38  +
mov edi 400000h +
jmp loc_1004C06  +
push offset aWake_from_s3_s  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004B51  +
mov edi 800000h +
jmp loc_1004C06  +
push offset aWake_from_any  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004B6A  +
mov edi 0E00000h +
jmp loc_1004C06  +
push offset aS1_supported  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004B83  +
mov edi 20000h +
jmp loc_1004C06  +
push offset aS2_supported  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004B99  +
mov edi 40000h +
jmp loc_1004C06  +
push offset aS3_supported  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004BAF  +
mov edi 80000h +
jmp loc_1004C06  +
push offset aS4_supported  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004BC5  +
mov edi offset __ImageBase +
jmp loc_1004C06  +
push offset aWake_programma  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004BDD  +
mov [ebp+arg_0] 34000000h +
jmp loc_1004C04  +
push offset aWake_armed  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004BF5  +
mov [ebp+arg_0] 38000000h +
jmp loc_1004C04  +
push offset aAll_devices  +
push esi  +
call sub_1003F76  +
test al al +
jz loc_1004C73  +
xor edi edi +
xor esi esi +
push esi  +
call DevicePowerOpen  +
cmp al 1 +
jnz loc_1004C5E  +
lea eax [ebp+uBytes] +
push eax  +
push [ebp+hMem]  +
push edi  +
push [ebp+arg_0]  +
push esi  +
call DevicePowerEnumDevices  +
mov bl al +
test bl bl +
jz loc_1004C39  +
push [ebp+hMem]  +
push offset aS_1  +
call ds:printf  +
pop ecx  +
pop ecx  +
inc esi  +
cmp bl 1 +
jz loc_1004C12  +
cmp esi 1 +
jnz loc_1004C5E  +
push 31Ah  +
call sub_100BA15  +
push eax  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100B4C8  +
call DevicePowerClose  +
push offset asc_1001C00  +
call ds:printf  +
pop ecx  +
mov bl 1 +
jmp loc_1004C81  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
xor bl bl +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
movzx eax bl +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
push esi  +
setz al  +
push 0  +
inc eax  +
push eax  +
push [ebp+arg_0]  +
call DevicePowerSetDeviceState  +
mov esi eax +
cmp esi 1076h +
jnz loc_1004CC4  +
push 392h  +
jmp loc_1004CCA  +
test esi esi +
jz loc_1004CD4  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
xor eax eax +
test esi esi +
setz al  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push 2  +
mov edi offset unk_100E10C +
pop ebx  +
mov esi [edi-4] +
jmp loc_1004D0E  +
push esi  +
call sub_100BA15  +
push eax  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100B4C8  +
inc esi  +
cmp esi [edi] +
jbe loc_1004CF7  +
add edi 8 +
dec ebx  +
jnz loc_1004CF2  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
lea eax [ebp+TokenHandle] +
push eax  +
push 20h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_1004D47  +
leave   +
retn 8  +
push esi  +
lea eax [ebp+Luid] +
push eax  +
push [ebp+lpName]  +
xor esi esi +
push esi  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jnz loc_1004D6A  +
push [ebp+TokenHandle]  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
jmp locret_1004D43  +
mov eax [ebp+Luid.LowPart] +
mov [ebp+NewState.Privileges.Luid.LowPart] eax +
mov eax [ebp+Luid.HighPart] +
mov [ebp+NewState.Privileges.Luid.HighPart] eax +
mov eax [ebp+arg_4] +
neg eax  +
push esi  +
sbb eax eax +
push esi  +
and eax 2 +
push esi  +
mov [ebp+NewState.Privileges.Attributes] eax +
lea eax [ebp+NewState] +
push eax  +
push esi  +
push [ebp+TokenHandle]  +
mov [ebp+NewState.PrivilegeCount] 1 +
call ds:AdjustTokenPrivileges  +
mov esi eax +
jmp loc_1004D5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+StringUuid] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
xor ebx ebx +
mov [ebp+lpString] edi +
mov [ebp+hMem] edi +
cmp eax edi +
jz loc_1004DDF  +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
lea eax [ebp+Uuid] +
mov [ebp+hMem] eax +
jmp loc_1004DE2  +
mov [ebp+hMem] edi +
lea eax [ebp+hMem] +
push eax  +
push esi  +
push edi  +
call PowerImportPowerScheme  +
cmp eax edi +
jz loc_1004E08  +
cmp eax 0B7h +
jnz loc_1004DFC  +
push 0Bh  +
jmp loc_1004E1E  +
cmp eax 2 +
jnz loc_1004E54  +
push 397h  +
jmp loc_1004E1E  +
lea eax [ebp+lpString] +
push eax  +
push [ebp+hMem]  +
xor ebx ebx +
inc ebx  +
call ds:UuidToStringW  +
test eax eax +
jz loc_1004E2A  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1004E54  +
push 536h  +
call sub_100BA15  +
mov esi ds:__iob_func +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+lpString]  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+Uuid] +
cmp [ebp+hMem] eax +
jz loc_1004E6D  +
cmp [ebp+hMem] edi +
jz loc_1004E6D  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov [ebp+hMem] edi +
cmp [ebp+lpString] edi +
jz loc_1004E7C  +
lea eax [ebp+lpString] +
push eax  +
call ds:RpcStringFreeW  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_24] 0 +
or [ebp+hKey] 0FFFFFFFFh +
or [ebp+phkResult] 0FFFFFFFFh +
and [ebp+String] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1004F52  +
test esi esi +
jz loc_1004F52  +
push 1  +
mov ebx 20019h +
push ebx  +
lea eax [ebp+hKey] +
push eax  +
call PowerOpenUserPowerKey  +
test eax eax +
jnz loc_1004F52  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_1004F52  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
call ds:UuidToStringW  +
lea eax [ebp+phkResult] +
push eax  +
push ebx  +
push 0  +
push [ebp+String]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1004F52  +
xor ebx ebx +
inc ebx  +
push ebx  +
push offset Name  +
call sub_1004D24  +
mov esi ds:RegSaveKeyW +
push 0  +
push edi  +
push [ebp+phkResult]  +
call esi  +
cmp eax 0B7h +
jnz loc_1004F49  +
push edi  +
call ds:DeleteFileW  +
push 0  +
push edi  +
push [ebp+phkResult]  +
call esi  +
test eax eax +
jnz loc_1004F5E  +
mov [ebp+var_24] ebx +
jmp loc_1004F5E  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
xor edi edi +
cmp [ebp+String] edi +
jz loc_1004F6F  +
lea eax [ebp+String] +
push eax  +
call ds:RpcStringFreeW  +
cmp [ebp+hKey] 0FFFFFFFFh +
mov esi ds:RegCloseKey +
jz loc_1004F89  +
cmp [ebp+hKey] edi +
jz loc_1004F89  +
push [ebp+hKey]  +
call esi  +
or [ebp+hKey] 0FFFFFFFFh +
cmp [ebp+phkResult] 0FFFFFFFFh +
jz loc_1004F99  +
cmp [ebp+phkResult] edi +
jz loc_1004F99  +
push [ebp+phkResult]  +
call esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_24] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_38] eax +
mov [ebp+hMem] edi +
mov [ebp+var_30] edi +
mov [ebp+var_2C] edi +
mov [ebp+var_34] edi +
cmp eax edi +
jz loc_100524F  +
cmp esi edi +
jz loc_100524F  +
push 0Ah  +
lea eax [ebp+var_34] +
push eax  +
push esi  +
call ds:wcstoul  +
mov ebx eax +
add esp 0Ch +
cmp ebx edi +
jnz loc_1005013  +
cmp [ebp+var_34] esi +
jnz loc_1005013  +
push 39Ch  +
jmp loc_1005251  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
call PowerGetActiveScheme  +
test eax eax +
jnz loc_100525B  +
mov esi offset Uuid2 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_38] +
push offset aMonitorTimeout  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_1005073  +
mov esi offset loc_1001818 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset loc_1001828 +
lea edi [ebp+var_14] +
imul ebx ebx +
movs   +
movs   +
movs   +
movs   +
push ebx  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+hMem]  +
push 0  +
call PowerWriteACValueIndex  +
jmp loc_10050B0  +
push offset aMonitorTimeo_0  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_10050E6  +
mov esi offset loc_1001818 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset loc_1001828 +
lea edi [ebp+var_14] +
imul ebx ebx +
movs   +
movs   +
movs   +
movs   +
push ebx  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+hMem]  +
push 0  +
call PowerWriteDCValueIndex  +
test eax eax +
jnz loc_100525B  +
push [ebp+hMem]  +
push eax  +
call PowerSetActiveScheme  +
test eax eax +
jz loc_1005246  +
push 1000h  +
call ds:GetSystemMetrics  +
test eax eax +
jz loc_100525B  +
push 3A1h  +
jmp loc_1005251  +
push offset aDiskTimeoutAc  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_100510B  +
mov esi offset loc_1001878 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi (offset loc_1001884+4) +
jmp loc_1005054  +
push offset aDiskTimeoutDc  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_1005130  +
mov esi offset loc_1001878 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi (offset loc_1001884+4) +
jmp loc_1005093  +
push offset aStandbyTimeout  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_1005155  +
mov esi offset loc_1001898 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset loc_10018A8 +
jmp loc_1005054  +
push offset aStandbyTimeo_0  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_100517A  +
mov esi offset loc_1001898 +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset loc_10018A8 +
jmp loc_1005093  +
push offset aHibernateTimeo  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_10051E0  +
mov esi offset loc_1001898 +
imul ebx ebx +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset loc_10018A8 +
lea edi [ebp+var_14] +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+hMem]  +
movs   +
push 0  +
movs   +
call PowerReadACValueIndex  +
test eax eax +
jnz loc_10051CF  +
cmp [ebp+var_2C] eax +
jz loc_10051CF  +
test ebx ebx +
jz loc_10051CF  +
cmp [ebp+var_2C] ebx +
jb loc_10051CF  +
add ebx 3Ch +
mov esi (offset loc_10018B7+1) +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
jmp loc_100505E  +
push offset aHibernateTim_0  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_100524F  +
mov esi offset loc_1001898 +
imul ebx ebx +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset loc_10018A8 +
lea edi [ebp+var_14] +
movs   +
lea eax [ebp+var_2C] +
push eax  +
movs   +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+hMem]  +
movs   +
push 0  +
movs   +
call PowerReadDCValueIndex  +
test eax eax +
jnz loc_1005235  +
cmp [ebp+var_2C] eax +
jz loc_1005235  +
test ebx ebx +
jz loc_1005235  +
cmp [ebp+var_2C] ebx +
jb loc_1005235  +
add ebx 3Ch +
mov esi (offset loc_10018B7+1) +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
jmp loc_100509D  +
mov [ebp+var_30] 1 +
jmp loc_100525B  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
cmp [ebp+hMem] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100526D  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_30] +
xor ecx ebp +
call sub_100A786  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp esi 0Eh +
jz loc_10052A6  +
cmp esi 32h +
jz loc_100529F  +
cmp esi 57h +
jnz loc_10052B2  +
push 7  +
jmp loc_10052A8  +
push 2EDh  +
jmp loc_10052A8  +
push 8  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
xor ebx ebx +
mov [ebp+var_10] ebx +
mov [ebp+lpString] ebx +
mov [ebp+var_8] ebx +
test al 1 +
jz loc_10052F6  +
mov eax [esi+4] +
add eax esi +
push eax  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100B4C8  +
jmp loc_1005578  +
test al 2 +
jz loc_1005578  +
mov eax [esi+4] +
push 2  +
add eax esi +
push ebx  +
push eax  +
call ds:LoadLibraryExW  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jz loc_1005578  +
movzx eax word ptr [esi+8] +
push ebx  +
push ebx  +
lea ecx [ebp+arg_0] +
push ecx  +
lea ecx [ebp+var_10] +
push ecx  +
push ebx  +
push ebx  +
push eax  +
push [ebp+hLibModule]  +
call ds:RtlLoadString  +
test eax eax +
jl loc_1005553  +
cmp word ptr [ebp+arg_0] bx +
jz loc_1005553  +
push edi  +
mov edi [esi+0Ch] +
mov [ebp+var_4] edi +
cmp edi ebx +
jz loc_100539E  +
mov eax edi +
shl eax 3 +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1005552  +
mov eax [esi+10h] +
add eax esi +
xor esi esi +
cmp edi ebx +
jbe loc_100539E  +
mov edx [ebp+var_8] +
mov ecx eax +
mov [edx+esi*8+4] eax +
lea edi [ecx+2] +
mov bx [ecx] +
inc ecx  +
inc ecx  +
test bx bx +
jnz loc_100537F  +
sub ecx edi +
sar ecx 1 +
lea edi [ecx+ecx] +
mov [edx+esi*8] di +
inc esi  +
lea eax [eax+ecx*2+2] +
cmp esi [ebp+var_4] +
jb loc_1005373  +
xor eax eax +
xor esi esi +
xor edi edi +
cmp ax word ptr [ebp+arg_0] +
jnb loc_1005437  +
mov ebx [ebp+var_10] +
movzx ecx di +
lea eax [ebx+ecx*2] +
movzx edx word ptr [eax] +
test dx dx +
jz loc_1005437  +
cmp dx 25h +
jnz loc_100541F  +
movzx edx word ptr [ebp+arg_0] +
inc ecx  +
cmp ecx edx +
jge loc_100541F  +
movzx eax word ptr [eax+2] +
cmp ax 31h +
jb loc_100541F  +
cmp ax 39h +
ja loc_100541F  +
movzx eax ax +
sub eax 30h +
inc edi  +
inc edi  +
cmp di word ptr [ebp+arg_0] +
jnb loc_100540A  +
movzx ecx di +
movzx ecx word ptr [ebx+ecx*2] +
cmp cx 30h +
jb loc_100540A  +
cmp cx 39h +
ja loc_100540A  +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
inc edi  +
dec eax  +
cmp eax [ebp+var_4] +
jnb loc_1005552  +
mov ecx [ebp+var_8] +
movzx eax word ptr [ecx+eax*8] +
add esi eax +
jmp loc_1005422  +
inc edi  +
inc esi  +
inc esi  +
cmp esi 800h +
jnb loc_1005432  +
cmp di word ptr [ebp+arg_0] +
jb loc_10053B1  +
jmp loc_1005437  +
mov esi 7FEh +
inc esi  +
inc esi  +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_1005552  +
and [ebp+var_4] 0 +
mov edi eax +
shr esi 1 +
lea ebx [edi+esi*2-2] +
xor eax eax +
jmp loc_10054FC  +
movzx ecx word ptr [ebp+var_4] +
mov eax [ebp+var_10] +
lea eax [eax+ecx*2] +
movzx edx word ptr [eax] +
cmp dx 25h +
jnz loc_10054EC  +
movzx esi word ptr [ebp+arg_0] +
inc ecx  +
cmp ecx esi +
jge loc_10054EC  +
movzx eax word ptr [eax+2] +
cmp ax 31h +
jb loc_10054EC  +
cmp ax 39h +
ja loc_10054EC  +
add [ebp+var_4] 2 +
mov cx word ptr [ebp+var_4] +
movzx eax ax +
sub eax 30h +
cmp cx word ptr [ebp+arg_0] +
jnb loc_10054C3  +
mov edx [ebp+var_10] +
movzx ecx cx +
movzx ecx word ptr [edx+ecx*2] +
cmp cx 30h +
jb loc_10054C3  +
cmp cx 39h +
ja loc_10054C3  +
imul eax eax +
inc [ebp+var_4]  +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov edx [ebp+var_8] +
dec eax  +
lea esi [edx+eax*8] +
movzx edx word ptr [esi] +
mov ecx ebx +
sub ecx edi +
cmp edx ecx +
ja loc_1005508  +
push edx  +
push dword ptr [esi+4]  +
push edi  +
call memcpy  +
movzx eax word ptr [esi] +
add esp 0Ch +
shr eax 1 +
lea edi [edi+eax*2] +
jmp loc_10054F8  +
cmp edi ebx +
jz loc_100552C  +
inc [ebp+var_4]  +
mov [edi] dx +
inc edi  +
inc edi  +
mov ax word ptr [ebp+var_4] +
cmp ax word ptr [ebp+arg_0] +
jb loc_1005460  +
jmp loc_100553B  +
push ecx  +
mov ecx [ebp+var_8] +
push dword ptr [ecx+eax*8+4]  +
push edi  +
call memcpy  +
add esp 0Ch +
push 2Eh  +
pop eax  +
mov edi ebx +
mov [ebx-6] ax +
mov [ebx-4] ax +
mov [ebx-2] ax +
jmp loc_100553B  +
push 2Eh  +
pop eax  +
mov [edi-6] ax +
mov [edi-4] ax +
mov [edi-2] ax +
push [ebp+lpString]  +
xor eax eax +
mov [edi] ax +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100B4C8  +
pop edi  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
cmp [ebp+lpString] 0 +
mov esi ds:LocalFree +
jz loc_100556D  +
push [ebp+lpString]  +
call esi  +
cmp [ebp+var_8] 0 +
jz loc_1005578  +
push [ebp+var_8]  +
call esi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_100559A  +
cmp edx 7FFFFFFFh +
jbe loc_100559F  +
mov eax 80070057h +
test eax eax +
jl loc_10055B5  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1003B61  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
shr ebx 1 +
push edi  +
mov ecx ebx +
call sub_1003B2B  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_100566F  +
test [ebp+arg_14] 100h +
mov [ebp+arg_0] edi +
mov [ebp+var_4] ebx +
jz loc_1005606  +
cmp [ebp+arg_8] eax +
jnz loc_1005606  +
mov [ebp+arg_8] offset dword_1001330 +
xor esi esi +
test [ebp+arg_14] 0FFFFE000h +
jz loc_1005678  +
mov esi 80070057h +
cmp ebx eax +
jz loc_100561F  +
xor eax eax +
mov [edi] ax +
test [ebp+arg_14] 1C00h +
jz loc_1005642  +
cmp [ebp+arg_4] 0 +
jz loc_1005642  +
push [ebp+arg_14]  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_1003BB8  +
test esi esi +
jge loc_100564E  +
cmp esi 8007007Ah +
jnz loc_100566F  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100565A  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100566F  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_4] +
and ecx 1 +
lea ecx [ecx+edx*2] +
mov [eax] ecx +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
cmp ebx eax +
jnz loc_1005695  +
mov ecx [ebp+arg_8] +
cmp [ecx] ax +
jz loc_100564E  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_100561F  +
mov [ebp+arg_0] eax +
push 7FFFFFFEh  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_8] +
mov edx ebx +
mov ecx edi +
call sub_1003B61  +
mov esi eax +
mov eax [ebp+arg_0] +
sub ebx eax +
lea ecx [edi+eax*2] +
mov [ebp+arg_0] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_100561F  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_100564E  +
mov ecx [ebp+arg_4] +
and ecx 1 +
lea ecx [ecx+ebx*2] +
cmp ecx 2 +
jbe loc_100564E  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_100564E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_100571F  +
cmp ecx 7FFFFFFFh +
jbe loc_1005724  +
mov eax 80070057h +
test eax eax +
jl loc_1005761  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1005751  +
cmp eax esi +
ja loc_1005751  +
jnz loc_100575C  +
jmp loc_1005756  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
xor ebx ebx +
inc ebx  +
push ebx  +
push edi  +
call ds:HeapSetInformation  +
mov esi [ebp+arg_4] +
mov [ebp+var_C] 208h +
mov [ebp+StringUuid] ebx +
cmp [ebp+arg_0] ebx +
jbe loc_10057B3  +
mov eax [ebp+StringUuid] +
push dword ptr [esi+eax*4]  +
call ds:lstrlenW  +
cmp eax [ebp+var_C] +
jbe loc_10057A8  +
mov [ebp+var_C] eax +
inc [ebp+StringUuid]  +
mov eax [ebp+StringUuid] +
cmp eax [ebp+arg_0] +
jb loc_1005794  +
call sub_1003C4F  +
push 0  +
push 0  +
push 5  +
call sub_100AF54  +
and [ebp+var_4] edi +
cmp [ebp+arg_0] 2 +
jnz loc_1005892  +
push offset aSavepoliciesto  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_10057F4  +
mov [ebp+var_4] ebx +
call sub_1003D1A  +
test eax eax +
jz loc_10057F4  +
mov edi ebx +
jmp loc_10064F9  +
push offset aRestoredefault  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005811  +
mov [ebp+var_4] ebx +
call sub_1003DB6  +
test eax eax +
jnz loc_10057ED  +
push offset aRestorethrottl  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_100582E  +
mov [ebp+var_4] ebx +
call sub_1003E7D  +
test eax eax +
jnz loc_10057ED  +
push offset aHelp  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jnz loc_1005850  +
push offset a?  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_100585F  +
mov [ebp+var_4] ebx +
call sub_1004CE5  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
push offset aList  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jnz loc_1005881  +
push offset asc_10024D4  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_10058A3  +
mov [ebp+var_4] ebx +
call sub_1007952  +
test eax eax +
jz loc_10058A3  +
jmp loc_10057ED  +
mov eax [ebp+arg_0] +
cmp eax 3 +
jz loc_10058A3  +
cmp eax 4 +
jnz loc_1005929  +
push offset aQuery  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jnz loc_10058D6  +
push offset aQ  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jnz loc_10058D6  +
push offset aQh  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005926  +
and [ebp+StringUuid] 0 +
and [ebp+var_C] 0 +
cmp [ebp+arg_0] 3 +
mov [ebp+var_4] ebx +
jnz loc_10058EF  +
mov eax [esi+8] +
mov [ebp+StringUuid] eax +
jmp loc_1005901  +
cmp [ebp+arg_0] 4 +
jnz loc_1005901  +
mov eax [esi+8] +
mov [ebp+StringUuid] eax +
mov eax [esi+0Ch] +
mov [ebp+var_C] eax +
push offset aQh  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_100598D  +
push ebx  +
push [ebp+var_C]  +
push [ebp+StringUuid]  +
call sub_1007AFC  +
test eax eax +
jnz loc_10057ED  +
mov eax [ebp+arg_0] +
cmp eax 2 +
jnz loc_100594A  +
push offset aConvertlegacyp  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005996  +
mov [ebp+var_4] ebx +
call sub_1008866  +
mov eax [ebp+arg_0] +
cmp eax 3 +
jnz loc_1005991  +
push offset aSetactive  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jnz loc_1005975  +
push offset aS_2  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005BC5  +
push dword ptr [esi+8]  +
mov [ebp+var_4] ebx +
call sub_1007DCC  +
test eax eax +
jz loc_1005BC5  +
jmp loc_10057ED  +
push 0  +
jmp loc_1005913  +
cmp eax 2 +
jnz loc_10059C0  +
push offset aGetactiveschem  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005D41  +
mov [ebp+var_4] ebx +
call sub_1007E4F  +
test eax eax +
jz loc_1005D41  +
jmp loc_10057ED  +
cmp eax 5 +
jnz loc_1005A80  +
push offset aGetpossibleval  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_10059F3  +
push dword ptr [esi+10h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
call sub_1009006  +
test eax eax +
jnz loc_10057ED  +
push offset aSetpowervaluem  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005A1F  +
push dword ptr [esi+10h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_10083DD  +
test eax eax +
jnz loc_10057ED  +
push offset aSetpowervalu_0  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005A4B  +
push dword ptr [esi+10h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_100846F  +
test eax eax +
jnz loc_10057ED  +
push offset aSetpowervaluei  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005C67  +
push dword ptr [esi+10h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_1008501  +
test eax eax +
jz loc_1005C67  +
jmp loc_10057ED  +
cmp eax 7 +
jnz loc_1005AF2  +
push offset aSetpossibleval  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005AB7  +
push dword ptr [esi+18h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_10092DA  +
test eax eax +
jnz loc_10057ED  +
push offset aSetpossibleval  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005CC6  +
push dword ptr [esi+18h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_10092DA  +
test eax eax +
jz loc_1005CC6  +
jmp loc_10057ED  +
cmp eax 6 +
jnz loc_1005BC0  +
push offset aSetacvalueinde  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005B2A  +
push dword ptr [esi+14h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_1008189  +
test eax eax +
jnz loc_10057ED  +
push offset aSetdcvalueinde  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005B59  +
push dword ptr [esi+14h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_10082BC  +
test eax eax +
jnz loc_10057ED  +
push offset aSetdefaultacin  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005B88  +
push dword ptr [esi+14h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_1008643  +
test eax eax +
jnz loc_10057ED  +
push offset aSetdefaultdcin  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005C95  +
push dword ptr [esi+14h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_1008593  +
test eax eax +
jz loc_1005C95  +
jmp loc_10057ED  +
cmp eax 4 +
jnz loc_1005BFA  +
push offset aDuplicateschem  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005BF7  +
xor eax eax +
cmp [ebp+arg_0] 4 +
mov [ebp+var_4] ebx +
jnz loc_1005BE4  +
mov eax [esi+0Ch] +
push eax  +
push dword ptr [esi+8]  +
push 0  +
call sub_1007F55  +
test eax eax +
jnz loc_10057ED  +
mov eax [ebp+arg_0] +
cmp eax 3 +
jnz loc_1005C37  +
push offset aDelete  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jnz loc_1005C25  +
push offset aD_0  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005CC6  +
push dword ptr [esi+8]  +
mov [ebp+var_4] ebx +
push 0  +
call sub_1008105  +
jmp loc_1005AE5  +
cmp eax 4 +
jnz loc_1005C62  +
push offset aSetfriendlynam  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005CC6  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+8]  +
push 0  +
call sub_1008830  +
jmp loc_1005AE5  +
cmp eax 5 +
jnz loc_1005C90  +
push offset aSetfriendlyn_0  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005CC6  +
push dword ptr [esi+10h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_10087F3  +
jmp loc_1005AE5  +
cmp eax 6 +
jnz loc_1005CC1  +
push offset aSetfriendlyn_1  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005CC6  +
push dword ptr [esi+14h]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push 0  +
call sub_10087CB  +
jmp loc_1005AE5  +
cmp eax 2 +
jbe loc_1005D3B  +
push offset aHibernate  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jnz loc_1005CE8  +
push offset asc_1002238  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005D3B  +
cmp [ebp+arg_0] 3 +
jnz loc_1005D08  +
push dword ptr [esi+8]  +
mov [ebp+var_4] ebx +
call sub_100431F  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
jmp loc_1005D82  +
cmp [ebp+arg_0] 4 +
jnz loc_1005D3B  +
push offset aSize  +
push dword ptr [esi+8]  +
call sub_1003F3B  +
test al al +
jz loc_1005E06  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] ebx +
call sub_1004568  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
cmp [ebp+arg_0] 2 +
jnz loc_1005D7C  +
push offset aAvailablesleep  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jnz loc_1005D67  +
push offset aA  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005EC4  +
mov [ebp+var_4] ebx +
call sub_100460F  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
cmp [ebp+arg_0] 3 +
jnz loc_1005E00  +
push offset aDevicequery  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005DAB  +
push dword ptr [esi+8]  +
mov [ebp+var_4] ebx +
call sub_1004A96  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
push offset aDeviceenablewa  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005DD5  +
push ebx  +
push dword ptr [esi+8]  +
mov [ebp+var_4] ebx +
call sub_1004C99  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
push offset aDevicedisablew  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005E3A  +
push 0  +
push dword ptr [esi+8]  +
mov [ebp+var_4] ebx +
call sub_1004C99  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
cmp [ebp+arg_0] 4 +
jnz loc_1005E34  +
push offset aExport  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005E3A  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+8]  +
call sub_1004E94  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
jmp loc_1005E3A  +
cmp [ebp+arg_0] 3 +
jnz loc_1005E71  +
push offset aImport  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005E71  +
cmp [ebp+arg_0] 4 +
mov [ebp+var_4] ebx +
jnz loc_1005E59  +
mov eax [esi+0Ch] +
jmp loc_1005E5B  +
xor eax eax +
push eax  +
push dword ptr [esi+8]  +
call sub_1004DA4  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
cmp [ebp+arg_0] 4 +
jnz loc_1005EB8  +
push offset aChange  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jnz loc_1005E9D  +
push offset asc_1002168  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005F8E  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+8]  +
call sub_1004FB2  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
mov eax [ebp+arg_0] +
cmp eax 2 +
jnz loc_1005F5B  +
push offset aLastwake  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005EEA  +
mov [ebp+var_4] ebx +
call sub_10032BF  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
push offset aAliases  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005F10  +
mov [ebp+var_4] ebx +
call sub_1003F9D  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
jnz loc_10064F9  +
push offset aRestoredefau_0  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005F31  +
mov [ebp+var_4] ebx +
call sub_1008A4C  +
test eax eax +
jnz loc_10057ED  +
push offset aReplacedefault  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_100602B  +
mov [ebp+var_4] ebx +
call PowerReplaceDefaultPowerSchemes  +
test eax eax +
jz loc_100602B  +
jmp loc_10057ED  +
cmp eax 3 +
jnz loc_1005F89  +
push offset aRestoreindivid  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005FF6  +
push dword ptr [esi+8]  +
mov [ebp+var_4] ebx +
call sub_1008A80  +
test eax eax +
jz loc_1005FF6  +
jmp loc_10057ED  +
cmp eax 4 +
jnz loc_1005FB6  +
push offset aDeletesetting  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005FBB  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+8]  +
call sub_1008AF9  +
test eax eax +
jz loc_1005FBB  +
jmp loc_10057ED  +
cmp eax 5 +
jnz loc_1005FF0  +
push offset aChangename  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1005FF0  +
cmp [ebp+arg_0] 5 +
mov [ebp+var_4] ebx +
jnz loc_1005FDA  +
mov eax [esi+10h] +
jmp loc_1005FDC  +
xor eax eax +
push eax  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
call sub_1008B78  +
test eax eax +
jnz loc_10057ED  +
cmp [ebp+arg_0] 2 +
jbe loc_1006022  +
push offset aAttributes  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1006022  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFEh +
push eax  +
lea eax [esi+8] +
push eax  +
mov [ebp+var_4] ebx +
call sub_1008E86  +
test eax eax +
jnz loc_10057ED  +
cmp [ebp+arg_0] ebx +
jbe loc_1006108  +
push offset aPpmperf  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1006066  +
cmp [ebp+arg_0] 4 +
jnz loc_10060AA  +
push offset aDecode  +
push dword ptr [esi+8]  +
call sub_1003F3B  +
test al al +
jz loc_10060B0  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] ebx +
call sub_1006CE0  +
test eax eax +
jnz loc_10057ED  +
push offset aPpmidle  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1006108  +
cmp [ebp+arg_0] 4 +
jnz loc_10060D6  +
push offset aDecode  +
push dword ptr [esi+8]  +
call sub_1003F3B  +
test al al +
jz loc_10060DC  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] ebx +
call sub_1006FCE  +
test eax eax +
jz loc_1006137  +
jmp loc_10057ED  +
cmp [ebp+arg_0] 3 +
jbe loc_1006066  +
push offset aEncode  +
push dword ptr [esi+8]  +
call sub_1003F3B  +
test al al +
jz loc_1006066  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFDh +
push eax  +
lea eax [esi+0Ch] +
push eax  +
mov [ebp+var_4] ebx +
call sub_1006DD0  +
jmp loc_100605E  +
cmp [ebp+arg_0] 3 +
jbe loc_100610C  +
push offset aEncode  +
push dword ptr [esi+8]  +
call sub_1003F3B  +
test al al +
jz loc_1006108  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFDh +
push eax  +
lea eax [esi+0Ch] +
push eax  +
mov [ebp+var_4] ebx +
call sub_10070C8  +
test eax eax +
jnz loc_10057ED  +
cmp [ebp+arg_0] 3 +
jnz loc_1006131  +
push offset aGetsecuritydes  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1006189  +
push dword ptr [esi+8]  +
mov [ebp+var_4] ebx +
call sub_1008C02  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
cmp [ebp+arg_0] 4 +
jnz loc_100615D  +
push offset aSetsecuritydes  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1006189  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] ebx +
push dword ptr [esi+8]  +
call sub_1008CD9  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
cmp [ebp+arg_0] 2 +
jnz loc_1006187  +
push offset aRequests  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_1006189  +
call sub_10033C3  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
cmp [ebp+arg_0] 2 +
mov [ebp+var_4] ebx +
jb loc_10061B4  +
push offset aRequestsoverri  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_10061B4  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFEh +
push eax  +
lea eax [esi+8] +
push eax  +
call sub_1003A88  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] 2 +
jnz loc_10061DE  +
push offset aWaketimers  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_10061E4  +
call sub_1002E4C  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
cmp [ebp+arg_0] 2 +
mov [ebp+var_4] ebx +
jb loc_10064E1  +
push offset LibFileName  +
push dword ptr [esi+4]  +
call sub_1003F3B  +
test al al +
jz loc_10064E1  +
call sub_1009C5D  +
test eax eax +
jl loc_10064CD  +
cmp [ebp+arg_0] 3 +
jnz loc_1006227  +
push offset aAuto  +
push dword ptr [esi+8]  +
call sub_1003F3B  +
test al al +
jz loc_100622D  +
call sub_1009FAC  +
jmp loc_10063EF  +
jb loc_10062D2  +
push offset aTrace  +
push dword ptr [esi+8]  +
call sub_1003F3B  +
test al al +
jz loc_10062D2  +
or [ebp+var_C] 0FFFFFFFFh +
and [ebp+var_14] 0 +
push 3  +
pop eax  +
mov [ebp+var_8] eax +
cmp [ebp+arg_0] eax +
jbe loc_10062B6  +
mov [ebp+StringUuid] 5 +
mov eax [ebp+StringUuid] +
cmp [ebp+arg_0] eax +
jb loc_10062B6  +
mov eax [ebp+var_8] +
push offset aD  +
push dword ptr [esi+eax*4]  +
call sub_1003F3B  +
test al al +
mov eax [ebp+var_8] +
jz loc_1006284  +
mov eax [esi+eax*4+4] +
mov [ebp+var_14] eax +
jmp loc_10062A6  +
push offset aDuration  +
push dword ptr [esi+eax*4]  +
call sub_1003F3B  +
test al al +
jz loc_10062B6  +
mov eax [ebp+var_8] +
push dword ptr [esi+eax*4+4]  +
call ds:_wtoi  +
pop ecx  +
mov [ebp+var_C] eax +
add [ebp+var_8] 2 +
mov eax [ebp+var_8] +
add [ebp+StringUuid] 2 +
cmp eax [ebp+arg_0] +
jb loc_100625C  +
mov eax [ebp+arg_0] +
cmp [ebp+var_8] eax +
jnz loc_10064C6  +
push [ebp+var_C]  +
push [ebp+var_14]  +
call sub_100A36F  +
jmp loc_10063EF  +
cmp [ebp+arg_0] 7 +
jb loc_10063FE  +
push offset aAnalyze  +
push dword ptr [esi+8]  +
call sub_1003F3B  +
test al al +
jz loc_10063FE  +
push offset aTrace  +
push dword ptr [esi+0Ch]  +
call sub_1003F3B  +
test al al +
jz loc_10063FE  +
push offset aNtkl  +
push dword ptr [esi+14h]  +
call sub_1003F3B  +
test al al +
jz loc_10063FE  +
mov eax [esi+10h] +
and [ebp+var_1C] 0 +
mov [ebp+var_24] eax +
mov eax [esi+18h] +
push 7  +
mov [ebp+var_20] eax +
pop eax  +
mov byte ptr [ebp+var_18] 1 +
mov byte ptr [ebp+var_14] 0 +
mov [ebp+var_8] eax +
cmp [ebp+arg_0] eax +
jbe loc_10063CF  +
mov [ebp+StringUuid] 8 +
mov [ebp+var_C] 9 +
mov eax [ebp+var_C] +
cmp [ebp+arg_0] eax +
jb loc_1006384  +
mov eax [ebp+var_8] +
push offset aOutput  +
push dword ptr [esi+eax*4]  +
call sub_1003F3B  +
test al al +
jz loc_1006384  +
mov eax [ebp+var_8] +
mov eax [esi+eax*4+4] +
add [ebp+var_8] 2 +
add [ebp+var_C] 2 +
add [ebp+StringUuid] 2 +
mov [ebp+var_1C] eax +
jmp loc_10063C7  +
mov eax [ebp+StringUuid] +
cmp [ebp+arg_0] eax +
jb loc_10063CF  +
mov eax [ebp+var_8] +
push offset aXml  +
push dword ptr [esi+eax*4]  +
call sub_1003F3B  +
test al al +
jz loc_10063A6  +
mov byte ptr [ebp+var_18] 0 +
jmp loc_10063BE  +
mov eax [ebp+var_8] +
push offset aSqm  +
push dword ptr [esi+eax*4]  +
call sub_1003F3B  +
test al al +
jz loc_10063CF  +
mov byte ptr [ebp+var_14] 1 +
inc [ebp+var_8]  +
inc [ebp+var_C]  +
inc [ebp+StringUuid]  +
mov eax [ebp+var_8] +
cmp eax [ebp+arg_0] +
jb loc_1006350  +
mov eax [ebp+arg_0] +
cmp [ebp+var_8] eax +
jnz loc_10064C6  +
push [ebp+var_14]  +
push [ebp+var_18]  +
push [ebp+var_1C]  +
push [ebp+var_20]  +
push [ebp+var_24]  +
call sub_1009A4C  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
mov [ebp+var_4] ebx +
jmp loc_10064C6  +
or [ebp+var_18] 0FFFFFFFFh +
and [ebp+var_14] 0 +
push 2  +
pop ebx  +
mov byte ptr [ebp+var_1C] 1 +
cmp ebx [ebp+arg_0] +
jnb loc_10064A5  +
mov [ebp+var_8] 4 +
mov [ebp+StringUuid] 3 +
mov eax [ebp+var_8] +
cmp [ebp+arg_0] eax +
jb loc_1006446  +
push offset aOutput  +
push dword ptr [esi+ebx*4]  +
call sub_1003F3B  +
test al al +
jz loc_1006446  +
mov eax [esi+ebx*4+4] +
mov [ebp+var_14] eax +
jmp loc_1006493  +
mov eax [ebp+StringUuid] +
cmp [ebp+arg_0] eax +
jb loc_100646C  +
push offset aXml  +
push dword ptr [esi+ebx*4]  +
call sub_1003F3B  +
test al al +
jz loc_100646C  +
inc ebx  +
inc [ebp+StringUuid]  +
inc [ebp+var_8]  +
mov byte ptr [ebp+var_1C] 0 +
jmp loc_100649D  +
mov eax [ebp+var_8] +
cmp [ebp+arg_0] eax +
jb loc_10064A2  +
push offset aDuration  +
push dword ptr [esi+ebx*4]  +
call sub_1003F3B  +
test al al +
jz loc_10064A2  +
push dword ptr [esi+ebx*4+4]  +
call ds:_wtoi  +
pop ecx  +
mov [ebp+var_18] eax +
add [ebp+StringUuid] 2 +
inc ebx  +
inc ebx  +
add [ebp+var_8] 2 +
cmp ebx [ebp+arg_0] +
jb loc_1006424  +
cmp ebx [ebp+arg_0] +
jnz loc_10064C3  +
push [ebp+var_1C]  +
push [ebp+var_18]  +
push [ebp+var_14]  +
call sub_100A17B  +
mov edi eax +
neg edi  +
sbb edi edi +
inc edi  +
mov [ebp+var_4] 1 +
xor ebx ebx +
inc ebx  +
call sub_1009961  +
jmp loc_10064E1  +
push 5C6h  +
mov [ebp+var_4] ebx +
mov edi ebx +
call sub_100BA15  +
mov dword_100E7A0 eax +
cmp [ebp+var_4] 0 +
jnz loc_10064F5  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov edi ebx +
test edi edi +
jz loc_100652E  +
mov eax hMem +
test eax eax +
jnz loc_100651E  +
mov eax dword_100E7A0 +
test eax eax +
jnz loc_100651E  +
push 2D9h  +
call sub_100BA15  +
mov dword_100E7A0 eax +
test eax eax +
jz loc_100652E  +
push eax  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100B4C8  +
mov eax hMem +
test eax eax +
jz loc_1006545  +
push eax  +
call ds:LocalFree  +
and hMem 0 +
xor eax eax +
test edi edi +
pop edi  +
pop esi  +
setnz al  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
mov [eax] ebx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
stos   +
stos   +
stos   +
mov eax [esi+4] +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
mov dword ptr [ebp+var_8] ebx +
cmp eax ebx +
jnz loc_100659B  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_1006590  +
add eax esi +
mov [ebp+var_4] eax +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_10065CE  +
add eax esi +
jmp loc_10065CB  +
mov ecx [esi+8] +
cmp ecx ebx +
jz loc_10065A7  +
add ecx esi +
mov [ebp+var_4] ecx +
cmp eax 2 +
jnz loc_10065CE  +
mov eax [esi+0Ch] +
mov [ebp+var_1C] eax +
mov eax [esi+10h] +
mov [ebp+var_18] eax +
lea eax [ebp+var_1C] +
push eax  +
push 1  +
push ebx  +
call I_QueryTagInformation  +
test eax eax +
jnz loc_10065CE  +
mov eax [ebp+hMem] +
mov dword ptr [ebp+var_8] eax +
cmp [esi+4] ebx +
jnz loc_10065D7  +
push 14h  +
jmp loc_10065D9  +
push 16h  +
mov eax [ebp+var_4] +
pop edi  +
cmp eax ebx +
jz loc_1006616  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10065E4  +
sub eax edx +
sar eax 1 +
lea edi [edi+eax*2] +
mov eax dword ptr [ebp+var_8] +
mov [ebp+arg_0] edi +
cmp eax ebx +
jz loc_100663A  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1006602  +
sub eax edx +
sar eax 1 +
lea edi [edi+eax*2+6] +
jmp loc_1006637  +
push 5A7h  +
call sub_100BA15  +
mov [ebp+var_C] eax +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1006626  +
sub eax edx +
sar eax 1 +
lea edi [edi+eax*2] +
mov [ebp+arg_0] edi +
push edi  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_10066CE  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 1 +
mov esi [esi+4] +
test esi esi +
jnz loc_1006664  +
mov eax offset aDriver_1 +
jmp loc_1006673  +
mov eax offset aService_1 +
cmp esi 2 +
jz loc_1006673  +
mov eax offset aProcess_1 +
push 0  +
lea ecx [ebp+arg_0] +
push ecx  +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
push edi  +
push ebx  +
call sub_10055BE  +
xor esi esi +
cmp [ebp+var_4] esi +
jz loc_10066C0  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_10055BE  +
cmp dword ptr [ebp+var_8] esi +
jz loc_10066CE  +
push dword ptr [ebp+var_8]  +
push offset aS  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1005708  +
add esp 10h +
jmp loc_10066CE  +
push [ebp+var_C]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1005583  +
cmp [ebp+hMem] 0 +
jz loc_10066DD  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov dword ptr [esi] offset off_10025CC +
mov eax [edi+0Ch] +
add eax 10h +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [esi+8] eax +
test eax eax +
jnz loc_1006728  +
push offset dword_100C678  +
lea eax [ebp+arg_0] +
push eax  +
mov [ebp+arg_0] 8007000Eh +
call _CxxThrowException  +
mov ecx [edi+0Ch] +
add ecx 10h +
push ecx  +
push edi  +
push eax  +
call memcpy  +
mov eax [esi+8] +
mov eax [eax+8] +
add eax [ebp+arg_4] +
add esp 0Ch +
and dword ptr [esi+0Ch] 0 +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
mov [esi+10h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi ds:LocalFree +
mov dword ptr [esi] offset off_10025CC +
test eax eax +
jz loc_1006778  +
push eax  +
call edi  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_1006782  +
push esi  +
call edi  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006795  +
push esi  +
sub eax edx +
sar eax 1 +
push edi  +
lea esi [eax+eax+2] +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_10067C5  +
push esi  +
push [ebp+arg_0]  +
push edi  +
call memcpy  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 400h  +
push 40h  +
mov esi ecx +
call ds:LocalAlloc  +
mov edi eax +
test edi edi +
jz loc_100680E  +
push 200h  +
push edi  +
push dword ptr [esi+4]  +
push dword ptr [esi+10h]  +
call ds:LoadStringW  +
test eax eax +
jz loc_100680E  +
mov eax [ebp+arg_0] +
mov [eax] edi +
xor eax eax +
inc eax  +
jmp loc_100681D  +
push edi  +
call ds:LocalFree  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10066EB  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_10025D4 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10066EB  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_10025DC +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_100675C  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10066EB  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi] offset off_10025E4 +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0Ch] +
cmp dword ptr [esi] 0 +
jnz loc_100691E  +
push esi  +
call sub_10067D2  +
test eax eax +
jnz loc_100691E  +
and [esi] eax +
jmp loc_1006935  +
push dword ptr [esi]  +
mov ecx edi +
call sub_100678A  +
mov ecx [ebp+8] +
mov [ecx] eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ebx [esi+8] +
push edi  +
xor edi edi +
add ebx 10h +
mov [ebp-4] edi +
cmp [esi+0Ch] edi +
jnz loc_10069BC  +
lea eax [ebp-4] +
push eax  +
call sub_10067D2  +
test eax eax +
jnz loc_100696F  +
mov [esi+0Ch] edi +
xor eax eax +
jmp loc_10069D4  +
mov eax [ebp-4] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1006975  +
sub eax ecx +
sar eax 1 +
lea edi [eax+0Bh] +
lea eax [edi+edi] +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [esi+0Ch] eax +
test eax eax +
jnz loc_10069A4  +
push dword ptr [ebp-4]  +
call ds:LocalFree  +
jmp loc_100696B  +
***
push dword ptr [ebx]  +
push dword ptr [ebp-4]  +
push edi  +
push eax  +
call swprintf_s  +
add esp 10h +
push dword ptr [ebp-4]  +
call ds:LocalFree  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
call sub_100678A  +
mov ecx [ebp+8] +
mov [ecx] eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
mov eax offset asc_10025EC +
mov [ebp-10h] edi +
add esi 10h +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10069FE  +
sub eax edx +
sar eax 1 +
xor ebx ebx +
mov [ebp-4] eax +
cmp [edi+0Ch] ebx +
jnz loc_1006B39  +
lea eax [ebp-0Ch] +
push eax  +
mov ecx edi +
call sub_10067D2  +
test eax eax +
jnz loc_1006A33  +
mov [edi+0Ch] ebx +
xor eax eax +
jmp loc_1006B51  +
xor edx edx +
mov [ebp-8] ebx +
mov ecx esi +
cmp [esi] bx +
jz loc_1006A60  +
mov eax ecx +
lea ebx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
test di di +
jnz loc_1006A44  +
sub eax ebx +
sar eax 1 +
inc eax  +
add edx eax +
inc dword ptr [ebp-8]  +
lea ecx [ecx+eax*2] +
cmp [ecx] di +
jnz loc_1006A3F  +
mov eax [ebp-8] +
imul eax [ebp-4] +
mov ebx ds:LocalAlloc +
lea edi [eax+edx+1] +
lea eax [edi+edi] +
push eax  +
push 40h  +
call ebx  +
mov [ebp-4] eax +
test eax eax +
jnz loc_1006A8B  +
push dword ptr [ebp-0Ch]  +
call ds:LocalFree  +
jmp loc_1006A2C  +
***
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006A90  +
push offset asc_10025EC  +
sub eax edx +
push edi  +
push dword ptr [ebp-4]  +
sar eax 1 +
mov [ebp-14h] eax +
call wcscat_s  +
push esi  +
push edi  +
push dword ptr [ebp-4]  +
call wcscat_s  +
mov eax [ebp-14h] +
add esp 18h +
dec dword ptr [ebp-8]  +
lea esi [esi+eax*2+2] +
jnz loc_1006A8B  +
mov eax [ebp-4] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006ACE  +
mov edi [ebp-0Ch] +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax edi +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1006AE6  +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx+1] +
lea eax [esi+esi] +
push eax  +
push 40h  +
call ebx  +
mov ecx [ebp-10h] +
push dword ptr [ebp-4]  +
mov [ecx+0Ch] eax +
test eax eax +
jnz loc_1006B1D  +
mov esi ds:LocalFree +
call esi  +
push edi  +
call esi  +
jmp loc_1006A2C  +
***
push edi  +
push esi  +
push eax  +
call swprintf_s  +
mov esi ds:LocalFree +
add esp 10h +
push dword ptr [ebp-4]  +
call esi  +
push edi  +
call esi  +
mov edi [ebp-10h] +
push dword ptr [edi+0Ch]  +
mov ecx edi +
call sub_100678A  +
mov ecx [ebp+8] +
mov [ecx] eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100675C  +
test byte ptr [ebp+8] 1 +
jz loc_1006B77  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10068A0  +
test byte ptr [ebp+8] 1 +
jz loc_1006B9D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
push edi  +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006BC8  +
sub eax edi +
sar eax 1 +
cmp eax 2Ch +
jz loc_1006BE0  +
push 57h  +
pop eax  +
jmp loc_1006C2C  +
push ebx  +
push 7  +
xor eax eax +
pop ecx  +
mov edi edx +
stos   +
lea ebx [edx+6] +
mov word ptr [ebp+var_8] ax +
xor edi edi +
mov ax [esi+edi*2] +
mov [ebp+var_C] ax +
mov ax [esi+edi*2+2] +
mov [ebp-0Ah] ax +
push 10h  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
call ds:wcstoul  +
lea ecx [ebp+var_8] +
add esp 0Ch +
cmp [ebp+var_10] ecx +
jnz loc_1006C3C  +
inc edi  +
inc edi  +
mov [ebx] al +
inc ebx  +
cmp edi 2Bh +
jb loc_1006BF3  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100A786  +
leave   +
retn 8  +
push 57h  +
pop eax  +
jmp loc_1006C2B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006C65  +
sub eax edx +
sar eax 1 +
cmp eax 40h +
jz loc_1006C7D  +
push 57h  +
pop eax  +
jmp loc_1006CC6  +
push edi  +
push 8  +
xor eax eax +
pop ecx  +
mov edi ebx +
stos   +
mov word ptr [ebp+var_8] ax +
xor edi edi +
mov ax [esi+edi*2] +
mov [ebp+var_C] ax +
mov ax [esi+edi*2+2] +
mov [ebp-0Ah] ax +
push 10h  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
call ds:wcstoul  +
lea ecx [ebp+var_8] +
add esp 0Ch +
cmp [ebp+var_10] ecx +
jnz loc_1006CD6  +
inc edi  +
inc edi  +
mov [ebx] al +
inc ebx  +
cmp edi 3Fh +
jb loc_1006C8D  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 8  +
push 57h  +
pop eax  +
jmp loc_1006CC5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_0]  +
call sub_1006BA9  +
mov esi eax +
test esi esi +
jz loc_1006D06  +
push esi  +
call sub_1005283  +
jmp loc_1006DC4  +
movzx eax [ebp+var_16] +
push edi  +
push eax  +
push 57Ch  +
call sub_100BA15  +
mov esi ds:wprintf +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
push [ebp+var_14]  +
push 57Dh  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
push [ebp+var_10]  +
push 57Eh  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
push [ebp+var_C]  +
push 57Fh  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
push [ebp+var_8]  +
push 580h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
push [ebp+var_4]  +
push 581h  +
call sub_100BA15  +
push eax  +
call esi  +
movzx edi [ebp+var_15] +
pop ecx  +
pop ecx  +
mov eax edi +
and eax 1 +
push eax  +
push 582h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
mov eax edi +
shr eax 1 +
pop ecx  +
and eax 3 +
push eax  +
push 583h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
shr edi 3 +
and edi 3 +
push edi  +
push 584h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_1006FB7  +
test dl 1 +
jnz loc_1006FB7  +
xor eax eax +
and [ebp+arg_4] eax +
push 7  +
pop ecx  +
lea edi [ebp+var_24] +
dec edx  +
stos   +
mov [ebp+var_8] edx +
jz loc_1006F8E  +
mov ebx [ebp+arg_4] +
mov esi [ebp+arg_0] +
shl ebx 2 +
push offset aBase  +
lea edi [ebx+esi] +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006E4E  +
cmp [ebp+arg_4] 0 +
ja loc_1006FB7  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [ebx+esi+4]  +
call sub_1006BA9  +
mov esi eax +
test esi esi +
jz loc_1006F7E  +
push esi  +
call sub_1005283  +
jmp loc_1006FC0  +
mov esi [ebx+esi+4] +
push 0  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call ds:wcstoul  +
mov ebx eax +
mov eax esi +
add esp 0Ch +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1006E69  +
sub eax ecx +
sar eax 1 +
lea eax [esi+eax*2] +
cmp [ebp+var_4] eax +
jnz loc_1006FB7  +
push offset aBusyadjust  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006EA7  +
cmp ebx 0FFh +
ja loc_1006FB7  +
mov [ebp+var_1E] bl +
jmp loc_1006F7E  +
push offset aTimecheck  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006EBF  +
mov [ebp+var_1C] ebx +
jmp loc_1006F7E  +
push offset aIncreasetime  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006ED7  +
mov [ebp+var_18] ebx +
jmp loc_1006F7E  +
push offset aDecreasetime  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006EEF  +
mov [ebp+var_14] ebx +
jmp loc_1006F7E  +
push offset aIncreasepercen  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006F04  +
mov [ebp+var_10] ebx +
jmp loc_1006F7E  +
push offset aDecreasepercen  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006F19  +
mov [ebp+var_C] ebx +
jmp loc_1006F7E  +
push offset aIncreasepolicy  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006F3C  +
cmp ebx 2 +
ja loc_1006FB7  +
add bl bl +
xor bl [ebp+var_1D] +
and bl 6 +
jmp loc_1006F5A  +
push offset aDecreasepolicy  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006F5F  +
cmp ebx 2 +
ja loc_1006FB7  +
shl bl 3 +
xor bl [ebp+var_1D] +
and bl 18h +
xor [ebp+var_1D] bl +
jmp loc_1006F7E  +
push offset aDomainaccounti  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1006FB7  +
cmp ebx 1 +
ja loc_1006FB7  +
mov al [ebp+var_1D] +
xor al bl +
and al 1 +
xor [ebp+var_1D] al +
add [ebp+arg_4] 2 +
mov eax [ebp+arg_4] +
cmp eax [ebp+var_8] +
jb loc_1006E06  +
mov esi ds:wprintf +
xor edi edi +
movzx eax [ebp+edi+var_1E] +
push eax  +
push offset a02x  +
call esi  +
inc edi  +
pop ecx  +
pop ecx  +
cmp edi 16h +
jb loc_1006F96  +
push offset word_100132C  +
call esi  +
pop ecx  +
xor esi esi +
jmp loc_1006FC0  +
push 57h  +
call sub_1005283  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
lea ecx [ebp+var_24] +
push ecx  +
push eax  +
call sub_1006C46  +
mov esi eax +
test esi esi +
jz loc_1006FFF  +
push esi  +
call sub_1005283  +
jmp loc_10070B2  +
movzx eax word ptr [ebp+var_24] +
push ebx  +
push edi  +
push eax  +
push 590h  +
call sub_100BA15  +
mov esi ds:wprintf +
push eax  +
call esi  +
movzx edi word ptr [ebp+var_24+2] +
pop ecx  +
xor ebx ebx +
pop ecx  +
mov eax edi +
inc ebx  +
and eax ebx +
push eax  +
push 595h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
shr edi 1 +
and edi ebx +
push edi  +
push 596h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
push [ebp+var_20]  +
push 591h  +
call sub_100BA15  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
lea edi [ebp+var_18] +
mov [ebp+var_28] 3 +
push dword ptr [edi-4]  +
push ebx  +
push 592h  +
call sub_100BA15  +
push eax  +
call esi  +
movzx eax byte ptr [edi] +
add esp 0Ch +
push eax  +
push ebx  +
push 593h  +
call sub_100BA15  +
push eax  +
call esi  +
movzx eax byte ptr [edi+1] +
add esp 0Ch +
push eax  +
push ebx  +
push 594h  +
call sub_100BA15  +
push eax  +
call esi  +
add esp 0Ch +
add edi 8 +
inc ebx  +
dec [ebp+var_28]  +
jnz loc_1007066  +
pop edi  +
xor esi esi +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100A786  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_30] ebx +
test edx edx +
jz loc_100729B  +
test dl 1 +
jnz loc_100729B  +
or [ebp+var_2C] 0FFFFFFFFh +
xor eax eax +
and [ebp+var_28] eax +
push 8  +
pop ecx  +
lea edi [ebp+var_24] +
dec edx  +
stos   +
mov [ebp+var_34] edx +
jnz loc_100714B  +
mov esi ds:wprintf +
xor eax eax +
inc eax  +
mov word ptr [ebp+var_24] ax +
mov [ebp+var_20] 3 +
xor edi edi +
movzx eax byte ptr [ebp+edi+var_24] +
push eax  +
push offset a02x  +
call esi  +
inc edi  +
pop ecx  +
pop ecx  +
cmp edi 20h +
jb loc_1007124  +
push offset word_100132C  +
call esi  +
pop ecx  +
xor esi esi +
jmp loc_10072A4  +
mov ebx [ebp+var_30] +
mov esi [ebp+var_28] +
shl esi 2 +
push offset aBase  +
lea edi [esi+ebx] +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_1007190  +
cmp [ebp+var_28] 0 +
ja loc_100729B  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+ebx+4]  +
call sub_1006C46  +
mov esi eax +
test esi esi +
jz loc_1007286  +
push esi  +
call sub_1005283  +
jmp loc_10072A4  +
mov esi [esi+ebx+4] +
push 0  +
lea eax [ebp+var_38] +
push eax  +
push esi  +
call ds:wcstoul  +
mov ebx eax +
mov eax esi +
add esp 0Ch +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10071AB  +
sub eax ecx +
sar eax 1 +
lea eax [esi+eax*2] +
cmp [ebp+var_38] eax +
jnz loc_100729B  +
push offset aCstate  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_10071E7  +
dec ebx  +
cmp ebx 2 +
ja loc_100729B  +
mov [ebp+var_2C] ebx +
jmp loc_1007286  +
push offset aScaling  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_100720A  +
cmp ebx 1 +
ja loc_100729B  +
mov eax [ebp+var_24+2] +
xor eax ebx +
and eax 1 +
jmp loc_1007228  +
push offset aDisable  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_100722E  +
cmp ebx 1 +
ja loc_100729B  +
lea eax [ebx+ebx] +
xor eax [ebp+var_24+2] +
and eax 2 +
xor word ptr [ebp+var_24+2] ax +
jmp loc_1007286  +
mov esi [ebp+var_2C] +
cmp esi 3 +
jnb loc_100729B  +
push offset aTimecheck  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_100724C  +
mov [ebp+esi*8+var_1C] ebx +
jmp loc_1007286  +
push offset aDemotepercent  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_100726A  +
cmp ebx 0FFh +
ja loc_100729B  +
mov [ebp+esi*8+var_18] bl +
jmp loc_1007286  +
push offset aPromotepercent  +
push dword ptr [edi]  +
call sub_1003F3B  +
test al al +
jz loc_100729B  +
cmp ebx 0FFh +
ja loc_100729B  +
mov [ebp+esi*8+var_17] bl +
add [ebp+var_28] 2 +
mov eax [ebp+var_28] +
cmp eax [ebp+var_34] +
jb loc_1007148  +
jmp loc_100710E  +
push 57h  +
call sub_1005283  +
mov esi eax +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_10072D7  +
cmp [esi] ax +
jz loc_10072D3  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_10072C9  +
test edx edx +
jnz loc_10072DC  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10072ED  +
test eax eax +
jl loc_10072EA  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi eax +
xor eax eax +
test edx edx +
jz loc_1007306  +
cmp edx [ebp+arg_4] +
jbe loc_100730B  +
mov eax 80070057h +
test eax eax +
jl loc_1007319  +
mov eax [ebp+arg_0] +
call sub_10072BC  +
jmp loc_100731C  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push [ebp+StringUuid]  +
xor ebx ebx +
call sub_1004055  +
test eax eax +
jz loc_1007349  +
push esi  +
push edi  +
mov edi [ebp+Uuid] +
mov esi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
jmp loc_100736A  +
push [ebp+Uuid]  +
push [ebp+StringUuid]  +
call ds:UuidFromStringW  +
mov ebx eax +
test ebx ebx +
jz loc_100736A  +
push 57h  +
pop ebx  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jbe loc_100739A  +
push offset asc_1001BFC  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100B4C8  +
dec esi  +
jnz loc_1007383  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+lpString] 0 +
lea eax [ebp+lpString] +
push eax  +
push [ebp+Uuid]  +
call ds:UuidToStringW  +
test eax eax +
jnz loc_10073D6  +
cmp [ebp+lpString] eax +
jz locret_10073E6  +
push [ebp+lpString]  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100B4C8  +
cmp [ebp+lpString] 0 +
jz locret_10073E6  +
lea eax [ebp+lpString] +
push eax  +
call ds:RpcStringFreeW  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_14]  +
xor edi edi +
mov [ebp+var_4] edi +
mov ebx 490h +
call sub_1007376  +
cmp [ebp+arg_10] 1 +
mov esi ds:__iob_func +
jnz loc_1007441  +
push 351h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call PowerReadACValueIndex  +
mov ebx eax +
cmp [ebp+arg_10] 2 +
jnz loc_1007472  +
push 356h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call PowerReadDCValueIndex  +
mov ebx eax +
cmp ebx edi +
jnz loc_1007494  +
push [ebp+var_4]  +
mov edi offset unk_100E198 +
push offset a0x08lx  +
push 204h  +
push edi  +
call swprintf_s  +
add esp 10h +
push edi  +
jmp loc_100749F  +
push 32Eh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+Status] ebx +
mov [ebp+var_4] ebx +
cmp [ebp+arg_4] ebx +
jnz loc_10074E3  +
cmp [ebp+arg_C] ebx +
jnz loc_10074E3  +
cmp [ebp+Uuid] ebx +
jnz loc_10074E3  +
mov [ebp+var_4] 57h +
jmp loc_100765E  +
push esi  +
push [ebp+uBytes]  +
call sub_1007376  +
cmp [ebp+arg_C] ebx +
jz loc_1007515  +
push 34Ch  +
call sub_100BA15  +
mov esi ds:__iob_func +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+arg_C]  +
jmp loc_10075C2  +
cmp [ebp+Uuid] ebx +
jz loc_10075A3  +
push 347h  +
call sub_100BA15  +
mov esi ds:__iob_func +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+Uuid]  +
call sub_10073A4  +
lea eax [ebp+Status] +
push eax  +
push offset Uuid2  +
push [ebp+Uuid]  +
call ds:UuidEqual  +
test eax eax +
jz loc_10075C7  +
push offset asc_1001BC4  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset asc_10027BC  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push 35Bh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset asc_10027B8  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
jmp loc_100765D  +
push 342h  +
call sub_100BA15  +
mov esi ds:__iob_func +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+arg_4]  +
call sub_10073A4  +
push offset asc_1001BC4  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+uBytes] +
push eax  +
push ebx  +
push [ebp+arg_C]  +
mov [ebp+uBytes] ebx +
push [ebp+Uuid]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call PowerReadFriendlyName  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100765D  +
cmp [ebp+uBytes] ebx +
jz loc_100765D  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_100765D  +
lea eax [ebp+uBytes] +
push eax  +
push ebx  +
push [ebp+arg_C]  +
push [ebp+Uuid]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call PowerReadFriendlyName  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1007656  +
push offset asc_10027BC  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset asc_10027B8  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push ebx  +
call ds:LocalFree  +
pop esi  +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_10]  +
xor ebx ebx +
push [ebp+arg_C]  +
push [ebp+Uuid]  +
push ebx  +
push [ebp+uBytes]  +
call sub_10074B8  +
mov esi ds:__iob_func +
push offset word_100132C  +
mov edi eax +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
cmp edi ebx +
jz loc_10076AD  +
mov eax edi +
jmp loc_1007946  +
add [ebp+arg_10] 2 +
lea eax [ebp+uBytes] +
push eax  +
push [ebp+arg_C]  +
push [ebp+Uuid]  +
push ebx  +
call PowerReadValueMin  +
test eax eax +
jnz loc_100784E  +
push [ebp+arg_10]  +
call sub_1007376  +
push 360h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+uBytes]  +
mov ebx 204h +
push offset a0x08lx_0  +
push ebx  +
mov edi offset unk_100E198 +
push edi  +
call swprintf_s  +
add esp 10h +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+uBytes] +
push eax  +
push [ebp+arg_C]  +
push [ebp+Uuid]  +
push 0  +
call PowerReadValueMax  +
test eax eax +
jnz loc_1007760  +
push [ebp+arg_10]  +
call sub_1007376  +
push 365h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+uBytes]  +
push offset a0x08lx_0  +
push ebx  +
push edi  +
call swprintf_s  +
add esp 10h +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+uBytes] +
push eax  +
push [ebp+arg_C]  +
push [ebp+Uuid]  +
push 0  +
call PowerReadValueIncrement  +
test eax eax +
jnz loc_10077B1  +
push [ebp+arg_10]  +
call sub_1007376  +
push 36Ah  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+uBytes]  +
push offset a0x08lx_0  +
push ebx  +
push edi  +
call swprintf_s  +
add esp 10h +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
xor eax eax +
lea ecx [ebp+uBytes] +
push ecx  +
push eax  +
push [ebp+arg_C]  +
mov [ebp+uBytes] eax +
push [ebp+Uuid]  +
push eax  +
call PowerReadValueUnitsSpecifier  +
test eax eax +
jnz loc_1007944  +
cmp [ebp+uBytes] eax +
jz loc_1007944  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1007944  +
lea ecx [ebp+uBytes] +
push ecx  +
push eax  +
push [ebp+arg_C]  +
push [ebp+Uuid]  +
push 0  +
call PowerReadValueUnitsSpecifier  +
test eax eax +
jnz loc_1007840  +
push [ebp+arg_10]  +
call sub_1007376  +
push 36Fh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+hMem]  +
push offset aS_0  +
push ebx  +
push edi  +
call swprintf_s  +
add esp 10h +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_1007944  +
mov [ebp+var_8] ebx +
mov ebx 204h +
mov edi offset unk_100E198 +
xor eax eax +
lea ecx [ebp+uBytes] +
push ecx  +
push eax  +
push [ebp+var_8]  +
mov [ebp+uBytes] eax +
push [ebp+arg_C]  +
push [ebp+Uuid]  +
push eax  +
call PowerReadPossibleFriendlyName  +
mov [ebp+var_C] eax +
test eax eax +
jnz loc_1007937  +
cmp [ebp+uBytes] eax +
jz loc_1007937  +
push [ebp+arg_10]  +
call sub_1007376  +
push 379h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+var_8]  +
push offset a03d  +
push ebx  +
push edi  +
call swprintf_s  +
add esp 10h +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1007937  +
lea ecx [ebp+uBytes] +
push ecx  +
push eax  +
push [ebp+var_8]  +
push [ebp+arg_C]  +
push [ebp+Uuid]  +
push 0  +
call PowerReadPossibleFriendlyName  +
mov [ebp+var_C] eax +
test eax eax +
jnz loc_100792E  +
push [ebp+arg_10]  +
call sub_1007376  +
push 374h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+hMem]  +
push offset aS_0  +
push ebx  +
push edi  +
call swprintf_s  +
add esp 10h +
push edi  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+hMem]  +
call ds:LocalFree  +
inc [ebp+var_8]  +
cmp [ebp+var_C] 0 +
jz loc_100785B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 2C1h  +
mov [ebp+hMem] edi +
call sub_100BA15  +
mov esi ds:__iob_func +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push 2C5h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
call PowerGetActiveScheme  +
test eax eax +
jz loc_10079AF  +
mov [ebp+hMem] edi +
mov [ebp+var_24] edi +
push 10h  +
pop eax  +
lea ecx [ebp+var_28] +
push ecx  +
lea ecx [ebp+Uuid] +
push ecx  +
push [ebp+var_24]  +
mov [ebp+var_28] eax +
push eax  +
push edi  +
push edi  +
push edi  +
call PowerEnumerate  +
mov [ebp+var_20] eax +
cmp eax edi +
jnz loc_1007ABF  +
push edi  +
mov [ebp+var_30] edi +
call sub_1007376  +
push 342h  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+Uuid] +
push eax  +
call sub_10073A4  +
push offset asc_1001BC4  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+uBytes] +
push eax  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Uuid] +
push eax  +
push edi  +
mov [ebp+uBytes] edi +
call PowerReadFriendlyName  +
test eax eax +
jnz loc_1007A85  +
cmp [ebp+uBytes] edi +
jz loc_1007A85  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_1007A85  +
lea eax [ebp+uBytes] +
push eax  +
push ebx  +
push edi  +
push edi  +
lea eax [ebp+Uuid] +
push eax  +
push edi  +
call PowerReadFriendlyName  +
test eax eax +
jnz loc_1007A7E  +
push offset asc_10027BC  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset asc_10027B8  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push ebx  +
call ds:LocalFree  +
cmp [ebp+hMem] edi +
jz loc_1007AAF  +
lea eax [ebp+Status] +
push eax  +
push [ebp+hMem]  +
lea eax [ebp+Uuid] +
push eax  +
call ds:UuidEqual  +
test eax eax +
jz loc_1007AAF  +
push offset asc_10027E8  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset word_100132C  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
inc [ebp+var_24]  +
cmp [ebp+var_20] edi +
jz loc_10079B2  +
cmp [ebp+var_20] 103h +
jnz loc_1007AD7  +
mov [ebp+var_20] edi +
cmp [ebp+hMem] edi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1007AE8  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_20] +
xor ecx ebp +
call sub_100A786  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+StringUuid] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_44] esi +
mov [ebp+hMem] esi +
mov [ebp+var_4C] esi +
cmp eax esi +
jz loc_1007B3F  +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
mov [ebp+var_50] eax +
cmp eax esi +
jnz loc_1007B6D  +
lea edi [ebp+Uuid] +
mov [ebp+var_3C] edi +
jmp loc_1007B58  +
lea eax [ebp+hMem] +
push eax  +
push esi  +
call PowerGetActiveScheme  +
mov [ebp+var_50] eax +
cmp eax esi +
jnz loc_1007B6D  +
mov eax [ebp+hMem] +
mov [ebp+var_3C] eax +
mov edi eax +
cmp ebx esi +
jz loc_1007B77  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
call sub_1007326  +
mov [ebp+var_50] eax +
cmp eax esi +
jz loc_1007B71  +
push 7  +
jmp loc_1007B96  +
lea eax [ebp+var_14] +
mov [ebp+var_4C] eax +
lea eax [ebp+var_44] +
push eax  +
push esi  +
push esi  +
push [ebp+var_4C]  +
mov [ebp+var_44] esi +
push edi  +
push esi  +
call PowerReadFriendlyName  +
mov [ebp+var_50] eax +
cmp eax esi +
jz loc_1007BA5  +
push 38Dh  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1007DA5  +
mov ebx ds:__iob_func +
mov [ebp+var_58] esi +
cmp edi esi +
jz loc_1007C5A  +
push esi  +
call sub_1007376  +
push 342h  +
call sub_100BA15  +
push eax  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push edi  +
call sub_10073A4  +
push offset asc_1001BC4  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+uBytes] +
push eax  +
push esi  +
push esi  +
push esi  +
push edi  +
push esi  +
mov [ebp+uBytes] esi +
call PowerReadFriendlyName  +
test eax eax +
jnz loc_1007C5A  +
cmp [ebp+uBytes] esi +
jz loc_1007C5A  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi esi +
jz loc_1007C5A  +
lea eax [ebp+uBytes] +
push eax  +
push edi  +
push esi  +
push esi  +
push [ebp+var_3C]  +
push esi  +
call PowerReadFriendlyName  +
test eax eax +
jnz loc_1007C53  +
push offset asc_10027BC  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push edi  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset asc_10027B8  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push edi  +
call ds:LocalFree  +
mov edi offset word_100132C +
push edi  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov [ebp+var_40] 2 +
cmp [ebp+var_4C] esi +
jnz loc_1007C8A  +
mov esi offset Uuid2 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
mov edi offset word_100132C +
mov [ebp+var_54] esi +
push esi  +
lea eax [ebp+var_14] +
push eax  +
call PowerReadSettingAttributes  +
test al 1 +
jz loc_1007CA4  +
cmp [ebp+arg_8] esi +
jz loc_1007D77  +
push [ebp+var_40]  +
lea eax [ebp+var_14] +
push esi  +
push eax  +
push [ebp+var_3C]  +
push esi  +
call sub_10074B8  +
push edi  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
add [ebp+var_40] 2 +
mov [ebp+uBytes] esi +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+uBytes]  +
lea eax [ebp+var_14] +
push 12h  +
push eax  +
push [ebp+var_3C]  +
mov [ebp+var_44] 10h +
push esi  +
call PowerEnumerate  +
mov [ebp+var_58] eax +
cmp eax esi +
jnz loc_1007D67  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call PowerReadSettingAttributes  +
test al 1 +
jz loc_1007D0B  +
cmp [ebp+arg_8] esi +
jnz loc_1007D0B  +
inc [ebp+uBytes]  +
jmp loc_1007CC8  +
push [ebp+var_40]  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_3C]  +
push esi  +
call sub_100766B  +
push [ebp+var_40]  +
lea eax [ebp+var_24] +
push 1  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_3C]  +
push esi  +
call sub_10073EF  +
push edi  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+var_40]  +
lea eax [ebp+var_24] +
push 2  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_3C]  +
push esi  +
call sub_10073EF  +
push offset asc_10027F0  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
inc [ebp+uBytes]  +
cmp [ebp+var_58] esi +
jz loc_1007CC8  +
sub [ebp+var_40] 2 +
cmp [ebp+var_4C] esi +
jnz loc_1007DA5  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_54]  +
mov [ebp+var_44] 10h +
push 11h  +
push esi  +
push [ebp+var_3C]  +
push esi  +
call PowerEnumerate  +
inc [ebp+var_54]  +
cmp eax esi +
jz loc_1007C8D  +
cmp [ebp+hMem] esi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1007DB6  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_50] +
xor ecx ebp +
call sub_100A786  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+StringUuid] +
push esi  +
test eax eax +
jnz loc_1007DED  +
push 57h  +
pop esi  +
push 7  +
jmp loc_1007E2F  +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
test eax eax +
jnz loc_1007DE6  +
lea eax [ebp+Uuid] +
push eax  +
push 0  +
call PowerSetActiveScheme  +
mov esi eax +
test esi esi +
jz loc_1007E39  +
cmp esi 668h +
jnz loc_1007E18  +
push 10h  +
jmp loc_1007E2F  +
cmp esi 4ECh +
jnz loc_1007E24  +
push 13h  +
jmp loc_1007E2F  +
cmp esi 5 +
jnz loc_1007E2D  +
push 14h  +
jmp loc_1007E2F  +
push 0Ah  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100A786  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
xor edi edi +
push edi  +
call PowerGetActiveScheme  +
mov esi eax +
cmp esi edi +
jnz loc_1007F4A  +
mov eax [ebp+hMem] +
mov [ebp+Uuid] eax +
mov [ebp+var_14] edi +
cmp eax edi +
jnz loc_1007E88  +
mov [ebp+var_C] 57h +
jmp loc_1007F3E  +
push edi  +
call sub_1007376  +
push 342h  +
call sub_100BA15  +
mov esi ds:__iob_func +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+Uuid]  +
call sub_10073A4  +
push offset asc_1001BC4  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+uBytes] +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+Uuid]  +
mov [ebp+uBytes] edi +
push edi  +
call PowerReadFriendlyName  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_1007F3E  +
cmp [ebp+uBytes] edi +
jz loc_1007F3E  +
push ebx  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_1007F3D  +
lea eax [ebp+uBytes] +
push eax  +
push ebx  +
push edi  +
push edi  +
push [ebp+Uuid]  +
push edi  +
call PowerReadFriendlyName  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_1007F36  +
push offset asc_10027BC  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset asc_10027B8  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push ebx  +
call ds:LocalFree  +
pop ebx  +
push [ebp+hMem]  +
mov esi [ebp+var_C] +
call ds:LocalFree  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+StringUuid] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor edi edi +
mov [ebp+hMem] edi +
cmp eax edi +
jnz loc_1007F88  +
mov [ebp+var_2C] 57h +
jmp loc_10080D6  +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
test eax eax +
jz loc_1007FA4  +
mov [ebp+var_2C] 57h +
push 7  +
jmp loc_10080CC  +
cmp esi edi +
jz loc_1007FBC  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_1007F96  +
lea eax [ebp+var_14] +
mov [ebp+hMem] eax +
lea eax [ebp+hMem] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push ebx  +
call PowerDuplicateScheme  +
mov [ebp+var_2C] eax +
cmp eax edi +
jnz loc_100809F  +
cmp [ebp+hMem] edi +
jz loc_10080CA  +
mov ebx [ebp+hMem] +
push edi  +
mov [ebp+var_34] ebx +
mov [ebp+var_38] edi +
call sub_1007376  +
push 342h  +
call sub_100BA15  +
mov esi ds:__iob_func +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push ebx  +
call sub_10073A4  +
push offset asc_1001BC4  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
lea eax [ebp+uBytes] +
push eax  +
push edi  +
push edi  +
push edi  +
push ebx  +
push edi  +
mov [ebp+uBytes] edi +
call PowerReadFriendlyName  +
test eax eax +
jnz loc_10080D6  +
cmp [ebp+uBytes] edi +
jz loc_10080D6  +
push [ebp+uBytes]  +
push 40h  +
call ds:LocalAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_10080D6  +
lea eax [ebp+uBytes] +
push eax  +
push ebx  +
push edi  +
push edi  +
push [ebp+var_34]  +
push edi  +
call PowerReadFriendlyName  +
test eax eax +
jnz loc_1008096  +
push offset asc_10027BC  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset asc_10027B8  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push ebx  +
call ds:LocalFree  +
jmp loc_10080D6  +
cmp eax 668h +
jnz loc_10080AA  +
push 10h  +
jmp loc_10080CC  +
cmp eax 5 +
jnz loc_10080B3  +
push 14h  +
jmp loc_10080CC  +
cmp eax 2 +
jnz loc_10080BF  +
push 38Dh  +
jmp loc_10080CC  +
cmp eax 0B7h +
jnz loc_10080CA  +
push 12h  +
jmp loc_10080CC  +
push 0Ch  +
call sub_100BA15  +
mov dword_100E7A0 eax +
lea eax [ebp+var_14] +
cmp [ebp+hMem] eax +
jz loc_10080EC  +
cmp [ebp+hMem] edi +
jz loc_10080EC  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_2C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
test eax eax +
jnz loc_100812E  +
push 7  +
call sub_100BA15  +
push 57h  +
pop esi  +
jmp loc_100816E  +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
test eax eax +
jz loc_1008143  +
push 57h  +
pop esi  +
push 7  +
jmp loc_1008169  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call PowerDeleteScheme  +
mov esi eax +
test esi esi +
jz loc_1008173  +
dec eax  +
dec eax  +
jz loc_1008164  +
sub eax 30h +
jz loc_1008160  +
push 9  +
jmp loc_1008169  +
push 11h  +
jmp loc_1008169  +
push 38Dh  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100A786  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_38] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_C] +
mov [ebp+StringUuid] eax +
test edi edi +
jz loc_1008295  +
test ebx ebx +
jz loc_1008295  +
test eax eax +
jz loc_1008295  +
push 0Ah  +
lea eax [ebp+var_38] +
push eax  +
push esi  +
call ds:wcstoul  +
add esp 0Ch +
mov [ebp+var_44] eax +
test eax eax +
mov eax [ebp+var_38] +
jnz loc_10081ED  +
cmp eax esi +
jz loc_10081F3  +
cmp word ptr [eax] 0 +
jz loc_10081FD  +
push 39Ch  +
jmp loc_1008297  +
lea eax [ebp+Uuid] +
push eax  +
push edi  +
call sub_1007326  +
test eax eax +
jz loc_100821A  +
push 57h  +
pop esi  +
push 7  +
call sub_100BA15  +
jmp loc_100829F  +
lea eax [ebp+var_24] +
push eax  +
push ebx  +
call sub_1007326  +
test eax eax +
jnz loc_100820B  +
lea eax [ebp+var_34] +
push eax  +
push [ebp+StringUuid]  +
call sub_1007326  +
test eax eax +
jnz loc_100820B  +
push [ebp+var_44]  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push [ebp+var_3C]  +
call PowerWriteACValueIndex  +
mov esi eax +
test esi esi +
jz loc_10082A4  +
cmp esi 668h +
jnz loc_1008261  +
push 10h  +
jmp loc_1008210  +
cmp esi 4ECh +
jnz loc_100826D  +
push 13h  +
jmp loc_1008210  +
cmp esi 5 +
jnz loc_1008276  +
push 14h  +
jmp loc_1008210  +
cmp esi 2 +
jnz loc_1008282  +
push 38Dh  +
jmp loc_1008210  +
cmp esi 0Dh +
jnz loc_100828E  +
push 39Ch  +
jmp loc_1008210  +
push 0Ah  +
jmp loc_1008210  +
push 7  +
call sub_100BA15  +
push 57h  +
pop esi  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_38] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_C] +
mov [ebp+StringUuid] eax +
test edi edi +
jz loc_10083B6  +
test ebx ebx +
jz loc_10083B6  +
test eax eax +
jz loc_10083B6  +
push 0Ah  +
lea eax [ebp+var_38] +
push eax  +
push esi  +
call ds:wcstoul  +
add esp 0Ch +
mov [ebp+var_44] eax +
test eax eax +
jnz loc_1008330  +
cmp [ebp+var_38] esi +
jnz loc_1008330  +
push 39Ch  +
call sub_100BA15  +
push 57h  +
pop esi  +
jmp loc_10083C0  +
lea eax [ebp+Uuid] +
push eax  +
push edi  +
call sub_1007326  +
test eax eax +
jnz loc_10083B6  +
lea eax [ebp+var_24] +
push eax  +
push ebx  +
call sub_1007326  +
test eax eax +
jnz loc_10083B6  +
lea eax [ebp+var_34] +
push eax  +
push [ebp+StringUuid]  +
call sub_1007326  +
test eax eax +
jnz loc_10083B6  +
push [ebp+var_44]  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push [ebp+var_3C]  +
call PowerWriteDCValueIndex  +
mov esi eax +
test esi esi +
jz loc_10083C5  +
cmp esi 668h +
jnz loc_1008385  +
push 10h  +
jmp loc_10083BB  +
cmp esi 4ECh +
jnz loc_1008391  +
push 13h  +
jmp loc_10083BB  +
cmp esi 5 +
jnz loc_100839A  +
push 14h  +
jmp loc_10083BB  +
cmp esi 2 +
jnz loc_10083A6  +
push 38Dh  +
jmp loc_10083BB  +
cmp esi 0Dh +
jnz loc_10083B2  +
push 39Ch  +
jmp loc_10083BB  +
push 0Ah  +
jmp loc_10083BB  +
push 57h  +
pop esi  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
push 0Ah  +
push 0  +
push eax  +
call ds:wcstoul  +
add esp 0Ch +
mov [ebp+var_28] eax +
test esi esi +
jz loc_1008448  +
test edi edi +
jz loc_1008448  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_1008448  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call sub_1007326  +
test eax eax +
jnz loc_1008448  +
push [ebp+var_28]  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push ebx  +
call PowerWriteValueMin  +
mov esi eax +
jmp loc_1008457  +
push 57h  +
pop esi  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
push 0Ah  +
push 0  +
push eax  +
call ds:wcstoul  +
add esp 0Ch +
mov [ebp+var_28] eax +
test esi esi +
jz loc_10084DA  +
test edi edi +
jz loc_10084DA  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_10084DA  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call sub_1007326  +
test eax eax +
jnz loc_10084DA  +
push [ebp+var_28]  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push ebx  +
call PowerWriteValueMax  +
mov esi eax +
jmp loc_10084E9  +
push 57h  +
pop esi  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
push 0Ah  +
push 0  +
push eax  +
call ds:wcstoul  +
add esp 0Ch +
mov [ebp+var_28] eax +
test esi esi +
jz loc_100856C  +
test edi edi +
jz loc_100856C  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_100856C  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call sub_1007326  +
test eax eax +
jnz loc_100856C  +
push [ebp+var_28]  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push ebx  +
call PowerWriteValueIncrement  +
mov esi eax +
jmp loc_100857B  +
push 57h  +
pop esi  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
push 0Ah  +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_10] +
push 0  +
push eax  +
call ds:wcstoul  +
add esp 0Ch +
mov [ebp+var_38] eax +
test esi esi +
jz loc_100861C  +
test edi edi +
jz loc_100861C  +
test ebx ebx +
jz loc_100861C  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_100861C  +
lea eax [ebp+var_34] +
push eax  +
push edi  +
call sub_1007326  +
test eax eax +
jnz loc_100861C  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
call sub_1007326  +
test eax eax +
jnz loc_100861C  +
push [ebp+var_38]  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push [ebp+var_3C]  +
call PowerWriteDCDefaultIndex  +
mov esi eax +
jmp loc_100862B  +
push 57h  +
pop esi  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
push 0Ah  +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_10] +
push 0  +
push eax  +
call ds:wcstoul  +
add esp 0Ch +
mov [ebp+var_38] eax +
test esi esi +
jz loc_10086CC  +
test edi edi +
jz loc_10086CC  +
test ebx ebx +
jz loc_10086CC  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_10086CC  +
lea eax [ebp+var_34] +
push eax  +
push edi  +
call sub_1007326  +
test eax eax +
jnz loc_10086CC  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
call sub_1007326  +
test eax eax +
jnz loc_10086CC  +
push [ebp+var_38]  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push [ebp+var_3C]  +
call PowerWriteACDefaultIndex  +
mov esi eax +
jmp loc_10086DB  +
push 57h  +
pop esi  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_40] 0 +
and [ebp+var_3C] 0 +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_38] eax +
mov eax [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_10] +
test eax eax +
jnz loc_1008737  +
push 7  +
call sub_100BA15  +
push 57h  +
mov dword_100E7A0 eax +
pop esi  +
jmp loc_10087B3  +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
test eax eax +
jnz loc_1008771  +
test esi esi +
jz loc_100875C  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_1008771  +
lea esi [ebp+var_14] +
jmp loc_100875F  +
mov esi [ebp+var_3C] +
test ebx ebx +
jz loc_1008787  +
lea eax [ebp+var_34] +
push eax  +
push ebx  +
call sub_1007326  +
test eax eax +
jz loc_1008782  +
push 57h  +
pop esi  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_10087B3  +
lea ebx [ebp+var_34] +
jmp loc_100878A  +
mov ebx [ebp+var_40] +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100878F  +
sub eax ecx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push edi  +
push ebx  +
push esi  +
lea eax [ebp+Uuid] +
push eax  +
push [ebp+var_38]  +
call PowerWriteFriendlyName  +
mov esi eax +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_10087E7  +
cmp [ebp+arg_8] eax +
jz loc_10087E7  +
cmp [ebp+arg_C] eax +
jz loc_10087E7  +
pop ebp  +
jmp sub_10086F3  +
push 57h  +
pop eax  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1008818  +
cmp [ebp+arg_8] eax +
jz loc_1008818  +
push [ebp+arg_C]  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10086F3  +
jmp loc_1008827  +
push 7  +
call sub_100BA15  +
push 57h  +
mov dword_100E7A0 eax +
pop eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jnz loc_100884D  +
push 7  +
call sub_100BA15  +
push 57h  +
mov dword_100E7A0 eax +
pop eax  +
jmp loc_100885D  +
push [ebp+arg_8]  +
push eax  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10086F3  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B0h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_B0] +
xor edi edi +
push eax  +
mov [ebp+var_B0] edi +
mov [ebp+Uuid] edi +
call GetActivePwrScheme  +
test al al +
jnz loc_10088A6  +
mov [ebp+var_B0] 1 +
mov ebx ds:__iob_func +
mov [ebp+var_AC] edi +
push 90h  +
lea eax [ebp+var_A4] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_A4] +
push eax  +
push [ebp+var_AC]  +
call ReadPwrScheme  +
test al al +
jz loc_1008A22  +
push [ebp+var_AC]  +
push 33Dh  +
call sub_100BA15  +
push eax  +
push 204h  +
mov esi offset unk_100E198 +
push esi  +
call swprintf_s  +
add esp 10h +
push esi  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
cmp [ebp+var_AC] 5 +
mov [ebp+Uuid] edi +
jnz loc_1008937  +
mov esi offset dword_10017D8 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+var_14] +
movs   +
mov [ebp+Uuid] eax +
xor edi edi +
cmp [ebp+var_AC] 3 +
jnz loc_1008957  +
mov esi offset dword_10017E8 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+var_14] +
movs   +
mov [ebp+Uuid] eax +
xor edi edi +
cmp [ebp+var_AC] 1 +
jnz loc_1008977  +
mov esi offset dword_10017F8 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+var_14] +
movs   +
mov [ebp+Uuid] eax +
xor edi edi +
lea eax [ebp+var_A4] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
call PowerPolicyToGUIDFormat  +
test eax eax +
jnz loc_10089EA  +
cmp [ebp+Uuid] edi +
jz loc_10089EA  +
push 4  +
call sub_1007376  +
push 342h  +
call sub_100BA15  +
push eax  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+Uuid]  +
call sub_10073A4  +
push offset word_100132C  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov eax [ebp+var_AC] +
cmp eax [ebp+var_B0] +
jnz loc_10089FD  +
push [ebp+Uuid]  +
push edi  +
call PowerSetActiveScheme  +
jmp loc_10089FD  +
push 0Ch  +
call sub_100BA15  +
push eax  +
call ebx  +
add eax 20h +
push eax  +
call sub_100B4C8  +
cmp [ebp+Uuid] edi +
jz loc_1008A22  +
lea eax [ebp+var_14] +
cmp [ebp+Uuid] eax +
jz loc_1008A22  +
push [ebp+Uuid]  +
call ds:LocalFree  +
mov [ebp+Uuid] edi +
inc [ebp+var_AC]  +
cmp [ebp+var_AC] 3E7h +
jb loc_10088B2  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn   +
***
mov edi edi +
push esi  +
call PowerRestoreDefaultPowerSchemes  +
mov esi eax +
test esi esi +
jz loc_1008A77  +
cmp esi 668h +
jnz loc_1008A66  +
push 10h  +
jmp loc_1008A6D  +
cmp esi 5 +
jnz loc_1008A77  +
push 14h  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+StringUuid] +
push esi  +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
test eax eax +
jz loc_1008AAB  +
push 57h  +
pop esi  +
push 7  +
jmp loc_1008AD9  +
lea eax [ebp+Uuid] +
push eax  +
call PowerRestoreIndividualDefaultPowerScheme  +
mov esi eax +
test esi esi +
jz loc_1008AE3  +
cmp esi 668h +
jnz loc_1008AC6  +
push 10h  +
jmp loc_1008AD9  +
cmp esi 5 +
jnz loc_1008ACF  +
push 14h  +
jmp loc_1008AD9  +
cmp esi 4ECh +
jnz loc_1008AE3  +
push 13h  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100A786  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+StringUuid] +
push esi  +
mov esi [ebp+arg_4] +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
test eax eax +
jz loc_1008B31  +
push 7  +
call sub_100BA15  +
push 57h  +
mov dword_100E7A0 eax +
pop eax  +
jmp loc_1008B64  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_1008B20  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
call PowerRemovePowerSetting  +
mov esi eax +
cmp esi 2 +
jnz loc_1008B62  +
push 38Dh  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov eax esi +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100A786  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+StringUuid] +
push edi  +
mov edi [ebp+arg_4] +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jz loc_1008BB5  +
push 7  +
call sub_100BA15  +
push 57h  +
mov dword_100E7A0 eax +
pop eax  +
jmp loc_1008BEC  +
push edi  +
push esi  +
xor esi esi +
push esi  +
call sub_1008830  +
cmp eax esi +
jnz loc_1008BEC  +
cmp ebx esi +
jz loc_1008BEC  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_1008BCC  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push ebx  +
push esi  +
push esi  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call PowerWriteDescription  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push offset aActionsetactiv  +
xor ebx ebx +
push esi  +
xor edi edi +
mov [ebp+lpString] ebx +
call sub_1003F3B  +
test al al +
jz loc_1008C34  +
push 13h  +
jmp loc_1008C6D  +
push offset aActioncreate  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_1008C47  +
push 14h  +
jmp loc_1008C6D  +
push offset aActiondefault  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_1008C5A  +
push 0Eh  +
jmp loc_1008C6D  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jnz loc_1008C7D  +
push 10h  +
lea edi [ebp+Uuid] +
pop eax  +
lea ecx [ebp+lpString] +
push ecx  +
push edi  +
push eax  +
call PowerReadSecurityDescriptor  +
test eax eax +
jz loc_1008C8B  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1008CB2  +
push [ebp+lpString]  +
mov esi ds:__iob_func +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset word_100132C  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
xor ebx ebx +
inc ebx  +
cmp [ebp+lpString] 0 +
jz loc_1008CC1  +
push [ebp+lpString]  +
call ds:LocalFree  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push offset aActionsetactiv  +
xor ebx ebx +
push esi  +
mov [ebp+var_18] ebx +
call sub_1003F3B  +
test al al +
jz loc_1008D0C  +
push 13h  +
jmp loc_1008D49  +
push offset aActioncreate  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_1008D1F  +
push 14h  +
jmp loc_1008D49  +
push offset aActiondefault  +
push esi  +
call sub_1003F3B  +
test al al +
jz loc_1008D32  +
push 0Eh  +
jmp loc_1008D49  +
lea eax [ebp+Uuid] +
push eax  +
push esi  +
call sub_1007326  +
test eax eax +
jz loc_1008D44  +
push 7  +
jmp loc_1008D5B  +
push 10h  +
lea ebx [ebp+Uuid] +
pop eax  +
push edi  +
push ebx  +
push eax  +
call PowerWriteSecurityDescriptor  +
test eax eax +
jz loc_1008D67  +
push 2D9h  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1008D6E  +
mov [ebp+var_18] 1 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_18] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call PowerReadSettingAttributes  +
test al 1 +
jz loc_1008DC8  +
push esi  +
push lpString  +
mov esi ds:__iob_func +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push offset word_100132C  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
pop esi  +
pop ebp  +
retn 8  +
push offset aNone  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100B4C8  +
jmp loc_1008DC4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
cmp [ebp+arg_C] eax +
jbe loc_1008E68  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_8] +
mov esi [eax+ecx*4] +
xor edi edi +
lea ebx [esi+2] +
push 4  +
push lpString[edi*4]  +
push ebx  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1008E36  +
inc edi  +
cmp edi 1 +
jb loc_1008E08  +
push 57h  +
pop esi  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1008E78  +
movzx eax word ptr [esi] +
cmp ax 2Bh +
jnz loc_1008E4B  +
xor eax eax +
inc eax  +
mov ecx edi +
shl eax cl +
or [ebp+var_4] eax +
jmp loc_1008E5D  +
cmp ax 2Dh +
jnz loc_1008E25  +
xor eax eax +
inc eax  +
mov ecx edi +
shl eax cl +
not eax  +
and [ebp+var_4] eax +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+arg_C] +
jb loc_1008DFA  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call PowerWriteSettingAttributes  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_28] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 1 +
jb loc_1008EBB  +
lea eax [ebp+Uuid] +
push eax  +
push dword ptr [esi]  +
call sub_1007326  +
mov ebx eax +
test ebx ebx +
jz loc_1008ECC  +
push 57h  +
pop ebx  +
push 7  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_1008F18  +
dec edi  +
jz loc_1008EF7  +
lea eax [ebp+var_24] +
push eax  +
add esi 4 +
push dword ptr [esi]  +
call sub_1007326  +
mov ebx eax +
test ebx ebx +
jz loc_1008EEC  +
and [ebp+var_28] 0 +
sub esi 4 +
jmp loc_1008EF3  +
lea eax [ebp+var_24] +
dec edi  +
mov [ebp+var_28] eax +
test edi edi +
jnz loc_1008F05  +
push [ebp+var_28]  +
lea eax [ebp+Uuid] +
push eax  +
call sub_1008D87  +
jmp loc_1008F18  +
push edi  +
add esi 4 +
push esi  +
push [ebp+var_28]  +
lea eax [ebp+Uuid] +
push eax  +
call sub_1008DE3  +
mov ebx eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push 7FFFFFFFh  +
push esi  +
lea eax [ebp+arg_0] +
call sub_10072F3  +
test eax eax +
jl loc_1008F9D  +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub ecx edx +
push ebx  +
push 0  +
lea eax [esi+edx*2] +
pop ebx  +
jz loc_1008F8E  +
mov esi ecx +
sub esi [ebp+arg_4] +
push edi  +
lea edi [esi+edx+7FFFFFFFh] +
mov esi [ebp+arg_8] +
sub esi eax +
test edi edi +
jz loc_1008F89  +
movzx edx word ptr [esi+eax] +
test dx dx +
jz loc_1008F89  +
mov [eax] dx +
inc eax  +
inc eax  +
dec ecx  +
dec edi  +
test ecx ecx +
jnz loc_1008F71  +
pop edi  +
test ecx ecx +
jnz loc_1008F95  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
mov eax ebx +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1008FBD  +
cmp ecx 7FFFFFFFh +
jbe loc_1008FC2  +
mov eax 80070057h +
test eax eax +
jl loc_1008FFF  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1008FEF  +
cmp eax esi +
ja loc_1008FEF  +
jnz loc_1008FFA  +
jmp loc_1008FF4  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+StringUuid] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_30] ebx +
mov [ebp+lpString] ebx +
mov [ebp+hMem] ebx +
mov [ebp+var_38] ebx +
cmp eax ebx +
jz loc_100929B  +
cmp edi ebx +
jz loc_100929B  +
cmp esi ebx +
jz loc_100929B  +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_1009067  +
push 57h  +
call sub_1005283  +
jmp loc_10092C1  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
call sub_1007326  +
mov [ebp+var_28] eax +
cmp eax ebx +
jnz loc_100905B  +
push 0Ah  +
lea eax [ebp+var_38] +
push eax  +
push esi  +
call ds:wcstoul  +
mov [ebp+var_3C] eax +
mov eax esi +
add esp 0Ch +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1009090  +
sub eax ecx +
sar eax 1 +
lea eax [esi+eax*2] +
cmp [ebp+var_38] eax +
jnz loc_100905B  +
lea eax [ebp+var_30] +
push eax  +
push ebx  +
push [ebp+var_3C]  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push ebx  +
call PowerReadPossibleValue  +
mov [ebp+var_28] eax +
cmp eax ebx +
jz loc_10090CA  +
push eax  +
jmp loc_100905D  +
mov eax [ebp+var_30] +
cmp eax ebx +
jnz loc_10090E0  +
push 0Dh  +
call sub_1005283  +
mov [ebp+var_28] eax +
jmp loc_10092C1  +
mov esi ds:LocalAlloc +
add eax 2 +
push eax  +
push 40h  +
pop edi  +
push edi  +
call esi  +
mov ebx eax +
mov [ebp+hMem] ebx +
test ebx ebx +
jnz loc_1009100  +
push 0Eh  +
jmp loc_100929D  +
lea eax [ebp+var_30] +
push eax  +
push ebx  +
push [ebp+var_3C]  +
lea eax [ebp+var_40] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push 0  +
call PowerReadPossibleValue  +
mov [ebp+var_28] eax +
test eax eax +
jz loc_100912D  +
push eax  +
call sub_1005283  +
jmp loc_10092A5  +
mov eax [ebp+var_40] +
cmp eax 1 +
jnz loc_1009162  +
mov esi ds:__iob_func +
push offset aTypeSz  +
call esi  +
push 20h  +
pop edi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push offset aValue  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push ebx  +
jmp loc_10091FB  +
cmp eax 4 +
jnz loc_100919F  +
cmp [ebp+var_30] eax +
jz loc_1009173  +
push 0Dh  +
jmp loc_100929D  +
push 12h  +
push edi  +
call esi  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_10090F9  +
push 10h  +
push 9  +
push eax  +
movzx eax byte ptr [ebx] +
push eax  +
call _itow_s  +
add esp 10h +
test eax eax +
jnz loc_100916C  +
push offset aTypeDword  +
jmp loc_10091D6  +
cmp eax 0Bh +
jnz loc_100920A  +
cmp [ebp+var_30] 8 +
jnz loc_100916C  +
push 22h  +
push edi  +
call esi  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_10090F9  +
push 10h  +
push 11h  +
push eax  +
movzx eax byte ptr [ebx] +
cdq   +
push edx  +
push eax  +
call _ui64tow_s  +
add esp 14h +
test eax eax +
jnz loc_100916C  +
push offset aTypeQword  +
mov esi ds:__iob_func +
call esi  +
push 20h  +
pop edi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push offset aValue0x  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push [ebp+lpString]  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
jmp loc_100928A  +
cmp eax 3 +
jnz loc_100929B  +
push 6  +
push edi  +
call esi  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_10090F9  +
mov esi ds:__iob_func +
xor ebx ebx +
push 20h  +
pop edi  +
cmp [ebp+var_30] ebx +
jbe loc_100928A  +
mov eax [ebp+hMem] +
movzx eax byte ptr [ebx+eax] +
push eax  +
push offset a02x_0  +
push 3  +
push [ebp+lpString]  +
call sub_1008FA7  +
add esp 10h +
test eax eax +
jnz loc_100916C  +
test ebx ebx +
jnz loc_1009277  +
push offset aTypeBinary  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push offset aValue  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
push [ebp+lpString]  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
inc ebx  +
cmp ebx [ebp+var_30] +
jb loc_1009233  +
push offset word_100132C  +
call esi  +
add eax edi +
push eax  +
call sub_100B4C8  +
jmp loc_10092A5  +
push 57h  +
call sub_1005283  +
mov [ebp+var_28] eax +
cmp [ebp+hMem] 0 +
mov esi ds:LocalFree +
jz loc_10092B6  +
push [ebp+hMem]  +
call esi  +
cmp [ebp+lpString] 0 +
jz loc_10092C1  +
push [ebp+lpString]  +
call esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_28] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+StringUuid] +
mov ecx [ebp+arg_10] +
and [ebp+var_3C] 0 +
and [ebp+hMem] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_14] +
mov [ebp+var_34] ecx +
test eax eax +
jz loc_10095A0  +
test ebx ebx +
jz loc_10095A0  +
test ecx ecx +
jz loc_10095A0  +
test esi esi +
jz loc_10095A0  +
test edi edi +
jz loc_10095A0  +
lea ecx [ebp+Uuid] +
push ecx  +
push eax  +
call sub_1007326  +
test eax eax +
jz loc_100934D  +
push 57h  +
call sub_1005283  +
mov esi eax +
jmp loc_10095C5  +
lea eax [ebp+var_2C] +
push eax  +
push ebx  +
call sub_1007326  +
test eax eax +
jnz loc_100933F  +
mov ebx ds:wcstoul +
push 0Ah  +
lea eax [ebp+var_30] +
push eax  +
push esi  +
call ebx  +
mov [ebp+var_44] eax +
mov eax esi +
add esp 0Ch +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1009375  +
sub eax ecx +
sar eax 1 +
lea eax [esi+eax*2] +
cmp [ebp+var_30] eax +
jnz loc_100933F  +
mov esi edi +
mov [ebp+var_40] edi +
lea ecx [esi+2] +
mov ax [esi] +
inc esi  +
inc esi  +
test ax ax +
jnz loc_1009393  +
push offset aSz  +
push [ebp+var_34]  +
sub esi ecx +
sar esi 1 +
call sub_1003F76  +
test al al +
jz loc_10093C0  +
xor edx edx +
inc edx  +
mov eax edi +
lea ecx [esi+esi+2] +
jmp loc_1009579  +
push offset aDword  +
push [ebp+var_34]  +
call sub_1003F76  +
test al al +
jz loc_10093F9  +
push 0Ah  +
lea eax [ebp+var_30] +
push eax  +
push edi  +
call ebx  +
mov [ebp+var_48] eax +
lea eax [edi+esi*2] +
add esp 0Ch +
cmp [ebp+var_30] eax +
jnz loc_100933F  +
push 4  +
pop ecx  +
mov edx ecx +
lea eax [ebp+var_48] +
jmp loc_1009579  +
push offset aQword  +
push [ebp+var_34]  +
call sub_1003F76  +
test al al +
jz loc_100943A  +
push 0Ah  +
lea eax [ebp+var_30] +
push eax  +
push edi  +
call ds:_wcstoui64  +
mov [ebp+var_50] eax +
lea eax [edi+esi*2] +
add esp 0Ch +
mov [ebp+var_4C] edx +
cmp [ebp+var_30] eax +
jnz loc_100933F  +
push 0Bh  +
pop edx  +
push 8  +
lea eax [ebp+var_50] +
pop ecx  +
jmp loc_1009579  +
push offset aBinary  +
push [ebp+var_34]  +
call sub_1003F76  +
test al al +
jz loc_100933F  +
lea eax [esi+esi+2] +
push eax  +
push 0  +
mov [ebp+var_34] esi +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jnz loc_100946D  +
push 0Eh  +
jmp loc_10095A2  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
mov word ptr [ebp+var_8] ax +
cmp esi 2 +
jb loc_10094E7  +
mov edi ds:_wcsnicmp +
mov ebx [ebp+var_40] +
push 2  +
push offset a0x  +
push ebx  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_10094CC  +
push 1  +
push offset asc_1001BFC  +
push ebx  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10094AC  +
inc ebx  +
inc ebx  +
jmp loc_10094CF  +
mov ax [ebx] +
mov [ebp+var_C] ax +
mov ax [ebx+2] +
mov [ebp-0Ah] ax +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_34] +
inc eax  +
push eax  +
push [ebp+hMem]  +
call sub_1008F30  +
add ebx 4 +
mov esi ebx +
lea ecx [esi+2] +
mov ax [esi] +
inc esi  +
inc esi  +
test ax ax +
jnz loc_10094D4  +
sub esi ecx +
sar esi 1 +
cmp esi 2 +
jnb loc_1009486  +
mov eax [ebp+hMem] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10094ED  +
sub eax edx +
sar eax 1 +
xor edi edi +
mov ebx eax +
cmp esi edi +
jnz loc_10095A0  +
cmp ebx edi +
jz loc_10095A0  +
test bl 1 +
jnz loc_10095A0  +
mov esi ebx +
shr esi 1 +
push esi  +
push edi  +
call ds:LocalAlloc  +
mov [ebp+var_3C] eax +
cmp eax edi +
jz loc_1009466  +
dec ebx  +
jz loc_1009571  +
mov eax [ebp+hMem] +
mov cx [eax+edi*2] +
mov [ebp+var_C] cx +
mov ax [eax+edi*2+2] +
mov [ebp-0Ah] ax +
push 10h  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
call ds:wcstoul  +
mov edx [ebp+var_3C] +
mov ecx edi +
shr ecx 1 +
mov [ecx+edx] al +
lea eax [ebp+var_8] +
add esp 0Ch +
cmp [ebp+var_30] eax +
jnz loc_10095A0  +
inc edi  +
inc edi  +
cmp edi ebx +
jb loc_1009532  +
mov eax [ebp+var_3C] +
push 3  +
pop edx  +
mov ecx esi +
push ecx  +
push eax  +
push [ebp+var_44]  +
lea eax [ebp+var_2C] +
push edx  +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
push 0  +
call PowerWritePossibleValue  +
mov esi eax +
test esi esi +
jz loc_100959C  +
push esi  +
call sub_1005283  +
jmp loc_10095A9  +
xor esi esi +
jmp loc_10095A9  +
push 57h  +
call sub_1005283  +
mov esi eax +
cmp [ebp+hMem] 0 +
mov edi ds:LocalFree +
jz loc_10095BA  +
push [ebp+hMem]  +
call edi  +
cmp [ebp+var_3C] 0 +
jz loc_10095C5  +
push [ebp+var_3C]  +
call edi  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_220] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
mov [ebp+var_210] eax +
mov eax [ebp+arg_C] +
push esi  +
push edi  +
test eax eax +
jnz loc_1009616  +
mov eax offset FileName +
push 0  +
lea ecx [ebp+Buffer] +
push ecx  +
mov esi 104h +
push esi  +
push eax  +
call ds:GetFullPathNameW  +
test eax eax +
jz loc_10097C1  +
cmp eax esi +
jnb loc_10097C1  +
cmp [ebp+arg_10] 0 +
mov edi ds:__iob_func +
jnz loc_100965E  +
push 5BDh  +
call sub_100BA15  +
push eax  +
call edi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+var_210]  +
push [ebp+var_220]  +
push ebx  +
call dword_100E7E0  +
mov [ebp+var_210] eax +
test eax eax +
jl loc_10097CB  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call dword_100E7E4  +
mov [ebp+var_210] eax +
test eax eax +
jl loc_10097CB  +
cmp [ebp+arg_10] 0 +
jnz loc_10097CB  +
lea eax [ebp+var_214] +
push eax  +
lea eax [ebp+var_21C] +
push eax  +
lea eax [ebp+var_218] +
push eax  +
push ebx  +
call dword_100E7E8  +
mov [ebp+var_210] eax +
test eax eax +
jl loc_10097CB  +
push 5BEh  +
call sub_100BA15  +
push eax  +
call edi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
mov eax [ebp+var_214] +
mov ecx [ebp+var_218] +
add ecx eax +
jz loc_10096FC  +
push 5C1h  +
jmp loc_1009701  +
push 5C0h  +
call sub_100BA15  +
push eax  +
call edi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+var_218]  +
push 5C2h  +
call sub_100BA15  +
push eax  +
mov ebx 204h +
push ebx  +
mov esi offset unk_100E198 +
push esi  +
call swprintf_s  +
add esp 10h +
push esi  +
call edi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+var_21C]  +
push 5C3h  +
call sub_100BA15  +
push eax  +
push ebx  +
push esi  +
call swprintf_s  +
add esp 10h +
push esi  +
call edi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+var_214]  +
push 5C4h  +
call sub_100BA15  +
push eax  +
push ebx  +
push esi  +
call swprintf_s  +
add esp 10h +
push esi  +
call edi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
cmp [ebp+arg_14] 0 +
jnz loc_10097CB  +
lea eax [ebp+Buffer] +
push eax  +
push 5C7h  +
call sub_100BA15  +
push eax  +
push ebx  +
push esi  +
call swprintf_s  +
add esp 10h +
push esi  +
call edi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
jmp loc_10097CB  +
mov [ebp+var_210] 80004005h +
mov ecx [ebp+var_4] +
mov eax [ebp+var_210] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
mov [ebp+var_41C] eax +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov [ebp+lpFileName] eax +
test eax eax +
jnz loc_1009822  +
mov [ebp+lpFileName] offset FileName +
mov edi ds:GetFullPathNameW +
push 0  +
lea eax [ebp+Buffer] +
push eax  +
mov esi 104h +
push esi  +
push [ebp+lpFileName]  +
call edi  +
test eax eax +
jz loc_10098BB  +
cmp eax esi +
jnb loc_10098BB  +
test ebx ebx +
jnz loc_1009850  +
mov ebx offset aEnergyReport_h +
push 0  +
lea eax [ebp+var_20C] +
push eax  +
push esi  +
push ebx  +
call edi  +
test eax eax +
jz loc_10098BB  +
cmp eax esi +
jnb loc_10098BB  +
push ebx  +
push [ebp+lpFileName]  +
push [ebp+var_41C]  +
call dword_100E7F0  +
mov esi eax +
test esi esi +
jl loc_10098C0  +
cmp [ebp+arg_C] 0 +
jnz loc_10098C0  +
lea eax [ebp+var_20C] +
push eax  +
push 5C7h  +
call sub_100BA15  +
push eax  +
push 204h  +
mov edi offset unk_100E198 +
push edi  +
call swprintf_s  +
add esp 10h +
push edi  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100B4C8  +
jmp loc_10098C0  +
mov esi 80004005h +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+hObject] +
push eax  +
xor esi esi +
and [ebp+hObject] esi +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_1009915  +
call ds:GetLastError  +
test eax eax +
jle loc_1009911  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1009948  +
lea eax [ebp+ReturnLength] +
push eax  +
push 4  +
lea eax [ebp+TokenInformation] +
push eax  +
push 12h  +
push [ebp+hObject]  +
call ds:GetTokenInformation  +
test eax eax +
jz loc_10098FD  +
cmp [ebp+TokenInformation] 3 +
jnz loc_1009948  +
push 5B8h  +
call sub_100BA15  +
mov dword_100E7A0 eax +
mov esi 80070005h +
cmp [ebp+hObject] 0 +
jz loc_1009957  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov eax hLibModule +
push esi  +
xor esi esi +
cmp eax esi +
jz loc_100997A  +
push eax  +
call ds:FreeLibrary  +
mov hLibModule esi +
mov dword_100E7CC esi +
mov dword_100E7D0 esi +
mov dword_100E7D4 esi +
mov dword_100E7D8 esi +
mov dword_100E7DC esi +
mov dword_100E7E0 esi +
mov dword_100E7E4 esi +
mov dword_100E7E8 esi +
mov dword_100E7EC esi +
mov dword_100E7F0 esi +
pop esi  +
retn   +
***
mov ecx dword_100E7DC +
test ecx ecx +
jz loc_10099D3  +
mov eax dword_100E7C8 +
test eax eax +
jz loc_10099D3  +
push eax  +
call ecx  +
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10099F3  +
cmp ecx 7FFFFFFFh +
jbe loc_10099F8  +
mov eax 80070057h +
test eax eax +
jl loc_1009A43  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1009A33  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1009A2E  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1009A2E  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1009A16  +
pop edi  +
test esi esi +
jnz loc_1009A3A  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 420h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
and [ebp+var_41C] 0 +
and [ebp+var_418] 0 +
cmp [ebp+arg_C] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_420] eax +
jz loc_1009B03  +
lea eax [ebp+Buffer] +
push eax  +
mov esi 104h +
push esi  +
call ds:GetTempPathW  +
xor ecx ecx +
cmp eax ecx +
jz loc_1009B67  +
cmp eax esi +
jnb loc_1009B67  +
lea eax [ebp+Buffer] +
push eax  +
push offset aMicrosoftWindo  +
push ecx  +
push ecx  +
push 23h  +
push ecx  +
call ds:SHGetFolderPathAndSubDirW  +
test eax eax +
jl loc_1009B67  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
lea eax [ebp+pszPath] +
push eax  +
call sub_10099DD  +
test eax eax +
jl loc_1009B67  +
push offset FileName  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathAppendW  +
test eax eax +
jz loc_1009B67  +
lea eax [ebp+pszPath] +
mov [ebp+var_418] eax +
call dword_100E7CC  +
mov esi eax +
test esi esi +
jz loc_1009B6D  +
movzx eax [ebp+arg_C] +
push eax  +
push 0  +
push [ebp+var_418]  +
push ebx  +
push edi  +
push esi  +
call sub_10095DD  +
test eax eax +
jl loc_1009B6D  +
cmp [ebp+arg_10] 0 +
jz loc_1009B3D  +
push 0  +
push esi  +
call dword_100E7EC  +
cmp [ebp+arg_C] 0 +
jz loc_1009B5B  +
push 0  +
push [ebp+var_420]  +
push [ebp+var_418]  +
push esi  +
call sub_10097E7  +
test eax eax +
jl loc_1009B6D  +
mov [ebp+var_41C] 1 +
jmp loc_1009B6D  +
mov esi [ebp+var_418] +
push esi  +
call dword_100E7D0  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_41C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ds:SetConsoleCtrlHandler +
push edi  +
push 1  +
mov edi offset HandlerRoutine +
push edi  +
mov dword_100E7C8 ebx +
call esi  +
test eax eax +
jnz loc_1009BCD  +
call ds:GetLastError  +
test eax eax +
jle loc_1009BC9  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_1009BEB  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call dword_100E7D8  +
push 0  +
push edi  +
mov ebx eax +
call esi  +
and dword_100E7C8 0 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi 104h +
push esi  +
push [ebp+pszPath]  +
call sub_10099DD  +
mov edi eax +
test edi edi +
jl loc_1009C50  +
push [ebp+arg_0]  +
push esi  +
push [ebp+arg_8]  +
call sub_10099DD  +
mov edi eax +
test edi edi +
jl loc_1009C50  +
mov esi ds:PathAppendW +
push offset pMore  +
push [ebp+pszPath]  +
call esi  +
test eax eax +
jz loc_1009C4B  +
push offset aEnergyNtkl_etl  +
push [ebp+arg_8]  +
call esi  +
test eax eax +
jnz loc_1009C50  +
mov edi 80004005h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov hLibModule eax +
test eax eax +
jnz loc_1009C82  +
mov esi 80004005h +
call sub_1009961  +
mov eax esi +
pop esi  +
retn   +
push lpProcName  +
mov esi ds:GetProcAddress +
push eax  +
call esi  +
mov dword_100E7CC eax +
test eax eax +
jz loc_1009C74  +
push off_100E12C  +
push hLibModule  +
call esi  +
mov dword_100E7D0 eax +
test eax eax +
jz loc_1009C74  +
push off_100E130  +
push hLibModule  +
call esi  +
mov dword_100E7D4 eax +
test eax eax +
jz loc_1009C74  +
push off_100E134  +
push hLibModule  +
call esi  +
mov dword_100E7D8 eax +
test eax eax +
jz loc_1009C74  +
push off_100E138  +
push hLibModule  +
call esi  +
mov dword_100E7DC eax +
test eax eax +
jz loc_1009C74  +
push off_100E13C  +
push hLibModule  +
call esi  +
mov dword_100E7E0 eax +
test eax eax +
jz loc_1009C74  +
push off_100E140  +
push hLibModule  +
call esi  +
mov dword_100E7E4 eax +
test eax eax +
jz loc_1009C74  +
push off_100E144  +
push hLibModule  +
call esi  +
mov dword_100E7E8 eax +
test eax eax +
jz loc_1009C74  +
push off_100E148  +
push hLibModule  +
call esi  +
mov dword_100E7EC eax +
test eax eax +
jz loc_1009C74  +
push off_100E14C  +
push hLibModule  +
call esi  +
mov dword_100E7F0 eax +
test eax eax +
jz loc_1009C74  +
xor esi esi +
jmp loc_1009C7E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 66Ch +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
push offset aMicrosoftWindo  +
xor ebx ebx +
push ebx  +
push ebx  +
push 23h  +
push ebx  +
mov [ebp+var_668] ebx +
call ds:SHGetFolderPathAndSubDirW  +
mov edi eax +
cmp edi ebx +
jl loc_1009F97  +
lea eax [ebp+var_414] +
push eax  +
push 104h  +
lea eax [ebp+FileName] +
push eax  +
call sub_10099DD  +
mov edi eax +
cmp edi ebx +
jl loc_1009F97  +
push offset aEnergyReport_0  +
lea eax [ebp+FileName] +
push eax  +
call ds:PathAppendW  +
test eax eax +
jnz loc_1009E0F  +
mov edi 80004005h +
jmp loc_1009F97  +
push esi  +
lea eax [ebp+FindFileData] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call ds:FindFirstFileW  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1009E5A  +
mov esi ds:GetLastError +
call esi  +
cmp eax 2 +
jnz loc_1009E43  +
xor edi edi +
jmp loc_1009F96  +
call esi  +
test eax eax +
jle loc_1009E53  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_1009F96  +
push 218h  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1009EFE  +
mov eax [ebp+FindFileData.ftCreationTime.dwHighDateTime] +
mov [esi+0Ch] eax +
mov eax [ebp+FindFileData.ftCreationTime.dwLowDateTime] +
mov [esi+8] eax +
lea eax [ebp+FindFileData.cFileName] +
push eax  +
push 104h  +
lea eax [esi+10h] +
push eax  +
call sub_10099DD  +
mov edi eax +
test edi edi +
jl loc_1009F05  +
lea eax [ebp+var_668] +
test ebx ebx +
jz loc_1009EC7  +
mov edi [esi+8] +
mov edx [esi+0Ch] +
mov ecx [eax] +
mov ebx [ecx+0Ch] +
cmp ebx edx +
jb loc_1009EC7  +
ja loc_1009EC0  +
mov ebx [ecx+8] +
cmp ebx edi +
jbe loc_1009EC7  +
mov eax ecx +
cmp dword ptr [eax] 0 +
jnz loc_1009EAE  +
mov ecx [eax] +
mov [esi] ecx +
mov [eax] esi +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+hFindFile]  +
call ds:FindNextFileW  +
mov ebx [ebp+var_668] +
test eax eax +
jnz loc_1009E5A  +
push 15h  +
mov esi ebx +
pop eax  +
test esi esi +
jz loc_1009EF9  +
mov esi [esi] +
dec eax  +
jnz loc_1009EF3  +
jmp loc_1009F54  +
mov edi 8007000Eh +
jmp loc_1009F5A  +
push esi  +
call ds:LocalFree  +
jmp loc_1009F5A  +
lea eax [ebp+var_414] +
push eax  +
push 104h  +
lea eax [ebp+FileName] +
push eax  +
call sub_10099DD  +
mov edi eax +
test edi edi +
jl loc_1009F5A  +
lea eax [esi+10h] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call ds:PathAppendW  +
test eax eax +
jz loc_1009F68  +
lea eax [ebp+FileName] +
push eax  +
call ds:DeleteFileW  +
test eax eax +
jz loc_1009F6F  +
mov esi [esi] +
test esi esi +
jnz loc_1009F0E  +
xor edi edi +
push [ebp+hFindFile]  +
call ds:FindClose  +
jmp loc_1009F92  +
mov edi 80004005h +
jmp loc_1009F5A  +
call ds:GetLastError  +
test eax eax +
jle loc_1009F83  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_1009F5A  +
mov eax ebx +
mov ebx [ebx] +
push eax  +
call ds:LocalFree  +
test ebx ebx +
jnz loc_1009F87  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C48h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
mov esi 104h +
xor ebx ebx +
push esi  +
mov [ebp+var_C38] ebx +
xor edi edi +
call ds:GetTempPathW  +
cmp eax ebx +
jz loc_100A15A  +
cmp eax esi +
jnb loc_100A15A  +
lea eax [ebp+Buffer] +
push eax  +
push offset aMicrosoftWindo  +
push ebx  +
push ebx  +
push 23h  +
push ebx  +
call ds:SHGetFolderPathAndSubDirW  +
test eax eax +
jl loc_100A15A  +
lea eax [ebp+var_61C] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1009BF9  +
test eax eax +
jl loc_100A15A  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSEnergyReportL  +
lea eax [ebp+ExistingFileName] +
push esi  +
push eax  +
call sub_1008FA7  +
add esp 10h +
test eax eax +
jl loc_100A15A  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:GetLocalTime  +
movzx eax [ebp+SystemTime.wDay] +
push eax  +
movzx eax [ebp+SystemTime.wMonth] +
push eax  +
movzx eax [ebp+SystemTime.wYear] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSEnergyReport0  +
lea eax [ebp+NewFileName] +
push esi  +
push eax  +
call sub_1008FA7  +
add esp 1Ch +
test eax eax +
jl loc_100A15A  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSEnergyReport_  +
lea eax [ebp+var_A2C] +
push esi  +
push eax  +
call sub_1008FA7  +
add esp 10h +
test eax eax +
jl loc_100A15A  +
call dword_100E7CC  +
mov edi eax +
cmp edi ebx +
jz loc_100A15A  +
push 3Ch  +
lea eax [ebp+var_61C] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
push edi  +
call sub_1009B90  +
test eax eax +
jl loc_100A15A  +
xor esi esi +
inc esi  +
push esi  +
push esi  +
lea eax [ebp+ExistingFileName] +
push eax  +
lea eax [ebp+var_61C] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
push edi  +
call sub_10095DD  +
test eax eax +
jl loc_100A15A  +
push ebx  +
lea eax [ebp+NewFileName] +
push eax  +
lea eax [ebp+ExistingFileName] +
push eax  +
call ds:CopyFileW  +
test eax eax +
jz loc_100A15A  +
push esi  +
push edi  +
call dword_100E7EC  +
push esi  +
lea eax [ebp+var_A2C] +
push eax  +
lea eax [ebp+ExistingFileName] +
push eax  +
push edi  +
call sub_10097E7  +
test eax eax +
jl loc_100A15A  +
call sub_1009D8D  +
test eax eax +
jl loc_100A15A  +
mov [ebp+var_C38] esi +
push edi  +
call dword_100E7D0  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_C38] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 830h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
xor ebx ebx +
mov [ebp+var_82C] eax +
mov [ebp+var_830] ebx +
xor edi edi +
call sub_10098D8  +
test eax eax +
jl loc_100A34D  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
mov esi 104h +
push esi  +
call ds:GetTempPathW  +
cmp eax ebx +
jz loc_100A34C  +
cmp eax esi +
jnb loc_100A34C  +
lea eax [ebp+var_824] +
push eax  +
lea eax [ebp+var_61C] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1009BF9  +
test eax eax +
jl loc_100A34C  +
cmp [ebp+arg_8] bl +
jnz loc_100A205  +
mov eax [ebp+var_82C] +
jmp loc_100A241  +
lea eax [ebp+Buffer] +
push eax  +
push esi  +
lea eax [ebp+pszPath] +
push eax  +
call sub_10099DD  +
test eax eax +
jl loc_100A34C  +
push offset FileName  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathAppendW  +
test eax eax +
jz loc_100A34C  +
lea eax [ebp+pszPath] +
mov [ebp+var_828] eax +
call dword_100E7CC  +
mov edi eax +
cmp edi ebx +
jz loc_100A34C  +
cmp [ebp+arg_4] 0FFFFFFFFh +
jnz loc_100A270  +
lea eax [ebp+arg_4] +
push eax  +
push edi  +
call dword_100E7D4  +
test eax eax +
jl loc_100A34C  +
push [ebp+arg_4]  +
push 5BBh  +
call sub_100BA15  +
push eax  +
push 204h  +
mov esi offset unk_100E198 +
push esi  +
call swprintf_s  +
add esp 10h +
push esi  +
mov esi ds:__iob_func +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push 5BCh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+arg_4]  +
lea eax [ebp+var_824] +
push eax  +
lea eax [ebp+var_61C] +
push eax  +
push edi  +
call sub_1009B90  +
cmp eax ebx +
jge loc_100A2FA  +
cmp eax 80040200h +
jnz loc_100A2E2  +
push 5B9h  +
jmp loc_100A2EE  +
cmp eax 80040201h +
jnz loc_100A34C  +
push 5BAh  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_100A34C  +
movzx eax [ebp+arg_8] +
push eax  +
push ebx  +
push [ebp+var_828]  +
lea eax [ebp+var_824] +
push eax  +
lea eax [ebp+var_61C] +
push eax  +
push edi  +
call sub_10095DD  +
test eax eax +
jl loc_100A34C  +
push ebx  +
push edi  +
call dword_100E7EC  +
cmp [ebp+arg_8] bl +
jz loc_100A342  +
push ebx  +
push [ebp+var_82C]  +
push [ebp+var_828]  +
push edi  +
call sub_10097E7  +
test eax eax +
jl loc_100A34C  +
mov [ebp+var_830] 1 +
pop esi  +
push edi  +
call dword_100E7D0  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_830] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_100E150 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor ebx ebx +
xor edi edi +
call sub_10098D8  +
test eax eax +
jl loc_100A4C4  +
test esi esi +
jnz loc_100A3A4  +
mov esi offset a_ +
push 0  +
lea eax [ebp+pszPath] +
push eax  +
push 104h  +
push esi  +
call ds:GetFullPathNameW  +
test eax eax +
jz loc_100A4C4  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathIsDirectoryW  +
test eax eax +
jnz loc_100A3DC  +
push 5C5h  +
jmp loc_100A49F  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
push esi  +
call sub_1009BF9  +
test eax eax +
jl loc_100A4C4  +
call dword_100E7CC  +
mov edi eax +
test edi edi +
jz loc_100A4C4  +
cmp [ebp+arg_4] 0FFFFFFFFh +
jnz loc_100A421  +
lea eax [ebp+arg_4] +
push eax  +
push edi  +
call dword_100E7D4  +
test eax eax +
jl loc_100A4C4  +
push [ebp+arg_4]  +
push 5BBh  +
call sub_100BA15  +
push eax  +
push 204h  +
mov esi offset unk_100E198 +
push esi  +
call swprintf_s  +
add esp 10h +
push esi  +
mov esi ds:__iob_func +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push 5BCh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
push [ebp+arg_4]  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
push edi  +
call sub_1009B90  +
test eax eax +
jge loc_100A4AB  +
cmp eax 80040200h +
jnz loc_100A493  +
push 5B9h  +
jmp loc_100A49F  +
cmp eax 80040201h +
jnz loc_100A4C4  +
push 5BAh  +
call sub_100BA15  +
mov dword_100E7A0 eax +
jmp loc_100A4C4  +
push 5BFh  +
call sub_100BA15  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100B4C8  +
xor ebx ebx +
inc ebx  +
push edi  +
call dword_100E7D0  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100A786  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100A4FF  +
test eax eax +
jnz loc_100A504  +
mov ecx [esi] +
test ecx ecx +
jz loc_100A4FC  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100A4F0  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100E818 +
push offset dword_100E808  +
push dword_100E814  +
mov dword_100E808 eax +
push offset dword_100E7F8  +
push offset dword_100E7FC  +
push offset dword_100E7F4  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_100E804 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100A58C  +
cmp eax esi +
jnz loc_100A57F  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_100A58F  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100A566  +
xor esi esi +
inc esi  +
mov eax dword_100EC70 +
cmp eax esi +
jnz loc_100A5A2  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100A5DD  +
mov eax dword_100EC70 +
test eax eax +
jnz loc_100A5D7  +
mov dword_100EC70 esi +
push offset dword_1001304  +
push offset dword_10012F8  +
call sub_100A4E3  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A5DD  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_100A6A7  +
mov dword_100E810 esi +
mov eax dword_100EC70 +
cmp eax esi +
jnz loc_100A601  +
push offset dword_10012F4  +
push offset dword_10012EC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100EC70 2 +
cmp [ebp+var_1C] ebx +
jnz loc_100A60E  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100EC78 ebx +
jz loc_100A62F  +
push offset dword_100EC78  +
call sub_100A9D9  +
pop ecx  +
test eax eax +
jz loc_100A62F  +
push ebx  +
push 2  +
push ebx  +
call dword_100EC78  +
push dword_100E7F8  +
push dword_100E7FC  +
push dword_100E7F4  +
call sub_1005768  +
add esp 0Ch +
mov dword_100E80C eax +
cmp dword_100E800 ebx +
jnz loc_100A68D  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_100E80C eax +
xor ebx ebx +
cmp dword_100E800 ebx +
jnz loc_100A68D  +
push eax  +
call ds:_exit  +
cmp dword_100E810 ebx +
jnz loc_100A69B  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100E80C +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase ax +
jz loc_100A6C4  +
xor eax eax +
jmp loc_100A711  +
mov eax ds:dword_100003C +
lea eax __ImageBase[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_100A6C0  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100A6FE  +
cmp ecx 20Bh +
jnz loc_100A6C0  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100A6C0  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100A70C  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100A6C0  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100E800 eax +
call sub_100AB72  +
push eax  +
call ds:__set_app_type  +
or dword_100EC68 0FFFFFFFFh +
or dword_100EC6C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100E820 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100E81C +
mov [eax] ecx +
call sub_100AB04  +
cmp dword_100E160 0 +
jnz loc_100A76A  +
push offset sub_100AB04  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100AAEC  +
xor eax eax +
retn   +
***
call sub_100ABB1  +
jmp sub_100A544  +
***
cmp ecx dword_100E150 +
jnz loc_100A791  +
retn 0  +
jmp loc_100AC47  +
***
jmp ds:__CxxFrameHandler3  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100E150 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100E150 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
jmp ds:_purecall  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100A8BA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100A91A  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100A91A  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100A914  +
cmp eax 19930521h +
jz loc_100A914  +
cmp eax 19930522h +
jz loc_100A914  +
cmp eax 1994000h +
jnz loc_100A91A  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_100A8DC+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100A966  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100A962  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100A9CD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100A9C5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100A9CF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100A9B5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_100A950  +
pop ecx  +
test eax eax +
jz loc_100AA36  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100A990  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100AA36  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100AA3F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100A786  +
push offset dword_100E150  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100AB65  +
cmp ecx 0FFFFFFFFh +
jz loc_100AB65  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100AB5E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100AB5E  +
cmp edx 10000000h +
jnb loc_100AB5E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100AB5E  +
jmp loc_100AB59  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100ABA7  +
push eax  +
call sub_100AB0C  +
test eax eax +
jz loc_100ABA7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100AB9C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100ABA7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100E150 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100ABE3  +
test eax ebx +
jz loc_100ABE3  +
not eax  +
mov dword_100E154 eax +
jmp loc_100AC3E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100AC2A  +
test dword_100E150 ebx +
jnz loc_100AC2F  +
mov esi 0BB40E64Fh +
mov dword_100E150 esi +
not esi  +
mov dword_100E154 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100E928 eax +
mov dword_100E924 ecx +
mov dword_100E920 edx +
mov dword_100E91C ebx +
mov dword_100E918 esi +
mov dword_100E914 edi +
mov word_100E940 ss +
mov word_100E934 cs +
mov word_100E910 ds +
mov word_100E90C es +
mov word_100E908 fs +
mov word_100E904 gs +
pushf   +
pop dword_100E938  +
mov eax [ebp+0] +
mov dword_100E92C eax +
mov eax [ebp+4] +
mov dword_100E930 eax +
lea eax [ebp+8] +
mov dword_100E93C eax +
mov eax [ebp-320h] +
mov dword_100E878 10001h +
mov eax dword_100E930 +
mov dword_100E834 eax +
mov dword_100E828 0C0000409h +
mov dword_100E82C 1 +
mov eax dword_100E150 +
mov [ebp-328h] eax +
mov eax dword_100E154 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push edi  +
xor edi edi +
inc edi  +
cmp dword_100EB48 edi +
jnz loc_100AD72  +
push dword_100EB50  +
call sub_100BA2D  +
test eax eax +
jnz loc_100AD6E  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AE06  +
push 42Bh  +
jmp loc_100AE00  +
mov eax edi +
pop edi  +
retn   +
cmp dword_100EB50 0 +
jnz loc_100AD56  +
call sub_100BA4E  +
push eax  +
mov dword_100EB50 eax +
call sub_100BA2D  +
test eax eax +
jz loc_100ADF4  +
push 0  +
push offset dword_1002C50  +
push dword_100EB50  +
call sub_100BC37  +
test eax eax +
jnz loc_100ADF4  +
push 3  +
push dword_100EB50  +
call sub_100BCAE  +
cmp eax edi +
jnz loc_100ADF4  +
push 3  +
push dword_100EB50  +
call sub_100BCAE  +
cmp eax 2 +
jnz loc_100ADF4  +
push 3  +
push dword_100EB50  +
call sub_100BCAE  +
cmp eax 3 +
jnz loc_100ADF4  +
push 0  +
mov dword_100EB48 edi +
call ds:SetThreadUILanguage  +
xor ecx ecx +
test ax ax +
setnz cl  +
pop edi  +
mov eax ecx +
retn   +
call ds:GetLastError  +
test eax eax +
jnz loc_100AE06  +
push 8  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
retn   +
***
mov eax dword_100EB50 +
test eax eax +
jz loc_100AE30  +
push eax  +
call sub_100BA2D  +
test eax eax +
jz loc_100AE30  +
push 0  +
push dword_100EB50  +
call sub_100BE76  +
retn   +
mov eax offset dword_1002C50 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetLastError +
push edi  +
call esi  +
cmp [ebp+lpString] 0 +
mov edi eax +
jnz loc_100AE64  +
call esi  +
test eax eax +
jnz loc_100AE60  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100AE97  +
call sub_100AD39  +
test eax eax +
jz loc_100AE60  +
push 0  +
push [ebp+lpString]  +
push 0  +
push dword_100EB50  +
call sub_100BF5E  +
test eax eax +
jnz loc_100AE8D  +
call esi  +
test eax eax +
jnz loc_100AE60  +
push 8  +
jmp loc_100AE5A  +
push edi  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor edi edi +
mov [ebp+hMem] edi +
call sub_100AD39  +
test eax eax +
jz loc_100AF21  +
push ebx  +
push esi  +
mov esi ds:GetLastError +
push edi  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
call esi  +
push eax  +
push edi  +
push 1300h  +
call ds:FormatMessageW  +
mov ebx ds:SetLastError +
test eax eax +
jz loc_100AEFB  +
cmp [ebp+hMem] edi +
jz loc_100AF13  +
push [ebp+hMem]  +
call sub_100AE3B  +
push [ebp+hMem]  +
mov esi eax +
call ds:LocalFree  +
mov eax esi +
jmp loc_100AF1F  +
cmp [ebp+hMem] edi +
jz loc_100AF13  +
push [ebp+hMem]  +
call ds:LocalFree  +
call esi  +
test eax eax +
jnz loc_100AF13  +
push 8  +
call ebx  +
call esi  +
test eax eax +
jnz loc_100AF1D  +
push 8  +
call ebx  +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_100AEA2  +
test eax eax +
jz loc_100AF4B  +
call sub_100AE0F  +
push eax  +
push [ebp+hConsoleOutput]  +
call sub_100B4C8  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp ecx 5 +
jb loc_100AF8D  +
xor eax eax +
inc eax  +
cmp dword_100EB58 eax +
jz loc_100AF8D  +
mov dword_100E164 ecx +
mov ecx [ebp+arg_4] +
mov dword_100E168 ecx +
mov cx [ebp+arg_8] +
mov dword_100EB58 eax +
mov word_100EB54 cx +
jmp loc_100AFA1  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AF9F  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+Mode] ebx +
cmp [ebp+arg_0] ebx +
jnz loc_100AFD1  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AFCD  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100B04E  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call ds:_fileno  +
mov esi ds:_errno +
mov edi eax +
call esi  +
push edi  +
mov [eax] ebx +
call ds:_get_osfhandle  +
mov ebx eax +
pop ecx  +
pop ecx  +
cmp ebx 0FFFFFFFFh +
jz loc_100B042  +
call esi  +
cmp dword ptr [eax] 9 +
jz loc_100B042  +
push ebx  +
call ds:GetFileType  +
cmp eax 2 +
jnz loc_100B04A  +
sub edi 0 +
jz loc_100B01E  +
dec edi  +
jz loc_100B01A  +
dec edi  +
jnz loc_100B04A  +
push 0FFFFFFF4h  +
jmp loc_100B020  +
push 0FFFFFFF5h  +
jmp loc_100B020  +
push 0FFFFFFF6h  +
call ds:GetStdHandle  +
test eax eax +
jz loc_100B04A  +
cmp eax 0FFFFFFFFh +
jz loc_100B04A  +
lea ecx [ebp+Mode] +
push ecx  +
push eax  +
call ds:GetConsoleMode  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_100B04C  +
push 6  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
jnz loc_100B067  +
xor eax eax +
jmp loc_100B070  +
push [ebp+lpString]  +
call ds:lstrlenW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jnz loc_100B092  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B0B4  +
push 57h  +
jmp loc_100B0AE  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_100B0B4  +
push [ebp+lpMem]  +
push 0  +
push eax  +
call ds:HeapValidate  +
test eax eax +
jnz loc_100B0B6  +
push 6  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
cmp [ebp+dwBytes] 0 +
ja loc_100B0E5  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B159  +
push 57h  +
call ds:SetLastError  +
jmp loc_100B159  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_100B159  +
and [ebp+ms_exc.disabled] 0 +
push [ebp+dwBytes]  +
push 0Ch  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_20] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100B15B  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0C0000017h +
jz loc_100B140  +
cmp dword ptr [ebp-1Ch] 0C0000005h +
jnz loc_100B140  +
push 570h  +
call ds:SetLastError  +
call sub_100AEA2  +
jmp loc_100B152  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B152  +
push 8  +
call ds:SetLastError  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jnz loc_100B18A  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B185  +
push 57h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
jmp loc_100B1AC  +
push [ebp+lpMem]  +
call sub_100B079  +
test eax eax +
jz loc_100B185  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_100B185  +
push [ebp+lpMem]  +
push 0  +
push eax  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100B1E5  +
cmp [ebp+arg_4] eax +
jz loc_100B1E1  +
mov dl [ebx] +
test dl dl +
jz loc_100B1E1  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100B1C9  +
test esi esi +
jnz loc_100B1EC  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100B1F8  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100B227  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B223  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100B275  +
cmp dword ptr [esi] 0 +
jnz loc_100B231  +
xor eax eax +
inc eax  +
jmp loc_100B275  +
push ebx  +
call ds:GetProcessHeap  +
mov ebx eax +
test ebx ebx +
jz loc_100B255  +
push dword ptr [esi]  +
call sub_100B168  +
cmp eax 0FFFFFFFFh +
jnz loc_100B259  +
push 80004003h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100B274  +
push eax  +
push 0  +
push dword ptr [esi]  +
call memset  +
add esp 0Ch +
push dword ptr [esi]  +
push 0  +
push ebx  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
mov esi [ebp+arg_0] +
xor edi edi +
cmp esi edi +
jz loc_100B344  +
mov eax [esi] +
cmp eax edi +
jz loc_100B344  +
cmp [ebp+dwBytes] edi +
jnz loc_100B2B2  +
push esi  +
call sub_100B204  +
jmp loc_100B358  +
push eax  +
call sub_100B079  +
test eax eax +
jnz loc_100B2C3  +
mov [esi] edi +
jmp loc_100B356  +
call ds:GetProcessHeap  +
cmp eax edi +
jz loc_100B356  +
mov [ebp+ms_exc.disabled] edi +
push [ebp+dwBytes]  +
push dword ptr [esi]  +
push 0Ch  +
push eax  +
call ds:HeapReAlloc  +
cmp eax edi +
jnz loc_100B301  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B2F8  +
push 8  +
call ds:SetLastError  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100B356  +
mov [esi] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
inc eax  +
jmp loc_100B358  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0C0000017h +
jz loc_100B2E6  +
cmp dword ptr [ebp-1Ch] 0C0000005h +
jnz loc_100B2E6  +
push 570h  +
call ds:SetLastError  +
call sub_100AEA2  +
jmp loc_100B2F8  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B356  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
call __SEH_epilog4  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100B37B  +
cmp edx 7FFFFFFFh +
jbe loc_100B380  +
mov eax 80070057h +
test eax eax +
jl loc_100B396  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100B1B5  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword_100EB50  +
call sub_100BA2D  +
cmp eax 1 +
jnz loc_100B429  +
push edi  +
push 3  +
push dword_100EB50  +
call sub_100BE09  +
mov edi eax +
test edi edi +
jz loc_100B41E  +
push esi  +
lea esi [edi-1] +
push esi  +
push 3  +
push dword_100EB50  +
call sub_100C0A0  +
cmp eax 10000h +
jnz loc_100B417  +
push esi  +
push 3  +
push dword_100EB50  +
call sub_100BEA5  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100B417  +
add eax 0Ch +
push eax  +
call sub_100B204  +
lea eax [ebp+var_4] +
push eax  +
call sub_100B204  +
push esi  +
push 3  +
push dword_100EB50  +
call sub_100BDD2  +
dec edi  +
dec esi  +
test edi edi +
jnz loc_100B3CD  +
pop esi  +
push offset dword_100EB50  +
call sub_100BAC3  +
pop edi  +
cmp dword_100EB4C 1 +
jnz loc_100B438  +
call ds:WSACleanup  +
xor eax eax +
inc eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100B475  +
cmp [ebp+arg_4] 0 +
jz loc_100B475  +
cmp [ebp+arg_8] 0 +
jle loc_100B475  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100B365  +
test eax eax +
jge loc_100B47B  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_100B477  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100B4B8  +
cmp [ebp+arg_4] 0 +
jz loc_100B4B8  +
cmp [ebp+arg_8] 0 +
jle loc_100B4B8  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_10099DD  +
test eax eax +
jge loc_100B4BE  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_100B4BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+NumberOfCharsWritten] edi +
cmp [ebp+hConsoleOutput] edi +
jz loc_100B70D  +
mov ebx [ebp+lpString] +
cmp ebx edi +
jz loc_100B70D  +
push [ebp+hConsoleOutput]  +
call sub_100AFAA  +
cmp eax 1 +
jnz loc_100B5FA  +
mov esi ds:__iob_func +
call esi  +
add eax 20h +
cmp [ebp+hConsoleOutput] eax +
jnz loc_100B511  +
push 0FFFFFFF5h  +
jmp loc_100B521  +
call esi  +
add eax 40h +
cmp [ebp+hConsoleOutput] eax +
jnz loc_100B5E2  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push edi  +
push ebx  +
mov [ebp+hConsoleOutput] eax +
mov [ebp+NumberOfCharsWritten] edi +
call sub_100B058  +
push edi  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push eax  +
push ebx  +
push [ebp+hConsoleOutput]  +
mov ebx ds:WriteConsoleW +
mov [ebp+var_10] eax +
call ebx  +
test eax eax +
jz loc_100B555  +
mov eax [ebp+var_10] +
cmp eax [ebp+NumberOfCharsWritten] +
jz loc_100B5BA  +
call ds:GetLastError  +
cmp eax 8 +
jnz loc_100B5DE  +
mov esi [ebp+lpString] +
push edi  +
push esi  +
call sub_100B058  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edi +
cmp eax edi +
jbe loc_100B5BA  +
mov [ebp+cchWideChar] esi +
mov esi 400h +
mov eax [ebp+var_10] +
sub eax [ebp+var_C] +
mov [ebp+lpString] esi +
cmp eax esi +
ja loc_100B58C  +
mov [ebp+lpString] eax +
push edi  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push [ebp+lpString]  +
push [ebp+cchWideChar]  +
push [ebp+hConsoleOutput]  +
call ebx  +
test eax eax +
jz loc_100B5C2  +
mov eax [ebp+lpString] +
cmp eax [ebp+NumberOfCharsWritten] +
jnz loc_100B5C2  +
add [ebp+var_C] esi +
mov eax [ebp+var_C] +
add [ebp+cchWideChar] 800h +
cmp eax [ebp+var_10] +
jb loc_100B57C  +
xor eax eax +
inc eax  +
jmp loc_100B721  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100AF29  +
call sub_100B39F  +
push 1  +
call ds:ExitProcess  +
call esi  +
jmp loc_100B5C8  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B71F  +
push 42Bh  +
jmp loc_100B719  +
push edi  +
push ebx  +
call sub_100B058  +
push 100h  +
push edi  +
mov esi offset unk_100EB60 +
push esi  +
mov [ebp+var_10] eax +
call memset  +
add esp 0Ch +
mov [ebp+var_C] edi +
cmp [ebp+var_10] edi +
jbe loc_100B5BA  +
mov ebx 0FFh +
mov eax [ebp+var_10] +
mov ecx [ebp+var_C] +
sub eax ecx +
mov [ebp+NumberOfCharsWritten] edi +
mov [ebp+cchWideChar] ebx +
cmp eax ebx +
ja loc_100B63A  +
mov [ebp+cchWideChar] eax +
mov eax [ebp+lpString] +
lea eax [eax+ecx*2] +
mov [ebp+lpWideCharStr] eax +
push edi  +
push edi  +
push edi  +
push edi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push edi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov [ebp+NumberOfCharsWritten] eax +
cmp eax edi +
jz loc_100B697  +
cmp eax ebx +
jbe loc_100B6A5  +
add eax 0FFFFFF01h +
cmp eax 3 +
jbe loc_100B677  +
shr eax 1 +
sub [ebp+cchWideChar] eax +
jmp loc_100B67A  +
dec [ebp+cchWideChar]  +
mov [ebp+NumberOfCharsWritten] edi +
cmp [ebp+cchWideChar] edi +
jnz loc_100B643  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B697  +
push 42Bh  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 20h +
jmp loc_100B5CB  +
cmp eax [ebp+cchWideChar] +
jnb loc_100B6AD  +
mov [ebp+cchWideChar] eax +
push 100h  +
push edi  +
push esi  +
call memset  +
add esp 0Ch +
push edi  +
push edi  +
push ebx  +
push esi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push edi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov [ebp+NumberOfCharsWritten] eax +
cmp eax edi +
jz loc_100B697  +
mov eax [ebp+cchWideChar] +
add [ebp+var_C] eax +
push esi  +
push offset aS_3  +
push [ebp+hConsoleOutput]  +
call ds:fprintf  +
push [ebp+hConsoleOutput]  +
call ds:fflush  +
mov eax [ebp+var_C] +
add esp 10h +
cmp [ebp+var_10] eax +
ja loc_100B625  +
jmp loc_100B5BA  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B71F  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_100B745  +
cmp [ebp+arg_8] 0 +
jnz loc_100B745  +
xor eax eax +
jmp loc_100B899  +
call sub_100AD39  +
test eax eax +
jz loc_100B73E  +
push ebx  +
push esi  +
push edi  +
push 3  +
pop esi  +
push esi  +
push dword_100EB50  +
call sub_100BE09  +
mov ebx [ebp+arg_0] +
mov edi eax +
cmp edi ebx +
ja loc_100B792  +
push esi  +
push dword_100EB50  +
call sub_100BE3D  +
test eax eax +
jz loc_100B85D  +
mov ecx ebx +
sub ecx edi +
inc ecx  +
push ecx  +
push eax  +
call sub_100BD29  +
cmp eax 0FFFFFFFFh +
jz loc_100B85D  +
push ebx  +
push esi  +
push dword_100EB50  +
call sub_100C0A0  +
mov edi offset aBuffer +
test eax eax +
jz loc_100B7E0  +
push ebx  +
push esi  +
push dword_100EB50  +
call sub_100BEA5  +
mov esi eax +
test esi esi +
jz loc_100B85D  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100B85D  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_100B81F  +
mov edi [ebp+arg_8] +
jmp loc_100B82A  +
push 10h  +
call sub_100B0BF  +
mov esi eax +
mov [ebp+arg_0] esi +
test esi esi +
jz loc_100B85D  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
push 7  +
push edi  +
push esi  +
call sub_100B442  +
push esi  +
push ebx  +
push 3  +
push dword_100EB50  +
call sub_100C007  +
test eax eax +
jnz loc_100B7BF  +
lea eax [ebp+arg_0] +
push eax  +
call sub_100B204  +
jmp loc_100B85D  +
push 0  +
push ebx  +
call sub_100B058  +
mov edi eax +
inc edi  +
mov eax [esi+8] +
cmp edi eax +
ja loc_100B840  +
cmp edi 100h +
jbe loc_100B857  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_100B857  +
test eax eax +
lea eax [edi+edi] +
push eax  +
jnz loc_100B861  +
call sub_100B0BF  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100B85D  +
mov [esi+8] edi +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_100B86C  +
xor eax eax +
jmp loc_100B896  +
lea eax [esi+0Ch] +
push eax  +
call sub_100B27F  +
jmp loc_100B850  +
test ebx ebx +
jz loc_100B87C  +
push edi  +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_100B485  +
jmp loc_100B893  +
cmp [ebp+arg_C] 1 +
jnz loc_100B893  +
lea eax [edi+edi] +
push eax  +
push 0  +
push dword ptr [esi+0Ch]  +
call memset  +
add esp 0Ch +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+lpString] ebx +
cmp [ebp+dwMessageId] ebx +
jnz loc_100B8CF  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B8C5  +
push 57h  +
call ds:SetLastError  +
mov eax offset dword_1002C50 +
jmp loc_100B9DC  +
call sub_100AD39  +
test eax eax +
jz loc_100B8C5  +
push esi  +
push 1  +
push dword_100EB50  +
call sub_100BE09  +
mov esi eax +
cmp esi [ebp+arg_8] +
ja loc_100B92C  +
push 1  +
push dword_100EB50  +
call sub_100BE3D  +
cmp eax ebx +
jz loc_100B910  +
mov ecx [ebp+arg_8] +
sub ecx esi +
inc ecx  +
push ecx  +
push eax  +
call sub_100BD29  +
cmp eax 0FFFFFFFFh +
jnz loc_100B92C  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B922  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_1002C50 +
jmp loc_100B9DB  +
mov esi 80h +
push edi  +
push 1  +
add esi esi +
push esi  +
push ebx  +
push 4  +
call sub_100B72D  +
mov edi eax +
cmp edi ebx +
jz loc_100B9A0  +
push esi  +
push edi  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
call ds:LoadStringW  +
cmp eax ebx +
jnz loc_100B983  +
call ds:GetLastError  +
cmp eax 716h +
jnz loc_100B9B2  +
push ebx  +
push ebx  +
lea eax [ebp+lpString] +
push eax  +
push ebx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
push 0B00h  +
call ds:FormatMessageW  +
cmp eax ebx +
jz loc_100B9B2  +
mov edi [ebp+lpString] +
lea ecx [esi-1] +
cmp eax ecx +
jnb loc_100B932  +
push ebx  +
push edi  +
push [ebp+arg_8]  +
push 1  +
push dword_100EB50  +
call sub_100C041  +
test eax eax +
jnz loc_100B9B9  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B9B2  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_1002C50 +
jmp loc_100B9DA  +
cmp [ebp+lpString] ebx +
jz loc_100B9CA  +
push [ebp+lpString]  +
call ds:LocalFree  +
mov [ebp+lpString] ebx +
push [ebp+arg_8]  +
push 1  +
push dword_100EB50  +
call sub_100BEDC  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
inc dword_100EB5C  +
mov eax dword_100EB5C +
push 0Ah  +
pop ecx  +
xor edx edx +
div  ecx +
add edx 4 +
push edx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
call sub_100B8A2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
push 0  +
call sub_100B9E6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100BA43  +
cmp dword ptr [eax] 9 +
jnz loc_100BA43  +
xor eax eax +
inc eax  +
jmp loc_100BA45  +
xor eax eax +
pop ebp  +
retn 4  +
***
xor ecx ecx +
cmp eax ecx +
jnz loc_100BA5E  +
xor eax eax +
retn   +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov dword ptr [eax] 9 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100BA2D  +
test eax eax +
jz loc_100BAB9  +
mov eax [esi+8] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100BAAD  +
push edi  +
mov edi [eax+10h] +
push eax  +
call sub_100BBBA  +
lea eax [ebp+arg_0] +
push eax  +
call sub_100B204  +
mov eax edi +
mov [ebp+arg_0] eax +
test edi edi +
jnz loc_100BA91  +
pop edi  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
push ecx  +
call sub_100BA2D  +
test eax eax +
jz loc_100BAE4  +
push ecx  +
call sub_100BA73  +
push esi  +
call sub_100B204  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_100BA2D  +
test eax eax +
jz loc_100BB03  +
mov eax [ecx+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_100BA2D  +
test eax eax +
jnz loc_100BB22  +
xor eax eax +
jmp loc_100BB47  +
mov edx [ebp+arg_4] +
cmp [ecx+4] edx +
jbe loc_100BB1E  +
mov eax [ecx+8] +
push esi  +
xor esi esi +
cmp edx 1 +
jb loc_100BB3D  +
dec edx  +
mov esi eax +
mov eax [eax+10h] +
jnz loc_100BB35  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_100BB46  +
mov [ecx] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100BA2D  +
test eax eax +
jnz loc_100BB68  +
or eax 0FFFFFFFFh +
jmp loc_100BBB0  +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jz loc_100BB63  +
push 14h  +
call sub_100B0BF  +
test eax eax +
jz loc_100BB63  +
mov ecx [ebp+arg_4] +
and dword ptr [eax+10h] 0 +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
mov dword ptr [eax] 63h +
inc dword ptr [esi+4]  +
cmp dword ptr [esi+8] 0 +
jnz loc_100BBA3  +
mov [esi+8] eax +
jmp loc_100BBA9  +
mov ecx [esi+0Ch] +
mov [ecx+10h] eax +
mov [esi+0Ch] eax +
mov eax [esi+4] +
dec eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_100BC2E  +
mov eax [edx+4] +
mov ecx 70000h +
cmp eax ecx +
ja loc_100BBF9  +
jz loc_100BC15  +
cmp eax 20000h +
jz loc_100BC15  +
cmp eax 30000h +
jz loc_100BC15  +
cmp eax 40000h +
jz loc_100BC15  +
cmp eax 50000h +
jz loc_100BC15  +
cmp eax 60000h +
jz loc_100BC15  +
jmp loc_100BC2E  +
cmp eax 80000h +
jz loc_100BC20  +
cmp eax 90000h +
jz loc_100BC15  +
cmp eax 0A0000h +
jz loc_100BC15  +
cmp eax 0B0000h +
jnz loc_100BC2E  +
add edx 0Ch +
push edx  +
call sub_100B204  +
jmp loc_100BC2E  +
push esi  +
lea esi [edx+0Ch] +
push esi  +
call sub_100BAC3  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100BA2D  +
test eax eax +
jnz loc_100BC52  +
or eax 0FFFFFFFFh +
jmp locret_100BCA5  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_100BC65  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov esi eax +
push edi  +
inc esi  +
lea edi [esi+esi] +
push edi  +
call sub_100B0BF  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100BCA0  +
push esi  +
push [ebp+lpString]  +
push eax  +
call sub_100B485  +
push [ebp+var_4]  +
push edi  +
push 20000h  +
push [ebp+arg_0]  +
call sub_100BB50  +
cmp eax 0FFFFFFFFh +
jnz loc_100BCA3  +
lea eax [ebp+var_4] +
push eax  +
call sub_100B204  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_0]  +
xor esi esi +
mov [ebp+var_4] esi +
call sub_100BA2D  +
test eax eax +
jz loc_100BD1C  +
call sub_100BA4E  +
push eax  +
mov [ebp+var_4] eax +
call sub_100BA2D  +
test eax eax +
jz loc_100BD1C  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] esi +
jbe loc_100BCF6  +
push esi  +
push esi  +
push esi  +
push [ebp+var_4]  +
call sub_100BB50  +
cmp eax 0FFFFFFFFh +
jz loc_100BCF6  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_100BCE0  +
cmp edi [ebp+arg_4] +
pop edi  +
jnz loc_100BD13  +
push [ebp+var_4]  +
push 4  +
push 80000h  +
push [ebp+arg_0]  +
call sub_100BB50  +
cmp eax 0FFFFFFFFh +
jnz loc_100BD1F  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BAC3  +
or eax 0FFFFFFFFh +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100BA2D  +
test eax eax +
jnz loc_100BD3F  +
or eax 0FFFFFFFFh +
jmp loc_100BD63  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_100BD60  +
push 0  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_100BB50  +
cmp eax 0FFFFFFFFh +
jz loc_100BD60  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_100BD47  +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_100BB0C  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100BDC8  +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_100BDA5  +
mov eax [eax+10h] +
mov [ecx+10h] eax +
mov eax [ebp+var_4] +
jmp loc_100BDAB  +
mov edx [eax+10h] +
mov [esi+8] edx +
cmp eax [esi+0Ch] +
jnz loc_100BDB3  +
mov [esi+0Ch] ecx +
dec dword ptr [esi+4]  +
push eax  +
call sub_100BBBA  +
lea eax [ebp+var_4] +
push eax  +
call sub_100B204  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jz loc_100BDFE  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BDFE  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BD6C  +
jmp loc_100BE00  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jz loc_100BE32  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BE32  +
push dword ptr [eax+0Ch]  +
call sub_100BAEE  +
jmp loc_100BE34  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jnz loc_100BE57  +
xor eax eax +
jmp loc_100BE6D  +
mov ecx [eax+4] +
cmp ecx 10000h +
jz loc_100BE6A  +
cmp ecx 80000h +
jnz loc_100BE53  +
mov eax [eax+0Ch] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jnz loc_100BE90  +
xor eax eax +
jmp loc_100BE9C  +
cmp dword ptr [eax+4] 20000h +
jnz loc_100BE8C  +
mov eax [eax+0Ch] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jz loc_100BED1  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BED1  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BE3D  +
jmp loc_100BED3  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jz loc_100BF08  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BF08  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BE76  +
jmp loc_100BF0A  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_100BF24  +
xor eax eax +
jmp loc_100BF54  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jz loc_100BF20  +
mov ecx [eax+4] +
mov edx 10000h +
cmp ecx edx +
jz loc_100BF47  +
test ecx ecx +
jz loc_100BF4B  +
jmp loc_100BF20  +
test ecx ecx +
jnz loc_100BF4E  +
mov [eax+4] edx +
mov [eax+0Ch] esi +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
mov esi eax +
cmp esi edi +
jnz loc_100BF7D  +
xor eax eax +
jmp loc_100BFFC  +
mov eax [esi+4] +
push ebx  +
mov ebx 20000h +
cmp eax ebx +
jz loc_100BF8E  +
cmp eax edi +
jnz loc_100BFE3  +
cmp [ebp+arg_C] edi +
jnz loc_100BF9F  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov [ebp+arg_C] eax +
mov eax [ebp+arg_C] +
inc eax  +
mov [ebp+arg_C] eax +
cmp [esi+4] edi +
jnz loc_100BFC3  +
lea edi [eax+eax] +
push edi  +
call sub_100B0BF  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100BFE3  +
mov [esi+4] ebx +
mov [esi+8] edi +
jmp loc_100BFEA  +
lea ebx [eax+eax] +
cmp [esi+8] ebx +
jnb loc_100BFEA  +
lea edi [esi+0Ch] +
push edi  +
call sub_100B204  +
and dword ptr [edi] 0 +
push ebx  +
call sub_100B0BF  +
mov [edi] eax +
test eax eax +
jnz loc_100BFE7  +
xor eax eax +
jmp loc_100BFFB  +
mov [esi+8] ebx +
push [ebp+arg_C]  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_100B485  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jz loc_100C036  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C036  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BF13  +
jmp loc_100C038  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jz loc_100C073  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C073  +
push [ebp+arg_10]  +
push [ebp+lpString]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BF5E  +
jmp loc_100C075  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jz loc_100C097  +
mov eax [eax+4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BB0C  +
test eax eax +
jz loc_100C0CC  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C0CC  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C07E  +
jmp loc_100C0CE  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov eax offset SetupDiGetDeviceRegistryPropertyW +
jmp $+5  +
push ecx  +
push edx  +
push eax  +
push offset SETUPAPI_dll_import_table  +
call sub_100C35B  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset SetupDiDestroyDeviceInfoList +
jmp loc_100C0DC  +
***
mov eax offset SetupDiOpenDeviceInfoW +
jmp loc_100C0DC  +
***
mov eax offset SetupDiCreateDeviceInfoList +
jmp loc_100C0DC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
mov eax offset __ImageBase +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+8] +
mov ecx [esi+4] +
mov ebx [esi+0Ch] +
add edx eax +
push edi  +
mov edi [esi+14h] +
add edi eax +
add ecx eax +
mov [ebp+Target] edx +
mov edx [esi+10h] +
add ebx eax +
add edx eax +
mov eax [esi+1Ch] +
mov [ebp+var_4] eax +
mov eax [ebp+Arguments] +
mov [ebp+lpLibFileName] ecx +
xor ecx ecx +
mov [ebp+var_C] edi +
mov [ebp+var_3C] eax +
xor eax eax +
test dword ptr [esi] 1 +
lea edi [ebp+lpProcName] +
mov [ebp+var_44] 24h +
mov [ebp+var_40] esi +
mov [ebp+var_34] ecx +
stos   +
mov [ebp+var_2C] ecx +
mov [ebp+var_28] ecx +
mov [ebp+var_24] ecx +
jnz loc_100C3E1  +
lea eax [ebp+var_44] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push ecx  +
push 0C06D0057h  +
call ds:RaiseException  +
xor eax eax +
jmp loc_100C591  +
mov eax [ebp+Target] +
mov edi [eax] +
mov eax [ebp+Arguments] +
sub eax ebx +
sar eax 2 +
shl eax 2 +
add edx eax +
mov edx [edx] +
mov [ebp+arg_0] eax +
mov eax edx +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+var_34] eax +
lea eax (__ImageBase+2)[edx] +
jnz loc_100C410  +
movzx eax dx +
mov [ebp+lpProcName] eax +
mov eax ds:dword_1002C3C +
xor ebx ebx +
cmp eax ecx +
jz loc_100C42F  +
lea edx [ebp+var_44] +
push edx  +
push ecx  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_100C574  +
test edi edi +
jnz loc_100C4D9  +
mov eax ds:dword_1002C3C +
test eax eax +
jz loc_100C44E  +
lea ecx [ebp+var_44] +
push ecx  +
push 1  +
call eax  +
mov edi eax +
test edi edi +
jnz loc_100C49E  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryA  +
mov edi eax +
test edi edi +
jnz loc_100C49E  +
call ds:GetLastError  +
mov [ebp+var_24] eax +
mov eax ds:dword_1002C3C +
test eax eax +
jz loc_100C47D  +
lea ecx [ebp+var_44] +
push ecx  +
push 3  +
call eax  +
mov edi eax +
test edi edi +
jnz loc_100C49E  +
lea eax [ebp+var_44] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 1  +
push 0  +
push 0C06D007Eh  +
call ds:RaiseException  +
mov eax [ebp+var_28] +
jmp loc_100C591  +
push edi  +
push [ebp+Target]  +
call ds:InterlockedExchange  +
cmp eax edi +
jz loc_100C4D2  +
cmp dword ptr [esi+18h] 0 +
jz loc_100C4D9  +
push 8  +
push 40h  +
call ds:LocalAlloc  +
test eax eax +
jz loc_100C4D9  +
mov [eax+4] esi +
mov ecx dword_100EC64 +
mov [eax] ecx +
mov dword_100EC64 eax +
jmp loc_100C4D9  +
push edi  +
call ds:FreeLibrary  +
mov eax ds:dword_1002C3C +
mov [ebp+var_2C] edi +
test eax eax +
jz loc_100C4EF  +
lea ecx [ebp+var_44] +
push ecx  +
push 2  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_100C56F  +
cmp [esi+14h] ebx +
jz loc_100C524  +
cmp [esi+1Ch] ebx +
jz loc_100C524  +
mov eax [edi+3Ch] +
add eax edi +
cmp dword ptr [eax] 4550h +
jnz loc_100C524  +
mov ecx [ebp+var_4] +
cmp [eax+8] ecx +
jnz loc_100C524  +
cmp edi [eax+34h] +
jnz loc_100C524  +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_0] +
mov ebx [ecx+eax] +
test ebx ebx +
jnz loc_100C56F  +
push [ebp+lpProcName]  +
push edi  +
call ds:GetProcAddress  +
mov ebx eax +
test ebx ebx +
jnz loc_100C56F  +
call ds:GetLastError  +
mov [ebp+var_24] eax +
mov eax ds:dword_1002C3C +
test eax eax +
jz loc_100C550  +
lea ecx [ebp+var_44] +
push ecx  +
push 4  +
call eax  +
mov ebx eax +
test ebx ebx +
jnz loc_100C56F  +
lea eax [ebp+var_44] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push ebx  +
push 0C06D007Fh  +
call ds:RaiseException  +
mov ebx [ebp+var_28] +
mov eax [ebp+Arguments] +
mov [eax] ebx +
mov eax ds:dword_1002C3C +
test eax eax +
jz loc_100C58F  +
and [ebp+var_24] 0 +
lea ecx [ebp+var_44] +
push ecx  +
push 5  +
mov [ebp+var_2C] edi +
mov [ebp+var_28] ebx +
call eax  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call fword ptr [ecx-3Dh]  +
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_100A786  +
mov eax offset dword_100C62C +
jmp loc_100A7C0  +
***
mov eax ds:548BFFFFh +
and al 8 +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100A786  +
mov eax offset dword_100C6B4 +
jmp loc_100A7C0  +
***
jz $+2  +
add [eax+0] al +
retn 0D9h  +
***
retf   +
***
