mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
xor edi edi +
cmp dword_101D060 edi +
jz loc_1007E79  +
push esi  +
push [ebp+arg_8]  +
mov esi offset unk_101D068 +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword_101D05C  +
push dword_101D058  +
push offset aLlxLxLx00S  +
push 400h  +
push esi  +
call sprintf_s  +
or [ebp+var_8] 0FFFFFFFFh +
or [ebp+var_4] 0FFFFFFFFh +
add esp 20h +
push edi  +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
push esi  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push edi  +
push edi  +
push dword_101D060  +
call ds:NtWriteFile  +
pop esi  +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push edi  +
xor edi edi +
cmp dword_101D060 edi +
jz loc_1007EE5  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
call ds:NtQuerySystemTime  +
push [ebp+arg_0]  +
mov esi offset unk_101D468 +
push [ebp+var_4]  +
push [ebp+var_8]  +
push offset aLlx0000S  +
push 400h  +
push esi  +
call sprintf_s  +
or [ebp+var_10] 0FFFFFFFFh +
or [ebp+var_C] 0FFFFFFFFh +
add esp 18h +
push edi  +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
push esi  +
lea eax [ebp+var_18] +
push eax  +
push edi  +
push edi  +
push edi  +
push dword_101D060  +
call ds:NtWriteFile  +
pop esi  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push edi  +
xor edi edi +
cmp dword_101D060 edi +
jz loc_1007F5A  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
call ds:NtQuerySystemTime  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
movzx eax word ptr [eax] +
shr eax 1 +
push eax  +
push [ebp+var_4]  +
mov esi offset unk_101D868 +
push [ebp+var_8]  +
push offset aLlx0000Interfe  +
push 400h  +
push esi  +
call sprintf_s  +
or [ebp+var_10] 0FFFFFFFFh +
or [ebp+var_C] 0FFFFFFFFh +
add esp 1Ch +
push edi  +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
push esi  +
lea eax [ebp+var_18] +
push eax  +
push edi  +
push edi  +
push edi  +
push dword_101D060  +
call ds:NtWriteFile  +
pop esi  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi] +
push edi  +
push eax  +
push dword ptr [esi+4]  +
push offset unk_101DC74  +
call memcpy  +
movzx eax word ptr [esi] +
add esp 0Ch +
shr eax 1 +
lea eax unk_101DC74[eax*2] +
push 2Eh  +
pop ecx  +
mov [eax] cx +
mov edx dword_101D058 +
mov ecx dword_101D05C +
inc eax  +
inc eax  +
xor edi edi +
cmp eax offset dword_101DE68 +
jnb loc_1007FD1  +
mov ebx ecx +
shr ebx 1Ch +
and ebx 0Fh +
movsx bx ds:byte_1001464[ebx] +
shld ecx edx +
mov [eax] bx +
inc eax  +
inc eax  +
shl edx 4 +
inc edi  +
cmp edi 10h +
jb loc_1007FA8  +
movzx eax word ptr [esi] +
add eax 22h +
mov dword_101DC70 eax +
xor eax eax +
push 4060h  +
mov dword_101DC6C eax +
mov [ebp+var_1C] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
push 7  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push 100100h  +
lea eax [ebp+arg_0] +
push eax  +
mov byte_101DC68 1 +
mov [ebp+var_20] 18h +
mov [ebp+var_14] 40h +
mov [ebp+var_18] esi +
call ds:NtOpenFile  +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jl locret_100804B  +
push 0Bh  +
push 200h  +
push offset byte_101DC68  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call ds:NtSetInformationFile  +
push [ebp+arg_0]  +
call ds:NtClose  +
leave   +
retn 4  +
***
mov byte_101D064 1 +
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push offset aAdnzsgZziDl  +
push [ebp+arg_0]  +
call sub_1016F46  +
pop ebp  +
retn 8  +
***
xor eax eax +
push edi  +
mov [ecx] al +
mov [ecx+1] al +
mov [ecx+2] al +
mov [ecx+3] al +
mov [ecx+4] al +
mov [ecx+8] eax +
mov byte ptr [ecx+5] 1 +
lea edi [ecx+0Ch] +
stos   +
stos   +
xor eax eax +
lea edi [ecx+14h] +
stos   +
stos   +
mov eax ecx +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push 3Ch  +
pop eax  +
push 3Eh  +
mov word ptr [ebp+var_8] ax +
pop eax  +
mov word ptr [ebp+var_8+2] ax +
xor eax eax +
push eax  +
push eax  +
push 4060h  +
push 3  +
push 7  +
push eax  +
push eax  +
mov [ebp+var_24] eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
push 40100080h  +
lea ecx [ebp+var_8] +
push offset dword_101D060  +
mov [ebp+var_4] (offset aAdnzsgZziDl+10h) +
mov [ebp+var_28] 18h +
mov [ebp+var_1C] 40h +
mov [ebp+var_20] ecx +
call ds:NtCreateFile  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx] 0 +
jz loc_1008173  +
push 0C00000E5h  +
call ds:RtlRaiseStatus  +
mov eax [ebp+arg_0] +
mov [ecx] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_1008194  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_1008194  +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
sub esp 0Ch +
cmp [ecx+8] eax +
jz locret_10081C8  +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_C] +
movs   +
movs   +
movs   +
mov [ecx+4] eax +
mov [ecx] eax +
mov [ecx+8] eax +
lea ecx [ebp+var_C] +
call sub_1017B83  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+8] 0 +
jz loc_10081E2  +
call sub_1017A30  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+4] 0 +
jz loc_10081FE  +
call sub_1016FC4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx]  +
push [ebp+arg_0]  +
call sub_1008065  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1008230  +
xor eax eax +
jmp loc_1008250  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100824A  +
push edi  +
call sub_1008118  +
pop ecx  +
test eax eax +
jz loc_100824F  +
mov [esi] eax +
mov [esi+4] edi +
jmp loc_100824F  +
mov eax offset word_1001532 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_C] +
movs   +
movs   +
xor eax eax +
movs   +
mov [ecx] eax +
mov [ecx+4] eax +
mov [ecx+8] eax +
lea eax [ebp+var_C] +
push eax  +
call sub_10081CF  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
mov [ebp+var_8] eax +
mov eax [ecx+4] +
mov [ebp+var_4] eax +
xor eax eax +
and [ecx+4] eax +
mov [ecx] ax +
mov [ecx+2] ax +
lea eax [ebp+var_8] +
push eax  +
call sub_10081EB  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
push ebx  +
push esi  +
push edi  +
push 2  +
mov edi eax +
mov eax [ebp+arg_0] +
pop ecx  +
cmp eax ecx +
mov [ebp+var_4] 0C00000E5h +
jge loc_10082E3  +
mov esi 3BBh +
mov edi offset aArgc2 +
jmp loc_1008545  +
and [ebp+var_C] 0 +
xor esi esi +
inc esi  +
dec eax  +
cmp eax esi +
jle loc_100845C  +
push 28h  +
mov [ebp+var_8] ecx +
pop ebx  +
push 22h  +
pop eax  +
mov [ebp+var_68] eax +
mov [ebp+var_40] eax +
mov eax [ebp+arg_4] +
mov ecx [eax+esi*4] +
lea edx [ebp+var_1C] +
mov [ebp+var_74] 10h +
mov [ebp+var_70] 12h +
mov [ebp+var_6C] offset aNoreboot +
mov [ebp+var_64] 24h +
mov [ebp+var_60] offset aSkip_critical_ +
mov [ebp+var_5C] ebx +
mov [ebp+var_58] 2Ah +
mov [ebp+var_54] offset aSkip_noncritic +
mov [ebp+var_50] 26h +
mov [ebp+var_4C] ebx +
mov [ebp+var_48] offset aCommit_critica +
mov [ebp+var_44] 20h +
mov [ebp+var_3C] offset aDisplay_progre +
mov [ebp+var_38] 2Ch +
mov [ebp+var_34] 2Eh +
mov [ebp+var_30] offset aIgnore_executi +
mov [ebp+var_2C] 16h +
mov [ebp+var_28] 18h +
mov [ebp+var_24] offset aTransaction +
call sub_1017696  +
test eax eax +
jl loc_1008534  +
cmp [ebp+var_1C] 0 +
jbe loc_1008478  +
mov eax [ebp+var_14] +
movzx eax word ptr [eax] +
cmp ax 2Dh +
jz loc_10083B5  +
cmp ax 2Fh +
jnz loc_1008487  +
add [ebp+var_14] 2 +
sub [ebp+var_1C] 2 +
sub [ebp+var_18] 2 +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_74] +
push eax  +
push 7  +
push offset loc_1019512  +
lea eax [ebp+var_1C] +
push eax  +
push 0  +
call sub_10171AC  +
test eax eax +
jl loc_1008534  +
mov eax [ebp+var_10] +
cmp eax 7 +
jnb loc_1008496  +
sub eax 0 +
jz loc_1008449  +
dec eax  +
jz loc_1008443  +
dec eax  +
jz loc_100843D  +
dec eax  +
jz loc_1008437  +
dec eax  +
jz loc_1008431  +
dec eax  +
jz loc_100842B  +
dec eax  +
jnz loc_100844C  +
cmp [ebp+var_C] eax +
jnz loc_10084A5  +
mov eax [ebp+arg_0] +
dec eax  +
cmp [ebp+var_8] eax +
jge loc_10084A5  +
mov eax [ebp+arg_4] +
inc esi  +
mov eax [eax+esi*4] +
inc [ebp+var_8]  +
mov [ebp+var_C] eax +
jmp loc_100844C  +
mov byte ptr [edi+5] 0 +
jmp loc_100844C  +
mov byte ptr [edi+4] 1 +
jmp loc_100844C  +
mov byte ptr [edi+3] 1 +
jmp loc_100844C  +
mov byte ptr [edi+2] 1 +
jmp loc_100844C  +
mov byte ptr [edi+1] 1 +
jmp loc_100844C  +
mov byte ptr [edi] 1 +
mov eax [ebp+arg_0] +
inc esi  +
inc [ebp+var_8]  +
dec eax  +
cmp esi eax +
jl loc_10082F9  +
mov al [edi+1] +
test al al +
jz loc_10084CA  +
cmp byte ptr [edi+2] 0 +
jz loc_10084B4  +
mov esi 3F1h +
mov edi offset aParametersFsta +
jmp loc_1008545  +
mov esi 3D3h +
mov edi offset aParam_length0 +
jmp loc_1008545  +
mov esi 3D4h +
mov edi offset aParam_buffer0P +
jmp loc_1008545  +
mov esi 3E3h +
mov edi offset aImatchSizeofSw +
jmp loc_1008545  +
mov esi 3EDh +
mov edi offset aPsztransaction +
jmp loc_1008545  +
test al al +
jz loc_10084CA  +
cmp byte ptr [edi+3] 0 +
jz loc_10084CA  +
mov esi 3F2h +
mov edi offset aParametersFs_0 +
jmp loc_1008545  +
mov eax [ebp+var_C] +
test eax eax +
jz loc_1008514  +
push 0Ah  +
lea ecx [ebp+var_C] +
push ecx  +
push eax  +
mov [ebp+var_C] eax +
call ds:_wcstoui64  +
mov ecx eax +
add esp 0Ch +
or ecx edx +
jz loc_100853B  +
mov ecx eax +
and ecx edx +
cmp ecx 0FFFFFFFFh +
jz loc_100853B  +
mov ecx [ebp+var_C] +
cmp word ptr [ecx] 0 +
jnz loc_100853B  +
test edx edx +
ja loc_1008505  +
cmp eax 0FFFFFFFFh +
jbe loc_1008511  +
mov esi 403h +
mov edi offset aI64handleUlong +
jmp loc_1008545  +
mov [edi+8] eax +
mov ebx [ebp+arg_4] +
push dword ptr [ebx]  +
mov esi ds:RtlInitUnicodeString +
lea eax [edi+0Ch] +
push eax  +
call esi  +
mov eax [ebp+arg_0] +
push dword ptr [ebx+eax*4-4]  +
add edi 14h +
push edi  +
call esi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov esi 3FDh +
mov edi offset aI64handle0I64h +
lea ecx [ebp+var_4] +
call sub_101705C  +
lea eax [ebp+var_20] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_20] offset aDW7rtmBaseWcpT +
mov [ebp+var_1C] offset aParsecommandli +
mov [ebp+var_18] esi +
mov [ebp+var_14] edi +
call sub_1008207  +
mov eax [ebp+var_4] +
jmp loc_1008534  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push 18h  +
pop ecx  +
push 40h  +
pop eax  +
mov [ebp+var_C] eax +
mov [ebp+var_24] eax +
xor ebx ebx +
lea eax [ebp+var_18] +
push eax  +
push 20019h  +
lea eax [ebp+arg_0] +
push eax  +
mov [esi] bl +
mov [ebp+var_18] ecx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] offset unk_101D008 +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_30] ecx +
mov [ebp+var_2C] ebx +
mov [ebp+var_28] offset unk_101D000 +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
call ds:NtOpenKey  +
test eax eax +
jl loc_10085DC  +
push [ebp+arg_0]  +
call ds:NtClose  +
jmp loc_10085F1  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call ds:NtLoadKey  +
cmp eax ebx +
jl loc_10085F3  +
mov byte ptr [esi] 1 +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_14] 0 +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+var_18] +
push eax  +
mov [ebp+var_18] 18h +
mov [ebp+var_C] 40h +
mov [ebp+var_10] offset unk_101D008 +
call ds:NtUnloadKey  +
test eax eax +
jl locret_1008637  +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push 18h  +
pop ecx  +
push 40h  +
pop eax  +
mov [ebp+var_C] eax +
mov [ebp+var_24] eax +
xor ebx ebx +
lea eax [ebp+var_18] +
push eax  +
push 20019h  +
lea eax [ebp+arg_0] +
push eax  +
mov [esi] bl +
mov [ebp+var_18] ecx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] offset unk_101D018 +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_30] ecx +
mov [ebp+var_2C] ebx +
mov [ebp+var_28] offset unk_101D010 +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
call ds:NtOpenKey  +
test eax eax +
jl loc_10086A3  +
push [ebp+arg_0]  +
call ds:NtClose  +
jmp loc_10086B8  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call ds:NtLoadKey  +
cmp eax ebx +
jl loc_10086BA  +
mov byte ptr [esi] 1 +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_14] 0 +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+var_18] +
push eax  +
mov [ebp+var_18] 18h +
mov [ebp+var_C] 40h +
mov [ebp+var_10] offset unk_101D018 +
call ds:NtUnloadKey  +
test eax eax +
jl locret_10086FE  +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov ecx [ebp+arg_0] +
push esi  +
call sub_1010BB6  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_18] +
push eax  +
push 1F003Fh  +
push [ebp+arg_0]  +
mov [ebp+var_18] 18h +
mov [ebp+var_14] esi +
mov [ebp+var_C] esi +
mov [ebp+var_10] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
call ds:NtCreateTransaction  +
cmp eax esi +
jl loc_100874D  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:NtCommitTransaction  +
test eax eax +
jge loc_100879C  +
mov [ebp+arg_4] eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+var_10] offset aDW7rtmBaseWcpT +
mov [ebp+var_C] offset aCommittransact +
mov [ebp+var_8] 4DDh +
mov [ebp+var_4] offset aNtcommittransa +
call sub_1008207  +
jmp loc_10087A0  +
and [ebp+arg_4] 0 +
mov eax [ebp+arg_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
lea eax [ebp+var_4] +
push eax  +
call ds:RtlLockBootStatusData  +
test eax eax +
jl loc_10087E7  +
push 0  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
push 4  +
push 0  +
push [ebp+var_4]  +
mov [ebp+var_8] 1 +
call ds:RtlGetSetBootStatusData  +
push [ebp+var_4]  +
call ds:RtlUnlockBootStatusData  +
push 1  +
call ds:NtShutdownSystem  +
test eax eax +
jge loc_1008820  +
mov [ebp+var_4] eax +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseWcpT +
mov [ebp+var_14] offset aInitiatereboot +
mov [ebp+var_10] 505h +
mov [ebp+var_C] offset aNtshutdownsyst +
call sub_1008207  +
jmp loc_1008824  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1008288  +
push esi  +
push [ebp+arg_0]  +
call sub_101736A  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push edi  +
xor eax eax +
mov edi esi +
stos   +
stos   +
mov eax [ecx] +
xor dl dl +
dec eax  +
pop edi  +
cmp eax 0Eh +
ja loc_10088E2  +
jmp ds:off_10088E6[eax*4]  +
mov ecx [ecx+4] +
add ecx 10h +
jmp loc_1008895  +
mov ecx [ecx+4] +
add ecx 0Ch +
jmp loc_1008895  +
mov ecx [ecx+4] +
add ecx 8 +
jmp loc_1008895  +
mov ecx [ecx+4] +
add ecx 4 +
jmp loc_1008897  +
mov ecx [ecx+4] +
add ecx 4 +
mov dl 1 +
test ecx ecx +
jz loc_10088E2  +
test dl dl +
jz loc_10088D8  +
lea edx [ebp+var_C] +
call sub_1017543  +
test eax eax +
jl locret_10088E4  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push 5Ch  +
push 0  +
push 0  +
lea eax [ebp+var_C] +
push eax  +
push 2  +
call sub_1017714  +
test eax eax +
jl locret_10088E4  +
mov edx esi +
lea ecx [ebp+var_18] +
call sub_10175BC  +
test eax eax +
jge loc_10088E2  +
leave   +
retn   +
mov eax [ecx] +
mov [esi] eax +
mov eax [ecx+4] +
mov [esi+4] eax +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
sub esp 90h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp ecx 0C0000043h +
jz loc_1008950  +
cmp ecx 0C0190001h +
jnz loc_1008B90  +
mov ecx [eax+4] +
dec ecx  +
cmp ecx 7 +
ja loc_1008B90  +
movzx ecx ds:byte_1008C3B[ecx] +
jmp ds:off_1008C2F[ecx*4]  +
lea ecx [eax+10h] +
jmp loc_10089D2  +
lea ecx [ebp+var_1C] +
push ecx  +
lea ecx [ebp+var_44] +
push ecx  +
push 2Ch  +
push esi  +
push esi  +
add eax 10h +
push eax  +
push 1  +
call sub_1017714  +
cmp eax esi +
jge loc_1008993  +
mov [ebp+arg_0] eax +
jmp loc_1008B93  +
lea ecx [ebp+var_44] +
jmp loc_10089DA  +
lea ecx [ebp+var_1C] +
push ecx  +
lea ecx [ebp+var_44] +
push ecx  +
push 2Ch  +
push esi  +
push esi  +
add eax 10h +
push eax  +
push 1  +
call sub_1017714  +
cmp eax esi +
jl loc_100898B  +
jmp loc_10089CA  +
mov eax [ebp+var_14] +
cmp word ptr [eax] 20h +
jnz loc_10089CF  +
sub [ebp+var_18] 2 +
sub [ebp+var_1C] 2 +
add [ebp+var_14] 2 +
cmp [ebp+var_1C] esi +
ja loc_10089B5  +
lea ecx [ebp+var_1C] +
cmp ecx esi +
jz loc_1008B90  +
lea edx [ebp+var_70] +
mov [ebp+var_4] esi +
call sub_10175BC  +
cmp eax esi +
jge loc_10089F1  +
mov [ebp+arg_0] eax +
jmp loc_1008BD3  +
push 4020h  +
lea eax [ebp+var_70] +
mov [ebp+var_60] eax +
push 7  +
lea eax [ebp+var_78] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push 100080h  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_68] 18h +
mov [ebp+var_64] esi +
mov [ebp+var_5C] 40h +
mov [ebp+var_58] esi +
mov [ebp+var_54] esi +
call ds:NtOpenFile  +
cmp eax esi +
jge loc_1008A42  +
mov edi 33Bh +
mov esi offset aNtopenfileFile +
mov [ebp+arg_0] eax +
jmp loc_1008C02  +
lea eax [ebp+var_28] +
push eax  +
mov edi 400h +
push edi  +
mov [ebp+var_24] esi +
mov [ebp+var_28] esi +
mov [ebp+var_20] esi +
call sub_1017FFD  +
cmp eax esi +
jge loc_1008A66  +
mov [ebp+arg_0] eax +
jmp loc_1008BCB  +
mov ebx [ebp+var_20] +
push 2Fh  +
push edi  +
push ebx  +
lea eax [ebp+var_78] +
push eax  +
push [ebp+var_4]  +
mov [ebp+var_38] ebx +
call ds:NtQueryInformationFile  +
cmp eax esi +
jge loc_1008A93  +
mov edi 352h +
mov esi offset aNtqueryinforma +
mov [ebp+arg_0] eax +
jmp loc_1008BFA  +
mov [ebp+var_C] esi +
cmp [ebx] esi +
jbe loc_1008B80  +
add ebx 4 +
mov [ebp+arg_0] ebx +
mov ebx ds:NtQueryInformationProcess +
xor eax eax +
mov [ebp+var_90] 18h +
lea edi [ebp+var_8C] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+var_50] eax +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_90] +
push eax  +
push 1000h  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] esi +
mov [ebp+var_4C] esi +
call ds:NtOpenProcess  +
cmp eax esi +
jl loc_1008B9D  +
lea eax [ebp+var_10] +
push eax  +
push esi  +
push esi  +
push 1Bh  +
push [ebp+var_8]  +
mov [ebp+var_30] esi +
mov [ebp+var_34] esi +
mov [ebp+var_2C] esi +
call ebx  +
cmp eax 80000005h +
jz loc_1008B20  +
cmp eax 0C0000023h +
jz loc_1008B20  +
cmp eax 0C0000004h +
jnz loc_1008BAC  +
lea eax [ebp+var_34] +
push eax  +
push [ebp+var_10]  +
call sub_1017FFD  +
cmp eax esi +
jl loc_1008BB8  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_10]  +
push [ebp+var_2C]  +
push 1Bh  +
push [ebp+var_8]  +
call ebx  +
cmp eax esi +
jl loc_1008BDD  +
mov eax [ebp+var_2C] +
cmp [eax] si +
jbe loc_1008B5B  +
push eax  +
call sub_1007EEF  +
lea ecx [ebp+var_34] +
call sub_100819D  +
lea ecx [ebp+var_8] +
call sub_1010BB6  +
inc [ebp+var_C]  +
mov eax [ebp+var_38] +
mov ecx [ebp+var_C] +
add [ebp+arg_0] 4 +
cmp ecx [eax] +
jb loc_1008AAA  +
lea ecx [ebp+var_28] +
call sub_100819D  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
mov [ebp+arg_0] esi +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov edi 367h +
mov esi offset aNtopenprocessP +
mov [ebp+arg_0] eax +
jmp loc_1008BF2  +
cmp eax esi +
jl loc_1008BB1  +
int 3  +
mov edi 37Ah +
jmp loc_1008BE7  +
lea ecx [ebp+var_34] +
mov [ebp+arg_0] eax +
call sub_100819D  +
lea ecx [ebp+var_8] +
call sub_1010BB6  +
lea ecx [ebp+var_28] +
call sub_100819D  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
jmp loc_1008B93  +
mov edi 385h +
mov esi offset aNtqueryinfor_0 +
lea ecx [ebp+var_34] +
mov [ebp+arg_0] eax +
call sub_100819D  +
lea ecx [ebp+var_8] +
call sub_1010BB6  +
lea ecx [ebp+var_28] +
call sub_100819D  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
lea eax [ebp+var_48] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_48] offset aDW7rtmBaseWcpT +
mov [ebp+var_44] offset aHandlefailure +
mov [ebp+var_40] edi +
mov [ebp+var_3C] esi +
call sub_1008207  +
jmp loc_1008B93  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
push edi  +
push 18h  +
mov edi [ebp+arg_0] +
pop ebx  +
xor esi esi +
push esi  +
push esi  +
push 60h  +
push 1  +
mov [ebp+var_24] ecx +
lea ecx [ebp+var_C] +
push ecx  +
lea ecx [ebp+var_2C] +
push ecx  +
push 120089h  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+4Ch]  +
mov [ebp+arg_0] esi +
push 1  +
mov [ebp+var_2C] ebx +
mov [ebp+var_28] esi +
mov [ebp+var_20] 40h +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
call dword ptr [eax+4]  +
cmp eax esi +
jge loc_1008C9E  +
mov edi eax +
jmp loc_1008D4C  +
push 5  +
push ebx  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_0]  +
call ds:NtQueryInformationFile  +
cmp eax esi +
jl loc_1008C97  +
cmp [ebp+var_38] esi +
jg loc_1008CDB  +
jl loc_1008CC2  +
cmp [ebp+var_3C] esi +
jnb loc_1008CCE  +
mov ebx 618h +
mov edi 0C00000E5h +
jmp loc_1008CE5  +
cmp [ebp+var_38] esi +
jl loc_1008D12  +
jg loc_1008CDB  +
cmp [ebp+var_3C] 0FFFFFFFFh +
jbe loc_1008D12  +
mov ebx 620h +
mov edi 0C000042Bh +
lea ecx [ebp+arg_0] +
mov [ebp+var_4] edi +
call sub_1010BB6  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseWcpT +
mov [ebp+var_10] offset aLoadxmlblob +
mov [ebp+var_C] ebx +
mov [ebp+var_8] esi +
call sub_1008207  +
jmp loc_1008D54  +
push edi  +
push [ebp+var_3C]  +
call sub_1017FFD  +
cmp eax esi +
jl loc_1008C97  +
mov eax [edi+4] +
mov ecx [edi+8] +
push esi  +
push esi  +
push eax  +
push ecx  +
lea eax [ebp+var_C] +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+arg_0]  +
call ds:NtReadFile  +
cmp eax esi +
jl loc_1008C97  +
mov eax [ebp+var_8] +
mov [edi] eax +
xor edi edi +
lea ecx [ebp+arg_0] +
call sub_1010BB6  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 420h +
mov eax dword_101D040 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
cmp dword_101D060 edi +
jz loc_1008EF6  +
mov eax [esi+4] +
dec eax  +
mov ecx offset word_1001532 +
mov [ebp+var_410] edi +
mov [ebp+var_40C] edi +
mov [ebp+var_408] edi +
cmp eax 0Eh +
ja loc_1008E18  +
jmp ds:off_1008F06[eax*4]  +
mov ecx offset aCopyfile +
jmp loc_1008E18  +
mov ecx offset aMovefile +
jmp loc_1008E18  +
mov ecx offset aDeletefile +
jmp loc_1008E18  +
mov ecx offset aHardlinkfile +
jmp loc_1008E18  +
mov ecx offset aWritefile +
jmp loc_1008E18  +
mov ecx offset aCreatefile +
jmp loc_1008E18  +
mov ecx offset aCreatedirector +
jmp loc_1008E18  +
mov ecx offset aSetfileinforma +
jmp loc_1008E18  +
mov ecx offset aCreatekey +
jmp loc_1008E18  +
mov ecx offset aDeletekey +
jmp loc_1008E18  +
mov ecx offset aSetkeyvalue +
jmp loc_1008E18  +
mov ecx offset aDeletekeyvalue +
jmp loc_1008E18  +
mov ecx offset aSetkeysecurity +
jmp loc_1008E18  +
mov ecx offset aBegintransacti +
jmp loc_1008E18  +
mov ecx offset aFlushfilebuffe +
push ebx  +
push ecx  +
push dword ptr [esi+8]  +
lea eax [ebp+var_404] +
push dword ptr [esi+0Ch]  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
push dword_101D05C  +
push dword_101D058  +
push offset aLlxLxLxIxLxS  +
push 400h  +
push eax  +
call sprintf_s  +
add esp 28h +
lea ecx [esi+10h] +
lea edx [ebp+var_410] +
mov ebx eax +
call sub_1017A3A  +
or eax 0FFFFFFFFh +
cmp [ebp+var_410] eax +
jbe loc_1008E6B  +
mov [ebp+var_410] eax +
mov [ebp+var_418] eax +
mov [ebp+var_414] eax +
cmp ebx eax +
jz loc_1008EEA  +
mov esi ds:NtWriteFile +
push edi  +
lea eax [ebp+var_418] +
push eax  +
push ebx  +
lea eax [ebp+var_404] +
push eax  +
lea eax [ebp+var_420] +
push eax  +
push edi  +
push edi  +
push edi  +
push dword_101D060  +
call esi  +
push edi  +
lea eax [ebp+var_418] +
push eax  +
push [ebp+var_410]  +
lea eax [ebp+var_420] +
push [ebp+var_408]  +
push eax  +
push edi  +
push edi  +
push edi  +
push dword_101D060  +
call esi  +
push edi  +
lea eax [ebp+var_418] +
push eax  +
push 2  +
push offset asc_1001A6C  +
lea eax [ebp+var_420] +
push eax  +
push edi  +
push edi  +
push edi  +
push dword_101D060  +
call esi  +
lea ecx [ebp+var_410] +
call sub_100825A  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100C515  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_8]  +
lea eax [ebp+var_1C] +
push 4  +
push ebx  +
push ebx  +
push eax  +
push 2001Fh  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_4] ebx +
push ebx  +
mov [ebp+var_1C] 18h +
mov [ebp+var_18] ebx +
mov [ebp+var_10] 40h +
mov [ebp+var_14] offset a8 +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
call dword ptr [esi+2Ch]  +
cmp eax ebx +
jl loc_1008FCA  +
push ebx  +
cmp [ebp+arg_4] bl +
jz loc_1008FB7  +
push ebx  +
push ebx  +
push 3  +
push ebx  +
push offset dword_10011DC  +
push [ebp+var_4]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+3Ch]  +
jmp loc_1008FC6  +
push offset dword_10011DC  +
push [ebp+var_4]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+40h]  +
cmp eax ebx +
jge loc_1008FCC  +
mov ebx eax +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0D8h +
mov eax dword_101D040 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_1009008  +
mov dword_101DE6C eax +
cmp ecx edi +
jz loc_1009012  +
mov dword_101DE68 ecx +
cmp dword_101DE6C edi +
jz loc_1009351  +
cmp dword_101DE68 edi +
jz loc_1009351  +
cmp eax edi +
jz loc_1009035  +
inc dword ptr [eax+8]  +
jmp loc_1009035  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_1009033  +
mov eax ds:7FFE0004h +
mul  edx +
push ebx  +
shrd eax edx +
push esi  +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov ebx edx +
mul  ecx +
push edi  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
mov eax dword_101DE6C +
adc ebx edx +
cmp byte ptr [eax] 0 +
mov [ebp+var_C0] esi +
mov [ebp+var_BC] ebx +
jz loc_100934F  +
mov ecx [eax+8] +
cmp ecx 1 +
jz loc_10090B4  +
cmp ecx [eax+4] +
jz loc_10090B4  +
sub esi [eax+10h] +
sbb ebx [eax+14h] +
mov [ebp+var_AC] ebx +
jnz loc_10090B4  +
cmp esi 64h +
jb loc_100934F  +
push edi  +
push dword ptr [eax+4]  +
push edi  +
push ecx  +
call sub_1010B3B  +
mov ecx dword_101DE68 +
xor eax eax +
lea esi [ebp+var_D8] +
mov word ptr [ebp+var_A4] ax +
mov word ptr [ebp+var_A4+2] ax +
mov [ebp+var_A0] edi +
call sub_100884E  +
test eax eax +
jl loc_1009344  +
mov eax [ebp+var_D8] +
movzx ecx ax +
mov edx 0FFFFh +
sub edx ecx +
lea ecx [ebp+var_A4] +
cmp edx 2 +
jb loc_100934A  +
add eax 2 +
push eax  +
call sub_100882E  +
test eax eax +
jl loc_1009344  +
mov eax esi +
push eax  +
lea eax [ebp+var_A4] +
push eax  +
call ds:RtlCopyUnicodeString  +
movzx eax word ptr [ebp+var_A4] +
mov edx [ebp+var_A0] +
shr eax 1 +
xor ecx ecx +
mov [edx+eax*2] cx +
cmp word ptr [ebp+var_A4] di +
jbe loc_1009344  +
mov eax [ebp+arg_0] +
sub eax edi +
mov [ebp+var_AC] edi +
jz loc_1009175  +
dec eax  +
jz loc_100916E  +
dec eax  +
jnz loc_1009344  +
mov ecx 0C0000003h +
jmp loc_100917A  +
mov ecx 0C0000002h +
jmp loc_100917A  +
mov ecx 40000001h +
mov eax large fs:18h +
lea edx [ebp+var_A8] +
push edx  +
push ecx  +
push edi  +
mov [ebp+var_A8] edi +
mov eax [eax+30h] +
push 0Bh  +
push dword ptr [eax+8]  +
call ds:RtlFindMessage  +
test eax eax +
jl loc_1009344  +
mov ecx [ebp+var_A8] +
test byte ptr [ecx+2] 1 +
jz loc_1009344  +
mov eax dword_101DE6C +
mov edx [eax+8] +
mov esi ds:RtlFormatMessage +
mov [ebp+var_D0] edx +
mov eax [eax+4] +
mov [ebp+var_CC] eax +
mov eax [ebp+var_A0] +
mov [ebp+var_C8] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_C4] eax +
lea eax [ebp+var_AC] +
push eax  +
mov ebx 96h +
push ebx  +
lea eax [ebp+var_9C] +
push eax  +
lea eax [ebp+var_D0] +
push eax  +
push 1  +
push edi  +
push edi  +
push edi  +
add ecx 4 +
push ecx  +
call esi  +
mov edi 80000005h +
jmp loc_10092BB  +
cmp word ptr [ebp+var_A4] 10h +
jb loc_1009344  +
shr word ptr [ebp+var_A4] 1 +
movzx eax word ptr [ebp+var_A4] +
movzx ecx word ptr [ebp+var_A4+2] +
sub ecx eax +
cmp ecx 8 +
jb loc_1009344  +
mov edx [ebp+var_A0] +
shr eax 1 +
push 2Eh  +
pop ecx  +
mov [edx+eax*2] cx +
movzx eax word ptr [ebp+var_A4] +
mov edx [ebp+var_A0] +
shr eax 1 +
mov [edx+eax*2+2] cx +
movzx eax word ptr [ebp+var_A4] +
mov edx [ebp+var_A0] +
shr eax 1 +
mov [edx+eax*2+4] cx +
movzx eax word ptr [ebp+var_A4] +
mov edx [ebp+var_A0] +
shr eax 1 +
xor ecx ecx +
mov [edx+eax*2+6] cx +
lea eax [ebp+var_AC] +
push eax  +
push ebx  +
lea eax [ebp+var_9C] +
push eax  +
lea eax [ebp+var_D0] +
push eax  +
xor eax eax +
push 1  +
push eax  +
push eax  +
push eax  +
mov eax [ebp+var_A8] +
add eax 4 +
push eax  +
call esi  +
cmp eax edi +
jz loc_1009217  +
test eax eax +
jl loc_1009344  +
cmp [ebp+var_AC] 2 +
jb loc_10092D7  +
sub [ebp+var_AC] 2 +
lea eax [ebp+var_9C] +
mov [ebp+var_B4] eax +
mov eax [ebp+var_AC] +
mov word ptr [ebp+var_B8] ax +
movzx eax ax +
mov ecx 98h +
mov word ptr [ebp+var_B8+2] cx +
shr eax 1 +
xor ecx ecx +
mov word ptr [ebp+eax*2+var_9C] cx +
lea eax [ebp+var_B8] +
push eax  +
call ds:NtDrawText  +
test eax eax +
jge loc_100932D  +
lea eax [ebp+var_B8] +
push eax  +
call ds:NtDisplayString  +
test eax eax +
jl loc_1009344  +
mov eax dword_101DE6C +
mov ecx [ebp+var_C0] +
mov [eax+10h] ecx +
mov ecx [ebp+var_BC] +
mov [eax+14h] ecx +
lea ecx [ebp+var_A4] +
call sub_1008288  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100C515  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push edi  +
lea eax [ebp+var_4] +
push eax  +
xor edi edi +
push 20h  +
push 0FFFFFFFFh  +
mov [ebp+var_4] edi +
mov [ebp+var_14] edi +
mov [ebp+var_10] edi +
call ds:NtOpenProcessToken  +
cmp eax edi +
jge loc_100939B  +
lea ecx [ebp+var_4] +
mov [ebp+var_8] eax +
call sub_1010BB6  +
jmp loc_1009492  +
push ebx  +
push esi  +
push 4Ch  +
lea ecx [ebp+var_14] +
call sub_100821F  +
test eax eax +
jnz loc_10093CC  +
mov ebx 426h +
mov [ebp+var_C] offset aRgbtokenprivil +
mov [ebp+var_8] 0C0000017h +
cmp [ebp+var_14] edi +
jz loc_1009451  +
push [ebp+var_14]  +
jmp loc_100944B  +
mov esi [ebp+var_14] +
push 13h  +
pop eax  +
push 2  +
xor ecx ecx +
mov [esi+4] eax +
pop eax  +
push 11h  +
mov [esi+8] ecx +
pop ecx  +
push 12h  +
mov [esi+10h] ecx +
pop ecx  +
push 8  +
mov [esi+1Ch] ecx +
pop ecx  +
push 14h  +
mov [esi+28h] ecx +
pop ecx  +
push edi  +
push edi  +
push edi  +
xor edx edx +
push esi  +
push edi  +
mov dword ptr [esi] 5 +
mov [esi+0Ch] eax +
mov [esi+14h] edx +
mov [esi+18h] eax +
mov [esi+20h] edx +
mov [esi+24h] eax +
mov [esi+2Ch] edx +
mov [esi+30h] eax +
mov [esi+34h] ecx +
mov [esi+38h] edx +
mov [esi+3Ch] eax +
push [ebp+var_4]  +
call ds:NtAdjustPrivilegesToken  +
cmp eax edi +
jge loc_1009434  +
mov ebx 445h +
mov [ebp+var_8] eax +
jmp loc_1009447  +
cmp eax 106h +
jnz loc_100947E  +
mov ebx 449h +
mov [ebp+var_8] 0C0000061h +
push esi  +
mov [ebp+var_C] edi +
call sub_100813B  +
pop ecx  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
mov eax [ebp+var_C] +
mov [ebp+var_10] eax +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_1C] offset aDW7rtmBaseWcpT +
mov [ebp+var_18] offset aEnableprivileg +
mov [ebp+var_14] ebx +
call sub_1008207  +
jmp loc_1009490  +
push esi  +
mov [ebp+var_8] edi +
call sub_100813B  +
pop ecx  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
pop esi  +
pop ebx  +
mov eax [ebp+var_8] +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push 4  +
push edi  +
push edi  +
lea eax [ebp+var_40] +
push eax  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] edi +
mov [ebp+var_40] 18h +
mov [ebp+var_3C] edi +
mov [ebp+var_34] 40h +
mov [ebp+var_38] offset a02 +
mov [ebp+var_30] edi +
mov [ebp+var_2C] edi +
call ds:NtCreateKey  +
cmp eax edi +
jge loc_10094F6  +
mov esi 532h +
mov edi offset aNtcreatekeyKey +
mov [ebp+var_8] eax +
jmp loc_1009609  +
push [ebp+var_4]  +
call ds:NtFlushKey  +
cmp eax edi +
lea ecx [ebp+var_4] +
jge loc_1009518  +
mov esi 534h +
mov edi offset aNtflushkeyKey +
mov [ebp+var_8] eax +
jmp loc_100960C  +
call sub_1010BB6  +
mov esi ds:RtlExpandEnvironmentStrings_U +
xor eax eax +
mov word ptr [ebp+var_18] ax +
mov word ptr [ebp+var_18+2] ax +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
mov ebx offset asc_100129C +
push ebx  +
push edi  +
mov [ebp+var_14] edi +
call esi  +
cmp eax 0C0000023h +
jz loc_100955A  +
cmp eax edi +
jl loc_100954D  +
int 3  +
mov esi 548h +
mov [ebp+var_8] eax +
jmp loc_1009601  +
cmp [ebp+var_10] 0FFFFh +
lea ecx [ebp+var_18] +
jbe loc_1009577  +
mov esi 54Bh +
mov [ebp+var_8] 0C0000039h +
jmp loc_1009604  +
push [ebp+var_10]  +
call sub_100882E  +
cmp eax edi +
jge loc_100958B  +
mov [ebp+var_8] eax +
jmp loc_100963E  +
push edi  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
push edi  +
call esi  +
cmp eax edi +
jge loc_10095A4  +
mov esi 554h +
mov edi offset aRtlexpandenvir +
jmp loc_1009552  +
push 4020h  +
lea eax [ebp+var_18] +
mov [ebp+var_38] eax +
push 7  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push 100002h  +
lea eax [ebp+var_C] +
push eax  +
mov [ebp+var_C] edi +
call ds:NtOpenFile  +
cmp eax edi +
jge loc_10095DB  +
mov esi 565h +
mov edi offset aNtopenfileBoot +
jmp loc_10095F6  +
lea eax [ebp+var_20] +
push eax  +
push [ebp+var_C]  +
call ds:NtFlushBuffersFile  +
cmp eax edi +
jge loc_1009633  +
mov esi 567h +
mov edi offset aNtflushbuffers +
lea ecx [ebp+var_C] +
mov [ebp+var_8] eax +
call sub_1010BB6  +
lea ecx [ebp+var_18] +
call sub_1008288  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
lea eax [ebp+var_28] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_28] offset aDW7rtmBaseWcpT +
mov [ebp+var_24] offset aCheckpointflus +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
call sub_1008207  +
jmp loc_100964E  +
lea ecx [ebp+var_C] +
mov [ebp+var_8] edi +
call sub_1010BB6  +
lea ecx [ebp+var_18] +
call sub_1008288  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
push ebx  +
mov ebx [ebp+8] +
mov ecx [ebx+4] +
push esi  +
lea eax [ebp-9Ch] +
push eax  +
call sub_100BFD7  +
mov eax [ebx] +
cmp byte ptr [eax+5] 0 +
jz loc_10096A0  +
mov eax [ebx+8] +
push dword ptr [eax]  +
lea eax [ebp-9Ch] +
push 3  +
push eax  +
call sub_1009F03  +
test eax eax +
jge loc_10096A0  +
mov esi eax +
jmp loc_1009830  +
mov ecx [ebx] +
cmp byte ptr [ecx+3] 0 +
push edi  +
jz loc_1009804  +
xor edx edx +
mov [ebp-4Ch] edx +
xor eax eax +
lea edi [ebp-48h] +
stos   +
stos   +
mov esi offset asc_1001328 +
lea edi [ebp-40h] +
movs   +
movs   +
movs   +
mov [ebp-34h] edx +
xor eax eax +
lea edi [ebp-30h] +
stos   +
stos   +
mov esi offset dword_1001170 +
lea edi [ebp-28h] +
movs   +
movs   +
mov [ebp-0Ch] edx +
mov [ebp-8] edx +
mov [ebp-4] edx +
add ecx 0Ch +
lea edx [ebp-4Ch] +
movs   +
call sub_1017543  +
xor edi edi +
cmp eax edi +
jl loc_1009744  +
mov ecx [ebx] +
add ecx 14h +
lea edx [ebp-34h] +
call sub_1017543  +
cmp eax edi +
jl loc_1009744  +
lea eax [ebp-0Ch] +
push eax  +
lea eax [ebp-4Ch] +
push eax  +
push 4  +
push edi  +
call sub_10178E0  +
cmp eax edi +
lea ecx [ebp-0Ch] +
jge loc_100971F  +
mov esi eax +
jmp loc_1009779  +
lea edx [ebp-1Ch] +
call sub_10175BC  +
cmp eax edi +
jl loc_1009744  +
mov eax [ebx+8] +
push dword ptr [eax]  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-9Ch] +
push eax  +
call sub_1009FB0  +
cmp eax edi +
jge loc_1009748  +
mov esi eax +
jmp loc_1009776  +
mov eax [ebx+8] +
cmp [eax] edi +
jz loc_10097F2  +
mov [ebp+8] edi +
call sub_100949D  +
cmp eax edi +
jl loc_100976C  +
lea eax [ebp+8] +
push eax  +
call sub_1008705  +
cmp eax edi +
jge loc_1009783  +
lea ecx [ebp+8] +
mov esi eax +
call sub_1010BB6  +
lea ecx [ebp-0Ch] +
call sub_100825A  +
jmp loc_100982F  +
mov eax [ebx+8] +
push 1  +
push dword ptr [eax]  +
call sub_1008757  +
cmp eax edi +
jge loc_10097D2  +
mov esi eax +
lea ecx [ebp+8] +
mov [ebp-14h] esi +
call sub_1010BB6  +
lea ecx [ebp-0Ch] +
call sub_100825A  +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-10h] offset aDW7rtmBaseWcpT +
mov dword ptr [ebp-0Ch] offset aHandlecheckpoi +
mov dword ptr [ebp-8] 5B1h +
mov dword ptr [ebp-4] offset aCommittransa_0 +
call sub_1008207  +
jmp loc_100982F  +
mov eax [ebp+8] +
mov ecx [ebx+8] +
mov [ebp+8] edi +
mov [ecx] eax +
mov eax [ebx+8] +
push dword ptr [eax]  +
mov ecx [ebx+4] +
call sub_100A49A  +
lea ecx [ebp+8] +
call sub_1010BB6  +
push offset aCriticalpoqcom  +
call sub_1007E83  +
lea ecx [ebp-0Ch] +
call sub_100825A  +
mov eax [ebx] +
cmp byte ptr [eax+5] 0 +
jz loc_100982D  +
cmp byte ptr [eax+2] 0 +
jnz loc_100982D  +
mov eax [ebx+8] +
push dword ptr [eax]  +
lea eax [ebp-9Ch] +
push 4  +
push eax  +
call sub_1009F03  +
test eax eax +
jge loc_100982D  +
mov esi eax +
jmp loc_100982F  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] cl +
mov [eax+1] cl +
mov [eax+2] cl +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
xor edx edx +
mov [eax+10h] dx +
mov [eax+12h] dx +
mov [eax+14h] ecx +
mov [eax+18h] cl +
mov [eax+1Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:RtlSetHeapInformation  +
lea ecx [ebp+var_48] +
call sub_1008083  +
lea ecx [ebp+var_18] +
mov [ebp+var_C] ebx +
mov [ebp+var_58] ebx +
mov [ebp+var_5C] ebx +
mov [ebp+var_54] ebx +
call sub_100A478  +
lea ecx [ebp+var_C0] +
call sub_100983D  +
xor eax eax +
mov [ebp+var_50] ebx +
lea edi [ebp+var_4C] +
stos   +
mov [ebp+var_28] ebx +
lea edi [ebp+var_24] +
stos   +
stos   +
stos   +
xor eax eax +
push 6  +
pop ecx  +
mov byte ptr [ebp+var_A0] bl +
mov [ebp+var_88] ebx +
lea edi [ebp+var_84] +
stos   +
lea edi [ebp+var_9C] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov [ebp+var_6C] ebx +
xor eax eax +
lea edi [ebp+var_68] +
stos   +
push offset dword_101D058  +
stos   +
mov [ebp+var_1] bl +
mov [ebp+var_2] bl +
mov [ebp+var_3] bl +
mov [ebp+var_5] bl +
mov [ebp+var_4] bl +
call ds:NtQuerySystemTime  +
call sub_1009365  +
mov edi eax +
cmp edi ebx +
jge loc_1009929  +
push edi  +
push offset aPoqexec_exeUna  +
push ebx  +
push 33h  +
call ds:DbgPrintEx  +
add esp 10h +
jmp loc_1009E19  +
push [ebp+arg_4]  +
lea eax [ebp+var_48] +
push [ebp+arg_0]  +
call sub_10082B6  +
mov edi eax +
cmp edi ebx +
jge loc_1009964  +
push edi  +
push offset aPoqexec_exeErr  +
push ebx  +
push 33h  +
call ds:DbgPrintEx  +
add esp 10h +
push offset aParsecommandli  +
push edi  +
push 667h  +
call sub_1007E15  +
jmp loc_1009E19  +
cmp byte ptr [ebp+var_48+1] bl +
jz loc_1009973  +
push 1  +
lea ecx [ebp+var_18] +
call sub_100A487  +
lea eax [ebp+var_110] +
push eax  +
lea ecx [ebp+var_18] +
call sub_100BFD7  +
lea eax [ebp+var_3] +
push eax  +
call sub_100863E  +
mov edi eax +
cmp edi ebx +
jge loc_10099A8  +
push edi  +
push offset aPoqexec_exeU_0  +
push ebx  +
push 33h  +
call ds:DbgPrintEx  +
add esp 10h +
jmp loc_1009E0F  +
push ebx  +
push 1  +
lea eax [ebp+var_110] +
push eax  +
call sub_1008F47  +
cmp eax ebx +
mov esi ds:DbgPrintEx +
jge loc_10099CF  +
push eax  +
push offset aPoqexec_exeU_1  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
call sub_10080B0  +
mov edi eax +
cmp edi ebx +
jge loc_10099E7  +
push edi  +
push offset aPoqexec_exeU_2  +
push ebx  +
push 33h  +
call esi  +
jmp loc_10099A0  +
push offset aStarttime  +
call sub_1007E83  +
lea eax [ebp+var_5] +
push eax  +
call sub_1008577  +
mov edi eax +
cmp edi ebx +
jge loc_1009A1E  +
push edi  +
push offset aPoqexec_exeU_3  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
push offset aMountschemahiv  +
push edi  +
push 6A2h  +
jmp loc_1009E00  +
lea eax [ebp+var_5C] +
push eax  +
lea ecx [ebp+var_34] +
lea eax [ebp+var_110] +
call sub_1008C48  +
mov edi eax +
cmp edi ebx +
jge loc_1009A57  +
push edi  +
push [ebp+var_30]  +
push offset aPoqexec_exeU_4  +
push ebx  +
push 33h  +
call esi  +
add esp 14h +
push offset aLoadxml  +
push edi  +
push 6B1h  +
jmp loc_1009E00  +
lea eax [ebp+var_5C] +
push eax  +
lea ecx [ebp+var_C0] +
call sub_100C06F  +
mov edi eax +
cmp edi ebx +
jge loc_1009A8A  +
push edi  +
push offset aPoqexec_exeE_0  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
push offset aInitializetxfl  +
push edi  +
push 6BFh  +
jmp loc_1009E00  +
lea ecx [ebp+var_C0] +
call sub_100C380  +
mov edi eax +
cmp edi ebx +
jge loc_1009AB9  +
push edi  +
push offset aPoqexec_exeE_1  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
push offset aExpandtxflog  +
push edi  +
push 6CDh  +
jmp loc_1009E00  +
cmp [ebp+var_40] ebx +
jz loc_1009B07  +
push [ebp+var_40]  +
lea ecx [ebp+var_C] +
call sub_100815E  +
push [ebp+var_C]  +
lea ecx [ebp+var_18] +
call sub_100A49A  +
lea eax [ebp+var_60] +
push eax  +
lea ecx [ebp+var_C0] +
call sub_100C209  +
mov edi eax +
cmp edi ebx +
jge loc_1009B34  +
push edi  +
push offset aPoqexec_exeE_2  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
push offset aGetoperationco  +
push edi  +
push 6F4h  +
jmp loc_1009E00  +
lea eax [ebp+var_C] +
push eax  +
call sub_1008705  +
mov edi eax +
cmp edi ebx +
jge loc_1009AC9  +
push edi  +
push offset aPoqexec_exeU_5  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
push offset aBegintransacti  +
push edi  +
push 6E1h  +
jmp loc_1009E00  +
push [ebp+var_C]  +
mov eax [ebp+arg_4] +
push [ebp+var_30]  +
push dword ptr [eax]  +
lea eax [ebp+var_110] +
push eax  +
call sub_100A1D4  +
mov edi eax +
cmp edi ebx +
jge loc_1009B70  +
push edi  +
push offset aPoqexec_exeU_6  +
push 1  +
push 33h  +
call esi  +
add esp 10h +
push offset aDeletefromsetu  +
push edi  +
push 703h  +
jmp loc_1009E00  +
cmp [ebp+var_43] bl +
jz loc_1009BAB  +
push [ebp+var_C]  +
lea eax [ebp+var_110] +
push 2  +
push eax  +
call sub_1009F03  +
mov edi eax +
cmp edi ebx +
jge loc_1009BAB  +
push edi  +
push offset aPoqexec_exeU_7  +
push 1  +
push 33h  +
call esi  +
add esp 10h +
push offset aSetstoreexecut  +
push edi  +
push 718h  +
jmp loc_1009E00  +
mov al [ebp+var_44] +
mov byte ptr [ebp+var_A0] al +
mov eax [ebp+var_60] +
mov [ebp+var_9C] eax +
lea eax [ebp+var_A0] +
mov [ebp+var_50] eax +
lea eax [ebp+var_48] +
mov [ebp+var_6C] eax +
lea eax [ebp+var_18] +
mov [ebp+var_68] eax +
lea eax [ebp+var_20] +
mov [ebp+var_64] eax +
lea eax [ebp+var_6C] +
mov [ebp+var_24] eax +
mov eax [ebp+var_C] +
push 2  +
mov [ebp+var_20] eax +
pop eax  +
mov [ebp+var_98] ebx +
mov [ebp+var_4C] offset sub_1008FE1 +
mov [ebp+var_28] offset loc_100965B +
mov [ebp+var_10] eax +
cmp byte ptr [ebp+var_48+1] bl +
jz loc_1009C0A  +
mov [ebp+var_10] 6 +
cmp byte ptr [ebp+var_48+2] bl +
jz loc_1009C13  +
or [ebp+var_10] 8 +
lea ecx [ebp+var_2C] +
push ecx  +
lea ecx [ebp+var_88] +
push ecx  +
lea ecx [ebp+var_28] +
push ecx  +
lea ecx [ebp+var_50] +
push ecx  +
lea ecx [ebp+var_110] +
push ecx  +
push offset loc_1008054  +
push offset off_100145C  +
push eax  +
lea eax [ebp+var_5C] +
push eax  +
push [ebp+var_10]  +
call sub_100E89B  +
mov edi eax +
cmp edi ebx +
jl loc_1009DBB  +
cmp [ebp+var_88] ebx +
jl loc_1009DBB  +
cmp byte_101D064 bl +
jz loc_1009C66  +
mov [ebp+var_1] 1 +
test byte ptr [ebp+var_2C] 1 +
jz loc_1009C70  +
mov [ebp+var_1] 1 +
test byte ptr [ebp+var_2C] 4 +
jz loc_1009C7A  +
mov [ebp+var_2] 1 +
cmp byte ptr [ebp+var_48+2] bl +
jnz loc_1009CBB  +
push [ebp+var_20]  +
mov eax [ebp+arg_4] +
push [ebp+var_30]  +
push dword ptr [eax]  +
lea eax [ebp+var_110] +
push eax  +
call sub_100A1D4  +
mov edi eax +
cmp edi ebx +
jge loc_1009CBB  +
push edi  +
push offset aPoqexec_exeU_6  +
push 1  +
push 33h  +
call esi  +
add esp 10h +
push offset aDeletefromsetu  +
push edi  +
push 76Eh  +
jmp loc_1009E00  +
cmp [ebp+var_43] bl +
jz loc_1009CFB  +
cmp byte ptr [ebp+var_48+2] bl +
jnz loc_1009CFB  +
push [ebp+var_20]  +
lea eax [ebp+var_110] +
push 5  +
push eax  +
call sub_1009F03  +
mov edi eax +
cmp edi ebx +
jge loc_1009CFB  +
push edi  +
push offset aPoqexec_exeU_8  +
push 1  +
push 33h  +
call esi  +
add esp 10h +
push offset aSetstoreexec_0  +
push edi  +
push 784h  +
jmp loc_1009E00  +
push [ebp+var_20]  +
lea eax [ebp+var_110] +
push ebx  +
push eax  +
call sub_1008F47  +
cmp eax ebx +
jge loc_1009D1D  +
push eax  +
push offset aPoqexec_exeU_9  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
test byte ptr [ebp+var_10] 8 +
jnz loc_1009D4C  +
call sub_100949D  +
mov edi eax +
cmp edi ebx +
jge loc_1009D4C  +
push edi  +
push offset aPoqexec_exe_10  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
push offset aFlushdata  +
push edi  +
push 7A3h  +
jmp loc_1009E00  +
push 1  +
push [ebp+var_20]  +
call sub_1008757  +
mov edi eax +
cmp edi ebx +
jge loc_1009D7A  +
push edi  +
push offset aPoqexec_exe_11  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
push offset aCommittransact  +
push edi  +
push 7B3h  +
jmp loc_1009E00  +
push ebx  +
lea ecx [ebp+var_18] +
call sub_100A49A  +
push offset aEndtime  +
call sub_1007E83  +
mov [ebp+var_4] 1 +
cmp [ebp+var_1] bl +
jz loc_1009E05  +
cmp [ebp+var_2] bl +
jnz loc_1009E05  +
cmp byte ptr [ebp+var_48] bl +
jnz loc_1009E05  +
call sub_10087AC  +
mov edi eax +
cmp edi ebx +
jge loc_1009E05  +
push edi  +
push offset aPoqexec_exeCou  +
push ebx  +
push 33h  +
call esi  +
add esp 10h +
jmp loc_1009E05  +
push edi  +
push [ebp+var_7C]  +
push offset aPoqexec_exePoq  +
push ebx  +
push 33h  +
call esi  +
add esp 14h +
cmp edi ebx +
jl loc_1009DF5  +
lea eax [ebp+var_88] +
push eax  +
push 74Ch  +
call sub_1008D62  +
mov edi [ebp+var_88] +
lea eax [ebp+var_88] +
push eax  +
call sub_1008927  +
jmp loc_1009E05  +
push offset aRunprimitiveop  +
push edi  +
push 753h  +
call sub_1007E15  +
cmp [ebp+var_5] bl +
jz loc_1009E0F  +
call sub_10085FE  +
cmp [ebp+var_3] bl +
jz loc_1009E19  +
call sub_10086C5  +
cmp [ebp+var_70] ebx +
jz loc_1009E26  +
lea ecx [ebp+var_78] +
call sub_1017A30  +
cmp edi ebx +
jl loc_1009E4B  +
cmp [ebp+var_1] bl +
jz loc_1009E47  +
cmp byte ptr [ebp+var_48] bl +
jnz loc_1009E40  +
cmp [ebp+var_2] bl +
jnz loc_1009E40  +
mov esi 669h +
jmp loc_1009E6D  +
mov esi 0BC2h +
jmp loc_1009E6D  +
xor esi esi +
jmp loc_1009E6D  +
lea eax [ebp+var_34] +
push eax  +
call sub_1007F64  +
push edi  +
call ds:RtlNtStatusToDosError  +
mov esi eax +
cmp [ebp+var_1C] bl +
jz loc_1009E6D  +
cmp byte ptr [ebp+var_48+3] bl +
jz loc_1009E6D  +
or esi 10000h +
cmp [ebp+var_4] bl +
jnz loc_1009E7C  +
push offset aEndtime  +
call sub_1007E83  +
mov eax dword_101D060 +
cmp eax ebx +
jz loc_1009E8C  +
push eax  +
call ds:NtClose  +
lea ecx [ebp+var_C0] +
call sub_100C1EB  +
lea ecx [ebp+var_5C] +
call sub_100819D  +
lea ecx [ebp+var_C] +
call sub_1010BB6  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
mov ecx edx +
mov eax edi +
cmp [edx] bx +
jz loc_1009EC8  +
inc ecx  +
inc ecx  +
cmp [ecx] bx +
jnz loc_1009EC1  +
cmp [edi] bx +
jz loc_1009EE2  +
inc eax  +
inc eax  +
cmp [eax] bx +
jnz loc_1009ECD  +
jmp loc_1009EE2  +
cmp ecx edx +
jbe loc_1009EEA  +
cmp eax edi +
jbe loc_1009EEA  +
dec ecx  +
dec ecx  +
dec eax  +
dec eax  +
mov bx [ecx] +
cmp bx [eax] +
jz loc_1009ED6  +
pop ebx  +
cmp eax edi +
jnz loc_1009EFB  +
mov cx [ecx] +
cmp cx [eax] +
jnz loc_1009EFB  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
push edi  +
push 38h  +
pop eax  +
push 3Ah  +
mov word ptr [ebp+var_C] ax +
pop eax  +
push 1Ch  +
mov word ptr [ebp+var_C+2] ax +
pop eax  +
push 1Eh  +
mov esi [ebp+arg_0] +
mov word ptr [ebp+var_14] ax +
pop eax  +
xor edi edi +
push edi  +
mov word ptr [ebp+var_14+2] ax +
lea eax [ebp+var_C] +
mov [ebp+var_24] eax +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_8]  +
lea eax [ebp+var_2C] +
push 4  +
push edi  +
push edi  +
push eax  +
push 2  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_4] edi +
push edi  +
mov [ebp+var_8] offset aRegistryMachin +
mov [ebp+var_10] offset aExecutionstate +
mov [ebp+var_2C] 18h +
mov [ebp+var_28] edi +
mov [ebp+var_20] 40h +
mov [ebp+var_1C] edi +
mov [ebp+var_18] edi +
call dword ptr [esi+2Ch]  +
cmp eax edi +
jl loc_1009F99  +
push edi  +
push 4  +
lea eax [ebp+arg_4] +
push eax  +
push 4  +
push edi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_4]  +
push dword ptr [esi+4Ch]  +
push edi  +
call dword ptr [esi+3Ch]  +
cmp eax edi +
jge loc_1009F9B  +
mov edi eax +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
movzx esi word ptr [eax] +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
push ebx  +
push ebx  +
push [ebp+arg_8]  +
lea eax [ebp+var_34] +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push 3  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [edi+4Ch]  +
mov [ebp+var_4] ebx +
push ebx  +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] esi +
mov [ebp+var_34] 18h +
mov [ebp+var_30] ebx +
mov [ebp+var_28] 40h +
mov [ebp+var_2C] offset unk_101D028 +
mov [ebp+var_24] ebx +
mov [ebp+var_20] ebx +
call dword ptr [edi+2Ch]  +
cmp eax ebx +
jge loc_100A014  +
mov edi eax +
jmp loc_100A1BE  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
push ebx  +
push ebx  +
push 2  +
push offset unk_101D020  +
push [ebp+var_4]  +
push dword ptr [edi+4Ch]  +
push 3  +
call dword ptr [edi+38h]  +
cmp eax ebx +
jge loc_100A04A  +
mov edi eax +
mov esi 0F9h +
mov [ebp+arg_4] offset aSystemcallsSys +
mov [ebp+arg_0] edi +
jmp loc_100A0EF  +
cmp [ebp+var_1C] 3 +
jnz loc_100A0A6  +
lea eax [esi+2] +
mov [ebp+arg_0] eax +
cmp eax esi +
jb loc_100A05F  +
cmp eax 2 +
jnb loc_100A069  +
mov edi 0C0000095h +
jmp loc_100A1BE  +
push eax  +
lea ecx [ebp+var_10] +
call sub_100821F  +
test eax eax +
jnz loc_100A07D  +
mov esi 105h +
jmp loc_100A0D2  +
mov eax [ebp+arg_0] +
push [ebp+var_8]  +
mov esi [ebp+var_10] +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
mov [ebp+var_C] esi +
push esi  +
call memcpy  +
mov eax [ebp+var_8] +
add esp 0Ch +
mov [esi+eax] bl +
jmp loc_100A194  +
mov ecx [ebp+arg_8] +
lea eax [ecx+esi] +
cmp eax ecx +
jb loc_100A05F  +
cmp eax esi +
jb loc_100A05F  +
lea esi [eax+2] +
cmp esi eax +
jb loc_100A05F  +
cmp esi 2 +
jb loc_100A05F  +
push esi  +
lea ecx [ebp+var_10] +
call sub_100821F  +
test eax eax +
jnz loc_100A11F  +
mov esi 11Eh +
mov edi 0C0000017h +
mov [ebp+arg_0] edi +
mov [ebp+arg_4] offset aRgbbuffer_allo +
cmp [ebp+var_10] ebx +
jz loc_100A0EF  +
push [ebp+var_10]  +
call sub_100813B  +
pop ecx  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_18] offset aDW7rtmBaseWc_0 +
mov [ebp+var_14] offset aAddtosetupexec +
mov [ebp+var_10] esi +
call sub_1008207  +
jmp loc_100A1C6  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push esi  +
mov esi [ebp+var_10] +
push esi  +
push 2  +
push offset unk_101D020  +
push [ebp+var_4]  +
push dword ptr [edi+4Ch]  +
push ebx  +
call dword ptr [edi+38h]  +
cmp eax ebx +
jge loc_100A142  +
mov edi eax +
jmp loc_100A1B3  +
push dword ptr [esi+8]  +
mov ecx [ebp+var_8] +
lea eax [esi+0Ch] +
lea ecx [esi+ecx+0Ch] +
push eax  +
push ecx  +
mov [ebp+var_C] ecx +
call ds:memmove  +
push [ebp+var_8]  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
lea eax [esi+0Ch] +
push eax  +
call memcpy  +
mov eax [esi+8] +
add esp 18h +
cmp eax ebx +
jbe loc_100A180  +
mov ecx [ebp+var_8] +
add eax ecx +
mov [ebp+arg_0] eax +
jmp loc_100A18E  +
mov eax [ebp+var_8] +
add eax 2 +
mov [ebp+arg_0] eax +
mov eax [ebp+var_C] +
mov [eax] bl +
lea eax [esi+0Ch] +
mov [ebp+var_C] eax +
push ebx  +
push [ebp+arg_0]  +
push [ebp+var_C]  +
push 7  +
push ebx  +
push offset unk_101D020  +
push [ebp+var_4]  +
push dword ptr [edi+4Ch]  +
push ebx  +
call dword ptr [edi+3Ch]  +
cmp eax ebx +
jl loc_100A13E  +
xor edi edi +
cmp esi ebx +
jz loc_100A1BE  +
push esi  +
call sub_100813B  +
pop ecx  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push [ebp+arg_C]  +
lea eax [ebp+var_48] +
push edi  +
push edi  +
push edi  +
push eax  +
push 3  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [ebx+4Ch]  +
mov [ebp+var_8] 0C00000E5h +
push 2  +
mov [ebp+var_4] edi +
mov [ebp+var_28] edi +
mov [ebp+var_24] edi +
mov [ebp+var_48] 18h +
mov [ebp+var_44] edi +
mov [ebp+var_3C] 40h +
mov [ebp+var_40] offset unk_101D038 +
mov [ebp+var_38] edi +
mov [ebp+var_34] edi +
call dword ptr [ebx+2Ch]  +
cmp eax edi +
jge loc_100A240  +
push 5Ah  +
mov ebx offset aSystemcallsS_0 +
pop esi  +
mov [ebp+var_8] eax +
jmp loc_100A2A0  +
cmp [ebp+var_10] 3 +
jnz loc_100A24E  +
mov [ebp+var_8] edi +
jmp loc_100A43A  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
push edi  +
push 2  +
push offset unk_101D030  +
push [ebp+var_4]  +
push dword ptr [ebx+4Ch]  +
push 1  +
call dword ptr [ebx+38h]  +
cmp eax edi +
jge loc_100A274  +
push 6Eh  +
mov ebx offset aSystemcallsS_1 +
jmp loc_100A23A  +
push [ebp+arg_0]  +
lea ecx [ebp+var_28] +
call sub_100821F  +
test eax eax +
jnz loc_100A2AD  +
push 70h  +
pop esi  +
mov ebx offset aRgbpartialinfo +
mov [ebp+var_8] 0C0000017h +
cmp [ebp+var_28] edi +
jz loc_100A2A0  +
push [ebp+var_28]  +
call sub_100813B  +
pop ecx  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
mov [ebp+var_28] esi +
jmp loc_100A32C  +
mov esi [ebp+var_28] +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
push esi  +
push 2  +
push offset unk_101D030  +
push [ebp+var_4]  +
push dword ptr [ebx+4Ch]  +
push edi  +
call dword ptr [ebx+38h]  +
cmp eax edi +
jge loc_100A2DE  +
mov [ebp+var_8] eax +
cmp esi edi +
jz loc_100A43A  +
jmp loc_100A433  +
mov eax [esi+8] +
mov ecx eax +
shr ecx 1 +
lea edx [esi+0Ch] +
lea ecx [edx+ecx*2-2] +
mov [ebp+var_20] ecx +
mov [ebp+arg_C] edi +
cmp eax 2 +
jnb loc_100A303  +
mov edi 89h +
mov ebx offset aPartialinfoDat +
jmp loc_100A312  +
cmp [ecx] di +
jz loc_100A34E  +
mov edi 8Ah +
mov ebx offset aPchendL0 +
lea ecx [ebp+var_8] +
call sub_101705C  +
push esi  +
call sub_100813B  +
pop ecx  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
mov [ebp+var_28] edi +
lea eax [ebp+var_30] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_2C] offset aDeletefromse_0 +
mov [ebp+var_30] offset aDW7rtmBaseWc_0 +
mov [ebp+var_24] ebx +
call sub_1008207  +
jmp loc_100A442  +
cmp edx ecx +
jnb loc_100A430  +
mov eax edx +
lea ecx [eax+2] +
mov [ebp+var_C] ecx +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_100A35E  +
sub eax [ebp+var_C] +
mov ecx [ebp+arg_4] +
sar eax 1 +
mov [ebp+var_24] eax +
add eax eax +
mov [ebp+var_1C] eax +
add eax 2 +
mov [ebp+var_8] eax +
movzx eax word ptr [edx] +
cmp ax di +
jz loc_100A3B4  +
movzx eax ax +
mov [ebp+var_C] eax +
mov eax edx +
sub eax ecx +
mov [ebp+var_14] eax +
mov ax word ptr [ebp+var_C] +
cmp ax [ecx] +
jnz loc_100A3B4  +
mov eax [ebp+var_14] +
inc ecx  +
inc ecx  +
movzx eax word ptr [eax+ecx] +
mov [ebp+var_18] eax +
movzx eax ax +
mov [ebp+var_C] eax +
cmp word ptr [ebp+var_18] di +
jnz loc_100A393  +
cmp [ecx] di +
jnz loc_100A3C7  +
mov edi [ebp+arg_8] +
call sub_1009EB3  +
test al al +
jnz loc_100A3E7  +
xor edi edi +
mov eax [ebp+var_1C] +
lea edx [edx+eax+2] +
mov eax [ebp+arg_C] +
add eax [ebp+var_8] +
mov [ebp+arg_C] eax +
cmp eax [esi+8] +
jnb loc_100A42D  +
cmp edx [ebp+var_20] +
jb loc_100A356  +
jmp loc_100A430  +
mov eax [esi+8] +
sub eax [ebp+var_8] +
sub eax [ebp+arg_C] +
push eax  +
mov eax [ebp+var_24] +
lea eax [edx+eax*2+2] +
push eax  +
push edx  +
call ds:memmove  +
mov eax [esi+8] +
sub eax [ebp+var_8] +
add esp 0Ch +
push 0  +
push eax  +
lea eax [esi+0Ch] +
push eax  +
push 7  +
push dword ptr [esi]  +
push offset unk_101D030  +
push [ebp+var_4]  +
push dword ptr [ebx+4Ch]  +
push 0  +
call dword ptr [ebx+3Ch]  +
test eax eax +
jge loc_100A42E  +
mov [ebp+var_8] eax +
jmp loc_100A433  +
int 3  +
xor edi edi +
mov [ebp+var_8] edi +
push esi  +
call sub_100813B  +
pop ecx  +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0C0000043h +
jz loc_100A46C  +
cmp [ebp+arg_0] 0C0190001h +
jz loc_100A46C  +
xor eax eax +
jmp loc_100A46F  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
mov byte ptr [eax] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
mov [ecx] al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jbe loc_100A4C1  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_10] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp eax ebx +
jnz loc_100A4FC  +
cmp ecx ebx +
jnz loc_100A504  +
mov eax [ebp+arg_C] +
mul  [ebp+arg_4] +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
mov eax [ebp+arg_0] +
mov [ecx+4] edx +
mov [eax] ebx +
jmp loc_100A5A9  +
cmp ecx ebx +
jnz loc_100A596  +
mov edi [ebp+arg_C] +
xor ecx ecx +
push ecx  +
push edi  +
push ebx  +
push eax  +
call _allmul  +
mov [ebp+var_8] eax +
xor eax eax +
or eax edx +
jnz loc_100A596  +
mov esi [ebp+arg_4] +
push ebx  +
push esi  +
push ebx  +
push [ebp+arg_10]  +
call _allmul  +
mov [ebp+arg_4] eax +
xor eax eax +
or eax edx +
jnz loc_100A596  +
push eax  +
push edi  +
push ebx  +
push esi  +
call _allmul  +
xor edi edi +
mov [ebp+arg_C] eax +
mov eax [ebp+arg_4] +
xor ebx ebx +
mov esi edi +
mov [ebp+arg_10] edx +
mov edx [ebp+var_8] +
add esi ebx +
mov ecx eax +
adc ecx edx +
cmp ecx eax +
jb loc_100A5A0  +
ja loc_100A55D  +
cmp esi edi +
jb loc_100A5A0  +
cmp ecx edx +
jb loc_100A5A0  +
ja loc_100A567  +
cmp esi ebx +
jb loc_100A5A0  +
mov eax esi +
add eax [ebp+arg_C] +
mov edi ecx +
adc edi [ebp+arg_10] +
cmp edi ecx +
jb loc_100A5A0  +
ja loc_100A57B  +
cmp eax esi +
jb loc_100A5A0  +
cmp edi [ebp+arg_10] +
jb loc_100A5A0  +
ja loc_100A587  +
cmp eax [ebp+arg_C] +
jb loc_100A5A0  +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
mov eax [ebp+arg_0] +
and [eax] ebx +
mov [ecx+4] edi +
jmp loc_100A5A9  +
mov eax [ebp+arg_14] +
or dword ptr [eax] 0FFFFFFFFh +
or dword ptr [eax+4] 0FFFFFFFFh +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 0C0000095h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
call ds:NtClose  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edx  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_100A4CA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100A5B5  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
push esi  +
push 2710h  +
push [ebp+arg_4]  +
lea edx [ebp+var_8] +
push [ebp+arg_0]  +
lea ecx [ebp+arg_4] +
call sub_100A5CE  +
cmp [ebp+arg_4] esi +
jge loc_100A640  +
mov esi [ebp+arg_4] +
jmp loc_100A6AA  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_8] +
cmp eax 7FFFFFFFh +
jb loc_100A662  +
ja loc_100A654  +
cmp ecx 0FFFFFFFFh +
jbe loc_100A662  +
push 10h  +
mov edx offset aTicks0x7ffffff +
mov esi 0C0000095h +
jmp loc_100A686  +
neg ecx  +
adc eax esi +
neg eax  +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
mov [ebp+arg_0] ecx +
call ds:NtDelayExecution  +
cmp eax esi +
jge loc_100A6AA  +
push 13h  +
mov edx offset aNtdelayexecuti +
mov esi eax +
pop ecx  +
lea eax [ebp+var_10] +
mov [ebp+var_8] ecx +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] esi +
mov [ebp+var_10] offset aDW7rtmBaseWc_1 +
mov [ebp+var_C] offset aAnonymousNames +
mov [ebp+var_4] edx +
call sub_1008207  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi] +
cmp esi 1Eh +
ja loc_100A70A  +
mov eax esi +
imul eax eax +
push 1Eh  +
pop ecx  +
xor edx edx +
div  ecx +
mov [ebp+arg_0] 2 +
mov [ebp+var_4] eax +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_100A4AE  +
mov eax [eax] +
mov ecx [ebp+arg_4] +
inc esi  +
mov [edi] esi +
push 0  +
mov byte ptr [ecx] 1 +
push ds:dword_1002860[eax*4]  +
call sub_100A614  +
test eax eax +
jge loc_100A710  +
jmp loc_100A712  +
mov eax [ebp+arg_4] +
mov byte ptr [eax] 0 +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov [ebp+var_4] ecx +
jmp loc_100A72C  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100A72A  +
mov eax ds:7FFE0004h +
mul  edx +
push ebx  +
shrd eax edx +
push esi  +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov ebx edx +
mul  ecx +
push edi  +
xor edi edi +
push edi  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc ebx edx +
sub esi [ebp+arg_4] +
sbb ebx [ebp+arg_8] +
mov [ebp+arg_8] ebx +
jnz loc_100A783  +
cmp esi 3A98h +
jbe loc_100A7B9  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
cmp eax edi +
jz loc_100A796  +
push 1  +
push eax  +
call ds:NtRollbackTransaction  +
push edi  +
push edi  +
push [ebp+arg_0]  +
push 2  +
call sub_1008FE1  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov [ebp+var_C] edi +
mov [ebp+var_8] 80000000h +
call ds:NtDelayExecution  +
jmp loc_100A7CD  +
push edi  +
push edi  +
push [ebp+arg_0]  +
push 1  +
call sub_1008FE1  +
push edi  +
push 64h  +
call sub_100A614  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax [ebp+arg_34] +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor edi edi +
mov [ebp+var_C] ecx +
mov [ebp+var_8] 1 +
mov [ebp+var_10] ebx +
mov byte ptr [ebp+var_1] 1 +
cmp eax ebx +
jz loc_100A802  +
mov [eax] ebx +
mov eax [ebp+arg_30] +
test eax eax +
jz loc_100A816  +
mov ecx large fs:18h +
mov [ecx+0FACh] eax +
push [ebp+arg_2C]  +
push [ebp+arg_28]  +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtCreateFile  +
xor ecx ecx +
mov esi eax +
cmp [ebp+arg_30] ecx +
jz loc_100A852  +
mov eax large fs:18h +
mov [eax+0FACh] ecx +
push esi  +
call sub_100A451  +
test al al +
jz loc_100A881  +
test [ebp+arg_0] 1 +
jz loc_100A881  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_100A881  +
lea eax [ebp+var_1] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A6B6  +
test eax eax +
jge loc_100A956  +
mov esi eax +
jmp loc_100A8A4  +
cmp esi 0C0000043h +
jnz loc_100A8AD  +
test [ebp+arg_0] 2 +
jz loc_100A8F6  +
mov [ebp+var_8] 2 +
mov eax [ebp+arg_34] +
test eax eax +
jz loc_100A8A2  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 38h  +
cmp esi 0C0190001h +
jnz loc_100A8C4  +
test [ebp+arg_0] 4 +
jz loc_100A8F6  +
mov [ebp+var_8] 3 +
jmp loc_100A896  +
cmp esi 0C0000022h +
jnz loc_100A8DB  +
test [ebp+arg_0] 8 +
jz loc_100A8F6  +
mov [ebp+var_8] 4 +
jmp loc_100A896  +
cmp esi 0C019005Ah +
jnz loc_100A8F2  +
test [ebp+arg_0] 10h +
jz loc_100A8F6  +
mov [ebp+var_8] 5 +
jmp loc_100A896  +
cmp esi ecx +
jge loc_100A896  +
mov eax [ebp+var_C] +
cmp byte ptr [eax] 0 +
jz loc_100A963  +
mov eax edi +
or eax ebx +
jnz loc_100A948  +
jmp loc_100A908  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100A906  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov edi eax +
mov eax ds:7FFE0004h +
mov ebx edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add edi eax +
adc ebx edx +
push [ebp+arg_C]  +
mov ecx [ebp+var_C] +
push ebx  +
push edi  +
push esi  +
call sub_100A71D  +
test esi esi +
jl loc_100A802  +
jmp loc_100A896  +
lea eax [ebp+var_24] +
mov [ebp+var_18] ecx +
push eax  +
lea ecx [ebp+var_14] +
mov [ebp+var_14] esi +
mov [ebp+var_24] offset aDW7rtmBaseWc_1 +
mov [ebp+var_20] offset aCsystemcallsCr +
mov [ebp+var_1C] 0EEh +
call sub_1008207  +
jmp loc_100A8A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax [ebp+arg_20] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_C] ecx +
mov [ebp+var_8] 1 +
mov [ebp+var_10] edi +
mov byte ptr [ebp+var_1] 1 +
cmp eax edi +
jz loc_100A9BD  +
mov [eax] edi +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_100A9D1  +
mov ecx large fs:18h +
mov [ecx+0FACh] eax +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtOpenFile  +
xor ecx ecx +
mov ebx eax +
cmp [ebp+arg_1C] ecx +
jz loc_100A9FE  +
mov eax large fs:18h +
mov [eax+0FACh] ecx +
push ebx  +
call sub_100A451  +
test al al +
jz loc_100AA2D  +
test [ebp+arg_0] 1 +
jz loc_100AA2D  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_100AA2D  +
lea eax [ebp+var_1] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call sub_100A6B6  +
test eax eax +
jge loc_100AAD4  +
mov esi eax +
jmp loc_100AA50  +
cmp ebx 0C0000043h +
jnz loc_100AA59  +
test [ebp+arg_0] 2 +
jz loc_100AA74  +
mov [ebp+var_8] 2 +
mov eax [ebp+arg_20] +
test eax eax +
jz loc_100AA4E  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
cmp ebx 0C0190001h +
jnz loc_100AA70  +
test [ebp+arg_0] 4 +
jz loc_100AA74  +
mov [ebp+var_8] 3 +
jmp loc_100AA42  +
cmp ebx ecx +
jge loc_100AA42  +
mov eax [ebp+var_C] +
cmp byte ptr [eax] 0 +
jz loc_100AAE1  +
mov eax esi +
or eax edi +
jnz loc_100AAC6  +
jmp loc_100AA86  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100AA84  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
push [ebp+arg_C]  +
mov ecx [ebp+var_C] +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
test ebx ebx +
jl loc_100A9BD  +
jmp loc_100AA42  +
lea eax [ebp+var_24] +
mov [ebp+var_18] ecx +
mov esi ebx +
push eax  +
lea ecx [ebp+var_14] +
mov [ebp+var_14] esi +
mov [ebp+var_24] offset aDW7rtmBaseWc_1 +
mov [ebp+var_20] offset aCsystemcallsOp +
mov [ebp+var_1C] 13Dh +
call sub_1008207  +
jmp loc_100AA50  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_28] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_4] ecx +
cmp eax edi +
jz loc_100AB2F  +
mov [eax] edi +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtReadFile  +
mov ebx eax +
test ebx ebx +
jge loc_100ABE8  +
mov eax [ebp+var_4] +
cmp byte ptr [eax] 0 +
jz loc_100ABBE  +
mov eax esi +
or eax edi +
jnz loc_100ABAC  +
jmp loc_100AB6C  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100AB6A  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_4] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100AB2F  +
and [ebp+var_C] 0 +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_18] offset aDW7rtmBaseWc_1 +
mov [ebp+var_14] offset aCsystemcallsRe +
mov [ebp+var_10] 17Ah +
call sub_1008207  +
jmp loc_100ABF7  +
mov eax [ebp+arg_28] +
test eax eax +
jz loc_100ABF5  +
mov dword ptr [eax] 1 +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_28] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_4] ecx +
cmp eax edi +
jz loc_100AC20  +
mov [eax] edi +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtWriteFile  +
mov ebx eax +
test ebx ebx +
jge loc_100ACD9  +
mov eax [ebp+var_4] +
cmp byte ptr [eax] 0 +
jz loc_100ACAF  +
mov eax esi +
or eax edi +
jnz loc_100AC9D  +
jmp loc_100AC5D  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100AC5B  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_4] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100AC20  +
and [ebp+var_C] 0 +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_18] offset aDW7rtmBaseWc_1 +
mov [ebp+var_14] offset aCsystemcallsWr +
mov [ebp+var_10] 1B8h +
call sub_1008207  +
jmp loc_100ACE8  +
mov eax [ebp+arg_28] +
test eax eax +
jz loc_100ACE6  +
mov dword ptr [eax] 1 +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_4] ecx +
cmp eax edi +
jz loc_100AD11  +
mov [eax] edi +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtQueryInformationFile  +
mov ebx eax +
test ebx ebx +
jge loc_100ADBB  +
mov eax [ebp+var_4] +
cmp byte ptr [eax] 0 +
jz loc_100AD91  +
mov eax esi +
or eax edi +
jnz loc_100AD82  +
jmp loc_100AD42  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100AD40  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_4] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100AD11  +
and [ebp+var_C] 0 +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_18] offset aDW7rtmBaseWc_1 +
mov [ebp+var_14] offset aCsystemcallsQu +
mov [ebp+var_10] 1EDh +
call sub_1008207  +
jmp loc_100ADCA  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_100ADC8  +
mov dword ptr [eax] 1 +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_8] ecx +
mov [ebp+var_4] 1 +
cmp eax edi +
jz loc_100ADFA  +
mov [eax] edi +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtSetInformationFile  +
mov ebx eax +
cmp ebx 0C0000043h +
jnz loc_100AE3D  +
test [ebp+arg_0] 1 +
jz loc_100AE86  +
mov [ebp+var_4] 2 +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_100AE32  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 1Ch  +
cmp ebx 0C0000121h +
jnz loc_100AE54  +
test [ebp+arg_0] 2 +
jz loc_100AE86  +
mov [ebp+var_4] 3 +
jmp loc_100AE26  +
cmp ebx 0C0000101h +
jnz loc_100AE6B  +
test [ebp+arg_0] 4 +
jz loc_100AE86  +
mov [ebp+var_4] 4 +
jmp loc_100AE26  +
cmp ebx 0C00000D4h +
jnz loc_100AE82  +
test [ebp+arg_0] 8 +
jz loc_100AE86  +
mov [ebp+var_4] 5 +
jmp loc_100AE26  +
test ebx ebx +
jge loc_100AE26  +
mov eax [ebp+var_8] +
cmp byte ptr [eax] 0 +
jz loc_100AEEA  +
mov eax esi +
or eax edi +
jnz loc_100AED8  +
jmp loc_100AE98  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100AE96  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_8] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100ADFA  +
and [ebp+var_10] 0 +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] ebx +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcallsSe +
mov [ebp+var_14] 236h +
call sub_1008207  +
jmp loc_100AE34  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_4] ecx +
mov [ebp+var_C] 1 +
cmp eax edi +
jz loc_100AF3E  +
mov [eax] edi +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtQueryVolumeInformationFile  +
mov ebx eax +
cmp ebx 0C0000023h +
jz loc_100AF65  +
cmp ebx 80000005h +
jnz loc_100AF6B  +
test [ebp+arg_0] 1 +
jnz loc_100AFD7  +
test ebx ebx +
jge loc_100B006  +
mov eax [ebp+var_4] +
cmp byte ptr [eax] 0 +
jz loc_100AFDC  +
mov eax esi +
or eax edi +
jnz loc_100AFC5  +
jmp loc_100AF85  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100AF83  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_4] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100AF3E  +
push 2  +
pop ecx  +
jmp loc_100B009  +
and [ebp+var_10] 0 +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcalls_0 +
mov [ebp+var_14] 270h +
call sub_1008207  +
jmp loc_100B014  +
mov ecx [ebp+var_C] +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_100B012  +
mov [eax] ecx +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_C] ecx +
mov [ebp+var_4] 1 +
cmp eax edi +
jz loc_100B044  +
mov [eax] edi +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100B058  +
mov ecx large fs:18h +
mov [ecx+0FACh] eax +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtQueryAttributesFile  +
xor ecx ecx +
mov ebx eax +
cmp [ebp+arg_C] ecx +
jz loc_100B079  +
mov eax large fs:18h +
mov [eax+0FACh] ecx +
cmp ebx 0C0000034h +
jnz loc_100B0A7  +
test [ebp+arg_0] 1 +
jz loc_100B0F0  +
mov [ebp+var_4] 2 +
mov eax [ebp+arg_10] +
cmp eax ecx +
jz loc_100B09A  +
mov edx [ebp+var_4] +
mov [eax] edx +
mov [ebp+var_8] ecx +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
cmp ebx 0C000003Ah +
jnz loc_100B0BE  +
test [ebp+arg_0] 2 +
jz loc_100B0F0  +
mov [ebp+var_4] 3 +
jmp loc_100B08E  +
cmp ebx 0C0000043h +
jnz loc_100B0D5  +
test [ebp+arg_0] 4 +
jz loc_100B0F0  +
mov [ebp+var_4] 4 +
jmp loc_100B08E  +
cmp ebx 0C0190001h +
jnz loc_100B0EC  +
test [ebp+arg_0] 8 +
jz loc_100B0F0  +
mov [ebp+var_4] 5 +
jmp loc_100B08E  +
cmp ebx ecx +
jge loc_100B08E  +
mov eax [ebp+var_C] +
cmp byte ptr [eax] 0 +
jz loc_100B155  +
mov eax esi +
or eax edi +
jnz loc_100B142  +
jmp loc_100B102  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100B100  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
push [ebp+arg_4]  +
mov ecx [ebp+var_C] +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100B044  +
lea eax [ebp+var_1C] +
mov [ebp+var_10] ecx +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcalls_1 +
mov [ebp+var_14] 2B7h +
call sub_1008207  +
jmp loc_100B09D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor esi esi +
xor edi edi +
mov [ebp+var_8] ecx +
cmp eax ebx +
jz loc_100B1A3  +
mov [eax] ebx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtFlushBuffersFile  +
cmp eax ebx +
mov [ebp+var_C] eax +
jge loc_100B243  +
mov ecx [ebp+var_8] +
cmp [ecx] bl +
jz loc_100B21A  +
mov eax esi +
or eax edi +
jnz loc_100B20A  +
jmp loc_100B1CB  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100B1C9  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push ebx  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_8] +
push ebx  +
push edi  +
push esi  +
push [ebp+var_C]  +
call sub_100A71D  +
jmp loc_100B1A3  +
mov [ebp+var_4] eax +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcallsFl +
mov [ebp+var_14] 2E4h +
mov [ebp+var_10] ebx +
call sub_1008207  +
jmp loc_100B253  +
mov eax [ebp+arg_C] +
cmp eax ebx +
jz loc_100B250  +
mov dword ptr [eax] 1 +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_4] ecx +
mov [ebp+var_C] 1 +
cmp eax edi +
jz loc_100B284  +
mov [eax] edi +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtQuerySecurityObject  +
mov ebx eax +
cmp ebx 0C0000023h +
jz loc_100B2AB  +
cmp ebx 80000005h +
jnz loc_100B2B1  +
test [ebp+arg_0] 1 +
jnz loc_100B31D  +
test ebx ebx +
jge loc_100B34C  +
mov eax [ebp+var_4] +
cmp byte ptr [eax] 0 +
jz loc_100B322  +
mov eax esi +
or eax edi +
jnz loc_100B30B  +
jmp loc_100B2CB  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100B2C9  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_4] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100B284  +
push 2  +
pop ecx  +
jmp loc_100B34F  +
and [ebp+var_10] 0 +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcalls_2 +
mov [ebp+var_14] 320h +
call sub_1008207  +
jmp loc_100B35A  +
mov ecx [ebp+var_C] +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_100B358  +
mov [eax] ecx +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_4] ecx +
cmp eax edi +
jz loc_100B383  +
mov [eax] edi +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtSetSecurityObject  +
mov ebx eax +
test ebx ebx +
jge loc_100B427  +
mov eax [ebp+var_4] +
cmp byte ptr [eax] 0 +
jz loc_100B3FD  +
mov eax esi +
or eax edi +
jnz loc_100B3EE  +
jmp loc_100B3AE  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100B3AC  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_4] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100B383  +
and [ebp+var_C] 0 +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_18] offset aDW7rtmBaseWc_1 +
mov [ebp+var_14] offset aCsystemcalls_3 +
mov [ebp+var_10] 34Eh +
call sub_1008207  +
jmp loc_100B436  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100B434  +
mov dword ptr [eax] 1 +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax [ebp+arg_24] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] ecx +
mov [ebp+var_8] 1 +
mov [ebp+var_1C] edi +
mov [ebp+var_18] edi +
cmp eax edi +
jz loc_100B46A  +
mov [eax] edi +
push [ebp+arg_20]  +
cmp [ebp+arg_1C] edi +
jz loc_100B48F  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtCreateKeyTransacted  +
jmp loc_100B4A7  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtCreateKey  +
mov ebx eax +
mov eax 0C000003Ah +
cmp ebx eax +
jz loc_100B4BE  +
cmp ebx 0C0000034h +
jnz loc_100B59F  +
test byte ptr [ebp+arg_0] 4 +
jz loc_100B588  +
mov esi [ebp+arg_C] +
mov ecx [esi+8] +
and [ebp+arg_0] 0FFFFFFFBh +
lea edx [ebp+var_30] +
call sub_1017543  +
cmp eax edi +
jl loc_100B627  +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push 5Ch  +
push edi  +
push edi  +
lea eax [ebp+var_30] +
push eax  +
push 2  +
call sub_1017714  +
cmp eax edi +
jl loc_100B627  +
cmp [ebp+var_3C] edi +
jbe loc_100B569  +
lea edx [ebp+var_24] +
lea ecx [ebp+var_48] +
call sub_10175BC  +
cmp eax edi +
jl loc_100B627  +
push 6  +
pop ecx  +
lea edi [ebp+var_70] +
movs   +
lea eax [ebp+var_24] +
mov [ebp+var_68] eax +
mov ecx [ebp+var_4] +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_20]  +
lea eax [ebp+var_70] +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push eax  +
push [ebp+arg_8]  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+arg_0] +
or eax 4 +
push eax  +
call sub_100B444  +
test eax eax +
jnz loc_100B567  +
cmp [ebp+var_C] 1 +
jnz loc_100B567  +
push [ebp+var_10]  +
call ds:NtClose  +
xor edi edi +
cmp ebx edi +
jl loc_100B46A  +
mov eax [ebp+arg_24] +
cmp eax edi +
jz loc_100B57D  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 28h  +
cmp ebx 0C0000034h +
jnz loc_100B59F  +
test byte ptr [ebp+arg_0] 1 +
jz loc_100B5B6  +
mov [ebp+var_8] 2 +
jmp loc_100B571  +
cmp ebx eax +
jnz loc_100B5B2  +
test byte ptr [ebp+arg_0] 2 +
jz loc_100B5B6  +
mov [ebp+var_8] 3 +
jmp loc_100B571  +
cmp ebx edi +
jge loc_100B571  +
mov eax [ebp+var_4] +
cmp byte ptr [eax] 0 +
jz loc_100B62E  +
mov eax [ebp+var_1C] +
or eax [ebp+var_18] +
jnz loc_100B612  +
jmp loc_100B5CA  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100B5C8  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov [ebp+var_18] edi +
mov [ebp+var_1C] esi +
xor edi edi +
mov ecx [ebp+var_4] +
push edi  +
push [ebp+var_18]  +
push [ebp+var_1C]  +
push ebx  +
call sub_100A71D  +
jmp loc_100B569  +
mov esi eax +
jmp loc_100B57F  +
lea eax [ebp+var_58] +
mov esi ebx +
push eax  +
lea ecx [ebp+var_14] +
mov [ebp+var_14] esi +
mov [ebp+var_58] offset aDW7rtmBaseWc_1 +
mov [ebp+var_54] offset aCsystemcalls_4 +
mov [ebp+var_50] 3DCh +
mov [ebp+var_4C] edi +
call sub_1008207  +
jmp loc_100B57F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_18] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_8] ecx +
mov [ebp+var_4] 1 +
cmp eax edi +
jz loc_100B683  +
mov [eax] edi +
cmp [ebp+arg_14] 0 +
jz loc_100B6A0  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtOpenKeyTransactedEx  +
jmp loc_100B6B2  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtOpenKeyEx  +
mov ebx eax +
cmp ebx 0C0000034h +
jnz loc_100B6E0  +
test [ebp+arg_0] 1 +
jz loc_100B6FB  +
mov [ebp+var_4] 2 +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_100B6D5  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 1Ch  +
cmp ebx 0C000003Ah +
jnz loc_100B6F7  +
test [ebp+arg_0] 2 +
jz loc_100B6FB  +
mov [ebp+var_4] 3 +
jmp loc_100B6C9  +
test ebx ebx +
jge loc_100B6C9  +
mov eax [ebp+var_8] +
cmp byte ptr [eax] 0 +
jz loc_100B75F  +
mov eax esi +
or eax edi +
jnz loc_100B74D  +
jmp loc_100B70D  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100B70B  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_8] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100B683  +
and [ebp+var_10] 0 +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] ebx +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcalls_5 +
mov [ebp+var_14] 427h +
call sub_1008207  +
jmp loc_100B6D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_C] ecx +
mov [ebp+var_4] 1 +
cmp eax edi +
jz loc_100B7B3  +
mov [eax] edi +
push [ebp+arg_4]  +
call ds:NtDeleteKey  +
mov ebx eax +
cmp ebx 0C0000034h +
jnz loc_100B7ED  +
test [ebp+arg_0] 1 +
jz loc_100B836  +
mov [ebp+var_4] 2 +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100B7DF  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
and [ebp+var_8] 0 +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
cmp ebx 0C000003Ah +
jnz loc_100B804  +
test [ebp+arg_0] 2 +
jz loc_100B836  +
mov [ebp+var_4] 3 +
jmp loc_100B7D3  +
cmp ebx 0C000017Ch +
jnz loc_100B81B  +
test [ebp+arg_0] 4 +
jz loc_100B836  +
mov [ebp+var_4] 4 +
jmp loc_100B7D3  +
cmp ebx 0C0000121h +
jnz loc_100B832  +
test [ebp+arg_0] 8 +
jz loc_100B836  +
mov [ebp+var_4] 5 +
jmp loc_100B7D3  +
test ebx ebx +
jge loc_100B7D3  +
mov eax [ebp+var_C] +
cmp byte ptr [eax] 0 +
jz loc_100B89A  +
mov eax esi +
or eax edi +
jnz loc_100B888  +
jmp loc_100B848  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100B846  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_C] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100B7B3  +
and [ebp+var_10] 0 +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcallsDe +
mov [ebp+var_14] 466h +
call sub_1008207  +
jmp loc_100B7E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_1C] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_8] ecx +
mov [ebp+var_4] 1 +
cmp eax edi +
jz loc_100B8EE  +
mov [eax] edi +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtQueryValueKey  +
mov ebx eax +
cmp ebx 0C0000023h +
jz loc_100B918  +
cmp ebx 80000005h +
jnz loc_100B922  +
test [ebp+arg_0] 1 +
jnz loc_100B9B6  +
cmp ebx 0C0000034h +
jnz loc_100B94E  +
test [ebp+arg_0] 2 +
jz loc_100B952  +
mov [ebp+var_4] 3 +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_100B943  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 20h  +
test ebx ebx +
jge loc_100B937  +
mov eax [ebp+var_8] +
cmp byte ptr [eax] 0 +
jz loc_100B9C2  +
mov eax esi +
or eax edi +
jnz loc_100B9A4  +
jmp loc_100B964  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100B962  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_8] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100B8EE  +
mov [ebp+var_4] 2 +
jmp loc_100B937  +
and [ebp+var_10] 0 +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] ebx +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcalls_6 +
mov [ebp+var_14] 4A8h +
call sub_1008207  +
jmp loc_100B945  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_1C] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_4] ecx +
cmp eax edi +
jz loc_100BA0F  +
mov [eax] edi +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtSetValueKey  +
mov ebx eax +
test ebx ebx +
jge loc_100BABF  +
mov eax [ebp+var_4] +
cmp byte ptr [eax] 0 +
jz loc_100BA95  +
mov eax esi +
or eax edi +
jnz loc_100BA83  +
jmp loc_100BA43  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100BA41  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_4] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100BA0F  +
and [ebp+var_C] 0 +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_18] offset aDW7rtmBaseWc_1 +
mov [ebp+var_14] offset aCsystemcalls_7 +
mov [ebp+var_10] 4DFh +
call sub_1008207  +
jmp loc_100BACE  +
mov eax [ebp+arg_1C] +
test eax eax +
jz loc_100BACC  +
mov dword ptr [eax] 1 +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+var_C] ecx +
mov [ebp+var_4] 1 +
cmp eax edi +
jz loc_100BAFE  +
mov [eax] edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:NtDeleteValueKey  +
mov ebx eax +
cmp ebx 0C0000034h +
jnz loc_100BB3B  +
test [ebp+arg_0] 1 +
jz loc_100BB56  +
mov [ebp+var_4] 2 +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100BB2D  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
and [ebp+var_8] 0 +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
cmp ebx 0C000017Ch +
jnz loc_100BB52  +
test [ebp+arg_0] 2 +
jz loc_100BB56  +
mov [ebp+var_4] 3 +
jmp loc_100BB21  +
test ebx ebx +
jge loc_100BB21  +
mov eax [ebp+var_C] +
cmp byte ptr [eax] 0 +
jz loc_100BBBA  +
mov eax esi +
or eax edi +
jnz loc_100BBA8  +
jmp loc_100BB68  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100BB66  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push 0  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_C] +
push 0  +
push edi  +
push esi  +
push ebx  +
call sub_100A71D  +
jmp loc_100BAFE  +
and [ebp+var_10] 0 +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_8] ebx +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcalls_8 +
mov [ebp+var_14] 516h +
call sub_1008207  +
jmp loc_100BB31  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor esi esi +
xor edi edi +
mov [ebp+var_8] ecx +
cmp eax ebx +
jz loc_100BC09  +
mov [eax] ebx +
push [ebp+arg_4]  +
call ds:NtFlushKey  +
cmp eax ebx +
mov [ebp+var_C] eax +
jge loc_100BCA6  +
mov ecx [ebp+var_8] +
cmp [ecx] bl +
jz loc_100BC7D  +
mov eax esi +
or eax edi +
jnz loc_100BC6D  +
jmp loc_100BC2E  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100BC2C  +
mov eax ds:7FFE0004h +
mul  edx +
shrd eax edx +
shr edx 18h +
mov esi eax +
mov eax ds:7FFE0004h +
mov edi edx +
mul  ecx +
push ebx  +
push 100h  +
push edx  +
push eax  +
call _allmul  +
add esi eax +
adc edi edx +
mov ecx [ebp+var_8] +
push ebx  +
push edi  +
push esi  +
push [ebp+var_C]  +
call sub_100A71D  +
jmp loc_100BC09  +
mov [ebp+var_4] eax +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_1C] offset aDW7rtmBaseWc_1 +
mov [ebp+var_18] offset aCsystemcalls_9 +
mov [ebp+var_14] 542h +
mov [ebp+var_10] ebx +
call sub_1008207  +
jmp loc_100BCB6  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_100BCB3  +
mov dword ptr [eax] 1 +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+40h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+3Ch]  +
push dword ptr [ebp+38h]  +
push dword ptr [ebp+34h]  +
push dword ptr [ebp+30h]  +
push dword ptr [ebp+2Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100A7D9  +
pop ebp  +
retn 3Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+2Ch]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100A994  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+34h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+30h]  +
push dword ptr [ebp+2Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100AB14  +
pop ebp  +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+34h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+30h]  +
push dword ptr [ebp+2Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100AC05  +
pop ebp  +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+24h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100ACF6  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+24h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100ADD8  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+24h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100AF1C  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100B022  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+18h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100B186  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+24h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100B262  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100B368  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+30h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+2Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100B444  +
pop ebp  +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+24h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100B661  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100B791  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+28h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100B8CC  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+28h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100B9F4  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+18h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100BADC  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx [ebp+0Ch] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_100BBEC  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [eax+4Ch] ecx +
mov dword ptr [eax] offset loc_100BCC5 +
mov dword ptr [eax+4] offset loc_100BD05 +
mov dword ptr [eax+8] offset loc_100BD36 +
mov dword ptr [eax+0Ch] offset loc_100BD6D +
mov dword ptr [eax+10h] offset loc_100BDA4 +
mov dword ptr [eax+14h] offset loc_100BDCF +
mov dword ptr [eax+18h] offset loc_100BDFA +
mov dword ptr [eax+1Ch] offset loc_100BE25 +
mov dword ptr [eax+20h] offset loc_100BE4A +
mov dword ptr [eax+24h] offset loc_100BE6C +
mov dword ptr [eax+28h] offset loc_100BE97 +
mov dword ptr [eax+2Ch] offset loc_100BEBC +
mov dword ptr [eax+30h] offset loc_100BEF0 +
mov dword ptr [eax+34h] offset loc_100BF1B +
mov dword ptr [eax+38h] offset loc_100BF3A +
mov dword ptr [eax+3Ch] offset loc_100BF68 +
mov dword ptr [eax+40h] offset loc_100BF96 +
mov dword ptr [eax+44h] offset loc_100BFB8 +
mov dword ptr [eax+48h] offset loc_100A5F5 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+0Ch] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+1] 0 +
jz loc_100C0A0  +
lea ecx [esi+10h] +
call sub_1010C61  +
test eax eax +
jl loc_100C0A2  +
mov byte ptr [esi+1] 0 +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+28h] +
xor ebx ebx +
cmp edi ebx +
jz loc_100C0C2  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
mov ecx [ebp+2Ch] +
cmp ecx ebx +
jz loc_100C0DE  +
or dword ptr [ecx+8] 0FFFFFFFFh +
or dword ptr [ecx+0Ch] 0FFFFFFFFh +
mov [ecx] ebx +
mov [ecx+4] ebx +
xor eax eax +
lea edi [ecx+10h] +
stos   +
stos   +
stos   +
lea eax [ebp+2Bh] +
push eax  +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+18h]  +
mov [ebp+2Bh] bl +
call dword ptr [ebp+0Ch]  +
cmp [ebp+2Bh] bl +
jnz loc_100C138  +
mov esi [ebp+1Ch] +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_100C13C  +
inc eax  +
mov [esi] eax +
cmp [ebp-8] ebx +
jbe loc_100C118  +
cmp dword ptr [ebp-8] 8 +
ja loc_100C118  +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jz loc_100C13C  +
inc eax  +
mov [esi+4] eax +
cmp [ebp+10h] ebx +
jz loc_100C125  +
push 1  +
push dword ptr [ebp+18h]  +
call dword ptr [ebp+10h]  +
lea eax [ebp+2Bh] +
push eax  +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+18h]  +
call dword ptr [ebp+0Ch]  +
cmp [ebp+2Bh] bl +
jz loc_100C0F7  +
xor eax eax +
jmp loc_100C141  +
mov eax 0C0000095h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 58h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp eax ebx +
jz loc_100C164  +
mov [eax] ebx +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jz loc_100C16D  +
mov [ecx] ebx +
cmp [esi+2] bl +
jnz loc_100C1CC  +
push edi  +
push 4Ch  +
lea eax [ebp+var_54] +
push ebx  +
push eax  +
mov [ebp+var_58] ebx +
call memset  +
add esp 0Ch +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
xor eax eax +
mov [ebp+var_8] ebx +
lea edi [ebp+var_4] +
stos   +
lea eax [ebp+var_58] +
push eax  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push offset loc_100C0A9  +
push offset off_1002A84  +
push 2  +
push dword ptr [esi+0Ch]  +
push 2  +
call sub_100E6AF  +
cmp eax ebx +
pop edi  +
jl loc_100C1E0  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_4] +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov byte ptr [esi+2] 1 +
cmp eax ebx +
jz loc_100C1D5  +
mov edx [esi+4] +
mov [eax] edx +
cmp ecx ebx +
jz loc_100C1DE  +
mov eax [esi+8] +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+1] 0 +
jz loc_100C1FB  +
call sub_100C085  +
lea ecx [esi+10h] +
pop esi  +
jmp loc_1010D5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_100C14D  +
test eax eax +
jl loc_100C21E  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_101D040 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov eax ecx +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_18] eax +
cmp [eax] bl +
jnz loc_100C366  +
mov esi ds:RtlExpandEnvironmentStrings_U +
xor eax eax +
push 10h  +
mov word ptr [ebp+var_28] ax +
pop eax  +
mov word ptr [ebp+var_28+2] ax +
lea eax [ebp+var_14] +
mov [ebp+var_24] eax +
xor eax eax +
mov word ptr [ebp+var_20] ax +
mov word ptr [ebp+var_20+2] ax +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
mov edi offset asc_10012CC +
push edi  +
push ebx  +
mov [ebp+var_1C] ebx +
call esi  +
cmp eax ebx +
jge loc_100C2E9  +
cmp eax 0C0000023h +
jnz loc_100C32A  +
cmp [ebp+var_34] 0FFFFh +
lea ecx [ebp+var_20] +
jbe loc_100C2B3  +
mov esi 0A9h +
mov edi offset aCbsmartbootdri +
mov [ebp+var_18] 0C0000095h +
jmp loc_100C337  +
push [ebp+var_34]  +
call sub_100882E  +
cmp eax ebx +
jge loc_100C2C4  +
lea ecx [ebp+var_20] +
jmp loc_100C320  +
push ebx  +
lea eax [ebp+var_20] +
push eax  +
push edi  +
push ebx  +
call esi  +
cmp eax ebx +
jge loc_100C2DD  +
mov esi 0B0h +
mov edi offset aRtlexpandenv_0 +
jmp loc_100C331  +
mov eax [ebp+var_20] +
mov [ebp+var_28] eax +
mov eax [ebp+var_1C] +
mov [ebp+var_24] eax +
cmp word ptr [ebp+var_28] 4 +
jb loc_100C30A  +
movzx eax word ptr [ebp+var_28] +
mov ecx [ebp+var_24] +
shr eax 1 +
cmp word ptr [ecx+eax*2-4] 5Ch +
jnz loc_100C30A  +
mov eax 0FFFEh +
add word ptr [ebp+var_28] ax +
mov esi [ebp+var_18] +
lea eax [ebp+var_28] +
push eax  +
lea ecx [esi+10h] +
call sub_1010D7C  +
cmp eax ebx +
lea ecx [ebp+var_20] +
jge loc_100C35E  +
mov [ebp+var_18] eax +
call sub_1008288  +
jmp loc_100C369  +
mov esi 0B6h +
xor edi edi +
lea ecx [ebp+var_20] +
mov [ebp+var_18] eax +
call sub_1008288  +
lea eax [ebp+var_30] +
push eax  +
lea ecx [ebp+var_18] +
mov [ebp+var_30] offset aDW7rtmBaseWc_2 +
mov [ebp+var_2C] offset aWindowsRtlXmlt +
mov [ebp+var_28] esi +
mov [ebp+var_24] edi +
call sub_1008207  +
jmp loc_100C369  +
mov byte ptr [esi] 1 +
call sub_1008288  +
mov [ebp+var_18] ebx +
mov ecx [ebp+var_4] +
mov eax [ebp+var_18] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C515  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
mov esi ecx +
call sub_100C14D  +
test eax eax +
jl loc_100C3C3  +
cmp [ebp+var_4] 61A8h +
jbe loc_100C3C1  +
cmp byte ptr [esi] 0 +
jnz loc_100C3B1  +
mov ecx esi +
call sub_100C227  +
test eax eax +
jl loc_100C3C3  +
lea ecx [esi+10h] +
call sub_1010F68  +
test eax eax +
jl loc_100C3C3  +
mov byte ptr [esi+1] 1 +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov dword_101DF70 eax +
mov dword_101DF6C ecx +
mov dword_101DF68 edx +
mov dword_101DF64 ebx +
mov dword_101DF60 esi +
mov dword_101DF5C edi +
mov word_101DF88 ss +
mov word_101DF7C cs +
mov word_101DF58 ds +
mov word_101DF54 es +
mov word_101DF50 fs +
mov word_101DF4C gs +
pushf   +
pop dword_101DF80  +
mov eax [ebp+0] +
mov dword_101DF74 eax +
mov eax [ebp+4] +
mov dword_101DF78 eax +
lea eax [ebp+8] +
mov dword_101DF84 eax +
mov eax dword_101DF78 +
mov dword_101DE7C eax +
mov eax dword_101D040 +
mov dword_101DEC0 10001h +
mov dword_101DE70 0C0000409h +
mov dword_101DE74 1 +
mov [ebp-8] eax +
mov eax dword_101D044 +
push offset off_1002B94  +
mov [ebp-4] eax +
call RtlUnhandledExceptionFilter  +
push 0C0000409h  +
push 0FFFFFFFFh  +
call NtTerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_100C49C  +
pause   +
mov ecx ds:7FFE0324h +
mov edx ds:7FFE0320h +
mov eax ds:7FFE0328h +
cmp ecx eax +
jnz loc_100C49A  +
mov eax ds:7FFE0004h +
mul  edx +
shl ecx 8 +
imul ecx ds:7FFE0004h +
shrd eax edx +
add eax ecx +
mov ecx [ebp+arg_0] +
shr edx 18h +
xor eax ecx +
mov [ecx] eax +
jz loc_100C4DB  +
cmp eax 0BB40E64Eh +
jnz loc_100C4E1  +
mov dword ptr [ecx] 0BB40E64Fh +
pop ebp  +
retn   +
***
mov eax dword_101D040 +
test eax eax +
jz loc_100C4F8  +
cmp eax 0BB40E64Eh +
jnz loc_100C508  +
push offset dword_101D040  +
call sub_100C493  +
mov eax dword_101D040 +
pop ecx  +
not eax  +
mov dword_101D044 eax +
retn   +
***
cmp ecx dword_101D040 +
jnz loc_100C520  +
retn 0  +
jmp loc_100C3CB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push dword ptr [eax+10h]  +
xor esi esi +
mov [ebp+var_1C] esi +
call ds:RtlNormalizeProcessParams  +
mov edi eax +
lea eax [ebp+var_1C] +
mov [ebp+var_24] eax +
mov [ebp+var_20] eax +
xor eax eax +
inc eax  +
mov [ebp+var_2C] edi +
mov [ebp+var_14] esi +
mov [ebp+var_18] esi +
mov [ebp+var_8] esi +
mov [ebp+var_10] eax +
mov [ebp+var_C] esi +
cmp edi esi +
jz loc_100C655  +
mov eax [edi+0Ch] +
lea esi [edi+40h] +
mov ebx [esi+4] +
mov [ebp+var_14] eax +
test ebx ebx +
jz loc_100C5CB  +
cmp word ptr [esi] 0 +
jnz loc_100C5D5  +
lea esi [edi+38h] +
mov ebx [esi+4] +
test ebx ebx +
jz loc_100C647  +
movzx eax word ptr [esi] +
mov [ebp+var_4] eax +
test eax eax +
jbe loc_100C64A  +
cmp word ptr [ebx] 0 +
jz loc_100C64A  +
cmp [ebp+var_4] 0 +
jbe loc_100C60A  +
movzx eax word ptr [ebx] +
test ax ax +
jz loc_100C606  +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jz loc_100C606  +
inc ebx  +
inc ebx  +
sub [ebp+var_4] 2 +
jnz loc_100C5EB  +
cmp [ebp+var_4] 0 +
jz loc_100C64A  +
cmp word ptr [ebx] 0 +
jz loc_100C63F  +
inc [ebp+var_10]  +
mov [ebp+var_28] ebx +
inc ebx  +
inc ebx  +
sub [ebp+var_4] 2 +
jz loc_100C62E  +
movzx eax word ptr [ebx] +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jz loc_100C618  +
mov ecx [ebp+var_8] +
mov eax ebx +
sub eax [ebp+var_28] +
sar eax 1 +
lea eax [ecx+eax*2+2] +
mov [ebp+var_8] eax +
cmp [ebp+var_4] 0 +
ja loc_100C5DF  +
jmp loc_100C64A  +
mov ebx [ebp+arg_0] +
push dword ptr [edi+48h]  +
call sub_100C7BF  +
inc eax  +
jmp loc_100C658  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+var_10] +
add eax ecx +
cmp eax 2 +
jbe loc_100C76F  +
cmp ecx 1 +
jbe loc_100C674  +
movzx ecx word ptr [esi] +
mov ebx [esi+4] +
mov [ebp+var_4] ecx +
mov edi eax +
mov eax large fs:18h +
and dword ptr [eax+0BF4h] 0 +
mov eax [ebp+arg_0] +
shl edi 2 +
add [ebp+var_8] edi +
push [ebp+var_8]  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov esi eax +
test esi esi +
jnz loc_100C6C3  +
mov eax large fs:18h +
mov eax [eax+0BF4h] +
mov [ebp+var_C] eax +
test eax eax +
jl loc_100C76F  +
mov [ebp+var_C] 0C0000017h +
jmp loc_100C76F  +
cmp [ebp+var_10] 1 +
mov [ebp+var_24] esi +
jbe loc_100C75A  +
mov eax [ebp+var_8] +
add eax esi +
mov [ebp+arg_0] eax +
add edi esi +
jmp loc_100C754  +
cmp edi [ebp+arg_0] +
jnb loc_100C75A  +
cmp word ptr [ebx] 0 +
jz loc_100C75A  +
cmp [ebp+var_4] 0 +
jbe loc_100C70C  +
movzx eax word ptr [ebx] +
test ax ax +
jz loc_100C708  +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jz loc_100C708  +
inc ebx  +
inc ebx  +
sub [ebp+var_4] 2 +
jnz loc_100C6ED  +
cmp [ebp+var_4] 0 +
jz loc_100C75A  +
cmp word ptr [ebx] 0 +
jz loc_100C754  +
mov [esi] edi +
add esi 4 +
inc [ebp+var_18]  +
mov ax [ebx] +
mov [edi] ax +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
sub [ebp+var_4] 2 +
jz loc_100C73F  +
cmp edi [ebp+arg_0] +
jnb loc_100C74D  +
movzx eax word ptr [ebx] +
push eax  +
call iswspace  +
pop ecx  +
test eax eax +
jz loc_100C71C  +
cmp edi [ebp+arg_0] +
jnb loc_100C74D  +
xor eax eax +
mov [edi] ax +
inc edi  +
inc edi  +
jmp loc_100C754  +
dec edi  +
dec edi  +
xor eax eax +
mov [edi] ax +
cmp [ebp+var_4] 0 +
ja loc_100C6DC  +
and dword ptr [esi] 0 +
mov eax [ebp+var_2C] +
add esi 4 +
push esi  +
push dword ptr [eax+48h]  +
mov [ebp+var_20] esi +
call sub_100C7ED  +
cmp [ebp+var_14] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100C779  +
int 3  +
cmp [ebp+var_C] 0 +
jl loc_100C796  +
push [ebp+var_14]  +
push [ebp+var_20]  +
push [ebp+var_24]  +
push [ebp+var_18]  +
call sub_100986B  +
add esp 10h +
mov [ebp+var_C] eax +
push [ebp+var_C]  +
push 0FFFFFFFFh  +
call ds:__imp_NtTerminateProcess  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_100C4E8  +
pop ebp  +
jmp loc_100C571  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_100C7E4  +
cmp [ecx] ax +
jz loc_100C7E4  +
inc ecx  +
inc ecx  +
inc eax  +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_100C7D5  +
cmp [ecx] dx +
jnz loc_100C7D2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor edx edx +
cmp eax edx +
jz loc_100C81D  +
cmp [eax] dx +
jz loc_100C81D  +
mov ecx [ebp+arg_4] +
push esi  +
mov [ecx] eax +
add ecx 4 +
inc eax  +
inc eax  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_100C80B  +
cmp [eax] dx +
jnz loc_100C804  +
pop esi  +
jmp loc_100C820  +
mov ecx [ebp+arg_4] +
mov [ecx] edx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ecx  +
push edx  +
call sub_100F6C1  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-4] +
push eax  +
mov [ebp-4] ecx +
call sub_100E98D  +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
add eax 4 +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_101135B  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
and [ebp+arg_0] 0 +
and [ebp+var_8] 0 +
push edi  +
mov edi [esi+0CCh] +
lea ebx [esi+4] +
mov [ebp+var_4] offset dword_1002FC8 +
push 0  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
push ebx  +
call edi  +
test eax eax +
jl loc_100C8CF  +
cmp [ebp+var_C] 0 +
jz loc_100C8D2  +
add [ebp+var_8] 0Ch +
inc [ebp+arg_0]  +
add [ebp+var_4] 0Ch +
cmp [ebp+var_8] 0CCh +
jb loc_100C8A0  +
jmp loc_100C8F8  +
push eax  +
jmp loc_100C903  +
push 38h  +
lea eax [esi+9A8h] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_0] +
add esp 0Ch +
imul eax eax +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call ds:off_1002FD0[eax]  +
cmp [ebp+arg_0] 11h +
jnz loc_100C908  +
push 0C000000Dh  +
call sub_100F67B  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax [ebp+10h] +
push ebx  +
mov ebx [ebp+8] +
mov byte ptr [eax] 0 +
and dword ptr [ebx+99Ch] 0 +
lea eax [ebx+93Ch] +
cmp dword ptr [eax] 0 +
push esi  +
push edi  +
mov [ebp+8] eax +
jz loc_100C9F4  +
cmp byte ptr [ebx+978h] 0 +
jnz loc_100C9BF  +
lea eax [ebx+8C0h] +
push eax  +
lea eax [ebp-98h] +
push eax  +
lea eax [ebx+5D8h] +
push eax  +
lea eax [ebx+4] +
push eax  +
call sub_1014FE0  +
mov [ebx+99Ch] eax +
test eax eax +
jl loc_100C9F4  +
cmp dword ptr [ebp-98h] 1 +
jz loc_100C9E4  +
cmp dword ptr [ebp-98h] 0 +
jz loc_100CA17  +
cmp dword ptr [ebp-98h] 4 +
jnz loc_100C94D  +
push 4  +
xor eax eax +
pop ecx  +
lea edi [ebx+8FCh] +
lea esi [ebp-40h] +
cmps   +
mov edi [ebp+8] +
setz al  +
push 4  +
xor edx edx +
pop ecx  +
lea esi [ebp-40h] +
cmps   +
setz cl  +
test al al +
jnz loc_100CA27  +
test cl cl +
jz loc_100C94D  +
push 40h  +
push 0  +
push dword ptr [ebp+8]  +
call memset  +
add esp 0Ch +
lea esi [ebx+8C0h] +
push esi  +
lea ecx [ebp-98h] +
lea edi [ebx+5D8h] +
push ecx  +
jmp loc_100CA55  +
push 0C000000Dh  +
call sub_100F67B  +
mov [ebx+99Ch] eax +
mov eax [ebp+8] +
cmp dword ptr [eax] 0 +
jz loc_100C9BF  +
mov eax [ebp+10h] +
push 0C000000Dh  +
mov byte ptr [eax] 1 +
call sub_100F67B  +
mov [ebx+99Ch] eax +
jmp loc_100CAE1  +
push 7  +
lea edi [ebx+97Ch] +
pop ecx  +
lea esi [ebp-78h] +
movs   +
jmp loc_100C9E4  +
***
mov eax [ebp+10h] +
mov byte ptr [eax] 1 +
jmp loc_100CAE1  +
cmp dword ptr [ebp-98h] 1 +
jz loc_100CA80  +
cmp dword ptr [ebp-98h] 0 +
jz loc_100CA92  +
cmp dword ptr [ebp-98h] 3 +
jz loc_100CAB5  +
push esi  +
lea eax [ebp-98h] +
push eax  +
push edi  +
lea eax [ebx+4] +
push eax  +
call sub_1014FE0  +
cmp dword ptr [ebp-98h] 4 +
mov [ebx+99Ch] eax +
jnz loc_100CA32  +
push 4  +
pop ecx  +
lea edi [ebx+8FCh] +
lea esi [ebp-40h] +
xor eax eax +
cmps   +
jz loc_100CA27  +
push 0C000000Dh  +
call sub_100F67B  +
mov [ebx+99Ch] eax +
jmp loc_100CA27  +
***
push 0C000000Dh  +
call sub_100F67B  +
push 7  +
lea edi [ebx+97Ch] +
pop ecx  +
lea esi [ebp-78h] +
mov [ebx+99Ch] eax +
movs   +
jmp loc_100CA27  +
***
push dword ptr [ebp+0Ch]  +
lea eax [ebp-78h] +
push eax  +
push ebx  +
call sub_100C87A  +
mov [ebx+99Ch] eax +
test eax eax +
mov eax [ebp+10h] +
jl loc_100CA2A  +
mov edi [ebp+8] +
push 10h  +
pop ecx  +
lea esi [ebp-78h] +
movs   +
mov byte ptr [eax] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test byte ptr [esi] 2 +
jz loc_100CB04  +
lea eax [esi+4] +
push eax  +
call sub_1014A7E  +
test byte ptr [esi] 1 +
jz loc_100CB15  +
lea eax [esi+5D8h] +
push eax  +
call sub_1016A8F  +
test byte ptr [esi] 4 +
jz loc_100CB26  +
lea eax [esi+8C0h] +
push eax  +
call sub_10169C1  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push 0Ah  +
pop ecx  +
xor eax eax +
mov [ebp+var_2C] 2Ch +
lea edi [ebp+var_28] +
stos   +
xor ebx ebx +
lea edi [esi+8ECh] +
push edi  +
push ebx  +
push ebx  +
push 1Eh  +
push 4Ch  +
lea eax [esi+8C0h] +
push eax  +
mov [esi] ebx +
mov [esi+8F8h] ebx +
mov dword ptr [edi] offset loc_100C82B +
mov dword ptr [esi+8F0h] offset loc_100C83C +
mov [esi+8F4h] ebx +
call sub_10167AB  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_100CBED  +
or dword ptr [esi] 4 +
push edi  +
push esi  +
push offset loc_100C857  +
lea eax [esi+5D8h] +
push eax  +
call sub_1016A2B  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_100CBED  +
or dword ptr [esi] 1 +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
mov eax [eax] +
mov [ebp+var_1C] eax +
lea eax [ebp+var_2C] +
push eax  +
lea eax [esi+4] +
push eax  +
mov [ebp+var_2C] 2Ch +
mov [ebp+var_28] edi +
mov [ebp+var_4] ebx +
mov [ebp+var_24] 20h +
mov [ebp+var_20] ecx +
call sub_1014A9A  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_100CBED  +
or dword ptr [esi] 2 +
jmp loc_100CBF3  +
push esi  +
call sub_100CAED  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+2Ch]  +
mov eax dword_101E1A4 +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
test eax eax +
jz loc_100CC2F  +
call eax  +
jmp loc_100CC34  +
call sub_100FF08  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
xor eax eax +
mov [esi] ax +
lea eax [ebp+arg_8] +
push eax  +
push esi  +
push [ebp+arg_4]  +
add ebx 4 +
push ebx  +
push 1  +
call sub_10165AE  +
mov ecx 0C0000023h +
test eax eax +
jge loc_100CC71  +
cmp eax ecx +
jnz loc_100CCD9  +
cmp [ebp+arg_8] 0FFFFh +
jbe loc_100CC81  +
push 0C0000095h  +
jmp loc_100CCD4  +
cmp eax ecx +
jnz loc_100CCD9  +
push edi  +
push [ebp+arg_8]  +
xor eax eax +
mov word ptr [ebp+var_8] ax +
lea edi [ebp+var_8+2] +
stos   +
stos   +
lea eax [ebp+var_4] +
push eax  +
call sub_100F6C1  +
pop edi  +
test eax eax +
jl loc_100CCD9  +
lea eax [esi+4] +
push eax  +
call sub_100E98D  +
mov ax word ptr [ebp+arg_8] +
mov word ptr [ebp+var_8+2] ax +
mov eax [ebp+var_8] +
mov [esi] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
lea eax [ebp+arg_8] +
push eax  +
push esi  +
push [ebp+arg_4]  +
push ebx  +
push 1  +
call sub_10165AE  +
test eax eax +
jge loc_100CCD9  +
push eax  +
call sub_100F67B  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
and dword ptr [esi] 0 +
push edi  +
lea eax [ebp+arg_8] +
push eax  +
lea edi [esi+8] +
push dword ptr [edi]  +
add ebx 4 +
push dword ptr [esi+4]  +
push [ebp+arg_4]  +
push ebx  +
call sub_101378B  +
test eax eax +
jge loc_100CD20  +
cmp eax 0C0000023h +
jz loc_100CD27  +
push eax  +
call sub_100F67B  +
jmp loc_100CD63  +
cmp eax 0C0000023h +
jnz loc_100CD5E  +
push [ebp+arg_8]  +
lea eax [ebp+arg_0] +
push eax  +
call sub_100F6C1  +
test eax eax +
jl loc_100CD63  +
push edi  +
call sub_100E98D  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_8] +
and dword ptr [esi] 0 +
lea edx [ebp+arg_8] +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_4]  +
mov [esi+4] eax +
push ebx  +
mov [edi] ecx +
call sub_101378B  +
test eax eax +
jl loc_100CD18  +
mov ecx [ebp+arg_8] +
mov [esi] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100CD93  +
lea eax [esi+4] +
cmp dword ptr [eax] 0 +
jz loc_100CD93  +
push eax  +
call sub_100E98D  +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ecx ecx +
push esi  +
push edi  +
cmp eax ecx +
jz loc_100CE10  +
cmp [eax+0Ch] ecx +
jz loc_100CE10  +
mov esi [ebp+arg_0] +
mov [ebp+var_4] ecx +
lea edi [esi+4] +
mov ebx offset dword_1003094 +
mov [ebp+arg_0] ecx +
push 0  +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
push [ebp+arg_4]  +
push edi  +
call dword ptr [esi+0CCh]  +
test eax eax +
jl loc_100CE1B  +
cmp [ebp+var_8] 0 +
jz loc_100CDFD  +
add [ebp+arg_0] 0Ch +
inc [ebp+var_4]  +
add ebx 0Ch +
cmp [ebp+arg_0] 24h +
jb loc_100CDC6  +
push 0C000000Dh  +
call sub_100F67B  +
jmp loc_100CE1B  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_8] +
imul eax eax +
mov eax ds:dword_100309C[eax] +
mov [ecx] eax +
jmp loc_100CE19  +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 2 +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
xor eax eax +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_C] ebx +
lea edi [ebp+var_8] +
stos   +
stos   +
xor eax eax +
mov [ebp+var_18] ebx +
lea edi [ebp+var_14] +
stos   +
stos   +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_4] +
mov [eax] ebx +
mov eax [edi+0Ch] +
cmp eax 7FFFFFFFh +
jbe loc_100CE64  +
mov esi 0C0000095h +
jmp loc_100CF28  +
lea ecx [ebp+var_C] +
push ecx  +
add eax eax +
push eax  +
call sub_1017408  +
mov esi eax +
cmp esi ebx +
jl loc_100CF28  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
push [ebp+arg_0]  +
call sub_100CCE4  +
mov esi eax +
cmp esi ebx +
jl loc_100CF28  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
push 3Ah  +
push ebx  +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
push 1  +
call sub_1017714  +
mov esi eax +
cmp esi ebx +
jl loc_100CF28  +
cmp [ebp+var_24] ebx +
jnz loc_100CEBA  +
mov esi 0C000000Dh +
jmp loc_100CF28  +
xor edi edi +
mov [ebp+arg_0] offset dword_10030B8 +
lea eax [ebp+arg_4+3] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
lea eax [ebp+var_30] +
push eax  +
call sub_1017147  +
mov esi eax +
cmp esi ebx +
jl loc_100CF28  +
cmp byte ptr [ebp+arg_4+3] bl +
jnz loc_100CEE9  +
add [ebp+arg_0] 10h +
inc edi  +
cmp edi 1 +
jb loc_100CEC3  +
cmp edi 1 +
jz loc_100CEB3  +
shl edi 4 +
mov edi ds:dword_10030C4[edi] +
dec edi  +
dec edi  +
jz loc_100CF02  +
mov esi 0C00000E5h +
jmp loc_100CF28  +
push ebx  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
lea eax [ebp+var_24] +
push eax  +
push ebx  +
call sub_10193DC  +
mov esi eax +
cmp esi ebx +
jl loc_100CF28  +
mov eax [ebp+var_10] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
lea edi [ebp+var_18] +
stos   +
stos   +
stos   +
cmp [ebp+var_4] ebx +
jz loc_100CF35  +
lea ecx [ebp+var_C] +
call sub_1017A30  +
cmp [ebp+var_10] ebx +
jz loc_100CF42  +
lea ecx [ebp+var_18] +
call sub_1017B83  +
cmp esi ebx +
jge loc_100CF4C  +
push esi  +
call sub_100F67B  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
push 0C0000002h  +
call sub_100F67B  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov ecx [ebp+8] +
push 10h  +
pop edx  +
mov [eax] edx +
mov [ecx+9A0h] edx +
add ecx 9A8h +
mov [eax+4] ecx +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
lea ecx [eax-30h] +
cmp ecx 9 +
ja loc_100CFA2  +
add eax 0FFFFFFD0h +
retn   +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_100CFAE  +
add eax 0FFFFFFA9h +
retn   +
lea ecx [eax-41h] +
cmp ecx 5 +
ja loc_100CFBA  +
add eax 0FFFFFFC9h +
retn   +
or eax 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
and [ebp+var_10] 0 +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
add ecx 4 +
lea edx [ebp+var_54] +
stos   +
call sub_1013723  +
test eax eax +
jge loc_100CFF8  +
push eax  +
call sub_100F67B  +
jmp loc_100D0E2  +
mov edi [ebp+arg_4] +
mov eax [edi+0Ch] +
test al 1 +
jz loc_100D009  +
push 0C000000Dh  +
jmp loc_100CFEE  +
push esi  +
shr eax 1 +
mov esi eax +
lea eax [ebp+var_10] +
push eax  +
push esi  +
mov [ebp+arg_0] esi +
call sub_100FED2  +
test eax eax +
jl loc_100D0E1  +
cmp [ebp+var_C] esi +
jnb loc_100D032  +
mov eax 0C00000E5h +
jmp loc_100D0E1  +
mov ecx [edi] +
mov edi [edi+4] +
add edi ecx +
push ebx  +
cmp ecx edi +
jnb loc_100D093  +
mov eax [ebp+arg_0] +
cmp [ebp+var_4] eax +
jnb loc_100D091  +
mov edx edi +
call [ebp+var_3C]  +
mov esi edx +
cmp eax 0FFFFFFFFh +
jz loc_100D0B0  +
call sub_100CF96  +
mov ebx eax +
cmp esi edi +
jnb loc_100D0C3  +
mov edx edi +
mov ecx esi +
call [ebp+var_3C]  +
cmp eax 0FFFFFFFFh +
jz loc_100D0B3  +
call sub_100CF96  +
mov ecx edx +
cmp ebx 0FFFFFFFFh +
jz loc_100D0C3  +
cmp eax 0FFFFFFFFh +
jz loc_100D0C3  +
mov esi [ebp+var_8] +
shl bl 4 +
and al 0Fh +
or al bl +
mov ebx [ebp+var_4] +
inc [ebp+var_4]  +
mov [esi+ebx] al +
cmp edx edi +
jb loc_100D03E  +
cmp ecx edi +
jnz loc_100D0C3  +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_0] +
jnz loc_100D0C3  +
mov [ebp+var_10] eax +
cmp eax [ebp+var_C] +
jbe loc_100D0B6  +
push 0C00000E5h  +
call ds:RtlRaiseStatus  +
push esi  +
jmp loc_100D0C8  +
push edx  +
jmp loc_100D0C8  +
mov edi [ebp+arg_8] +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
xor esi esi +
jmp loc_100D0DE  +
push 0C000000Dh  +
call sub_100F67B  +
cmp [ebp+var_8] 0 +
mov esi eax +
jz loc_100D0DE  +
lea eax [ebp+var_8] +
push eax  +
call sub_100E98D  +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
and [ebp+var_1C] 0 +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_18] +
stos   +
add ecx 4 +
lea edx [ebp+var_70] +
stos   +
call sub_1013723  +
test eax eax +
jl loc_100D17E  +
mov edi [ebp+arg_4] +
push esi  +
mov esi [edi+0Ch] +
add esi 3 +
shr esi 2 +
imul esi esi +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
call sub_100FED2  +
test eax eax +
jl loc_100D17D  +
cmp [ebp+var_18] esi +
jnb loc_100D140  +
mov eax 0C00000E5h +
jmp loc_100D17D  +
mov eax [edi] +
push ebx  +
mov ebx [edi+4] +
add ebx eax +
mov [ebp+arg_4] eax +
mov [ebp+var_8] ebx +
cmp eax ebx +
jnz loc_100D185  +
mov eax [ebp+var_4] +
mov edi [ebp+arg_8] +
mov [ebp+var_1C] eax +
lea esi [ebp+var_1C] +
movs   +
movs   +
movs   +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
stos   +
stos   +
xor esi esi +
cmp [ebp+var_14] 0 +
jz loc_100D17A  +
lea eax [ebp+var_14] +
push eax  +
call sub_100E98D  +
mov eax esi +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn 0Ch  +
mov ebx eax +
xor eax eax +
lea edi [ebp+var_28] +
stos   +
stos   +
stos   +
xor edi edi +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jnb loc_100D1DF  +
mov edx ebx +
call [ebp+var_58]  +
mov [ebp+var_C] edx +
cmp eax 0FFFFFFFFh +
jz loc_100D25C  +
cmp eax 28h +
jb loc_100D1BC  +
lea ecx [eax-28h] +
cmp ecx 53h +
jnb loc_100D1BC  +
mov cl ds:byte_10030A0[eax] +
jmp loc_100D1BF  +
or cl 0FFh +
movzx edx cl +
cmp edx 0FFFFFFFFh +
jz loc_100D269  +
mov edx [ebp+var_C] +
mov [ebp+edi*4+var_2C] eax +
mov byte ptr [ebp+edi+arg_0] cl +
inc edi  +
mov [ebp+arg_4] edx +
cmp edi 4 +
jb loc_100D18F  +
cmp edi 4 +
jnz loc_100D269  +
mov cl byte ptr [ebp+arg_0+1] +
mov al byte ptr [ebp+arg_0] +
mov bl byte ptr [ebp+arg_0+1] +
mov edi [ebp+var_4] +
shr cl 4 +
shl al 2 +
and cl 3 +
or cl al +
mov al byte ptr [ebp+arg_0+2] +
mov dl al +
shr dl 2 +
and dl 0Fh +
shl bl 4 +
shl al 6 +
or al byte ptr [ebp+arg_0+3] +
or dl bl +
cmp edi esi +
jnb loc_100D270  +
mov ebx [ebp+var_14] +
mov [ebx+edi] cl +
inc edi  +
cmp [ebp+var_24] 3Dh +
mov [ebp+var_4] edi +
jz loc_100D237  +
cmp edi esi +
jnb loc_100D270  +
mov ecx [ebp+var_14] +
mov [ecx+edi] dl +
inc edi  +
mov [ebp+var_4] edi +
cmp [ebp+var_20] 3Dh +
jz loc_100D24B  +
cmp edi esi +
jnb loc_100D270  +
mov ecx [ebp+var_14] +
mov [ecx+edi] al +
inc edi  +
mov [ebp+var_4] edi +
mov eax [ebp+var_8] +
cmp [ebp+arg_4] eax +
jnz loc_100D183  +
jmp loc_100D152  +
push edx  +
call sub_100F67B  +
mov esi eax +
jmp loc_100D16B  +
push 0C000000Dh  +
jmp loc_100D25D  +
mov eax 0C00000E5h +
jmp loc_100D17C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
and dword ptr [ecx] 0 +
and dword ptr [ecx+4] 0 +
and dword ptr [ecx+8] 0 +
test [ebp+arg_4] 0FFFF0000h +
movzx edx word ptr [ebp+arg_4] +
mov eax 0C000000Dh +
jz loc_100D2B0  +
push 0C0000002h  +
call sub_100F67B  +
jmp loc_100D2E7  +
cmp edx 1 +
jnz loc_100D2C3  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100CFC3  +
jmp loc_100D2E7  +
cmp edx 2 +
jnz loc_100D2D6  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100D0EC  +
jmp loc_100D2E7  +
cmp edx 3 +
jnz loc_100D2E7  +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100CCE4  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
push edi  +
xor eax eax +
lea edi [ebp+var_18] +
mov [ebp+var_1C] esi +
stos   +
mov edi [ebp+arg_8] +
add ecx 4 +
lea edx [ebp+var_60] +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] 0Ah +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [edi] esi +
mov [edi+4] esi +
call sub_1013723  +
cmp eax esi +
jl loc_100D4A5  +
mov eax [ebp+arg_4] +
mov esi [eax] +
push ebx  +
mov ebx [eax+4] +
add ebx esi +
cmp esi ebx +
jnb loc_100D35E  +
mov edx ebx +
mov ecx esi +
call [ebp+var_48]  +
cmp eax 0FFFFFFFFh +
jz loc_100D3A2  +
cmp eax 20h +
ja loc_100D364  +
mov esi edx +
cmp edx ebx +
jb loc_100D345  +
jmp loc_100D364  +
mov edx [ebp+var_18] +
mov eax [ebp+var_1C] +
cmp eax 2Dh +
jz loc_100D36E  +
cmp eax 2Bh +
jnz loc_100D373  +
mov [ebp+var_C] eax +
mov esi edx +
cmp esi ebx +
jnb loc_100D462  +
mov edx ebx +
mov ecx esi +
call [ebp+var_48]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jnz loc_100D38F  +
push ecx  +
jmp loc_100D47E  +
cmp eax 30h +
jnz loc_100D3FE  +
cmp ecx ebx +
jnb loc_100D3FE  +
mov edx ebx +
call [ebp+var_48]  +
cmp eax 0FFFFFFFFh +
jnz loc_100D3A8  +
push edx  +
jmp loc_100D47E  +
cmp eax 78h +
jz loc_100D3EE  +
cmp eax 58h +
jz loc_100D3EE  +
cmp eax 6Eh +
jnz loc_100D3C4  +
and [ebp+var_8] 0 +
mov [ebp+var_4] 0Ah +
jmp loc_100D3FC  +
cmp eax 6Fh +
jnz loc_100D3D9  +
mov [ebp+var_4] 8 +
mov [ebp+var_8] 3 +
jmp loc_100D3FC  +
cmp eax 62h +
jnz loc_100D3FE  +
mov [ebp+var_4] 2 +
mov [ebp+var_8] 1 +
jmp loc_100D3FC  +
mov [ebp+var_4] 10h +
mov [ebp+var_8] 4 +
mov esi edx +
cmp esi ebx +
jnb loc_100D462  +
mov edx ebx +
mov ecx esi +
call [ebp+var_48]  +
mov esi edx +
mov [ebp+var_18] esi +
cmp eax 0FFFFFFFFh +
jz loc_100D485  +
call sub_100CF96  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_100D479  +
cmp edi [ebp+var_4] +
ja loc_100D479  +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_100D43E  +
mov eax [ebp+var_14] +
mov edx [ebp+var_10] +
call _allshl  +
xor ecx ecx +
or eax edi +
or edx ecx +
jmp loc_100D454  +
push [ebp+var_10]  +
push [ebp+var_14]  +
push 0  +
push [ebp+var_4]  +
call _allmul  +
xor ecx ecx +
add eax edi +
adc edx ecx +
mov [ebp+var_10] edx +
mov [ebp+var_14] eax +
cmp [ebp+var_18] ebx +
jb loc_100D402  +
mov edi [ebp+arg_8] +
cmp [ebp+var_C] 2Dh +
jnz loc_100D497  +
cmp [ebp+var_10] 7FFFFFFFh +
jb loc_100D488  +
ja loc_100D479  +
cmp [ebp+var_14] 0FFFFFFFFh +
jbe loc_100D488  +
push 0C000000Dh  +
call sub_100F67B  +
jmp loc_100D4A4  +
push esi  +
jmp loc_100D47E  +
mov eax [ebp+var_14] +
mov ecx [ebp+var_10] +
neg eax  +
adc ecx 0 +
neg ecx  +
jmp loc_100D49D  +
mov eax [ebp+var_14] +
mov ecx [ebp+var_10] +
mov [edi] eax +
mov [edi+4] ecx +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+9A0h] +
push edi  +
dec eax  +
xor edi edi +
cmp eax 0Eh +
ja loc_100D59D  +
jmp ds:off_100D5BC[eax*4]  +
lea eax [esi+9B0h] +
push eax  +
call sub_100CD6F  +
lea eax [esi+9B8h] +
push eax  +
call sub_100CD6F  +
lea eax [esi+9C0h] +
cmp [eax] edi +
jz loc_100D59D  +
push eax  +
call sub_100E98D  +
jmp loc_100D59D  +
lea eax [esi+9ACh] +
push eax  +
call sub_100CD6F  +
lea eax [esi+9B4h] +
jmp loc_100D597  +
lea eax [esi+9ACh] +
push eax  +
call sub_100CD6F  +
lea eax [esi+9B4h] +
push eax  +
call sub_100F6A1  +
jmp loc_100D59D  +
lea eax [esi+9B0h] +
push eax  +
call sub_100CD6F  +
lea eax [esi+9B8h] +
jmp loc_100D4F1  +
***
lea eax [esi+9B4h] +
push eax  +
call sub_100CD6F  +
lea eax [esi+9B0h] +
jmp loc_100D4F1  +
***
lea eax [esi+9ACh] +
push eax  +
call sub_100CD6F  +
lea eax [esi+9B4h] +
push eax  +
call sub_100CD6F  +
lea eax [esi+9C0h] +
jmp loc_100D52A  +
***
lea eax [esi+9ACh] +
push eax  +
call sub_100CD6F  +
lea eax [esi+9B4h] +
jmp loc_100D4F1  +
***
lea eax [esi+9ACh] +
push eax  +
call sub_100CD6F  +
push 38h  +
mov [esi+9A0h] edi +
push edi  +
add esi 9A8h +
push esi  +
call memset  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor eax eax +
mov [ebp+var_24] ebx +
lea edi [ebp+var_20] +
stos   +
stos   +
push ebx  +
lea eax [ebp+var_18] +
push eax  +
call sub_1011036  +
mov eax [ebp+arg_4] +
mov [ebp+var_4] ebx +
cmp [eax+38h] ebx +
jbe loc_100D676  +
mov edi [ebp+arg_0] +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
lea eax [edi+8C0h] +
push eax  +
call sub_10168FA  +
mov esi eax +
cmp esi ebx +
jl loc_100D67B  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push offset dword_1002FC0  +
push [ebp+arg_0]  +
lea eax [edi+4] +
push eax  +
call dword ptr [edi+0CCh]  +
mov esi eax +
cmp esi ebx +
jl loc_100D67B  +
cmp [ebp+var_8] ebx +
jz loc_100D691  +
inc [ebp+var_4]  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_4] +
cmp ecx [eax+38h] +
jb loc_100D62C  +
mov esi 0C015001Ah +
cmp [ebp+var_1C] ebx +
jz loc_100D688  +
lea ecx [ebp+var_24] +
call sub_1017A30  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
lea eax [ebp+var_24] +
push eax  +
mov eax [ebp+arg_0] +
add eax 20h +
push eax  +
push edi  +
call sub_100CCE4  +
mov esi eax +
cmp esi ebx +
jl loc_100D67B  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
call sub_101106F  +
mov esi eax +
cmp esi ebx +
jl loc_100D67B  +
cmp [ebp+var_18] ebx +
jz loc_100D6C7  +
mov esi 0C00000E5h +
jmp loc_100D67B  +
cmp [ebp+var_10] ebx +
jnz loc_100D676  +
mov ax [ebp+var_A] +
cmp ax [ebp+var_12] +
jz loc_100D67B  +
mov esi 0C0000059h +
jmp loc_100D67B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
sub esp 0A0h +
push ebx  +
xor ebx ebx +
mov [eax] bl +
mov eax [ebp+arg_4] +
cmp eax 1 +
jnb loc_100D70E  +
push 0C00000E5h  +
call sub_100F67B  +
mov ebx eax +
jmp loc_100D7D4  +
push esi  +
mov esi [ebp+arg_0] +
cmp [esi+8F8h] eax +
jnz loc_100D7D3  +
push edi  +
lea edi [esi+8C0h] +
push edi  +
lea ecx [ebp+var_A0] +
push ecx  +
push ebx  +
jmp loc_100D75B  +
mov eax [ebp+var_A0] +
sub eax 0 +
jz loc_100D7C6  +
dec eax  +
jz loc_100D7D2  +
dec eax  +
dec eax  +
jz loc_100D76C  +
dec eax  +
jz loc_100D7D2  +
push edi  +
lea eax [ebp+var_A0] +
push eax  +
push 0  +
lea eax [esi+4] +
push eax  +
call sub_1014FE0  +
mov ebx eax +
test ebx ebx +
jge loc_100D730  +
jmp loc_100D7D2  +
xor eax eax +
mov word ptr [ebp+var_8] ax +
lea edi [ebp+var_8+2] +
stos   +
stos   +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_80] +
push eax  +
push esi  +
call sub_100CC3D  +
mov ebx eax +
test ebx ebx +
jl loc_100D7D2  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
push 0  +
push dword ptr [eax+ecx*4-4]  +
lea eax [ebp+var_8] +
push eax  +
call ds:RtlEqualUnicodeString  +
test al al +
jz loc_100D7BA  +
mov eax [ebp+arg_C] +
lea edi [esi+8FCh] +
push 10h  +
pop ecx  +
lea esi [ebp+var_80] +
movs   +
mov byte ptr [eax] 1 +
lea eax [ebp+var_8] +
push eax  +
call ds:RtlFreeUnicodeString  +
jmp loc_100D7D2  +
push 0C000000Dh  +
call sub_100F67B  +
mov ebx eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
sub esp 0A8h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor esi esi +
mov byte ptr [eax] 0 +
lea eax [ebx+8C0h] +
push eax  +
lea eax [ebp+var_A8] +
push eax  +
push 0  +
lea eax [ebx+4] +
push eax  +
call sub_1014FE0  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100D915  +
mov eax [ebp+var_A8] +
sub eax 0 +
jz loc_100D908  +
dec eax  +
jz loc_100D915  +
dec eax  +
dec eax  +
jz loc_100D861  +
dec eax  +
jnz loc_100D8FD  +
lea eax [ebx+8F8h] +
mov ecx [eax] +
lea edx [ecx-1] +
mov [eax] edx +
cmp ecx esi +
jnz loc_100D8FD  +
test esi esi +
jz loc_100D915  +
dec esi  +
jmp loc_100D8FD  +
xor eax eax +
cmp [ebp+var_4C] 0 +
mov word ptr [ebp+var_8] ax +
lea edi [ebp+var_8+2] +
stos   +
stos   +
lea eax [ebx+8F8h] +
mov edi [eax] +
mov [ebp+var_C] edi +
jnz loc_100D883  +
lea ecx [edi+1] +
mov [eax] ecx +
cmp edi esi +
jnz loc_100D8FD  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_88] +
push eax  +
push ebx  +
call sub_100CC3D  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100D915  +
mov eax [ebp+arg_8] +
push 0  +
push dword ptr [eax+esi*4]  +
lea eax [ebp+var_8] +
push eax  +
call ds:RtlEqualUnicodeString  +
test al al +
jz loc_100D8DB  +
inc esi  +
mov [ebp+var_10] esi +
cmp esi [ebp+arg_4] +
jnz loc_100D8DB  +
mov eax [ebp+arg_C] +
push 10h  +
lea edi [ebx+8FCh] +
pop ecx  +
lea esi [ebp+var_88] +
movs   +
mov esi [ebp+var_10] +
mov edi [ebp+var_C] +
mov byte ptr [eax] 1 +
lea eax [ebp+var_8] +
push eax  +
call ds:RtlFreeUnicodeString  +
test edi edi +
jnz loc_100D8FD  +
lea eax [ebp+var_88] +
push eax  +
push ebx  +
call sub_100D5FD  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100D915  +
cmp esi [ebp+arg_4] +
jb loc_100D7F9  +
jmp loc_100D915  +
push 0C000000Dh  +
call sub_100F67B  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_10] +
push esi  +
push [ebp+arg_0]  +
mov byte ptr [edi] 0 +
call sub_100CB33  +
test eax eax +
jl loc_100D9DA  +
cmp [ebp+arg_4] 0 +
jbe loc_100D960  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_100D7E0  +
jmp loc_100D9DA  +
push ebx  +
lea edi [esi+8C0h] +
push edi  +
lea ecx [ebp+var_98] +
lea ebx [esi+5D8h] +
push ecx  +
jmp loc_100D993  +
mov eax [ebp+var_98] +
cmp eax 1 +
jz loc_100D9A3  +
test eax eax +
jz loc_100D9A3  +
cmp eax 3 +
jz loc_100D9AF  +
push edi  +
lea eax [ebp+var_98] +
push eax  +
push ebx  +
lea eax [esi+4] +
push eax  +
call sub_1014FE0  +
test eax eax +
jge loc_100D977  +
jmp loc_100D9BD  +
cmp eax 3 +
jz loc_100D9AF  +
push 0C000000Dh  +
jmp loc_100D9BE  +
lea eax [ebp+var_78] +
push eax  +
push esi  +
call sub_100D5FD  +
test eax eax +
jge loc_100D9C5  +
push eax  +
call sub_100F67B  +
jmp loc_100D9D9  +
lea edi [esi+8FCh] +
push 10h  +
pop ecx  +
lea esi [ebp+var_78] +
movs   +
mov ecx [ebp+arg_10] +
mov byte ptr [ecx] 1 +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov edx [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+var_1C] ax +
lea edi [ebp+var_1C+2] +
xor ebx ebx +
stos   +
mov [ebp+var_4] ebx +
mov [ebp+var_C] ebx +
stos   +
cmp edx 20h +
jbe loc_100DA1D  +
push 0C00000E5h  +
call sub_100F67B  +
push eax  +
call ds:RtlRaiseStatus  +
mov esi [ebp+arg_10] +
cmp esi ebx +
jz loc_100DA26  +
mov [esi] ebx +
cmp edx ebx +
jbe loc_100DA67  +
mov ecx [ebp+arg_C] +
add ecx 8 +
mov eax [ecx-4] +
sub eax ebx +
jz loc_100DA5B  +
dec eax  +
jz loc_100DA55  +
dec eax  +
jz loc_100DA55  +
dec eax  +
jz loc_100DA4C  +
dec eax  +
jz loc_100DA55  +
dec eax  +
jnz loc_100DA61  +
mov edi [ecx] +
stos   +
stos   +
jmp loc_100DA5F  +
mov eax [ecx] +
mov [eax] ebx +
mov [eax+4] ebx +
jmp loc_100DA61  +
mov eax [ecx] +
mov [eax] ebx +
jmp loc_100DA61  +
mov edi [ecx] +
xor eax eax +
stos   +
stos   +
add ecx 0Ch +
dec edx  +
jnz loc_100DA30  +
mov eax [ebp+arg_4] +
mov [ebp+var_10] ebx +
cmp [eax+38h] ebx +
jbe loc_100DC0B  +
mov edi [ebp+arg_0] +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_10]  +
lea eax [edi+8C0h] +
push eax  +
call sub_10168FA  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_100DC38  +
xor esi esi +
cmp [ebp+arg_8] ebx +
jbe loc_100DBF6  +
lea ebx [edi+4] +
mov edi [ebp+arg_C] +
push 0  +
lea eax [ebp+var_14] +
push eax  +
push dword ptr [edi]  +
mov eax [ebp+arg_0] +
push [ebp+var_8]  +
push ebx  +
call dword ptr [eax+0CCh]  +
cmp [ebp+var_14] 0 +
mov [ebp+var_4] eax +
jz loc_100DAD5  +
inc esi  +
add edi 0Ch +
cmp esi [ebp+arg_8] +
jb loc_100DAA9  +
jmp loc_100DBF4  +
xor ebx ebx +
inc ebx  +
mov ecx esi +
shl ebx cl +
mov ecx [ebp+var_C] +
test ebx ecx +
jnz loc_100DC1B  +
test eax eax +
jl loc_100DC36  +
mov eax [ebp+arg_C] +
imul esi esi +
lea edi [esi+eax] +
mov eax [edi+4] +
test eax eax +
jnz loc_100DB37  +
lea eax [ebp+var_1C] +
push eax  +
mov eax [ebp+var_8] +
add eax 20h +
push eax  +
push [ebp+arg_0]  +
call sub_100CC3D  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100DC36  +
mov edi [edi+8] +
mov eax [ebp+var_1C] +
mov [edi] eax +
mov eax [ebp+var_18] +
mov [edi+4] eax +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
stos   +
jmp loc_100DBEB  +
cmp eax 5 +
jnz loc_100DB4E  +
mov esi [ebp+var_8] +
mov edi [edi+8] +
add esi 20h +
movs   +
movs   +
movs   +
movs   +
jmp loc_100DBEB  +
cmp eax 4 +
jnz loc_100DB67  +
push dword ptr [edi+8]  +
mov eax [ebp+var_8] +
add eax 20h +
push eax  +
push [ebp+arg_0]  +
call sub_100CD9D  +
jmp loc_100DBE1  +
cmp eax 1 +
jnz loc_100DB80  +
push dword ptr [edi+8]  +
mov eax [ebp+var_8] +
add eax 20h +
push eax  +
push [ebp+arg_0]  +
call sub_100CE27  +
jmp loc_100DBE1  +
cmp eax 2 +
jz loc_100DB8E  +
cmp eax 3 +
jnz loc_100DC2C  +
lea eax [ebp+var_24] +
push eax  +
mov eax [ebp+var_8] +
add eax 20h +
push eax  +
push [ebp+arg_0]  +
call sub_100D2F0  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100DC36  +
mov eax [edi+4] +
cmp eax 3 +
jnz loc_100DBC4  +
mov edi [edi+8] +
mov eax [ebp+var_24] +
mov [edi] eax +
mov eax [ebp+var_20] +
mov [edi+4] eax +
jmp loc_100DBEB  +
cmp eax 2 +
jnz loc_100DBEB  +
cmp [ebp+var_20] 0 +
ja loc_100DBD7  +
mov eax [ebp+var_24] +
cmp eax 0FFFFFFFFh +
jbe loc_100DBE6  +
push 0C000000Dh  +
call sub_100F67B  +
mov [ebp+var_4] eax +
jmp loc_100DBEB  +
mov ecx [edi+8] +
mov [ecx] eax +
cmp [ebp+var_4] 0 +
jl loc_100DC36  +
or [ebp+var_C] ebx +
xor ebx ebx +
inc [ebp+var_10]  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_10] +
cmp ecx [eax+38h] +
jb loc_100DA76  +
mov esi [ebp+arg_10] +
cmp esi ebx +
jz loc_100DC14  +
mov eax [ebp+var_C] +
mov [esi] eax +
cmp [ebp+var_4] ebx +
jge loc_100DC76  +
jmp loc_100DC38  +
push 0C015001Ah  +
call sub_100F67B  +
mov [ebp+var_4] eax +
xor ebx ebx +
jmp loc_100DC14  +
push 0C00000E5h  +
jmp loc_100DA17  +
xor ebx ebx +
xor edi edi +
cmp [ebp+arg_8] ebx +
jbe loc_100DC76  +
mov esi [ebp+arg_C] +
add esi 8 +
xor eax eax +
inc eax  +
mov ecx edi +
shl eax cl +
test [ebp+var_C] eax +
jz loc_100DC6D  +
mov eax [esi-4] +
cmp eax ebx +
jnz loc_100DC61  +
push dword ptr [esi]  +
call sub_100CD6F  +
jmp loc_100DC6D  +
cmp eax 1 +
jnz loc_100DC6D  +
push dword ptr [esi]  +
call sub_100E98D  +
inc edi  +
add esi 0Ch +
cmp edi [ebp+arg_8] +
jb loc_100DC45  +
lea eax [ebp+var_1C] +
push eax  +
call sub_100CD6F  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_8] +
mov [ebp+var_2C] eax +
push edi  +
lea eax [ebp+var_10] +
mov [ebp+var_20] eax +
xor ebx ebx +
lea eax [ebp+arg_4] +
push ebx  +
mov [ebp+var_14] eax +
lea eax [ebp+var_34] +
push eax  +
push 3  +
push [ebp+arg_4]  +
xor edi edi +
inc edi  +
push esi  +
mov [ebp+var_34] offset dword_1002F30 +
mov [ebp+var_30] ebx +
mov [ebp+var_28] offset dword_1002F38 +
mov [ebp+var_24] ebx +
mov [ebp+var_1C] offset dword_1002F40 +
mov [ebp+var_18] edi +
call sub_100D9E5  +
cmp eax ebx +
jl loc_100DD2B  +
mov ecx [ebp+var_8] +
mov edx [ebp+arg_8] +
mov [esi+9B0h] ecx +
mov ecx [ebp+var_4] +
mov [esi+9B4h] ecx +
mov ecx [ebp+var_10] +
mov [esi+9B8h] ecx +
mov ecx [ebp+var_C] +
mov [esi+9BCh] ecx +
lea ecx [esi+9A8h] +
mov [ecx] ebx +
mov [esi+9ACh] ebx +
mov [esi+9C0h] ebx +
mov [edx+4] ecx +
mov [edx] edi +
mov [esi+9A0h] edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-18h] 0 +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [ebp-8] +
mov [ebp-20h] eax +
push 0  +
lea eax [ebp-10h] +
mov [ebp-14h] eax +
lea eax [ebp-28h] +
push eax  +
push 2  +
pop edi  +
push edi  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-28h] offset dword_1002F30 +
push esi  +
mov dword ptr [ebp-1Ch] offset dword_1002F38 +
call sub_100D9E5  +
test eax eax +
jl loc_100DDB8  +
mov ecx [ebp-8] +
mov edx [ebp+10h] +
mov [esi+9ACh] ecx +
mov ecx [ebp-4] +
mov [esi+9B0h] ecx +
mov ecx [ebp-10h] +
mov [esi+9B4h] ecx +
mov ecx [ebp-0Ch] +
mov [esi+9B8h] ecx +
lea ecx [esi+9A8h] +
and dword ptr [ecx] 0 +
mov [edx+4] ecx +
mov [edx] edi +
mov [esi+9A0h] edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-20h] 0 +
push esi  +
mov esi [ebp+8] +
push 2  +
lea eax [ebp-0Ch] +
mov [ebp-1Ch] eax +
pop eax  +
lea ecx [ebp-4] +
push 0  +
mov [ebp-10h] ecx +
lea ecx [ebp-24h] +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-24h] offset dword_1002F48 +
push esi  +
mov dword ptr [ebp-18h] offset dword_1002FB8 +
mov [ebp-14h] eax +
call sub_100D9E5  +
test eax eax +
jl loc_100DE39  +
mov ecx [ebp-0Ch] +
mov edx [ebp-4] +
mov [esi+9ACh] ecx +
mov ecx [ebp-8] +
mov [esi+9B0h] ecx +
lea ecx [esi+9A8h] +
mov [ecx] edx +
mov edx [ebp+10h] +
mov [edx+4] ecx +
push 3  +
pop ecx  +
mov [edx] ecx +
mov [esi+9A0h] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-18h] 0 +
push esi  +
mov esi [ebp+8] +
lea eax [ebp-8] +
mov [ebp-20h] eax +
lea eax [ebp-10h] +
push 0  +
mov [ebp-14h] eax +
lea eax [ebp-28h] +
push eax  +
push 2  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-28h] offset dword_1002F30 +
push esi  +
mov dword ptr [ebp-1Ch] offset dword_1002F38 +
call sub_100D9E5  +
test eax eax +
jl loc_100DEC4  +
mov ecx [ebp-8] +
mov edx [ebp+10h] +
mov [esi+9ACh] ecx +
mov ecx [ebp-4] +
mov [esi+9B0h] ecx +
mov ecx [ebp-10h] +
mov [esi+9B4h] ecx +
mov ecx [ebp-0Ch] +
mov [esi+9B8h] ecx +
lea ecx [esi+9A8h] +
and dword ptr [ecx] 0 +
mov [edx+4] ecx +
push 4  +
pop ecx  +
mov [edx] ecx +
mov [esi+9A0h] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov [ebp-10h] ax +
mov ebx [ebp+8] +
lea edi [ebp-0Eh] +
stos   +
stos   +
xor esi esi +
xor eax eax +
mov [ebp-34h] esi +
lea edi [ebp-30h] +
stos   +
stos   +
lea ecx [ebp-4] +
mov [ebp-50h] ecx +
push 4  +
lea ecx [ebp-34h] +
mov [ebp-44h] ecx +
stos   +
lea eax [ebp-10h] +
lea ecx [ebp-18h] +
mov [ebp-38h] ecx +
mov [ebp-5Ch] eax +
pop eax  +
lea ecx [ebp-8] +
push ecx  +
lea ecx [ebp-64h] +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
push ebx  +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov [ebp-8] esi +
mov dword ptr [ebp-64h] offset dword_1002F48 +
mov [ebp-60h] esi +
mov dword ptr [ebp-58h] offset dword_1002F50 +
mov [ebp-54h] eax +
mov dword ptr [ebp-4Ch] offset dword_1002F58 +
mov dword ptr [ebp-48h] 5 +
mov dword ptr [ebp-40h] offset dword_1002F60 +
mov dword ptr [ebp-3Ch] 3 +
call sub_100D9E5  +
cmp eax esi +
mov [ebp+0Ch] eax +
jl loc_100DFED  +
xor eax eax +
mov [ebp-24h] esi +
lea edi [ebp-20h] +
stos   +
stos   +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp-4]  +
push ebx  +
call sub_100D27F  +
cmp eax esi +
mov [ebp+0Ch] eax +
jl loc_100DFE4  +
test byte ptr [ebp-8] 8 +
lea eax [ebx+9A8h] +
jz loc_100DF9F  +
mov dword ptr [eax] 1 +
jmp loc_100DFA1  +
mov [eax] esi +
mov ecx [ebp-18h] +
mov [ebx+9C0h] ecx +
mov ecx [ebp-14h] +
mov [ebx+9C4h] ecx +
mov ecx [ebp-10h] +
lea edi [ebx+9B4h] +
lea esi [ebp-24h] +
movs   +
mov [ebx+9ACh] ecx +
mov ecx [ebp-0Ch] +
movs   +
mov [ebx+9B0h] ecx +
mov ecx [ebp+10h] +
movs   +
mov [ecx+4] eax +
push 5  +
pop eax  +
mov [ecx] eax +
mov [ebx+9A0h] eax +
jmp loc_100DFED  +
lea eax [ebp-10h] +
push eax  +
call sub_100CD6F  +
mov eax [ebp+0Ch] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push esi  +
push edi  +
mov esi [ebp+8] +
xor eax eax +
mov [ebp-10h] ax +
lea edi [ebp-0Eh] +
stos   +
stos   +
lea eax [ebp-10h] +
mov [ebp-2Ch] eax +
lea eax [ebp-4] +
mov [ebp-20h] eax +
xor edi edi +
lea eax [ebp-8] +
push edi  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
push 3  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] edi +
push esi  +
mov [ebp-8] edi +
mov dword ptr [ebp-34h] offset dword_1002F48 +
mov [ebp-30h] edi +
mov dword ptr [ebp-28h] offset dword_1002F68 +
mov dword ptr [ebp-24h] 2 +
mov dword ptr [ebp-1Ch] offset dword_1002F40 +
mov dword ptr [ebp-18h] 1 +
call sub_100D9E5  +
cmp eax edi +
jl loc_100E0A6  +
mov edx [ebp-4] +
mov [esi+9ACh] edx +
mov edx [ebp-10h] +
mov [esi+9B0h] edx +
mov edx [ebp-0Ch] +
mov [esi+9B4h] edx +
mov edx [ebp-8] +
lea ecx [esi+9A8h] +
mov [esi+9B8h] edx +
mov edx [ebp+10h] +
mov [ecx] edi +
mov [edx+4] ecx +
push 6  +
pop ecx  +
mov [edx] ecx +
mov [esi+9A0h] ecx +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push esi  +
push edi  +
mov esi [ebp+8] +
xor eax eax +
mov [ebp-10h] ax +
lea edi [ebp-0Eh] +
stos   +
stos   +
lea eax [ebp-10h] +
mov [ebp-2Ch] eax +
lea eax [ebp-4] +
mov [ebp-20h] eax +
xor edi edi +
lea eax [ebp-8] +
push edi  +
mov [ebp-14h] eax +
lea eax [ebp-34h] +
push eax  +
push 3  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] edi +
push esi  +
mov [ebp-8] edi +
mov dword ptr [ebp-34h] offset dword_1002F48 +
mov [ebp-30h] edi +
mov dword ptr [ebp-28h] offset dword_1002F68 +
mov dword ptr [ebp-24h] 2 +
mov dword ptr [ebp-1Ch] offset dword_1002F40 +
mov dword ptr [ebp-18h] 1 +
call sub_100D9E5  +
cmp eax edi +
jl loc_100E15B  +
mov edx [ebp-4] +
mov [esi+9ACh] edx +
mov edx [ebp-10h] +
mov [esi+9B0h] edx +
mov edx [ebp-0Ch] +
mov [esi+9B4h] edx +
mov edx [ebp-8] +
lea ecx [esi+9A8h] +
mov [esi+9B8h] edx +
mov edx [ebp+10h] +
mov [ecx] edi +
mov [edx+4] ecx +
push 7  +
pop ecx  +
mov [edx] ecx +
mov [esi+9A0h] ecx +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov [ebp-18h] ax +
push 2  +
pop ecx  +
lea edi [ebp-16h] +
stos   +
stos   +
push 3  +
lea eax [ebp-8] +
mov [ebp-90h] eax +
mov esi [ebp+8] +
lea eax [ebp-10h] +
mov [ebp-84h] eax +
pop eax  +
mov [ebp-7Ch] eax +
mov [ebp-70h] eax +
mov [ebp-64h] eax +
mov [ebp-58h] eax +
lea eax [ebp-30h] +
mov [ebp-54h] eax +
lea eax [ebp-18h] +
mov [ebp-48h] eax +
lea eax [ebp-4] +
mov [ebp-3Ch] eax +
lea eax [ebp-0Ch] +
push eax  +
lea eax [ebp-98h] +
push eax  +
xor ebx ebx +
push 8  +
pop edi  +
lea edx [ebp-28h] +
mov [ebp-78h] edx +
push edi  +
push dword ptr [ebp+0Ch]  +
lea edx [ebp-38h] +
mov [ebp-6Ch] edx +
lea edx [ebp-20h] +
push esi  +
mov [ebp-4] ebx +
mov [ebp-8] ebx +
mov [ebp-10h] ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-0Ch] ebx +
mov dword ptr [ebp-98h] offset dword_1002F68 +
mov [ebp-94h] ecx +
mov dword ptr [ebp-8Ch] offset dword_1002F40 +
mov dword ptr [ebp-88h] 1 +
mov dword ptr [ebp-80h] offset dword_1002F70 +
mov dword ptr [ebp-74h] offset dword_1002F78 +
mov dword ptr [ebp-68h] offset dword_1002F80 +
mov [ebp-60h] edx +
mov dword ptr [ebp-5Ch] offset dword_1002F88 +
mov dword ptr [ebp-50h] offset dword_1002F48 +
mov [ebp-4Ch] ebx +
mov dword ptr [ebp-44h] offset dword_1002FB8 +
mov [ebp-40h] ecx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
call sub_100D9E5  +
cmp eax ebx +
jl loc_100E2F0  +
mov edx [ebp-0Ch] +
and edx 3Fh +
or edx [ebp-4] +
lea ecx [esi+9A8h] +
mov [ecx] edx +
mov edx [ebp-8] +
mov [esi+9ACh] edx +
mov edx [ebp-10h] +
mov [esi+9B0h] edx +
mov edx [ebp-18h] +
mov [esi+9B4h] edx +
mov edx [ebp-14h] +
mov [esi+9B8h] edx +
mov edx [ebp-28h] +
mov [esi+9C0h] edx +
mov edx [ebp-24h] +
mov [esi+9C4h] edx +
mov edx [ebp-38h] +
mov [esi+9C8h] edx +
mov edx [ebp-34h] +
mov [esi+9CCh] edx +
mov edx [ebp-20h] +
mov [esi+9D0h] edx +
mov edx [ebp-1Ch] +
mov [esi+9D4h] edx +
mov edx [ebp-30h] +
mov [esi+9D8h] edx +
mov edx [ebp-2Ch] +
mov [esi+9DCh] edx +
mov edx [ebp+10h] +
mov [edx+4] ecx +
mov [edx] edi +
mov [esi+9A0h] edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and dword ptr [ebp-14h] 0 +
push esi  +
mov esi [ebp+8] +
lea eax [esi+9ACh] +
mov [ebp-10h] eax +
lea eax [esi+9B4h] +
push 0  +
mov [ebp-4] eax +
lea eax [ebp-18h] +
push eax  +
push 2  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-18h] offset dword_1002F48 +
push esi  +
mov dword ptr [ebp-0Ch] offset dword_1002F40 +
mov dword ptr [ebp-8] 1 +
call sub_100D9E5  +
test eax eax +
jl loc_100E35F  +
mov ecx [ebp+10h] +
lea edx [esi+9A8h] +
mov [ecx+4] edx +
push 9  +
pop edx  +
mov [ecx] edx +
mov [esi+9A0h] edx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and dword ptr [ebp-14h] 0 +
push esi  +
mov esi [ebp+8] +
push edi  +
push 2  +
lea eax [esi+9ACh] +
mov [ebp-10h] eax +
pop eax  +
push 0  +
lea ecx [ebp-18h] +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
lea edi [esi+9A8h] +
push esi  +
mov dword ptr [ebp-18h] offset dword_1002F48 +
mov dword ptr [ebp-0Ch] offset dword_1002FB8 +
mov [ebp-8] eax +
mov [ebp-4] edi +
call sub_100D9E5  +
test eax eax +
jl loc_100E3C5  +
mov ecx [ebp+10h] +
push 0Ah  +
pop edx  +
mov [ecx+4] edi +
mov [ecx] edx +
mov [esi+9A0h] edx +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
xor eax eax +
push ebx  +
mov ebx [ebp+8] +
mov [ebp-10h] ax +
mov [ebp-0Eh] ax +
mov [ebp-18h] ax +
mov [ebp-16h] ax +
push esi  +
xor esi esi +
lea eax [ebp-10h] +
mov [ebp-68h] eax +
push 5  +
lea eax [ebp-18h] +
mov [ebp-5Ch] eax +
lea ecx [ebp-34h] +
lea eax [ebp-8] +
mov [ebp-44h] ecx +
mov [ebp-50h] eax +
pop eax  +
lea ecx [ebp-4] +
push esi  +
mov [ebp-38h] ecx +
lea ecx [ebp-70h] +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp-0Ch] esi +
push ebx  +
mov [ebp-14h] esi +
mov [ebp-34h] esi +
mov [ebp-30h] esi +
mov [ebp-2Ch] esi +
mov [ebp-28h] esi +
mov [ebp-8] esi +
mov [ebp-4] esi +
mov dword ptr [ebp-70h] offset dword_1002F48 +
mov [ebp-6Ch] esi +
mov dword ptr [ebp-64h] offset dword_1002F90 +
mov [ebp-60h] esi +
mov dword ptr [ebp-58h] offset dword_1002F98 +
mov dword ptr [ebp-54h] 2 +
mov dword ptr [ebp-4Ch] offset dword_1002FA0 +
mov [ebp-48h] eax +
mov dword ptr [ebp-40h] offset dword_1002F50 +
mov dword ptr [ebp-3Ch] 4 +
call sub_100D9E5  +
cmp eax esi +
mov [ebp+0Ch] eax +
jl loc_100E506  +
push edi  +
xor eax eax +
mov [ebp-24h] esi +
lea edi [ebp-20h] +
stos   +
stos   +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp-4]  +
push ebx  +
call sub_100D27F  +
cmp eax esi +
mov [ebp+0Ch] eax +
jge loc_100E4B5  +
lea eax [ebp-10h] +
push eax  +
call sub_100CD6F  +
lea eax [ebp-18h] +
push eax  +
call sub_100CD6F  +
jmp loc_100E505  +
mov eax [ebp-10h] +
mov [ebx+9ACh] eax +
mov eax [ebp-0Ch] +
mov [ebx+9B0h] eax +
mov eax [ebp-18h] +
mov [ebx+9B4h] eax +
mov eax [ebp-14h] +
lea edi [ebx+9C0h] +
lea esi [ebp-24h] +
movs   +
mov [ebx+9B8h] eax +
mov eax [ebp-8] +
movs   +
mov [ebx+9BCh] eax +
mov eax [ebp+10h] +
lea ecx [ebx+9A8h] +
movs   +
mov [eax+4] ecx +
push 0Bh  +
pop ecx  +
mov [eax] ecx +
mov [ebx+9A0h] ecx +
pop edi  +
mov eax [ebp+0Ch] +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-8] 0 +
push esi  +
mov esi [ebp+8] +
lea eax [esi+9ACh] +
mov [ebp-10h] eax +
lea eax [esi+9B4h] +
push 0  +
mov [ebp-4] eax +
lea eax [ebp-18h] +
push eax  +
push 2  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-18h] offset dword_1002F48 +
push esi  +
mov dword ptr [ebp-0Ch] offset dword_1002F90 +
call sub_100D9E5  +
test eax eax +
jl loc_100E574  +
mov ecx [ebp+10h] +
push 0Ch  +
pop edx  +
mov [ecx] edx +
mov [esi+9A0h] edx +
add esi 9A8h +
mov [ecx+4] esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and dword ptr [ebp-8] 0 +
push esi  +
mov esi [ebp+8] +
lea eax [esi+9ACh] +
push 0  +
mov [ebp-4] eax +
lea eax [ebp-0Ch] +
push eax  +
push 1  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-0Ch] offset dword_1002FB0 +
push esi  +
call sub_100D9E5  +
test eax eax +
jl loc_100E5CA  +
mov ecx [ebp+10h] +
push 0Eh  +
pop edx  +
mov [ecx] edx +
mov [esi+9A0h] edx +
add esi 9A8h +
mov [ecx+4] esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and dword ptr [ebp-8] 0 +
push esi  +
mov esi [ebp+8] +
lea eax [esi+9ACh] +
push 0  +
mov [ebp-4] eax +
lea eax [ebp-0Ch] +
push eax  +
push 1  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-0Ch] offset dword_1002F48 +
push esi  +
call sub_100D9E5  +
test eax eax +
jl loc_100E620  +
mov ecx [ebp+10h] +
push 0Fh  +
pop edx  +
mov [ecx] edx +
mov [esi+9A0h] edx +
add esi 9A8h +
mov [ecx+4] esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
lea ecx [ebp+var_10] +
mov [ebp+var_14] ecx +
lea ecx [ebp+var_4] +
push ecx  +
lea ecx [ebp+var_1C] +
push ecx  +
push 1  +
lea ecx [eax+8FCh] +
push ecx  +
xor ebx ebx +
push eax  +
mov [ebp+var_1C] offset dword_1002FA8 +
mov [ebp+var_18] ebx +
call sub_100D9E5  +
cmp eax ebx +
mov [ebp+var_8] eax +
jl loc_100E6A2  +
cmp [ebp+var_4] 1 +
jnz loc_100E699  +
push esi  +
mov esi ds:RtlEqualUnicodeString +
push 1  +
push offset dword_100327C  +
lea eax [ebp+var_10] +
push eax  +
call esi  +
test al al +
jz loc_100E684  +
inc ebx  +
jmp loc_100E698  +
push 1  +
push offset dword_1003298  +
lea eax [ebp+var_10] +
push eax  +
call esi  +
test al al +
jz loc_100E698  +
push 4  +
pop ebx  +
pop esi  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100E6A2  +
mov [eax] ebx +
mov eax [ebp+var_8] +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
mov [ebp+var_14] ebx +
cmp [ebp+arg_4] ebx +
jnz loc_100E6D1  +
push 0C000000Dh  +
call sub_100F67B  +
jmp loc_100E891  +
cmp [ebp+arg_8] ebx +
jz loc_100E6DB  +
cmp [ebp+arg_C] ebx +
jz loc_100E6C2  +
mov eax [ebp+arg_24] +
cmp eax ebx +
jz loc_100E6E5  +
mov [eax+0Ch] bl +
mov ecx [ebp+arg_28] +
push esi  +
push edi  +
cmp ecx ebx +
jz loc_100E703  +
or dword ptr [ecx+8] 0FFFFFFFFh +
or dword ptr [ecx+0Ch] 0FFFFFFFFh +
mov [ecx] ebx +
mov [ecx+4] ebx +
xor eax eax +
lea edi [ecx+10h] +
stos   +
stos   +
stos   +
mov eax [ebp+arg_2C] +
cmp eax ebx +
jz loc_100E70C  +
mov [eax] ebx +
mov eax large fs:18h +
mov eax [eax+30h] +
mov esi 9E0h +
push esi  +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
cmp edi ebx +
jnz loc_100E73C  +
push 0C0000017h  +
call sub_100F67B  +
mov esi eax +
jmp loc_100E878  +
push esi  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
lea eax [ebp-1] +
push eax  +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100D924  +
mov esi eax +
cmp esi ebx +
jl loc_100E85E  +
cmp byte ptr [ebp+var_1] bl +
jnz loc_100E791  +
test byte ptr [ebp+arg_0] 2 +
jnz loc_100E77B  +
push 0C000000Dh  +
call sub_100F67B  +
mov esi eax +
mov eax [ebp+arg_2C] +
cmp eax ebx +
jz loc_100E85E  +
mov dword ptr [eax] 2 +
jmp loc_100E85E  +
lea eax [ebp+var_8] +
push eax  +
mov eax edi +
mov [ebp+arg_4] ebx +
mov [ebp+var_8] ebx +
call sub_100E62A  +
mov esi eax +
cmp esi ebx +
jl loc_100E85E  +
mov eax [ebp+arg_0] +
mov [ebp+var_C] eax +
and [ebp+var_C] 4 +
mov [ebp+var_10] eax +
and [ebp+var_10] 8 +
mov eax [ebp+arg_2C] +
cmp eax ebx +
jz loc_100E7C9  +
mov ecx [ebp+var_8] +
or [eax] ecx +
cmp [ebp+var_C] ebx +
jz loc_100E7D5  +
mov [ebp+arg_4] 1 +
cmp [ebp+var_10] ebx +
jz loc_100E7DE  +
or [ebp+arg_4] 2 +
push [ebp+arg_28]  +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_14]  +
push edi  +
push [ebp+arg_18]  +
push offset loc_100D4B0  +
push offset loc_100C914  +
push [ebp+arg_4]  +
call [ebp+arg_10]  +
mov esi eax +
cmp esi ebx +
jl loc_100E85E  +
mov eax [ebp+arg_28] +
cmp eax ebx +
jz loc_100E812  +
cmp [eax] ebx +
jl loc_100E85E  +
cmp [ebp+arg_8] ebx +
jbe loc_100E858  +
test byte ptr [ebp+arg_0] 1 +
jnz loc_100E858  +
lea eax [ebp+var_1] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push edi  +
call sub_100D6E2  +
mov esi eax +
cmp esi ebx +
jl loc_100E85E  +
cmp byte ptr [ebp+var_1] bl +
jz loc_100E858  +
inc [ebp+var_14]  +
lea eax [ebp+var_8] +
push eax  +
mov eax edi +
mov [ebp+arg_4] ebx +
mov [ebp+var_8] ebx +
call sub_100E62A  +
mov esi eax +
cmp esi ebx +
jge loc_100E7BD  +
jmp loc_100E85E  +
mov esi [edi+99Ch] +
push edi  +
call sub_100CAED  +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov eax [ebp+arg_28] +
cmp eax ebx +
jz loc_100E88D  +
cmp esi ebx +
jl loc_100E887  +
cmp [eax] ebx +
jge loc_100E88D  +
mov ecx [ebp+var_14] +
mov [eax+8] ecx +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push 0  +
push offset loc_100CC02  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E6AF  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100E8ED  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100E8F8  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 0C0000095h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100E911  +
xor al al +
jmp loc_100E942  +
movzx ecx word ptr [eax] +
movzx edx word ptr [eax+2] +
cmp dx cx +
jb loc_100E90D  +
test cl 1 +
jnz loc_100E90D  +
test dl 1 +
jnz loc_100E90D  +
test cx cx +
jbe loc_100E935  +
cmp dword ptr [eax+4] 0 +
jz loc_100E90D  +
test cx cx +
jz loc_100E940  +
mov eax [eax+4] +
cmp word ptr [eax] 0 +
jz loc_100E90D  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100E95B  +
xor al al +
jmp loc_100E984  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_100E957  +
movzx edx word ptr [eax+2] +
cmp dx cx +
jb loc_100E957  +
test cl 1 +
jnz loc_100E957  +
test dl 1 +
jnz loc_100E957  +
mov eax [eax+4] +
test eax eax +
jz loc_100E957  +
cmp word ptr [eax] 0 +
setnz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
test ecx ecx +
jz loc_100E9B3  +
and dword ptr [eax] 0 +
mov eax large fs:18h +
mov eax [eax+30h] +
push ecx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [eax] +
xor edx edx +
cmp ecx edx +
jz loc_100E9DA  +
push edx  +
mov [eax] edx +
mov eax [ebp+arg_0] +
push ecx  +
push dword ptr [eax+4Ch]  +
push edx  +
call dword ptr [eax+48h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
xor ecx ecx +
xor eax eax +
xor edi edi +
xor esi esi +
test edx edx +
jz loc_100EA01  +
movzx ecx word ptr [edx] +
mov edi [edx+4] +
shr ecx 1 +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_100EA10  +
movzx eax word ptr [edx] +
mov esi [edx+4] +
shr eax 1 +
push esi  +
push eax  +
push edi  +
push ecx  +
push offset aPoqCanTFindExp  +
push 1  +
push 65h  +
call ds:DbgPrintEx  +
add esp 1Ch +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
xor edx edx +
test ecx ecx +
jz loc_100EA49  +
movzx eax word ptr [ecx] +
mov edx [ecx+4] +
shr eax 1 +
push edx  +
push eax  +
push offset aPoqCannotDelet  +
push 1  +
push 65h  +
call ds:DbgPrintEx  +
add esp 14h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov byte ptr [eax] 0 +
movzx eax word ptr [edi] +
cmp ax [ebx] +
ja loc_100EAE8  +
and [ebp+arg_4] 0 +
and eax 0FFFEh +
xor ecx ecx +
push esi  +
cmp cx ax +
jnb loc_100EAE1  +
cmp [ebp+arg_8] 0 +
jz loc_100EABC  +
movzx esi word ptr [ebp+arg_4] +
mov eax [ebx+4] +
add esi esi +
movzx ecx word ptr [eax+esi] +
call [ebp+arg_8]  +
mov ecx [edi+4] +
movzx ecx word ptr [ecx+esi] +
mov [ebp+arg_0] eax +
call [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
cmp eax ecx +
jmp loc_100EAD0  +
movzx eax word ptr [ebp+arg_4] +
mov edx [edi+4] +
mov ecx [ebx+4] +
add eax eax +
mov dx [eax+edx] +
cmp dx [eax+ecx] +
jnz loc_100EAE7  +
mov ax [edi] +
inc [ebp+arg_4]  +
shr ax 1 +
cmp word ptr [ebp+arg_4] ax +
jb loc_100EA92  +
mov eax [ebp+arg_C] +
mov byte ptr [eax] 1 +
pop esi  +
pop edi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+var_20] ax +
lea edi [ebp+var_20+2] +
stos   +
stos   +
mov edi [ebp+arg_8] +
xor eax eax +
stos   +
stos   +
mov edi [ebp+arg_4] +
xor ebx ebx +
lea eax [ebp-1] +
push eax  +
push ebx  +
push offset asc_1001270  +
push edi  +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_1] bl +
call sub_100EA66  +
cmp eax ebx +
mov esi [ebp+arg_0] +
mov [ebp+arg_4] eax +
jl loc_100ED85  +
cmp [ebp+var_1] bl +
jz loc_100ED59  +
cmp word ptr [edi] 0Eh +
jnb loc_100EB5D  +
mov [ebp+arg_4] 0C000000Dh +
jmp loc_100ED85  +
mov eax [edi] +
push 0Eh  +
mov [ebp+var_30] eax +
mov eax [edi+4] +
mov [ebp+var_2C] eax +
pop eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4020h  +
push 1  +
push 7  +
push ebx  +
mov word ptr [ebp+var_30] ax +
push ebx  +
lea eax [ebp+var_30] +
mov [ebp+var_40] eax +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
mov edi 100000h +
push edi  +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_48] 18h +
push ebx  +
mov [ebp+var_44] ebx +
mov [ebp+var_3C] 40h +
mov [ebp+var_38] ebx +
mov [ebp+var_34] ebx +
call dword ptr [esi]  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_100ED85  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4020h  +
push 1  +
push 7  +
push ebx  +
push ebx  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+var_48] +
push eax  +
push edi  +
lea eax [ebp+var_14] +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_40] offset dword_10032BC +
push ebx  +
call dword ptr [esi]  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_100ED85  +
mov eax large fs:18h +
mov eax [eax+30h] +
mov edi ds:RtlAllocateHeap +
push 98h  +
push ebx  +
push dword ptr [eax+18h]  +
call edi  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_100EC1F  +
mov [ebp+arg_4] 0C0000017h +
jmp loc_100ED85  +
mov [ebp+var_C] 98h +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push [ebp+var_C]  +
lea eax [ebp+var_28] +
push [ebp+var_8]  +
push eax  +
push [ebp+var_10]  +
push dword ptr [esi+4Ch]  +
push 1  +
call dword ptr [esi+18h]  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_100ED85  +
cmp [ebp+arg_0] 2 +
jnz loc_100EC96  +
push [ebp+var_8]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov eax large fs:18h +
push [ebp+var_24]  +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call edi  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_100EC13  +
mov eax [ebp+var_24] +
cmp eax 0FFFFFFFFh +
ja loc_100ED50  +
cmp [ebp+arg_0] 2 +
mov [ebp+var_C] eax +
jz loc_100EC26  +
mov eax [ebp+var_8] +
mov eax [eax+8] +
mov [ebp+var_18] eax +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push [ebp+var_C]  +
lea eax [ebp+var_28] +
push [ebp+var_8]  +
push eax  +
push [ebp+var_14]  +
push dword ptr [esi+4Ch]  +
push 1  +
call dword ptr [esi+18h]  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_100ED85  +
cmp [ebp+arg_0] 2 +
jnz loc_100ED0F  +
push [ebp+var_8]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov eax large fs:18h +
push [ebp+var_24]  +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call edi  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_100EC13  +
mov eax [ebp+var_24] +
cmp eax 0FFFFFFFFh +
ja loc_100ED50  +
cmp [ebp+arg_0] 2 +
mov [ebp+var_C] eax +
jz loc_100EC9F  +
mov eax [ebp+var_18] +
mov ecx [ebp+var_8] +
cmp eax [ecx+8] +
jz loc_100ED59  +
lea eax [ebp+var_20] +
push eax  +
mov eax [ebp+var_30] +
add eax 1Ch +
push eax  +
call sub_101736A  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_100ED85  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
call ds:RtlCopyUnicodeString  +
push offset dword_10031D4  +
lea eax [ebp+var_20] +
push eax  +
call ds:RtlAppendUnicodeStringToString  +
jmp loc_100ED69  +
mov [ebp+arg_4] 0C0000095h +
jmp loc_100ED85  +
lea eax [ebp+var_20] +
push eax  +
push offset aLn  +
push ebx  +
call ds:RtlDuplicateUnicodeString  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_100ED85  +
mov ecx [ebp+var_20] +
mov eax [ebp+arg_8] +
mov [eax] ecx +
mov ecx [ebp+var_1C] +
mov [eax+4] ecx +
lea edi [ebp+var_20] +
xor eax eax +
stos   +
stos   +
lea eax [ebp+var_10] +
push eax  +
push esi  +
call sub_100E9BC  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
call sub_100E9BC  +
lea ecx [ebp+var_20] +
call sub_1016FC4  +
push [ebp+var_8]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor ebx ebx +
push ebx  +
push [ebp+arg_C]  +
lea eax [ebp+var_C] +
push 4020h  +
push 7  +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_4] +
push 100100h  +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_4] ebx +
push ebx  +
call dword ptr [esi+4]  +
mov edi eax +
cmp edi ebx +
jl loc_100EE37  +
push 9  +
pop ecx  +
xor eax eax +
push ebx  +
mov [ebp+var_34] ebx +
lea edi [ebp+var_30] +
stos   +
mov eax [ebp+arg_8] +
and eax 3127h +
push 4  +
or eax 80h +
push 28h  +
mov [ebp+var_14] eax +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_4]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+14h]  +
mov edi eax +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call sub_100E9BC  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
xor eax eax +
push eax  +
push [ebp+arg_10]  +
lea ecx [ebp+var_28] +
push ecx  +
push [ebp+arg_4]  +
mov byte ptr [edi] 0 +
mov [ebx] eax +
push dword ptr [esi+4Ch]  +
push eax  +
call dword ptr [esi+1Ch]  +
test eax eax +
jl loc_100EEA2  +
mov ecx [ebp+var_8] +
mov [ebx] ecx +
test cl 1 +
jz loc_100EE9F  +
push [ebp+arg_10]  +
and ecx 0FFFFFFFEh +
push ecx  +
push [ebp+arg_4]  +
push esi  +
call sub_100EDC6  +
mov byte ptr [edi] 1 +
jmp loc_100EEA2  +
mov byte ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp-1] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+8]  +
xor ebx ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_14] ebx +
call ds:RtlGetOwnerSecurityDescriptor  +
mov esi [ebp+arg_0] +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
cmp [ebp+var_1C] ebx +
jz loc_100EEF7  +
mov [ebp+var_8] 1 +
lea eax [ebp-1] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+8]  +
call ds:RtlGetGroupSecurityDescriptor  +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
cmp [ebp+var_1C] ebx +
jz loc_100EF1E  +
or [ebp+var_8] 2 +
lea eax [ebp-1] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp-2] +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+8]  +
call ds:RtlGetDaclSecurityDescriptor  +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
cmp byte ptr [ebp+var_2] bl +
jz loc_100EF49  +
or [ebp+var_8] 4 +
lea eax [ebp-1] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_2] +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+8]  +
call ds:RtlGetSaclSecurityDescriptor  +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
cmp byte ptr [ebp+var_2] bl +
jz loc_100EF74  +
or [ebp+var_8] 8 +
mov ecx [ebp+arg_4] +
test byte ptr [ecx] 40h +
jz loc_100F0DC  +
push ds:RtlGetLengthWithoutLastFullDosOrNtPathElement  +
xor eax eax +
mov [ebp+var_58] 18h +
lea edi [ebp+var_54] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [ecx+0Ch] +
mov [ebp+var_28] eax +
mov eax [ecx+10h] +
mov [ebp+var_24] eax +
lea eax [ebp+var_28] +
push eax  +
push 8  +
push ebx  +
mov [ebp+var_40] 120089h +
mov [ebp+var_3C] 120116h +
mov [ebp+var_38] 1200A0h +
mov [ebp+var_34] 1F01FFh +
call ds:RtlpApplyLengthFunction  +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
push ebx  +
push [ebp+arg_C]  +
lea eax [ebp+var_28] +
push 4020h  +
push 7  +
mov [ebp+var_50] eax +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_58] +
push eax  +
push 1120000h  +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_4C] 40h +
push 1  +
call dword ptr [esi+4]  +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push ebx  +
push ebx  +
push 0Ch  +
push [ebp+var_10]  +
push dword ptr [esi+4Ch]  +
push 1  +
call dword ptr [esi+24h]  +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
mov eax large fs:18h +
push [ebp+arg_0]  +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov [ebp+var_18] eax +
cmp eax ebx +
jnz loc_100F056  +
mov edi 0C0000017h +
jmp loc_100F0EF  +
push ebx  +
lea ecx [ebp+arg_0] +
push ecx  +
push [ebp+arg_0]  +
push eax  +
push 0Ch  +
push [ebp+var_10]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+24h]  +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
lea eax [ebp+var_14] +
push eax  +
push 0Ah  +
push 0FFFFFFFFh  +
call ds:NtOpenProcessToken  +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
lea eax [ebp+var_40] +
push eax  +
push [ebp+var_14]  +
lea eax [ebp+var_C] +
push 1Bh  +
push ebx  +
push ebx  +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+8]  +
push [ebp+var_18]  +
call ds:RtlNewSecurityObjectEx  +
mov edi eax +
cmp edi ebx +
jl loc_100F0EF  +
test byte ptr [ebp+var_8] 4 +
jz loc_100F0BB  +
mov eax [ebp+var_C] +
mov ecx 100h +
or [eax+2] cx +
test byte ptr [ebp+var_8] 8 +
jz loc_100F0CD  +
mov eax [ebp+var_C] +
mov ecx 200h +
or [eax+2] cx +
push ebx  +
push [ebp+var_C]  +
push [ebp+var_8]  +
push [ebp+arg_8]  +
push dword ptr [esi+4Ch]  +
jmp loc_100F0E9  +
push ebx  +
push dword ptr [ecx+8]  +
push [ebp+var_8]  +
push [ebp+arg_8]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+28h]  +
mov edi eax +
lea eax [ebp+var_10] +
push eax  +
push esi  +
call sub_100E9BC  +
cmp [ebp+var_14] ebx +
jz loc_100F107  +
push [ebp+var_14]  +
call ds:NtClose  +
cmp [ebp+var_18] ebx +
jz loc_100F122  +
push [ebp+var_18]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push ebx  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
cmp [ebp+var_C] ebx +
jz loc_100F131  +
lea eax [ebp+var_C] +
push eax  +
call ds:RtlDeleteSecurityObject  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_18] +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
mov [edi] eax +
cmp ecx eax +
jz loc_100F15F  +
mov [ecx] eax +
test byte ptr [ebp+arg_0] 1 +
jz loc_100F168  +
xor eax eax +
inc eax  +
push 2  +
pop ebx  +
test byte ptr [ebp+arg_0] bl +
jz loc_100F172  +
or eax ebx +
mov esi [ebp+arg_4] +
lea ecx [ebp+arg_0] +
push ecx  +
push [ebp+arg_14]  +
lea ecx [ebp+var_4] +
push 4  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push ecx  +
push dword ptr [esi+4Ch]  +
push eax  +
call dword ptr [esi+30h]  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+arg_8] eax +
jl loc_100F1B7  +
cmp [ebp+arg_0] ebx +
jnz loc_100F1A2  +
mov [ebp+var_8] ebx +
jmp loc_100F1B7  +
push 3  +
pop eax  +
cmp [ebp+arg_0] eax +
jnz loc_100F1AF  +
mov [ebp+var_8] eax +
jmp loc_100F1B7  +
mov eax [ebp+var_4] +
mov [edi] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+arg_18] +
cmp eax ecx +
jz loc_100F1C3  +
mov edx [ebp+var_8] +
mov [eax] edx +
cmp [ebp+var_4] ecx +
jz loc_100F1D3  +
push ecx  +
push [ebp+var_4]  +
push dword ptr [esi+4Ch]  +
push ecx  +
call dword ptr [esi+48h]  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C8h +
mov eax dword_101D040 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
push esi  +
push edi  +
xor esi esi +
mov [ebp+var_68] esi +
lea edi [ebp+var_64] +
stos   +
stos   +
xor eax eax +
mov edi ecx +
stos   +
stos   +
stos   +
mov eax [ebx] +
dec eax  +
mov [ebp+var_50] ecx +
cmp eax 0Eh +
ja loc_100F618  +
jmp ds:off_100F63A[eax*4]  +
mov ecx [ebx+4] +
mov [ebp+var_28] esi +
xor eax eax +
lea edi [ebp+var_24] +
stos   +
stos   +
mov [ebp+var_1C] 4 +
mov [ebp+var_18] 6 +
mov [ebp+var_14] offset asc_1003244 +
mov [ebp+var_10] esi +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
add ecx 8 +
lea edx [ebp+var_28] +
stos   +
call sub_1017543  +
mov esi eax +
test esi esi +
jl loc_100F618  +
mov ecx [ebx+4] +
add ecx 10h +
lea edx [ebp+var_10] +
call sub_1017543  +
mov esi eax +
test esi esi +
jl loc_100F618  +
push [ebp+var_50]  +
lea eax [ebp+var_28] +
push eax  +
push 3  +
push 0  +
call sub_10178E0  +
jmp loc_100F616  +
mov ecx [ebx+4] +
mov [ebp+var_28] esi +
xor eax eax +
lea edi [ebp+var_24] +
stos   +
stos   +
and [ebp+var_10] esi +
push 4  +
pop edx  +
mov [ebp+var_1C] edx +
mov [ebp+var_18] 6 +
mov [ebp+var_14] offset asc_1003244 +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
add ecx edx +
lea edx [ebp+var_28] +
stos   +
call sub_1017543  +
mov esi eax +
test esi esi +
jl loc_100F618  +
mov ecx [ebx+4] +
add ecx 0Ch +
jmp loc_100F270  +
mov ecx [ebx+4] +
mov [ebp+var_28] esi +
xor eax eax +
lea edi [ebp+var_24] +
stos   +
stos   +
mov [ebp+var_1C] 4 +
mov [ebp+var_18] 6 +
mov [ebp+var_14] offset asc_1003244 +
mov [ebp+var_10] esi +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
add ecx 8 +
lea edx [ebp+var_28] +
stos   +
call sub_1017543  +
mov esi eax +
test esi esi +
jl loc_100F618  +
xor edi edi +
push edi  +
lea eax [ebp+var_68] +
push eax  +
mov eax [ebx+4] +
push edi  +
add eax 0Ch +
push eax  +
push edi  +
call sub_1017D29  +
mov esi eax +
cmp esi edi +
jl loc_100F618  +
lea esi [ebp+var_68] +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
jmp loc_100F282  +
mov ebx [ebx+4] +
mov edx [ebx+0Ch] +
push ecx  +
movzx ecx word ptr [ebx+8] +
jmp loc_100F60F  +
xor eax eax +
push 4  +
pop edx  +
mov [ebp+var_A4] esi +
push 6  +
pop ecx  +
lea edi [ebp+var_A0] +
stos   +
stos   +
mov [ebp+var_94] ecx +
mov [ebp+var_8C] ecx +
push 8  +
pop edi  +
mov [ebp+var_88] edi +
mov [ebp+var_70] edi +
mov [ebp+var_7C] ecx +
mov [ebp+var_74] ecx +
mov esi offset asc_1003244 +
mov [ebp+var_90] esi +
mov [ebp+var_78] esi +
mov ecx offset a0x +
mov esi ecx +
lea edi [ebp+var_18] +
movs   +
movs   +
mov eax offset aNA +
mov [ebp+var_84] eax +
mov [ebp+var_6C] eax +
xor eax eax +
lea edi [ebp+var_14+2] +
stos   +
stos   +
stos   +
stos   +
and [ebp+var_C8] 0 +
and [ebp+var_5C] 0 +
mov esi ecx +
lea edi [ebp+var_4C] +
movs   +
movs   +
push 7  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_46] +
stos   +
mov ecx [ebx+4] +
stos   +
lea eax [ebp+var_18] +
mov [ebp+var_C0] eax +
mov [ebp+var_98] edx +
mov [ebp+var_80] edx +
lea eax [ebp+var_4C] +
add ecx 0Ch +
lea edx [ebp+var_A4] +
mov [ebp+var_C4] 14h +
mov [ebp+var_58] 24h +
mov [ebp+var_54] eax +
call sub_1017543  +
mov esi eax +
test esi esi +
jl loc_100F618  +
mov ebx [ebx+4] +
test byte ptr [ebx] 1 +
jz loc_100F467  +
mov ecx [ebx+4] +
lea eax [ebp+var_14] +
xor edx edx +
lea esi [ebp+var_4] +
cmp eax esi +
jnb loc_100F458  +
mov esi ecx +
shr esi 1Ch +
mov si ds:word_10031A8[esi*2] +
mov [eax] si +
inc eax  +
inc eax  +
shl ecx 4 +
inc edx  +
cmp edx 8 +
jb loc_100F436  +
lea esi [ebp+var_C8] +
lea edi [ebp+var_8C] +
movs   +
movs   +
movs   +
test byte ptr [ebx] 20h +
jz loc_100F4A9  +
mov ecx [ebx+30h] +
mov ebx [ebx+34h] +
lea eax [ebp-48h] +
xor edx edx +
lea esi [ebp+var_28] +
cmp eax esi +
jnb loc_100F4A0  +
mov esi ebx +
shr esi 1Ch +
and esi 0Fh +
mov si ds:word_10031A8[esi*2] +
shld ebx ecx +
mov [eax] si +
inc eax  +
inc eax  +
shl ecx 4 +
inc edx  +
cmp edx 10h +
jb loc_100F477  +
lea esi [ebp+var_5C] +
lea edi [ebp+var_74] +
movs   +
movs   +
movs   +
push [ebp+var_50]  +
lea eax [ebp+var_A4] +
push eax  +
push 5  +
jmp loc_100F28B  +
xor eax eax +
mov [ebp+var_BC] esi +
push 4  +
pop edx  +
lea edi [ebp+var_B8] +
stos   +
stos   +
and [ebp+var_A4] 0 +
xor eax eax +
mov [ebp+var_B0] edx +
push 6  +
pop ecx  +
mov [ebp+var_AC] ecx +
mov esi offset asc_1003244 +
mov [ebp+var_A8] esi +
lea edi [ebp+var_A0] +
stos   +
stos   +
and [ebp+var_8C] 0 +
xor eax eax +
mov [ebp+var_90] esi +
mov [ebp+var_98] edx +
mov [ebp+var_94] ecx +
lea edi [ebp+var_88] +
stos   +
stos   +
and [ebp+var_74] 0 +
xor eax eax +
mov [ebp+var_78] esi +
mov [ebp+var_80] edx +
mov [ebp+var_7C] ecx +
lea edi [ebp+var_70] +
stos   +
stos   +
and [ebp+var_5C] 0 +
mov esi offset a0x +
lea edi [ebp+var_18] +
movs   +
movs   +
xor eax eax +
lea edi [ebp+var_14+2] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp+var_18] +
mov [ebp+var_54] eax +
mov eax [ebx+4] +
mov edi [eax+14h] +
lea ecx [eax+4] +
lea edx [ebp+var_BC] +
mov [ebp+var_58] 14h +
call sub_1017543  +
mov esi eax +
test esi esi +
jl loc_100F618  +
mov ecx [ebx+4] +
add ecx 0Ch +
lea edx [ebp+var_A4] +
call sub_1017543  +
mov esi eax +
test esi esi +
jl loc_100F618  +
xor edx edx +
lea eax [ebp+var_14] +
xor ecx ecx +
lea esi [ebp+var_4] +
cmp eax esi +
jnb loc_100F5B7  +
mov esi edi +
shr esi 1Ch +
mov si ds:word_10031A8[esi*2] +
mov [eax] si +
inc eax  +
inc eax  +
shl edi 4 +
inc ecx  +
cmp ecx 8 +
jb loc_100F595  +
push edx  +
lea esi [ebp+var_5C] +
lea edi [ebp+var_8C] +
movs   +
lea eax [ebp+var_68] +
push eax  +
mov eax [ebx+4] +
push edx  +
movs   +
add eax 18h +
push eax  +
push edx  +
movs   +
call sub_1017D29  +
mov esi eax +
test esi esi +
jl loc_100F618  +
push [ebp+var_50]  +
lea esi [ebp+var_68] +
lea edi [ebp+var_74] +
movs   +
movs   +
lea eax [ebp+var_BC] +
push eax  +
movs   +
push 7  +
jmp loc_100F28B  +
mov esi 0C0000002h +
jmp loc_100F618  +
mov esi 0C00000E5h +
jmp loc_100F618  +
mov ebx [ebx+4] +
mov edx [ebx+8] +
push ecx  +
movzx ecx word ptr [ebx+4] +
shr ecx 1 +
call sub_101749F  +
mov esi eax +
cmp [ebp+var_60] 0 +
jz loc_100F626  +
lea ecx [ebp+var_68] +
call sub_1017A30  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C515  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset aPoqErrorOrigin  +
push 1  +
push 65h  +
call ds:DbgPrintEx  +
mov eax [ebp+arg_0] +
add esp 10h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov [ebp+arg_0] eax +
lea eax [ebp+arg_0] +
push eax  +
call sub_100E98D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jnz loc_100F6F2  +
push 0C000009Ah  +
call sub_100F67B  +
jmp loc_100F6F4  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
xor esi esi +
mov [ebp+var_54] eax +
mov edi [ebp+arg_0] +
lea eax [ebp+var_20] +
push eax  +
push esi  +
push esi  +
push esi  +
push 4021h  +
push 3  +
push 7  +
push [ebp+arg_8]  +
lea eax [ebp+var_30] +
push esi  +
push eax  +
lea eax [ebp+var_5C] +
push eax  +
push 100000h  +
lea eax [ebp+var_1C] +
push eax  +
push dword ptr [edi+4Ch]  +
mov [ebp+var_1C] esi +
push 8  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
mov [ebp+var_10] esi +
mov [ebp+var_14] esi +
mov [ebp+var_C] esi +
mov [ebp+var_5C] 18h +
mov [ebp+var_58] esi +
mov [ebp+var_50] 40h +
mov [ebp+var_4C] esi +
mov [ebp+var_48] esi +
call dword ptr [edi]  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
cmp [ebp+var_20] 4 +
jnz loc_100F993  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
mov [ebp+var_28] ecx +
mov ecx [eax+4] +
movzx eax word ptr [ebp+var_28] +
shr eax 1 +
lea eax [ecx+eax*2-2] +
mov [ebp+var_24] ecx +
cmp eax ecx +
jbe loc_100F7B2  +
cmp word ptr [eax] 5Ch +
jz loc_100F7A4  +
dec eax  +
dec eax  +
cmp eax ecx +
ja loc_100F798  +
cmp eax ecx +
jbe loc_100F7B2  +
sub eax ecx +
sar eax 1 +
add eax eax +
mov word ptr [ebp+var_28] ax +
mov eax large fs:18h +
cmp [eax+0F9Ch] esi +
lea eax [ebp+var_8] +
push eax  +
jz loc_100F7D1  +
push esi  +
push 8  +
push 0FFFFFFFEh  +
call ds:NtOpenThreadToken  +
jmp loc_100F7DB  +
push 8  +
push 0FFFFFFFFh  +
call ds:NtOpenProcessToken  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
push esi  +
push 1  +
push [ebp+var_8]  +
call ds:NtQueryInformationToken  +
mov ebx eax +
cmp ebx esi +
jge loc_100F808  +
cmp ebx 0C0000023h +
jnz loc_100F993  +
push [ebp+arg_0]  +
lea eax [ebp+var_10] +
push eax  +
call sub_100F6C1  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
push [ebp+var_10]  +
push 1  +
push [ebp+var_8]  +
call ds:NtQueryInformationToken  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push 58h  +
lea eax [ebp+var_C] +
push eax  +
call sub_100F6C1  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push 2  +
push 58h  +
push [ebp+var_C]  +
call ds:RtlCreateAcl  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
mov eax [ebp+var_10] +
push dword ptr [eax]  +
push 1F01FFh  +
push 2  +
push [ebp+var_C]  +
call ds:RtlAddAccessAllowedAce  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push 1  +
lea eax [ebp+var_44] +
push eax  +
call ds:RtlCreateSecurityDescriptor  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push esi  +
push [ebp+var_C]  +
lea eax [ebp+var_44] +
push 1  +
push eax  +
call ds:RtlSetDaclSecurityDescriptor  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push esi  +
push esi  +
push 4020h  +
push 7  +
lea eax [ebp+var_28] +
mov [ebp+var_54] eax +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_5C] +
push eax  +
push 160000h  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [edi+4Ch]  +
push esi  +
call dword ptr [edi+4]  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push esi  +
lea eax [ebp+var_18] +
push eax  +
push esi  +
push esi  +
push 4  +
push [ebp+var_4]  +
push dword ptr [edi+4Ch]  +
push 1  +
call dword ptr [edi+24h]  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push [ebp+var_18]  +
lea eax [ebp+var_14] +
push eax  +
call sub_100F6C1  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push esi  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+var_18]  +
push [ebp+var_14]  +
push 4  +
push [ebp+var_4]  +
push dword ptr [edi+4Ch]  +
push esi  +
call dword ptr [edi+24h]  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push esi  +
lea eax [ebp+var_44] +
push eax  +
push 4  +
push [ebp+var_4]  +
push dword ptr [edi+4Ch]  +
push esi  +
call dword ptr [edi+28h]  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
mov eax [ebp+arg_4] +
push esi  +
push esi  +
push esi  +
push esi  +
push 4021h  +
push 3  +
push 7  +
push [ebp+arg_8]  +
mov [ebp+var_54] eax +
push esi  +
lea eax [ebp+var_30] +
push eax  +
lea eax [ebp+var_5C] +
push eax  +
push 100000h  +
lea eax [ebp+var_1C] +
push eax  +
push dword ptr [edi+4Ch]  +
push esi  +
call dword ptr [edi]  +
mov ebx eax +
cmp ebx esi +
jl loc_100F993  +
push esi  +
push [ebp+var_14]  +
push 4  +
push [ebp+var_4]  +
push dword ptr [edi+4Ch]  +
push esi  +
call dword ptr [edi+28h]  +
mov ebx eax +
lea eax [ebp+var_1C] +
push eax  +
push edi  +
call sub_100E9BC  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
call sub_100E9BC  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
call sub_100E9BC  +
lea eax [ebp+var_10] +
push eax  +
call sub_100E98D  +
lea eax [ebp+var_14] +
push eax  +
call sub_100E98D  +
lea eax [ebp+var_C] +
push eax  +
call sub_100E98D  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor eax eax +
mov word ptr [ebp+var_10] ax +
lea edi [ebp+var_10+2] +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+var_18] ax +
lea edi [ebp+var_18+2] +
stos   +
stos   +
lea eax [ebp+var_18] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_100EAF5  +
mov edi eax +
test edi edi +
jl loc_100FBD1  +
lea eax [ebp+var_20] +
push eax  +
call ds:NtQuerySystemTime  +
mov edi eax +
test edi edi +
jl loc_100FBD1  +
movzx ecx word ptr [esi] +
mov eax [esi+4] +
shr ecx 1 +
lea esi [eax+ecx*2] +
lea ebx [esi-2] +
jmp loc_100FA43  +
cmp word ptr [ebx] 5Ch +
jz loc_100FA4C  +
dec ebx  +
dec ebx  +
mov [ebp+var_4] ebx +
cmp ebx eax +
ja loc_100FA3B  +
jmp loc_100FA51  +
inc ebx  +
inc ebx  +
mov [ebp+var_4] ebx +
movzx eax word ptr [ebp+var_18] +
lea ecx [ebp+arg_4] +
push ecx  +
shr eax 1 +
push 17h  +
push eax  +
mov [ebp+arg_4] eax +
call sub_100E8D3  +
mov edi eax +
test edi edi +
jl loc_100FBD1  +
lea eax [ebp+arg_4] +
push eax  +
push 0Bh  +
push [ebp+arg_4]  +
call sub_100E8D3  +
mov edi eax +
test edi edi +
jl loc_100FBD1  +
lea eax [ebp+arg_4] +
sub esi ebx +
push eax  +
sar esi 1 +
push esi  +
push [ebp+arg_4]  +
mov [ebp+var_8] esi +
call sub_100E8D3  +
mov edi eax +
test edi edi +
jl loc_100FBD1  +
mov esi [ebp+arg_4] +
cmp esi 7FFFh +
jb loc_100FAC0  +
push 0C0000106h  +
call sub_100F67B  +
jmp loc_100FBFA  +
lea eax [esi+esi] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
call sub_100F6C1  +
mov edi eax +
test edi edi +
jl loc_100FBD1  +
mov ebx [ebp+var_C] +
xor eax eax +
mov word ptr [ebp+var_10] ax +
lea eax [esi+esi] +
mov word ptr [ebp+var_10+2] ax +
movzx eax word ptr [ebp+var_18] +
push eax  +
push [ebp+var_14]  +
push ebx  +
call memcpy  +
movzx eax word ptr [ebp+var_18] +
add esp 0Ch +
push [ebp+arg_8]  +
shr eax 1 +
lea ebx [ebx+eax*2] +
push 6  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_0]  +
call sub_100F6FD  +
mov edi eax +
test edi edi +
jl loc_100FBD1  +
push 5Ch  +
pop eax  +
mov [ebx] ax +
inc ebx  +
push 5  +
inc ebx  +
pop ecx  +
mov edi ebx +
mov esi offset aDeleteme_ +
movs   +
movs   +
mov esi [ebp+var_8] +
add esi esi +
push esi  +
push [ebp+var_4]  +
add ebx 16h +
push ebx  +
call memcpy  +
add esp 0Ch +
push 2Eh  +
pop eax  +
push 2  +
pop edx  +
add ebx esi +
push 10h  +
mov [ebx] ax +
add ebx edx +
pop esi  +
mov ecx [ebp+var_1C] +
mov edi [ebp+var_20] +
mov eax ecx +
shr eax 1Ch +
shld ecx edi +
and ax 0Fh +
movzx eax ax +
shl edi 4 +
mov [ebp+var_20] edi +
mov [ebp+var_1C] ecx +
cmp ax 0Ah +
jb loc_100FB81  +
add eax 57h +
jmp loc_100FB84  +
add eax 30h +
mov [ebx] ax +
add ebx edx +
dec esi  +
jnz loc_100FB57  +
movzx ecx word_101E18C +
push 2Eh  +
pop eax  +
mov [ebx] ax +
push 4  +
add ebx edx +
inc word_101E18C  +
pop esi  +
mov ax cx +
shr ax 0Ch +
movzx eax ax +
shl ecx 4 +
cmp ax 0Ah +
jb loc_100FBBD  +
add eax 57h +
jmp loc_100FBC0  +
add eax 30h +
mov [ebx] ax +
add ebx edx +
dec esi  +
jnz loc_100FBA5  +
sub ebx [ebp+var_C] +
xor edi edi +
mov word ptr [ebp+var_10] bx +
lea eax [ebp+var_18] +
push eax  +
call ds:RtlFreeUnicodeString  +
test edi edi +
jge loc_100FBEA  +
lea eax [ebp+var_C] +
push eax  +
call sub_100E98D  +
jmp loc_100FBF8  +
mov ecx [ebp+var_10] +
mov eax [ebp+arg_C] +
mov [eax] ecx +
mov ecx [ebp+var_C] +
mov [eax+4] ecx +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov word ptr [ebp+var_C] ax +
lea edi [ebp+var_C+2] +
stos   +
stos   +
mov edi [ebp+arg_0] +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_14]  +
xor ebx ebx +
push [ebp+arg_8]  +
mov [ebp+var_4] ebx +
push edi  +
call sub_100F9DA  +
mov esi eax +
cmp esi ebx +
jl loc_100FCA5  +
movzx eax word ptr [ebp+var_C] +
add eax 10h +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_100F6C1  +
mov esi eax +
cmp esi ebx +
jl loc_100FCA5  +
mov esi [ebp+var_4] +
mov [esi] bl +
movzx eax word ptr [ebp+var_C] +
mov [esi+8] eax +
mov [esi+4] ebx +
movzx eax word ptr [ebp+var_C] +
push eax  +
push [ebp+var_8]  +
lea eax [esi+0Ch] +
push eax  +
call memcpy  +
movzx eax word ptr [ebp+var_C] +
add esp 0Ch +
push ebx  +
push 0Ah  +
add eax 0Ch +
push eax  +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_C]  +
push dword ptr [edi+4Ch]  +
push ebx  +
call dword ptr [edi+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_100FCA5  +
cmp [ebp+arg_10] ebx +
jz loc_100FCA5  +
push [ebp+arg_14]  +
lea eax [ebp+var_C] +
push eax  +
call [ebp+arg_10]  +
mov esi eax +
lea eax [ebp+var_8] +
push eax  +
call sub_100E98D  +
lea eax [ebp+var_4] +
push eax  +
call sub_100E98D  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov ecx [ebp+arg_14] +
push ebx  +
xor ebx ebx +
push esi  +
xor eax eax +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
mov byte ptr [ebp+var_1] 1 +
cmp ecx ebx +
jz loc_100FCE7  +
mov [ecx] ebx +
test [ebp+arg_0] 1 +
mov ecx [ebp+arg_8] +
mov [ebp+var_2C] 18h +
mov [ebp+var_28] ebx +
mov [ebp+var_20] 40h +
mov [ebp+var_24] ecx +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
jz loc_100FD0D  +
xor eax eax +
inc eax  +
test [ebp+arg_0] 2 +
jz loc_100FD16  +
or eax 2 +
mov esi [ebp+arg_4] +
lea ecx [ebp+arg_4] +
push ecx  +
push [ebp+arg_10]  +
lea ecx [ebp+var_54] +
push ecx  +
lea ecx [ebp+var_2C] +
push ecx  +
push dword ptr [esi+4Ch]  +
or eax 0Ch +
push eax  +
call dword ptr [esi+1Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_100FEA8  +
push 2  +
pop eax  +
cmp [ebp+arg_4] eax +
jnz loc_100FD4C  +
mov [ebp+var_C] eax +
jmp loc_100FEA8  +
push 3  +
pop eax  +
cmp [ebp+arg_4] eax +
jz loc_100FD44  +
cmp [ebp+arg_4] 1 +
mov ebx 204020h +
jnz loc_100FE4E  +
test byte ptr [ebp+var_34] 1 +
jz loc_100FDDD  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_10]  +
lea eax [ebp+var_14] +
push ebx  +
push 7  +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
push 100100h  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
push 6  +
call dword ptr [esi+4]  +
mov edi eax +
test edi edi +
jl loc_100FEA8  +
cmp [ebp+arg_4] 1 +
jnz loc_100FE4E  +
mov eax [ebp+var_34] +
push 0  +
and eax 3126h +
push 4  +
or eax 80h +
push 28h  +
mov [ebp+var_34] eax +
lea eax [ebp+var_54] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push 0  +
call dword ptr [esi+14h]  +
mov edi eax +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100E9BC  +
test edi edi +
jl loc_100FEA8  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_10]  +
lea eax [ebp+var_14] +
push ebx  +
push 0  +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
push 110182h  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
push 6  +
call dword ptr [esi+4]  +
mov edi eax +
test edi edi +
jl loc_100FEA8  +
cmp [ebp+arg_4] 1 +
jnz loc_100FE4E  +
test [ebp+arg_0] 4 +
push 2  +
pop eax  +
jz loc_100FE1C  +
push 6  +
pop eax  +
lea ecx [ebp+arg_4] +
push ecx  +
push 0Dh  +
push 1  +
lea ecx [ebp+var_1] +
push ecx  +
lea ecx [ebp+var_14] +
push ecx  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push eax  +
call dword ptr [esi+14h]  +
mov edi eax +
test edi edi +
jl loc_100FEA8  +
push 4  +
pop eax  +
cmp [ebp+arg_4] eax +
jz loc_100FD44  +
cmp [ebp+arg_4] 3 +
jnz loc_100FEA1  +
cmp [ebp+var_8] 0 +
jz loc_100FE5E  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100E9BC  +
push 0  +
push [ebp+arg_10]  +
lea eax [ebp+var_14] +
push ebx  +
push 7  +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
push 110000h  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
push 1  +
call dword ptr [esi+4]  +
mov edi eax +
test edi edi +
jl loc_100FEA8  +
push [ebp+arg_10]  +
lea eax [ebp+var_14] +
push [ebp+arg_C]  +
push [ebp+var_8]  +
push [ebp+arg_8]  +
push eax  +
push esi  +
call sub_100FC06  +
mov edi eax +
test edi edi +
jl loc_100FEA8  +
mov [ebp+var_C] 1 +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_100FEB4  +
mov ecx [ebp+var_C] +
mov [eax] ecx +
cmp [ebp+var_8] 0 +
jz loc_100FEC4  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100E9BC  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
call sub_100F6C1  +
mov ecx [ebp+arg_4] +
xor edx edx +
cmp eax edx +
mov [ecx] edx +
jl loc_100FEF8  +
mov edx [ebp+arg_0] +
mov [ecx+4] esi +
jmp loc_100FEFB  +
mov [ecx+4] edx +
mov [ecx+8] edx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0ACh +
mov edx [ebp+arg_1C] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+var_10] +
mov [ebp+var_14] ebx +
stos   +
mov [ebp+var_7C] ebx +
lea edi [ebp+var_78] +
stos   +
stos   +
mov [ebp+var_4] ebx +
mov [ebp+var_50] 18h +
mov [ebp+var_4C] ebx +
mov [ebp+var_48] ebx +
mov [ebp+var_44] 240h +
mov [ebp+var_40] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_19] bl +
mov [ebp+var_25] bl +
mov [ebp+var_9] bl +
mov [ebp+var_54] ebx +
mov [ebp+var_70] ebx +
lea eax [edx+8] +
cmp edx ebx +
jnz loc_100FF65  +
lea eax [ebp+var_70] +
mov ecx [ebp+arg_20] +
mov [ebp+var_18] eax +
cmp ecx ebx +
jz loc_100FF84  +
or dword ptr [ecx+8] 0FFFFFFFFh +
or dword ptr [ecx+0Ch] 0FFFFFFFFh +
mov [ecx] ebx +
mov [ecx+4] ebx +
xor eax eax +
lea edi [ecx+10h] +
stos   +
stos   +
stos   +
test [ebp+arg_0] 0FFFFFFFCh +
mov esi [ebp+arg_14] +
jz loc_100FF9C  +
mov [ebp+var_4] 0C000000Dh +
jmp loc_10108D6  +
cmp [ebp+arg_4] ebx +
jz loc_100FF90  +
cmp edx ebx +
jz loc_100FFAA  +
cmp [edx+0Ch] bl +
jnz loc_1010003  +
test byte ptr [ebp+arg_0] 1 +
jz loc_1010007  +
lea eax [ebp+arg_14+3] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_10]  +
call [ebp+arg_4]  +
cmp byte ptr [ebp+arg_14+3] bl +
jnz loc_100FF90  +
mov edi [ebp+arg_18] +
mov eax [ebp+var_14] +
mov [ebp+var_2C] eax +
cmp [ebp+arg_8] ebx +
jz loc_100FFD9  +
push 1  +
push [ebp+arg_10]  +
call [ebp+arg_8]  +
cmp edi ebx +
jz loc_100FFE8  +
lea eax [ebp+var_14] +
push eax  +
push dword ptr [edi]  +
push ebx  +
push ebx  +
call dword ptr [edi+4]  +
cmp [ebp+var_2C] 10h +
jz loc_1010003  +
lea eax [ebp+arg_14+3] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_10]  +
call [ebp+arg_4]  +
cmp byte ptr [ebp+arg_14+3] bl +
jz loc_100FFC6  +
jmp loc_100FF90  +
mov [ebp+var_9] 1 +
mov eax [ebp+arg_0] +
and eax 2 +
mov [ebp+var_25] 1 +
mov [ebp+var_68] eax +
cmp [ebp+var_68] ebx +
jz loc_1010022  +
cmp [ebp+var_9] bl +
jnz loc_10108D3  +
lea eax [ebp+arg_0+3] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_10]  +
call [ebp+arg_4]  +
cmp byte ptr [ebp+arg_0+3] bl +
jnz loc_10108D3  +
mov eax [ebp+arg_18] +
mov [ebp+var_19] 1 +
cmp eax ebx +
jz loc_101004F  +
lea ecx [ebp+var_14] +
push ecx  +
push dword ptr [eax]  +
push ebx  +
push ebx  +
call dword ptr [eax+4]  +
mov ecx [ebp+var_14] +
lea eax [ecx-1] +
cmp eax 0Fh +
ja loc_10108A6  +
jmp ds:off_101094C[eax*4]  +
mov edi [ebp+var_10] +
cmp edi ebx +
jz loc_100FF90  +
add edi 4 +
push edi  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
mov eax [ebp+var_10] +
mov eax [eax+0Ch] +
cmp eax ebx +
jz loc_101008E  +
mov [ebp+var_40] eax +
mov eax [ebp+var_18] +
push ebx  +
push ebx  +
push dword ptr [eax]  +
lea eax [ebp+var_50] +
push 4  +
push ebx  +
push ebx  +
push eax  +
push 20006h  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_48] edi +
push 4  +
call dword ptr [esi+2Ch]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10100C2  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100E9BC  +
mov [ebp+var_40] ebx +
jmp loc_10108AD  +
mov eax [ebp+var_10] +
mov [ebp+var_24] 7 +
mov [ebp+var_20] ebx +
cmp eax ebx +
jz loc_100FF90  +
lea edi [eax+4] +
push edi  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
lea eax [ebp+var_20] +
push eax  +
mov eax [ebp+var_18] +
push dword ptr [eax]  +
lea eax [ebp+var_50] +
push eax  +
push 10000h  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
push 3  +
mov [ebp+var_48] edi +
call sub_100F13F  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
cmp [ebp+var_20] 2 +
jz loc_101018E  +
cmp [ebp+var_20] 3 +
jz loc_101018E  +
mov eax [ebp+var_10] +
test byte ptr [eax] 1 +
jz loc_1010137  +
mov [ebp+var_24] 0Fh +
lea eax [ebp+var_20] +
push eax  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push [ebp+var_24]  +
call dword ptr [esi+34h]  +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100E9BC  +
cmp [ebp+var_20] 2 +
jz loc_1010166  +
cmp [ebp+var_20] 3 +
jz loc_1010166  +
cmp [ebp+var_20] 4 +
jnz loc_1010173  +
mov eax [ebp+var_10] +
push ebx  +
add eax 4 +
push eax  +
call sub_100E9E3  +
cmp [ebp+var_20] 5 +
jnz loc_10108AD  +
mov eax [ebp+var_10] +
add eax 4 +
push eax  +
call sub_100EA31  +
jmp loc_10108AD  +
mov eax [ebp+var_10] +
push ebx  +
add eax 4 +
push eax  +
call sub_100E9E3  +
jmp loc_10108AD  +
mov edi [ebp+var_10] +
cmp edi ebx +
jz loc_100FF90  +
add edi 4 +
push edi  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
mov eax [ebp+var_10] +
add eax 0Ch +
push eax  +
call sub_100E901  +
test al al +
jz loc_100FF90  +
mov eax [ebp+var_10] +
cmp dword ptr [eax+18h] 0FFFFFFFFh +
ja loc_100FF90  +
mov eax [ebp+var_18] +
push ebx  +
push ebx  +
push dword ptr [eax]  +
lea eax [ebp+var_50] +
push 4  +
push ebx  +
push ebx  +
push eax  +
push 20006h  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_48] edi +
push 4  +
call dword ptr [esi+2Ch]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
mov eax [ebp+var_10] +
push ebx  +
push dword ptr [eax+18h]  +
lea ecx [eax+0Ch] +
push dword ptr [eax+20h]  +
push dword ptr [eax+14h]  +
push ebx  +
push ecx  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+3Ch]  +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100E9BC  +
jmp loc_10108AD  +
mov edi [ebp+var_10] +
cmp edi ebx +
jz loc_100FF90  +
add edi 4 +
push edi  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
mov eax [ebp+var_10] +
add eax 0Ch +
push eax  +
call sub_100E901  +
test al al +
jz loc_100FF90  +
lea eax [ebp+var_30] +
push eax  +
mov eax [ebp+var_18] +
push dword ptr [eax]  +
lea eax [ebp+var_50] +
push eax  +
push 20006h  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
push 3  +
mov [ebp+var_48] edi +
pop edi  +
push edi  +
call sub_100F13F  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
cmp [ebp+var_30] 2 +
jz loc_101018E  +
cmp [ebp+var_30] edi +
jz loc_101018E  +
lea eax [ebp+var_30] +
push eax  +
mov eax [ebp+var_10] +
add eax 0Ch +
push eax  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push edi  +
call dword ptr [esi+40h]  +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100E9BC  +
cmp [ebp+var_4] ebx +
jl loc_10108D6  +
cmp [ebp+var_30] 2 +
jz loc_10102E4  +
cmp [ebp+var_30] edi +
jnz loc_10108AD  +
mov eax [ebp+var_10] +
lea ecx [eax+0Ch] +
push ecx  +
jmp loc_1010192  +
mov eax [ebp+var_10] +
cmp eax ebx +
jz loc_100FF90  +
mov ecx [eax] +
mov [ebp+var_2C] ecx +
test ecx 0FFFFFFFEh +
jnz loc_100FF90  +
lea edi [eax+4] +
push edi  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
test byte ptr [ebp+var_2C] 1 +
push 3  +
pop eax  +
jz loc_1010329  +
push 7  +
pop eax  +
lea ecx [ebp+var_58] +
push ecx  +
mov ecx [ebp+var_18] +
push dword ptr [ecx]  +
push [ebp+arg_C]  +
push edi  +
push esi  +
push eax  +
call sub_100FCC5  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
cmp [ebp+var_58] 2 +
jz loc_1010354  +
cmp [ebp+var_58] 3 +
jnz loc_1010361  +
mov eax [ebp+var_10] +
push ebx  +
add eax 4 +
push eax  +
call sub_100E9E3  +
cmp [ebp+var_58] 4 +
jmp loc_1010177  +
mov eax ecx +
dec eax  +
dec eax  +
jz loc_1010384  +
dec eax  +
dec eax  +
jnz loc_1010392  +
mov [ebp+var_60] 0Bh +
mov [ebp+var_5C] 100100h +
jmp loc_1010392  +
mov [ebp+var_60] 0Ah +
mov [ebp+var_5C] 110000h +
mov edi [ebp+var_10] +
cmp edi ebx +
jz loc_100FF90  +
cmp [edi] ebx +
jnz loc_100FF90  +
add edi 4 +
push edi  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
mov eax [ebp+var_10] +
add eax 0Ch +
push eax  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
mov eax [ebp+var_18] +
push ebx  +
push dword ptr [eax]  +
lea eax [ebp+var_38] +
push 204022h  +
push 7  +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push [ebp+var_5C]  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_48] edi +
push 1  +
call dword ptr [esi+4]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
lea eax [ebp+var_64] +
push eax  +
mov eax [ebp+var_10] +
movzx eax word ptr [eax+0Ch] +
push eax  +
push 10h  +
call sub_100E8D3  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
lea eax [ebp+var_7C] +
push eax  +
push [ebp+var_64]  +
call sub_100FED2  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
mov eax [ebp+var_10] +
movzx eax word ptr [eax+0Ch] +
mov edi [ebp+var_74] +
push eax  +
mov [edi+8] eax +
mov eax [ebp+var_10] +
push dword ptr [eax+10h]  +
lea eax [edi+0Ch] +
push eax  +
call memcpy  +
mov eax [ebp+var_18] +
add esp 0Ch +
push ebx  +
mov byte ptr [edi] 1 +
mov [edi+4] ebx +
push dword ptr [eax]  +
mov eax [ebp+var_10] +
push [ebp+arg_C]  +
add eax 0Ch +
push eax  +
push esi  +
push 1  +
call sub_100FCC5  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
push ebx  +
push [ebp+var_60]  +
lea eax [ebp+var_38] +
push [ebp+var_64]  +
push edi  +
push eax  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+14h]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
jmp loc_101022A  +
mov edi [ebp+var_10] +
mov [ebp+var_24] 80h +
cmp edi ebx +
jz loc_100FF90  +
cmp [edi] ebx +
jnz loc_100FF90  +
add edi 8 +
push edi  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
mov eax [ebp+var_10] +
mov eax [eax+4] +
cmp eax ebx +
jz loc_10104D8  +
mov [ebp+var_24] eax +
mov eax [ebp+var_18] +
push ebx  +
push dword ptr [eax]  +
lea eax [ebp+var_38] +
push ebx  +
push ebx  +
push 4021h  +
push 3  +
push 7  +
push [ebp+var_24]  +
mov [ebp+var_48] edi +
push ebx  +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push 120116h  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
push 6  +
call dword ptr [esi]  +
jmp loc_1010490  +
mov eax [ebp+var_10] +
mov [ebp+var_20] 100100h +
cmp eax ebx +
jz loc_100FF90  +
mov ecx [eax] +
mov [ebp+var_2C] ecx +
test ecx 0FFFFFF80h +
jnz loc_100FF90  +
add eax 0Ch +
push eax  +
mov [ebp+var_24] eax +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
push 0Ah  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_AC] +
stos   +
mov ecx [ebp+var_2C] +
mov eax [ebp+var_10] +
test cl 4 +
jz loc_101056B  +
mov edx [eax+18h] +
mov [ebp+var_AC] edx +
mov edx [eax+1Ch] +
mov [ebp+var_A8] edx +
test cl 8 +
jz loc_1010582  +
mov edx [eax+20h] +
mov [ebp+var_A4] edx +
mov edx [eax+24h] +
mov [ebp+var_A0] edx +
test cl 10h +
jz loc_1010599  +
mov edx [eax+28h] +
mov [ebp+var_9C] edx +
mov eax [eax+2Ch] +
mov [ebp+var_98] eax +
mov eax [ebp+var_24] +
mov [ebp+var_24] ecx +
and [ebp+var_24] 2 +
mov [ebp+var_48] eax +
jz loc_10105AF  +
mov [ebp+var_20] 11C0100h +
mov edi ecx +
and edi 20h +
jz loc_10105BA  +
or [ebp+var_20] 2 +
mov eax [ebp+var_18] +
push dword ptr [eax]  +
lea eax [ebp+var_6C] +
push eax  +
lea eax [ebp+arg_14+3] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push esi  +
call sub_100EE4F  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
mov eax [ebp+var_18] +
push ebx  +
push dword ptr [eax]  +
lea eax [ebp+var_38] +
push 204020h  +
push 7  +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push [ebp+var_20]  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
push 1  +
call dword ptr [esi+4]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
push ebx  +
push 4  +
push 28h  +
lea eax [ebp+var_AC] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+14h]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_101022A  +
cmp edi ebx +
jz loc_101066B  +
mov eax [ebp+var_10] +
mov ecx [eax+30h] +
push ebx  +
push 14h  +
mov [ebp+var_84] ecx +
mov eax [eax+34h] +
push 8  +
mov [ebp+var_80] eax +
lea eax [ebp+var_84] +
push eax  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+14h]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_101022A  +
mov edi [ebp+var_18] +
cmp [ebp+var_24] ebx +
jz loc_101068C  +
push dword ptr [edi]  +
push [ebp+var_8]  +
push [ebp+var_10]  +
push esi  +
call sub_100EEAE  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_101022A  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100E9BC  +
test byte ptr [ebp+var_2C] 1 +
jz loc_10106A6  +
push dword ptr [edi]  +
mov eax [ebp+var_10] +
push dword ptr [eax+4]  +
jmp loc_10106B4  +
cmp byte ptr [ebp+arg_14+3] bl +
jz loc_10108AD  +
push dword ptr [edi]  +
push [ebp+var_6C]  +
lea eax [ebp+var_50] +
push eax  +
push esi  +
call sub_100EDC6  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
jmp loc_10108AD  +
mov edi [ebp+var_10] +
cmp edi ebx +
jz loc_100FF90  +
cmp dword ptr [edi+0Ch] 0FFFFFFFFh +
ja loc_100FF90  +
add edi 4 +
push edi  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
mov eax [ebp+var_10] +
test dword ptr [eax] 0FFFFFFFEh +
jnz loc_100FF90  +
mov eax [ebp+var_18] +
push ebx  +
push dword ptr [eax]  +
lea eax [ebp+var_38] +
push 4060h  +
push 7  +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push 120116h  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
mov [ebp+var_48] edi +
push 1  +
call dword ptr [esi+4]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
mov eax [ebp+var_10] +
xor ecx ecx +
test byte ptr [eax] 1 +
jz loc_1010744  +
lea ecx [eax+18h] +
push ebx  +
push ebx  +
push ecx  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+14h]  +
lea eax [ebp+var_38] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+0Ch]  +
jmp loc_1010227  +
mov edi [ebp+var_10] +
cmp edi ebx +
jz loc_100FF90  +
cmp [edi] ebx +
jnz loc_100FF90  +
lea eax [edi+8] +
push eax  +
mov [ebp+var_2C] eax +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
cmp [edi+10h] ebx +
jnz loc_10108CA  +
mov edi [ebp+var_18] +
push ebx  +
push dword ptr [edi]  +
push [ebp+arg_C]  +
push [ebp+var_2C]  +
push esi  +
push 1  +
call sub_100FCC5  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
mov eax [ebp+var_10] +
push ebx  +
push dword ptr [edi]  +
lea ecx [eax+8] +
push ebx  +
push ebx  +
push 4060h  +
push ebx  +
push 7  +
mov [ebp+var_48] ecx +
push dword ptr [eax+4]  +
lea eax [ebp+var_38] +
push ebx  +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push 120116h  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
push 1  +
jmp loc_1010506  +
mov eax [ebp+var_10] +
mov [ebp+var_2C] ebx +
cmp eax ebx +
jz loc_100FF90  +
cmp [eax] ebx +
jnz loc_100FF90  +
lea edi [eax+4] +
push edi  +
call sub_100E94B  +
test al al +
jz loc_100FF90  +
lea eax [ebp+var_2C] +
push eax  +
mov eax [ebp+var_18] +
push dword ptr [eax]  +
lea eax [ebp+var_38] +
push ebx  +
push ebx  +
push 4020h  +
push 1  +
push 7  +
push ebx  +
push ebx  +
push eax  +
lea eax [ebp+var_50] +
push eax  +
mov [ebp+var_48] edi +
mov edi 100002h +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
push 11h  +
call dword ptr [esi]  +
cmp [ebp+var_2C] 5 +
mov [ebp+var_4] eax +
jnz loc_101086F  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4020h  +
push 1  +
push 7  +
push ebx  +
push ebx  +
lea eax [ebp+var_38] +
push eax  +
lea eax [ebp+var_50] +
push eax  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push dword ptr [esi+4Ch]  +
push 1  +
call dword ptr [esi]  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] ebx +
jl loc_10108D6  +
push ebx  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+var_8]  +
push dword ptr [esi+4Ch]  +
push ebx  +
call dword ptr [esi+20h]  +
jmp loc_1010227  +
cmp [ebp+var_9] bl +
jnz loc_10108AD  +
mov eax [ebp+arg_1C] +
cmp eax ebx +
jz loc_10108A0  +
push dword ptr [eax+4]  +
call dword ptr [eax]  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10108D6  +
mov [ebp+var_9] 1 +
jmp loc_10108AD  +
mov [ebp+var_4] 0C000000Dh +
cmp [ebp+var_4] ebx +
jl loc_10108D6  +
cmp [ebp+arg_8] ebx +
jz loc_10108C2  +
push 1  +
push [ebp+arg_10]  +
call [ebp+arg_8]  +
mov [ebp+var_19] bl +
inc [ebp+var_54]  +
jmp loc_1010014  +
mov [ebp+var_4] 0C0000002h +
jmp loc_10108D6  +
mov [ebp+var_4] ebx +
mov eax [ebp+arg_1C] +
cmp eax ebx +
jz loc_10108E3  +
mov cl [ebp+var_9] +
mov [eax+0Ch] cl +
mov edi [ebp+var_4] +
cmp edi ebx +
jge loc_1010916  +
cmp [ebp+var_25] bl +
jz loc_1010916  +
mov eax [ebp+arg_20] +
cmp eax ebx +
jz loc_1010916  +
mov ecx [ebp+var_14] +
mov [eax+4] ecx +
mov ecx [ebp+var_54] +
mov [eax] edi +
mov [eax+8] ebx +
mov [eax+0Ch] ecx +
add eax 10h +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_100F1E2  +
mov edi eax +
cmp [ebp+var_19] bl +
jz loc_101092F  +
cmp [ebp+arg_8] ebx +
jz loc_101092F  +
cmp edi ebx +
setnl al  +
movzx eax al +
push eax  +
push [ebp+arg_10]  +
call [ebp+arg_8]  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_100E9BC  +
lea eax [ebp+var_7C] +
push eax  +
call sub_100F6A1  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
push ebx  +
push esi  +
push edi  +
lea edx [ebp+var_8] +
push edx  +
lea edx [ebp+var_4] +
push edx  +
push offset a8_0  +
mov ebx 20006h +
push ebx  +
xor esi esi +
push 2  +
mov [ebp+var_4] esi +
call dword ptr [eax+18h]  +
cmp eax esi +
mov ecx [ebp+var_4] +
jge loc_10109C9  +
mov edi eax +
jmp loc_1010A35  +
mov [ebp+var_1C] 14h +
xor eax eax +
lea edi [ebp+var_18] +
stos   +
stos   +
lea edx [ebp+var_8] +
push edx  +
lea edx [ebp+arg_0] +
push edx  +
stos   +
push 4  +
lea edx [ebp+var_1C] +
push edx  +
stos   +
push ebx  +
mov [ebp+var_18] offset dword_1003940 +
mov [ebp+var_14] 40h +
mov [ebp+arg_0] esi +
mov eax [ecx] +
push 1  +
call dword ptr [eax+1Ch]  +
cmp eax esi +
mov ecx [ebp+arg_0] +
jge loc_1010A0B  +
mov edi eax +
jmp loc_1010A27  +
mov eax [ecx] +
push esi  +
push 10h  +
push [ebp+arg_4]  +
push 3  +
push offset dword_1003968  +
push esi  +
call dword ptr [eax+34h]  +
cmp eax esi +
mov ecx [ebp+arg_0] +
jl loc_1010A07  +
xor edi edi +
cmp ecx esi +
jz loc_1010A32  +
mov [ebp+arg_0] esi +
mov eax [ecx] +
call dword ptr [eax]  +
mov ecx [ebp+var_4] +
cmp ecx esi +
jz loc_1010A40  +
mov [ebp+var_4] esi +
mov eax [ecx] +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
xor esi esi +
lea eax [ebp+var_8] +
push eax  +
push 4  +
push esi  +
push esi  +
lea eax [ebp+var_20] +
push eax  +
push 2001Fh  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_20] 18h +
mov [ebp+var_1C] esi +
mov [ebp+var_14] 40h +
mov [ebp+var_18] offset aRt +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
call ds:NtCreateKey  +
cmp eax esi +
jge loc_1010AA3  +
push 5Ah  +
mov edi offset aNtcreatekeyK_0 +
jmp loc_1010AC4  +
push 10h  +
push [ebp+arg_0]  +
push 3  +
push esi  +
push offset dword_1003960  +
push [ebp+var_4]  +
call ds:NtSetValueKey  +
cmp eax esi +
jge loc_1010AF2  +
push 63h  +
mov edi offset aNtsetvaluekeyK +
pop esi  +
lea ecx [ebp+var_4] +
mov [ebp+arg_0] eax +
call sub_1010BB6  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+var_18] offset aDW7rtmBaseWcpL +
mov [ebp+var_14] offset aWindowsWcpCcpi +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
call sub_1008207  +
jmp loc_1010AFD  +
lea ecx [ebp+var_4] +
mov [ebp+arg_0] esi +
call sub_1010BB6  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push [ebp+arg_4]  +
jz loc_1010B27  +
push [ebp+arg_0]  +
call sub_1010991  +
test eax eax +
jge loc_1010B30  +
jmp loc_1010B32  +
call sub_1010A4E  +
test eax eax +
jl loc_1010B32  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_4] eax +
lea eax [ebp+var_10] +
push eax  +
push 0  +
call sub_1010B0B  +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call ds:RtlDuplicateUnicodeString  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
push esi  +
mov esi [eax+4] +
push edi  +
mov edi [ecx] +
mov [eax] edi +
mov edi [ecx+4] +
mov [eax+4] edi +
pop edi  +
mov [ecx+4] esi +
mov [ecx] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
mov edi [esi] +
push edi  +
call sub_1008181  +
test al al +
jz loc_1010BD2  +
and dword ptr [esi] 0 +
push edi  +
call ds:NtClose  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
xor esi esi +
mov [ebp+var_20] ecx +
mov ecx [ebp+arg_0] +
mov [ebp+var_28] 18h +
mov [ebp+var_24] esi +
mov [ebp+var_1C] 40h +
mov [ebp+var_18] esi +
mov [ebp+var_14] esi +
call sub_1010BB6  +
push 4020h  +
push 7  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
push 12019Fh  +
push [ebp+arg_0]  +
call ds:NtOpenFile  +
cmp eax esi +
jge loc_1010C55  +
mov esi eax +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_0] +
mov [ebp+arg_0] esi +
mov [ebp+var_10] offset aDW7rtmBaseWc_3 +
mov [ebp+var_C] offset aWindowsRtlTxfl +
mov [ebp+var_8] 33h +
mov [ebp+var_4] offset aNtopenfileHand +
call sub_1008207  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+8] bl +
jz loc_1010D0A  +
push edi  +
push 9  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_3C] +
stos   +
mov eax [esi+0Ch] +
mov [ebp+var_3C] eax +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
mov [ebp+var_4] ebx +
mov [ebp+var_40] 4 +
call sub_1010BDA  +
cmp eax ebx +
pop edi  +
jge loc_1010CA7  +
mov ebx eax +
jmp loc_1010D02  +
push ebx  +
push ebx  +
push 28h  +
lea eax [ebp+var_40] +
push eax  +
push 98144h  +
lea eax [ebp+var_10] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+var_4]  +
call ds:NtFsControlFile  +
cmp eax ebx +
jge loc_1010CFF  +
mov ebx eax +
lea ecx [ebp+var_4] +
mov [ebp+var_8] ebx +
call sub_1010BB6  +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_18] offset aDW7rtmBaseWc_3 +
mov [ebp+var_14] offset aWindowsRtlTx_0 +
mov [ebp+var_10] 88h +
mov [ebp+var_C] offset aNtfscontrolfil +
call sub_1008207  +
jmp loc_1010D0A  +
mov [esi+8] bl +
lea ecx [ebp+var_4] +
call sub_1010BB6  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
and [ebp+var_4] eax +
push esi  +
mov word ptr [ebp+var_8] ax +
mov word ptr [ebp+var_8+2] ax +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1010B71  +
test eax eax +
jge loc_1010D4D  +
mov esi eax +
lea ecx [ebp+var_8] +
call sub_1008288  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
push esi  +
lea ecx [ebp+var_8] +
call sub_1010B8D  +
xor esi esi +
jmp loc_1010D3E  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi+8] 0 +
jz loc_1010D6F  +
call sub_1010C61  +
mov ecx esi +
pop esi  +
jmp sub_1008288  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1010D15  +
test eax eax +
jl loc_1010D8F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0D8h +
mov eax dword_101D040 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_C4] eax +
mov eax [ebp+arg_8] +
push 0A8h  +
mov [ebp+var_B8] eax +
xor ebx ebx +
lea eax [ebp+var_AC] +
push ebx  +
mov esi 0B0h +
push eax  +
mov [ebp+var_C8] edi +
mov [ebp+var_B4] esi +
call memset  +
mov eax [ebp+var_B8] +
add esp 0Ch +
push esi  +
mov [edi] ebx +
mov edi ds:NtFsControlFile +
mov [eax] bl +
lea eax [ebp+var_B4] +
push eax  +
push ebx  +
push ebx  +
push 94148h  +
lea eax [ebp+var_D0] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+var_C4]  +
mov [ebp+var_C0] ebx +
mov [ebp+var_BC] ebx +
call edi  +
cmp eax ebx +
jl loc_1010E4B  +
lea esi [ebp+var_B4] +
test byte ptr [esi+44h] 80h +
mov eax [ebp+var_B8] +
jz loc_1010EE2  +
mov [eax] bl +
jmp loc_1010EF0  +
cmp eax 80000005h +
jnz loc_1010F0C  +
cmp [ebp+var_B4] esi +
ja loc_1010E5F  +
int 3  +
push [ebp+var_B4]  +
lea ecx [ebp+var_C0] +
call sub_100821F  +
test eax eax +
jnz loc_1010EA2  +
mov esi 0BFh +
mov edi offset aBigqueryinfo_a +
mov [ebp+var_B8] 0C0000017h +
cmp [ebp+var_C0] ebx +
jz loc_1010F19  +
push [ebp+var_C0]  +
call sub_100813B  +
pop ecx  +
jmp loc_1010F19  +
push [ebp+var_B4]  +
mov esi [ebp+var_C0] +
push esi  +
push ebx  +
push ebx  +
push 94148h  +
lea eax [ebp+var_D0] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+var_C4]  +
call edi  +
cmp eax ebx +
jge loc_1010E34  +
mov esi 0CDh +
mov edi offset aNtfscontrolf_0 +
mov [ebp+var_B8] eax +
jmp loc_1010E88  +
mov ecx [ebp+var_C8] +
mov byte ptr [eax] 1 +
mov eax [esi+34h] +
mov [ecx] eax +
mov [ebp+var_B8] ebx +
cmp [ebp+var_C0] ebx +
jz loc_1010F4B  +
push [ebp+var_C0]  +
call sub_100813B  +
pop ecx  +
jmp loc_1010F4B  +
mov esi 0D1h +
xor edi edi +
mov [ebp+var_B8] eax +
lea eax [ebp+var_D8] +
push eax  +
lea ecx [ebp+var_B8] +
mov [ebp+var_D8] offset aDW7rtmBaseWc_3 +
mov [ebp+var_D4] offset aWindowsRtlTx_1 +
mov [ebp+var_D0] esi +
mov [ebp+var_CC] edi +
call sub_1008207  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_B8] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C515  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_8] ebx +
cmp [esi+8] bl +
jz loc_1010F7F  +
int 3  +
lea eax [ebp+var_8] +
push eax  +
call sub_1010BDA  +
cmp eax ebx +
jge loc_1010F93  +
mov ebx eax +
jmp loc_1011023  +
lea eax [ebp-1] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_8]  +
mov ecx esi +
call sub_1010D98  +
cmp eax ebx +
jl loc_1010F8C  +
cmp [ebp+var_1] bl +
jz loc_1011023  +
push edi  +
push 9  +
pop ecx  +
push ebx  +
push ebx  +
push 28h  +
xor eax eax +
lea edi [ebp+var_40] +
stos   +
lea eax [ebp+var_44] +
push eax  +
push 98144h  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+var_8]  +
mov [ebp+var_44] 80h +
call ds:NtFsControlFile  +
cmp eax ebx +
pop edi  +
jge loc_1011019  +
mov ebx eax +
lea ecx [ebp+var_8] +
mov [ebp+var_C] ebx +
call sub_1010BB6  +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_C] +
mov [ebp+var_1C] offset aDW7rtmBaseWc_3 +
mov [ebp+var_18] offset aWindowsRtlTx_2 +
mov [ebp+var_14] 63h +
mov [ebp+var_10] offset aNtfscontrolfil +
call sub_1008207  +
jmp loc_101102B  +
mov eax [ebp+var_C] +
mov byte ptr [esi+8] 1 +
mov [esi+0Ch] eax +
lea ecx [ebp+var_8] +
call sub_1010BB6  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1011059  +
push 3  +
pop ecx  +
mov [eax+6] cx +
xor ecx ecx +
inc ecx  +
mov [eax+4] cx +
xor ecx ecx +
mov [eax+2] cx +
mov [eax] cx +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1011066  +
mov dword ptr [eax] offset dword_100397C +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
lea esi [ebp+arg_4+3] +
push esi  +
xor ebx ebx +
lea esi [ebp+var_4] +
push esi  +
push eax  +
mov [eax] ebx +
mov [eax+4] ebx +
mov edx [ecx+8] +
mov eax [ecx] +
push offset loc_1019829  +
add eax edx +
push eax  +
push edx  +
push ebx  +
mov [ebp+var_4] ebx +
call sub_1011140  +
cmp eax ebx +
jge loc_10110AE  +
mov ebx eax +
jmp loc_10110E3  +
cmp byte ptr [ebp+arg_4+3] bl +
jnz loc_10110E3  +
lea eax [ebp+var_14] +
mov ebx 0C000000Dh +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] ebx +
mov [ebp+var_14] offset aDW7rtmBaseWc_4 +
mov [ebp+var_10] offset aRtlparsedotted +
mov [ebp+var_C] 34h +
mov [ebp+var_8] offset aFsuccess +
call sub_1008207  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
cmp edx 0FFFFh +
ja loc_101110A  +
mov ecx [ebp+arg_0] +
and dword ptr [eax] 0 +
mov [ecx] dx +
jmp loc_1011110  +
mov dword ptr [eax] 0C0000095h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_8] +
movzx edx [ebp+arg_4] +
push [ebp+arg_C]  +
imul edx eax +
mov ecx [ebp+arg_0] +
call sub_10110F0  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
sub esp 24h +
push ebx  +
push esi  +
xor esi esi +
mov [eax] esi +
mov [eax+4] esi +
mov eax [ebp+arg_18] +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_14] +
push edi  +
cmp eax esi +
jz loc_1011164  +
mov [eax] esi +
test [ebp+arg_0] 0FFFFFFFEh +
jz loc_101116E  +
int 3  +
mov edi [ebp+arg_4] +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
mov [ebp+var_1] 0 +
mov [ebp+var_2] 0 +
mov [ebp+var_10] esi +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_8] +
cmp ecx edx +
setz bl  +
test bl bl +
jnz loc_10111A8  +
call [ebp+arg_C]  +
cmp eax 0FFFFFFFFh +
jz loc_10112AC  +
mov edi eax +
mov [ebp+arg_4] edx +
cmp edi 2Eh +
jz loc_101123A  +
test bl bl +
jnz loc_101123A  +
lea eax [edi-30h] +
cmp eax 9 +
ja loc_1011214  +
cmp [ebp+var_1] bl +
jnz loc_10112E1  +
lea eax [ebp+var_10] +
push eax  +
push 0Ah  +
push esi  +
lea eax [ebp+var_14] +
push eax  +
mov [ebp+var_2] 1 +
call sub_1011119  +
cmp [ebp+var_14] 0C0000095h +
jz loc_10112E1  +
mov edx [ebp+var_10] +
lea eax [edi-30h] +
movzx eax ax +
lea ecx [eax+edx] +
movzx ecx cx +
cmp cx dx +
jb loc_10112E1  +
cmp cx ax +
jb loc_10112E1  +
movzx esi cx +
jmp loc_1011185  +
cmp edi 2Ah +
jnz loc_10112E1  +
test byte ptr [ebp+arg_0] 1 +
jz loc_10112E1  +
cmp [ebp+var_2] 0 +
jnz loc_10112E1  +
mov [ebp+var_1] 1 +
jmp loc_1011188  +
cmp [ebp+var_2] 0 +
jnz loc_101124A  +
cmp [ebp+var_1] 0 +
jz loc_10112E1  +
cmp [ebp+var_C] 4 +
jnb loc_10112E1  +
cmp [ebp+var_1] 0 +
jz loc_1011267  +
mov eax [ebp+var_C] +
mov eax ds:dword_1003A0C[eax*4] +
or [ebp+var_8] eax +
mov eax [ebp+var_C] +
sub eax 0 +
jz loc_1011296  +
dec eax  +
jz loc_101128C  +
dec eax  +
jz loc_1011282  +
dec eax  +
jnz loc_101129E  +
or [ebp+var_8] 8 +
mov word ptr [ebp+var_1C] si +
jmp loc_101129E  +
or [ebp+var_8] 4 +
mov word ptr [ebp+var_1C+2] si +
jmp loc_101129E  +
or [ebp+var_8] 2 +
mov word ptr [ebp+var_18] si +
jmp loc_101129E  +
or [ebp+var_8] 1 +
mov word ptr [ebp+var_18+2] si +
test bl bl +
jnz loc_10112E1  +
inc [ebp+var_C]  +
xor esi esi +
jmp loc_101117D  +
test edx edx +
jge loc_101116D  +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] edx +
mov [ebp+var_24] offset aDW7rtmBaseWc_5 +
mov [ebp+var_20] offset aWindowsWcpImpl +
mov [ebp+var_1C] 1D8h +
mov [ebp+var_18] offset a__rv_ucscharac +
call sub_1008207  +
jmp loc_101131F  +
mov eax [ebp+arg_8] +
cmp [ebp+arg_4] eax +
jnz loc_101131B  +
cmp [ebp+var_2] 0 +
jnz loc_10112F5  +
cmp [ebp+var_1] 0 +
jz loc_101131B  +
cmp [ebp+var_C] 3 +
ja loc_101131B  +
mov eax [ebp+arg_18] +
mov ecx [ebp+var_1C] +
mov byte ptr [eax] 1 +
mov eax [ebp+arg_10] +
mov [eax] ecx +
mov ecx [ebp+var_18] +
mov [eax+4] ecx +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_101131B  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
and [ebp+arg_4] 0 +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
mov eax ecx +
ja loc_101134C  +
mov ecx [ebp+arg_0] +
jb loc_1011345  +
cmp ecx 0FFFFFFFFh +
ja loc_101134C  +
and dword ptr [eax] 0 +
mov [edx] ecx +
jmp loc_1011352  +
mov dword ptr [eax] 0C0000095h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
mov [ebp+var_4] esi +
cmp ecx esi +
jz loc_1011403  +
mov eax [ebp+arg_8] +
cmp eax esi +
jz loc_1011403  +
mov edx [ebp+arg_C] +
cmp edx esi +
jz loc_1011403  +
mov [edx] esi +
mov esi [ebp+arg_0] +
mov esi [esi+18h] +
push ebx  +
mov ebx [ecx] +
push edi  +
mov edi [ecx+4] +
mov ecx [eax] +
mov [ebp+arg_8] esi +
mov esi [eax+4] +
add edi ebx +
mov [ebp+arg_4] ecx +
add esi ecx +
cmp ebx edi +
jnb loc_10113E8  +
cmp [ebp+arg_4] esi +
jnb loc_10113F2  +
mov edx edi +
mov ecx ebx +
call [ebp+arg_8]  +
cmp eax 0FFFFFFFFh +
jz loc_10113D6  +
mov ecx [ebp+arg_4] +
mov ebx edx +
mov edx esi +
mov [ebp+arg_0] eax +
call [ebp+arg_8]  +
cmp eax 0FFFFFFFFh +
jz loc_10113D6  +
mov [ebp+arg_4] edx +
cmp eax [ebp+arg_0] +
jnz loc_10113DB  +
mov edx [ebp+arg_C] +
jmp loc_10113A2  +
mov [ebp+var_4] edx +
jmp loc_10113FC  +
mov ecx [ebp+arg_C] +
sbb eax eax +
and eax 2 +
dec eax  +
mov [ecx] eax +
jmp loc_10113FC  +
cmp [ebp+arg_4] esi +
jnb loc_10113F2  +
or dword ptr [edx] 0FFFFFFFFh +
jmp loc_10113FC  +
cmp ebx edi +
jnb loc_10113FC  +
mov dword ptr [edx] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
jmp loc_1011411  +
push esi  +
push esi  +
push 31h  +
push 0C000000Dh  +
call sub_1016F35  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+8] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp ecx esi +
jz loc_10114EA  +
mov edx [ebp+0Ch] +
cmp edx esi +
jz loc_10114EA  +
mov eax [ebp+10h] +
cmp eax esi +
jz loc_10114EA  +
cmp [ebp+14h] esi +
jz loc_10114EA  +
mov ecx [ecx+18h] +
mov esi [edx+4] +
mov edi [eax+4] +
mov ebx [eax] +
mov [ebp+0Ch] ecx +
mov ecx [edx] +
add esi ecx +
add ebx edi +
cmp ecx esi +
jnb loc_10114DB  +
cmp edi ebx +
jnb loc_10114B3  +
movzx eax word ptr [edi] +
inc edi  +
mov edx esi +
mov [ebp+8] eax +
inc edi  +
call dword ptr [ebp+0Ch]  +
mov [ebp-8] eax +
mov [ebp-4] edx +
cmp eax 0FFFFFFFFh +
jz loc_10114BF  +
cmp dword ptr [ebp+18h] 0 +
jz loc_101149D  +
mov ecx [ebp+8] +
call dword ptr [ebp+18h]  +
mov ecx [ebp-8] +
mov [ebp+8] eax +
call dword ptr [ebp+18h]  +
mov [ebp-8] eax +
mov eax [ebp+8] +
mov ecx [ebp-4] +
cmp eax 0FFFFh +
ja loc_10114C3  +
cmp [ebp-8] eax +
jnz loc_10114D3  +
cmp ecx esi +
jb loc_1011469  +
cmp ecx esi +
jnb loc_10114DB  +
mov eax [ebp+14h] +
or dword ptr [eax] 0FFFFFFFFh +
jmp loc_10114E6  +
mov eax edx +
jmp loc_10114FB  +
push 0  +
push 0  +
push 0C2h  +
push 0C0000095h  +
jmp loc_10114F6  +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
jmp loc_10114E1  +
cmp edi ebx +
sbb eax eax +
neg eax  +
mov ecx [ebp+14h] +
mov [ecx] eax +
xor eax eax +
jmp loc_10114FB  +
push esi  +
push esi  +
push 9Eh  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi edx +
sub esi ecx +
cmp ecx edx +
jb loc_1011524  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
jmp loc_10117B1  +
mov al [ecx] +
lea edx [ecx+1] +
mov ecx 80h +
push ebx  +
mov [ebp-1] al +
test al cl +
jnz loc_1011546  +
movzx eax al +
test eax eax +
jz loc_10117A8  +
jmp loc_10117B0  +
mov bl al +
and bl 0E0h +
mov al 0C0h +
cmp bl al +
jnz loc_1011584  +
cmp esi 2 +
jb loc_10117A8  +
mov bl [edx] +
mov [ebp-5] bl +
and bl al +
inc edx  +
cmp bl cl +
jnz loc_10117A8  +
movzx eax byte ptr [ebp-1] +
movzx esi byte ptr [ebp-5] +
and eax 1Fh +
shl eax 6 +
and esi 3Fh +
or eax esi +
cmp eax ecx +
jmp loc_10117A6  +
mov bl [ebp-1] +
and bl 0F0h +
cmp bl 0E0h +
jnz loc_10115E8  +
cmp esi 3 +
jb loc_10117A8  +
mov bl [edx] +
mov [ebp-2] bl +
mov bl [edx+1] +
mov [ebp-3] bl +
mov bl [ebp-2] +
inc edx  +
and bl al +
inc edx  +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-3] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
movzx eax byte ptr [ebp-1] +
movzx ecx byte ptr [ebp-2] +
and eax 0Fh +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-3] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
cmp eax 800h +
jmp loc_10117A6  +
mov bl [ebp-1] +
and bl 0F8h +
cmp bl 0F0h +
jnz loc_101166C  +
cmp esi 4 +
jb loc_10117A8  +
mov bl [edx] +
mov [ebp-3] bl +
mov bl [edx+1] +
mov [ebp-2] bl +
mov bl [edx+2] +
mov [ebp-4] bl +
mov bl [ebp-3] +
and bl al +
add edx 3 +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-2] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-4] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
movzx eax byte ptr [ebp-1] +
movzx ecx byte ptr [ebp-3] +
and eax 7 +
and ecx 3Fh +
shl eax 6 +
or eax ecx +
movzx ecx byte ptr [ebp-2] +
and ecx 3Fh +
shl eax 6 +
or eax ecx +
movzx ecx byte ptr [ebp-4] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
cmp eax 10000h +
jmp loc_10117A6  +
mov bl [ebp-1] +
and bl 0FCh +
cmp bl 0F8h +
jnz loc_1011705  +
cmp esi 5 +
jb loc_10117A8  +
mov bl [edx] +
mov [ebp-4] bl +
mov bl [edx+1] +
mov [ebp-3] bl +
mov bl [edx+2] +
mov [ebp-2] bl +
mov bl [edx+3] +
mov [ebp-5] bl +
mov bl [ebp-4] +
and bl al +
add edx 4 +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-3] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-2] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-5] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
movzx eax byte ptr [ebp-1] +
movzx ecx byte ptr [ebp-4] +
and eax 3 +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-3] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-2] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
shl eax 6 +
jmp loc_1011662  +
***
mov bl [ebp-1] +
and bl 0FEh +
cmp bl 0FCh +
jnz loc_10117A8  +
cmp esi 6 +
jb loc_10117A8  +
mov bl [edx] +
mov [ebp-4] bl +
mov bl [edx+1] +
mov [ebp-3] bl +
mov bl [edx+2] +
mov [ebp-2] bl +
mov bl [edx+3] +
mov [ebp-6] bl +
mov bl [edx+4] +
mov [ebp-5] bl +
mov bl [ebp-4] +
and bl al +
add edx 5 +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-3] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-2] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-6] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
mov bl [ebp-5] +
and bl al +
cmp bl cl +
jnz loc_10117A8  +
movzx eax byte ptr [ebp-1] +
movzx ecx byte ptr [ebp-4] +
and eax 1 +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-3] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-2] +
shl eax 6 +
and ecx 3Fh +
or eax ecx +
movzx ecx byte ptr [ebp-5] +
shl eax 0Ch +
and ecx 3Fh +
or eax ecx +
cmp eax 4000000h +
jnb loc_10117B0  +
mov edx 0C0000161h +
or eax 0FFFFFFFFh +
pop ebx  +
pop esi  +
leave   +
retn   +
***
sub edx ecx +
cmp edx 4 +
jnb loc_10117C9  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
retn   +
***
mov eax [ecx] +
lea edx [ecx+4] +
retn   +
***
sub edx ecx +
cmp edx 4 +
jnb loc_10117E4  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
retn   +
***
movzx eax byte ptr [ecx] +
movzx edx byte ptr [ecx+1] +
shl eax 8 +
or eax edx +
movzx edx byte ptr [ecx+2] +
shl eax 8 +
or eax edx +
movzx edx byte ptr [ecx+3] +
shl eax 8 +
or eax edx +
lea edx [ecx+4] +
retn   +
***
sub edx ecx +
cmp edx 2 +
jnb loc_101181B  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
retn   +
***
movzx ax byte ptr [ecx] +
push esi  +
movzx si byte ptr [ecx+1] +
shl ax 8 +
or ax si +
movzx esi ax +
mov eax 0D800h +
cmp si ax +
mov eax 0DC00h +
jb loc_101186D  +
cmp si ax +
jnb loc_1011872  +
cmp edx 4 +
jb loc_101187C  +
movzx ax byte ptr [ecx+2] +
movzx edx byte ptr [ecx+3] +
shl ax 8 +
movzx eax ax +
or eax edx +
movzx edx si +
sub edx 0D7F7h +
shl edx 0Ah +
add eax edx +
lea edx [ecx+4] +
pop esi  +
retn   +
***
cmp si ax +
jb loc_1011886  +
mov eax 0DFFFh +
cmp si ax +
ja loc_1011886  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
pop esi  +
retn   +
***
movzx eax si +
lea edx [ecx+2] +
pop esi  +
retn   +
***
sub edx ecx +
cmp edx 2 +
jnb loc_10118A3  +
or eax 0FFFFFFFFh +
mov edx 0C0000011h +
retn   +
***
movzx eax word ptr [ecx] +
push esi  +
mov esi 0D800h +
cmp ax si +
jb loc_10118D6  +
mov esi 0DC00h +
cmp ax si +
jnb loc_10118E0  +
cmp edx 4 +
jb loc_10118EA  +
movzx edx word ptr [ecx+2] +
movzx eax ax +
sub eax 0D7F7h +
shl eax 0Ah +
add eax edx +
lea edx [ecx+4] +
pop esi  +
retn   +
***
mov edx 0DC00h +
cmp ax dx +
jb loc_10118F4  +
mov edx 0DFFFh +
cmp ax dx +
ja loc_10118F4  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
pop esi  +
retn   +
***
movzx eax ax +
lea edx [ecx+2] +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov ecx [edi+14h] +
mov esi edx +
mov edx [edi+10h] +
cmp ecx edx +
jb loc_1011932  +
and dword ptr [esi+8] 0 +
mov eax [edi+10h] +
mov [esi+4] eax +
mov eax [edi+1Ch] +
and dword ptr [esi+10h] 0 +
mov [esi+0Ch] eax +
mov dword ptr [esi] 3 +
jmp loc_1011A5A  +
call dword ptr [edi+18h]  +
cmp eax 0FFFFFFFFh +
jnz loc_1011941  +
mov eax edx +
jmp loc_1011A5C  +
mov ecx [edi+14h] +
mov [esi+4] ecx +
sub edx [edi+14h] +
mov [esi+8] edx +
mov ecx [edi+1Ch] +
mov [esi+0Ch] ecx +
xor ecx ecx +
inc ecx  +
mov [esi+10h] ecx +
cmp eax 2Eh +
ja loc_10119E4  +
jz loc_10119E0  +
cmp eax 25h +
ja loc_10119B9  +
jz loc_10119B2  +
cmp eax 9 +
jb loc_1011A33  +
cmp eax 0Ah +
jbe loc_10119AB  +
cmp eax 0Dh +
jz loc_10119AB  +
cmp eax 20h +
jz loc_10119AB  +
cmp eax 21h +
jz loc_10119A4  +
cmp eax 22h +
jz loc_101199D  +
cmp eax 23h +
jnz loc_1011A33  +
push 19h  +
jmp loc_1011A49  +
push 0Ah  +
jmp loc_1011A49  +
push 10h  +
jmp loc_1011A49  +
push 0Dh  +
jmp loc_1011A49  +
push 1Ah  +
jmp loc_1011A49  +
sub eax 26h +
jz loc_10119DC  +
dec eax  +
jz loc_10119D8  +
dec eax  +
jz loc_10119D4  +
dec eax  +
jz loc_10119D0  +
sub eax 4 +
jnz loc_1011A33  +
mov eax ecx +
jmp loc_1011A4A  +
push 14h  +
jmp loc_1011A49  +
push 13h  +
jmp loc_1011A49  +
push 9  +
jmp loc_1011A49  +
push 18h  +
jmp loc_1011A49  +
push 2  +
jmp loc_1011A49  +
cmp eax 3Fh +
ja loc_1011A1D  +
jz loc_1011A19  +
sub eax 2Fh +
jz loc_1011A15  +
sub eax 0Bh +
jz loc_1011A11  +
dec eax  +
jz loc_1011A0D  +
dec eax  +
jz loc_1011A09  +
dec eax  +
jz loc_1011A05  +
dec eax  +
jnz loc_1011A33  +
push 6  +
jmp loc_1011A49  +
push 4  +
jmp loc_1011A49  +
push 7  +
jmp loc_1011A49  +
push 16h  +
jmp loc_1011A49  +
push 15h  +
jmp loc_1011A49  +
push 5  +
jmp loc_1011A49  +
push 8  +
jmp loc_1011A49  +
sub eax 5Bh +
jz loc_1011A47  +
dec eax  +
dec eax  +
jz loc_1011A43  +
dec eax  +
dec eax  +
jz loc_1011A3F  +
sub eax 1Ch +
jz loc_1011A3B  +
dec eax  +
dec eax  +
jz loc_1011A37  +
push 0Ch  +
jmp loc_1011A49  +
push 12h  +
jmp loc_1011A49  +
push 11h  +
jmp loc_1011A49  +
push 17h  +
jmp loc_1011A49  +
push 0Fh  +
jmp loc_1011A49  +
push 0Eh  +
pop eax  +
mov [esi] eax +
mov eax [edi+14h] +
mov [edi+38h] eax +
push 5  +
add edi 24h +
pop ecx  +
movs   +
xor eax eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+14h] +
mov ebx [esi+10h] +
xor eax eax +
push edi  +
mov edi edx +
mov [ebp+var_8] eax +
mov [ebp+var_4] ecx +
cmp ecx ebx +
jb loc_1011AB1  +
mov [edi+8] eax +
mov ecx [esi+10h] +
mov [edi+4] ecx +
mov ecx [esi+1Ch] +
mov [edi+0Ch] ecx +
mov [edi+10h] eax +
mov dword ptr [edi] 3 +
mov edi [ebp+arg_0] +
cmp edi eax +
jz loc_1011C4D  +
stos   +
stos   +
stos   +
stos   +
stos   +
jmp loc_1011C4D  +
mov ecx [ebp+var_4] +
mov edx ebx +
call dword ptr [esi+18h]  +
cmp eax 9 +
jb loc_1011B17  +
cmp eax 0Ah +
jbe loc_1011ACD  +
cmp eax 0Dh +
jz loc_1011ACD  +
cmp eax 20h +
jnz loc_1011B0B  +
inc [ebp+var_8]  +
mov ecx edx +
mov [ebp+var_4] ecx +
cmp edx ebx +
jb loc_1011AB1  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1011C2F  +
cmp edx ebx +
jnz loc_1011C2F  +
and dword ptr [eax+8] 0 +
mov edx [esi+10h] +
mov [eax+4] edx +
mov edx [esi+1Ch] +
and dword ptr [eax+10h] 0 +
mov [eax+0Ch] edx +
mov dword ptr [eax] 3 +
jmp loc_1011C2F  +
cmp eax 0FFFFFFFFh +
jnz loc_1011B17  +
mov eax edx +
jmp loc_1011C4F  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+var_4] +
test ebx ebx +
jz loc_1011C2F  +
sub edx ecx +
mov [ebx+4] ecx +
mov [ebx+8] edx +
mov ecx [esi+1Ch] +
mov [ebx+0Ch] ecx +
xor ecx ecx +
inc ecx  +
mov [ebx+10h] ecx +
cmp eax 2Eh +
ja loc_1011BC4  +
jz loc_1011BC0  +
cmp eax 25h +
ja loc_1011B99  +
jz loc_1011B92  +
cmp eax 9 +
jb loc_1011C13  +
cmp eax 0Ah +
jbe loc_1011B8B  +
cmp eax 0Dh +
jz loc_1011B8B  +
cmp eax 20h +
jz loc_1011B8B  +
cmp eax 21h +
jz loc_1011B84  +
cmp eax 22h +
jz loc_1011B7D  +
cmp eax 23h +
jnz loc_1011C13  +
push 19h  +
jmp loc_1011C29  +
push 0Ah  +
jmp loc_1011C29  +
push 10h  +
jmp loc_1011C29  +
push 0Dh  +
jmp loc_1011C29  +
push 1Ah  +
jmp loc_1011C29  +
sub eax 26h +
jz loc_1011BBC  +
dec eax  +
jz loc_1011BB8  +
dec eax  +
jz loc_1011BB4  +
dec eax  +
jz loc_1011BB0  +
sub eax 4 +
jnz loc_1011C13  +
mov eax ecx +
jmp loc_1011C2A  +
push 14h  +
jmp loc_1011C29  +
push 13h  +
jmp loc_1011C29  +
push 9  +
jmp loc_1011C29  +
push 18h  +
jmp loc_1011C29  +
push 2  +
jmp loc_1011C29  +
cmp eax 3Fh +
ja loc_1011BFD  +
jz loc_1011BF9  +
sub eax 2Fh +
jz loc_1011BF5  +
sub eax 0Bh +
jz loc_1011BF1  +
dec eax  +
jz loc_1011BED  +
dec eax  +
jz loc_1011BE9  +
dec eax  +
jz loc_1011BE5  +
dec eax  +
jnz loc_1011C13  +
push 6  +
jmp loc_1011C29  +
push 4  +
jmp loc_1011C29  +
push 7  +
jmp loc_1011C29  +
push 16h  +
jmp loc_1011C29  +
push 15h  +
jmp loc_1011C29  +
push 5  +
jmp loc_1011C29  +
push 8  +
jmp loc_1011C29  +
sub eax 5Bh +
jz loc_1011C27  +
dec eax  +
dec eax  +
jz loc_1011C23  +
dec eax  +
dec eax  +
jz loc_1011C1F  +
sub eax 1Ch +
jz loc_1011C1B  +
dec eax  +
dec eax  +
jz loc_1011C17  +
push 0Ch  +
jmp loc_1011C29  +
push 12h  +
jmp loc_1011C29  +
push 11h  +
jmp loc_1011C29  +
push 17h  +
jmp loc_1011C29  +
push 0Fh  +
jmp loc_1011C29  +
push 0Eh  +
pop eax  +
mov ecx [ebp+var_4] +
mov [ebx] eax +
mov eax [esi+14h] +
mov [edi+4] eax +
sub ecx [esi+14h] +
mov eax [ebp+var_8] +
mov [edi+8] ecx +
mov [edi+10h] eax +
mov eax [esi+1Ch] +
mov [edi+0Ch] eax +
mov dword ptr [edi] 0Dh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov ebx edx +
mov edi ebx +
stos   +
stos   +
stos   +
stos   +
mov esi ecx +
stos   +
mov eax [esi+14h] +
mov [ebx+4] eax +
mov eax [esi+1Ch] +
mov [ebx+0Ch] eax +
mov eax [esi+10h] +
mov edi [esi+14h] +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] eax +
cmp edi eax +
jb loc_1011CAA  +
mov [ebx+8] ecx +
mov eax [esi+10h] +
mov [ebx+4] eax +
mov eax [esi+1Ch] +
mov [ebx+0Ch] eax +
mov [ebx+10h] ecx +
mov dword ptr [ebx] 3 +
jmp loc_1011D1D  +
mov edx [ebp+var_4] +
mov ecx edi +
call dword ptr [esi+18h]  +
mov ecx [ebp+arg_0] +
cmp eax 3Ch +
jz loc_1011CCF  +
cmp eax 0FFFFFFFFh +
jz loc_1011CCB  +
inc [ebp+var_8]  +
mov edi edx +
cmp edx [ebp+var_4] +
jb loc_1011CAA  +
jmp loc_1011CEE  +
mov eax edx +
jmp loc_1011D1F  +
test ecx ecx +
jz loc_1011D11  +
sub edx edi +
mov [ecx+8] edx +
mov [ecx+4] edi +
mov eax [esi+1Ch] +
mov [ecx+0Ch] eax +
mov dword ptr [ecx+10h] 1 +
mov dword ptr [ecx] 7 +
test ecx ecx +
jz loc_1011D11  +
cmp edi [ebp+var_4] +
jb loc_1011D11  +
and dword ptr [ecx+8] 0 +
mov eax [esi+10h] +
mov [ecx+4] eax +
mov eax [esi+1Ch] +
and dword ptr [ecx+10h] 0 +
mov [ecx+0Ch] eax +
mov dword ptr [ecx] 3 +
sub edi [esi+14h] +
mov eax [ebp+var_8] +
mov [ebx+8] edi +
mov [ebx+10h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+10h] +
mov ebx [edi+14h] +
mov esi edx +
mov [ebp+var_4] eax +
jz loc_1011EBB  +
cmp ebx eax +
jnb loc_1011E90  +
mov edx [ebp+var_4] +
mov ecx ebx +
call dword ptr [edi+18h]  +
cmp eax 0FFFFFFFFh +
jz loc_1011E94  +
cmp eax 2Eh +
ja loc_1011DEF  +
jz loc_1011DEB  +
cmp eax 25h +
ja loc_1011DC3  +
jz loc_1011DBC  +
cmp eax 9 +
jb loc_1011E3E  +
push 0Ah  +
pop ecx  +
cmp eax ecx +
jbe loc_1011DB5  +
cmp eax 0Dh +
jz loc_1011DB5  +
cmp eax 20h +
jz loc_1011DB5  +
cmp eax 21h +
jz loc_1011DAE  +
cmp eax 22h +
jz loc_1011E55  +
cmp eax 23h +
jnz loc_1011E3E  +
push 19h  +
jmp loc_1011E54  +
push 10h  +
jmp loc_1011E54  +
push 0Dh  +
jmp loc_1011E54  +
push 1Ah  +
jmp loc_1011E54  +
sub eax 26h +
jz loc_1011DE7  +
dec eax  +
jz loc_1011DE3  +
dec eax  +
jz loc_1011DDF  +
dec eax  +
jz loc_1011DDB  +
sub eax 4 +
jnz loc_1011E3E  +
xor ecx ecx +
inc ecx  +
jmp loc_1011E55  +
push 14h  +
jmp loc_1011E54  +
push 13h  +
jmp loc_1011E54  +
push 9  +
jmp loc_1011E54  +
push 18h  +
jmp loc_1011E54  +
push 2  +
jmp loc_1011E54  +
cmp eax 3Fh +
ja loc_1011E28  +
jz loc_1011E24  +
sub eax 2Fh +
jz loc_1011E20  +
sub eax 0Bh +
jz loc_1011E1C  +
dec eax  +
jz loc_1011E18  +
dec eax  +
jz loc_1011E14  +
dec eax  +
jz loc_1011E10  +
dec eax  +
jnz loc_1011E3E  +
push 6  +
jmp loc_1011E54  +
push 4  +
jmp loc_1011E54  +
push 7  +
jmp loc_1011E54  +
push 16h  +
jmp loc_1011E54  +
push 15h  +
jmp loc_1011E54  +
push 5  +
jmp loc_1011E54  +
push 8  +
jmp loc_1011E54  +
sub eax 5Bh +
jz loc_1011E52  +
dec eax  +
dec eax  +
jz loc_1011E4E  +
dec eax  +
dec eax  +
jz loc_1011E4A  +
sub eax 1Ch +
jz loc_1011E46  +
dec eax  +
dec eax  +
jz loc_1011E42  +
push 0Ch  +
jmp loc_1011E54  +
push 12h  +
jmp loc_1011E54  +
push 11h  +
jmp loc_1011E54  +
push 17h  +
jmp loc_1011E54  +
push 0Fh  +
jmp loc_1011E54  +
push 0Eh  +
pop ecx  +
mov eax edx +
sub eax ebx +
mov [esi+8] eax +
mov [esi+4] ebx +
mov [esi] ecx +
mov dword ptr [esi+10h] 1 +
mov eax [edi+1Ch] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_0] +
add esi 14h +
dec [ebp+arg_0]  +
mov ebx edx +
test eax eax +
jz loc_1011E86  +
cmp edx [ebp+var_4] +
jb loc_1011D53  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jnz loc_1011E90  +
and [ebp+arg_0] 0 +
xor eax eax +
jmp loc_1011EB6  +
mov eax edx +
jmp loc_1011EBD  +
dec [ebp+arg_0]  +
mov [esi+8] eax +
mov ecx [edi+10h] +
mov [esi+4] ecx +
mov ecx [edi+1Ch] +
mov [esi+0Ch] ecx +
mov [esi+10h] eax +
mov dword ptr [esi] 3 +
add esi 14h +
cmp [ebp+arg_0] eax +
jnz loc_1011E98  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov ebx edx +
push edi  +
mov edi ecx +
mov edx [edi+10h] +
mov esi [edi+14h] +
xor eax eax +
mov [ebx+8] eax +
mov [ebx+10h] eax +
mov ecx [edi+1Ch] +
mov [ebp+var_4] edx +
mov [ebx+0Ch] ecx +
cmp esi edx +
jb loc_1011F10  +
mov [ebx+8] eax +
mov ecx [edi+10h] +
mov [ebx+4] ecx +
mov ecx [edi+1Ch] +
mov [ebx+0Ch] ecx +
mov [ebx+10h] eax +
mov dword ptr [ebx] 3 +
jmp loc_101223A  +
mov ecx esi +
mov [ebx+4] esi +
mov [ebx] eax +
call dword ptr [edi+18h]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jnz loc_1011F28  +
mov eax ecx +
jmp loc_101223C  +
cmp eax 5Fh +
jz loc_1012062  +
cmp eax 61h +
jb loc_1011F3F  +
cmp eax 7Ah +
jbe loc_1012062  +
lea edx [eax-41h] +
cmp edx 19h +
jbe loc_1012062  +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_101223A  +
sub ecx esi +
mov [edx+8] ecx +
xor ecx ecx +
inc ecx  +
mov [edx+4] esi +
mov [edx+10h] ecx +
mov esi [edi+1Ch] +
mov [edx+0Ch] esi +
cmp eax 2Eh +
ja loc_1011FF5  +
jz loc_1011FF1  +
cmp eax 25h +
ja loc_1011FCA  +
jz loc_1011FC3  +
cmp eax 9 +
jb loc_1012044  +
cmp eax 0Ah +
jbe loc_1011FBC  +
cmp eax 0Dh +
jz loc_1011FBC  +
cmp eax 20h +
jz loc_1011FBC  +
cmp eax 21h +
jz loc_1011FB5  +
cmp eax 22h +
jz loc_1011FAE  +
cmp eax 23h +
jnz loc_1012044  +
push 19h  +
jmp loc_101205A  +
push 0Ah  +
jmp loc_101205A  +
push 10h  +
jmp loc_101205A  +
push 0Dh  +
jmp loc_101205A  +
push 1Ah  +
jmp loc_101205A  +
sub eax 26h +
jz loc_1011FED  +
dec eax  +
jz loc_1011FE9  +
dec eax  +
jz loc_1011FE5  +
dec eax  +
jz loc_1011FE1  +
sub eax 4 +
jnz loc_1012044  +
mov eax ecx +
jmp loc_101205B  +
push 14h  +
jmp loc_101205A  +
push 13h  +
jmp loc_101205A  +
push 9  +
jmp loc_101205A  +
push 18h  +
jmp loc_101205A  +
push 2  +
jmp loc_101205A  +
cmp eax 3Fh +
ja loc_101202E  +
jz loc_101202A  +
sub eax 2Fh +
jz loc_1012026  +
sub eax 0Bh +
jz loc_1012022  +
dec eax  +
jz loc_101201E  +
dec eax  +
jz loc_101201A  +
dec eax  +
jz loc_1012016  +
dec eax  +
jnz loc_1012044  +
push 6  +
jmp loc_101205A  +
push 4  +
jmp loc_101205A  +
push 7  +
jmp loc_101205A  +
push 16h  +
jmp loc_101205A  +
push 15h  +
jmp loc_101205A  +
push 5  +
jmp loc_101205A  +
push 8  +
jmp loc_101205A  +
sub eax 5Bh +
jz loc_1012058  +
dec eax  +
dec eax  +
jz loc_1012054  +
dec eax  +
dec eax  +
jz loc_1012050  +
sub eax 1Ch +
jz loc_101204C  +
dec eax  +
dec eax  +
jz loc_1012048  +
push 0Ch  +
jmp loc_101205A  +
push 12h  +
jmp loc_101205A  +
push 11h  +
jmp loc_101205A  +
push 17h  +
jmp loc_101205A  +
push 0Fh  +
jmp loc_101205A  +
push 0Eh  +
pop eax  +
mov [edx] eax +
jmp loc_101223A  +
mov esi [ebp+arg_0] +
mov [ebp+var_C] 1 +
mov [ebp+var_8] ecx +
test esi esi +
jz loc_1012097  +
cmp ecx [ebp+var_4] +
jb loc_1012097  +
and dword ptr [esi+8] 0 +
mov eax [edi+10h] +
mov [esi+4] eax +
mov eax [edi+1Ch] +
and dword ptr [esi+10h] 0 +
mov [esi+0Ch] eax +
mov dword ptr [esi] 3 +
jmp loc_10121F3  +
mov edx [ebp+var_4] +
call dword ptr [edi+18h]  +
mov ecx edx +
cmp eax 2Dh +
jb loc_10120B7  +
cmp eax 2Eh +
jbe loc_10120D1  +
cmp eax 5Fh +
jz loc_10120D1  +
cmp eax 0FFFFFFFFh +
jz loc_1011F21  +
cmp eax 61h +
jb loc_10120C1  +
cmp eax 7Ah +
jbe loc_10120D1  +
lea edx [eax-41h] +
cmp edx 19h +
jbe loc_10120D1  +
lea edx [eax-30h] +
cmp edx 9 +
ja loc_10120E1  +
inc [ebp+var_C]  +
mov [ebp+var_8] ecx +
cmp ecx [ebp+var_4] +
jb loc_1012097  +
jmp loc_10121F3  +
test esi esi +
jz loc_1012219  +
mov edx [ebp+var_8] +
sub ecx edx +
mov [esi+8] ecx +
xor ecx ecx +
inc ecx  +
mov [esi+4] edx +
mov [esi+10h] ecx +
mov edx [edi+1Ch] +
mov [esi+0Ch] edx +
cmp eax 2Eh +
ja loc_101218B  +
jz loc_1012187  +
cmp eax 25h +
ja loc_1012160  +
jz loc_1012159  +
cmp eax 9 +
jb loc_10121DA  +
cmp eax 0Ah +
jbe loc_1012152  +
cmp eax 0Dh +
jz loc_1012152  +
cmp eax 20h +
jz loc_1012152  +
cmp eax 21h +
jz loc_101214B  +
cmp eax 22h +
jz loc_1012144  +
cmp eax 23h +
jnz loc_10121DA  +
push 19h  +
jmp loc_10121F0  +
push 0Ah  +
jmp loc_10121F0  +
push 10h  +
jmp loc_10121F0  +
push 0Dh  +
jmp loc_10121F0  +
push 1Ah  +
jmp loc_10121F0  +
sub eax 26h +
jz loc_1012183  +
dec eax  +
jz loc_101217F  +
dec eax  +
jz loc_101217B  +
dec eax  +
jz loc_1012177  +
sub eax 4 +
jnz loc_10121DA  +
mov eax ecx +
jmp loc_10121F1  +
push 14h  +
jmp loc_10121F0  +
push 13h  +
jmp loc_10121F0  +
push 9  +
jmp loc_10121F0  +
push 18h  +
jmp loc_10121F0  +
push 2  +
jmp loc_10121F0  +
cmp eax 3Fh +
ja loc_10121C4  +
jz loc_10121C0  +
sub eax 2Fh +
jz loc_10121BC  +
sub eax 0Bh +
jz loc_10121B8  +
dec eax  +
jz loc_10121B4  +
dec eax  +
jz loc_10121B0  +
dec eax  +
jz loc_10121AC  +
dec eax  +
jnz loc_10121DA  +
push 6  +
jmp loc_10121F0  +
push 4  +
jmp loc_10121F0  +
push 7  +
jmp loc_10121F0  +
push 16h  +
jmp loc_10121F0  +
push 15h  +
jmp loc_10121F0  +
push 5  +
jmp loc_10121F0  +
push 8  +
jmp loc_10121F0  +
sub eax 5Bh +
jz loc_10121EE  +
dec eax  +
dec eax  +
jz loc_10121EA  +
dec eax  +
dec eax  +
jz loc_10121E6  +
sub eax 1Ch +
jz loc_10121E2  +
dec eax  +
dec eax  +
jz loc_10121DE  +
push 0Ch  +
jmp loc_10121F0  +
push 12h  +
jmp loc_10121F0  +
push 11h  +
jmp loc_10121F0  +
push 17h  +
jmp loc_10121F0  +
push 0Fh  +
jmp loc_10121F0  +
push 0Eh  +
pop eax  +
mov [esi] eax +
test esi esi +
jz loc_1012219  +
mov eax [ebp+var_4] +
cmp [ebp+var_8] eax +
jb loc_1012219  +
and dword ptr [esi+8] 0 +
mov eax [edi+10h] +
mov [esi+4] eax +
mov eax [edi+1Ch] +
and dword ptr [esi+10h] 0 +
mov [esi+0Ch] eax +
mov dword ptr [esi] 3 +
mov eax [ebp+var_8] +
sub eax [edi+14h] +
mov [ebx+8] eax +
mov eax [edi+14h] +
mov [ebx+4] eax +
mov eax [ebp+var_C] +
mov [ebx+10h] eax +
mov eax [edi+1Ch] +
mov [ebx+0Ch] eax +
mov dword ptr [ebx] 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx ecx +
mov eax [ebx+10h] +
mov ecx [ebx+14h] +
push esi  +
mov esi edx +
xor edx edx +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_8] eax +
mov [esi+8] edx +
mov [esi+4] ecx +
mov eax [ebx+1Ch] +
mov [ebp+var_4] ecx +
mov [ebp+var_C] edx +
mov [esi+0Ch] eax +
mov [esi+10h] edx +
cmp edi edx +
jz loc_1012285  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
stos   +
cmp ecx [ebp+var_8] +
jb loc_10122A7  +
mov [esi+8] edx +
mov eax [ebx+10h] +
mov [esi+4] eax +
mov eax [ebx+1Ch] +
mov [esi+0Ch] eax +
mov [esi+10h] edx +
mov dword ptr [esi] 3 +
jmp loc_1012422  +
push 2  +
pop edi  +
mov edx [ebp+var_8] +
call dword ptr [ebx+18h]  +
cmp eax 2Eh +
ja loc_1012339  +
jz loc_1012335  +
cmp eax 25h +
ja loc_101230A  +
jz loc_1012306  +
cmp eax 9 +
jb loc_101238C  +
push 0Ah  +
pop ecx  +
cmp eax ecx +
jbe loc_10122FF  +
cmp eax 0Dh +
jz loc_10122FF  +
cmp eax 20h +
jz loc_10122FF  +
cmp eax 21h +
jz loc_10122FB  +
cmp eax 22h +
jz loc_10123B4  +
cmp eax 23h +
jnz loc_101238C  +
push 19h  +
pop ecx  +
jmp loc_10123B4  +
push 10h  +
jmp loc_10122F5  +
push 0Dh  +
jmp loc_10123AE  +
push 1Ah  +
jmp loc_10122F5  +
mov ecx eax +
sub ecx 26h +
jz loc_1012331  +
dec ecx  +
jz loc_101232D  +
dec ecx  +
jz loc_1012329  +
dec ecx  +
jz loc_1012325  +
sub ecx 4 +
jnz loc_101238C  +
inc ecx  +
jmp loc_10123B4  +
push 14h  +
jmp loc_10122F5  +
push 13h  +
jmp loc_10122F5  +
push 9  +
jmp loc_10122F5  +
push 18h  +
jmp loc_10122F5  +
mov ecx edi +
jmp loc_10123B4  +
cmp eax 3Fh +
ja loc_1012374  +
jz loc_1012370  +
mov ecx eax +
sub ecx 2Fh +
jz loc_101236C  +
sub ecx 0Bh +
jz loc_1012368  +
dec ecx  +
jz loc_1012364  +
dec ecx  +
jz loc_1012360  +
dec ecx  +
jz loc_101235C  +
dec ecx  +
jnz loc_101238C  +
push 6  +
jmp loc_10122F5  +
push 4  +
jmp loc_10122F5  +
push 7  +
jmp loc_10122F5  +
push 16h  +
jmp loc_10122F5  +
push 15h  +
jmp loc_10122F5  +
push 5  +
jmp loc_10122F5  +
push 8  +
jmp loc_10122F5  +
mov ecx eax +
sub ecx 5Bh +
jz loc_10123AC  +
sub ecx edi +
jz loc_10123A5  +
sub ecx edi +
jz loc_101239E  +
sub ecx 1Ch +
jz loc_1012397  +
sub ecx edi +
jz loc_1012390  +
push 0Ch  +
jmp loc_10123AE  +
push 12h  +
jmp loc_10122F5  +
push 11h  +
jmp loc_10122F5  +
push 17h  +
jmp loc_10122F5  +
push 0Fh  +
jmp loc_10122F5  +
push 0Eh  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_10123D2  +
cmp ecx [ebp+arg_0] +
jz loc_10123D6  +
cmp ecx [ebp+arg_4] +
jz loc_10123D6  +
inc [ebp+var_C]  +
mov eax edx +
mov [ebp+var_4] eax +
cmp edx [ebp+var_8] +
jnb loc_101240E  +
mov ecx edx +
jmp loc_10122AA  +
mov eax edx +
jmp loc_1012424  +
mov edi [ebp+arg_8] +
mov eax [ebp+var_4] +
test edi edi +
jz loc_10123EA  +
sub edx eax +
mov [edi+8] edx +
mov [edi+4] eax +
mov [edi] ecx +
cmp eax [ebp+var_8] +
jb loc_1012413  +
mov eax [ebp+var_4] +
xor ecx ecx +
cmp edi ecx +
jz loc_1012416  +
mov edx [ebp+var_8] +
mov [edi+8] ecx +
mov [edi+4] edx +
mov [edi+10h] ecx +
mov edx [ebx+1Ch] +
mov [edi+0Ch] edx +
mov [edi] ecx +
jmp loc_1012416  +
mov edi [ebp+arg_8] +
jmp loc_10123F2  +
mov eax [ebp+var_4] +
sub eax [ebx+14h] +
mov [esi+8] eax +
mov eax [ebp+var_C] +
mov [esi+10h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ebx [esi+14h] +
xor eax eax +
push edi  +
mov edi edx +
mov edx [esi+10h] +
mov [edi+8] eax +
mov ecx [esi+14h] +
mov [edi+4] ecx +
mov ecx [esi+1Ch] +
mov [edi+0Ch] ecx +
mov [edi+10h] eax +
mov [ebp+var_4] eax +
mov eax [esi+10h] +
mov [ebp+var_8] edx +
cmp [esi+14h] eax +
jb loc_1012474  +
mov [edi+4] eax +
mov dword ptr [edi] 3 +
jmp loc_10124FB  +
mov ecx ebx +
jmp loc_1012510  +
cmp eax 61h +
jb loc_1012485  +
cmp eax 7Ah +
jbe loc_1012502  +
lea edx [eax-41h] +
cmp edx 19h +
jbe loc_1012502  +
lea edx [eax-30h] +
cmp edx 9 +
jbe loc_1012502  +
cmp eax 2Fh +
ja loc_10124CB  +
cmp eax 28h +
jnb loc_1012508  +
cmp eax 0Ah +
jz loc_1012508  +
cmp eax 0Dh +
jz loc_1012508  +
cmp eax 1Fh +
jbe loc_10124E9  +
cmp eax 21h +
jbe loc_1012508  +
cmp eax 22h +
jbe loc_10124E9  +
cmp eax 25h +
jbe loc_1012508  +
cmp eax 27h +
jnz loc_10124E9  +
cmp dword ptr [esi+24h] 0Ah +
setz al  +
jmp loc_1012504  +
cmp eax 3Ah +
jb loc_10124E9  +
cmp eax 3Bh +
jbe loc_1012508  +
cmp eax 3Dh +
jz loc_1012508  +
cmp eax 3Eh +
jbe loc_10124E9  +
cmp eax 40h +
jbe loc_1012508  +
cmp eax 5Fh +
jz loc_1012508  +
mov eax [ebp+var_4] +
mov dword ptr [edi] 0Ch +
sub ebx [esi+14h] +
mov [edi+10h] eax +
mov [edi+8] ebx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov al 1 +
test al al +
jz loc_10124E9  +
inc [ebp+var_4]  +
mov edx [ebp+var_8] +
mov ebx ecx +
call dword ptr [esi+18h]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jnz loc_101247B  +
mov eax ecx +
jmp loc_10124FD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx ecx +
mov eax [ebx+14h] +
push esi  +
mov esi [ebp+arg_4] +
xor ecx ecx +
mov [ebp+var_4] eax +
mov eax [ebx+10h] +
push edi  +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] eax +
cmp esi ecx +
jz loc_1012568  +
xor eax eax +
lea edi [esi+4] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+var_8] +
cmp [ebp+var_4] eax +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 3 +
mov [esi] eax +
mov [edx+8] ecx +
mov eax [ebx+14h] +
mov [edx+4] eax +
mov eax [ebx+1Ch] +
mov [edx+0Ch] eax +
mov [edx+10h] ecx +
mov eax [ebx+10h] +
cmp [ebx+14h] eax +
jb loc_1012590  +
mov [edx+4] eax +
mov dword ptr [edx] 3 +
jmp loc_10126FC  +
xor edi edi +
inc edi  +
mov edx [ebp+var_8] +
mov ecx [ebp+var_4] +
call dword ptr [ebx+18h]  +
cmp eax 0FFFFFFFFh +
jz loc_10126AD  +
cmp eax 2Eh +
ja loc_101262F  +
jz loc_101262B  +
cmp eax 25h +
ja loc_1012604  +
jz loc_10125FD  +
cmp eax 9 +
jb loc_101267E  +
push 0Ah  +
pop ecx  +
cmp eax ecx +
jbe loc_10125F6  +
cmp eax 0Dh +
jz loc_10125F6  +
cmp eax 20h +
jz loc_10125F6  +
cmp eax 21h +
jz loc_10125EF  +
cmp eax 22h +
jz loc_1012695  +
cmp eax 23h +
jnz loc_101267E  +
push 19h  +
jmp loc_1012694  +
push 10h  +
jmp loc_1012694  +
push 0Dh  +
jmp loc_1012694  +
push 1Ah  +
jmp loc_1012694  +
sub eax 26h +
jz loc_1012627  +
dec eax  +
jz loc_1012623  +
dec eax  +
jz loc_101261F  +
dec eax  +
jz loc_101261B  +
sub eax 4 +
jnz loc_101267E  +
mov ecx edi +
jmp loc_1012695  +
push 14h  +
jmp loc_1012694  +
push 13h  +
jmp loc_1012694  +
push 9  +
jmp loc_1012694  +
push 18h  +
jmp loc_1012694  +
push 2  +
jmp loc_1012694  +
cmp eax 3Fh +
ja loc_1012668  +
jz loc_1012664  +
sub eax 2Fh +
jz loc_1012660  +
sub eax 0Bh +
jz loc_101265C  +
dec eax  +
jz loc_1012658  +
dec eax  +
jz loc_1012654  +
dec eax  +
jz loc_1012650  +
dec eax  +
jnz loc_101267E  +
push 6  +
jmp loc_1012694  +
push 4  +
jmp loc_1012694  +
push 7  +
jmp loc_1012694  +
push 16h  +
jmp loc_1012694  +
push 15h  +
jmp loc_1012694  +
push 5  +
jmp loc_1012694  +
push 8  +
jmp loc_1012694  +
sub eax 5Bh +
jz loc_1012692  +
dec eax  +
dec eax  +
jz loc_101268E  +
dec eax  +
dec eax  +
jz loc_101268A  +
sub eax 1Ch +
jz loc_1012686  +
dec eax  +
dec eax  +
jz loc_1012682  +
push 0Ch  +
jmp loc_1012694  +
push 12h  +
jmp loc_1012694  +
push 11h  +
jmp loc_1012694  +
push 17h  +
jmp loc_1012694  +
push 0Fh  +
jmp loc_1012694  +
push 0Eh  +
pop ecx  +
cmp ecx [ebp+arg_0] +
jz loc_10126B1  +
inc [ebp+var_C]  +
mov eax edx +
mov [ebp+var_4] eax +
cmp edx [ebp+var_8] +
jb loc_1012593  +
jmp loc_10126D3  +
mov eax edx +
jmp loc_10126FE  +
mov eax [ebp+var_4] +
test esi esi +
jz loc_10126CB  +
sub edx eax +
mov [esi+8] edx +
mov [esi+4] eax +
mov [esi+10h] edi +
mov edx [ebx+1Ch] +
mov [esi+0Ch] edx +
mov [esi] ecx +
cmp eax [ebp+var_8] +
mov eax [ebp+var_4] +
jb loc_10126ED  +
xor ecx ecx +
cmp esi ecx +
jz loc_10126ED  +
mov edx [ebp+var_8] +
mov [esi+8] ecx +
mov [esi+4] edx +
mov [esi+10h] ecx +
mov edx [ebx+1Ch] +
mov [esi+0Ch] edx +
mov [esi] ecx +
sub eax [ebx+14h] +
mov ecx [ebp+var_10] +
mov [ecx+8] eax +
mov eax [ebp+var_C] +
mov [ecx+10h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx edx +
push 0  +
mov edx edi +
mov esi ecx +
call sub_1011EC9  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_101272C  +
or dword ptr [ecx] 0FFFFFFFFh +
test eax eax +
jl loc_101274A  +
cmp dword ptr [edi] 0Ch +
jnz loc_101274A  +
push 0  +
push ecx  +
push ebx  +
add edi 4 +
push edi  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_101274A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebx+5Ch] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_8] +
mov eax [eax] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
push esi  +
mov [ebp+var_10] eax +
xor esi esi +
add eax 0FFFFFFC0h +
push edi  +
mov [ebp+var_4] esi +
lea edi [ebx+48h] +
cmp eax 3Ah +
ja loc_101342B  +
movzx eax ds:byte_10134DA[eax] +
jmp ds:off_1013446[eax*4]  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [edi+8] esi +
jz loc_10127BB  +
mov eax [ebp+var_C] +
mov esi [eax+8] +
mov eax [ebp+var_C] +
mov eax [eax] +
cmp eax 1Ah +
jnz loc_10127D7  +
mov eax [ebp+var_C] +
add esi [eax+8] +
mov [ebp+var_8] 68h +
jmp loc_1012F3A  +
cmp eax 0Ch +
jnz loc_1013424  +
mov [ebp+var_8] 69h +
jmp loc_101342B  +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1011EC9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp dword ptr [edi] 0Ch +
mov esi [edi+8] +
jnz loc_1013424  +
test esi esi +
jz loc_1013424  +
mov [ebp+var_8] 67h +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov ecx [ebp+var_C] +
mov eax [ecx] +
mov esi [edi+8] +
cmp eax 9 +
jz loc_10128EC  +
cmp eax 0Ah +
jz loc_10128EC  +
cmp eax 0Ch +
jnz loc_101342B  +
add [ebx+14h] esi +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_1006190 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_10] 0 +
jnz loc_101288A  +
mov [ebp+var_8] 6Eh +
jmp loc_10128BC  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_1006198 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_10] 0 +
jnz loc_10128B5  +
mov [ebp+var_8] 6Ah +
jmp loc_10128BC  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov eax [edi+8] +
mov ecx [ebp+arg_0] +
add esi eax +
cmp byte ptr [ecx+14h] 0 +
jnz loc_101342B  +
add [ebx+14h] eax +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343C  +
jmp loc_1012F53  +
add esi [ecx+8] +
mov [ebx+0D0h] eax +
mov [ebp+var_8] 74h +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [ebp+var_C] +
mov esi [eax+8] +
mov eax [eax] +
add esi [edi+8] +
cmp eax 9 +
jz loc_1012931  +
cmp eax 0Ah +
jnz loc_1013424  +
mov [ebx+0D0h] eax +
mov [ebp+var_8] 6Bh +
jmp loc_101342B  +
push 0  +
push dword ptr [ebx+0D0h]  +
mov edx edi +
mov ecx ebx +
call sub_1012527  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_10] 6Bh +
mov esi [edi+8] +
jz loc_101297E  +
cmp [ebp+var_10] 74h +
jnz loc_101342B  +
mov [ebp+var_8] 75h +
jmp loc_101342B  +
mov [ebp+var_8] 6Ch +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax [ebx+0D0h] +
jnz loc_1013424  +
mov [ebp+var_8] 6Dh +
jmp loc_1012F3A  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax 6 +
jnz loc_10129E5  +
mov [ebp+var_8] 77h +
jmp loc_101342B  +
cmp eax 0Ch +
jnz loc_101342B  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_1006188 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_10] 0 +
mov esi [edi+8] +
jnz loc_1013424  +
add [ebx+14h] esi +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
add esi [edi+8] +
mov [ebp+var_8] 72h +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
mov edi [edi] +
cmp edi 9 +
jz loc_1012A66  +
cmp edi 0Ah +
jnz loc_1013424  +
mov [ebp+var_8] 6Fh +
jmp loc_1012AEB  +
mov edx edi +
mov ecx ebx +
call sub_1012430  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
mov [ebp+var_8] 70h +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
test eax eax +
jl loc_101343F  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax [ebx+0D0h] +
jnz loc_1013424  +
mov [ebp+var_8] 71h +
jmp loc_1012F3A  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
mov edi [edi] +
cmp edi 9 +
jz loc_1012AE4  +
cmp edi 0Ah +
jnz loc_1013424  +
mov [ebp+var_8] 6Bh +
mov [ebx+0D0h] edi +
jmp loc_101342B  +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1011EC9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp dword ptr [edi] 0Ch +
mov esi [edi+8] +
jnz loc_1013424  +
mov [ebp+var_8] 73h +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [ebp+var_C] +
mov esi [eax+8] +
add esi [edi+8] +
cmp dword ptr [eax] 6 +
jnz loc_1013424  +
jmp loc_10129D9  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
test eax eax +
jl loc_101343F  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax [ebx+0D0h] +
jnz loc_1013424  +
mov [ebp+var_8] 76h +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
test esi esi +
jbe loc_1012BAA  +
mov [ebp+var_8] 4Bh +
jmp loc_101342B  +
push [ebp+var_C]  +
add [ebx+14h] esi +
mov edx edi +
mov ecx ebx +
call sub_1011EC9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [edi+8] +
add esi eax +
cmp dword ptr [edi] 0Ch +
jnz loc_1013424  +
test eax eax +
jz loc_1013424  +
mov ecx [ebp+var_C] +
xor eax eax +
cmp dword ptr [ecx] 15h +
setz al  +
add eax 4Ch +
mov [ebp+var_8] eax +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011EC9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp dword ptr [edi] 0Ch +
mov esi [edi+8] +
jnz loc_1013424  +
test esi esi +
jz loc_1013424  +
mov [ebp+var_8] 4Ch +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp dword ptr [edi] 15h +
jz loc_1012C47  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov esi [edi+8] +
mov [ebp+var_8] 4Eh +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [edi+8] +
test eax eax +
jbe loc_1012C82  +
mov esi eax +
mov [ebp+var_8] 4Fh +
jmp loc_101342B  +
mov eax [ebp+var_C] +
mov ecx [eax] +
cmp ecx 6 +
jnz loc_1012C9B  +
mov esi [eax+8] +
mov [ebp+var_8] 65h +
jmp loc_101342B  +
cmp ecx 0Ch +
jnz loc_1013424  +
push eax  +
mov edx edi +
mov ecx ebx +
call sub_1011EC9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov ecx [ebp+var_C] +
mov esi [edi+8] +
xor eax eax +
cmp dword ptr [ecx] 15h +
setz al  +
add eax 50h +
jmp loc_1012BE8  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011EC9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp dword ptr [edi] 0Ch +
mov esi [edi+8] +
jnz loc_1013424  +
test esi esi +
jz loc_1013424  +
mov [ebp+var_8] 50h +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp dword ptr [edi] 15h +
jz loc_1012D26  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov esi [edi+8] +
mov [ebp+var_8] 52h +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [ebp+var_C] +
mov ecx [eax] +
mov esi [edi+8] +
cmp ecx 13h +
jnz loc_1012D68  +
add esi [eax+8] +
mov [ebp+var_8] 5Bh +
jmp loc_101342B  +
cmp ecx 0Ch +
jnz loc_101342B  +
add [ebx+14h] esi +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset asc_1006130 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_C] 0 +
jnz loc_1012DA5  +
add esi [edi+8] +
mov [ebp+var_8] 53h +
jmp loc_101342B  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_10061A0 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_C] 0 +
jnz loc_1012DD6  +
add esi [edi+8] +
mov [ebp+var_8] 54h +
jmp loc_101342B  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_10061A8 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_C] 0 +
jnz loc_1012E07  +
add esi [edi+8] +
mov [ebp+var_8] 55h +
jmp loc_101342B  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_10061B0 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_C] 0 +
jnz loc_1012E38  +
add esi [edi+8] +
mov [ebp+var_8] 56h +
jmp loc_101342B  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_1006180 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_C] 0 +
jnz loc_1012E69  +
add esi [edi+8] +
mov [ebp+var_8] 57h +
jmp loc_101342B  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_10061B8 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_C] 0 +
jnz loc_1012E9A  +
add esi [edi+8] +
mov [ebp+var_8] 58h +
jmp loc_101342B  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_10061C0 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_C] 0 +
jnz loc_1012ECB  +
add esi [edi+8] +
mov [ebp+var_8] 59h +
jmp loc_101342B  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_10061C8 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_C] 0 +
jnz loc_1012EFC  +
add esi [edi+8] +
mov [ebp+var_8] 5Ah +
jmp loc_101342B  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
mov edx offset dword_1006178 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
add esi [edi+8] +
cmp [ebp+var_C] 0 +
jnz loc_1012F2D  +
mov [ebp+var_8] 5Eh +
jmp loc_101342B  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+14h] 0 +
jnz loc_101342B  +
add [ebx+14h] esi +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
add esi [edi+8] +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [ebp+var_C] +
cmp dword ptr [eax] 13h +
jnz loc_1013424  +
mov esi [edi+8] +
inc esi  +
jmp loc_1012D5C  +
push 0  +
push 14h  +
mov edx edi +
mov ecx ebx +
call sub_1012527  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
mov [ebp+var_8] 5Ch +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp dword ptr [edi] 14h +
jnz loc_1013424  +
mov esi [edi+8] +
mov [ebp+var_8] 5Dh +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
add [ebx+14h] esi +
mov ecx [ebp+var_C] +
mov eax [ecx] +
cmp eax 19h +
jnz loc_10130D7  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
test eax eax +
jl loc_101343F  +
mov eax [edi+8] +
add [ebx+14h] eax +
add esi eax +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_10061D8 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_10] 0 +
jnz loc_101304F  +
add esi [edi+8] +
mov [ebp+var_8] 60h +
jmp loc_101342B  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_10061D0 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_10] 0 +
jnz loc_1013080  +
add esi [edi+8] +
mov [ebp+var_8] 5Fh +
jmp loc_101342B  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
mov edx offset dword_10061E0 +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_10] 0 +
jnz loc_1013424  +
add esi [edi+8] +
mov [ebp+var_8] 61h +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
mov ecx [ebp+var_C] +
add [ebx+14h] esi +
mov eax [ecx] +
cmp eax 9 +
jz loc_10130E5  +
cmp eax 0Ah +
jnz loc_1013424  +
mov [ebx+0D0h] eax +
add esi [ecx+8] +
mov [ebp+var_8] 62h +
jmp loc_101342B  +
push 0  +
push dword ptr [ebx+0D0h]  +
mov edx edi +
mov ecx ebx +
call sub_1012527  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
mov [ebp+var_8] 63h +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [edi] +
cmp eax [ebx+0D0h] +
jz loc_101315B  +
push 0  +
push 0  +
push 910h  +
push 0C000A083h  +
call sub_1016F35  +
jmp loc_101343F  +
mov esi [edi+8] +
mov [ebp+var_8] 64h +
jmp loc_101342B  +
push 0  +
push 6  +
mov edx edi +
mov ecx ebx +
call sub_1012527  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [ebp+var_10] 48h +
mov esi [edi+8] +
jz loc_10131A1  +
cmp [ebp+var_10] 78h +
jnz loc_101342B  +
mov [ebp+var_8] 79h +
jmp loc_101342B  +
mov [ebp+var_8] 49h +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp dword ptr [edi] 6 +
mov esi [edi+8] +
jnz loc_1013424  +
cmp [ebp+var_10] 49h +
jz loc_10131E9  +
cmp [ebp+var_10] 79h +
jnz loc_101342B  +
mov [ebp+var_8] 7Ah +
jmp loc_101342B  +
mov [ebp+var_8] 4Ah +
jmp loc_101342B  +
push [ebp+var_C]  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
cmp [edi] esi +
jz loc_1013424  +
mov eax [ebp+var_C] +
mov esi [eax+8] +
add esi [edi+8] +
cmp dword ptr [eax] 6 +
jnz loc_1013424  +
jmp loc_101331E  +
push 0  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
test esi esi +
jbe loc_1013424  +
cmp dword ptr [edi] 0Dh +
jnz loc_1013424  +
jmp loc_101327D  +
mov esi [ebp+var_C] +
push esi  +
mov edx edi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov eax [edi+8] +
test eax eax +
jbe loc_1013289  +
cmp dword ptr [edi] 0Dh +
jnz loc_1013289  +
mov esi eax +
mov [ebp+var_8] 41h +
jmp loc_101342B  +
cmp dword ptr [esi] 0Ch +
jnz loc_10132D0  +
add [ebx+14h] eax +
push esi  +
mov edx edi +
mov ecx ebx +
call sub_1011EC9  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
test esi esi +
jz loc_10132BE  +
cmp dword ptr [edi] 0Ch +
jnz loc_10132BE  +
mov [ebp+var_8] 42h +
jmp loc_101342B  +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov eax [ebp+var_C] +
mov esi [eax+8] +
jmp loc_101342B  +
mov esi eax +
jmp loc_1013424  +
push 0  +
push 6  +
push 0Eh  +
mov edx edi +
mov ecx ebx +
call sub_1012248  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
mov [ebp+var_8] 43h +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [edi+8] +
mov edi [edi] +
cmp edi 6 +
jnz loc_101332A  +
mov [ebp+var_8] 47h +
jmp loc_101342B  +
cmp edi 0Eh +
jnz loc_1013424  +
mov [ebp+var_8] 44h +
jmp loc_101342B  +
mov edx edi +
mov ecx ebx +
call sub_1011901  +
test eax eax +
jl loc_101343F  +
mov eax [edi] +
mov esi [edi+8] +
cmp eax 0Dh +
jnz loc_1013382  +
mov esi [ebp+var_C] +
push 0  +
mov edx esi +
mov ecx ebx +
call sub_1011A64  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343F  +
mov esi [esi+8] +
mov [ebp+var_8] 45h +
jmp loc_101342B  +
cmp eax 3 +
jz loc_1013424  +
cmp eax 0Fh +
jnz loc_101339C  +
mov [ebp+var_8] 46h +
jmp loc_101342B  +
cmp eax 1Ah +
jnz loc_10133B4  +
push 0  +
push 0  +
push 0A2Ch  +
push 0C0000002h  +
jmp loc_1013151  +
cmp eax 7 +
jnz loc_1013424  +
mov edx [ebp+var_C] +
add [ebx+14h] esi +
mov ecx ebx +
call sub_1011901  +
test eax eax +
jl loc_101343F  +
mov ecx [ebp+var_C] +
mov eax [ecx+8] +
add esi eax +
cmp dword ptr [ecx] 10h +
jnz loc_1013424  +
add [ebx+14h] eax +
and [ebp+var_10] 0 +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_10] +
mov edx ds:off_10061E8[eax*8] +
push edi  +
mov ecx ebx +
call sub_101270A  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101343C  +
cmp [ebp+var_C] 0 +
jz loc_101340C  +
inc [ebp+var_10]  +
cmp [ebp+var_10] 4 +
jnz loc_10133DE  +
jmp loc_1013421  +
mov eax [ebp+var_10] +
mov ecx ds:dword_10061EC[eax*8] +
add esi [edi+8] +
mov [ebp+var_8] ecx +
cmp eax 4 +
jnz loc_101342B  +
add esi [edi+8] +
mov eax [ebp+arg_0] +
mov byte ptr [eax+14h] 1 +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [eax] esi +
mov eax [ebp+var_8] +
cmp [ecx] eax +
jz loc_101343C  +
mov [ecx] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
xor edx edx +
cmp eax edx +
jz loc_101352D  +
mov [eax] edx +
mov [eax+4] edx +
mov ecx [ebp+arg_0] +
cmp ecx edx +
jnz loc_1013547  +
push edx  +
push edx  +
push 127Fh  +
push 0C00000EFh  +
call sub_1016F35  +
jmp loc_101356C  +
cmp eax edx +
jnz loc_1013559  +
push edx  +
push edx  +
push 1283h  +
push 0C00000F0h  +
jmp loc_1013540  +
mov edx [ecx+0D8h] +
mov [eax] edx +
mov ecx [ecx+0DCh] +
mov [eax+4] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
cmp esi ecx +
jnz loc_101359C  +
push ecx  +
push ecx  +
push 129Ch  +
push 0C00000EFh  +
call sub_1016F35  +
jmp loc_1013625  +
mov eax [ebp+arg_4] +
cmp eax ecx +
jnz loc_10135B1  +
push ecx  +
push ecx  +
push 12A0h  +
push 0C00000F0h  +
jmp loc_1013592  +
push ebx  +
push edi  +
cmp [esi+0D4h] cl +
jz loc_1013615  +
mov ecx [esi+18h] +
mov edi [eax+4] +
mov ebx [esi+0DCh] +
mov [ebp+arg_0] ecx +
mov ecx [esi+0D8h] +
mov [ebp+var_8] ecx +
mov ecx [esi+14h] +
add edi ecx +
cmp ecx edi +
jnb loc_10135FD  +
mov edx edi +
call [ebp+arg_0]  +
cmp eax 0FFFFFFFFh +
jz loc_1013611  +
cmp eax 0Ah +
jnz loc_10135F3  +
inc [ebp+var_8]  +
xor ebx ebx +
inc ebx  +
jmp loc_10135F4  +
inc ebx  +
mov ecx edx +
cmp edx edi +
jb loc_10135DC  +
mov eax [ebp+arg_4] +
mov edx [ebp+var_8] +
mov [esi+0D8h] edx +
mov [esi+0DCh] ebx +
mov [esi+14h] ecx +
jmp loc_101361B  +
mov eax edx +
jmp loc_1013623  +
mov ecx [eax+4] +
add [esi+14h] ecx +
mov eax [eax+10h] +
mov [esi+44h] eax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jnz loc_1013655  +
push ebx  +
push ebx  +
push 12D5h  +
push 0C00000EFh  +
call sub_1016F35  +
jmp loc_1013705  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jnz loc_1013673  +
push ebx  +
push ebx  +
push 12D9h  +
push 0C00000F0h  +
call sub_1016F35  +
jmp loc_1013704  +
push 0E0h  +
push ebx  +
push esi  +
call memset  +
mov eax [edi+4] +
mov [esi] eax +
mov eax [edi+8] +
mov [esi+4] eax +
mov eax [edi+4] +
mov [esi+14h] eax +
mov eax [edi+8] +
add eax [edi+4] +
mov [esi+18h] ebx +
mov [esi+10h] eax +
mov eax [edi+18h] +
add esp 0Ch +
cmp eax ebx +
jz loc_10136AE  +
mov [esi+0C8h] eax +
jmp loc_10136B8  +
mov dword ptr [esi+0C8h] offset loc_101141B +
mov eax [edi+14h] +
cmp eax ebx +
jz loc_10136C7  +
mov [esi+0C0h] eax +
jmp loc_10136D1  +
mov dword ptr [esi+0C0h] offset sub_101135B +
mov eax [edi+1Ch] +
mov [esi+0C4h] eax +
mov eax [edi+10h] +
mov [esi+0CCh] eax +
xor eax eax +
inc eax  +
mov [esi+0D8h] eax +
mov [esi+0DCh] eax +
mov dword ptr [esi+44h] 3 +
mov al [edi+0Ch] +
mov [esi+0D4h] al +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax ecx +
lea ecx [eax-61h] +
cmp ecx 19h +
ja locret_101371D  +
add eax 0FFFFFFE0h +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
test esi esi +
jz loc_101373D  +
test edx edx +
jz loc_101373D  +
push edi  +
push 11h  +
pop ecx  +
mov edi edx +
movs   +
pop edi  +
xor eax eax +
pop esi  +
retn   +
push 0  +
push 0  +
push 140Eh  +
push 0C000000Dh  +
call sub_1016F35  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
test esi esi +
jz loc_1013771  +
test edx edx +
jz loc_1013771  +
push edi  +
push 38h  +
pop ecx  +
mov edi edx +
movs   +
pop edi  +
xor eax eax +
pop esi  +
retn   +
push 0  +
push 0  +
push 141Eh  +
push 0C000000Dh  +
call sub_1016F35  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
xor esi esi +
lea eax [ecx+ebx] +
push edi  +
mov edi ebx +
mov [ebp+arg_C] eax +
cmp ebx esi +
jz loc_10137AC  +
xor eax eax +
mov [ebx] ax +
mov edx [ebp+arg_10] +
cmp edx esi +
jz loc_10137B5  +
mov [edx] esi +
test cl 1 +
jz loc_10137C6  +
push esi  +
push esi  +
push 143Fh  +
jmp loc_1013899  +
cmp [ebp+arg_0] esi +
jz loc_1013892  +
mov eax [ebp+arg_4] +
cmp eax esi +
jz loc_1013892  +
cmp edx esi +
jz loc_1013892  +
test ecx ecx +
jz loc_10137F6  +
test ebx ebx +
jnz loc_10137F6  +
push ebx  +
push ebx  +
push 1445h  +
jmp loc_1013899  +
mov ecx [eax] +
mov esi [eax+4] +
add esi ecx +
cmp ecx esi +
jnb loc_101385F  +
mov eax [ebp+arg_0] +
mov edx esi +
call dword ptr [eax+18h]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jz loc_101387A  +
cmp eax 10000h +
jnb loc_1013823  +
cmp edi [ebp+arg_C] +
jnb loc_101381F  +
mov [edi] ax +
inc edi  +
inc edi  +
jmp loc_1013858  +
cmp eax 110000h +
jnb loc_101387E  +
mov edx [ebp+arg_C] +
add edx 4 +
cmp edx [ebp+arg_C] +
ja loc_1013855  +
lea edx [eax-10000h] +
shr edx 0Ah +
sub edx 2800h +
and eax 3FFh +
sub eax 2400h +
mov [edi] dx +
mov [edi+2] ax +
add edi 4 +
cmp ecx esi +
jb loc_1013801  +
mov edx [ebp+arg_10] +
mov eax edi +
sub eax ebx +
mov [edx] eax +
cmp eax [ebp+arg_8] +
jbe loc_101388E  +
push 0  +
push 0  +
push 1473h  +
push 0C0000023h  +
jmp loc_101389E  +
mov eax ecx +
jmp loc_10138A3  +
push 0  +
push 0  +
push 146Ah  +
push 0C0000161h  +
jmp loc_101389E  +
xor eax eax +
jmp loc_10138A3  +
push esi  +
push esi  +
push 1442h  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
xor ecx ecx +
push esi  +
push edi  +
cmp ebx ecx +
jz loc_10138C2  +
mov [ebx] cl +
mov edi [ebp+arg_0] +
cmp edi ecx +
jz loc_101394F  +
cmp ebx ecx +
jz loc_101394F  +
mov eax [ebp+arg_4] +
cmp eax ecx +
jz loc_101394F  +
mov ecx [eax] +
mov esi [eax+4] +
add esi ecx +
jmp loc_101390F  +
mov edx esi +
call dword ptr [edi+18h]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jz loc_101394B  +
cmp eax 2Eh +
ja loc_1013928  +
jz loc_1013916  +
cmp eax 25h +
ja loc_101391A  +
jz loc_1013916  +
cmp eax 9 +
jb loc_1013916  +
cmp eax 0Ah +
jbe loc_101390F  +
cmp eax 0Dh +
jz loc_101390F  +
cmp eax 20h +
jnz loc_1013916  +
cmp ecx esi +
jb loc_10138E1  +
mov byte ptr [ebx] 1 +
xor eax eax +
jmp loc_1013960  +
sub eax 26h +
jz loc_1013916  +
dec eax  +
jz loc_1013916  +
dec eax  +
jz loc_1013916  +
dec eax  +
jmp loc_1013916  +
cmp eax 3Fh +
ja loc_1013939  +
jz loc_1013916  +
sub eax 2Fh +
jz loc_1013916  +
sub eax 0Bh +
jmp loc_101391D  +
sub eax 5Bh +
jz loc_1013916  +
dec eax  +
dec eax  +
jz loc_1013916  +
dec eax  +
dec eax  +
jz loc_1013916  +
sub eax 1Ch +
jmp loc_1013916  +
mov eax ecx +
jmp loc_1013960  +
push ecx  +
push ecx  +
push 1488h  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_8] 0FFFFFFFFh +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
cmp esi ebx +
jnz loc_101399F  +
push ebx  +
push ebx  +
push 0AA6h  +
push 0C00000EFh  +
call sub_1016F35  +
jmp loc_1013C67  +
cmp [ebp+arg_4] ebx +
jnz loc_10139B2  +
push ebx  +
push ebx  +
push 0AAAh  +
push 0C00000F0h  +
jmp loc_1013995  +
mov ecx [ebp+arg_4] +
and [ecx+4] ebx +
mov eax [esi+14h] +
and [ecx+0Ch] ebx +
push edi  +
mov [ecx] eax +
mov eax [esi+1Ch] +
push 4  +
mov [ecx+8] eax +
mov [ecx+14h] bl +
mov eax [esi+44h] +
pop edx  +
lea edi [esi+48h] +
mov [ebp+arg_0] eax +
cmp eax edx +
jnz loc_10139E4  +
mov [ecx+10h] edx +
xor eax eax +
jmp loc_1013C66  +
mov edx [esi+14h] +
mov [ecx+10h] eax +
add eax 0FFFFFFFEh +
mov [ebp+var_10] edx +
cmp eax 78h +
ja loc_101476C  +
movzx eax ds:byte_101481C[eax] +
jmp ds:off_1014780[eax*4]  +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jge loc_1013A20  +
mov ecx [ebp+arg_4] +
mov byte ptr [ecx+14h] 1 +
jmp loc_1013C66  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx 3 +
jnz loc_1013A4E  +
cmp [ebp+arg_0] 47h +
jz loc_1013A3B  +
cmp [ebp+arg_0] 34h +
jz loc_1013A3B  +
cmp [ebp+arg_0] ecx +
jnz loc_1013A42  +
mov ecx [ebp+arg_4] +
mov byte ptr [ecx+14h] 1 +
mov [ebp+var_4] 4 +
jmp loc_1013C35  +
cmp ecx 7 +
mov edx edi +
mov ecx esi +
jnz loc_1013C09  +
add [esi+14h] ebx +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi] +
push 5  +
pop edx  +
cmp ecx edx +
jz loc_1013BFD  +
cmp ecx 8 +
jz loc_1013BA4  +
cmp ecx 10h +
jz loc_1013A91  +
mov ebx [edi+8] +
mov [ebp+var_4] edx +
jmp loc_1013C35  +
mov eax [edi+8] +
add [esi+14h] eax +
add ebx [edi+8] +
lea edx [esi+70h] +
push 2  +
mov ecx esi +
call sub_1011D2B  +
test eax eax +
jl loc_1013C66  +
lea ecx [esi+70h] +
mov edx [ecx] +
cmp edx 1 +
jnz loc_1013AD1  +
cmp [ecx+14h] edx +
jnz loc_1013AD1  +
mov edx [ecx+1Ch] +
add edx [ecx+8] +
mov [ebp+var_4] 2Dh +
add ebx edx +
jmp loc_1013C35  +
cmp edx 0Eh +
jnz loc_1013B49  +
lea edx [ecx+14h] +
cmp dword ptr [edx] 0Ch +
jnz loc_1013B49  +
mov eax [esi+78h] +
add [esi+14h] eax +
lea eax [ebp+var_8] +
push eax  +
push edx  +
mov edx offset asc_1006130 +
mov ecx esi +
call sub_101270A  +
test eax eax +
jl loc_1013C66  +
mov ecx [esi+8Ch] +
mov edx [esi+78h] +
add edx ecx +
add ebx edx +
cmp [ebp+var_8] 0 +
jnz loc_1013B98  +
add [esi+14h] ecx +
lea edx [esi+98h] +
mov ecx esi +
mov [ebp+arg_0] edx +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
mov ecx [ebp+arg_0] +
add ebx [esi+0A0h] +
cmp dword ptr [ecx] 0Eh +
jnz loc_1013B98  +
mov [ebp+var_4] 30h +
jmp loc_1013C35  +
cmp dword ptr [ecx] 0Ch +
jnz loc_1013B95  +
push 0  +
lea edx [esi+70h] +
mov ecx esi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
push offset dword_1006160  +
lea eax [esi+74h] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1013C66  +
add ebx [esi+78h] +
cmp [ebp+var_8] 0 +
jnz loc_1013B98  +
mov [ebp+var_4] 40h +
jmp loc_1013C35  +
add ebx [ecx+8] +
mov ecx [ebp+arg_4] +
mov byte ptr [ecx+14h] 1 +
jmp loc_1013C35  +
mov eax [edi+8] +
add [esi+14h] eax +
push 0  +
mov edx edi +
mov ecx esi +
add ebx eax +
mov [ebp+var_4] 28h +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
cmp dword ptr [edi+8] 0 +
jz loc_1013C35  +
cmp dword ptr [edi] 0Ch +
jnz loc_1013C35  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
push offset dword_1006138  +
lea eax [edi+4] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1013C66  +
cmp [ebp+var_8] 0 +
jnz loc_1013C35  +
add ebx [edi+8] +
mov [ebp+var_4] 33h +
jmp loc_1013C35  +
add ebx [edi+8] +
mov [ebp+var_4] 22h +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
call sub_1011C5B  +
mov ebx [edi+8] +
mov [ebp+var_4] 2 +
jmp loc_1013C35  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push ecx  +
mov ebx esi +
call sub_1012756  +
test eax eax +
jl loc_1013C66  +
mov ebx [ebp+var_C] +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_10] +
mov [esi+14h] edx +
mov [ecx] edx +
mov edx [ebp+var_4] +
mov [ecx+4] ebx +
mov [ecx+10h] edx +
mov edx [edi+10h] +
add [ecx+0Ch] edx +
mov edx [edi+0Ch] +
mov [ecx+8] edx +
test eax eax +
jl loc_1013C66  +
cmp [ebp+arg_8] 0 +
jz loc_1013C66  +
push ecx  +
push esi  +
call sub_1013575  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1013B98  +
cmp dword ptr [edi] 0Dh +
jnz loc_1013B98  +
mov [ebp+var_4] 35h +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov eax [edi+8] +
add [esi+14h] eax +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
cmp dword ptr [edi] 4 +
mov ebx [edi+8] +
jnz loc_1013B98  +
mov [ebp+var_4] 36h +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov eax [edi+8] +
add [esi+14h] eax +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx 9 +
jz loc_1013D10  +
cmp ecx 0Ah +
jnz loc_1013B98  +
mov [esi+0D0h] ecx +
mov [ebp+var_4] 3Ah +
jmp loc_1013C35  +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx [esi+0D0h] +
jnz loc_1013B98  +
mov [ebp+var_4] 3Ch +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
push dword ptr [esi+0D0h]  +
mov edx edi +
mov ecx esi +
call sub_1012527  +
test eax eax +
jl loc_1013C66  +
mov ecx [esi+5Ch] +
cmp ecx [esi+0D0h] +
jnz loc_1013B98  +
mov ebx [edi+8] +
mov [ebp+var_4] 3Bh +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi+8] +
test ecx ecx +
jbe loc_1013DB1  +
cmp dword ptr [edi] 0Dh +
jnz loc_1013DB1  +
mov ebx ecx +
jmp loc_1013C90  +
mov ecx [esi+5Ch] +
cmp ecx 8 +
jnz loc_1013DE8  +
mov ebx [esi+64h] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
add ebx [edi+8] +
cmp dword ptr [edi] 6 +
jnz loc_1013B98  +
mov [ebp+var_4] 34h +
jmp loc_1013C35  +
cmp ecx 0Ch +
jnz loc_1013B98  +
cmp [ebp+arg_0] 35h +
jnz loc_1013B98  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
and [ebp+arg_0] 0 +
push 0  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_0] +
push ds:off_1006208[eax*8]  +
lea eax [edi+4] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1013C66  +
cmp [ebp+var_8] 0 +
jz loc_1013E49  +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
jb loc_1013E15  +
jmp loc_1013E56  +
mov ecx [ebp+arg_0] +
mov ecx ds:dword_100620C[ecx*8] +
mov [ebp+var_4] ecx +
cmp [ebp+var_8] 0 +
jz loc_1013C35  +
jmp loc_1013B98  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1013B98  +
cmp dword ptr [edi] 0Ch +
jnz loc_1013B98  +
mov [ebp+var_4] 2Ah +
jmp loc_1013C35  +
lea edx [esi+70h] +
push 2  +
mov ecx esi +
call sub_1011D2B  +
test eax eax +
jl loc_1013C66  +
lea ecx [esi+70h] +
mov ebx [ecx+1Ch] +
add ebx [ecx+8] +
cmp dword ptr [ecx] 8 +
jnz loc_1013B98  +
cmp dword ptr [ecx+14h] 6 +
jnz loc_1013B98  +
mov [ebp+var_4] 29h +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jz loc_1013F01  +
cmp dword ptr [edi] 0Dh +
jnz loc_1013F01  +
mov [ebp+var_4] 2Ch +
jmp loc_1013C35  +
cmp dword ptr [esi+5Ch] 8 +
jnz loc_1013B98  +
jmp loc_1013E98  +
xor ebx ebx +
mov [ebp+var_4] ebx +
lea eax [esi+5Ch] +
push eax  +
push 8  +
mov edx edi +
mov ecx esi +
call sub_1012527  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi+8] +
add [esi+14h] ecx +
mov edx [esi+5Ch] +
mov [ebp+arg_0] ecx +
cmp edx 8 +
jnz loc_1013F77  +
mov eax [esi+64h] +
add eax [esi+14h] +
mov edx edi +
mov ecx esi +
mov [esi+14h] eax +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
cmp dword ptr [edi] 6 +
jz loc_1013F6B  +
mov eax [edi+8] +
mov ecx [esi+64h] +
add ecx eax +
add ecx [ebp+arg_0] +
add ebx ecx +
add [esi+14h] eax +
jmp loc_1013F12  +
mov ecx [ebp+arg_0] +
mov [ebp+var_4] 2Bh +
jmp loc_1013F8A  +
cmp edx 3 +
jnz loc_1013F8A  +
mov edx [ebp+arg_4] +
mov [ebp+var_4] 1 +
mov byte ptr [edx+14h] 1 +
add ebx ecx +
cmp [ebp+var_4] 0 +
jz loc_1013F12  +
jmp loc_1013C35  +
and [ebp+var_4] ebx +
lea eax [esi+5Ch] +
push eax  +
push 1  +
mov edx edi +
mov ecx esi +
call sub_1012527  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi+8] +
mov [ebp+arg_0] ecx +
mov ecx [esi+5Ch] +
cmp ecx 1 +
jnz loc_1013FF7  +
mov eax [esi+64h] +
add eax [ebp+arg_0] +
mov edx edi +
add [esi+14h] eax +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
cmp dword ptr [edi] 1 +
jnz loc_1013FE6  +
mov ecx [esi+64h] +
sub [esi+14h] ecx +
jmp loc_1014000  +
mov ecx [edi+8] +
add [esi+14h] ecx +
mov ecx [esi+64h] +
add ecx [edi+8] +
add [ebp+arg_0] ecx +
jmp loc_1014007  +
cmp ecx 3 +
jz loc_1014000  +
test ecx ecx +
jnz loc_1014007  +
mov [ebp+var_4] 2Eh +
add ebx [ebp+arg_0] +
cmp [ebp+var_4] 0 +
jz loc_1013F9A  +
jmp loc_1013C35  +
lea edx [esi+70h] +
push 3  +
mov ecx esi +
call sub_1011D2B  +
test eax eax +
jl loc_1013C66  +
lea ecx [esi+70h] +
mov ebx [ecx+30h] +
add ebx [ecx+1Ch] +
add ebx [ecx+8] +
cmp dword ptr [ecx] 1 +
jnz loc_1013B98  +
cmp dword ptr [ecx+14h] 1 +
jnz loc_1013B98  +
cmp dword ptr [ecx+28h] 6 +
jnz loc_1013B98  +
mov [ebp+var_4] 2Fh +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jz loc_1013B98  +
xor ecx ecx +
cmp dword ptr [esi+5Ch] 15h +
setnz cl  +
dec ecx  +
and ecx 3 +
add ecx 23h +
mov [ebp+var_4] ecx +
jmp loc_1013C35  +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
cmp dword ptr [edi] 15h +
mov ebx [edi+8] +
jnz loc_1013B98  +
mov [ebp+var_4] 27h +
jmp loc_1013C35  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1013B98  +
mov [ebp+var_4] 23h +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ebx [esi+64h] +
add ebx [edi+8] +
cmp dword ptr [esi+5Ch] 6 +
jnz loc_1013B98  +
mov [ebp+var_4] 25h +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1013B98  +
xor ecx ecx +
cmp dword ptr [esi+5Ch] 15h +
setnz cl  +
dec ecx  +
and ecx 10h +
add ecx 6 +
jmp loc_101408E  +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
cmp dword ptr [edi] 15h +
mov ebx [edi+8] +
jnz loc_1013B98  +
mov [ebp+var_4] 17h +
jmp loc_1013C35  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1013B98  +
mov [ebp+var_4] 6 +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_10141CA  +
mov [ebp+var_4] 21h +
jmp loc_1013C35  +
mov ecx [esi+5Ch] +
cmp ecx 6 +
jnz loc_10141E1  +
add ebx [esi+64h] +
mov [ebp+var_4] 1Ah +
jmp loc_1013C35  +
cmp ecx 5 +
jnz loc_1013B98  +
lea edx [esi+70h] +
push 2  +
mov ecx esi +
call sub_1011D2B  +
test eax eax +
jl loc_1013C66  +
lea ecx [esi+70h] +
mov ebx [ecx+1Ch] +
add ebx [ecx+8] +
cmp dword ptr [ecx+14h] 6 +
jnz loc_1013B98  +
cmp dword ptr [ecx] 5 +
jnz loc_1013B98  +
mov [ebp+var_4] 1Bh +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
add ebx [edi+8] +
cmp dword ptr [edi] 4 +
jnz loc_1013B98  +
mov [ebp+var_4] 1Dh +
jmp loc_1013C35  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi] +
add ebx [edi+8] +
cmp ecx 9 +
jz loc_10142A9  +
cmp ecx 0Ah +
jnz loc_1013B98  +
mov [esi+0D0h] ecx +
mov [ebp+var_4] 1Fh +
jmp loc_1013C35  +
push 0  +
push dword ptr [esi+0D0h]  +
mov edx edi +
mov ecx esi +
call sub_1012527  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
mov [ebp+var_4] 1Eh +
jmp loc_1013C35  +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx [esi+0D0h] +
jnz loc_1013B98  +
mov [ebp+var_4] 20h +
jmp loc_1013C35  +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
cmp dword ptr [edi] 15h +
mov ebx [edi+8] +
jnz loc_1013B98  +
mov [ebp+var_4] 19h +
jmp loc_1013C35  +
push 0  +
mov edx edi +
mov ecx esi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1013B98  +
mov [ebp+var_4] 1Ch +
jmp loc_1013C35  +
lea ebx [esi+5Ch] +
push ebx  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi+8] +
test ecx ecx +
jbe loc_1014387  +
mov ebx ecx +
jmp loc_10141BE  +
mov ecx [ebx] +
cmp ecx 6 +
jnz loc_1014396  +
mov ebx [esi+64h] +
jmp loc_10141D5  +
cmp ecx 5 +
mov ecx esi +
jnz loc_10143CA  +
lea edx [esi+70h] +
push 2  +
call sub_1011D2B  +
test eax eax +
jl loc_1013C66  +
lea ecx [esi+70h] +
mov ebx [ecx+1Ch] +
add ebx [ecx+8] +
cmp dword ptr [ecx] 5 +
jnz loc_1013B98  +
cmp dword ptr [ecx+14h] 6 +
jmp loc_1014214  +
push ebx  +
mov edx edi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1013B98  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push offset dword_1006158  +
lea eax [edi+4] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1013C66  +
cmp [ebp+var_8] 0 +
jnz loc_1014433  +
mov ecx [esi+5Ch] +
cmp ecx 4 +
jz loc_1014427  +
cmp ecx 0Dh +
jz loc_1014427  +
cmp ecx 15h +
jnz loc_1014494  +
mov [ebp+var_4] 7 +
jmp loc_1013C35  +
mov [ebp+var_4] 8 +
jmp loc_1013C35  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
push offset dword_1006138  +
lea eax [edi+4] +
push eax  +
push esi  +
call dword ptr [esi+0C8h]  +
test eax eax +
jl loc_1013C66  +
cmp [ebp+var_8] 0 +
mov ecx [esi+5Ch] +
jnz loc_101447D  +
cmp ecx 4 +
jz loc_1014358  +
cmp ecx 0Dh +
jz loc_1014358  +
cmp ecx 15h +
jnz loc_1014494  +
mov [ebp+var_4] 0Fh +
jmp loc_1013C35  +
cmp ecx 4 +
jz loc_1014358  +
cmp ecx 0Dh +
jz loc_1014358  +
cmp ecx 15h +
jz loc_10144A0  +
mov [ebp+var_4] 1 +
jmp loc_1013B98  +
mov [ebp+var_4] 18h +
jmp loc_1013C35  +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
cmp dword ptr [edi] 15h +
mov ebx [edi+8] +
jnz loc_1013B98  +
xor ecx ecx +
cmp [ebp+arg_0] 7 +
setnz cl  +
dec ecx  +
and ecx 0FFFFFFFAh +
add ecx 10h +
jmp loc_101408E  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011EC9  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
test ebx ebx +
jbe loc_1013B98  +
xor ecx ecx +
cmp [ebp+arg_0] 0Ah +
setnz cl  +
lea ecx ds:9[ecx*8] +
jmp loc_101408E  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
add ebx [edi+8] +
cmp dword ptr [edi] 4 +
jnz loc_1013B98  +
xor ecx ecx +
cmp [ebp+arg_0] 9 +
setnz cl  +
dec ecx  +
and ecx 0FFFFFFF9h +
add ecx 12h +
jmp loc_101408E  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi] +
add ebx [edi+8] +
cmp ecx 9 +
jz loc_101459F  +
cmp ecx 0Ah +
jnz loc_1013B98  +
mov [esi+0D0h] ecx +
xor ecx ecx +
cmp [ebp+arg_0] 0Bh +
setnz cl  +
dec ecx  +
and ecx 0FFFFFFF9h +
add ecx 13h +
jmp loc_101408E  +
lea eax [esi+5Ch] +
push eax  +
push dword ptr [esi+0D0h]  +
mov edx edi +
mov ecx esi +
call sub_1012527  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
xor ecx ecx +
cmp [ebp+arg_0] 0Ch +
setnz cl  +
dec ecx  +
and ecx 0FFFFFFFAh +
add ecx 14h +
jmp loc_101408E  +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
mov ecx [edi] +
mov ebx [edi+8] +
cmp ecx [esi+0D0h] +
jnz loc_1013B98  +
xor ecx ecx +
cmp [ebp+arg_0] 0Eh +
setnz cl  +
lea ecx ds:0Dh[ecx*8] +
jmp loc_101408E  +
lea eax [esi+5Ch] +
push eax  +
mov edx edi +
mov ecx esi +
call sub_1011A64  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+8] +
add [esi+14h] ebx +
mov edx edi +
mov ecx esi +
call sub_1011901  +
test eax eax +
jl loc_1013C66  +
add ebx [edi+8] +
cmp dword ptr [edi] 4 +
jnz loc_1013B98  +
mov [ebp+var_4] 0Bh +
jmp loc_1013C35  +
and [ebp+var_4] ebx +
and [ebp+arg_0] 0 +
lea eax [esi+5Ch] +
push eax  +
push 0Fh  +
mov edx edi +
mov ecx esi +
call sub_1012527  +
test eax eax +
jl loc_1013C66  +
mov ecx [esi+5Ch] +
cmp ecx 0Fh +
jnz loc_10146F4  +
mov eax [edi+8] +
add [esi+14h] eax +
push 3  +
lea edx [esi+5Ch] +
mov ecx esi +
call sub_1011D2B  +
test eax eax +
jl loc_1013C66  +
lea edx [esi+5Ch] +
mov ecx [edx] +
cmp ecx 0Fh +
jnz loc_10146C9  +
cmp [edx+14h] ecx +
jnz loc_10146C9  +
cmp dword ptr [edx+28h] 6 +
jnz loc_10146C9  +
mov ecx [edi+8] +
mov [ebp+var_4] 31h +
jmp loc_1014712  +
cmp ecx 3 +
jz loc_10146BD  +
cmp dword ptr [edx+14h] 3 +
jz loc_10146BD  +
cmp dword ptr [edx+28h] 3 +
jz loc_10146BD  +
mov ecx [edx+8] +
add [esi+14h] ecx +
add ecx [edi+8] +
mov edx [edx+10h] +
add edx [edi+10h] +
mov [ebp+arg_0] ecx +
mov ecx [ebp+arg_4] +
add [ecx+0Ch] edx +
jmp loc_1014715  +
cmp ecx 3 +
jnz loc_1014702  +
mov [ebp+var_4] 31h +
jmp loc_1014715  +
test ecx ecx +
jnz loc_101470F  +
mov [ebp+var_4] 1 +
jmp loc_1014715  +
mov ecx [esi+64h] +
mov [ebp+arg_0] ecx +
add ebx [ebp+arg_0] +
cmp [ebp+var_4] 0 +
jz loc_101466B  +
jmp loc_1013C35  +
push 3  +
mov edx edi +
mov ecx esi +
call sub_1011D2B  +
test eax eax +
jl loc_1013C66  +
mov ebx [edi+30h] +
add ebx [edi+1Ch] +
add ebx [edi+8] +
cmp dword ptr [edi] 0Fh +
jnz loc_1013B98  +
cmp dword ptr [edi+14h] 0Fh +
jnz loc_1013B98  +
cmp dword ptr [edi+28h] 6 +
jnz loc_1013B98  +
mov [ebp+var_4] 32h +
jmp loc_1013C35  +
mov [ebp+var_4] 1 +
mov eax 0C00000E5h +
jmp loc_1013B9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
push ebx  +
mov ebx [ebp+arg_0] +
xor ecx ecx +
cmp ebx ecx +
jz loc_10148B7  +
mov eax [ebx+14h] +
mov [ebp+var_4] eax +
jmp loc_10148BA  +
mov [ebp+var_4] ecx +
cmp ebx ecx +
jz loc_10148C3  +
mov eax [ebx+10h] +
jmp loc_10148C5  +
xor eax eax +
sub eax [ebp+var_4] +
mov [ebp+var_C] eax +
cmp ebx ecx +
jnz loc_10148E5  +
push ecx  +
push ecx  +
push 1366h  +
push 0C000000Dh  +
call sub_1016F35  +
jmp loc_1014A54  +
push esi  +
push edi  +
push 38h  +
xor eax eax +
pop ecx  +
mov esi ebx +
lea edi [ebp+var_104] +
movs   +
cmp [ebp+arg_4] eax +
jnz loc_101490C  +
push eax  +
push eax  +
push 136Bh  +
push 0C000000Dh  +
jmp loc_1014A67  +
mov edx offset dword_1006264 +
mov [ebp+var_8] eax +
mov ecx [edx] +
lea eax [edx-4] +
cmp [ebp+var_C] ecx +
jb loc_1014930  +
test ecx ecx +
jz loc_1014930  +
mov edi [eax] +
mov esi [ebp+var_4] +
xor ebx ebx +
cmps   +
mov ebx [ebp+arg_0] +
jz loc_101499B  +
add [ebp+var_8] 20h +
add edx 20h +
cmp [ebp+var_8] 100h +
jnz loc_1014914  +
mov esi offset off_1006260 +
mov eax [esi+0Ch] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov eax [esi+10h] +
mov ecx [esi+0Ch] +
add [ebp+var_F0] ecx +
xor edi edi +
mov [ebp+var_EC] eax +
mov [ebx+18h] eax +
inc edi  +
push edi  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
call sub_101396C  +
test eax eax +
jl loc_1014A50  +
cmp [ebp+var_14] 33h +
mov byte ptr [ebp+arg_0+3] 0 +
jnz loc_1014A52  +
cmp [ebp+var_10] 0 +
jnz loc_1014A52  +
jmp loc_1014A37  +
mov esi eax +
jmp loc_1014945  +
cmp [ebp+var_10] 0 +
jnz loc_1014A50  +
mov eax [ebp+var_14] +
cmp eax edi +
jz loc_1014A50  +
cmp eax 4 +
jz loc_1014A50  +
cmp eax 34h +
jz loc_1014A50  +
cmp eax 37h +
jnz loc_10149D1  +
mov byte ptr [ebp+arg_0+3] 1 +
jmp loc_1014A37  +
cmp eax 3Bh +
jnz loc_1014A37  +
cmp byte ptr [ebp+arg_0+3] 0 +
jz loc_1014A37  +
mov [ebp+arg_0] edi +
xor edi edi +
cmp [esi+14h] edi +
jz loc_1014A14  +
push offset loc_1013710  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [esi+18h] +
lea eax [eax+edi*8] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
call [ebp+var_3C]  +
test eax eax +
jl loc_1014A52  +
cmp [ebp+arg_0] 0 +
jz loc_1014A30  +
inc edi  +
cmp edi [esi+14h] +
jnz loc_10149E6  +
mov eax [ebx+0C4h] +
test eax eax +
jz loc_1014A59  +
lea ecx [ebp+var_24] +
call eax  +
test eax eax +
jz loc_1014A6E  +
mov [ebp+var_EC] eax +
mov [ebx+18h] eax +
xor edi edi +
mov byte ptr [ebp+arg_0+3] 0 +
inc edi  +
push edi  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
call sub_101396C  +
test eax eax +
jge loc_101499F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push 0  +
push 0  +
push 13DEh  +
push 0C0150021h  +
call sub_1016F35  +
jmp loc_1014A52  +
push 0  +
push 0  +
push 13E8h  +
jmp loc_1014A62  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 0E8h +
push eax  +
call sub_10169C1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_1014ABA  +
push 5D4h  +
push ebx  +
push esi  +
call memset  +
add esp 0Ch +
mov edi [ebp+arg_4] +
cmp edi ebx +
jnz loc_1014AD1  +
push ebx  +
push ebx  +
push 5Eh  +
push 0C000000Dh  +
call sub_1016F35  +
jmp loc_1014B33  +
cmp esi ebx +
jnz loc_1014ADB  +
push ebx  +
push ebx  +
push 61h  +
jmp loc_1014AC5  +
mov ecx [edi+28h] +
cmp ecx ebx +
jz loc_1014AEB  +
mov edx esi +
call sub_1013757  +
jmp loc_1014AF5  +
lea eax [edi+8] +
push eax  +
push esi  +
call sub_101362F  +
cmp eax ebx +
jl loc_1014B33  +
push dword ptr [edi+4]  +
lea eax [esi+114h] +
push 4C0h  +
push eax  +
push 28h  +
push 98h  +
lea eax [esi+0E8h] +
push eax  +
call sub_10167AB  +
cmp eax ebx +
jl loc_1014B33  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_101489A  +
cmp eax ebx +
jl loc_1014B33  +
mov ecx [ebp+arg_0] +
add [esi+14h] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_14] +
xor ebx ebx +
xor eax eax +
mov [esi] ebx +
stos   +
stos   +
stos   +
xor ecx ecx +
mov [ebp+var_8] ebx +
stos   +
cmp [ebp+arg_0] ebx +
jz loc_1014C79  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
cmp ecx 3 +
jz loc_1014B8D  +
cmp ecx 4 +
jz loc_1014B92  +
push ebx  +
push ebx  +
push 0B6h  +
push 0C000000Dh  +
call sub_1016F35  +
jmp loc_1014C7B  +
lea edi [eax+30h] +
jmp loc_1014B95  +
lea edi [eax+20h] +
lea eax [ebp+var_18] +
push eax  +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call sub_1016E6C  +
mov ecx eax +
cmp ecx ebx +
jl loc_1014C4F  +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp+arg_4] ebx +
jz loc_1014C2B  +
mov esi [ebp+arg_8] +
cmp dword ptr [esi] 3 +
jnz loc_1014C2B  +
mov [ebp+var_4] ebx +
cmp [esi+58h] ebx +
jbe loc_1014C2B  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
call sub_10168FA  +
mov ecx eax +
cmp ecx ebx +
jl loc_1014C79  +
mov eax [ebp+var_8] +
cmp [eax+14h] ebx +
jz loc_1014C20  +
cmp [eax+48h] bl +
jnz loc_1014C20  +
cmp [eax+49h] bl +
jnz loc_1014C20  +
lea ecx [ebp+var_18] +
push ecx  +
add eax 10h +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call sub_1016E6C  +
mov ecx eax +
cmp ecx ebx +
jl loc_1014C2F  +
mov edi [ebp+var_8] +
add edi 10h +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_8] +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [esi+58h] +
jb loc_1014BCB  +
xor ecx ecx +
jmp loc_1014C79  +
cmp ecx 0C0000225h +
jnz loc_1014C79  +
mov eax [ebp+arg_10] +
mov esi [ebp+var_8] +
push ebx  +
push ebx  +
mov dword ptr [eax] 0Ah +
add esi 10h +
push 0FBh  +
jmp loc_1014C66  +
cmp ecx 0C0000225h +
jnz loc_1014C79  +
push ebx  +
push ebx  +
mov dword ptr [esi] 0Ah +
mov esi edi +
push 0CDh  +
mov edi [ebp+arg_14] +
movs   +
movs   +
movs   +
push 0C000A083h  +
movs   +
call sub_1016F35  +
mov ecx eax +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
call sub_101351A  +
mov [ebp+var_4] eax +
test eax eax +
jl locret_1014FD7  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
inc edi  +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1014FBC  +
cmp byte ptr [esi+14h] 0 +
jnz loc_1014FBC  +
mov eax [esi+10h] +
cmp eax 68h +
jnz loc_1014CDA  +
mov [ebx+20h] edi +
jmp loc_1014CEA  +
cmp eax 69h +
jnz loc_1014FB0  +
mov dword ptr [ebx+20h] 2 +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1014FBC  +
cmp byte ptr [esi+14h] 0 +
jnz loc_1014FBC  +
cmp dword ptr [esi+10h] 67h +
jz loc_1014D18  +
mov dword ptr [ebx+38h] 15h +
jmp loc_1014FBC  +
lea edi [ebx+28h] +
movs   +
movs   +
push 1  +
push [ebp+arg_4]  +
movs   +
push [ebp+arg_0]  +
movs   +
call sub_101396C  +
test eax eax +
jl loc_1014FB9  +
mov eax [ebp+arg_4] +
cmp byte ptr [eax+14h] 0 +
jnz loc_1014FB9  +
mov eax [eax+10h] +
cmp eax 6Ah +
jnz loc_1014DBA  +
xor edi edi +
mov [ebp+var_8] edi +
lea esi [ebp+var_44] +
mov [ebp+var_4] edi +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1014D8C  +
cmp byte ptr [esi] 0 +
jnz loc_1014D8C  +
mov ecx [esi-4] +
mov edx [ebp+var_4] +
cmp ecx ds:dword_1006398[edx] +
jnz loc_1014D89  +
add [ebp+var_4] 0Ch +
inc [ebp+var_8]  +
add esi 18h +
cmp [ebp+var_4] 24h +
jnz loc_1014D54  +
mov edi [ebp+var_8] +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1014DA4  +
cmp edi 3 +
jnz loc_1014DA4  +
mov dword ptr [ebx+24h] 1 +
jmp loc_1014E31  +
and dword ptr [ebx] 0 +
imul edi edi +
lea esi [ebp+edi+var_58] +
mov dword ptr [ebx+38h] 16h +
jmp loc_1014FBF  +
cmp eax 6Eh +
jnz loc_1014F11  +
xor edi edi +
mov [ebp+var_8] edi +
lea esi [ebp+var_8C] +
mov [ebp+var_4] edi +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1014E09  +
cmp byte ptr [esi] 0 +
jnz loc_1014E09  +
mov ecx [esi-4] +
mov edx [ebp+var_4] +
cmp ecx ds:dword_10063C8[edx] +
jnz loc_1014E06  +
add [ebp+var_4] 0Ch +
inc [ebp+var_8]  +
add esi 18h +
cmp [ebp+var_4] 48h +
jnz loc_1014DD1  +
mov edi [ebp+var_8] +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1014EF1  +
cmp edi 6 +
jnz loc_1014EF1  +
lea edi [ebx+58h] +
lea esi [ebp+var_88] +
movs   +
movs   +
movs   +
mov dword ptr [ebx+24h] 2 +
movs   +
lea edi [ebx+48h] +
lea esi [ebp+var_40] +
movs   +
movs   +
movs   +
movs   +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1014FB9  +
mov eax [ebp+arg_4] +
cmp byte ptr [eax+14h] 0 +
jnz loc_1014FB9  +
cmp dword ptr [eax+10h] 72h +
jnz loc_1014F9B  +
xor edi edi +
mov [ebp+var_8] edi +
lea esi [ebp+var_14] +
mov [ebp+var_4] edi +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1014EAA  +
cmp byte ptr [esi] 0 +
jnz loc_1014EAA  +
mov ecx [esi-4] +
mov edx [ebp+var_4] +
cmp ecx ds:dword_10063BC[edx] +
jnz loc_1014EA7  +
add [ebp+var_4] 0Ch +
inc [ebp+var_8]  +
add esi 18h +
cmp [ebp+var_4] 0Ch +
jnz loc_1014E72  +
mov edi [ebp+var_8] +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1014F88  +
cmp edi 1 +
jnz loc_1014F88  +
lea edi [ebx+68h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
push [ebp+arg_4]  +
movs   +
push [ebp+arg_0]  +
movs   +
call sub_101396C  +
test eax eax +
jl loc_1014FB9  +
mov eax [ebp+arg_4] +
cmp byte ptr [eax+14h] 0 +
jz loc_1014F9B  +
mov esi eax +
jmp loc_1014FBC  +
and dword ptr [ebx] 0 +
imul edi edi +
lea esi [ebp+edi+var_A0] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 17h +
jmp loc_1014FD2  +
cmp eax 74h +
jnz loc_1014E3B  +
xor edi edi +
mov [ebp+var_8] edi +
lea esi [ebp+var_2C] +
mov [ebp+var_4] edi +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1014F5D  +
cmp byte ptr [esi] 0 +
jnz loc_1014F5D  +
mov ecx [esi-4] +
mov edx [ebp+var_4] +
cmp ecx ds:dword_1006410[edx] +
jnz loc_1014F5A  +
add [ebp+var_4] 0Ch +
inc [ebp+var_8]  +
add esi 18h +
cmp [ebp+var_4] 18h +
jnz loc_1014F25  +
mov edi [ebp+var_8] +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1014F75  +
cmp edi 2 +
jnz loc_1014F75  +
and dword ptr [ebx+24h] 0 +
lea edi [ebx+38h] +
jmp loc_1014E34  +
and dword ptr [ebx] 0 +
imul edi edi +
lea esi [ebp+edi+var_40] +
mov dword ptr [ebx+38h] 18h +
jmp loc_1014FBF  +
and dword ptr [ebx] 0 +
imul edi edi +
lea esi [ebp+edi+var_28] +
mov dword ptr [ebx+38h] 19h +
jmp loc_1014FBF  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+10h] 77h +
jz loc_1014FD2  +
mov dword ptr [ebx+38h] 1Ah +
jmp loc_1014EEA  +
mov dword ptr [ebx+38h] 1Bh +
jmp loc_1014FBC  +
mov esi [ebp+arg_4] +
and dword ptr [ebx] 0 +
mov eax [ebp+var_10] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov [ebx+30h] eax +
mov eax [ebp+var_C] +
mov [ebx+34h] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0DCh +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_10162CD  +
mov ebx [ebp+arg_8] +
cmp ebx edi +
jz loc_10162CD  +
mov eax [ebp+arg_C] +
cmp eax edi +
jz loc_101501F  +
cmp dword ptr [eax+8] 4Ch +
jnb loc_101501F  +
push edi  +
push edi  +
push 1E8h  +
jmp loc_10162D4  +
push 98h  +
push edi  +
push ebx  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call sub_101351A  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_101396C  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_10162BF  +
cmp [ebp+var_14] 0 +
jnz loc_10162DE  +
mov eax [ebp+var_28] +
mov [ebx+10h] eax +
mov eax [esi+0E4h] +
mov [ebx+4] eax +
mov eax [ebp+var_18] +
cmp eax 30h +
jle loc_10151EB  +
cmp eax 4Ch +
jg loc_1015F97  +
jz loc_1015FAA  +
cmp eax 33h +
jz loc_1015ED0  +
cmp eax 3Fh +
jle loc_1016285  +
cmp eax 41h +
jle loc_10150AC  +
cmp eax 44h +
jle loc_1016285  +
cmp eax 46h +
jg loc_1016285  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_101396C  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 66h +
jz loc_10150EA  +
cmp [ebp+var_18] 4Bh +
jz loc_1015116  +
cmp [ebp+var_18] 47h +
jz loc_10151CD  +
mov esi [ebp+arg_0] +
xor edi edi +
jmp loc_10150AC  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [ebx] 9 +
call sub_1014C87  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
jmp loc_10151CD  +
mov dword ptr [ebx] 0Ah +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 4Bh +
jz loc_101511C  +
cmp [ebp+var_18] 4Ch +
jnz loc_1015155  +
and dword ptr [ebx+24h] 0 +
and dword ptr [ebx+2Ch] 0 +
jmp loc_10151C3  +
cmp [ebp+var_18] 4Dh +
jnz loc_1015EC2  +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 4Eh +
jnz loc_1015EA6  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 4Ch +
jnz loc_1015EB4  +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx] +
cmp eax 9 +
jz loc_1016285  +
cmp eax 0Ah +
jz loc_1016285  +
mov esi [ebp+arg_0] +
xor edi edi +
jmp loc_101501F  +
jz loc_1015E12  +
dec eax  +
dec eax  +
jz loc_1015DAE  +
dec eax  +
dec eax  +
jz loc_1015D82  +
dec eax  +
jz loc_101556D  +
sub eax 1Dh +
jz loc_101535B  +
sub eax 6 +
jz loc_10152B6  +
sub eax 5 +
jnz loc_1016285  +
mov [ebp+var_10] eax +
mov [ebp+arg_4] eax +
lea edi [ebp+var_68] +
mov [ebp+arg_C] eax +
push 1  +
lea eax [edi-14h] +
push eax  +
push esi  +
call sub_101396C  +
test eax eax +
jl loc_1015268  +
cmp byte ptr [edi] 0 +
jnz loc_1015268  +
mov ecx [edi-4] +
mov edx [ebp+arg_C] +
cmp ecx ds:dword_1006428[edx] +
jnz loc_1015262  +
inc [ebp+arg_4]  +
add [ebp+arg_C] 0Ch +
add edi 18h +
cmp [ebp+arg_C] 18h +
jnz loc_101522F  +
mov ecx [ebp+arg_4] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015283  +
cmp [ebp+var_10] 2 +
jnz loc_1015283  +
mov dword ptr [ebx] 0Dh +
lea esi [ebp+var_7C] +
jmp loc_101534F  +
mov eax [ebp+var_10] +
and dword ptr [ebx] 0 +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_7C] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100642C[eax] +
mov [ebx+38h] eax +
mov eax [ebp+var_8] +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
jmp loc_1016285  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_101396C  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1015342  +
cmp [ebp+var_14] 0 +
jnz loc_1015342  +
cmp [ebp+var_18] 2Ah +
jnz loc_1015342  +
mov eax [ebp+var_8] +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
mov [ebx+40h] eax +
mov eax [ebp+var_4] +
mov dword ptr [ebx] 5 +
movs   +
mov [ebx+44h] eax +
jmp loc_101531B  +
cmp [ebp+var_14] 0 +
jnz loc_1015330  +
cmp [ebp+var_18] 2Bh +
jnz loc_101530B  +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
jmp loc_101531B  +
cmp [ebp+var_18] 29h +
jz loc_1016285  +
cmp [ebp+var_18] 4 +
jz loc_1015339  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jge loc_10152F3  +
mov dword ptr [ebx+38h] 10h +
jmp loc_1015349  +
mov dword ptr [ebx+38h] 11h +
jmp loc_1015349  +
mov dword ptr [ebx+38h] 12h +
and dword ptr [ebx] 0 +
lea esi [ebp+var_28] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
jmp loc_10152A5  +
push edi  +
lea eax [esi+0E4h] +
dec dword ptr [eax]  +
mov eax [eax] +
lea ecx [ebp+arg_C] +
push ecx  +
push eax  +
lea eax [esi+0E8h] +
push eax  +
mov [ebp+arg_C] edi +
call sub_10168FA  +
cmp eax edi +
jl loc_10162DE  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_101396C  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1015554  +
cmp [ebp+var_14] 0 +
jnz loc_1015554  +
cmp [ebp+var_18] 23h +
jz loc_10153B3  +
cmp [ebp+var_18] 26h +
jnz loc_1015554  +
cmp [ebp+var_18] 26h +
jnz loc_1015428  +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+40h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_101540F  +
cmp [ebp+var_14] 0 +
jnz loc_101540F  +
cmp [ebp+var_18] 27h +
jnz loc_101540F  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_101540F  +
cmp [ebp+var_14] 0 +
jnz loc_101540F  +
cmp [ebp+var_18] 23h +
jz loc_1015428  +
and dword ptr [ebx] 0 +
lea esi [ebp+var_28] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 7 +
jmp loc_10152A5  +
mov eax [ebp+var_8] +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_C] +
push 10h  +
add esi 20h +
lea edi [ebx+58h] +
pop ecx  +
movs   +
dec dword ptr [ebx+4]  +
mov [ebx+50h] eax +
mov eax [ebp+var_4] +
mov [ebx+54h] eax +
mov dword ptr [ebx] 4 +
jmp loc_1015469  +
cmp [ebp+var_14] 0 +
jnz loc_101547E  +
cmp [ebp+var_18] 4 +
jz loc_101547E  +
cmp [ebp+var_18] 25h +
jz loc_1015497  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jge loc_1015457  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 6 +
jmp loc_10152A5  +
cmp [ebp+arg_4] 0 +
jz loc_10154F3  +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
mov eax [ebp+arg_C] +
mov eax [eax+4] +
inc eax  +
push eax  +
push ebx  +
push 0  +
push [ebp+arg_4]  +
call sub_1014B3F  +
mov [ebp+arg_8] eax +
cmp eax 0C000A083h +
jnz loc_10154D0  +
mov eax [ebp+var_2C] +
lea esi [ebp+var_3C] +
mov [ebx+38h] eax +
jmp loc_1015DE8  +
test eax eax +
jl loc_1016285  +
mov eax [ebp+arg_C] +
mov eax [eax+4] +
inc eax  +
push eax  +
push [ebp+arg_4]  +
call sub_1016DAE  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebx+30h] +
push eax  +
lea eax [ebx+58h] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword ptr [eax+0C0h]  +
cmp [ebp+arg_4] 0 +
mov [ebp+arg_8] eax +
jnz loc_1015533  +
test eax eax +
jl loc_1016285  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebx+40h] +
push eax  +
lea eax [ebx+78h] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword ptr [eax+0C0h]  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+arg_4] 0 +
jz loc_1016285  +
lea esi [ebx+10h] +
mov dword ptr [ebx+38h] 1Ch +
jmp loc_1015DE8  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 8 +
jmp loc_10152A5  +
mov al [esi+0E0h] +
test al al +
jz loc_1015583  +
cmp [esi+0E4h] edi +
jz loc_1015DDE  +
mov [ebp+var_C] edi +
mov [ebp+var_2C] edi +
test al al +
jnz loc_1015594  +
mov byte ptr [esi+0E0h] 1 +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_101396C  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_101562B  +
cmp [ebp+var_14] 0 +
jnz loc_101562B  +
cmp [ebp+var_18] 6 +
jz loc_10155BD  +
cmp [ebp+var_18] 16h +
jnz loc_101562B  +
cmp [ebp+var_18] 16h +
mov eax [ebp+var_8] +
mov [ebx+50h] eax +
mov eax [ebp+var_4] +
mov dword ptr [ebx] 3 +
mov [ebx+54h] eax +
jnz loc_1015643  +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+40h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015637  +
cmp [ebp+var_14] 0 +
jnz loc_1015637  +
cmp [ebp+var_18] 17h +
jnz loc_1015637  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_101562B  +
cmp [ebp+var_14] 0 +
jnz loc_101562B  +
cmp [ebp+var_18] 6 +
jz loc_1015643  +
mov dword ptr [ebx+38h] 4 +
jmp loc_1015349  +
mov dword ptr [ebx+38h] 5 +
jmp loc_1015349  +
mov eax [ebp+var_8] +
and dword ptr [ebx+58h] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
mov [ebp+var_34] eax +
mov eax [ebp+var_4] +
movs   +
mov [ebp+var_30] eax +
cmp [ebp+arg_8] 0 +
jl loc_1015693  +
push 0  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015693  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
call sub_101351A  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_1013575  +
mov [ebp+arg_8] eax +
mov eax [ebp+var_18] +
cmp eax 1Ah +
jz loc_1015CAF  +
cmp eax 1Bh +
jz loc_1015CAF  +
cmp eax 4 +
jz loc_1015CAF  +
cmp [ebp+var_14] 0 +
jnz loc_1015CAF  +
xor edi edi +
cmp [ebp+arg_8] edi +
jl loc_1015CAF  +
sub eax 7 +
jz loc_10159E7  +
dec eax  +
jz loc_1015902  +
sub eax 7 +
jz loc_101583C  +
sub eax 9 +
jz loc_101577F  +
sub eax 4 +
jnz loc_101565D  +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_98] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1015733  +
cmp byte ptr [esi] 0 +
jnz loc_1015733  +
mov ecx [esi-4] +
cmp ecx ds:dword_1006560[edi] +
jnz loc_101572D  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 30h +
jnz loc_10156FD  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015AFE  +
cmp [ebp+var_10] 4 +
jnz loc_1015B1F  +
cmp [ebp+arg_C] 0 +
jz loc_1015AF6  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_10168FA  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_10162DE  +
push 4Ch  +
push 0  +
push [ebp+var_C]  +
call memset  +
jmp loc_10159C8  +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_C8] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_10157C1  +
cmp byte ptr [esi] 0 +
jnz loc_10157C1  +
mov ecx [esi-4] +
cmp ecx ds:dword_10064D0[edi] +
jnz loc_10157BB  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 48h +
jnz loc_101578B  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015B52  +
cmp [ebp+var_10] 6 +
jnz loc_1015B73  +
cmp [ebp+arg_C] 0 +
jz loc_1015AF6  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_10168FA  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_10162DE  +
mov edi [ebp+var_C] +
lea esi [ebp+var_C4] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 10h +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 30h +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 20h +
lea esi [ebp+var_7C] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_C] +
mov byte ptr [eax+48h] 0 +
jmp loc_1015ADD  +
xor edi edi +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_C8] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1015880  +
cmp byte ptr [esi] 0 +
jnz loc_1015880  +
mov ecx [esi-4] +
cmp ecx ds:dword_1006518[edi] +
jnz loc_101587A  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 48h +
jnz loc_101584A  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015BA6  +
cmp [ebp+var_10] 6 +
jnz loc_1015BC4  +
cmp [ebp+arg_C] 0 +
jz loc_1015AF6  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_10168FA  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_10162DE  +
mov edi [ebp+var_C] +
lea esi [ebp+var_C4] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 10h +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 30h +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 20h +
lea esi [ebp+var_7C] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_C] +
mov byte ptr [eax+48h] 0 +
mov eax [ebp+var_C] +
mov byte ptr [eax+49h] 1 +
jmp loc_1015AE4  +
xor edi edi +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_98] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1015946  +
cmp byte ptr [esi] 0 +
jnz loc_1015946  +
mov ecx [esi-4] +
cmp ecx ds:dword_1006458[edi] +
jnz loc_1015940  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 30h +
jnz loc_1015910  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015BF4  +
cmp [ebp+var_10] 4 +
jnz loc_1015C23  +
cmp [ebp+arg_4] 0 +
jz loc_1015988  +
lea eax [ebp+var_7C] +
push eax  +
mov eax [ebx+4] +
inc eax  +
push eax  +
push [ebp+arg_4]  +
call sub_1016C3A  +
mov [ebp+arg_8] eax +
cmp eax 0C00000BDh +
jz loc_1015C59  +
test eax eax +
jl loc_10162DE  +
cmp [ebp+arg_C] 0 +
jz loc_1015AF6  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_10168FA  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_10162DE  +
push 4Ch  +
push 0  +
push [ebp+var_C]  +
call memset  +
mov eax [ebp+var_C] +
mov byte ptr [eax+48h] 1 +
mov eax [ebp+var_C] +
mov byte ptr [eax+49h] 0 +
mov edi [ebp+var_C] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add esp 0Ch +
add edi 20h +
lea esi [ebp+var_7C] +
movs   +
movs   +
movs   +
movs   +
jmp loc_1015AE4  +
lea esi [ebp+var_28] +
lea edi [ebp+var_4C] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
mov [ebp+var_10] edi +
mov [ebp+arg_8] edi +
lea esi [ebp+var_C8] +
push 1  +
lea eax [esi-14h] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
jl loc_1015A35  +
cmp byte ptr [esi] 0 +
jnz loc_1015A35  +
mov ecx [esi-4] +
cmp ecx ds:dword_1006488[edi] +
jnz loc_1015A2F  +
inc [ebp+arg_8]  +
add edi 0Ch +
add esi 18h +
cmp edi 48h +
jnz loc_10159FF  +
mov ecx [ebp+arg_8] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015C68  +
cmp [ebp+var_10] 6 +
jnz loc_1015C6D  +
cmp [ebp+arg_4] 0 +
jz loc_1015A7E  +
lea eax [ebp+var_C4] +
push eax  +
lea eax [ebp+var_7C] +
push eax  +
mov eax [ebx+4] +
inc eax  +
push eax  +
push [ebp+arg_4]  +
call sub_1016AC8  +
mov [ebp+arg_8] eax +
cmp eax 0C00000BDh +
jz loc_1015C9D  +
test eax eax +
jl loc_10162DE  +
cmp [ebp+arg_C] 0 +
jz loc_1015AF6  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword ptr [ebx+58h]  +
push [ebp+arg_C]  +
call sub_10168FA  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_10162DE  +
push 4Ch  +
push 0  +
push [ebp+var_C]  +
call memset  +
mov edi [ebp+var_C] +
lea esi [ebp+var_C4] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add edi 30h +
lea esi [ebp+var_4C] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_C] +
add esp 0Ch +
add edi 20h +
lea esi [ebp+var_7C] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_C] +
mov byte ptr [eax+48h] 1 +
mov eax [ebp+var_C] +
mov byte ptr [eax+49h] 0 +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
mov [ecx+40h] eax +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
mov [ecx+44h] eax +
inc dword ptr [ebx+58h]  +
jmp loc_101565D  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
imul eax eax +
lea esi [ebp+eax+var_AC] +
jmp loc_1015C10  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_AC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_1006564[eax] +
jmp loc_1015C51  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
imul eax eax +
lea esi [ebp+eax+var_DC] +
jmp loc_1015C10  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_DC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_10064D4[eax] +
jmp loc_1015C51  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
imul eax eax +
lea esi [ebp+eax+var_DC] +
jmp loc_1015C10  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_DC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100651C[eax] +
jmp loc_1015C51  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
imul eax eax +
lea esi [ebp+eax+var_AC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 0Bh +
jmp loc_1016285  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_AC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100645C[eax] +
mov [ebx+38h] eax +
jmp loc_1016285  +
lea esi [ebp+var_7C] +
mov dword ptr [ebx+38h] 1Fh +
jmp loc_1015DE8  +
and dword ptr [ebx] 0 +
jmp loc_1015C17  +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
mov eax [ebp+var_10] +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_DC] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_100648C[eax] +
jmp loc_1015C51  +
mov dword ptr [ebx+38h] 1Eh +
lea esi [ebp+var_C4] +
jmp loc_1015DE8  +
cmp [ebp+var_14] 0 +
mov eax [ebp+var_34] +
mov [ebp+var_8] eax +
mov eax [ebp+var_30] +
mov [ebp+var_4] eax +
jnz loc_1016285  +
cmp [ebp+arg_8] 0 +
jl loc_1016285  +
xor esi esi +
mov [ebp+var_10] esi +
cmp [ebp+arg_4] esi +
jz loc_1015CF5  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebx+4] +
inc eax  +
push eax  +
push ebx  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
call sub_1014B3F  +
mov [ebp+arg_8] eax +
mov eax [ebp+arg_8] +
cmp eax 0C000A083h +
jnz loc_1015D0D  +
mov eax [ebp+var_10] +
mov [ebx+38h] eax +
lea esi [ebp+var_4C] +
jmp loc_1015DE8  +
cmp eax esi +
jl loc_10162DE  +
cmp [ebp+var_18] 1Bh +
jnz loc_1015D48  +
mov byte ptr [ebx+5Ch] 1 +
cmp [ebp+arg_4] esi +
jz loc_1016285  +
mov eax [ebx+4] +
inc eax  +
push eax  +
push [ebp+arg_4]  +
call sub_1016DAE  +
mov [ebp+arg_8] eax +
test eax eax +
jge loc_1016285  +
mov eax [ebp+arg_8] +
jmp loc_10162DE  +
push 1  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [ebx+4]  +
mov eax [ebp+arg_0] +
add eax 0E8h +
push eax  +
call sub_10168FA  +
cmp eax esi +
mov [ebp+arg_8] eax +
jl loc_10162DE  +
mov eax [ebp+arg_0] +
mov edi [ebp+var_2C] +
inc dword ptr [eax+0E4h]  +
push 26h  +
pop ecx  +
mov esi ebx +
movs   +
jmp loc_1016285  +
cmp [esi+0E4h] edi +
jnz loc_1015D95  +
mov dword ptr [ebx] 1 +
jmp loc_1016285  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 9 +
jmp loc_10152A5  +
cmp byte ptr [esi+0E0h] 0 +
jz loc_1015E07  +
cmp [esi+0E4h] edi +
jnz loc_1015E07  +
lea eax [ebp+arg_C+3] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_10138AF  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_1016285  +
cmp byte ptr [ebp+arg_C+3] 0 +
jnz loc_1015E07  +
mov dword ptr [ebx+38h] 1Dh +
lea esi [ebp+var_28] +
mov eax [ebp+var_8] +
and dword ptr [ebx] 0 +
and [ebp+arg_8] 0 +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
mov [ebx+30h] eax +
mov eax [ebp+var_4] +
mov [ebx+34h] eax +
movs   +
jmp loc_1016285  +
mov dword ptr [ebx] 7 +
jmp loc_101534C  +
cmp byte ptr [esi+0E0h] 0 +
jz loc_1015E23  +
cmp [esi+0E4h] edi +
jz loc_1015DDE  +
xor eax eax +
mov [ebp+var_10] eax +
mov [ebp+arg_4] eax +
lea edi [ebp+var_68] +
mov [ebp+arg_C] eax +
push 1  +
lea eax [edi-14h] +
push eax  +
push esi  +
call sub_101396C  +
test eax eax +
jl loc_1015E6A  +
cmp byte ptr [edi] 0 +
jnz loc_1015E6A  +
mov ecx [edi-4] +
mov edx [ebp+arg_C] +
cmp ecx ds:dword_1006440[edx] +
jnz loc_1015E64  +
inc [ebp+arg_4]  +
add [ebp+arg_C] 0Ch +
add edi 18h +
cmp [ebp+arg_C] 18h +
jnz loc_1015E31  +
mov ecx [ebp+arg_4] +
mov [ebp+var_10] ecx +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015E82  +
cmp [ebp+var_10] 2 +
jnz loc_1015E82  +
mov dword ptr [ebx] 8 +
jmp loc_101527B  +
mov eax [ebp+var_10] +
and dword ptr [ebx] 0 +
mov ecx eax +
imul ecx ecx +
imul eax eax +
lea esi [ebp+ecx+var_7C] +
lea edi [ebx+20h] +
movs   +
movs   +
movs   +
movs   +
mov eax ds:dword_1006444[eax] +
jmp loc_10152A2  +
push 0  +
push 0  +
push 23Bh  +
jmp loc_1016278  +
push 0  +
push 0  +
push 246h  +
jmp loc_1016278  +
push 0  +
push 0  +
push 24Eh  +
jmp loc_1016278  +
cmp byte ptr [esi+0E0h] 0 +
mov eax [ebp+var_8] +
jz loc_1015EF5  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 14h +
movs   +
jmp loc_10152A8  +
mov [ebx+50h] eax +
mov eax [ebp+var_4] +
mov [ebx+54h] eax +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
mov dword ptr [ebx] 2 +
call sub_101396C  +
cmp eax edi +
jmp loc_1015F6B  +
cmp [ebp+var_14] 0 +
mov eax [ebp+var_18] +
jnz loc_1015F75  +
cmp eax 4 +
jz loc_1015F75  +
cmp eax 34h +
jz loc_1016285  +
cmp eax 1 +
jz loc_1015F75  +
sub eax 37h +
jz loc_1015F58  +
dec eax  +
jz loc_1015F53  +
dec eax  +
jz loc_1015F4E  +
dec eax  +
dec eax  +
jnz loc_1015F5B  +
test edi edi +
jz loc_1015F5B  +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
jmp loc_1015F5B  +
lea edi [ebx+30h] +
jmp loc_1015F5B  +
lea edi [ebx+40h] +
jmp loc_1015F5B  +
lea edi [ebx+20h] +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
test eax eax +
mov [ebp+arg_8] eax +
jge loc_1015F14  +
jmp loc_10162DE  +
cmp eax 34h +
jz loc_1016285  +
and dword ptr [ebx] 0 +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebx+38h] 13h +
jmp loc_10152A5  +
cmp eax 4Fh +
jz loc_1015FAA  +
cmp eax 65h +
jnz loc_1016285  +
jmp loc_1015FD7  +
mov esi [ebp+arg_0] +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push esi  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 4Fh +
jz loc_1015FA7  +
cmp [ebp+var_18] 65h +
jnz loc_1015FE2  +
mov dword ptr [ebx] 0Ch +
jmp loc_1016285  +
and dword ptr [ebx+2Ch] 0 +
and dword ptr [ebx+24h] 0 +
cmp [ebp+var_18] 51h +
jnz loc_1016054  +
lea edi [ebx+20h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 52h +
jz loc_1016031  +
push 0  +
push 0  +
push 281h  +
jmp loc_1016278  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 50h +
jz loc_1016068  +
push 0  +
push 0  +
push 28Dh  +
jmp loc_1016278  +
lea edi [ebx+30h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [ebx] 0Bh +
movs   +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
mov eax [ebp+var_18] +
add eax 0FFFFFFADh +
cmp eax 0Bh +
ja loc_101626F  +
jmp ds:off_10162E8[eax*4]  +
and dword ptr [ebx+40h] 0 +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
mov eax [ebp+var_18] +
sub eax 5Fh +
mov dword ptr [ebx+54h] 3 +
jz loc_1016269  +
dec eax  +
jz loc_1016260  +
dec eax  +
jz loc_10161F8  +
dec eax  +
jz loc_101621A  +
push 0  +
push 0  +
push 318h  +
jmp loc_1016278  +
mov dword ptr [ebx+40h] 1 +
jmp loc_10160B5  +
mov dword ptr [ebx+40h] 2 +
jmp loc_10160B5  +
mov dword ptr [ebx+40h] 3 +
jmp loc_10160B5  +
mov dword ptr [ebx+40h] 4 +
jmp loc_10160B5  +
mov dword ptr [ebx+40h] 5 +
jmp loc_10160B5  +
mov dword ptr [ebx+40h] 6 +
jmp loc_10160B5  +
mov dword ptr [ebx+40h] 7 +
jmp loc_10160B5  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 5Ch +
jnz loc_1016156  +
mov dword ptr [ebx+40h] 9 +
lea edi [ebx+44h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jz loc_10160B5  +
jmp loc_1016285  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 5Ch +
jz loc_10161EF  +
push 0  +
push 0  +
push 2D6h  +
jmp loc_1016278  +
mov dword ptr [ebx+40h] 8 +
jmp loc_1016186  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [ebx+54h] 2 +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+arg_0]  +
call sub_101396C  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1016285  +
cmp [ebp+var_14] 0 +
jnz loc_1016285  +
cmp [ebp+var_18] 63h +
jz loc_1016246  +
push 0  +
push 0  +
push 30Ah  +
jmp loc_1016278  +
lea edi [ebx+58h] +
lea esi [ebp+var_28] +
movs   +
movs   +
push 1  +
lea eax [ebp+var_28] +
movs   +
push eax  +
push [ebp+arg_0]  +
movs   +
call sub_101396C  +
jmp loc_1016282  +
mov dword ptr [ebx+54h] 1 +
jmp loc_1016285  +
and dword ptr [ebx+54h] 0 +
jmp loc_1016285  +
push 0  +
push 0  +
push 2E5h  +
push 0C000A083h  +
call sub_1016F35  +
mov [ebp+arg_8] eax +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
sub eax [ebx+10h] +
cmp [ebp+var_14] 0 +
mov [ebx+14h] eax +
jz loc_1015D40  +
xor eax eax +
cmp [ebp+arg_8] eax +
jl loc_1015D40  +
push eax  +
push eax  +
push 761h  +
push 0C000A083h  +
call sub_1016F35  +
mov [ebp+arg_8] eax +
jmp loc_1015D40  +
push edi  +
push edi  +
push 1F4h  +
push 0C000A083h  +
jmp loc_10162D9  +
push edi  +
push edi  +
push 1E1h  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor edx edx +
lea esi [eax-30h] +
mov [ecx] edx +
cmp esi 9 +
ja loc_1016338  +
add eax 0FFFFFFD0h +
mov [ecx] eax +
xor eax eax +
jmp loc_1016368  +
cmp [ebp+arg_0] dl +
jz loc_1016357  +
lea esi [eax-61h] +
cmp esi 5 +
ja loc_101634A  +
add eax 0FFFFFFA9h +
jmp loc_1016332  +
lea esi [eax-41h] +
cmp esi 5 +
ja loc_1016357  +
add eax 0FFFFFFC9h +
jmp loc_1016332  +
push edx  +
push edx  +
push 783h  +
push 0C000A083h  +
call sub_1016F35  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_0] +
push esi  +
xor esi esi +
mov [eax] esi +
mov byte ptr [ebp+var_5] 0 +
mov [ebp+var_1] 0 +
mov [ebp+var_C] esi +
mov [ebx] esi +
call dword ptr [edi+18h]  +
mov [ebp+var_14] edx +
cmp eax 0FFFFFFFFh +
jnz loc_10163A4  +
mov eax edx +
jmp loc_101646D  +
cmp eax 78h +
jnz loc_10163AF  +
mov byte ptr [ebp+var_5] 1 +
jmp loc_10163C8  +
push 0  +
lea ecx [ebp+var_C] +
call sub_101631D  +
test eax eax +
jl loc_101646D  +
mov esi [ebp+var_C] +
mov [ebp+var_1] 1 +
xor eax eax +
cmp byte ptr [ebp+var_5] al +
setz al  +
dec eax  +
and eax 6 +
add eax 0Ah +
mov [ebp+var_C] eax +
mov edx [ebp+arg_0] +
mov ecx [ebp+var_14] +
call dword ptr [edi+18h]  +
mov [ebp+var_18] eax +
mov [ebp+var_14] edx +
cmp eax 0FFFFFFFFh +
jz loc_101639D  +
cmp eax 3Bh +
jz loc_1016425  +
push [ebp+var_5]  +
lea ecx [ebp+var_10] +
call sub_101631D  +
test eax eax +
jl loc_101646D  +
or eax 0FFFFFFFFh +
xor edx edx +
div  [ebp+var_C] +
mov [ebp+var_1] 1 +
cmp esi eax +
ja loc_1016441  +
mov eax [ebp+var_C] +
imul esi eax +
or eax 0FFFFFFFFh +
sub eax [ebp+var_10] +
cmp esi eax +
ja loc_1016456  +
add esi [ebp+var_10] +
cmp [ebp+var_18] 3Bh +
jnz loc_10163DA  +
cmp [ebp+var_1] 0 +
jnz loc_1016461  +
push 0  +
push 0  +
push 7D9h  +
push 0C000A083h  +
jmp loc_101644F  +
push 0  +
push 0  +
push 7C8h  +
push 0C0000095h  +
call sub_1016F35  +
jmp loc_101646D  +
push 0  +
push 0  +
push 7CEh  +
jmp loc_101644A  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_14] +
mov [eax] ecx +
mov [ebx] esi +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_101D040 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
mov [ebp+var_10] eax +
mov eax 1010101h +
lea edi [ebp+var_C] +
stos   +
stos   +
xor edi edi +
mov [ebx] edi +
mov [ebp+var_18] edx +
mov [edx] edi +
mov edx [ebp+var_10] +
call dword ptr [esi+18h]  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jnz loc_10164BB  +
mov eax ecx +
jmp loc_1016599  +
cmp eax 26h +
jz loc_10164D1  +
push edi  +
push edi  +
push 814h  +
push 0C00000E5h  +
jmp loc_1016594  +
mov edx [ebp+var_10] +
mov edi ecx +
call dword ptr [esi+18h]  +
cmp eax 0FFFFFFFFh +
jnz loc_10164E5  +
mov eax edx +
jmp loc_1016599  +
cmp eax 23h +
jnz loc_10164FF  +
push ebx  +
push [ebp+var_10]  +
mov ebx [ebp+var_18] +
mov ecx edx +
mov edi esi +
call sub_1016372  +
jmp loc_1016599  +
and [ebp+var_14] 0 +
mov edx [ebp+var_10] +
mov ecx edi +
call dword ptr [esi+18h]  +
mov [ebp+var_24] eax +
mov [ebp+var_20] edx +
cmp eax 0FFFFFFFFh +
jz loc_10164DE  +
cmp eax 3Bh +
jz loc_1016554  +
xor edx edx +
lea ecx [ebp+edx+var_C] +
cmp byte ptr [ecx] 0 +
jz loc_101654E  +
mov edi [ebp+var_14] +
mov eax ds:off_1006590[edx*8] +
movzx eax word ptr [edi+eax] +
movzx edi ax +
mov [ebp+var_1C] eax +
mov eax [ebp+var_24] +
cmp eax edi +
jz loc_1016544  +
mov byte ptr [ecx] 0 +
cmp word ptr [ebp+var_1C] 0 +
jnz loc_101654E  +
mov byte ptr [ecx] 0 +
inc edx  +
cmp edx 5 +
jb loc_101651D  +
add [ebp+var_14] 2 +
mov edi [ebp+var_20] +
cmp eax 3Bh +
jnz loc_1016503  +
xor ecx ecx +
cmp byte ptr [ebp+ecx+var_C] 0 +
jnz loc_101656F  +
inc ecx  +
cmp ecx 5 +
jb loc_1016562  +
cmp ecx 5 +
jnb loc_1016586  +
mov [ebx] edi +
mov eax ds:dword_1006594[ecx*8] +
mov ecx [ebp+var_18] +
mov [ecx] eax +
xor eax eax +
jmp loc_1016599  +
push 0  +
push 0  +
push 85Ah  +
push 0C000A083h  +
call sub_1016F35  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100C515  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [ebp+arg_C] +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_8] esi +
cmp ecx esi +
jz loc_10165CA  +
xor eax eax +
mov [ecx] ax +
mov edx [ebp+arg_10] +
cmp edx esi +
jz loc_10165D3  +
mov [edx] esi +
cmp [ebp+arg_4] esi +
jz loc_101670C  +
mov eax [ebp+arg_8] +
cmp eax esi +
jz loc_101670C  +
cmp edx esi +
jz loc_101670C  +
cmp ecx esi +
jz loc_101670C  +
mov esi [eax] +
mov edi [eax+4] +
movzx ebx word ptr [ecx+2] +
mov al byte ptr [ebp+arg_0] +
mov [ebp+var_4] esi +
add edi esi +
mov esi [ecx+4] +
and al 1 +
add ebx esi +
mov [ebp+var_C] esi +
mov byte ptr [ebp+arg_8+3] al +
cmp [ebp+var_4] edi +
jnb loc_10166C6  +
mov ecx [ebp+var_4] +
mov eax [ebp+arg_4] +
mov edx edi +
call dword ptr [eax+18h]  +
cmp eax 0FFFFFFFFh +
jz loc_10166EA  +
cmp eax 26h +
jnz loc_1016660  +
cmp byte ptr [ebp+arg_8+3] 0 +
jz loc_1016660  +
mov ecx [ebp+var_4] +
mov esi [ebp+arg_4] +
lea eax [ebp+var_4] +
push eax  +
push edi  +
lea edx [ebp+arg_0] +
call sub_1016477  +
test eax eax +
jl loc_101671D  +
mov eax [ebp+arg_0] +
mov esi [ebp+var_C] +
jmp loc_1016666  +
mov [ebp+var_4] edx +
mov [ebp+arg_0] eax +
cmp eax 10000h +
jnb loc_101667F  +
cmp esi ebx +
jnb loc_1016679  +
mov [esi] ax +
inc esi  +
inc esi  +
mov [ebp+var_C] esi +
add [ebp+var_8] 2 +
jmp loc_10166B7  +
cmp eax 110000h +
jnb loc_10166EE  +
lea ecx [ebx+4] +
cmp ecx ebx +
ja loc_10166B3  +
lea ecx [eax-10000h] +
shr ecx 0Ah +
and eax 3FFh +
sub ecx 2800h +
sub eax 2400h +
mov [esi] cx +
mov [esi+2] ax +
add esi 4 +
mov [ebp+var_C] esi +
add [ebp+var_8] 4 +
cmp [ebp+var_4] edi +
jb loc_101661E  +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_10] +
mov eax [ebp+var_8] +
mov [edx] eax +
movzx edx word ptr [ecx+2] +
cmp eax edx +
ja loc_1016705  +
cmp eax 0FFFFh +
jbe loc_10166FE  +
push 0  +
push 0  +
push 96Eh  +
push 0C0000095h  +
jmp loc_1016718  +
mov eax edx +
jmp loc_101671D  +
push 0  +
push 0  +
push 964h  +
push 0C0000161h  +
jmp loc_1016718  +
mov [ecx] ax +
xor eax eax +
jmp loc_101671D  +
mov eax 0C0000023h +
jmp loc_101671D  +
push esi  +
push esi  +
push 928h  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_101673C  +
mov [esi] ebx +
mov edi [ebp+arg_C] +
cmp edi ebx +
jz loc_1016745  +
mov [edi] ebx +
cmp esi ebx +
jz loc_1016791  +
mov ecx [ebp+arg_0] +
cmp ecx ebx +
jz loc_1016791  +
mov eax [ecx+10h] +
mov edx [ebp+arg_4] +
cmp edx eax +
jb loc_1016791  +
sub edx eax +
mov eax [ecx+24h] +
mov ecx [ecx+0Ch] +
jmp loc_101676D  +
cmp eax ebx +
jz loc_1016771  +
mov eax [eax+4] +
sub edx ecx +
cmp edx ecx +
jnb loc_1016764  +
cmp edx ecx +
jnb loc_1016777  +
mov [esi] eax +
cmp edi ebx +
jz loc_1016781  +
cmp [esi] ebx +
jz loc_1016781  +
mov [edi] edx +
neg eax  +
sbb eax eax +
and eax 3FFFFDDBh +
add eax 0C0000225h +
jmp loc_101679F  +
push ebx  +
push ebx  +
push 33h  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
push esi  +
push edi  +
cmp ebx eax +
jz loc_1016801  +
mov edi [ebp+arg_8] +
cmp edi eax +
jz loc_1016801  +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_1016801  +
push 2Ch  +
push eax  +
push ebx  +
call memset  +
mov eax [ebp+arg_C] +
mov [ebx+8] esi +
mov esi [ebp+arg_14] +
mov [ebx+0Ch] edi +
lea edi [ebx+18h] +
movs   +
movs   +
add esp 0Ch +
movs   +
test eax eax +
jz loc_10167FD  +
mov [ebx+14h] eax +
mov eax [ebp+arg_10] +
xor edx edx +
div  [ebp+arg_4] +
mov [ebx+10h] eax +
mov [ebx+4] eax +
xor eax eax +
jmp loc_101680F  +
push eax  +
push eax  +
push 6Ch  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
push edi  +
cmp esi eax +
jz loc_10168DD  +
cmp [esi+18h] eax +
jz loc_10168DD  +
mov ecx [esi+4] +
mov eax [ebp+arg_4] +
cmp ecx eax +
jbe loc_101684A  +
xor eax eax +
jmp loc_10168EE  +
mov ebx [esi+0Ch] +
sub eax ecx +
xor edx edx +
div  ebx +
mov ecx [esi+8] +
mov edi eax +
inc edi  +
test ecx ecx +
jz loc_1016878  +
push 0FFFFFFF7h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax ebx +
jnb loc_1016878  +
push 0  +
push 0  +
push 0CFh  +
push 0C0000095h  +
jmp loc_10168E9  +
imul ecx ebx +
add ecx 8 +
mov ebx ecx +
jmp loc_10168C4  +
push dword ptr [esi+20h]  +
and [ebp+arg_0] 0 +
lea edx [ebp+arg_0] +
mov ecx ebx +
dec edi  +
call dword ptr [esi+18h]  +
test eax eax +
jl loc_10168CD  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov eax [ebp+arg_0] +
and dword ptr [eax+4] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_10168AF  +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov ecx [esi+0Ch] +
mov eax [ebp+arg_0] +
add [esi+4] ecx +
cmp dword ptr [esi+24h] 0 +
mov [esi+28h] eax +
jnz loc_10168C4  +
mov [esi+24h] eax +
test edi edi +
jnz loc_1016882  +
jmp loc_1016843  +
push 0  +
push 0  +
push 0DDh  +
push 0C0000017h  +
jmp loc_10168E9  +
push eax  +
push eax  +
push 0B3h  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_10169A4  +
mov ecx [ebp+arg_8] +
cmp ecx ebx +
jz loc_10169A4  +
mov edi [ebp+arg_4] +
mov [ecx] ebx +
cmp edi [esi+4] +
jb loc_1016937  +
cmp [ebp+arg_C] bl +
jnz loc_1016937  +
push ebx  +
push ebx  +
push 118h  +
push 0C0000225h  +
jmp loc_10169B0  +
mov eax [esi+10h] +
cmp edi eax +
jnb loc_1016951  +
cmp eax ebx +
jz loc_1016951  +
mov eax [esi+8] +
imul eax edi +
add eax [esi+14h] +
mov [ecx] eax +
xor eax eax +
jmp loc_10169B5  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
mov [ebp+arg_0] ebx +
mov dword ptr [ebp+arg_C] ebx +
call sub_1016729  +
cmp eax ebx +
jge loc_101698F  +
cmp eax 0C0000225h +
jnz loc_10169B5  +
push edi  +
push esi  +
call sub_101681B  +
cmp eax ebx +
jl loc_10169B5  +
lea eax [ebp+arg_C] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
call sub_1016729  +
cmp eax ebx +
jl loc_10169B5  +
mov ecx [esi+8] +
imul ecx dword ptr [ebp+arg_C] +
mov edx [ebp+arg_0] +
lea ecx [ecx+edx+8] +
mov edx [ebp+arg_8] +
mov [edx] ecx +
jmp loc_10169B5  +
push ebx  +
push ebx  +
push 10Dh  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
xor eax eax +
cmp esi edi +
jz loc_1016A0F  +
mov ecx [esi+24h] +
cmp ecx edi +
jz loc_1016A01  +
cmp [esi+1Ch] edi +
jz loc_1016A0F  +
cmp ecx edi +
jz loc_1016A01  +
mov ecx [esi+24h] +
mov eax [ecx+4] +
mov edx [esi+20h] +
mov [esi+24h] eax +
call dword ptr [esi+1Ch]  +
cmp eax edi +
jl loc_1016A20  +
mov ecx [esi+0Ch] +
sub [esi+4] ecx +
cmp [esi+24h] edi +
jnz loc_10169E3  +
mov ecx [esi+10h] +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+4] ecx +
jmp loc_1016A20  +
push edi  +
push edi  +
push 18Eh  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
xor eax eax +
push 64h  +
mov edi esi +
stos   +
lea eax [esi+284h] +
push eax  +
push 32h  +
push 14h  +
lea eax [esi+4] +
push eax  +
call sub_10167AB  +
test eax eax +
jl loc_1016A84  +
push [ebp+arg_C]  +
lea eax [esi+68h] +
push 21Ch  +
push eax  +
push 32h  +
push 6Ch  +
lea eax [esi+34h] +
push eax  +
call sub_10167AB  +
test eax eax +
jl loc_1016A84  +
mov ecx [ebp+arg_8] +
and dword ptr [esi+30h] 0 +
mov [esi+64h] ecx +
mov ecx [ebp+arg_4] +
mov [esi+60h] ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1016AAC  +
push esi  +
push esi  +
push 3Fh  +
push 0C000000Dh  +
call sub_1016F35  +
jmp loc_1016ABE  +
lea eax [esi+4] +
push eax  +
call sub_10169C1  +
add esi 34h +
push esi  +
call sub_10169C1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_10] ebx +
cmp [esi+30h] ebx +
jbe loc_1016B48  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
lea eax [esi+34h] +
push eax  +
call sub_10168FA  +
cmp eax ebx +
jl loc_1016C2E  +
mov eax [ebp+var_4] +
cmp [eax] bl +
jnz loc_1016B13  +
cmp [ebp+var_8] ebx +
jnz loc_1016B31  +
mov [ebp+var_8] eax +
jmp loc_1016B31  +
lea ecx [ebp+var_10] +
push ecx  +
add eax 4 +
push eax  +
push [ebp+arg_C]  +
push dword ptr [esi+64h]  +
call dword ptr [esi+60h]  +
cmp eax ebx +
jl loc_1016C2E  +
cmp [ebp+var_10] ebx +
jz loc_1016B3C  +
inc edi  +
mov [ebp+var_4] ebx +
cmp edi [esi+30h] +
jb loc_1016AEB  +
jmp loc_1016B43  +
mov eax [ebp+var_4] +
cmp eax ebx +
jnz loc_1016BB8  +
cmp [ebp+var_8] ebx +
jnz loc_1016B99  +
mov eax [esi+30h] +
lea ecx [eax+1] +
push 1  +
mov [esi+30h] ecx +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
lea eax [esi+34h] +
push eax  +
call sub_10168FA  +
cmp eax ebx +
jl loc_1016C2E  +
push 6Ch  +
push ebx  +
push [ebp+var_8]  +
call memset  +
mov eax [ebp+var_8] +
add esp 0Ch +
add esi 4Ch +
push esi  +
push 28h  +
lea ecx [eax+44h] +
push ecx  +
push 14h  +
push 14h  +
add eax 18h +
push eax  +
call sub_10167AB  +
cmp eax ebx +
jl loc_1016C2E  +
mov eax [ebp+var_8] +
mov esi [ebp+arg_C] +
mov [ebp+var_4] eax +
mov byte ptr [eax] 1 +
mov eax [ebp+var_4] +
mov [eax+14h] ebx +
mov edi [ebp+var_4] +
add edi 4 +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_4] +
mov ecx [eax+14h] +
mov esi [ebp+arg_4] +
cmp ecx ebx +
jbe loc_1016BF8  +
push ebx  +
lea edx [ebp+var_C] +
push edx  +
dec ecx  +
push ecx  +
add eax 18h +
push eax  +
call sub_10168FA  +
cmp eax ebx +
jl loc_1016C2E  +
mov eax [ebp+var_4] +
cmp [eax] bl +
jz loc_1016BF8  +
mov ecx [ebp+var_C] +
cmp [ecx+10h] esi +
jnz loc_1016BF8  +
push ebx  +
push ebx  +
push 0E0h  +
push 0C00000BDh  +
call sub_1016F35  +
jmp loc_1016C2E  +
mov ecx [eax+14h] +
lea edx [ecx+1] +
mov [eax+14h] edx +
push 1  +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_4] +
push ecx  +
add eax 18h +
push eax  +
call sub_10168FA  +
cmp eax ebx +
jl loc_1016C2E  +
mov ecx [ebp+var_4] +
mov byte ptr [ecx] 1 +
mov ecx [ebp+var_C] +
mov [ecx+10h] esi +
mov edi [ebp+var_C] +
mov esi [ebp+arg_8] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_1016CC6  +
cmp [ebp+arg_4] ebx +
jz loc_1016CC6  +
mov edi [esi] +
lea eax [ebp+arg_0] +
cmp edi ebx +
jnz loc_1016C6A  +
push 1  +
push eax  +
push ebx  +
lea eax [esi+4] +
push eax  +
call sub_10168FA  +
cmp eax ebx +
jmp loc_1016C98  +
push 0  +
push eax  +
lea eax [edi-1] +
push eax  +
lea ebx [esi+4] +
push ebx  +
call sub_10168FA  +
test eax eax +
jl loc_1016CD7  +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
cmp [edx+10h] ecx +
jnb loc_1016C9C  +
push 1  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
push ebx  +
call sub_10168FA  +
test eax eax +
jl loc_1016CD7  +
inc dword ptr [esi]  +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
cmp [ecx+10h] edx +
jnz loc_1016CB7  +
push 0  +
push 0  +
push 178h  +
push 0C00000BDh  +
jmp loc_1016CD2  +
mov esi [ebp+arg_8] +
mov [ecx+10h] edx +
mov edi [ebp+arg_0] +
movs   +
movs   +
movs   +
movs   +
jmp loc_1016CD7  +
push ebx  +
push ebx  +
push 12Ch  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+4] +
push 0  +
lea eax [ebp+var_4] +
push eax  +
mov eax [esi] +
dec eax  +
push eax  +
push edi  +
call sub_10168FA  +
test eax eax +
jl loc_1016D1C  +
mov ecx [ebp+var_4] +
mov edx [ecx+10h] +
cmp edx [ebp+arg_4] +
jb loc_1016D1C  +
or dword ptr [ecx+10h] 0FFFFFFFFh +
dec dword ptr [esi]  +
jnz loc_1016CF5  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
xor eax eax +
mov [ebp+var_4] ebx +
cmp [edi+30h] ebx +
jbe loc_1016DA2  +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
lea eax [edi+34h] +
push eax  +
call sub_10168FA  +
cmp eax ebx +
jl loc_1016DA2  +
mov ecx [ebp+arg_0] +
cmp [ecx] bl +
jz loc_1016D97  +
xor esi esi +
cmp [ecx+14h] ebx +
jbe loc_1016D8A  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
add ecx 18h +
push ecx  +
call sub_10168FA  +
cmp eax ebx +
jl loc_1016DA2  +
mov ecx [ebp+var_8] +
mov ecx [ecx+10h] +
cmp ecx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
jnb loc_1016D8A  +
inc esi  +
cmp esi [ecx+14h] +
jb loc_1016D63  +
mov [ecx+14h] esi +
mov ecx [ebp+arg_0] +
cmp [ecx+14h] ebx +
jnz loc_1016D97  +
mov [ecx] bl +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
cmp ecx [edi+30h] +
jb loc_1016D40  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
test esi esi +
jnz loc_1016DD0  +
push esi  +
push esi  +
push 22Ch  +
push 0C000000Dh  +
call sub_1016F35  +
jmp loc_1016DF0  +
cmp [esi] eax +
jbe loc_1016DE1  +
push [ebp+arg_4]  +
push esi  +
call sub_1016CE3  +
test eax eax +
jl loc_1016DF0  +
cmp dword ptr [esi+30h] 0 +
jbe loc_1016DF0  +
push [ebp+arg_4]  +
push esi  +
call sub_1016D27  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov [eax] ebx +
xor edi edi +
cmp [esi+30h] ebx +
jbe loc_1016E5E  +
push ebx  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
lea eax [esi+34h] +
push eax  +
mov [ebp+var_4] ebx +
mov [ebp+arg_0] ebx +
call sub_10168FA  +
cmp eax ebx +
jl loc_1016E60  +
mov eax [ebp+arg_0] +
cmp [eax] bl +
jz loc_1016E4E  +
lea ecx [ebp+var_4] +
push ecx  +
push [ebp+arg_4]  +
add eax 4 +
push eax  +
push dword ptr [esi+64h]  +
call dword ptr [esi+60h]  +
cmp eax ebx +
jl loc_1016E60  +
cmp [ebp+var_4] ebx +
jz loc_1016E56  +
inc edi  +
cmp edi [esi+30h] +
jb loc_1016E14  +
jmp loc_1016E5E  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push edi  +
cmp ecx ebx +
jz loc_1016F19  +
mov edx [ebp+arg_8] +
cmp edx ebx +
jz loc_1016F19  +
mov edi [ebp+arg_C] +
cmp edi ebx +
jz loc_1016F19  +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
push esi  +
mov [ebp+arg_0] ebx +
cmp [edx+4] ebx +
jnz loc_1016EC8  +
mov eax [ecx] +
cmp eax ebx +
jz loc_1016F14  +
push ebx  +
lea edx [ebp+arg_0] +
push edx  +
dec eax  +
push eax  +
add ecx 4 +
push ecx  +
call sub_10168FA  +
cmp eax ebx +
jl loc_1016F16  +
mov esi [ebp+arg_0] +
cmp esi ebx +
jz loc_1016F14  +
jmp loc_1016F0D  +
lea eax [ebp+arg_0] +
push eax  +
push edx  +
push ecx  +
mov [ebp+arg_8] ebx +
call sub_1016DFA  +
cmp eax ebx +
jl loc_1016F16  +
mov eax [ebp+arg_0] +
push ebx  +
cmp eax ebx +
jnz loc_1016EF4  +
push ebx  +
push 2D5h  +
push 0C0000225h  +
call sub_1016F35  +
jmp loc_1016F16  +
lea ecx [ebp+arg_8] +
push ecx  +
mov ecx [eax+14h] +
dec ecx  +
push ecx  +
add eax 18h +
push eax  +
call sub_10168FA  +
cmp eax ebx +
jl loc_1016F16  +
mov esi [ebp+arg_8] +
mov edi [ebp+arg_C] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop esi  +
jmp loc_1016F2A  +
push ebx  +
push ebx  +
push 298h  +
push 0C000000Dh  +
call sub_1016F35  +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101E190 +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp edi dword_101E194 +
jnz loc_1016F5E  +
int 3  +
mov esi [ebp+arg_0] +
test eax eax +
jz loc_1016F6C  +
push edi  +
push [ebp+arg_4]  +
push esi  +
call eax  +
cmp edi 0C00000E5h +
jnz loc_1016FB9  +
test esi esi +
jz loc_1016F7D  +
mov edx [esi+8] +
jmp loc_1016F7F  +
xor edx edx +
mov eax offset word_1001532 +
test esi esi +
jz loc_1016F8C  +
mov ecx [esi] +
jmp loc_1016F8E  +
mov ecx eax +
test esi esi +
jz loc_1016F97  +
mov esi [esi+0Ch] +
jmp loc_1016F99  +
mov esi eax +
push edx  +
push ecx  +
push esi  +
push offset aAssertionFaile  +
push 0  +
push 65h  +
call ds:DbgPrintEx  +
add esp 18h +
push 0C0000420h  +
call ds:RtlRaiseStatus  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
test ecx ecx +
jz locret_1016FD6  +
mov eax [ecx+4] +
test eax eax +
jz locret_1016FD6  +
push eax  +
call ds:off_1007A54  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax offset loc_1019829 +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_101806D  +
pop ebp  +
retn 10h  +
***
test ecx ecx +
jz loc_1017029  +
movzx edx word ptr [ecx] +
test dl 1 +
jnz loc_1017029  +
movzx eax word ptr [ecx+2] +
test al 1 +
jnz loc_1017029  +
cmp dx ax +
ja loc_1017029  +
cmp dword ptr [ecx+4] 0 +
jnz loc_1017026  +
test dx dx +
jnz loc_1017029  +
mov al 1 +
retn   +
xor al al +
retn   +
***
test ecx ecx +
jz loc_1017054  +
mov edx [ecx] +
test dl 1 +
jnz loc_1017054  +
mov eax [ecx+4] +
test al 1 +
jnz loc_1017054  +
cmp edx eax +
ja loc_1017054  +
cmp dword ptr [ecx+8] 0 +
jnz loc_1017051  +
test edx edx +
jnz loc_1017054  +
mov al 1 +
retn   +
xor al al +
retn   +
***
mov dword ptr [ecx] 0C000000Dh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi edx +
push edi  +
mov ebx ecx +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jnz loc_1017096  +
mov esi 2B0h +
mov edi offset aNotNullCheckFa +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_10170F7  +
mov ecx esi +
call sub_1017031  +
test al al +
jnz loc_10170AD  +
mov esi 2B1h +
mov edi offset aRtlislunicodes +
jmp loc_10170D2  +
test ebx ebx +
jnz loc_10170BD  +
mov esi 2B2h +
mov edi offset aNotNullCheck_0 +
jmp loc_101708C  +
mov ecx ebx +
call sub_1017031  +
test al al +
jnz loc_10170DC  +
mov esi 2B3h +
mov edi offset aRtlislunicod_0 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_10170F7  +
mov edi [esi] +
mov eax [esi+4] +
mov ebx [ebx] +
sub eax edi +
cmp eax ebx +
jnb loc_1017119  +
mov esi 2BBh +
xor edi edi +
mov [ebp+var_4] 80000005h +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseLstr +
mov [ebp+var_14] offset aRtlappendlunic +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
call sub_1008207  +
jmp loc_101713A  +
mov eax ecx +
mov ecx [esi+8] +
push ebx  +
push dword ptr [eax+8]  +
mov eax edi +
shr eax 1 +
lea eax [ecx+eax*2] +
push eax  +
call memcpy  +
add ebx edi +
add esp 0Ch +
and [ebp+var_4] 0 +
mov [esi] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
xor esi esi +
mov byte ptr [ebx] 0 +
cmp [ebp+arg_8] esi +
jnz loc_1017179  +
mov ecx [eax] +
mov edx [ebp+arg_4] +
cmp ecx [edx] +
jnz loc_101719F  +
cmp ecx esi +
jz loc_101719C  +
mov esi [eax+8] +
push edi  +
mov edi [edx+8] +
xor eax eax +
cmps   +
pop edi  +
jmp loc_101719A  +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_101719F  +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_8]  +
mov [ebp+arg_0] esi +
push ecx  +
push eax  +
call sub_1016FDC  +
cmp eax esi +
jl loc_10171A1  +
cmp [ebp+arg_0] esi +
jnz loc_101719F  +
mov byte ptr [ebx] 1 +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_14] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
mov [ebp+var_4] 0C00000E5h +
cmp ebx edi +
jz loc_10171CC  +
mov [ebx] esi +
cmp [ebp+arg_0] edi +
jz loc_10171E0  +
mov esi 44Fh +
mov edi offset aValidFlagsChec +
jmp loc_1017277  +
mov ecx [ebp+arg_4] +
cmp ecx edi +
jnz loc_10171F3  +
mov esi 450h +
mov edi offset aNotNullCheck_1 +
jmp loc_1017243  +
call sub_1017031  +
test al al +
jnz loc_1017208  +
mov esi 451h +
mov edi offset aRtlislunicod_1 +
jmp loc_1017277  +
cmp esi edi +
jz loc_101721D  +
cmp [ebp+arg_10] edi +
jnz loc_101721D  +
mov esi 452h +
mov edi offset aCandidatecount +
jmp loc_1017277  +
test esi esi +
jbe loc_1017235  +
mov ecx [ebp+arg_10] +
call sub_1017031  +
test al al +
jz loc_101726D  +
inc edi  +
add ecx 0Ch +
cmp edi esi +
jb loc_1017224  +
test ebx ebx +
jnz loc_1017281  +
mov esi 459h +
mov edi offset aNotNullCheck_2 +
lea ecx [ebp+var_4] +
call sub_101705C  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
mov [ebp+var_10] offset aRtlmatchlunico +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_1008207  +
jmp loc_10172A7  +
mov esi 456h +
mov edi offset aRtlislunicod_2 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_101724B  +
push ebx  +
mov eax offset loc_1019829 +
push eax  +
push [ebp+arg_10]  +
push esi  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_4]  +
push 0  +
call sub_10182FE  +
test eax eax +
jge loc_10172A3  +
mov [ebp+var_4] eax +
jmp loc_10172A7  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp [ebp+arg_0] esi +
jz loc_10172DA  +
mov esi 522h +
mov edi offset aValidFlagsChec +
jmp loc_101731E  +
mov ecx [ebp+arg_8] +
cmp ecx esi +
jnz loc_10172F9  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 523h +
mov [ebp+var_8] offset aNotNullCheck_3 +
jmp loc_101732C  +
test byte ptr [ebp+arg_4] 1 +
jz loc_101730B  +
mov esi 524h +
mov edi offset aBytesSizeofWch +
jmp loc_101731E  +
call sub_1017031  +
test al al +
jnz loc_1017348  +
mov esi 525h +
mov edi offset aRtlislunicod_3 +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlreallocatel +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
call sub_1008207  +
jmp loc_101735C  +
push ecx  +
push [ebp+arg_4]  +
push esi  +
call sub_10183E2  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_101735C  +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov bx [ebp+arg_0] +
xor eax eax +
push esi  +
mov esi [ebp+arg_4] +
and [esi+4] eax +
mov [ebp+var_4] 0C00000E5h +
mov [esi] ax +
mov [esi+2] ax +
test bl 1 +
jz loc_10173AB  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 4Bh +
mov [ebp+var_8] offset aBytesSizeofWch +
jmp loc_10173D6  +
test bx bx +
jz loc_10173F6  +
movzx eax bx +
push eax  +
call ds:off_1007A50  +
mov [esi+4] eax +
test eax eax +
jnz loc_10173F2  +
mov [ebp+var_4] 0C0000017h +
mov [ebp+var_C] 4Fh +
mov [ebp+var_8] offset aStringBufferRe +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlallocateuni +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
call sub_1008207  +
jmp loc_10173FA  +
mov [esi+2] bx +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
mov [ebp+var_4] 0C00000E5h +
test bl 1 +
jz loc_1017447  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 6Eh +
mov [ebp+var_8] offset aBytesSizeofWch +
jmp loc_101746E  +
test ebx ebx +
jz loc_101748D  +
push ebx  +
call ds:off_1007A50  +
mov [esi+8] eax +
test eax eax +
jnz loc_101748A  +
mov [ebp+var_4] 0C0000017h +
mov [ebp+var_C] 72h +
mov [ebp+var_8] offset aStringBufferRe +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlallocatelun +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
call sub_1008207  +
jmp loc_1017491  +
mov [esi+4] ebx +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi edx +
mov edx [ebp+arg_0] +
and dword ptr [edx+8] 0 +
and dword ptr [edx] 0 +
and dword ptr [edx+4] 0 +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jnz loc_10174DB  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 135h +
mov [ebp+var_8] offset aNotNullCheck_4 +
jmp loc_10174F9  +
cmp ecx 7FFFFFFFh +
jbe loc_1017515  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 136h +
mov [ebp+var_8] offset aStringinlength +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlduplicateco +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
call sub_1008207  +
jmp loc_1017536  +
lea eax [ecx+ecx] +
lea ecx [ebp+var_10] +
mov [ebp+var_8] esi +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
call sub_10185AD  +
test eax eax +
jge loc_1017532  +
mov [ebp+var_4] eax +
jmp loc_1017536  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi edx +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
mov [ebp+var_4] 0C00000E5h +
call sub_1017002  +
test al al +
jnz loc_101759B  +
lea ecx [ebp+var_4] +
call sub_101705C  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
mov [ebp+var_10] offset aRtlinitlunicod +
mov [ebp+var_C] 165h +
mov [ebp+var_8] offset aRtlisunicodest +
call sub_1008207  +
jmp loc_10175B1  +
movzx eax word ptr [ecx] +
and [ebp+var_4] 0 +
mov [esi] eax +
movzx eax word ptr [ecx+2] +
mov [esi+4] eax +
mov eax [ecx+4] +
mov [esi+8] eax +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi edx +
xor eax eax +
and [esi+4] eax +
push edi  +
mov edi ecx +
mov [ebp+var_8] 0C00000E5h +
mov [esi] ax +
mov [esi+2] ax +
call sub_1017031  +
lea ecx [ebp+var_8] +
test al al +
jnz loc_10175FE  +
call sub_101705C  +
mov [ebp+var_14] 17Bh +
mov [ebp+var_10] offset aRtlislunicod_0 +
jmp loc_1017645  +
mov edx [edi] +
lea eax [ebp+var_4] +
push eax  +
call sub_10110F0  +
mov edx [ebp+var_8] +
test edx edx +
jge loc_101761C  +
mov eax 17Fh +
mov ecx offset aBuclRtlConvert +
jmp loc_101763C  +
mov edx [edi+4] +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_C] +
call sub_10110F0  +
mov edx [ebp+var_C] +
test edx edx +
jge loc_1017661  +
mov eax 180h +
mov ecx offset aBuclRtlConve_0 +
mov [ebp+var_8] edx +
mov [ebp+var_14] eax +
mov [ebp+var_10] ecx +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_8] +
mov [ebp+var_18] offset aRtlinitunicode +
mov [ebp+var_1C] offset aDW7rtmBaseLstr +
call sub_1008207  +
jmp loc_101768A  +
mov cx word ptr [ebp+var_4] +
movzx eax cx +
cmp eax [edi] +
jz loc_101766D  +
int 3  +
mov ax word ptr [ebp+var_8] +
movzx edx ax +
cmp edx [edi+4] +
jnz loc_101766C  +
and [ebp+var_8] 0 +
mov [esi] cx +
mov [esi+2] ax +
mov eax [edi+8] +
mov [esi+4] eax +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
mov [edx] ebx +
mov [edx+4] ebx +
mov [edx+8] ebx +
cmp ecx ebx +
jz loc_101770A  +
push esi  +
mov eax ecx +
push edi  +
lea edi [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si bx +
jnz loc_10176B4  +
sub eax edi +
sar eax 1 +
pop edi  +
pop esi  +
cmp eax 7FFFFFFEh +
jbe loc_10176FD  +
lea eax [ebp+var_14] +
mov ebx 0C000042Bh +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_4] ebx +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
mov [ebp+var_10] offset aRtlinitlunic_0 +
mov [ebp+var_C] 19Eh +
mov [ebp+var_8] offset aCchSize_tSize_ +
call sub_1008207  +
jmp loc_101770A  +
add eax eax +
mov [edx] eax +
add eax 2 +
mov [edx+4] eax +
mov [edx+8] ecx +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_14] +
xor ebx ebx +
mov [ebp+var_4] 0C00000E5h +
cmp edi ebx +
jz loc_1017737  +
mov [edi] ebx +
mov [edi+4] ebx +
mov [edi+8] ebx +
mov esi [ebp+arg_18] +
cmp esi ebx +
jz loc_1017746  +
mov [esi] ebx +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov eax [ebp+arg_0] +
test eax 0FFFFFFF8h +
jz loc_101775C  +
mov esi 219h +
mov edi offset aValidFlagsChec +
jmp loc_10177B1  +
and eax 3 +
jnz loc_101776D  +
mov esi 21Bh +
mov edi offset a__e0 +
jmp loc_10177B1  +
and eax 3 +
lea ecx [eax-1] +
test ecx eax +
jz loc_1017783  +
mov esi 21Bh +
mov edi offset aNoMoreThanOneF +
jmp loc_10177B1  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jnz loc_101779E  +
mov esi 21Dh +
mov edi offset aNotNullCheck_3 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_10177FE  +
call sub_1017031  +
test al al +
jnz loc_10177BB  +
mov esi 21Eh +
mov edi offset aRtlislunicod_3 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_10177FE  +
cmp edi ebx +
jnz loc_10177CB  +
mov esi 21Fh +
mov edi offset aNotNullCheck_5 +
jmp loc_1017794  +
cmp esi ebx +
jnz loc_10177DB  +
mov esi 220h +
mov edi offset aNotNullCheck_6 +
jmp loc_1017794  +
mov edi [ebp+arg_10] +
cmp [ebp+arg_C] ebx +
jnz loc_1017823  +
lea eax [edi-0D800h] +
cmp eax 7FFh +
ja loc_1017823  +
mov esi 223h +
xor edi edi +
mov [ebp+var_4] 0C0000161h +
lea eax [ebp+var_20] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_20] offset aDW7rtmBaseLstr +
mov [ebp+var_1C] offset aRtlsplitlunico +
mov [ebp+var_18] esi +
mov [ebp+var_14] edi +
call sub_1008207  +
jmp loc_10178D1  +
cmp [ebp+arg_8] ebx +
jnz loc_101789C  +
cmp [ebp+arg_C] ebx +
jnz loc_101789C  +
cmp edi 100h +
jnb loc_101789C  +
cmp [ebp+arg_0] 1 +
jnz loc_101789C  +
mov edx [ecx] +
mov eax [ecx+8] +
mov [ebp+var_10] edx +
mov [ebp+var_C] edx +
mov [ebp+var_8] eax +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
add edx eax +
jmp loc_1017860  +
movzx esi word ptr [eax] +
inc eax  +
inc eax  +
cmp si di +
jz loc_1017866  +
cmp eax edx +
jb loc_1017856  +
jmp loc_1017880  +
cmp edx eax +
jz loc_1017875  +
sub edx eax +
mov [ebp+var_14] eax +
mov [ebp+var_1C] edx +
mov [ebp+var_18] edx +
sub eax [ecx+8] +
dec eax  +
dec eax  +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
cmp [ebp+var_10] ebx +
jnz loc_1017888  +
mov [ebp+var_8] ebx +
mov edi [ebp+arg_14] +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
mov edi [ebp+arg_18] +
lea esi [ebp+var_1C] +
movs   +
movs   +
movs   +
jmp loc_10178CE  +
test byte ptr [ebp+arg_0] 1 +
push 0  +
pop eax  +
setz al  +
inc eax  +
test byte ptr [ebp+arg_0] 4 +
jz loc_10178B0  +
or eax 4 +
push esi  +
push [ebp+arg_14]  +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push offset loc_1019829  +
push ecx  +
push eax  +
call sub_10186A4  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_10178D1  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
xor esi esi +
xor edi edi +
mov [ebp+var_4] 0C00000E5h +
cmp ebx esi +
jz loc_1017927  +
mov eax [ebp+arg_0] +
mov [ebp+arg_C] eax +
and [ebp+arg_C] 1 +
mov [ebx] esi +
jnz loc_1017911  +
mov [ebx+4] esi +
mov [ebx+8] esi +
test eax 0FFFFFFFEh +
jz loc_101793E  +
mov esi 288h +
mov edi offset aValidFlagsChec +
jmp loc_10179B7  +
lea ecx [ebp+var_4] +
mov esi 285h +
mov edi offset aNotNullCheckFa +
call sub_101705C  +
jmp loc_10179D2  +
cmp [ebp+arg_4] esi +
jz loc_101796E  +
cmp [ebp+arg_8] esi +
jnz loc_1017954  +
mov esi 28Ah +
mov edi offset aStringcount0St +
jmp loc_10179B7  +
cmp [ebp+arg_4] esi +
jbe loc_101796E  +
mov ecx [ebp+arg_8] +
call sub_1017031  +
test al al +
jz loc_10179AD  +
inc esi  +
add ecx 0Ch +
cmp esi [ebp+arg_4] +
jb loc_101795C  +
xor esi esi +
cmp [ebp+arg_4] esi +
jbe loc_1017990  +
mov edx [ebp+arg_8] +
mov eax [edx] +
lea ecx [eax+edi] +
cmp ecx edi +
jb loc_10179C1  +
cmp ecx eax +
jb loc_10179C1  +
inc esi  +
add edx 0Ch +
mov edi ecx +
cmp esi [ebp+arg_4] +
jb loc_1017978  +
cmp [ebp+arg_C] 0 +
jz loc_10179F4  +
cmp edi [ebx+4] +
jbe loc_10179FD  +
push ebx  +
push edi  +
push 0  +
call sub_10172B6  +
test eax eax +
jge loc_10179FD  +
mov [ebp+var_4] eax +
jmp loc_1017A21  +
mov esi 28Eh +
mov edi offset aRtlislunicod_4 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_10179D2  +
mov esi 292h +
mov edi offset aBuclRtlAddinpl +
mov [ebp+var_4] 0C0000095h +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLstr +
mov [ebp+var_10] offset aRtlconcatenate +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_1008207  +
jmp loc_1017A21  +
push ebx  +
push edi  +
call sub_1017408  +
jmp loc_10179A4  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_1017A1D  +
mov esi [ebp+arg_8] +
mov edx ebx +
mov ecx esi +
call sub_1017068  +
test eax eax +
jl loc_10179A8  +
inc edi  +
add esi 0Ch +
cmp edi [ebp+arg_4] +
jb loc_1017A07  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
xor edi edi +
mov ebx ecx +
mov [ebp+var_4] 0C00000E5h +
cmp esi edi +
jz loc_1017A99  +
mov [esi+8] edi +
mov [esi] edi +
mov [esi+4] edi +
call sub_1017031  +
test al al +
jnz loc_1017AB1  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 15Eh +
mov [ebp+var_8] offset aRtlislunicod_0 +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlduplicatelu +
mov [ebp+var_14] offset aDW7rtmBaseLs_0 +
call sub_1008207  +
jmp loc_1017ACC  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 15Dh +
mov [ebp+var_8] offset aNotNullCheckFa +
jmp loc_1017A7D  +
push esi  +
push 6Ah  +
push ebx  +
push 3F6h  +
push edi  +
push 1  +
call sub_1018A39  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_1017ACC  +
mov [ebp+var_4] edi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jnb loc_1017AEB  +
or eax 0FFFFFFFFh +
jmp loc_1017AF5  +
xor ecx ecx +
cmp eax [ebp+arg_4] +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
cmp eax 28h +
jb loc_1017B12  +
lea ecx [eax-28h] +
cmp ecx 53h +
jnb loc_1017B12  +
mov al ds:byte_1006CC8[eax] +
retn   +
or al 0FFh +
retn   +
***
cmp ecx 20h +
jz loc_1017B31  +
cmp ecx 9 +
jz loc_1017B31  +
cmp ecx 0Dh +
jz loc_1017B31  +
cmp ecx 0Ah +
jz loc_1017B31  +
xor al al +
retn   +
***
mov al 1 +
retn   +
***
mov edi edi +
push esi  +
push 2Ch  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
and dword ptr [esi+24h] 0 +
or dword ptr [esi+28h] 0FFFFFFFFh +
add esp 0Ch +
pop esi  +
retn   +
***
retn   +
***
test ecx ecx +
jnz loc_1017B69  +
xor al al +
retn   +
cmp dword ptr [ecx+8] 0 +
jnz loc_1017B74  +
cmp dword ptr [ecx] 0 +
jnz loc_1017B66  +
mov eax [ecx] +
cmp [ecx+4] eax +
sbb al al +
inc al  +
retn   +
***
test ecx ecx +
jz locret_1017B95  +
mov eax [ecx+8] +
test eax eax +
jz locret_1017B95  +
push eax  +
call ds:off_1007A54  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_101D040 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov [ebp+var_20C] eax +
mov eax [ebp+arg_0] +
mov esi [eax+8] +
push edi  +
mov edi [eax] +
lea eax [ebp+var_204] +
add edi esi +
xor ebx ebx +
mov ecx eax +
mov [ebp+var_210] ecx +
mov [ebp+var_214] 200h +
mov [ebp+var_218] ebx +
cmp esi edi +
jnb loc_1017D11  +
lea ecx [ebp+var_4] +
sub ecx eax +
and ecx 0FFFFFFFEh +
cmp ecx 8 +
jl loc_1017CE3  +
mov cl [esi] +
xor dl dl +
inc esi  +
mov [ebp+var_205] bl +
cmp esi edi +
jz loc_1017C15  +
mov dl [esi] +
inc esi  +
xor ebx ebx +
jmp loc_1017C18  +
push 3Dh  +
pop ebx  +
mov [eax+4] bx +
cmp esi edi +
jz loc_1017C2D  +
mov bl [esi] +
mov [ebp+var_205] bl +
inc esi  +
xor ebx ebx +
jmp loc_1017C30  +
push 3Dh  +
pop ebx  +
mov [eax+6] bx +
movzx ecx cl +
mov ebx ecx +
shr ebx 2 +
movzx bx ds:byte_1006CB0[ebx] +
mov [eax] bx +
movzx edx dl +
and ecx 3 +
mov ebx edx +
shr ebx 4 +
shl ecx 4 +
or ebx ecx +
movzx cx ds:byte_1006CB0[ebx] +
xor ebx ebx +
mov [eax+2] cx +
cmp [eax+4] bx +
jnz loc_1017C89  +
movzx ecx [ebp+var_205] +
and edx 0Fh +
shr ecx 6 +
shl edx 2 +
or ecx edx +
movzx cx ds:byte_1006CB0[ecx] +
mov [eax+4] cx +
cmp [eax+6] bx +
jnz loc_1017CA5  +
movzx ecx [ebp+var_205] +
and ecx 3Fh +
movzx cx ds:byte_1006CB0[ecx] +
mov [eax+6] cx +
add eax 8 +
lea ecx [ebp+var_4] +
cmp eax ecx +
jnz loc_1017CDB  +
push [ebp+var_20C]  +
lea eax [ebp+var_218] +
push offset loc_1019829  +
push eax  +
push ebx  +
mov [ebp+var_218] 200h +
call sub_101A3DE  +
cmp eax ebx +
jl loc_1017D13  +
lea eax [ebp+var_204] +
cmp esi edi +
jb loc_1017BEE  +
lea ecx [ebp+var_204] +
cmp eax ecx +
jz loc_1017D11  +
push [ebp+var_20C]  +
sub eax ecx +
mov [ebp+var_218] eax +
push offset loc_1019829  +
lea eax [ebp+var_218] +
push eax  +
push ebx  +
call sub_101A3DE  +
cmp eax ebx +
jl loc_1017D13  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C515  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov edx [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] 0C00000E5h +
cmp edx edi +
jz loc_1017D46  +
mov [edx] edi +
mov esi [ebp+arg_C] +
cmp esi edi +
jz loc_1017D55  +
mov [esi+4] edi +
mov [esi] edi +
mov [esi+8] edi +
mov ebx [ebp+arg_10] +
cmp ebx edi +
jz loc_1017D5E  +
mov [ebx] edi +
cmp [ebp+arg_0] edi +
jz loc_1017D6F  +
mov esi 543h +
mov edi offset aValidFlagsChec +
jmp loc_1017DE7  +
mov ecx [ebp+arg_4] +
cmp ecx edi +
jnz loc_1017D8E  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 544h +
mov [ebp+var_8] offset aNotNullCheck_7 +
jmp loc_1017DF5  +
call sub_1017B62  +
test al al +
jnz loc_1017DA3  +
mov esi 545h +
mov edi offset aRtlislblobvali +
jmp loc_1017DE7  +
cmp edx edi +
jnz loc_1017DB7  +
cmp esi edi +
jnz loc_1017DD1  +
mov esi 546h +
mov edi offset aFixedsizebuffe +
jmp loc_1017DE7  +
mov ecx edx +
call sub_1017031  +
test al al +
jnz loc_1017DCE  +
mov esi 547h +
mov edi offset aFixedsizebuf_0 +
jmp loc_1017DE7  +
mov edx [ebp+arg_8] +
cmp ebx edi +
jnz loc_1017E11  +
cmp edx edi +
jz loc_1017E11  +
cmp esi edi +
jz loc_1017E11  +
mov esi 548h +
mov edi offset aBufferused0Fix +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlbase64encod +
mov [ebp+var_14] offset aDW7rtmBaseLs_1 +
call sub_1008207  +
jmp loc_1017E60  +
lea ecx [ebp+var_48] +
call sub_101A13C  +
lea eax [ebp+var_48] +
push eax  +
push ebx  +
push esi  +
push [ebp+arg_8]  +
push edi  +
call sub_101A31F  +
cmp eax edi +
jge loc_1017E31  +
mov [ebp+var_4] eax +
jmp loc_1017E58  +
lea eax [ebp+var_48] +
push eax  +
push [ebp+arg_4]  +
call sub_1017B9B  +
cmp eax edi +
lea ecx [ebp+var_48] +
jge loc_1017E49  +
mov [ebp+var_4] eax +
jmp loc_1017E5B  +
call sub_101A155  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_1017E58  +
mov [ebp+var_4] edi +
lea ecx [ebp+var_48] +
call sub_101A15F  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
xor edx edx +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp [ebp+arg_0] edx +
jz loc_1017E97  +
mov esi 6BBh +
mov edi offset aValidFlagsChec +
jmp loc_1017F37  +
mov ebx [ebp+arg_8] +
cmp ebx edx +
jnz loc_1017EB4  +
mov edi [ebp+arg_C] +
cmp edi edx +
jnz loc_1017ED2  +
mov esi 6BCh +
mov edi offset aFixedsizebuffe +
jmp loc_1017F37  +
mov ecx ebx +
call sub_1017B62  +
test al al +
jnz loc_1017ECB  +
mov esi 6BDh +
mov edi offset aFixedsizebuf_1 +
jmp loc_1017F37  +
mov edi [ebp+arg_C] +
cmp edi edx +
jz loc_1017EE2  +
cmp [edi] edx +
jz loc_1017EE2  +
mov esi 6BEh +
mov edi offset aDynamicbuffer0 +
jmp loc_1017F37  +
cmp [ebp+arg_10] edx +
jnz loc_1017EFB  +
cmp ebx edx +
jz loc_1017EFB  +
cmp edi edx +
jz loc_1017EFB  +
mov esi 6BFh +
mov edi offset aReturnedbuffer +
jmp loc_1017F37  +
mov esi [ebp+arg_14] +
cmp esi edx +
jnz loc_1017F16  +
lea ecx [ebp+var_4] +
mov esi 6C1h +
mov edi offset aNotNullCheck_8 +
call sub_101705C  +
jmp loc_1017F88  +
cmp [esi+24h] edx +
jz loc_1017F27  +
mov esi 6C4h +
mov edi offset aContextReserve +
jmp loc_1017F37  +
cmp dword ptr [esi+28h] 0FFFFFFFFh +
jz loc_1017F58  +
mov esi 6C5h +
mov edi offset aContextReser_0 +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_14] offset aDW7rtmBaseLs_1 +
mov [ebp+var_10] offset aRtlinitializes +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
jmp loc_1017F9F  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 100h  +
push edx  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov [esi+24h] eax +
test eax eax +
jnz loc_1017FAA  +
mov esi 6D3h +
mov edi offset aContextReser_1 +
mov [ebp+var_4] 0C0000017h +
mov [ebp+var_24] offset aDW7rtmBaseLs_1 +
mov [ebp+var_20] offset aRtlinitializes +
mov [ebp+var_1C] esi +
mov [ebp+var_18] edi +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1008207  +
jmp loc_1017FEE  +
and dword ptr [esi+8] 0 +
not eax  +
mov [esi+28h] eax +
mov eax [ebp+arg_4] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_10] +
mov [esi+14h] ebx +
mov [esi+18h] edi +
mov [esi+1Ch] eax +
test ebx ebx +
jz loc_1017FCE  +
mov [esi+10h] ebx +
jmp loc_1017FD1  +
mov [esi+10h] edi +
test eax eax +
jz loc_1017FDA  +
mov ecx [esi+10h] +
mov [eax] ecx +
mov eax [esi+10h] +
mov ecx [eax+8] +
mov [esi] ecx +
mov eax [eax+4] +
add eax ecx +
and [ebp+var_4] 0 +
mov [esi+4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
mov [esi] ebx +
mov [esi+4] ebx +
mov [esi+8] ebx +
cmp edi ebx +
jz loc_101805F  +
push edi  +
call ds:off_1007A50  +
mov [esi+8] eax +
cmp eax ebx +
jnz loc_101805C  +
lea eax [ebp+var_10] +
mov ebx 0C0000017h +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] ebx +
mov [ebp+var_10] offset aDW7rtmBaseLs_1 +
mov [ebp+var_C] offset aRtlallocatelbl +
mov [ebp+var_8] 80Eh +
mov [ebp+var_4] offset aBlobBufferPuch +
call sub_1008207  +
jmp loc_101805F  +
mov [esi+4] edi +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov ecx [ebp+arg_14] +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp ecx eax +
jz loc_101809D  +
mov edx [ebp+arg_0] +
mov [ecx] eax +
cmp edx eax +
jnz loc_10180B4  +
mov esi 915h +
mov edi offset aNotNullCheck_9 +
jmp loc_10180A7  +
mov esi 914h +
mov edi offset aNotNullChec_10 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_10181E5  +
cmp [ebp+arg_4] eax +
jnz loc_10180C5  +
mov esi 916h +
mov edi offset aNotNullChec_11 +
jmp loc_10180A7  +
mov ecx [ebp+arg_8] +
cmp ecx eax +
jnz loc_10180D8  +
mov esi 917h +
mov edi offset aNotNullChec_12 +
jmp loc_10180A7  +
cmp [ebp+arg_C] eax +
jnz loc_10180E9  +
mov esi 918h +
mov edi offset aNotNullChec_13 +
jmp loc_10180A7  +
mov edi [edx+8] +
mov esi [edx] +
mov ebx [ecx+8] +
add esi edi +
mov [ebp+arg_0] edi +
mov edi [ecx] +
add edi ebx +
cmp [ebp+arg_10] eax +
jz loc_1018188  +
cmp [ebp+arg_0] esi +
jz loc_1018207  +
cmp ebx edi +
jz loc_101815C  +
mov ecx [ebp+arg_0] +
mov edx esi +
call [ebp+arg_4]  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp eax 0FFFFFFFFh +
jz loc_1018171  +
mov [ebp+arg_0] edx +
mov edx edi +
mov ecx ebx +
call [ebp+arg_C]  +
mov [ebp+var_10] eax +
cmp eax 0FFFFFFFFh +
jz loc_101817D  +
mov ecx [ebp+var_8] +
mov ebx edx +
call [ebp+arg_10]  +
mov ecx [ebp+var_10] +
mov [ebp+arg_8] eax +
call [ebp+arg_10]  +
push eax  +
push [ebp+arg_8]  +
call sub_1017AD9  +
test eax eax +
jnz loc_101820E  +
cmp [ebp+var_4] esi +
jnz loc_101810C  +
cmp [ebp+arg_0] esi +
jz loc_1018207  +
cmp ebx edi +
jnz loc_1018175  +
xor eax eax +
inc eax  +
jmp loc_101820E  +
test edx edx +
jl loc_1018176  +
int 3  +
mov esi 928h +
jmp loc_10181DD  +
test edx edx +
jge loc_1018175  +
mov esi 929h +
jmp loc_10181DD  +
cmp [ebp+arg_0] esi +
jz loc_1018207  +
cmp ebx edi +
jz loc_101815C  +
mov ecx [ebp+arg_0] +
mov edx esi +
call [ebp+arg_4]  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp eax 0FFFFFFFFh +
jz loc_10181C9  +
mov [ebp+arg_0] edx +
mov edx edi +
mov ecx ebx +
call [ebp+arg_C]  +
cmp eax 0FFFFFFFFh +
jz loc_10181D4  +
push eax  +
push [ebp+var_8]  +
mov ebx edx +
call sub_1017AD9  +
test eax eax +
jnz loc_101820E  +
cmp [ebp+var_4] esi +
jnz loc_101818D  +
jmp loc_101815C  +
test edx edx +
jge loc_1018175  +
mov esi 939h +
jmp loc_10181DD  +
test edx edx +
jge loc_1018175  +
mov esi 93Ah +
mov [ebp+var_4] edx +
mov edi offset a__rv_ucscharac +
lea eax [ebp+var_18] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_18] offset aDW7rtmBaseLs_1 +
mov [ebp+var_14] offset aRtlcompareenco +
mov [ebp+var_10] esi +
mov [ebp+var_C] edi +
call sub_1008207  +
jmp loc_1018217  +
cmp ebx edi +
jz loc_101820E  +
or eax 0FFFFFFFFh +
mov ecx [ebp+arg_14] +
and [ebp+var_4] 0 +
mov [ecx] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi edx +
push edi  +
mov edx ecx +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jnz loc_1018254  +
mov esi 0A74h +
mov edi offset aNotNullCheckFa +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_10182B5  +
mov ecx esi +
call sub_1017B62  +
test al al +
jnz loc_101826B  +
mov esi 0A75h +
mov edi offset aRtlislblobva_0 +
jmp loc_1018290  +
test edx edx +
jnz loc_101827B  +
mov esi 0A76h +
mov edi offset aNotNullCheck_0 +
jmp loc_101824A  +
mov ecx edx +
call sub_1017B62  +
test al al +
jnz loc_101829A  +
mov esi 0A77h +
mov edi offset aRtlislblobva_1 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_10182B5  +
mov edi [esi] +
mov eax [esi+4] +
mov ebx [edx] +
sub eax edi +
cmp eax ebx +
jnb loc_10182D7  +
mov esi 0A7Fh +
xor edi edi +
mov [ebp+var_4] 80000005h +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_1 +
mov [ebp+var_10] offset aRtlappendlblob +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_1008207  +
jmp loc_10182F1  +
mov eax [esi+8] +
push ebx  +
push dword ptr [edx+8]  +
add eax edi +
push eax  +
call memcpy  +
add ebx edi +
add esp 0Ch +
and [ebp+var_4] 0 +
mov [esi] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_10] edi +
jbe loc_101833C  +
mov esi [ebp+arg_14] +
and [ebp+arg_14] 0 +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_18]  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101806D  +
test eax eax +
jl loc_1018343  +
cmp [ebp+arg_14] 0 +
jz loc_101833C  +
inc edi  +
add esi 0Ch +
cmp edi [ebp+arg_10] +
jb loc_101830F  +
mov eax [ebp+arg_1C] +
mov [eax] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_14] +
sub esp 10h +
push esi  +
mov esi [ebp+arg_0] +
mov [eax] esi +
mov eax [ebp+arg_18] +
or dword ptr [eax] 0FFFFFFFFh +
push edi  +
jmp loc_1018390  +
mov edx [ebp+arg_4] +
mov ecx esi +
call [ebp+arg_8]  +
mov edi eax +
mov esi edx +
cmp edi 0FFFFFFFFh +
jz loc_1018397  +
cmp [ebp+arg_C] 0 +
jz loc_101838B  +
mov edx [ebp+arg_10] +
mov ecx edi +
call [ebp+arg_C]  +
test al al +
jz loc_10183C9  +
cmp edi [ebp+arg_10] +
jnz loc_10183C9  +
cmp esi [ebp+arg_4] +
jnz loc_1018368  +
jmp loc_10183CE  +
test esi esi +
jl loc_101839C  +
int 3  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] esi +
mov [ebp+var_10] offset aDW7rtmBaseLs_1 +
mov [ebp+var_C] offset aRtlpdecodechar +
mov [ebp+var_8] 35h +
mov [ebp+var_4] offset a__rv_ucscharac +
call sub_1008207  +
jmp loc_10183D5  +
mov eax [ebp+arg_18] +
mov [eax] edi +
mov eax [ebp+arg_14] +
mov [eax] esi +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
jz loc_1018405  +
mov esi 82h +
mov edi offset aValidFlagsChec +
jmp loc_1018435  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_1018420  +
lea ecx [ebp+var_4] +
mov esi 83h +
mov edi offset aNotNullCheck_7 +
call sub_101705C  +
jmp loc_1018499  +
mov ecx esi +
call sub_1017B62  +
test al al +
jnz loc_101843F  +
mov esi 84h +
mov edi offset aRtlislblobvali +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_1018499  +
mov eax [esi+8] +
mov edi [ebp+arg_4] +
test eax eax +
jz loc_101847A  +
push eax  +
push edi  +
call ds:off_1007A58  +
test eax eax +
jnz loc_1018461  +
mov esi 89h +
mov edi offset aTempRtlrealloc +
jmp loc_1018492  +
mov [esi+8] eax +
mov [esi+4] edi +
cmp [esi] edi +
jbe loc_101846D  +
mov [esi] edi +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
push edi  +
call ds:off_1007A50  +
mov [esi+8] eax +
test eax eax +
jnz loc_1018464  +
mov esi 8Eh +
mov edi offset aBlobBufferPuch +
mov [ebp+var_4] 0C0000017h +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_1 +
mov [ebp+var_10] offset aRtlreallocat_0 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_1008207  +
jmp loc_1018471  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi edx +
push edi  +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jz loc_1018515  +
and dword ptr [esi] 0 +
test ecx ecx +
jnz loc_1018521  +
mov esi 0B9h +
mov edi offset aNotNullCheck_0 +
lea ecx [ebp+var_4] +
call sub_101705C  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_1 +
mov [ebp+var_10] offset aRtlcopylblob +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_1008207  +
jmp loc_10185A1  +
mov esi 0B8h +
mov edi offset aNotNullCheckFa +
jmp loc_10184E8  +
mov eax [esi+4] +
mov edx [esi+8] +
push ebx  +
test eax eax +
jz loc_101853C  +
test edx edx +
jnz loc_101853C  +
mov esi 0BCh +
mov edi offset aDestinationmax +
jmp loc_1018565  +
mov edi [ecx] +
mov ebx [ecx+8] +
call sub_1017B62  +
test al al +
jnz loc_1018556  +
mov esi 0BFh +
mov edi offset aRtlislblobva_2 +
jmp loc_1018565  +
cmp [esi+4] edi +
jnb loc_101858F  +
mov esi 0C0h +
mov edi offset aDestinationm_0 +
lea ecx [ebp+var_4] +
call sub_101705C  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_1 +
mov [ebp+var_10] offset aRtlcopylblob +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_1008207  +
jmp loc_10185A0  +
push edi  +
push ebx  +
push edx  +
call memcpy  +
add esp 0Ch +
and [ebp+var_4] 0 +
mov [esi] edi +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov [ebp+var_8] edx +
mov esi ecx +
mov [ebp+var_4] 0C00000E5h +
cmp edx ebx +
jz loc_10185F0  +
mov [edx] ebx +
mov [edx+4] ebx +
mov [edx+8] ebx +
cmp esi ebx +
jnz loc_10185FC  +
mov esi 0EEh +
mov edi offset aNotNullCheck_0 +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_1C] esi +
mov [ebp+var_18] edi +
jmp loc_101861B  +
mov esi 0EDh +
mov edi offset aNotNullCheckFa +
jmp loc_10185E0  +
call sub_1017B62  +
test al al +
jnz loc_1018637  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_1C] 0EFh +
mov [ebp+var_18] offset aRtlislblobva_2 +
lea eax [ebp+var_24] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_20] offset aRtlduplicatelb +
mov [ebp+var_24] offset aDW7rtmBaseLs_1 +
call sub_1008207  +
jmp loc_1018697  +
mov eax [esi] +
cmp eax ebx +
jz loc_1018694  +
lea ecx [ebp+var_14] +
push ecx  +
push eax  +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
call sub_1017FFD  +
cmp eax ebx +
jge loc_1018659  +
lea ecx [ebp+var_14] +
jmp loc_101866A  +
lea edx [ebp+var_14] +
mov ecx esi +
call sub_10184C0  +
cmp eax ebx +
lea ecx [ebp+var_14] +
jge loc_1018674  +
mov [ebp+var_4] eax +
call sub_100819D  +
jmp loc_1018697  +
lea esi [ebp+var_14] +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
mov edi [ebp+var_8] +
lea esi [ebp+var_20] +
movs   +
movs   +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
movs   +
call sub_100819D  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_18] +
xor esi esi +
mov [ebp+var_4] 0C00000E5h +
cmp edi esi +
jz loc_10186C7  +
mov [edi] esi +
mov [edi+4] esi +
mov [edi+8] esi +
mov edx [ebp+arg_1C] +
cmp edx esi +
jz loc_10186D6  +
mov [edx] esi +
mov [edx+4] esi +
mov [edx+8] esi +
mov ebx [ebp+arg_0] +
test ebx 0FFFFFFF8h +
jz loc_10186F0  +
mov esi 1DAh +
mov edi offset aValidFlagsChec +
jmp loc_10189CC  +
cmp ebx esi +
jnz loc_1018703  +
mov esi 1DCh +
mov edi offset aFlags0 +
jmp loc_10189CC  +
lea eax [ebx-1] +
test eax ebx +
jz loc_1018719  +
mov esi 1DDh +
mov edi offset aFlagsFlags10 +
jmp loc_10189CC  +
mov ecx [ebp+arg_4] +
cmp ecx esi +
jz loc_10189C2  +
call sub_1017B62  +
test al al +
jz loc_10189C2  +
cmp edi esi +
jnz loc_101874C  +
mov edi 1DFh +
mov esi offset aNotNullChec_14 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_10189BA  +
cmp edx esi +
jnz loc_101875C  +
mov edi 1E0h +
mov esi offset aNotNullChec_15 +
jmp loc_101873F  +
cmp [ebp+arg_10] esi +
jnz loc_1018781  +
mov eax [ebp+arg_14] +
add eax 0FFFF2800h +
cmp eax 7FFh +
ja loc_1018781  +
mov edi 1E3h +
mov [ebp+var_4] 0C0000161h +
jmp loc_10189BA  +
mov edx [ecx] +
mov eax ebx +
mov ebx [ecx+8] +
shr eax 2 +
and al 1 +
mov byte ptr [ebp+arg_4+3] al +
mov [ebp+var_8] edx +
mov [ebp+var_2C] esi +
mov [ebp+var_28] edx +
mov [ebp+var_24] ebx +
mov [ebp+var_1C] esi +
mov [ebp+var_20] esi +
mov [ebp+var_18] esi +
mov ecx ebx +
lea edi [ebx+edx] +
cmp [ebp+arg_10] esi +
jz loc_1018860  +
cmp ebx edi +
jz loc_101881C  +
jmp loc_10187BC  +
mov ecx [ebp+var_4] +
mov edx edi +
mov [ebp+var_C] ecx +
call [ebp+arg_8]  +
mov [ebp+var_10] edx +
cmp eax 0FFFFFFFFh +
jz loc_1018851  +
cmp [ebp+arg_C] 0 +
mov [ebp+var_4] edx +
jz loc_10187DE  +
mov ecx eax +
call [ebp+arg_C]  +
mov edx [ebp+arg_14] +
mov ecx eax +
call [ebp+arg_10]  +
test al al +
setnz al  +
cmp al byte ptr [ebp+arg_4+3] +
jz loc_101880E  +
mov eax [ebp+var_C] +
sub eax ebx +
mov [ebp+var_2C] eax +
mov eax [ebp+var_10] +
mov esi edi +
sub esi eax +
test byte ptr [ebp+arg_0] 1 +
mov [ebp+var_18] eax +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
jnz loc_101881F  +
cmp [ebp+var_10] edi +
jnz loc_10187B9  +
cmp [ebp+var_2C] 0 +
jnz loc_101882C  +
mov edx [ebp+var_8] +
mov [ebp+var_2C] edx +
xor eax eax +
cmp [ebp+var_2C] eax +
jnz loc_101882C  +
mov [ebp+var_24] eax +
mov [ebp+var_28] eax +
test esi esi +
jnz loc_1018836  +
and [ebp+var_18] esi +
and [ebp+var_1C] esi +
mov edi [ebp+arg_18] +
and [ebp+var_4] 0 +
lea esi [ebp+var_2C] +
movs   +
movs   +
movs   +
mov edi [ebp+arg_1C] +
lea esi [ebp+var_20] +
movs   +
movs   +
movs   +
jmp loc_10189F4  +
test edx edx +
jl loc_1018856  +
int 3  +
mov edi 207h +
jmp loc_10189B2  +
mov edx [ebp+arg_14] +
mov [ebp+arg_10] edx +
cmp [ebp+arg_C] esi +
jz loc_1018878  +
mov ecx edx +
call [ebp+arg_C]  +
mov [ebp+arg_10] eax +
mov al byte ptr [ebp+arg_4+3] +
mov ecx ebx +
cmp [ebp+arg_10] 7Fh +
jnb loc_1018938  +
cmp [ebp+arg_8] offset loc_1019829 +
jnz loc_1018938  +
test al al +
jnz loc_1018938  +
xor eax eax +
cmp [ebp+arg_10] eax +
jz loc_1018938  +
mov edx edi +
sub edx ebx +
test dl 1 +
jnz loc_1018938  +
cmp [ebp+arg_C] eax +
jnz loc_1018938  +
test bl 1 +
jnz loc_1018938  +
test byte ptr [ebp+arg_0] 2 +
jz loc_1018900  +
cmp [ebp+var_8] eax +
jz loc_1018826  +
mov eax edi +
cmp edi ebx +
jz loc_101899A  +
dec eax  +
dec eax  +
movzx ecx word ptr [eax] +
cmp ecx [ebp+arg_10] +
jz loc_10188E6  +
cmp eax ebx +
jnz loc_10188D6  +
jmp loc_10188FC  +
mov ecx eax +
sub ecx ebx +
inc eax  +
inc eax  +
sub edi eax +
mov esi edi +
mov [ebp+var_2C] ecx +
mov [ebp+var_18] eax +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
cmp eax ebx +
jmp loc_1018930  +
cmp ebx edi +
jz loc_101899A  +
movzx eax word ptr [ecx] +
inc ecx  +
inc ecx  +
cmp eax [ebp+arg_10] +
jz loc_1018918  +
cmp ecx edi +
jnz loc_1018908  +
jmp loc_101892E  +
mov esi edi +
sub esi ecx +
mov [ebp+var_18] ecx +
dec ecx  +
dec ecx  +
mov eax ecx +
sub eax ebx +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_2C] eax +
cmp ecx edi +
jnz loc_101881F  +
jmp loc_101899A  +
cmp ebx edi +
jz loc_101899A  +
jmp loc_1018941  +
mov ecx [ebp+var_4] +
mov edx edi +
mov [ebp+arg_14] ecx +
call [ebp+arg_8]  +
mov [ebp+var_10] edx +
cmp eax 0FFFFFFFFh +
jz loc_10189A5  +
cmp [ebp+arg_C] 0 +
mov [ebp+var_4] edx +
jz loc_1018962  +
mov ecx eax +
call [ebp+arg_C]  +
mov edx [ebp+var_10] +
cmp eax [ebp+arg_10] +
setz al  +
cmp al byte ptr [ebp+arg_4+3] +
jz loc_101898C  +
mov eax [ebp+arg_14] +
mov esi edi +
sub esi edx +
sub eax ebx +
test byte ptr [ebp+arg_0] 1 +
mov [ebp+var_2C] eax +
mov [ebp+var_18] edx +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
jnz loc_101881F  +
cmp edx edi +
jnz loc_101893E  +
cmp [ebp+var_2C] 0 +
jnz loc_101882C  +
mov eax [ebp+var_8] +
mov [ebp+var_2C] eax +
jmp loc_101881F  +
test edx edx +
jge loc_1018855  +
mov edi 27Fh +
mov [ebp+var_4] edx +
mov esi offset a__rv_ucscharac +
mov [ebp+var_28] edi +
mov [ebp+var_24] esi +
jmp loc_10189DA  +
mov esi 1DEh +
mov edi offset aBlob0Rtlislblo +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_28] esi +
mov [ebp+var_24] edi +
lea eax [ebp+var_30] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_30] offset aDW7rtmBaseLs_1 +
mov [ebp+var_2C] offset aRtlsplitencode +
call sub_1008207  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+28h] +
mov eax [esi+24h] +
not ecx  +
cmp eax ecx +
jz loc_1018A15  +
int 3  +
push eax  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+28h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov edx [ebp+arg_14] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
mov [ebp+var_20] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_18] ebx +
cmp edx ebx +
jz loc_1018A6B  +
mov [edx] ebx +
mov esi [ebp+arg_C] +
mov ecx esi +
call sub_1017B62  +
test al al +
jnz loc_1018A88  +
mov esi 874h +
mov edi offset aRtlislblobva_1 +
jmp loc_1018B5F  +
mov ecx edx +
call sub_1017B62  +
test al al +
jnz loc_1018AA2  +
mov esi 875h +
mov edi offset aRtlislblobva_0 +
jmp loc_1018B5F  +
test [ebp+arg_0] 0FFFFFFF0h +
jz loc_1018ABA  +
mov esi 87Bh +
mov edi offset aValidFlagsChec +
jmp loc_1018B5F  +
mov eax [ebp+arg_0] +
and eax 9 +
mov [ebp+arg_C] eax +
jz loc_1018ADE  +
and eax 9 +
lea ecx [eax-1] +
test ecx eax +
jz loc_1018ADE  +
mov esi 87Eh +
mov edi offset aNoMoreThanOneF +
jmp loc_1018B5F  +
mov eax [ebp+arg_0] +
and eax 6 +
cmp al 6 +
jnz loc_1018AF4  +
mov esi 884h +
mov edi offset aFlags0x0000000 +
jmp loc_1018B5F  +
lea edi [ebp+var_30] +
movs   +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_8]  +
movs   +
push 1  +
movs   +
call sub_1019A2D  +
cmp eax ebx +
jge loc_1018B14  +
mov [ebp+var_4] eax +
jmp loc_1018C90  +
cmp [ebp+var_C] ebx +
jnz loc_1018B25  +
mov esi 88Fh +
mov edi offset aDecoder0 +
jmp loc_1018B5F  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_10]  +
push 1  +
call sub_1019FA8  +
cmp eax ebx +
jl loc_1018B0C  +
cmp [ebp+var_14] ebx +
jnz loc_1018B50  +
mov esi 899h +
mov edi offset aEncoder0 +
jmp loc_1018B5F  +
cmp [ebp+var_10] ebx +
jnz loc_1018B6C  +
mov esi 89Ah +
mov edi offset aEncodingsizer0 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_1018DBD  +
cmp [ebp+arg_C] ebx +
jz loc_1018BED  +
mov eax [ebp+var_28] +
mov ecx [ebp+var_30] +
xor esi esi +
test byte ptr [ebp+arg_0] 2 +
mov [ebp+arg_C] eax +
lea edi [ecx+eax] +
jz loc_1018B8E  +
mov ecx [ebp+var_18] +
cmp ecx ebx +
jz loc_1018B8E  +
mov esi [ecx] +
cmp [ebp+arg_4] ebx +
jnz loc_1018CCF  +
cmp eax edi +
jnb loc_1018BD1  +
mov ecx [ebp+arg_C] +
mov edx edi +
call [ebp+var_C]  +
mov ebx edx +
cmp eax 0FFFFFFFFh +
jz loc_1018CA2  +
mov ecx eax +
mov [ebp+arg_C] ebx +
call [ebp+var_10]  +
lea ecx [eax+esi] +
cmp ecx esi +
jb loc_1018CB9  +
cmp ecx eax +
jb loc_1018CB9  +
mov esi ecx +
cmp ebx edi +
jb loc_1018B9B  +
xor ebx ebx +
test byte ptr [ebp+arg_0] 8 +
jz loc_1018D20  +
push [ebp+arg_14]  +
push esi  +
push ebx  +
call sub_10183E2  +
cmp eax ebx +
jl loc_1018B0C  +
mov ebx [ebp+arg_14] +
test byte ptr [ebp+arg_0] 2 +
jz loc_1018C0C  +
mov ecx [ebp+var_18] +
test ecx ecx +
jz loc_1018C0C  +
mov edx ebx +
call sub_1018226  +
test eax eax +
jl loc_1018B0C  +
mov esi [ebx] +
add esi [ebx+8] +
mov eax [ebp+var_28] +
mov edi [ebx+4] +
mov ecx [ebp+var_30] +
add ecx eax +
add edi esi +
cmp [ebp+arg_4] 0 +
mov [ebp+arg_C] eax +
mov [ebp+arg_8] ecx +
jnz loc_1018D5D  +
cmp eax ecx +
jz loc_1018C64  +
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_C] +
call [ebp+var_C]  +
mov [ebp+var_4] edx +
cmp eax 0FFFFFFFFh +
jz loc_1018D3A  +
mov [ebp+arg_C] edx +
push edi  +
mov edx esi +
mov ecx eax +
call [ebp+var_14]  +
test eax eax +
jz loc_1018D4E  +
mov esi eax +
mov eax [ebp+arg_8] +
cmp [ebp+var_4] eax +
jnz loc_1018C32  +
sub esi [ebx+8] +
test byte ptr [ebp+arg_0] 1 +
mov [ebx] esi +
jz loc_1018C8C  +
lea esi [ebp+var_24] +
lea edi [ebp+var_30] +
movs   +
movs   +
movs   +
mov edi [ebp+arg_14] +
lea esi [ebp+var_30] +
movs   +
movs   +
xor eax eax +
mov [ebp+var_20] eax +
mov [ebp+var_24] eax +
mov [ebp+var_1C] eax +
movs   +
and [ebp+var_4] 0 +
lea ecx [ebp+var_24] +
call sub_100819D  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
test ebx ebx +
jl loc_1018CA7  +
int 3  +
mov esi 8ADh +
mov edi offset a__rv_ucscharac +
mov [ebp+var_4] ebx +
jmp loc_1018DBD  +
mov esi 8AEh +
mov edi offset aBuclRtlAddin_0 +
mov [ebp+var_4] 0C0000095h +
jmp loc_1018DBD  +
cmp eax edi +
jnb loc_1018BD1  +
mov ecx [ebp+arg_C] +
mov edx edi +
call [ebp+var_C]  +
mov ebx edx +
cmp eax 0FFFFFFFFh +
jz loc_1018D09  +
mov ecx eax +
mov [ebp+arg_C] ebx +
call [ebp+arg_4]  +
mov ecx eax +
call [ebp+var_10]  +
lea ecx [eax+esi] +
cmp ecx esi +
jb loc_1018D14  +
cmp ecx eax +
jb loc_1018D14  +
mov esi ecx +
cmp ebx edi +
jb loc_1018CD7  +
jmp loc_1018BCF  +
test ebx ebx +
jge loc_1018CA6  +
mov esi 8B6h +
jmp loc_1018CAC  +
mov esi 8B7h +
mov edi offset aBuclRtlAddin_1 +
jmp loc_1018CC3  +
lea eax [ebp+var_24] +
push eax  +
push esi  +
call sub_1017FFD  +
cmp eax ebx +
jl loc_1018B0C  +
lea ebx [ebp+var_24] +
jmp loc_1018BF0  +
test edx edx +
jge loc_1018CA6  +
mov esi 8E2h +
mov edi offset a__rv_ucscharac +
jmp loc_1018DBA  +
test edx edx +
jge loc_1018CA6  +
mov esi 8E3h +
jmp loc_1018DB5  +
cmp eax ecx +
jz loc_1018C64  +
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_C] +
call [ebp+var_C]  +
mov [ebp+var_4] edx +
cmp eax 0FFFFFFFFh +
jz loc_1018D99  +
mov ecx eax +
mov [ebp+arg_C] edx +
call [ebp+arg_4]  +
push edi  +
mov edx esi +
mov ecx eax +
call [ebp+var_14]  +
test eax eax +
jz loc_1018DA8  +
mov esi eax +
mov eax [ebp+arg_8] +
cmp [ebp+var_4] eax +
jnz loc_1018D65  +
jmp loc_1018C64  +
test edx edx +
jge loc_1018CA6  +
mov esi 8EBh +
jmp loc_1018D47  +
test edx edx +
jge loc_1018CA6  +
mov esi 8EDh +
mov edi offset a__rv_newcursor +
mov [ebp+var_4] edx +
lea ecx [ebp+var_24] +
call sub_100819D  +
lea eax [ebp+var_34] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_34] offset aDW7rtmBaseLs_1 +
mov [ebp+var_30] offset aRtltranscodelb +
mov [ebp+var_2C] esi +
mov [ebp+var_28] edi +
call sub_1008207  +
jmp loc_1018C98  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
mov ecx 1000h +
mov [ebp+arg_0] eax +
cmp eax ecx +
jnb loc_1018E0B  +
mov eax ecx +
mov [ebp+arg_0] eax +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp eax [ebp+arg_4] +
jnb loc_1018E84  +
mov esi 200000h +
cmp eax 400000h +
jnb loc_1018E3E  +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
lea edx [ebp+arg_0] +
lea ecx [ebp+arg_8] +
call sub_101132E  +
cmp [ebp+arg_8] 0 +
jl loc_1018E52  +
mov eax [ebp+arg_0] +
jmp loc_1018E4B  +
mov ecx edi +
sub ecx eax +
cmp ecx esi +
jb loc_1018E82  +
add eax esi +
mov [ebp+arg_0] eax +
cmp eax [ebp+arg_4] +
jb loc_1018E1A  +
jmp loc_1018E84  +
mov esi [ebp+arg_8] +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] esi +
mov [ebp+var_10] offset aDW7rtmBaseLs_1 +
mov [ebp+var_C] offset aRtlpsmartlblob +
mov [ebp+var_8] 70Dh +
mov [ebp+var_4] offset aBuclRtlMultipl +
call sub_1008207  +
jmp loc_1018E91  +
mov eax edi +
cmp eax edi +
jbe loc_1018E8A  +
mov eax edi +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi edx +
xor edx edx +
push edi  +
mov [ebp-0Ch] ecx +
mov dword ptr [ebp-4] 0C00000E5h +
cmp ecx edx +
jnz loc_1018ED2  +
mov esi 73Fh +
mov edi offset aNotNullChec_16 +
lea ecx [ebp-4] +
call sub_101705C  +
jmp loc_1018FA8  +
call sub_1017B62  +
test al al +
jnz loc_1018EF6  +
lea ecx [ebp-4] +
call sub_101705C  +
mov dword ptr [ebp-14h] 740h +
mov dword ptr [ebp-10h] offset aRtlislblobva_3 +
jmp loc_1018FAE  +
cmp esi edx +
jnz loc_1018F06  +
mov esi 741h +
mov edi offset aNotNullCheck_8 +
jmp loc_1018EC5  +
***
mov edi [esi] +
mov eax [esi+4] +
mov ebx [ecx] +
sub eax edi +
cmp ebx eax +
jbe loc_101906D  +
cmp [esi+18h] edx +
jnz loc_1018F2F  +
mov esi 74Ch +
mov edi offset aContextDynamic +
mov dword ptr [ebp-4] 0C0000023h +
jmp loc_1018FA8  +
mov eax [esi+10h] +
mov eax [eax] +
lea edi [eax+ebx] +
mov [ebp-14h] edx +
mov [ebp-18h] edx +
mov [ebp-10h] edx +
cmp edi ebx +
jb loc_1018F48  +
cmp edi eax +
jnb loc_1018F5B  +
mov esi 753h +
mov edi offset aBuclRtlAddSize +
mov dword ptr [ebp-4] 0C0000095h +
jmp loc_1018FA0  +
mov edx [esi+0Ch] +
cmp edi edx +
jbe loc_1018F70  +
mov esi 756h +
mov dword ptr [ebp-4] 0C000042Bh +
jmp loc_1018F9E  +
mov ecx [esi+20h] +
test ecx ecx +
jnz loc_1018FCD  +
lea ecx [ebp-8] +
push ecx  +
push edx  +
push edi  +
push eax  +
call sub_1018DEF  +
test eax eax +
jl loc_1019010  +
mov edx [ebp-8] +
cmp edx edi +
jnb loc_1018FD7  +
mov esi 766h +
mov dword ptr [ebp-4] 0C0000023h +
xor edi edi +
lea ecx [ebp-18h] +
call sub_100819D  +
mov [ebp-14h] esi +
mov [ebp-10h] edi +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-4] +
mov dword ptr [ebp-18h] offset aRtlwritedatain +
mov dword ptr [ebp-1Ch] offset aDW7rtmBaseLs_1 +
call sub_1008207  +
jmp loc_1019090  +
lea eax [ebp-8] +
push eax  +
push edi  +
push esi  +
call ecx  +
jmp loc_1018F83  +
***
mov eax [esi+10h] +
mov ecx [esi+18h] +
cmp eax ecx +
jnz loc_1018FF5  +
cmp [eax+4] edx +
jnb loc_101904C  +
push ecx  +
push edx  +
push 0  +
call sub_10183E2  +
test eax eax +
jge loc_101904C  +
jmp loc_1019010  +
cmp eax [esi+14h] +
jnz near ptr dword_1019098  +
cmp [ecx+4] edx +
jnb loc_101901D  +
push ecx  +
push edx  +
push 0  +
call sub_10183E2  +
test eax eax +
jge loc_101901D  +
lea ecx [ebp-18h] +
mov [ebp-4] eax +
call sub_100819D  +
jmp loc_1019090  +
mov eax [esi+10h] +
push dword ptr [eax]  +
push dword ptr [eax+8]  +
mov eax [esi+18h] +
push dword ptr [eax+8]  +
call memcpy  +
mov eax [esi+10h] +
mov eax [eax] +
mov ecx [esi+18h] +
mov [ecx] eax +
mov ecx [esi+1Ch] +
mov eax [esi+18h] +
add esp 0Ch +
mov [esi+10h] eax +
test ecx ecx +
jz loc_101904C  +
mov [ecx] eax +
mov eax [esi+10h] +
mov ecx [eax] +
mov edx [eax+8] +
lea edi [ecx+edx] +
mov [esi] edi +
mov ecx [eax+4] +
add ecx [eax+8] +
mov [esi+4] ecx +
lea ecx [ebp-18h] +
call sub_100819D  +
mov ecx [ebp-0Ch] +
test ebx ebx +
jbe loc_101908C  +
push ebx  +
push dword ptr [ecx+8]  +
push edi  +
call memcpy  +
mov eax [esi+10h] +
add edi ebx +
mov ecx edi +
add esp 0Ch +
sub ecx [eax+8] +
mov [eax] ecx +
mov [esi] edi +
and dword ptr [ebp-4] 0 +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_101D040 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_8] +
and [ebp+var_7C] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov [ebp+var_70] eax +
mov al [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_C] +
lea esi [ebp+var_4C] +
and al 1 +
mov edx esi +
mov [ebp+var_6C] ebx +
mov [ebp+var_54] ecx +
mov [ebp+var_50] 0C00000E5h +
mov [ebp+var_57] al +
mov [ebp+var_78] 48h +
mov [ebp+var_74] edx +
cmp ecx edi +
jnz loc_101910C  +
and [ebp+var_50] 0 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_50] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C515  +
leave   +
retn 14h  +
mov al [ebp+var_57] +
mov ebx [ebp+var_6C] +
test al al +
jz loc_1019161  +
mov ecx [ebp+var_54] +
mov edx edi +
call ebx  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jz loc_101932E  +
mov edx edi +
mov [ebp+var_68] eax +
call ebx  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jz loc_101933D  +
mov edx edi +
mov [ebp+var_64] eax +
call ebx  +
mov ecx edx +
cmp eax 0FFFFFFFFh +
jz loc_1019348  +
mov edx edi +
mov [ebp+var_60] eax +
call ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1019353  +
mov [ebp+var_5C] eax +
mov [ebp+var_54] edx +
jmp loc_10191E2  +
lea eax [ebp+var_68] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
push 0  +
mov ebx offset loc_1017B1A +
push ebx  +
push [ebp+var_6C]  +
push edi  +
push [ebp+var_54]  +
call sub_101834E  +
test eax eax +
jl loc_1019326  +
lea eax [ebp+var_64] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
push 0  +
push ebx  +
push [ebp+var_6C]  +
push edi  +
push [ebp+var_54]  +
call sub_101834E  +
test eax eax +
jl loc_1019326  +
lea eax [ebp+var_60] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
push 0  +
push ebx  +
push [ebp+var_6C]  +
push edi  +
push [ebp+var_54]  +
call sub_101834E  +
test eax eax +
jl loc_1019326  +
lea eax [ebp+var_5C] +
push eax  +
lea eax [ebp+var_54] +
push eax  +
push 0  +
push ebx  +
push [ebp+var_6C]  +
push edi  +
push [ebp+var_54]  +
call sub_101834E  +
test eax eax +
jl loc_1019326  +
mov eax [ebp+var_68] +
call sub_1017AFE  +
mov [ebp+var_55] al +
mov eax [ebp+var_64] +
call sub_1017AFE  +
mov dl al +
mov eax [ebp+var_60] +
mov [ebp+var_58] dl +
call sub_1017AFE  +
mov bl al +
mov eax [ebp+var_5C] +
call sub_1017AFE  +
mov [ebp+var_56] al +
mov al [ebp+var_55] +
cmp al 0FFh +
jz loc_10193A0  +
cmp dl 0FFh +
jz loc_10193A0  +
cmp bl 0FFh +
jz loc_10193A0  +
cmp [ebp+var_56] 0FFh +
jz loc_10193A0  +
lea ecx [ebp+var_4] +
cmp esi ecx +
jnz loc_1019261  +
mov edx [ebp+var_70] +
lea eax [ebp+var_4C] +
sub esi eax +
lea ecx [ebp+var_7C] +
mov [ebp+var_7C] esi +
call loc_1018E9E  +
test eax eax +
jl loc_1019326  +
mov dl [ebp+var_58] +
mov al [ebp+var_55] +
lea esi [ebp+var_4C] +
lea ecx [ebp+var_4] +
cmp esi ecx +
jnb loc_1019332  +
sub ecx esi +
cmp ecx 3 +
jl loc_1019332  +
mov cl dl +
shl al 2 +
shr cl 4 +
and cl 3 +
or cl al +
mov al bl +
shr al 2 +
push 3  +
and al 0Fh +
shl dl 4 +
mov [esi] cl +
or al dl +
pop ecx  +
shl bl 6 +
or bl [ebp+var_56] +
push 3Dh  +
mov [esi+1] al +
pop eax  +
mov [esi+2] bl +
cmp [ebp+var_5C] eax +
jnz loc_10192CF  +
xor ecx ecx +
cmp [ebp+var_60] eax +
setnz cl  +
inc ecx  +
cmp [ebp+var_68] eax +
jz loc_101936B  +
cmp [ebp+var_64] eax +
jnz loc_10192EA  +
mov esi 606h +
mov edi offset aUcschar1 +
jmp loc_10193AA  +
cmp [ebp+var_68] eax +
jz loc_1019377  +
cmp [ebp+var_64] eax +
jz loc_101937E  +
cmp [ebp+var_60] eax +
jz loc_1019388  +
cmp ecx 3 +
jz loc_10192F8  +
cmp [ebp+var_54] edi +
jnz loc_1019394  +
add esi ecx +
cmp [ebp+var_54] edi +
jnz loc_1019106  +
lea eax [ebp+var_4C] +
cmp esi eax +
jz loc_10190EE  +
mov edx [ebp+var_70] +
sub esi eax +
lea ecx [ebp+var_7C] +
mov [ebp+var_7C] esi +
call loc_1018E9E  +
test eax eax +
jge loc_10190EE  +
mov [ebp+var_50] eax +
jmp loc_10190F2  +
test ecx ecx +
jl loc_1019333  +
int 3  +
mov eax 5CCh +
mov [ebp+var_50] ecx +
jmp loc_101935F  +
test ecx ecx +
jge loc_1019332  +
mov eax 5CDh +
jmp loc_1019338  +
test ecx ecx +
jge loc_1019332  +
mov eax 5CEh +
jmp loc_1019338  +
test edx edx +
jge loc_1019332  +
mov eax 5CFh +
mov [ebp+var_50] edx +
mov [ebp+var_60] eax +
mov [ebp+var_5C] offset a__rv_ucscharac +
jmp loc_10193B8  +
mov esi 605h +
mov edi offset aUcschar0 +
jmp loc_10193AA  +
mov esi 60Ah +
jmp loc_1019370  +
mov esi 60Bh +
jmp loc_10192C5  +
mov esi 60Ch +
mov edi offset aUcschar2 +
jmp loc_10193AA  +
mov esi 610h +
mov edi offset aBytestocopy3Cu +
jmp loc_10193AA  +
mov esi 5E3h +
mov edi offset aUcvalue10xffUc +
lea ecx [ebp+var_50] +
call sub_101705C  +
mov [ebp+var_60] esi +
mov [ebp+var_5C] edi +
lea eax [ebp+var_68] +
push eax  +
lea ecx [ebp+var_50] +
mov [ebp+var_64] offset aRtlpdecodebase +
mov [ebp+var_68] offset aDW7rtmBaseLs_1 +
call sub_1008207  +
jmp loc_10190F2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
cmp eax ebx +
jz loc_10193F9  +
mov [eax] ebx +
mov edi [ebp+arg_C] +
cmp edi ebx +
jz loc_1019408  +
mov [edi+4] ebx +
mov [edi] ebx +
mov [edi+8] ebx +
mov eax [ebp+arg_10] +
cmp eax ebx +
jz loc_1019411  +
mov [eax] ebx +
test [ebp+arg_0] 0FFFFFFFEh +
jz loc_1019426  +
mov esi 66Eh +
mov edi offset aValidFlagsChec +
jmp loc_1019489  +
mov esi [ebp+arg_4] +
cmp esi ebx +
jnz loc_1019445  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 670h +
mov [ebp+var_8] offset aNotNullChec_17 +
jmp loc_1019497  +
mov ecx esi +
call sub_1017031  +
test al al +
jnz loc_101945C  +
mov esi 671h +
mov edi offset aRtlislunicod_5 +
jmp loc_1019489  +
cmp [ebp+arg_8] ebx +
jnz loc_1019471  +
cmp edi ebx +
jnz loc_1019471  +
mov esi 672h +
mov edi offset aFixedsizebuffe +
jmp loc_1019489  +
cmp [ebp+arg_10] ebx +
jnz loc_10194B3  +
cmp [ebp+arg_8] ebx +
jz loc_10194B3  +
cmp edi ebx +
jz loc_10194B3  +
mov esi 673h +
mov edi offset aBufferused0Fix +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtldecodebase6 +
mov [ebp+var_14] offset aDW7rtmBaseLs_1 +
call sub_1008207  +
jmp loc_1019503  +
lea ecx [ebp+var_40] +
call sub_1017B39  +
lea eax [ebp+var_40] +
push eax  +
push [ebp+arg_10]  +
push edi  +
push [ebp+arg_8]  +
push 0FFFFFFFFh  +
push ebx  +
call sub_1017E6F  +
cmp eax ebx +
lea ecx [ebp+var_40] +
jge loc_10194DA  +
mov [ebp+var_4] eax +
jmp loc_10194FE  +
mov eax [esi+8] +
push ecx  +
mov ecx [esi] +
add ecx eax +
push ecx  +
push eax  +
push offset loc_1019829  +
push [ebp+arg_0]  +
call sub_101909E  +
cmp eax ebx +
lea ecx [ebp+var_40] +
mov [ebp+var_4] eax +
jl loc_10194FE  +
mov [ebp+var_4] ebx +
call sub_1018A03  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov eax ecx +
cmp eax 80h +
jnb loc_1019527  +
lea ecx [eax-41h] +
cmp ecx 19h +
ja locret_1019538  +
add eax 20h +
retn   +
***
cmp eax 10000h +
jnb locret_1019538  +
push eax  +
call ds:RtlDowncaseUnicodeChar  +
movzx eax ax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
xor eax eax +
lea edi [ebp-0Ch] +
stos   +
cmp ecx esi +
jnb loc_10197EC  +
mov al [ecx] +
mov ebx 80h +
inc ecx  +
mov [ebp-1] al +
test al bl +
jnz loc_1019570  +
movzx eax al +
jmp loc_10197E8  +
mov dl al +
and dl 0E0h +
mov al 0C0h +
cmp dl al +
jnz loc_10195AD  +
cmp ecx esi +
jnb loc_10197EC  +
mov dl [ecx] +
mov [ebp-6] dl +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_10197EC  +
movzx eax byte ptr [ebp-1] +
movzx edx byte ptr [ebp-6] +
and eax 1Fh +
shl eax 6 +
and edx 3Fh +
or eax edx +
cmp eax ebx +
jmp loc_10197E6  +
mov dl [ebp-1] +
and dl 0F0h +
cmp dl 0E0h +
jnz loc_1019611  +
dec esi  +
cmp ecx esi +
jnb loc_10197EC  +
mov dl [ecx] +
inc ecx  +
mov [ebp-2] dl +
mov dl [ecx] +
mov [ebp-3] dl +
mov dl [ebp-2] +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-3] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
movzx eax byte ptr [ebp-1] +
movzx edx byte ptr [ebp-2] +
and eax 0Fh +
push 3Fh  +
shl eax 6 +
pop esi  +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-3] +
shl eax 6 +
and edx esi +
or eax edx +
cmp eax 800h +
jmp loc_10197E6  +
mov dl [ebp-1] +
and dl 0F8h +
cmp dl 0F0h +
jnz loc_1019695  +
add esi 0FFFFFFFEh +
cmp ecx esi +
jnb loc_10197EC  +
mov dl [ecx] +
inc ecx  +
mov [ebp-3] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp-2] dl +
mov dl [ecx] +
mov [ebp-4] dl +
mov dl [ebp-3] +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-2] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-4] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
movzx eax byte ptr [ebp-1] +
movzx edx byte ptr [ebp-3] +
and eax 7 +
shl eax 6 +
push 3Fh  +
pop esi  +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-2] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-4] +
shl eax 6 +
and edx esi +
or eax edx +
cmp eax 10000h +
jmp loc_10197E6  +
mov dl [ebp-1] +
and dl 0FCh +
cmp dl 0F8h +
jnz loc_101973B  +
add esi 0FFFFFFFDh +
cmp ecx esi +
jnb loc_10197EC  +
mov dl [ecx] +
inc ecx  +
mov [ebp-4] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp-3] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp-2] dl +
mov dl [ecx] +
mov [ebp-5] dl +
mov dl [ebp-4] +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-3] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-2] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-5] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
movzx eax byte ptr [ebp-1] +
movzx edx byte ptr [ebp-4] +
and eax 3 +
shl eax 6 +
push 3Fh  +
pop esi  +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-3] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-2] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-5] +
shl eax 6 +
and edx esi +
or eax edx +
cmp eax 200000h +
jmp loc_10197E6  +
mov dl [ebp-1] +
and dl 0FEh +
cmp dl 0FCh +
jnz loc_10197EC  +
add esi 0FFFFFFFCh +
cmp ecx esi +
jnb loc_10197EC  +
mov dl [ecx] +
inc ecx  +
mov [ebp-5] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp-4] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp-3] dl +
mov dl [ecx] +
inc ecx  +
mov [ebp-2] dl +
mov dl [ecx] +
mov [ebp-6] dl +
mov dl [ebp-5] +
and dl al +
inc ecx  +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-4] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-3] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-2] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
mov dl [ebp-6] +
and dl al +
cmp dl bl +
jnz loc_10197EC  +
movzx eax byte ptr [ebp-1] +
movzx edx byte ptr [ebp-5] +
and eax 1 +
shl eax 6 +
push 3Fh  +
pop esi  +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-4] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-3] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-2] +
shl eax 6 +
and edx esi +
or eax edx +
movzx edx byte ptr [ebp-6] +
shl eax 6 +
and edx esi +
or eax edx +
cmp eax 4000000h +
jb loc_10197EC  +
mov edx ecx +
jmp loc_10197F4  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edx [ecx] +
lea eax [edx+4] +
mov [ecx] eax +
movzx eax byte ptr [edx] +
movzx ecx byte ptr [edx+1] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [edx+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [edx+3] +
shl eax 8 +
or eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
cmp ecx edx +
jnb loc_1019896  +
sub edx ecx +
cmp edx 2 +
jb loc_1019896  +
mov eax ecx +
movzx eax word ptr [eax] +
inc ecx  +
mov esi 0D800h +
inc ecx  +
cmp ax si +
jb loc_10198A0  +
mov esi 0DBFFh +
cmp ax si +
ja loc_101988C  +
cmp edx 4 +
jb loc_1019896  +
mov edx ecx +
movzx edx word ptr [edx] +
inc ecx  +
lea esi [edx+2400h] +
mov edi 3FFh +
inc ecx  +
cmp si di +
ja loc_1019896  +
movzx eax ax +
sub eax 0D7F7h +
movzx edx dx +
shl eax 0Ah +
add eax edx +
jmp loc_10198A3  +
mov edx 0DFFFh +
cmp ax dx +
ja loc_10198A0  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
jmp loc_10198A5  +
movzx eax ax +
mov edx ecx +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
cmp ecx edx +
jnb loc_101993B  +
sub edx ecx +
cmp edx 2 +
jb loc_101993B  +
mov eax ecx +
movzx si byte ptr [eax] +
movzx ax byte ptr [eax+1] +
shl si 8 +
or si ax +
inc ecx  +
movzx esi si +
mov eax 0D800h +
inc ecx  +
cmp si ax +
jb loc_1019945  +
mov eax 0DBFFh +
cmp si ax +
ja loc_1019931  +
cmp edx 4 +
jb loc_101993B  +
mov eax ecx +
movzx dx byte ptr [eax] +
movzx ax byte ptr [eax+1] +
shl dx 8 +
or dx ax +
movzx edx dx +
inc ecx  +
lea eax [edx+2400h] +
mov edi 3FFh +
inc ecx  +
cmp ax di +
ja loc_101993B  +
movzx eax si +
sub eax 0D7F7h +
movzx edx dx +
shl eax 0Ah +
add eax edx +
jmp loc_1019948  +
mov eax 0DFFFh +
cmp si ax +
ja loc_1019945  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
jmp loc_101994A  +
movzx eax si +
mov edx ecx +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
pop edi  +
cmp ecx edx +
jnb loc_101996D  +
sub edx ecx +
cmp edx 2 +
jnb loc_1019977  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
leave   +
retn   +
***
movzx eax word ptr [ecx] +
lea edx [ecx+2] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
pop edi  +
cmp ecx edx +
jnb loc_101999E  +
sub edx ecx +
cmp edx 2 +
jnb loc_10199A8  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
leave   +
retn   +
***
movzx ax byte ptr [ecx] +
movzx edx byte ptr [ecx+1] +
shl ax 8 +
movzx eax ax +
or eax edx +
lea edx [ecx+2] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp-4] +
stos   +
pop edi  +
cmp ecx edx +
jnb loc_10199DD  +
sub edx ecx +
cmp edx 4 +
jnb loc_10199E7  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
leave   +
retn   +
***
mov eax [ecx] +
lea edx [ecx+4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor eax eax +
lea edi [ebp-8] +
stos   +
mov [ebp-4] ecx +
pop edi  +
cmp ecx edx +
jnb loc_1019A11  +
sub edx ecx +
cmp edx 4 +
jnb loc_1019A1B  +
or eax 0FFFFFFFFh +
mov edx 0C0000161h +
leave   +
retn   +
***
lea ecx [ebp-4] +
call sub_10197FE  +
mov edx [ebp-4] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov [ebp+var_4] 0C00000E5h +
test esi esi +
jz loc_1019A48  +
and dword ptr [esi] 0 +
xor ecx ecx +
test [ebp+arg_0] 0FFFFFFFEh +
jz loc_1019A62  +
mov esi 1C0h +
mov edi offset aValidFlagsChec +
jmp loc_1019B08  +
test esi esi +
jnz loc_1019A81  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 1C2h +
mov [ebp+var_8] offset aNotNullChec_18 +
jmp loc_1019B16  +
mov edx [ebp+arg_4] +
mov eax 3FBh +
cmp edx eax +
ja loc_1019AC8  +
jz loc_1019AC1  +
mov eax edx +
sub eax 6Ah +
jz loc_1019ABA  +
sub eax 38Bh +
jz loc_1019AB3  +
dec eax  +
jz loc_1019AAC  +
sub eax 4 +
jnz loc_1019AF4  +
mov ecx offset loc_10199F3 +
jmp loc_1019AF4  +
mov ecx offset loc_1019829 +
jmp loc_1019AF4  +
mov ecx offset loc_10198AE +
jmp loc_1019AF4  +
mov ecx offset loc_101953E +
jmp loc_1019AF4  +
mov ecx offset loc_10199C3 +
jmp loc_1019AF4  +
mov eax edx +
sub eax 7D0h +
jz loc_1019AEF  +
dec eax  +
jz loc_1019AE8  +
dec eax  +
jz loc_1019AE1  +
dec eax  +
jnz loc_1019AF4  +
mov ecx offset loc_10199F3 +
jmp loc_1019AF4  +
mov ecx offset loc_10199C3 +
jmp loc_1019AF4  +
mov ecx offset loc_1019984 +
jmp loc_1019AF4  +
mov ecx offset loc_1019953 +
test byte ptr [ebp+arg_0] 1 +
jnz loc_1019B32  +
test ecx ecx +
jnz loc_1019B32  +
mov esi 1D2h +
mov edi offset aTempdecoder0 +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlgetcharacte +
mov [ebp+var_14] offset aDW7rtmBaseLs_2 +
call sub_1008207  +
jmp loc_1019B38  +
and [ebp+var_4] 0 +
mov [esi] ecx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp eax edx +
jnb loc_1019B5E  +
xor eax eax +
mov edx 0C000000Dh +
jmp loc_1019C5B  +
sub eax edx +
push ebx  +
push esi  +
mov esi eax +
mov eax 80h +
cmp ecx eax +
jnb loc_1019B7B  +
cmp esi 1 +
jb loc_1019C04  +
jmp loc_1019C52  +
cmp ecx 800h +
jnb loc_1019B98  +
cmp esi 2 +
jb loc_1019C04  +
mov ebx ecx +
shr ebx 6 +
and bl 1Fh +
or bl 0C0h +
jmp loc_1019C4A  +
cmp ecx 10000h +
jnb loc_1019BCE  +
push edi  +
lea edi [ecx-0DC00h] +
cmp edi 3FFh +
pop edi  +
ja loc_1019BBC  +
xor eax eax +
mov edx 0C0000161h +
jmp loc_1019C59  +
cmp esi 3 +
jb loc_1019C04  +
mov ebx ecx +
shr ebx 0Ch +
and bl 0Fh +
or bl 0E0h +
jmp loc_1019C3D  +
cmp ecx 200000h +
jnb loc_1019BE8  +
cmp esi 4 +
jb loc_1019C04  +
mov ebx ecx +
shr ebx 12h +
and bl 7 +
or bl 0F0h +
jmp loc_1019C30  +
cmp ecx 4000000h +
jnb loc_1019BFF  +
cmp esi 5 +
jb loc_1019C04  +
mov ebx ecx +
shr ebx 18h +
and bl 3 +
jmp loc_1019C20  +
cmp esi 6 +
jnb loc_1019C0D  +
xor eax eax +
mov edx 0C0000023h +
jmp loc_1019C59  +
mov ebx ecx +
shr ebx 1Eh +
and bl 1 +
or bl 0FCh +
mov [edx] bl +
mov ebx ecx +
inc edx  +
shr ebx 18h +
or bl 0F8h +
mov [edx] bl +
mov ebx ecx +
shr ebx 12h +
and bl 3Fh +
inc edx  +
or bl al +
mov [edx] bl +
mov ebx ecx +
shr ebx 0Ch +
and bl 3Fh +
inc edx  +
or bl al +
mov [edx] bl +
mov ebx ecx +
shr ebx 6 +
and bl 3Fh +
inc edx  +
or bl al +
mov [edx] bl +
and cl 3Fh +
inc edx  +
or cl al +
mov [edx] cl +
inc edx  +
mov eax edx +
xor edx edx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp ecx 80h +
jnb loc_1019C70  +
xor eax eax +
inc eax  +
retn   +
***
cmp ecx 800h +
jnb loc_1019C7C  +
push 2  +
pop eax  +
retn   +
***
cmp ecx 10000h +
jnb loc_1019C88  +
push 3  +
pop eax  +
retn   +
***
cmp ecx 200000h +
jnb loc_1019C94  +
push 4  +
pop eax  +
retn   +
***
cmp ecx 4000000h +
sbb eax eax +
add eax 6 +
retn   +
***
cmp ecx 10000h +
jnb loc_1019CB1  +
push 2  +
pop eax  +
retn   +
***
cmp ecx 10FFFFh +
sbb eax eax +
and eax 5 +
dec eax  +
retn   +
***
cmp ecx 10FFFFh +
sbb eax eax +
and eax 5 +
dec eax  +
retn   +
***
cmp ecx 10000h +
sbb eax eax +
and eax 3 +
dec eax  +
retn   +
***
push 4  +
pop eax  +
retn   +
***
mov eax [ecx] +
push ebx  +
push esi  +
lea esi [eax+4] +
mov [ecx] esi +
mov ecx edx +
shr ecx 8 +
movzx ecx cl +
movzx esi dl +
shl esi 8 +
or ecx esi +
mov ebx edx +
shr ebx 10h +
movzx esi bl +
shl ecx 8 +
or ecx esi +
shl ecx 8 +
shr edx 18h +
or ecx edx +
pop esi  +
mov [eax] ecx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax edx +
cmp ecx 10000h +
jnb loc_1019D55  +
cmp eax 2 +
jb loc_1019D62  +
cmp ecx 0DC00h +
jb loc_1019D4F  +
cmp ecx 0DFFFh +
jbe loc_1019D95  +
mov eax edx +
inc edx  +
inc edx  +
jmp loc_1019D8C  +
cmp ecx 110000h +
jnb loc_1019D95  +
cmp eax 4 +
jnb loc_1019D69  +
mov edx 0C0000023h +
jmp loc_1019D9A  +
lea eax [ecx-10000h] +
shr eax 0Ah +
sub eax 2800h +
mov [edx] ax +
lea eax [edx+2] +
and ecx 3FFh +
lea edx [eax+2] +
sub ecx 2400h +
mov [eax] cx +
mov eax edx +
xor edx edx +
jmp loc_1019D9C  +
mov edx 0C0000161h +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub eax edx +
cmp ecx 10000h +
jnb loc_1019DDA  +
cmp eax 2 +
jb loc_1019DE7  +
cmp ecx 0DC00h +
jb loc_1019DCC  +
cmp ecx 0DFFFh +
jbe loc_1019E2E  +
mov eax ecx +
shr eax 8 +
mov [edx] al +
mov [edx+1] cl +
inc edx  +
inc edx  +
jmp loc_1019E28  +
cmp ecx 110000h +
jnb loc_1019E2E  +
cmp eax 4 +
jnb loc_1019DEE  +
mov edx 0C0000023h +
jmp loc_1019E33  +
lea eax [ecx-10000h] +
shr eax 0Ah +
sub eax 2800h +
movzx eax ax +
and ecx 3FFh +
sub ecx 2400h +
push ebx  +
mov [edx+1] al +
mov ebx eax +
movzx eax cx +
shr ebx 8 +
mov [edx] bl +
mov ecx eax +
shr ecx 8 +
mov [edx+2] cl +
mov [edx+3] al +
add edx 4 +
pop ebx  +
mov eax edx +
xor edx edx +
jmp loc_1019E35  +
mov edx 0C0000161h +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 10000h +
jnb loc_1019E76  +
mov eax [ebp+8] +
sub eax edx +
cmp eax 2 +
jnb loc_1019E5C  +
mov edx 0C0000023h +
jmp loc_1019E7B  +
cmp ecx 0DC00h +
jb loc_1019E6C  +
cmp ecx 0DFFFh +
jbe loc_1019E76  +
mov [edx] cx +
lea eax [edx+2] +
xor edx edx +
jmp loc_1019E7D  +
mov edx 0C0000161h +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 110000h +
jnb loc_1019EBD  +
mov eax [ebp+8] +
sub eax edx +
cmp eax 4 +
jnb loc_1019EA4  +
mov edx 0C0000023h +
jmp loc_1019EC2  +
cmp ecx 0DC00h +
jb loc_1019EB4  +
cmp ecx 0DFFFh +
jbe loc_1019EBD  +
mov [edx] ecx +
lea eax [edx+4] +
xor edx edx +
jmp loc_1019EC4  +
mov edx 0C0000161h +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp-4] edx +
cmp ecx 110000h +
jnb loc_1019F10  +
mov eax [ebp+8] +
sub eax edx +
cmp eax 4 +
jnb loc_1019EEF  +
mov edx 0C0000023h +
jmp loc_1019F15  +
cmp ecx 0DC00h +
jb loc_1019EFF  +
cmp ecx 0DFFFh +
jbe loc_1019F10  +
mov edx ecx +
lea ecx [ebp-4] +
call sub_1019CF0  +
mov eax [ebp-4] +
xor edx edx +
jmp locret_1019F17  +
mov edx 0C0000161h +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub eax edx +
cmp eax 4 +
jnb loc_1019F38  +
xor eax eax +
mov edx 0C0000023h +
jmp loc_1019F55  +
lea eax [ecx-0DC00h] +
cmp eax 3FFh +
ja loc_1019F4E  +
xor eax eax +
mov edx 0C0000161h +
jmp loc_1019F55  +
mov [edx] ecx +
lea eax [edx+4] +
xor edx edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
sub eax edx +
mov [ebp-4] edx +
cmp eax 4 +
jnb loc_1019F7A  +
xor eax eax +
mov edx 0C0000023h +
jmp locret_1019F9F  +
lea eax [ecx-0DC00h] +
cmp eax 3FFh +
ja loc_1019F90  +
xor eax eax +
mov edx 0C0000161h +
jmp locret_1019F9F  +
mov edx ecx +
lea ecx [ebp-4] +
call sub_1019CF0  +
mov eax [ebp-4] +
xor edx edx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
xor ecx ecx +
xor esi esi +
xor edi edi +
mov [ebp+var_4] 0C00000E5h +
cmp ebx ecx +
jz loc_1019FC9  +
mov [ebx] ecx +
mov eax [ebp+arg_C] +
cmp eax ecx +
jz loc_1019FD2  +
mov [eax] ecx +
mov eax [ebp+arg_10] +
cmp eax ecx +
jz loc_1019FDB  +
mov [eax] ecx +
test [ebp+arg_0] 0FFFFFFFEh +
jz loc_1019FF0  +
push 5Bh  +
mov edi offset aValidFlagsChec +
jmp loc_101A0E6  +
mov edx [ebp+arg_4] +
mov eax 3FBh +
cmp edx eax +
ja loc_101A073  +
jz loc_101A062  +
mov eax edx +
sub eax 6Ah +
jz loc_101A051  +
sub eax 38Bh +
jz loc_101A040  +
dec eax  +
jz loc_101A02C  +
sub eax 4 +
jnz loc_101A0C2  +
mov ecx offset loc_1019ECD +
mov esi offset loc_1019CC3 +
mov edi offset dword_1007800 +
jmp loc_101A0C2  +
mov ecx offset sub_1019D28 +
mov esi offset loc_1019CA5 +
mov edi offset dword_10077E0 +
jmp loc_101A0C2  +
mov ecx offset loc_1019DA5 +
mov esi offset loc_1019CA5 +
mov edi offset dword_10077F0 +
jmp loc_101A0C2  +
mov ecx offset loc_1019B46 +
mov esi offset loc_1019C64 +
mov edi offset dword_10077D0 +
jmp loc_101A0C2  +
mov ecx offset loc_1019E86 +
mov esi offset loc_1019CC3 +
mov edi offset dword_1007810 +
jmp loc_101A0C2  +
mov eax edx +
sub eax 7D0h +
jz loc_101A0B3  +
dec eax  +
jz loc_101A0A7  +
dec eax  +
jz loc_101A096  +
dec eax  +
jnz loc_101A0C2  +
mov ecx offset loc_1019F5E +
mov esi offset loc_1019CE7 +
mov edi offset dword_1007850 +
jmp loc_101A0C2  +
mov ecx offset loc_1019F20 +
mov esi offset loc_1019CE7 +
mov edi offset dword_1007840 +
jmp loc_101A0C2  +
mov ecx offset loc_1019E3E +
mov edi offset dword_1007830 +
jmp loc_101A0BD  +
mov ecx offset loc_1019E3E +
mov edi offset dword_1007820 +
mov esi offset loc_1019CD5 +
xor eax eax +
test esi esi +
setnz al  +
xor edx edx +
test ecx ecx +
setnz dl  +
cmp edx eax +
jz loc_101A0D5  +
int 3  +
test byte ptr [ebp+arg_0] 1 +
jnz loc_101A111  +
test ecx ecx +
jnz loc_101A111  +
push 6Dh  +
mov edi offset aEncoder0 +
pop esi  +
lea ecx [ebp+var_4] +
call sub_101705C  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_3 +
mov [ebp+var_10] offset aRtlgetcharac_0 +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_1008207  +
jmp loc_101A12D  +
test ebx ebx +
jz loc_101A117  +
mov [ebx] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_101A120  +
mov [eax] esi +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_101A129  +
mov [eax] edi +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1017B39  +
and dword ptr [esi+2Ch] 0 +
and dword ptr [esi+30h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
jz loc_101A18C  +
mov esi 0BBh +
mov edi offset aValidFlagsChec +
jmp loc_101A1A4  +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_8] +
test ecx ecx +
jnz loc_101A1CE  +
test edx edx +
jz loc_101A1CE  +
mov esi 0BCh +
mov edi offset aData0Count0 +
lea ecx [ebp+var_4] +
call sub_101705C  +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_4 +
mov [ebp+var_10] offset aRtlwriteucsdat +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_1008207  +
jmp loc_101A1E2  +
mov eax [ebp+arg_C] +
push eax  +
call dword ptr [eax+30h]  +
test eax eax +
jge loc_101A1DE  +
mov [ebp+var_4] eax +
jmp loc_101A1E2  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_101D040 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov [ebp+var_48] eax +
lea eax [ebp+var_44] +
lea esi [ecx+edx*4] +
mov edx eax +
push edi  +
mov edi ecx +
mov [ebp+var_50] 40h +
mov [ebp+var_4C] edx +
cmp ecx esi +
jz loc_101A2CF  +
mov ebx [edi] +
add edi 4 +
cmp ebx 10000h +
sbb ecx ecx +
and ecx 0FFFFFFFEh +
add ecx 4 +
lea edx [ebp+var_4] +
sub edx ecx +
cmp edx eax +
jnb loc_101A262  +
lea ecx [ebp+var_44] +
sub eax ecx +
mov [ebp+var_54] eax +
cmp eax [ebp+var_50] +
ja loc_101A29B  +
mov edx [ebp+var_48] +
lea ecx [ebp+var_54] +
call loc_1018E9E  +
test eax eax +
jl loc_101A297  +
lea eax [ebp+var_44] +
lea ecx [ebp+var_4] +
push ecx  +
mov edx eax +
mov ecx ebx +
call sub_1019D28  +
test eax eax +
jz loc_101A29C  +
cmp edi esi +
jnz loc_101A227  +
lea ecx [ebp+var_44] +
cmp eax ecx +
jz loc_101A2CF  +
sub eax ecx +
mov [ebp+var_54] eax +
cmp eax [ebp+var_50] +
ja loc_101A29B  +
mov edx [ebp+var_48] +
lea ecx [ebp+var_54] +
call loc_1018E9E  +
test eax eax +
jge loc_101A2CF  +
mov esi eax +
jmp loc_101A2D1  +
int 3  +
test edx edx +
jge loc_101A29B  +
lea eax [ebp+var_58] +
mov esi edx +
push eax  +
lea ecx [ebp+var_48] +
mov [ebp+var_48] esi +
mov [ebp+var_58] offset aDW7rtmBaseLs_4 +
mov [ebp+var_54] offset aCrtlsmartucsen +
mov [ebp+var_50] 134h +
mov [ebp+var_4C] offset a__rv_newcursor +
call sub_1008207  +
jmp loc_101A2D1  +
xor esi esi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100C515  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_101A1F0  +
***
push ebp  +
mov ebp esp +
push ecx  +
push edx  +
xor edx edx +
mov [ebp-4] ecx +
inc edx  +
lea ecx [ebp-4] +
call sub_101A1F0  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] 0C00000E5h +
cmp [ebp+arg_0] edi +
jz loc_101A340  +
push 5Fh  +
mov edi offset aValidFlagsChec +
jmp loc_101A379  +
mov esi [ebp+arg_10] +
cmp esi edi +
jnz loc_101A35F  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] 60h +
mov [ebp+var_8] offset aNotNullCheck_8 +
jmp loc_101A388  +
cmp [esi+2Ch] edi +
jz loc_101A36D  +
push 61h  +
mov edi offset aContextEncodin +
jmp loc_101A379  +
cmp [esi+30h] edi +
jz loc_101A3A4  +
push 62h  +
mov edi offset aContextMultien +
pop esi  +
lea ecx [ebp+var_4] +
call sub_101705C  +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_10] offset aRtlinitializ_0 +
mov [ebp+var_14] offset aDW7rtmBaseLs_4 +
call sub_1008207  +
jmp loc_101A3D0  +
push esi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0FFFFFFFFh  +
push edi  +
call sub_1017E6F  +
cmp eax edi +
jge loc_101A3BF  +
mov [ebp+var_4] eax +
jmp loc_101A3D0  +
mov dword ptr [esi+2Ch] offset byte_101A315 +
mov dword ptr [esi+30h] offset loc_101A2E9 +
mov [ebp+var_4] edi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] 0C00000E5h +
jz loc_101A405  +
mov esi 0DEh +
mov edi offset aValidFlagsChec +
jmp loc_101A438  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_101A423  +
mov esi 0DFh +
mov edi offset aNotNullChec_16 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_101A50B  +
mov ecx esi +
call sub_1017B62  +
test al al +
jnz loc_101A445  +
mov esi 0E0h +
mov edi offset aRtlislblobva_3 +
lea ecx [ebp+var_4] +
call sub_101705C  +
jmp loc_101A50B  +
cmp [ebp+arg_8] 0 +
jnz loc_101A457  +
mov esi 0E1h +
mov edi offset aNotNullChec_18 +
jmp loc_101A416  +
mov edx [ebp+arg_C] +
test edx edx +
jnz loc_101A46A  +
mov esi 0E2h +
mov edi offset aNotNullChec_19 +
jmp loc_101A416  +
cmp [ebp+arg_8] offset loc_1019829 +
jnz loc_101A485  +
cmp dword ptr [edx+2Ch] offset byte_101A315 +
jnz loc_101A485  +
mov ecx esi +
call loc_1018E9E  +
jmp loc_101A4F0  +
mov ebx [esi+8] +
mov edi [esi] +
add edi ebx +
lea esi [ebp+var_94] +
cmp ebx edi +
jz loc_101A52D  +
mov edx edi +
mov ecx ebx +
call [ebp+arg_8]  +
mov ebx edx +
cmp eax 0FFFFFFFFh +
jz loc_101A4F9  +
mov [esi] eax +
add esi 4 +
lea eax [ebp+var_14] +
cmp esi eax +
jnz loc_101A4D1  +
push [ebp+arg_C]  +
lea eax [ebp+var_94] +
push 20h  +
push eax  +
push 0  +
call sub_101A169  +
test eax eax +
jl loc_101A4F4  +
lea esi [ebp+var_94] +
cmp ebx edi +
jnz loc_101A49A  +
lea eax [ebp+var_94] +
cmp esi eax +
jz loc_101A52D  +
push [ebp+arg_C]  +
sub esi eax +
sar esi 2 +
push esi  +
push eax  +
push 0  +
call sub_101A169  +
test eax eax +
jge loc_101A52D  +
mov [ebp+var_4] eax +
jmp loc_101A531  +
test ebx ebx +
jl loc_101A4FE  +
int 3  +
mov esi 0F9h +
mov edi offset a__rv_ucscharac +
mov [ebp+var_4] ebx +
lea eax [ebp+var_14] +
push eax  +
lea ecx [ebp+var_4] +
mov [ebp+var_14] offset aDW7rtmBaseLs_4 +
mov [ebp+var_10] offset aRtlwritedecode +
mov [ebp+var_C] esi +
mov [ebp+var_8] edi +
call sub_1008207  +
jmp loc_101A531  +
and [ebp+var_4] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov eax large fs:18h +
push [ebp+arg_4]  +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlReAllocateHeap  +
pop ebp  +
retn 8  +
***
