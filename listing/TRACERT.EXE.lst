mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40Ch +
mov eax dword_10030A0 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_8] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ds:getnameinfo +
push edi  +
mov [ebp+var_409] 0 +
mov edi 401h +
jz loc_100123D  +
push 4  +
push 0  +
push 0  +
push edi  +
lea eax [ebp+var_408] +
push eax  +
push [ebp+arg_4]  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100123D  +
lea eax [ebp+var_408] +
push eax  +
push 273Ah  +
push 1  +
mov [ebp+var_409] 1 +
call sub_10025D9  +
add esp 0Ch +
push 2  +
push 0  +
push 0  +
push edi  +
lea eax [ebp+var_408] +
push eax  +
push [ebp+arg_4]  +
push ebx  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jz loc_100126E  +
push 2724h  +
push 1  +
call sub_10025D9  +
pop ecx  +
pop ecx  +
push 1  +
call ds:exit  +
cmp [ebp+var_409] 0 +
lea eax [ebp+var_408] +
push eax  +
jz loc_1001285  +
push 2710h  +
jmp loc_100128A  +
push 273Dh  +
push 1  +
call sub_10025D9  +
mov ecx [ebp+var_4] +
xor ecx ebp +
add esp 0Ch +
call sub_100215C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10030A0 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
stos   +
push 2  +
pop eax  +
push [ebp+arg_4]  +
mov word ptr [ebp+var_14] ax +
mov eax [ebp+arg_0] +
mov [ebp+var_10] eax +
push 10h  +
lea eax [ebp+var_14] +
push eax  +
call sub_10011D5  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100215C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_10030A0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
push 17h  +
lea edi [ebp+var_20] +
stos   +
pop eax  +
push [ebp+arg_4]  +
mov word ptr [ebp+var_20] ax +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
push 1Ch  +
lea eax [ebp+var_20] +
push eax  +
movs   +
call sub_10011D5  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100215C  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1001363  +
push [ebp+arg_0]  +
push 2711h  +
push 1  +
call sub_10025D9  +
add esp 0Ch +
jmp loc_1001371  +
push 2712h  +
push 1  +
call sub_10025D9  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
and [ebp+var_4] 0 +
lea ecx [eax-1] +
mov eax [ebp+arg_C] +
cmp eax ecx +
mov ecx [ebp+arg_4] +
jnz loc_10013AA  +
push dword ptr [ecx+eax*4]  +
push 2734h  +
push 1  +
call sub_10025D9  +
add esp 0Ch +
xor al al +
jmp locret_10013F9  +
push esi  +
lea esi [ecx+eax*4] +
push 0  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+4]  +
call ds:strtoul  +
mov ecx [ebp+var_4] +
add esp 0Ch +
test ecx ecx +
jz loc_10013D2  +
mov cl [ecx] +
test cl cl +
jz loc_10013D2  +
cmp cl 20h +
jnz loc_10013E5  +
cmp eax [ebp+arg_10] +
jb loc_10013E5  +
cmp eax [ebp+arg_14] +
ja loc_10013E5  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov al 1 +
jmp loc_10013F8  +
push dword ptr [esi]  +
push 2735h  +
push 1  +
call sub_10025D9  +
add esp 0Ch +
xor al al +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push edi  +
push 8  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
mov eax [ebp+arg_0] +
mov [ebp+var_1C] eax +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push 0  +
push [ebp+arg_4]  +
mov [ebp+var_20] 1 +
call ds:getaddrinfo  +
pop edi  +
test eax eax +
jz loc_100143E  +
xor eax eax +
jmp locret_1001455  +
mov eax [ebp+arg_0] +
push dword ptr [eax+10h]  +
push dword ptr [eax+18h]  +
push [ebp+arg_8]  +
call memcpy  +
xor eax eax +
add esp 0Ch +
inc eax  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
mov edx [ebp+arg_4] +
test eax eax +
jz loc_1001499  +
cmp eax edx +
jz loc_1001499  +
mov eax offset aIpv4 +
cmp edx 2 +
jz loc_1001482  +
mov eax offset aIpv6 +
push eax  +
push [ebp+arg_8]  +
push 2740h  +
push 1  +
call sub_10025D9  +
add esp 10h +
xor al al +
jmp loc_100149D  +
mov [ecx] edx +
mov al 1 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10014BC  +
cmp ecx 7FFFFFFFh +
jbe loc_10014C1  +
mov eax 80070057h +
test eax eax +
jl loc_1001505  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10014F8  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10014F3  +
mov cl [edx+eax] +
test cl cl +
jz loc_10014F3  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_10014DF  +
pop edi  +
test esi esi +
jnz loc_10014FE  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
mov esi ds:getaddrinfo +
push edi  +
push 8  +
pop ecx  +
xor ebx ebx +
mov [eax] bl +
xor eax eax +
push 4  +
lea edi [ebp+var_20] +
stos   +
mov eax [ebp+arg_0] +
pop edi  +
mov [ebp+var_1C] eax +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
push [ebp+arg_4]  +
mov [ebp+var_20] edi +
call esi  +
test eax eax +
jnz loc_1001594  +
mov esi [ebp+arg_0] +
mov eax [esi+10h] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
push dword ptr [esi+10h]  +
push dword ptr [esi+18h]  +
push [ebp+arg_8]  +
call memcpy  +
add esp 0Ch +
cmp [ebp+arg_18] bl +
jz loc_1001587  +
push edi  +
push ebx  +
push ebx  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push dword ptr [esi+10h]  +
push dword ptr [esi+18h]  +
call ds:getnameinfo  +
mov esi [ebp+arg_0] +
mov bl 1 +
push esi  +
call ds:freeaddrinfo  +
mov al bl +
jmp loc_10015EE  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
push [ebp+arg_4]  +
mov [ebp+var_20] 2 +
call esi  +
test eax eax +
jnz loc_10015EC  +
mov esi [ebp+arg_0] +
mov eax [esi+10h] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
push dword ptr [esi+10h]  +
push dword ptr [esi+18h]  +
push [ebp+arg_8]  +
call memcpy  +
add esp 0Ch +
cmp [esi+14h] ebx +
jz loc_10015D3  +
mov esi [esi+14h] +
jmp loc_10015D6  +
mov esi [ebp+arg_4] +
push esi  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
call sub_10014A6  +
mov esi [ebp+arg_0] +
test eax eax +
setnl bl  +
jmp loc_1001589  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5B4h +
mov eax dword_10030A0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push edi  +
mov [ebp+cbBytesReturned] esi +
mov [ebp+var_5AC] edi +
mov [ebp+var_5A4] 1Eh +
mov [ebp+var_5A0] 1 +
mov [ebp+var_585] 0 +
mov [ebp+var_5A8] 0FA0h +
mov [ebp+var_595] 0 +
mov [ebp+var_58C] edi +
call ds:SetThreadUILanguage  +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:HeapSetInformation  +
push offset stru_1004460  +
push 2  +
call ds:WSAStartup  +
cmp eax edi +
jz loc_100168C  +
push eax  +
push 2732h  +
push 1  +
call sub_10025D9  +
xor eax eax +
add esp 0Ch +
inc eax  +
jmp loc_1001EA6  +
push ebx  +
mov ebx 80h +
push ebx  +
lea eax [ebp+vOutBuffer] +
push edi  +
push eax  +
call memset  +
push ebx  +
lea eax [ebp+vInBuffer] +
push edi  +
push eax  +
call memset  +
add esp 18h +
cmp [ebp+arg_0] 2 +
lea eax [ebp+var_70] +
mov [ebp+var_5B4] ebx +
mov [ebp+var_594] 1 +
mov byte ptr [ebp-593h] 0 +
mov [ebp+var_592] 0 +
mov [ebp+var_591] 0 +
mov [ebp+var_590] eax +
jge loc_10016EE  +
push dword ptr [esi]  +
push 2713h  +
jmp loc_1001A95  +
xor edi edi +
inc edi  +
cmp [ebp+arg_0] edi +
jle loc_100195D  +
mov eax [esi+edi*4] +
mov cl [eax] +
cmp cl 2Dh +
jz loc_100175A  +
cmp cl 2Fh +
jz loc_100175A  +
push dword ptr [ebp+var_5A0]  +
lea ecx [ebp+var_474] +
push 401h  +
push ecx  +
lea ecx [ebp+var_5B4] +
push ecx  +
lea ecx [ebp+vInBuffer] +
push ecx  +
push eax  +
push [ebp+var_58C]  +
mov [ebp+var_595] 1 +
call sub_100150E  +
test al al +
jz loc_100197D  +
lea eax [edi+1] +
cmp eax [ebp+arg_0] +
jge loc_100194A  +
push 2713h  +
jmp loc_10019BD  +
movsx ecx byte ptr [eax+1] +
cmp ecx 53h +
jg loc_1001816  +
jz loc_10017C8  +
sub ecx 34h +
jz loc_10017C3  +
dec ecx  +
dec ecx  +
jz loc_10017A7  +
sub ecx 9 +
jz loc_10016E2  +
sub ecx 13h +
jnz loc_1001997  +
push eax  +
push 17h  +
lea eax [ebp+var_58C] +
push eax  +
call sub_100145E  +
test al al +
jz loc_1001A9F  +
or [ebp+var_592] 1 +
jmp loc_100194A  +
push eax  +
push 17h  +
lea eax [ebp+var_58C] +
push eax  +
call sub_100145E  +
test al al +
jz loc_1001A9F  +
jmp loc_100194A  +
push eax  +
push 2  +
jmp loc_10017AA  +
push eax  +
push 17h  +
lea eax [ebp+var_58C] +
push eax  +
call sub_100145E  +
test al al +
jz loc_1001A9F  +
mov eax [ebp+arg_0] +
dec eax  +
cmp edi eax +
jz loc_100198A  +
lea eax [ebp+vOutBuffer] +
push eax  +
inc edi  +
push dword ptr [esi+edi*4]  +
push [ebp+var_58C]  +
call sub_1001402  +
test eax eax +
jnz loc_100194A  +
push dword ptr [esi+edi*4]  +
push 273Fh  +
jmp loc_1001A95  +
sub ecx 64h +
jz loc_1001943  +
sub ecx 4 +
jz loc_1001933  +
dec ecx  +
dec ecx  +
jz loc_1001858  +
sub ecx 0Dh +
jnz loc_1001997  +
push 0FFFFFFFFh  +
lea eax [ebp+var_5A8] +
push 1  +
push edi  +
push [ebp+arg_0]  +
push esi  +
push eax  +
call sub_100137A  +
test al al +
jz loc_1001A9F  +
inc edi  +
jmp loc_100194A  +
push eax  +
push 2  +
lea eax [ebp+var_58C] +
push eax  +
call sub_100145E  +
test al al +
jz loc_1001A9F  +
mov al [ebp+var_591] +
mov [ebp+var_585] al +
movzx eax al +
lea ecx [eax+7] +
cmp ecx 28h +
jg loc_10019B8  +
mov ebx [ebp+var_590] +
lea esi [eax+ebx] +
mov byte ptr [eax+ebx] 83h +
mov byte ptr [esi+1] 3 +
mov byte ptr [esi+2] 4 +
add [ebp+var_591] 3 +
jmp loc_10018FF  +
mov eax [ebp+cbBytesReturned] +
mov eax [eax+edi*4+4] +
cmp byte ptr [eax] 2Dh +
jz loc_1001909  +
movzx eax [ebp+var_591] +
add eax 4 +
cmp eax 28h +
jg loc_10019B8  +
mov eax [ebp+cbBytesReturned] +
inc edi  +
mov eax [eax+edi*4] +
push eax  +
mov [ebp+var_5B0] eax +
call ds:inet_addr  +
cmp eax 0FFFFFFFFh +
jz loc_10019CB  +
movzx ecx [ebp+var_591] +
mov [ecx+ebx] eax +
add byte ptr [esi+1] 4 +
add [ebp+var_591] 4 +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFEh +
cmp edi eax +
jl loc_10018A8  +
mov al [esi+1] +
mov cl al +
add cl [ebp+var_585] +
add al 4 +
mov [esi+1] al +
add [ebp+var_591] 4 +
mov esi [ebp+cbBytesReturned] +
mov [ebp+var_585] cl +
mov ebx 80h +
jmp loc_100194A  +
push 0FFh  +
lea eax [ebp+var_5A4] +
jmp loc_100183D  +
mov [ebp+var_5A0] 0 +
inc edi  +
cmp edi [ebp+arg_0] +
jl loc_10016FA  +
cmp [ebp+var_595] 0 +
jnz loc_10019DB  +
push 2739h  +
push 1  +
call sub_10025D9  +
push 2713h  +
push 1  +
call sub_10025D9  +
add esp 10h +
jmp loc_1001A9F  +
push dword ptr [esi+edi*4]  +
push 2714h  +
jmp loc_1001A95  +
push dword ptr [esi+edi*4]  +
push 2734h  +
jmp loc_1001A95  +
push eax  +
push 2738h  +
push 1  +
call sub_10025D9  +
push 2713h  +
push 1  +
call sub_10025D9  +
add esp 14h +
jmp loc_1001A9F  +
push 2737h  +
push 1  +
call sub_10025D9  +
pop ecx  +
pop ecx  +
jmp loc_1001A9F  +
push [ebp+var_5B0]  +
push 2736h  +
jmp loc_1001A95  +
movzx eax word ptr [ebp+vInBuffer] +
mov [ebp+var_5B0] eax +
cmp eax 2 +
jnz loc_1001A13  +
cmp [ebp+var_585] 0 +
jz loc_1001A0C  +
movzx eax [ebp+var_585] +
mov ecx [ebp+var_500] +
mov edx [ebp+var_590] +
mov [eax+edx] ecx +
call IcmpCreateFile  +
jmp loc_1001A7E  +
cmp word ptr [ebp+vOutBuffer] 0 +
jnz loc_1001A79  +
xor edi edi +
push edi  +
push edi  +
push eax  +
call ds:socket  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_1001A4D  +
call ds:WSAGetLastError  +
push eax  +
push 2741h  +
push 1  +
call sub_10025D9  +
add esp 0Ch +
push 1  +
call ds:exit  +
push edi  +
push edi  +
lea eax [ebp+cbBytesReturned] +
push eax  +
push ebx  +
lea eax [ebp+vOutBuffer] +
push eax  +
push ebx  +
lea eax [ebp+vInBuffer] +
push eax  +
push 0C8000014h  +
push esi  +
call ds:WSAIoctl  +
push esi  +
call ds:closesocket  +
call Icmp6CreateFile  +
mov [ebp+cbBytesReturned] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1001AAD  +
call ds:GetLastError  +
push eax  +
push 2715h  +
push 1  +
call sub_10025D9  +
add esp 0Ch +
call ds:WSACleanup  +
xor eax eax +
inc eax  +
jmp loc_1001EA5  +
push 2  +
push 0  +
push 0  +
push 41h  +
lea eax [ebp+var_48] +
push eax  +
push [ebp+var_5B4]  +
lea eax [ebp+vInBuffer] +
push eax  +
call ds:getnameinfo  +
cmp byte ptr [ebp+var_474] 0 +
push [ebp+var_5A4]  +
lea eax [ebp+var_48] +
push eax  +
jz loc_1001AF7  +
lea eax [ebp+var_474] +
push eax  +
push 2716h  +
push 1  +
call sub_10025D9  +
add esp 14h +
jmp loc_1001B06  +
push 2733h  +
push 1  +
call sub_10025D9  +
add esp 10h +
movzx eax [ebp+var_594] +
cmp eax [ebp+var_5A4] +
ja loc_1001E84  +
mov edi offset dword_1004600 +
mov ebx 273Ch +
cmp [ebp+var_594] 0 +
jz loc_1001E84  +
push eax  +
push 2717h  +
push 1  +
call sub_10025D9  +
add esp 0Ch +
and [ebp+var_58C] 0 +
mov [ebp+var_585] 0 +
cmp [ebp+var_5B0] 2 +
push [ebp+var_5A8]  +
lea eax [ebp+var_594] +
push 84h  +
push edi  +
push eax  +
push 40h  +
push offset unk_1004420  +
jnz loc_1001C69  +
push [ebp+var_500]  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push [ebp+cbBytesReturned]  +
call IcmpSendEcho2  +
test eax eax +
jnz loc_1001BE3  +
call ds:GetLastError  +
mov esi eax +
xor eax eax +
cmp esi 2B02h +
jnz loc_1001DC6  +
push 273Bh  +
push 1  +
call sub_10025D9  +
cmp [ebp+var_58C] 2 +
pop ecx  +
pop ecx  +
jnz loc_1001D25  +
cmp [ebp+var_585] 0 +
jz loc_1001CDF  +
push dword ptr [ebp+var_5A0]  +
push [ebp+var_5AC]  +
call sub_10012A7  +
jmp loc_1001CD3  +
mov esi dword_1004604 +
mov eax edi +
test esi esi +
jnz loc_1001C17  +
push dword_1004608  +
call sub_1001344  +
cmp [ebp+var_58C] 2 +
jz loc_1001DAF  +
mov eax dword_1004600 +
mov [ebp+var_5AC] eax +
jmp loc_1001D1E  +
cmp esi 2B05h +
jnz loc_1001DC6  +
push dword_1004608  +
call sub_1001344  +
cmp [ebp+var_58C] 2 +
jnz loc_1001C07  +
push dword ptr [ebp+var_5A0]  +
push dword_1004600  +
call sub_10012A7  +
push ebx  +
push 1  +
call sub_10025D9  +
mov eax dword_1004608 +
pop ecx  +
pop ecx  +
mov ecx 3E8h +
cmp eax ecx +
jnb loc_1001D25  +
jmp loc_1001DA1  +
lea eax [ebp+vInBuffer] +
push eax  +
lea eax [ebp+vOutBuffer] +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push [ebp+cbBytesReturned]  +
call Icmp6SendEcho2  +
test eax eax +
jnz loc_1001CE6  +
call ds:GetLastError  +
mov esi eax +
xor eax eax +
cmp esi 2B02h +
jnz loc_1001E1D  +
push 273Bh  +
push 1  +
call sub_10025D9  +
cmp [ebp+var_58C] 2 +
pop ecx  +
pop ecx  +
jnz loc_1001D25  +
cmp [ebp+var_585] 0 +
jz loc_1001CDF  +
push dword ptr [ebp+var_5A0]  +
lea eax [ebp+var_484] +
push eax  +
call sub_10012F2  +
push ebx  +
push 1  +
call sub_10025D9  +
pop ecx  +
pop ecx  +
jmp loc_1001D25  +
push 2728h  +
jmp loc_1001CD4  +
mov esi dword_100461C +
mov eax edi +
test esi esi +
jnz loc_1001D56  +
push dword_1004620  +
call sub_1001344  +
cmp [ebp+var_58C] 2 +
jz loc_1001E0B  +
lea edi [ebp+var_484] +
mov esi (offset dword_1004604+2) +
movs   +
movs   +
movs   +
movs   +
mov edi offset dword_1004600 +
mov [ebp+var_585] 1 +
inc [ebp+var_58C]  +
cmp [ebp+var_58C] 3 +
jl loc_1001B4E  +
inc [ebp+var_594]  +
movzx eax [ebp+var_594] +
cmp eax [ebp+var_5A4] +
jbe loc_1001B23  +
jmp loc_1001E84  +
cmp esi 2B05h +
jnz loc_1001E1D  +
push dword_1004620  +
call sub_1001344  +
cmp [ebp+var_58C] 2 +
jnz loc_1001D0A  +
push dword ptr [ebp+var_5A0]  +
push (offset dword_1004604+2)  +
call sub_10012F2  +
push ebx  +
push 1  +
call sub_10025D9  +
mov eax dword_1004620 +
pop ecx  +
pop ecx  +
cmp eax 3E8h +
jnb loc_1001D25  +
mov ecx 3E8h +
sub ecx eax +
push ecx  +
call ds:Sleep  +
jmp loc_1001D25  +
push dword ptr [ebp+var_5A0]  +
push dword_1004600  +
call sub_10012A7  +
push ebx  +
jmp loc_1001E7B  +
cmp esi 2AF8h +
jb loc_1001E25  +
test eax eax +
jz loc_1001DED  +
push dword ptr [ebp+var_5A0]  +
push dword ptr [eax]  +
call sub_10012A7  +
push 2719h  +
push 1  +
call sub_10025D9  +
pop ecx  +
pop ecx  +
mov eax dword_1003000 +
xor ecx ecx +
jmp loc_1001E05  +
cmp eax 2B2Ah +
jz loc_1001E74  +
mov eax dword_1003008[ecx*8] +
inc ecx  +
cmp eax esi +
jnz loc_1001DF6  +
jmp loc_1001E74  +
push dword ptr [ebp+var_5A0]  +
push (offset dword_1004604+2)  +
call sub_10012F2  +
jmp loc_1001DC0  +
cmp esi 2AF8h +
jnb loc_1001E37  +
push esi  +
push 271Ah  +
push 1  +
call sub_10025D9  +
add esp 0Ch +
jmp loc_1001E84  +
test eax eax +
jz loc_1001E58  +
push dword ptr [ebp+var_5A0]  +
add eax 6 +
push eax  +
call sub_10012F2  +
push 2719h  +
push 1  +
call sub_10025D9  +
pop ecx  +
pop ecx  +
mov eax dword_1003000 +
xor ecx ecx +
jmp loc_1001E70  +
cmp eax 2B2Ah +
jz loc_1001E74  +
mov eax dword_1003008[ecx*8] +
inc ecx  +
cmp eax esi +
jnz loc_1001E61  +
push dwMessageId[ecx*8]  +
push 1  +
call sub_10025D9  +
pop ecx  +
pop ecx  +
push 271Bh  +
push 1  +
call sub_10025D9  +
pop ecx  +
pop ecx  +
push [ebp+cbBytesReturned]  +
call IcmpCloseHandle  +
call ds:WSACleanup  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100215C  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1001ED5  +
test eax eax +
jnz loc_1001EDA  +
mov ecx [esi] +
test ecx ecx +
jz loc_1001ED2  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1001EC6  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10040E4 +
push offset dword_10040D4  +
push dword_10040E0  +
mov dword_10040D4 eax +
push offset dword_10040C4  +
push offset dword_10040C8  +
push offset dword_10040C0  +
call ds:__getmainargs  +
add esp 14h +
mov dword_10040D0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1001F62  +
cmp eax esi +
jnz loc_1001F55  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_1001F65  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1001F3C  +
xor esi esi +
inc esi  +
mov eax dword_100468C +
cmp eax esi +
jnz loc_1001F78  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1001FB3  +
mov eax dword_100468C +
test eax eax +
jnz loc_1001FAD  +
mov dword_100468C esi +
push offset dword_1001104  +
push offset dword_10010F8  +
call sub_1001EB9  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001FB3  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_100207D  +
mov dword_10040DC esi +
mov eax dword_100468C +
cmp eax esi +
jnz loc_1001FD7  +
push offset dword_10010F4  +
push offset dword_10010EC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100468C 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1001FE4  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1004694 ebx +
jz loc_1002005  +
push offset dword_1004694  +
call sub_1002279  +
pop ecx  +
test eax eax +
jz loc_1002005  +
push ebx  +
push 2  +
push ebx  +
call dword_1004694  +
push dword_10040C4  +
push dword_10040C8  +
push dword_10040C0  +
call sub_10015FA  +
add esp 0Ch +
mov dword_10040D8 eax +
cmp dword_10040CC ebx +
jnz loc_1002063  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_10040D8 eax +
xor ebx ebx +
cmp dword_10040CC ebx +
jnz loc_1002063  +
push eax  +
call ds:_exit  +
cmp dword_10040DC ebx +
jnz loc_1002071  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10040D8 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100209A  +
xor eax eax +
jmp loc_10020E7  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1002096  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_10020D4  +
cmp ecx 20Bh +
jnz loc_1002096  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1002096  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_10020E2  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1002096  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_10040CC eax +
call sub_1002412  +
push eax  +
call ds:__set_app_type  +
or dword_1004684 0FFFFFFFFh +
or dword_1004688 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10040EC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10040E8 +
mov [eax] ecx +
call sub_10023A4  +
cmp dword_10030B0 0 +
jnz loc_1002140  +
push offset sub_10023A4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100238C  +
xor eax eax +
retn   +
***
call sub_1002451  +
jmp sub_1001F1A  +
***
cmp ecx dword_10030A0 +
jnz loc_1002167  +
retn 0  +
jmp loc_10024E7  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10021C6  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10021C6  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10021C0  +
cmp eax 19930521h +
jz loc_10021C0  +
cmp eax 19930522h +
jz loc_10021C0  +
cmp eax 1994000h +
jnz loc_10021C6  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1002188+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002206  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002202  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100226D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1002265  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100226F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002255  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10021F0  +
pop ecx  +
test eax eax +
jz loc_10022D6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002230  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10022D6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10022DF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100215C  +
push offset dword_10030A0  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002405  +
cmp ecx 0FFFFFFFFh +
jz loc_1002405  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10023FE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10023FE  +
cmp edx 10000000h +
jnb loc_10023FE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10023FE  +
jmp loc_10023F9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002447  +
push eax  +
call sub_10023AC  +
test eax eax +
jz loc_1002447  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100243C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1002447  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10030A0 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002483  +
test eax ebx +
jz loc_1002483  +
not eax  +
mov dword_10030A4 eax +
jmp loc_10024DE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10024CA  +
test dword_10030A0 ebx +
jnz loc_10024CF  +
mov esi 0BB40E64Fh +
mov dword_10030A0 esi +
not esi  +
mov dword_10030A4 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10041F0 eax +
mov dword_10041EC ecx +
mov dword_10041E8 edx +
mov dword_10041E4 ebx +
mov dword_10041E0 esi +
mov dword_10041DC edi +
mov word_1004208 ss +
mov word_10041FC cs +
mov word_10041D8 ds +
mov word_10041D4 es +
mov word_10041D0 fs +
mov word_10041CC gs +
pushf   +
pop dword_1004200  +
mov eax [ebp+0] +
mov dword_10041F4 eax +
mov eax [ebp+4] +
mov dword_10041F8 eax +
lea eax [ebp+8] +
mov dword_1004204 eax +
mov eax [ebp-320h] +
mov dword_1004140 10001h +
mov eax dword_10041F8 +
mov dword_10040FC eax +
mov dword_10040F0 0C0000409h +
mov dword_10040F4 1 +
mov eax dword_10030A0 +
mov [ebp-328h] eax +
mov eax dword_10030A4 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 0  +
lea eax [ebp+hMem] +
push eax  +
push 0  +
push [ebp+dwMessageId]  +
push lpSource  +
push 900h  +
call ds:FormatMessageA  +
test eax eax +
jnz loc_100260C  +
leave   +
retn   +
mov eax [ebp+hMem] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1002612  +
push esi  +
push edi  +
sub eax ecx +
mov esi eax +
push esi  +
push [ebp+hMem]  +
push [ebp+hMem]  +
call ds:CharToOemBuffA  +
push 8000h  +
push [ebp+arg_0]  +
call _setmode  +
push esi  +
push [ebp+hMem]  +
mov edi eax +
push [ebp+arg_0]  +
call _write  +
push edi  +
push [ebp+arg_0]  +
mov esi eax +
call _setmode  +
add esp 1Ch +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
