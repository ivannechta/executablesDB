mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+Arguments] +
push eax  +
push dword ptr [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10054C8  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push offset aWindirPanther  +
call sub_100C9FF  +
mov esi ds:GetLastError +
xor edi edi +
push edi  +
push edi  +
call esi  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aWinmain  +
mov ebx offset aDW7rtmInetcore +
push ebx  +
push 16h  +
push edi  +
mov edi offset aD +
push edi  +
push 0  +
push offset aRegisteriepkey  +
push 4000000h  +
call sub_1004045  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005745  +
call sub_100CD11  +
push offset loc_100CC51  +
call sub_100CEFC  +
lea eax [ebp+pNumArgs] +
push eax  +
call ds:GetCommandLineW  +
push eax  +
call ds:CommandLineToArgvW  +
push 0  +
push 0  +
mov [ebp+hMem] eax +
call esi  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aWinmain  +
push ebx  +
push 1Bh  +
push 0  +
push edi  +
push 0  +
call ds:GetCommandLineW  +
push eax  +
push offset aRegisteriepk_0  +
push 4000000h  +
call sub_1004045  +
add esp 0Ch +
push eax  +
call sub_1005745  +
xor eax eax +
push eax  +
push eax  +
cmp [ebp+hMem] eax +
jnz loc_100414B  +
call esi  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aWinmain  +
push ebx  +
push 1Eh  +
push 0  +
push edi  +
push 0  +
push offset aRegisteriepk_1  +
push 2000000h  +
call sub_1004045  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005745  +
jmp loc_10042B9  +
cmp [ebp+pNumArgs] 1 +
jnz loc_100417D  +
call esi  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aWinmain  +
push ebx  +
push 24h  +
push 0  +
push edi  +
push 0  +
push offset aRegisteriepk_2  +
push 4000000h  +
call sub_1004045  +
pop ecx  +
pop ecx  +
jmp loc_10042AA  +
cmp [ebp+pNumArgs] 2 +
jnz loc_100427D  +
call esi  +
push eax  +
call sub_1004CC7  +
push eax  +
mov eax [ebp+hMem] +
push offset aWinmain  +
push ebx  +
push 28h  +
push 0  +
push edi  +
push 0  +
push dword ptr [eax+4]  +
push offset aRegisteriepk_3  +
push 4000000h  +
call sub_1004045  +
add esp 0Ch +
push eax  +
call sub_1005745  +
mov eax [ebp+hMem] +
push offset aInstall  +
push dword ptr [eax+4]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100420B  +
push eax  +
push eax  +
call esi  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aWinmain  +
push ebx  +
push 2Bh  +
push 0  +
push edi  +
push 0  +
push offset aRegisteriepk_4  +
push 4000000h  +
call sub_1004045  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005745  +
call sub_100CD67  +
jmp loc_10042B0  +
mov eax [ebp+hMem] +
push offset aUninstall  +
push dword ptr [eax+4]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
push 0  +
push 0  +
test eax eax +
jnz loc_100425A  +
call esi  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aWinmain  +
push ebx  +
push 30h  +
push 0  +
push edi  +
push 0  +
push offset aRegisteriepk_5  +
push 4000000h  +
call sub_1004045  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005745  +
call sub_100CE6C  +
jmp loc_10042B0  +
call esi  +
push eax  +
call sub_1004CC7  +
push eax  +
mov eax [ebp+hMem] +
push offset aWinmain  +
push ebx  +
push 35h  +
push 0  +
push edi  +
push 0  +
push dword ptr [eax+4]  +
push offset aRegisteriepk_6  +
jmp loc_100429D  +
call esi  +
push eax  +
call sub_1004CC7  +
push eax  +
mov eax [ebp+pNumArgs] +
push offset aWinmain  +
push ebx  +
push 3Ah  +
push 0  +
push edi  +
push 0  +
dec eax  +
push eax  +
push offset aRegisteriepk_7  +
push 2000000h  +
call sub_1004045  +
add esp 0Ch +
push eax  +
call sub_1005745  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10042E3  +
test eax eax +
jnz loc_10042E8  +
mov ecx [esi] +
test ecx ecx +
jz loc_10042E0  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10042D4  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10139F4 +
push offset dword_10139E4  +
push dword_10139F0  +
mov dword_10139E4 eax +
push offset unk_10139D4  +
push offset unk_10139D8  +
push offset unk_10139D0  +
call ds:__getmainargs  +
add esp 14h +
mov dword_10139E0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1004388  +
cmp eax esi +
jnz loc_100437B  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_100438B  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1004362  +
xor esi esi +
inc esi  +
mov eax dword_1013F40 +
cmp eax esi +
jnz loc_100439E  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10043CD  +
mov eax dword_1013F40 +
test eax eax +
jnz loc_10043C7  +
mov dword_1013F40 esi +
push offset dword_10012C4  +
push offset dword_10012B8  +
call sub_10042C7  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10043CD  +
jmp loc_10044F5  +
mov dword_10139EC esi +
mov eax dword_1013F40 +
cmp eax esi +
jnz loc_10043F1  +
push offset dword_10012B4  +
push offset dword_1001290  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1013F40 2 +
test ebx ebx +
jnz loc_10043FD  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1013F48 0 +
jz loc_1004421  +
push offset dword_1013F48  +
call sub_10046D9  +
pop ecx  +
test eax eax +
jz loc_1004421  +
push 0  +
push 2  +
push 0  +
call dword_1013F48  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_100443B  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_100444B  +
cmp al 20h +
ja loc_100444B  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100443B  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1004457  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_100445A  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_10139E8 eax +
cmp dword_10139DC 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_100448C  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_100449F  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1004428  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_10139E8 eax +
cmp dword_10139DC 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_10139EC 0 +
jnz loc_10044E0  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10139E8 +
jmp loc_1004501  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100451E  +
xor eax eax +
jmp loc_100456B  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100451A  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1004558  +
cmp ecx 20Bh +
jnz loc_100451A  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100451A  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1004566  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100451A  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_10139DC eax +
call sub_1004910  +
push eax  +
call ds:__set_app_type  +
or dword_1013F38 0FFFFFFFFh +
or dword_1013F3C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10139FC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10139F8 +
mov [eax] ecx +
call sub_100BC9A  +
cmp dword_1011008 0 +
jnz loc_10045C4  +
push offset sub_100BC9A  +
call ds:__setusermatherr  +
pop ecx  +
call sub_10047EC  +
xor eax eax +
retn   +
***
call sub_100494F  +
jmp ___tmainCRTStartup  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100461D  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100461D  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1004617  +
cmp eax 19930521h +
jz loc_1004617  +
cmp eax 19930522h +
jz loc_1004617  +
cmp eax 1994000h +
jnz loc_100461D  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset loc_10045E0  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1004666  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1004662  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10046CD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10046C5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10046CF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10046B5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1004650  +
pop ecx  +
test eax eax +
jz loc_1004736  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1004690  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004736  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100473F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10049E5  +
push offset dword_101100C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1004804  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1004903  +
cmp ecx 0FFFFFFFFh +
jz loc_1004903  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10048FC  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10048FC  +
cmp edx 10000000h +
jnb loc_10048FC  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10048FC  +
jmp loc_10048F7  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1004945  +
push eax  +
call sub_10048AA  +
test eax eax +
jz loc_1004945  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100493A  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1004945  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101100C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1004981  +
test eax ebx +
jz loc_1004981  +
not eax  +
mov dword_1011010 eax +
jmp loc_10049DC  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10049C8  +
test dword_101100C ebx +
jnz loc_10049CD  +
mov esi 0BB40E64Fh +
mov dword_101100C esi +
not esi  +
mov dword_1011010 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
cmp ecx dword_101100C +
jnz loc_10049F0  +
retn 0  +
jmp loc_1004A29  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1013B00 eax +
mov dword_1013AFC ecx +
mov dword_1013AF8 edx +
mov dword_1013AF4 ebx +
mov dword_1013AF0 esi +
mov dword_1013AEC edi +
mov word_1013B18 ss +
mov word_1013B0C cs +
mov word_1013AE8 ds +
mov word_1013AE4 es +
mov word_1013AE0 fs +
mov word_1013ADC gs +
pushf   +
pop dword_1013B10  +
mov eax [ebp+0] +
mov dword_1013B04 eax +
mov eax [ebp+4] +
mov dword_1013B08 eax +
lea eax [ebp+8] +
mov dword_1013B14 eax +
mov eax [ebp-320h] +
mov dword_1013A50 10001h +
mov eax dword_1013B08 +
mov dword_1013A0C eax +
mov dword_1013A00 0C0000409h +
mov dword_1013A04 1 +
mov eax dword_101100C +
mov [ebp-328h] eax +
mov eax dword_1011010 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1004B3C  +
cmp eax esi +
ja loc_1004B3C  +
jnz loc_1004B46  +
mov [esi+edi] bl +
jmp loc_1004B44  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1004B4F  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1004B85  +
cmp eax esi +
ja loc_1004B85  +
jz loc_1004B8A  +
jmp loc_1004B92  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1004B9B  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
mov ebx ecx +
mov eax [ebx] +
push esi  +
mov esi ds:HeapFree +
push edi  +
mov edi ds:GetProcessHeap +
test eax eax +
jz loc_1004BC9  +
push eax  +
push 0  +
call edi  +
push eax  +
call esi  +
mov ebx [ebx+4] +
test ebx ebx +
jz loc_1004BD8  +
push ebx  +
push 0  +
call edi  +
push eax  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004BA8  +
test [ebp+arg_0] 1 +
jz loc_1004BFB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
xor esi esi +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
call sub_10067F9  +
test eax eax +
jz loc_1004C43  +
xor eax eax +
inc eax  +
jmp loc_1004C83  +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 13h  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1004C81  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
mov [ebp+var_14] ebx +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_1004C78  +
mov esi [ebp+var_14] +
push [ebp+pSid]  +
call ds:FreeSid  +
mov eax esi +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+lpAddress] 0 +
jnz loc_1004CA8  +
xor eax eax +
jmp locret_1004CBE  +
push 1Ch  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpAddress]  +
call ds:VirtualQuery  +
neg eax  +
sbb eax eax +
and eax [ebp+Buffer.AllocationBase] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+4] +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0B8h] +
pop ebp  +
retn 4  +
***
mov ecx 0C000008Dh +
cmp eax ecx +
ja loc_1004D9D  +
jz loc_1004D97  +
mov ecx 0C0000006h +
cmp eax ecx +
ja loc_1004D56  +
jz loc_1004D50  +
cmp eax 80000001h +
jz loc_1004D4A  +
cmp eax 80000002h +
jz loc_1004D44  +
cmp eax 80000003h +
jz loc_1004D3E  +
cmp eax 80000004h +
jz loc_1004D38  +
cmp eax 0C0000005h +
jnz loc_1004DF5  +
mov eax offset aAccess_violati +
retn   +
mov eax offset aSingle_step +
retn   +
mov eax offset aBreakpoint +
retn   +
mov eax offset aDatatype_misal +
retn   +
mov eax offset aGuard_page +
retn   +
mov eax offset aIn_page_error +
retn   +
cmp eax 0C0000008h +
jz loc_1004D91  +
cmp eax 0C000001Dh +
jz loc_1004D8B  +
cmp eax 0C0000025h +
jz loc_1004D85  +
cmp eax 0C0000026h +
jz loc_1004D7F  +
cmp eax 0C000008Ch +
jnz loc_1004DF5  +
mov eax offset aArray_bounds_e +
retn   +
mov eax offset aInvalid_dispos +
retn   +
mov eax offset aNoncontinuable +
retn   +
mov eax offset aIllegal_instru +
retn   +
mov eax offset aInvalid_handle +
retn   +
mov eax offset aFlt_denormal_o +
retn   +
mov ecx 0C00000FDh +
cmp eax ecx +
ja loc_1004DF5  +
jz loc_1004DEF  +
add eax 3FFFFF72h +
cmp eax 8 +
ja loc_1004DF5  +
jmp ds:off_1004DFD[eax*4]  +
mov eax offset aFlt_divide_by_ +
retn   +
mov eax offset aFlt_inexact_re +
retn   +
mov eax offset aFlt_invalid_op +
retn   +
mov eax offset aFlt_overflow +
retn   +
mov eax offset aFlt_stack_chec +
retn   +
mov eax offset aFlt_underflow +
retn   +
mov eax offset aInt_divide_by_ +
retn   +
mov eax offset aInt_overflow +
retn   +
mov eax offset aPriv_instructi +
retn   +
mov eax offset aStack_overflow +
retn   +
mov eax offset aUnknown +
retn   +
***
call __SEH_prolog4  +
cmp [ebp-20h] edi +
jnz locret_1004F4E  +
cmp dword ptr [ebp-1Ch] 0FFFFFFFFh +
jz loc_1004F34  +
push dword ptr [ebp-1Ch]  +
call dword_1013D6C  +
cmp ebx 0FFFFFFFFh +
jz locret_1004F4E  +
push ebx  +
call dword_1013D6C  +
cmp ebx 0FFFFFFFFh +
jz locret_1004F4E  +
push dword ptr [ebp+0Ch]  +
call dword_1013DA4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpBaseAddress] 0 +
jz loc_1004F68  +
push [ebp+lpBaseAddress]  +
call ds:UnmapViewOfFile  +
cmp [ebp+arg_8] 0 +
jz loc_1004F77  +
push [ebp+arg_8]  +
call dword_1013D6C  +
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_1004F86  +
push [ebp+arg_0]  +
call dword_1013D6C  +
cmp [ebp+arg_C] 0 +
jz loc_1004F95  +
push [ebp+arg_C]  +
call dword_1013DA4  +
pop ebp  +
retn 10h  +
***
call __SEH_prolog4  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 0C0000h +
or dword_1013D24 eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
fldz   +
lea eax [ebp+SystemTime] +
push eax  +
fstp  [ebp+pvtime] +
call ds:GetLocalTime  +
lea eax [ebp+pvtime] +
push eax  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToVariantTime  +
test eax eax +
jnz loc_100504E  +
fldz   +
leave   +
retn   +
fld  [ebp+pvtime] +
leave   +
retn   +
***
call __SEH_prolog4  +
push edi  +
push dwTlsIndex  +
call ds:TlsSetValue  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor esi esi +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov eax esi +
call __SEH_epilog4  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_10051B0  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp [edi+8] ebx +
jb loc_10051CF  +
xor eax eax +
mov [edi+4] ebx +
inc eax  +
jmp loc_1005218  +
mov eax [edi] +
push esi  +
mov esi [edi+0Ch] +
add esi ebx +
test eax eax +
jz loc_10051F3  +
mov ecx esi +
shl ecx 2 +
push ecx  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
jmp loc_1005208  +
mov eax esi +
shl eax 2 +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1005217  +
mov [edi] eax +
xor eax eax +
mov [edi+8] esi +
mov [edi+4] ebx +
inc eax  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1005239  +
cmp ecx 7FFFFFFFh +
jbe loc_100523E  +
mov eax 80070057h +
test eax eax +
jl loc_1005282  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1005275  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1005270  +
mov cl [edx+eax] +
test cl cl +
jz loc_1005270  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_100525C  +
pop edi  +
test esi esi +
jnz loc_100527B  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10052A1  +
cmp ecx 7FFFFFFFh +
jbe loc_10052A6  +
mov eax 80070057h +
test eax eax +
jl loc_10052F1  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10052E1  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10052DC  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_10052DC  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_10052C4  +
pop edi  +
test esi esi +
jnz loc_10052E8  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100530F  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1005314  +
mov eax 80070057h +
test eax eax +
jl loc_100532D  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_1004B10  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100534B  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1005350  +
mov eax 80070057h +
test eax eax +
jl loc_1005369  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_1004B5C  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1005387  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100538C  +
mov eax 80070057h +
test eax eax +
jl loc_10053A6  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_1004B10  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_10053C2  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_10053C7  +
mov eax 80070057h +
test eax eax +
jl loc_10053E1  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_1004B5C  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
mov esi 206h +
push esi  +
push eax  +
mov [ebp+PathName] ax +
lea eax [ebp-20Ah] +
push eax  +
call memset  +
xor eax eax +
push esi  +
push eax  +
mov [ebp+TempFileName] ax +
lea eax [ebp-412h] +
push eax  +
call memset  +
add esp 18h +
lea eax [ebp+PathName] +
push eax  +
mov esi 104h +
push esi  +
call ds:GetTempPathW  +
test eax eax +
jz loc_1005465  +
cmp eax esi +
ja loc_1005465  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_100547B  +
push esi  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jnz loc_100547B  +
xor eax eax +
jmp loc_10054B3  +
lea eax [ebp+TempFileName] +
push eax  +
push 0  +
push offset PrefixString  +
lea eax [ebp+PathName] +
push eax  +
call ds:GetTempFileNameW  +
test eax eax +
jz loc_1005477  +
lea eax [ebp+TempFileName] +
push eax  +
push [ebp+arg_0]  +
push edi  +
call sub_100528B  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10049E5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
mov [ebp+lpMem] esi +
cmp dword_1013D1C esi +
jnz loc_10054E5  +
xor eax eax +
jmp loc_1005602  +
push ebx  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
call sub_1005058  +
mov ebx eax +
cmp ebx esi +
jz loc_10055F6  +
mov eax [ebp+arg_0] +
mov ecx eax +
and ecx 0FF000000h +
mov [ebx] ecx +
mov [ebx+4] eax +
cmp dword ptr [ebp+arg_4] esi +
jz loc_10055ED  +
test dword ptr [ebp+arg_4] 0FFFF0000h +
mov [ebp+hMem] esi +
jnz loc_100555B  +
lea eax [ebp+Arguments] +
push eax  +
push esi  +
lea eax [ebp+hMem] +
push eax  +
movzx eax word ptr [ebp+arg_4] +
push 400h  +
push eax  +
push lpSource  +
push 900h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_1005554  +
mov dword ptr [ebp+arg_4] offset aLogFailedToGet +
jmp loc_100555B  +
mov eax [ebp+hMem] +
cmp eax esi +
jnz loc_10055B5  +
mov eax dword ptr [ebp+arg_4] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1005561  +
sub eax esi +
push edi  +
lea esi [eax+1] +
lea edi [esi+esi] +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_10055AD  +
push dword ptr [ebp+arg_4]  +
push offset aS  +
push esi  +
push eax  +
call sub_10053AD  +
add esp 10h +
test eax eax +
jge loc_10055A8  +
mov ecx [ebp+lpMem] +
xor eax eax +
mov [edi+ecx-2] ax +
mov eax [ebp+lpMem] +
jmp loc_10055B2  +
mov eax offset aConstructparti +
xor esi esi +
pop edi  +
push [ebp+Arguments]  +
push eax  +
mov eax [ebx+0Ch] +
shr eax 1 +
push eax  +
push dword ptr [ebx+8]  +
call sub_1005336  +
cmp [ebp+lpMem] esi +
jz loc_10055DD  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+hMem] esi +
jz loc_10055F6  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_10055F6  +
mov eax [ebx+8] +
push 30h  +
pop ecx  +
mov [eax] cx +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax ebx +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100519A  +
test [ebp+arg_0] 1 +
jz loc_1005630  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test eax eax +
jz loc_1005663  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_1005663  +
mov eax [eax] +
mov eax [eax+ecx*4-4] +
test eax eax +
jz loc_1005663  +
mov eax [eax] +
test eax eax +
jnz locret_1005668  +
mov eax offset aDef +
retn   +
***
test eax eax +
jz loc_10056A7  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_10056A7  +
mov eax [eax] +
mov eax [eax+ecx*4-4] +
test eax eax +
jz loc_10056A7  +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_10056A7  +
mov eax [eax+8] +
mov eax [eax+ecx*4-4] +
test eax eax +
jz loc_10056A7  +
mov eax [eax] +
test eax eax +
jnz locret_10056AC  +
mov eax offset aDef +
retn   +
***
mov eax [ecx+4] +
test eax eax +
jnz loc_10056BA  +
retn   +
mov edx [ecx] +
push esi  +
mov esi [edx+eax*4-4] +
test eax eax +
jz loc_10056CC  +
dec eax  +
push eax  +
call sub_10051B6  +
mov eax esi +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov edi ecx +
mov [ebp-10h] edi +
mov dword ptr [ebp-4] 1 +
lea esi [edi+8] +
jmp loc_10056FB  +
push 1  +
mov ecx eax +
call sub_1004BE1  +
mov ecx esi +
call sub_10056B2  +
test eax eax +
jnz loc_10056F2  +
mov ecx esi +
call sub_100519A  +
mov ecx edi +
call sub_1004BA8  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10056D5  +
test [ebp+arg_0] 1 +
jz loc_1005739  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
and [ebp+lpMem] 0 +
and [ebp+var_218] 0 +
mov [ebp+var_230] eax +
mov eax [ebp+arg_C] +
mov dword ptr [ebp+var_224] eax +
mov eax [ebp+arg_18] +
push ebx  +
mov ebx [ebp+arg_0] +
mov [ebp+var_228] eax +
mov eax [ebp+arg_1C] +
push esi  +
mov [ebp+lpAddress] eax +
mov eax [ebp+arg_24] +
push edi  +
mov [ebp+var_234] eax +
call ds:GetLastError  +
push 5  +
pop ecx  +
mov esi offset aUnknown +
lea edi [ebp+var_20C] +
movs   +
push 1F4h  +
mov [ebp+dwErrCode] eax +
xor edi edi +
lea eax [ebp+var_1F8] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
mov [ebp+var_214] edi +
mov [ebp+var_21C] edi +
cmp dword_1013D1C edi +
jz loc_10059C3  +
cmp ebx edi +
jz loc_10059C3  +
mov eax [ebp+arg_4] +
or [ebx+4] eax +
mov eax dword ptr [ebp+var_224] +
cmp eax edi +
jz loc_10058A5  +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1005805  +
sub eax esi +
lea esi [eax+1] +
lea edi [esi+esi] +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_1005860  +
push dword ptr [ebp+var_224]  +
push offset aS  +
push esi  +
push eax  +
call sub_10053AD  +
add esp 10h +
test eax eax +
jge loc_1005854  +
mov ecx [ebp+lpMem] +
xor eax eax +
mov [edi+ecx-2] ax +
mov eax [ebp+lpMem] +
mov [ebp+var_218] eax +
xor edi edi +
cmp [ebp+lpAddress] edi +
jz loc_10058B9  +
push [ebp+lpAddress]  +
call sub_1004C96  +
cmp eax edi +
jz loc_10058AD  +
push 104h  +
lea ecx [ebp+var_20C] +
push ecx  +
push eax  +
call dword_1013D90  +
lea eax [ebp+var_20C] +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_10058AD  +
inc eax  +
inc eax  +
jmp loc_10058B3  +
mov [ebp+var_218] edi +
jmp loc_1005862  +
lea eax [ebp+var_20C] +
mov [ebp+var_214] eax +
mov esi [ebx] +
mov eax 65000000h +
cmp esi eax +
jz loc_10058C8  +
cmp esi edi +
jnz loc_1005900  +
test dword_1013D24 80000h +
jz loc_10058EA  +
xor ecx ecx +
cmp esi eax +
setnz cl  +
dec ecx  +
and ecx 69000000h +
add ecx 2000000h +
mov [ebx] ecx +
test dword_1013D24 40000h +
jz loc_1005900  +
mov [ebp+var_21C] 1 +
mov eax dword_1013D1C +
mov esi [eax] +
call sub_1005021  +
push ecx  +
push ecx  +
fstp  [esp+248h+var_248] +
push [ebp+arg_28]  +
push [ebp+var_234]  +
push [ebp+arg_20]  +
push [ebp+var_214]  +
push offset aUnknown_0  +
push [ebp+var_218]  +
call ds:GetCurrentThreadId  +
push eax  +
push dword_1013D2C  +
push dword ptr [ebx+8]  +
push dword ptr [ebx+4]  +
push [ebp+var_228]  +
push edi  +
push [ebp+arg_10]  +
call sub_100566E  +
push eax  +
call sub_100563C  +
push eax  +
push dword ptr [ebx]  +
push [ebp+var_230]  +
push 11h  +
push dword_1013D1C  +
call dword ptr [esi+14h]  +
add esp 54h +
mov esi eax +
cmp [ebp+lpMem] edi +
jz loc_100598B  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp esi 4 +
jnz loc_100599C  +
call sub_1005E94  +
push edi  +
call ds:ExitProcess  +
cmp [ebp+var_21C] edi +
jz loc_10059B3  +
push edi  +
push edi  +
push 1  +
push 0C0000025h  +
call ds:RaiseException  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax esi +
jmp loc_10059C5  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 434h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+var_42C] 0FFFFFFFFh +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor eax eax +
push 5  +
pop ecx  +
push 1F4h  +
push eax  +
mov [ebp+var_434] eax +
mov [ebp+var_428] eax +
mov [ebp+lpBaseAddress] eax +
mov dword ptr [ebp+Arguments] eax +
mov [ebp+lpAddress] eax +
mov dword ptr [ebp+var_418] eax +
lea eax [ebp+var_400] +
mov esi offset aUnknown +
lea edi [ebp+var_414] +
push eax  +
movs   +
call memset  +
xor eax eax +
push 206h  +
push eax  +
mov word ptr [ebp+var_20C] ax +
lea eax [ebp+var_20C+2] +
push eax  +
call memset  +
add esp 18h +
cmp dword_1013D30 0 +
mov edi 104h +
jz loc_1005AAA  +
lea eax [ebp+var_20C] +
push eax  +
push edi  +
call sub_10053E8  +
test eax eax +
jz loc_1005AAA  +
lea eax [ebp+var_428] +
push eax  +
lea eax [ebp+var_434] +
push eax  +
lea eax [ebp+var_42C] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push ebx  +
call sub_1004E26  +
mov [ebp+lpBaseAddress] eax +
test ebx ebx +
jz loc_1005AEF  +
mov eax [ebx] +
test eax eax +
jz loc_1005AC5  +
mov ecx [eax] +
mov eax [eax+0Ch] +
mov dword ptr [ebp+Arguments] ecx +
mov [ebp+lpAddress] eax +
push [ebp+lpAddress]  +
call sub_1004C96  +
mov esi eax +
test esi esi +
jz loc_1005AEF  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
push esi  +
call dword_1013D90  +
mov edi [ebp+lpAddress] +
sub edi esi +
jmp loc_1005AF5  +
mov edi dword ptr [ebp+var_418] +
cmp [ebp+lpBaseAddress] 0 +
mov dword ptr [ebp+var_418] offset aExceptionCode0 +
jnz loc_1005B12  +
mov dword ptr [ebp+var_418] offset aExceptionCod_0 +
push [ebp+var_434]  +
mov eax [ebx+4] +
push [ebp+lpBaseAddress]  +
mov esi [eax+0B8h] +
call ds:GetLastError  +
push eax  +
push esi  +
push offset aWdslogstructur  +
push offset aUnknown  +
push 0  +
push offset word_1001A12  +
push offset aD  +
push 90000h  +
push [ebp+var_434]  +
lea eax [ebp+var_414] +
push edi  +
push eax  +
push [ebp+lpAddress]  +
mov eax dword ptr [ebp+Arguments] +
call sub_1004CED  +
push eax  +
push dword ptr [ebp+Arguments]  +
push dword ptr [ebp+var_418]  +
push 1000001h  +
call sub_1004045  +
add esp 20h +
push eax  +
call sub_1005745  +
cmp [ebp+lpBaseAddress] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1005BB3  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_428]  +
push [ebp+lpBaseAddress]  +
push [ebp+var_42C]  +
call sub_1004F54  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10049E5  +
leave   +
retn 4  +
***
call __SEH_prolog4  +
mov eax lpTopLevelExceptionFilter +
mov [ebp+var_1C] eax +
and [ebp+ms_exc.disabled] 0 +
push [ebp+arg_0]  +
call sub_10059DB  +
jmp loc_1005BEF  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call sub_1005E94  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
cmp [ebp+var_1C] 0 +
jz loc_1005C09  +
push [ebp+arg_0]  +
call [ebp+var_1C]  +
jmp loc_1005C0B  +
xor eax eax +
call __SEH_epilog4  +
retn 4  +
***
push offset aUnknown  +
push edi  +
push offset word_1001A12  +
push offset aD  +
push 90000h  +
lea eax [ebp-224h] +
push eax  +
push dword ptr [ebp-228h]  +
mov eax esi +
call sub_1004CED  +
push eax  +
push esi  +
push offset aExceptionCod_1  +
push 3000002h  +
call sub_1004045  +
add esp 18h +
push eax  +
call sub_1005745  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1005D3F  +
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor edi edi +
mov dword_1013D5C edi +
xor eax eax +
call __SEH_epilog4_GS  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
cmp dword_1013D20 ebx +
jbe loc_1005E87  +
dec dword_1013D20  +
jnz loc_1005E87  +
mov eax dword_1013D1C +
push esi  +
mov esi ds:SetUnhandledExceptionFilter +
push edi  +
mov edi offset TopLevelExceptionFilter +
push edi  +
mov [ebp+var_8] eax +
mov dword_1013D1C ebx +
call esi  +
cmp eax edi +
jnz loc_1005D9D  +
mov eax lpTopLevelExceptionFilter +
push eax  +
call esi  +
push dwTlsIndex  +
mov esi ds:TlsFree +
mov lpTopLevelExceptionFilter ebx +
call esi  +
push dword_101142C  +
or dwTlsIndex 0FFFFFFFFh +
call ds:TlsGetValue  +
mov edi eax +
cmp edi ebx +
jz loc_1005DEA  +
jmp loc_1005DD6  +
mov ecx eax +
call sub_100571F  +
mov ecx edi +
call sub_10056B2  +
push 1  +
cmp eax ebx +
jnz loc_1005DCF  +
mov ecx edi +
call sub_1005616  +
push dword_101142C  +
call esi  +
or dword_101142C 0FFFFFFFFh +
push offset CriticalSection  +
call ds:EnterCriticalSection  +
mov eax lpMem +
cmp eax ebx +
jz loc_1005E62  +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
xor ecx ecx +
mov [ebp+var_4] ecx +
cmp dword_1013D3C ebx +
jbe loc_1005E49  +
lea ecx [eax+ecx*4] +
cmp [ecx] ebx +
jz loc_1005E3A  +
push dword ptr [ecx]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax lpMem +
mov ecx [ebp+var_4] +
inc ecx  +
mov [ebp+var_4] ecx +
cmp ecx dword_1013D3C +
jb loc_1005E26  +
push eax  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov lpMem ebx +
mov dword_1013D3C ebx +
mov dword_1013D40 ebx +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
cmp [ebp+var_8] ebx +
jz loc_1005E7C  +
push [ebp+var_8]  +
call sub_100954F  +
mov dword_1013D24 ebx +
call sub_1007B4C  +
mov eax dword_1013D20 +
pop ebx  +
leave   +
retn   +
***
call __SEH_prolog4  +
push dword ptr [ebp-1Ch]  +
call dword_1013D6C  +
retn   +
***
mov edi edi +
xor edi edi +
cmp [ebp-0F74h] edi +
jnz loc_10067DB  +
mov dword_1013D1C ebx +
cmp [ebp-0F64h] edi +
jnz loc_10067DB  +
call sub_1005E94  +
push dword ptr [ebp-0F5Ch]  +
call dword_1013D64  +
push dword ptr [ebp-0F5Ch]  +
call dword_1013D6C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 220h  +
push 20h  +
push 2  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
xor edi edi +
xor esi esi +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
mov [ebp+pSid] ebx +
call ds:AllocateAndInitializeSid  +
test eax eax +
jz loc_1006878  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
mov [ebp+var_14] ebx +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jz loc_1006865  +
mov edi [ebp+var_14] +
jmp loc_100686D  +
call ds:GetLastError  +
mov esi eax +
push [ebp+pSid]  +
call ds:FreeSid  +
jmp loc_1006880  +
call ds:GetLastError  +
mov esi eax +
push esi  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
retn   +
***
call __SEH_prolog4_GS  +
cmp [ebp-3Ch] ebx +
jz loc_1006B1A  +
push dword ptr [ebp-3Ch]  +
call ds:FreeSid  +
mov [ebp-3Ch] ebx +
cmp [ebp-34h] ebx +
jz loc_1006B2B  +
push dword ptr [ebp-34h]  +
call ds:FreeSid  +
mov [ebp-34h] ebx +
cmp [ebp-30h] ebx +
jz loc_1006B3C  +
push dword ptr [ebp-30h]  +
call ds:FreeSid  +
mov [ebp-30h] ebx +
cmp [ebp-2Ch] ebx +
jz loc_1006B4D  +
push dword ptr [ebp-2Ch]  +
call ds:CloseHandle  +
mov [ebp-2Ch] ebx +
cmp [ebp-38h] ebx +
jz locret_1006B66  +
push dword ptr [ebp-38h]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebp-38h] ebx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_1006B89  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ReleaseMutex  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:WaitForSingleObject  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CloseHandle  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 0F001Fh  +
push dword ptr [ebp+8]  +
call ds:MapViewOfFile  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:UnmapViewOfFile  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+10h] +
mov eax [ebp+0Ch] +
push esi  +
push dword ptr [ebp+14h]  +
mov [ebp-4] ecx +
lea ecx [ebp-4] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
xor esi esi +
inc esi  +
mov [ebp-8] eax +
call ds:SetFilePointer  +
mov [ebp-8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1006C33  +
call ds:GetLastError  +
test eax eax +
jz loc_1006C33  +
xor esi esi +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:WriteFile  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100D862  +
***
xor eax eax +
retn 1Ch  +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleFileNameA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea eax [ebp-20h] +
push eax  +
xor esi esi +
call sub_10068AF  +
mov edi eax +
test edi edi +
jz loc_1006CC4  +
and [ebp-4] esi +
lea eax [ebp-20h] +
mov dword ptr [ebp-0Ch] 0Ch +
mov [ebp-8] eax +
lea esi [ebp-0Ch] +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call ds:CreateMutexW  +
push edi  +
mov esi eax +
call sub_1006B6C  +
test esi esi +
jnz loc_1006CE1  +
xor eax eax +
jmp loc_1006CFF  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1006CFD  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1006CFD  +
push 0FFFFFFFFh  +
push esi  +
call ds:WaitForSingleObject  +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
lea eax [ebp-20h] +
push eax  +
xor esi esi +
call sub_10068AF  +
mov edi eax +
test edi edi +
jz loc_1006D38  +
and [ebp-4] esi +
lea eax [ebp-20h] +
mov dword ptr [ebp-0Ch] 0Ch +
mov [ebp-8] eax +
lea esi [ebp-0Ch] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
push 8000004h  +
push esi  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
push edi  +
mov esi eax +
call sub_1006B6C  +
test esi esi +
jnz loc_1006D5E  +
xor eax eax +
jmp loc_1006D79  +
mov edi [ebp+10h] +
test edi edi +
jz loc_1006D77  +
call ds:GetLastError  +
sub eax 0B7h +
neg eax  +
sbb eax eax +
inc eax  +
mov [edi] eax +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
xor esi esi +
xor edi edi +
cmp [ebp+18h] esi +
jnz loc_1006DB9  +
lea eax [ebp-20h] +
push eax  +
call sub_10068AF  +
mov edi eax +
test edi edi +
jz loc_1006DB9  +
and [ebp-4] esi +
lea eax [ebp-20h] +
mov dword ptr [ebp-0Ch] 0Ch +
mov [ebp-8] eax +
lea esi [ebp-0Ch] +
push 0  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push esi  +
push dword ptr [ebp+0Ch]  +
push 0C0000000h  +
push dword ptr [ebp+8]  +
call ds:CreateFileW  +
push edi  +
mov esi eax +
call sub_1006B6C  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:GetModuleFileNameW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateFileW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:CreateFileMappingW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:DeleteFileW  +
***
cmp dword_10138C8 0 +
jz loc_1006E51  +
and dword_10138C8 0 +
call ds:GetVersion  +
cmp eax 80000000h +
sbb eax eax +
neg eax  +
mov dword_1013DAC eax +
retn   +
mov eax dword_1013DAC +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
lea eax [ebp-24h] +
push eax  +
call ds:GetSystemInfo  +
mov eax [ebp-10h] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1006E8E  +
cmp ecx 7FFFFFFFh +
jbe loc_1006E93  +
mov eax 80070057h +
test eax eax +
jl loc_1006ED0  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1006EC3  +
cmp eax esi +
ja loc_1006EC3  +
jnz loc_1006ECB  +
mov [esi+edi] bl +
jmp loc_1006ECB  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
push 30h  +
mov eax offset dword_100F358 +
call __EH_prolog3  +
xor esi esi +
mov [ebp-10h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov eax [ebp+8] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1006EFA  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1009638  +
mov edi eax +
cmp edi esi +
jnz loc_1006F2C  +
lea ecx [ebp-1Ch] +
call sub_100519A  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
push dword ptr [ebp+8]  +
push offset aS_2  +
push dword ptr [ebp-14h]  +
push edi  +
call sub_1006E78  +
add esp 10h +
test eax eax +
jl loc_1006F1A  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10068AF  +
mov ebx eax +
cmp ebx esi +
jz loc_1006F68  +
lea eax [ebp-3Ch] +
mov [ebp-24h] eax +
mov dword ptr [ebp-28h] 0Ch +
mov [ebp-20h] esi +
lea eax [ebp-28h] +
jmp loc_1006F6B  +
mov eax [ebp-10h] +
push edi  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:CreateMutexA  +
push ebx  +
mov edi eax +
call sub_1006B6C  +
cmp edi esi +
jnz loc_1006F8E  +
lea ecx [ebp-1Ch] +
call sub_100519A  +
mov eax esi +
jmp loc_1006F24  +
***
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1006FA9  +
cmp [ebp+0Ch] esi +
jz loc_1006FA9  +
push 0FFFFFFFFh  +
push edi  +
call ds:WaitForSingleObject  +
mov esi edi +
jmp loc_1006F82  +
***
push 30h  +
mov eax offset dword_100F358 +
call __EH_prolog3  +
xor esi esi +
mov [ebp-10h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov eax [ebp+0Ch] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_1006FD5  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1009638  +
mov edi eax +
cmp edi esi +
jnz loc_1007007  +
lea ecx [ebp-1Ch] +
call sub_100519A  +
xor eax eax +
call __EH_epilog3  +
retn 0Ch  +
***
push dword ptr [ebp+0Ch]  +
push offset aS_2  +
push dword ptr [ebp-14h]  +
push edi  +
call sub_1006E78  +
add esp 10h +
test eax eax +
jl loc_1006FF5  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10068AF  +
mov ebx eax +
cmp ebx esi +
jz loc_1007043  +
lea eax [ebp-3Ch] +
mov [ebp-24h] eax +
mov dword ptr [ebp-28h] 0Ch +
mov [ebp-20h] esi +
lea eax [ebp-28h] +
jmp loc_1007046  +
mov eax [ebp-10h] +
push edi  +
push dword ptr [ebp+8]  +
push esi  +
push 8000004h  +
push eax  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingA  +
push ebx  +
mov edi eax +
call sub_1006B6C  +
cmp edi esi +
jnz loc_1007071  +
lea ecx [ebp-1Ch] +
call sub_100519A  +
mov eax esi +
jmp loc_1006FFF  +
***
mov ebx [ebp+10h] +
cmp ebx esi +
jz loc_100708A  +
call ds:GetLastError  +
sub eax 0B7h +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebx] eax +
mov esi edi +
jmp loc_1007065  +
***
push 30h  +
mov eax offset dword_100F358 +
call __EH_prolog3  +
xor esi esi +
xor ebx ebx +
mov [ebp-10h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov eax [ebp+8] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_10070B8  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1009638  +
mov edi eax +
cmp edi esi +
jnz loc_10070EB  +
lea ecx [ebp-1Ch] +
call sub_100519A  +
or eax 0FFFFFFFFh +
call __EH_epilog3  +
retn 14h  +
***
push dword ptr [ebp+8]  +
push offset aS_2  +
push dword ptr [ebp-14h]  +
push edi  +
call sub_1006E78  +
add esp 10h +
test eax eax +
jge loc_1007112  +
or esi 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call sub_100519A  +
mov eax esi +
jmp loc_10070E3  +
***
cmp [ebp+18h] esi +
jnz loc_100713A  +
lea eax [ebp-3Ch] +
push eax  +
call sub_10068AF  +
mov [ebp-10h] eax +
cmp eax esi +
jz loc_100713A  +
lea eax [ebp-3Ch] +
mov dword ptr [ebp-28h] 0Ch +
mov [ebp-24h] eax +
mov [ebp-20h] esi +
lea ebx [ebp-28h] +
push esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push 0C0000000h  +
push edi  +
call ds:CreateFileA  +
push dword ptr [ebp-10h]  +
mov esi eax +
call sub_1006B6C  +
jmp loc_1007106  +
***
push 0Ch  +
mov eax offset dword_100F380 +
call __EH_prolog3  +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
mov esi [ebp+10h] +
lea eax [esi+1] +
push eax  +
lea ecx [ebp-18h] +
mov [ebp-4] ebx +
call sub_1009638  +
mov edi eax +
cmp edi ebx +
jnz loc_10071A3  +
lea ecx [ebp-18h] +
call sub_100519A  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
push esi  +
push edi  +
push dword ptr [ebp+8]  +
call ds:GetModuleFileNameA  +
mov ebx eax +
test ebx ebx +
jz loc_1007191  +
push edi  +
push offset aS  +
push esi  +
push dword ptr [ebp+0Ch]  +
call sub_10053AD  +
add esp 10h +
test eax eax +
jge loc_1007191  +
xor ebx ebx +
jmp loc_1007191  +
***
push 0Ch  +
mov eax offset dword_100F380 +
call __EH_prolog3  +
xor esi esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov [ebp-10h] esi +
mov eax [ebp+8] +
mov [ebp-4] esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_10071F3  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-18h] +
call sub_1009638  +
mov edi eax +
cmp edi esi +
jnz loc_1007226  +
lea ecx [ebp-18h] +
call sub_100519A  +
or eax 0FFFFFFFFh +
call __EH_epilog3  +
retn 1Ch  +
***
push dword ptr [ebp+8]  +
push offset aS_2  +
push dword ptr [ebp-10h]  +
push edi  +
call sub_1006E78  +
add esp 10h +
test eax eax +
jge loc_100724D  +
or esi 0FFFFFFFFh +
lea ecx [ebp-18h] +
call sub_100519A  +
mov eax esi +
jmp loc_100721E  +
***
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:CreateFileA  +
mov esi eax +
jmp loc_1007241  +
***
push 0Ch  +
mov eax offset dword_100F380 +
call __EH_prolog3  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
xor esi esi +
mov [ebp-4] edi +
cmp [ebp+1Ch] edi +
jz loc_10072EC  +
mov eax [ebp+1Ch] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1007296  +
sub eax edx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-18h] +
call sub_1009638  +
mov esi eax +
cmp esi edi +
jnz loc_10072C8  +
lea ecx [ebp-18h] +
call sub_100519A  +
xor eax eax +
call __EH_epilog3  +
retn 18h  +
***
push dword ptr [ebp+1Ch]  +
push offset aS_2  +
push dword ptr [ebp-10h]  +
push esi  +
call sub_1006E78  +
add esp 10h +
test eax eax +
jge loc_10072EC  +
lea ecx [ebp-18h] +
call sub_100519A  +
mov eax edi +
jmp loc_10072C0  +
***
push esi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:CreateFileMappingA  +
mov edi eax +
jmp loc_10072E0  +
***
push 0Ch  +
mov eax offset dword_100F380 +
call __EH_prolog3  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
mov eax [ebp+8] +
mov [ebp-4] edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_100732B  +
sub eax ecx +
sar eax 1 +
add eax 2 +
push eax  +
lea ecx [ebp-18h] +
call sub_1009638  +
mov esi eax +
cmp esi edi +
jnz loc_100735D  +
lea ecx [ebp-18h] +
call sub_100519A  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
push dword ptr [ebp+8]  +
push offset aS_2  +
push dword ptr [ebp-10h]  +
push esi  +
call sub_1006E78  +
add esp 10h +
test eax eax +
jge loc_1007381  +
lea ecx [ebp-18h] +
call sub_100519A  +
mov eax edi +
jmp loc_1007355  +
***
push esi  +
call ds:DeleteFileA  +
mov edi eax +
jmp loc_1007375  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_1013DB0 0 +
jnz loc_1007547  +
mov eax [ebp+arg_0] +
mov dword_1013DB0 1 +
mov dword_1013DA8 eax +
call sub_1006E2C  +
test eax eax +
jz loc_1007440  +
push offset ProcName  +
push offset ModuleName  +
mov dword_1013D60 offset loc_1006C96 +
mov dword_1013D70 offset loc_1006D0A +
mov dword_1013D7C offset loc_1006D84 +
mov dword_1013D8C offset loc_1006C85 +
mov dword_1013D90 offset loc_1006DE8 +
mov dword_1013D94 offset loc_1006DF9 +
mov dword_1013DA0 offset loc_1006E0A +
mov dword_1013DA4 offset loc_1006E1B +
call ds:GetModuleHandleW  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1007490  +
mov dword_1013D9C eax +
jmp loc_100749A  +
mov dword_1013D60 offset loc_1006ED7 +
mov dword_1013D70 offset loc_1006FB2 +
mov dword_1013D7C offset loc_1007093 +
mov dword_1013D8C offset loc_1006C85 +
mov dword_1013D90 offset loc_1007162 +
mov dword_1013D94 offset loc_10071D3 +
mov dword_1013DA0 offset loc_100726F +
mov dword_1013DA4 offset loc_100730B +
mov dword_1013D9C offset loc_1006C7B +
push 103h  +
lea eax [ebp-107h] +
push 0  +
push eax  +
mov dword_1013D64 offset loc_1006B92 +
mov dword_1013D68 offset loc_1006BA3 +
mov dword_1013D6C offset loc_1006BB4 +
mov dword_1013D74 offset loc_1006BC5 +
mov dword_1013D78 offset loc_1006BE6 +
mov dword_1013D80 offset loc_1006BF7 +
mov dword_1013D84 offset loc_1006C3F +
mov dword_1013D88 offset loc_1006E5C +
mov [ebp+LibFileName] 0 +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+LibFileName] +
push eax  +
push offset Src  +
call ds:ExpandEnvironmentStringsA  +
test eax eax +
jz loc_100753D  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryA  +
mov dword_1013D98 offset loc_1006C61 +
test eax eax +
jnz loc_1007547  +
mov dword_1013D98 offset loc_1006C71 +
mov ecx [ebp+var_4] +
xor eax eax +
xor ecx ebp +
inc eax  +
call sub_10049E5  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
cmp dword ptr [esi+4] 20000h +
jbe loc_1007587  +
push dword ptr [esi]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10075BF  +
call sub_1009F4C  +
call __EH_epilog3  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 14h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10075F1  +
call sub_100AA2A  +
call __EH_epilog3  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_1007623  +
call sub_100AB81  +
call __EH_epilog3  +
retn   +
***
retn   +
***
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1007652  +
and dword ptr [eax+4] 0 +
and dword ptr [eax+8] 0 +
mov dword ptr [eax] offset off_1002034 +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B208  +
test [ebp+arg_0] 1 +
jz loc_1007674  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10076A7  +
call sub_100ADFF  +
call __EH_epilog3  +
retn   +
***
push 4  +
mov eax offset __ehhandler$?empty@locale@std@@SA?AV12@XZ +
call __EH_prolog3  +
push 120h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10076DC  +
call sub_100BC4B  +
call __EH_epilog3  +
retn   +
***
mov eax offset aXmllogformatte +
retn   +
***
push 4  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1007705  +
mov dword ptr [eax] offset off_1002054 +
retn   +
***
xor eax eax +
retn   +
***
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002054 +
jz loc_1007728  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
lea esi [ecx+0Ch] +
mov ecx esi +
call sub_100755D  +
mov ecx esi +
pop esi  +
jmp sub_100519A  +
***
push 2  +
pop eax  +
retn   +
***
mov eax [ecx+4] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100AD03  +
test [ebp+arg_0] 1 +
jz loc_100777A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100779E  +
push esi  +
mov esi offset dword_1001FE4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
test ecx ecx +
jz locret_10077B3  +
push 1  +
call sub_1007760  +
retn   +
***
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10077D8  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1002094 +
or dword ptr [eax+8] 0FFFFFFFFh +
and dword ptr [eax+0Ch] 0 +
retn   +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_10077F8  +
push esi  +
mov esi offset dword_1001FF4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
test ecx ecx +
jz locret_100780D  +
push 1  +
call sub_100765A  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100782B  +
push esi  +
mov esi offset dword_1002024 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_1007908  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1007908  +
mov edi dword_1013DB4 +
test edi edi +
jnz loc_1007893  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1007885  +
push 64h  +
mov ecx eax +
call sub_1009E8B  +
jmp loc_1007887  +
xor eax eax +
mov edi eax +
mov dword_1013DB4 edi +
test eax eax +
jz loc_1007908  +
and dword ptr [edi+8] 0 +
jmp loc_10078B8  +
mov ecx [eax+4] +
cmp ecx [esi] +
jnz loc_10078B8  +
mov ecx [eax+8] +
cmp ecx [esi+4] +
jnz loc_10078B8  +
mov ecx [eax+0Ch] +
cmp ecx [esi+8] +
jnz loc_10078B8  +
mov ecx [eax+10h] +
cmp ecx [esi+0Ch] +
jz loc_1007911  +
mov ecx edi +
call sub_10083A4  +
test eax eax +
jnz loc_1007899  +
push 18h  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_1007908  +
and dword ptr [ebx] 0 +
mov eax [ebp+arg_4] +
mov ecx dword_1013DB4 +
lea edi [ebx+4] +
movs   +
movs   +
movs   +
movs   +
push ebx  +
mov [ebx+14h] eax +
call sub_1009ED7  +
test eax eax +
jnz loc_100791D  +
push ebx  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor ecx ecx +
cmp [eax+14h] ebx +
setz cl  +
mov eax ecx +
jmp loc_100790A  +
xor eax eax +
inc eax  +
jmp loc_100790A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi dword_1013DB4 +
test esi esi +
jnz loc_100793F  +
xor eax eax +
inc eax  +
jmp loc_10079CA  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_100794B  +
xor eax eax +
jmp loc_10079C9  +
and dword ptr [esi+8] 0 +
push edi  +
jmp loc_1007971  +
mov eax [edi+4] +
cmp eax [ebx] +
jnz loc_1007971  +
mov eax [edi+8] +
cmp eax [ebx+4] +
jnz loc_1007971  +
mov eax [edi+0Ch] +
cmp eax [ebx+8] +
jnz loc_1007971  +
mov eax [edi+10h] +
cmp eax [ebx+0Ch] +
jz loc_1007980  +
mov ecx esi +
call sub_10083A4  +
mov edi eax +
test edi edi +
jnz loc_1007952  +
jmp loc_10079C5  +
cmp dword ptr [edi] 0 +
jz loc_1007989  +
xor eax eax +
jmp loc_10079C8  +
push edi  +
mov ecx esi +
call sub_1008367  +
push edi  +
xor edi edi +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov esi dword_1013DB4 +
mov ecx esi +
mov [esi+8] edi +
call sub_10083A4  +
test eax eax +
jnz loc_10079C5  +
push 1  +
mov ecx esi +
call sub_100850B  +
mov dword_1013DB4 edi +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi dword_1013DB4 +
test edi edi +
jnz loc_10079E8  +
xor eax eax +
jmp loc_1007A29  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_10079F4  +
xor eax eax +
jmp loc_1007A28  +
and dword ptr [edi+8] 0 +
push esi  +
jmp loc_1007A1A  +
mov eax [esi+4] +
cmp eax [ebx] +
jnz loc_1007A1A  +
mov eax [esi+8] +
cmp eax [ebx+4] +
jnz loc_1007A1A  +
mov eax [esi+0Ch] +
cmp eax [ebx+8] +
jnz loc_1007A1A  +
mov eax [esi+10h] +
cmp eax [ebx+0Ch] +
jz loc_1007A2E  +
mov ecx edi +
call sub_10083A4  +
mov esi eax +
test esi esi +
jnz loc_10079FB  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 4  +
call dword ptr [esi+14h]  +
test eax eax +
jz loc_1007A27  +
inc dword ptr [esi]  +
jmp loc_1007A27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_1013DB4 0 +
push edi  +
mov edi [ebp+arg_0] +
jnz loc_1007A61  +
xor eax eax +
jmp loc_1007AA9  +
test edi edi +
jz loc_1007A5D  +
mov eax [edi] +
push esi  +
lea ecx [ebp+var_14] +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
mov esi dword_1013DB4 +
and dword ptr [esi+8] 0 +
jmp loc_1007A9D  +
mov ecx [eax+4] +
cmp ecx [ebp+var_14] +
jnz loc_1007A9D  +
mov ecx [eax+8] +
cmp ecx [ebp+var_10] +
jnz loc_1007A9D  +
mov ecx [eax+0Ch] +
cmp ecx [ebp+var_C] +
jnz loc_1007A9D  +
mov ecx [eax+10h] +
cmp ecx [ebp+var_8] +
jz loc_1007AB8  +
mov ecx esi +
call sub_10083A4  +
test eax eax +
jnz loc_1007A7D  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10049E5  +
leave   +
retn 4  +
dec dword ptr [eax]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+1Ch]  +
xor eax eax +
inc eax  +
jmp loc_1007AA8  +
***
call sub_1007846  +
push offset loc_10075FC  +
push offset dword_1001FD4  +
call sub_1007846  +
push offset loc_10077B9  +
push offset dword_1001FE4  +
call sub_1007846  +
push offset loc_1007637  +
push offset dword_1001FF4  +
call sub_1007846  +
push offset loc_1007680  +
push offset dword_1002004  +
call sub_1007846  +
push offset loc_10076B2  +
push offset dword_1002014  +
call sub_1007846  +
push offset loc_10076F2  +
push offset dword_1002024  +
call sub_1007846  +
push offset loc_1007598  +
push offset dword_1001FB4  +
call sub_1007846  +
xor eax eax +
inc eax  +
retn   +
***
push offset dword_1002004  +
call sub_1007927  +
push offset dword_1002014  +
call sub_1007927  +
push offset dword_1001FE4  +
call sub_1007927  +
push offset dword_1001FF4  +
call sub_1007927  +
push offset dword_1001FD4  +
call sub_1007927  +
push offset dword_1001FC4  +
call sub_1007927  +
push offset dword_1001FB4  +
call sub_1007927  +
xor eax eax +
inc eax  +
retn   +
***
jz locret_1007BCB  +
call sub_1007B4C  +
mov ecx dword_1013DB4 +
test ecx ecx +
jz locret_1007BCB  +
push 1  +
call sub_100850B  +
and dword_1013DB4 0 +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1007BEC  +
cmp [esi] ax +
jz loc_1007BE8  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1007BDE  +
test edx edx +
jnz loc_1007BF1  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1007C02  +
test eax eax +
jl loc_1007BFF  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
jmp sub_10095C6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
push 8  +
push 0  +
jnz loc_1007C7E  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
jmp loc_1007C95  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [esi+4] +
mov [ecx] eax +
mov eax [esi+4] +
mov eax [eax] +
mov [esi+4] eax +
test eax eax +
jz loc_1007CAD  +
and dword ptr [eax] 0 +
mov eax [esi+4] +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
xor eax eax +
inc eax  +
jmp loc_1007CAF  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
push eax  +
call ds:HeapFree  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+4] +
mov edx [ebp+arg_4] +
push esi  +
mov esi [eax+8] +
sub esi ecx +
cmp edx esi +
pop esi  +
jbe loc_1007CFD  +
xor eax eax +
jmp loc_1007D08  +
add ecx edx +
mov [eax+4] ecx +
mov eax [eax] +
sub eax edx +
add eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
cmp [ebp+arg_4] eax +
ja loc_1007D27  +
sub eax [ebp+arg_4] +
mov [ecx+4] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_1007D62  +
push esi  +
push offset sub_100519A  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 0Ch  +
push edi  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
test [ebp+arg_0] 1 +
jz loc_1007D5D  +
push esi  +
call sub_1007C28  +
mov eax esi +
pop esi  +
jmp loc_1007D76  +
call sub_100519A  +
test [ebp+arg_0] 1 +
jz loc_1007D74  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+28h] +
test ecx ecx +
jz loc_1007D9B  +
push 3  +
call sub_1007D30  +
and dword ptr [esi+28h] 0 +
and dword ptr [esi+2Ch] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov edi ecx +
push 0  +
push dword ptr [edi+8]  +
call memset  +
add esp 0Ch +
cmp esi 1010h +
jnb loc_1007DC8  +
xor eax eax +
jmp loc_1007E00  +
mov ecx [edi+8] +
and dword ptr [ecx+4] 0 +
lea eax [esi-1000h] +
shr eax 1 +
add eax 7 +
and eax 0FFFFFFF8h +
mov [ecx+8] eax +
mov dword ptr [ecx] 1000h +
lea ecx [eax+1000h] +
mov eax [edi+8] +
and dword ptr [eax+10h] 0 +
add eax 0Ch +
sub esi ecx +
mov [eax] ecx +
mov [eax+8] esi +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+0Ch] +
call sub_100960A  +
xor edi edi +
lea ecx [esi+14h] +
mov [esi+8] edi +
call sub_10095C6  +
mov eax [esi+1Ch] +
cmp eax edi +
jz loc_1007E45  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+8] ebx +
jz loc_1007F4B  +
cmp [esi+1Ch] ebx +
jz loc_1007F4B  +
mov eax [esi+8] +
push edi  +
mov edi [eax] +
add edi eax +
mov eax [eax+4] +
xor edx edx +
mov ecx 20Ch +
div  ecx +
mov ecx [esi+20h] +
dec ecx  +
mov [ebp+var_14] edi +
mov [ebp+var_10] ecx +
js loc_1007F45  +
dec eax  +
imul ecx ecx +
mov [ebp+var_18] eax +
mov [ebp+var_C] ecx +
mov ecx [esi+1Ch] +
mov eax [ebp+var_18] +
add ecx [ebp+var_C] +
cmp eax ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] eax +
jl loc_1007F32  +
imul eax eax +
add eax edi +
mov edi ecx +
lea edx [eax+0Ch] +
mov bx [edx] +
cmp bx [edi] +
jnz loc_1007EE7  +
test bx bx +
jz loc_1007EE3  +
mov bx [edx+2] +
cmp bx [edi+2] +
jnz loc_1007EE7  +
add edx 4 +
add edi 4 +
test bx bx +
jnz loc_1007EC1  +
xor edx edx +
jmp loc_1007EEC  +
sbb edx edx +
sbb edx 0FFFFFFFFh +
xor ebx ebx +
cmp edx ebx +
jnz loc_1007EF6  +
dec dword ptr [eax]  +
jz loc_1007F0A  +
mov edx 20Ch +
add [ebp+var_4] edx +
dec [ebp+var_8]  +
sub eax edx +
cmp [ebp+var_8] ebx +
jge loc_1007EBC  +
jmp loc_1007F2F  +
cmp [ebp+var_4] ebx +
jz loc_1007F22  +
push [ebp+var_4]  +
lea ecx [eax+20Ch] +
push ecx  +
push eax  +
call memcpy  +
add esp 0Ch +
push 20Ch  +
push dword ptr [esi+8]  +
call sub_1007D11  +
mov edi [ebp+var_14] +
dec [ebp+var_10]  +
sub [ebp+var_C] 220h +
cmp [ebp+var_10] ebx +
jge loc_1007EA1  +
xor eax eax +
inc eax  +
pop edi  +
jmp loc_1007F4D  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push 10h  +
push offset dword_100F8B0  +
call __SEH_prolog4  +
xor ebx ebx +
xor esi esi +
mov [ebp-20h] esi +
mov [ebp-1Ch] ebx +
mov edi [ebp+8] +
lea ecx [edi+14h] +
call sub_10095E2  +
mov [ebp-4] ebx +
mov dword ptr [ebp-4] 1 +
cmp [edi+38h] ebx +
jnz loc_1007FCC  +
cmp [ebp+0Ch] ebx +
jz loc_1007FCC  +
push dword ptr [ebp+0Ch]  +
call sub_10079D4  +
mov esi eax +
mov [ebp-20h] esi +
cmp esi ebx +
jz loc_1007FCC  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax]  +
test eax eax +
jnz loc_1007FCC  +
lea ebx [edi+4] +
mov eax [esi] +
push ebx  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1007FCC  +
mov eax [esi] +
push 1  +
push ebx  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov [edi+38h] esi +
mov dword ptr [ebp-1Ch] 1 +
and dword ptr [ebp-4] 0 +
call sub_1007FF2  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100802D  +
mov eax [ebp-1Ch] +
call __SEH_epilog4  +
retn 10h  +
***
cmp dword ptr [ebp-1Ch] 0 +
lea ecx [edi+14h] +
call sub_10095F7  +
retn   +
***
push 8  +
push offset dword_100F8D8  +
call __SEH_prolog4  +
mov esi [ebp+8] +
lea ecx [esi+14h] +
call sub_10095E2  +
and dword ptr [ebp-4] 0 +
mov ecx [esi+38h] +
test ecx ecx +
jz loc_1008074  +
mov eax [ecx] +
push 1  +
lea edx [esi+4] +
push edx  +
call dword ptr [eax+14h]  +
push dword ptr [esi+38h]  +
call sub_1007A3E  +
and dword ptr [esi+38h] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100808E  +
xor eax eax +
inc eax  +
call __SEH_epilog4  +
retn 8  +
***
lea ecx [esi+14h] +
call sub_10095F7  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
push ebx  +
push esi  +
push edi  +
mov edi [eax+0Ch] +
xor ebx ebx +
add edi eax +
mov [ebp+var_4] ecx +
cmp [eax+10h] ebx +
jbe loc_10080DA  +
push [ebp+arg_4]  +
lea esi [ebx+edi] +
lea eax [esi+18h] +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10080EA  +
mov eax [ebp+var_4] +
add ebx [esi] +
mov eax [eax+8] +
cmp ebx [eax+10h] +
jb loc_10080B7  +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
mov ecx [esi+8] +
mov eax [ebp+arg_0] +
cmp ecx [eax] +
jnz loc_1008113  +
mov ecx [esi+0Ch] +
cmp ecx [eax+4] +
jnz loc_1008113  +
mov ecx [esi+10h] +
cmp ecx [eax+8] +
jnz loc_1008113  +
mov ecx [esi+14h] +
cmp ecx [eax+0Ch] +
jnz loc_1008113  +
mov eax [ebp+arg_8] +
mov [eax] esi +
jmp loc_10080E0  +
xor eax eax +
jmp loc_10080E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_100809C  +
test eax eax +
jz loc_1008185  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1008181  +
dec dword ptr [edi+4]  +
jnz loc_1008181  +
mov ecx [esi+8] +
mov eax [edi] +
mov edx [ecx+0Ch] +
mov [ebp+arg_4] eax +
sub eax edx +
sub eax ecx +
add eax edi +
cmp eax [ecx+10h] +
jnb loc_1008172  +
push ebx  +
mov ebx ecx +
mov ebx [ebx+10h] +
sub ebx eax +
add edx ecx +
push ebx  +
add edx eax +
push edx  +
push edi  +
call memcpy  +
add esp 0Ch +
pop ebx  +
mov eax [esi+8] +
push [ebp+arg_4]  +
add eax 0Ch +
push eax  +
call sub_1007D11  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
imul eax eax +
push edi  +
push eax  +
xor edi edi +
push edi  +
mov [ebp-8] esi +
mov dword ptr [ebp-10h] 1 +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-14h] eax +
cmp eax edi +
jz loc_10082DD  +
push ebx  +
mov [ebp-0Ch] edi +
cmp [esi+20h] edi +
jbe loc_1008285  +
mov [ebp-4] edi +
lea ebx [eax+10h] +
mov ecx [esi+1Ch] +
mov eax [ebp-4] +
lea esi [ecx+eax+208h] +
push 6  +
lea edi [ebx-10h] +
pop ecx  +
movs   +
mov esi [ebp-8] +
mov ecx [esi+1Ch] +
mov eax [ecx+eax+208h] +
cmp eax 2 +
jnz loc_1008222  +
mov ecx [ebx] +
test ecx ecx +
jbe loc_1008222  +
push ecx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx-8] eax +
test eax eax +
jz loc_1008262  +
push dword ptr [ebx]  +
jmp loc_100824A  +
test eax eax +
jnz loc_1008266  +
mov eax [ebx] +
test eax eax +
jbe loc_1008266  +
add eax eax +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx-8] eax +
test eax eax +
jz loc_1008262  +
mov ecx [ebx] +
add ecx ecx +
push ecx  +
mov edx [ebp-4] +
mov ecx [esi+1Ch] +
push dword ptr [ecx+edx+210h]  +
push eax  +
call memcpy  +
add esp 0Ch +
jmp loc_1008266  +
and dword ptr [ebp-10h] 0 +
inc dword ptr [ebp-0Ch]  +
mov eax [ebp-0Ch] +
add dword ptr [ebp-4] 220h +
add ebx 18h +
cmp eax [esi+20h] +
jb loc_10081DA  +
cmp dword ptr [ebp-10h] 0 +
jz loc_1008294  +
push dword ptr [ebp-14h]  +
lea ecx [esi+48h] +
call sub_1007C5C  +
test eax eax +
jnz loc_10082DC  +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [esi+20h] 0 +
mov ebx ds:HeapFree +
jbe loc_10082CE  +
mov edi [ebp-14h] +
mov eax [edi] +
cmp eax 2 +
jz loc_10082B2  +
test eax eax +
jnz loc_10082C0  +
push dword ptr [edi+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
add edi 18h +
cmp eax [esi+20h] +
jb loc_10082A7  +
push dword ptr [ebp-14h]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+8] ebx +
jnz loc_10082FA  +
xor eax eax +
jmp loc_1008326  +
push edi  +
xor edi edi +
cmp [esi+1Ch] ebx +
jbe loc_1008323  +
mov eax [esi+18h] +
push dword ptr [ebp+8]  +
add eax ebx +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100832C  +
inc edi  +
add ebx 220h +
cmp edi [esi+1Ch] +
jb loc_1008302  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1008335  +
mov [eax] edi +
xor eax eax +
inc eax  +
jmp loc_1008325  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1008360  +
mov ecx [esi+4] +
shl ecx 2 +
push ecx  +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
test edi edi +
jz loc_1008391  +
mov edx [ecx+4] +
push esi  +
test edx edx +
jbe loc_100838E  +
mov ecx [ecx] +
mov esi ecx +
cmp [esi] edi +
jz loc_1008396  +
inc eax  +
add esi 4 +
cmp eax edx +
jb loc_1008382  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
and dword ptr [ecx+eax*4] 0 +
xor eax eax +
inc eax  +
jmp loc_1008390  +
***
mov eax [ecx+8] +
cmp eax [ecx+4] +
jnb loc_10083C0  +
mov eax [ecx] +
mov edx [ecx+8] +
cmp dword ptr [eax+edx*4] 0 +
jnz loc_10083C3  +
inc edx  +
mov [ecx+8] edx +
cmp edx [ecx+4] +
jb loc_10083AE  +
xor eax eax +
retn   +
mov eax [eax+edx*4] +
inc edx  +
mov [ecx+8] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_10083E7  +
cmp edx 7FFFFFFFh +
jbe loc_10083EC  +
mov eax 80070057h +
test eax eax +
jl loc_1008402  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100E1A2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
shr esi 1 +
push 0  +
pop eax  +
mov ebx 7FFFFFFFh +
jz loc_1008425  +
cmp esi ebx +
jbe loc_100842A  +
mov eax 80070057h +
test eax eax +
jl loc_1008442  +
mov eax [ebp+arg_0] +
push edi  +
lea edi [ebp+arg_4] +
mov edx esi +
call sub_1007BD1  +
mov ecx [ebp+arg_4] +
pop edi  +
jmp loc_1008444  +
xor ecx ecx +
test eax eax +
jl loc_100845D  +
mov eax [ebp+arg_0] +
mov edx esi +
push ebx  +
sub edx ecx +
lea ecx [eax+ecx*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_100E1A2  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call __EH_prolog3  +
mov ebx ecx +
mov esi [ebp+8] +
test esi esi +
jnz loc_1008481  +
xor eax eax +
jmp loc_10084FE  +
cmp dword ptr [ebx+28h] 0 +
jz loc_100848C  +
call sub_1007D80  +
xor ecx ecx +
push 0Ch  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_1007C08  +
mov [ebp+8] eax +
xor edi edi +
mov [ebp-4] edi +
cmp eax edi +
jz loc_10084D2  +
push offset sub_100519A  +
push offset loc_100689D  +
push esi  +
lea edi [eax+4] +
push 0Ch  +
push edi  +
mov [eax] esi +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebx+28h] edi +
test edi edi +
jz loc_100847D  +
mov [ebx+2Ch] esi +
test esi esi +
jbe loc_10084FB  +
xor edi edi +
mov ecx [ebx+28h] +
push 400h  +
add ecx edi +
call sub_10096BD  +
add edi 0Ch +
dec esi  +
jnz loc_10084E6  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007734  +
test [ebp+arg_0] 1 +
jz loc_1008525  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
xor edi edi +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov eax [ebp+8] +
mov [ebp-4] edi +
mov [ebp-10h] edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1008556  +
sub eax ecx +
sar eax 1 +
lea eax [eax+eax+10h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1009638  +
mov ebx eax +
cmp ebx edi +
jnz loc_1008589  +
lea ecx [ebp-1Ch] +
call sub_100519A  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-14h]  +
push ebx  +
call sub_10083D0  +
push offset aSection  +
push dword ptr [ebp-14h]  +
push ebx  +
call sub_100840B  +
lea eax [ebp-10h] +
push eax  +
push 8000h  +
push ebx  +
lea ecx [esi+0Ch] +
call sub_1009930  +
test eax eax +
jnz loc_10085C5  +
lea ecx [ebp-1Ch] +
call sub_100519A  +
mov eax edi +
jmp loc_1008581  +
mov eax [esi+10h] +
mov [esi+8] eax +
cmp [ebp-10h] edi +
jnz loc_10085DC  +
push 8000h  +
mov ecx esi +
call sub_1007DA2  +
xor edi edi +
inc edi  +
jmp loc_10085B9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ecx+8] +
push ebx  +
mov ebx [eax] +
add ebx eax +
mov eax [eax+4] +
mov [ebp+var_10] ecx +
xor edx edx +
mov ecx 20Ch +
div  ecx +
and [ebp+var_8] 0 +
push esi  +
push edi  +
mov [ebp+var_C] eax +
test eax eax +
jbe loc_100869F  +
mov esi ebx +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
jbe loc_100867C  +
mov edi [ebp+arg_0] +
lea eax [edi+8] +
lea ecx [esi+0Ch] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_1008651  +
test dx dx +
jz loc_100864D  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_1008651  +
add ecx 4 +
add eax 4 +
test dx dx +
jnz loc_100862B  +
xor eax eax +
jmp loc_1008656  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100866D  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add edi 208h +
cmp eax [ebp+arg_4] +
jb loc_1008625  +
jmp loc_100867C  +
mov eax [esi+4] +
cmp eax [edi] +
jnz loc_10086E8  +
mov eax [esi+8] +
cmp eax [edi+4] +
jnz loc_10086E8  +
mov eax [ebp+arg_4] +
cmp [ebp+var_4] eax +
jnz loc_100868A  +
cmp dword ptr [esi+8] 0 +
jnz loc_10086E8  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add esi 20Ch +
cmp eax [ebp+var_C] +
jb loc_1008618  +
and [ebp+var_8] 0 +
cmp [ebp+arg_4] 0 +
jbe loc_100875A  +
mov edi [ebp+arg_0] +
and [ebp+arg_0] 0 +
cmp [ebp+var_C] 0 +
jbe loc_1008706  +
mov esi ebx +
lea ecx [edi+8] +
lea eax [esi+0Ch] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10086EC  +
test dx dx +
jz loc_10086E4  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10086EC  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_10086C2  +
xor eax eax +
jmp loc_10086F1  +
xor eax eax +
jmp loc_100875D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1008764  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add esi 20Ch +
cmp eax [ebp+var_C] +
jb loc_10086BC  +
mov eax [ebp+var_10] +
push 20Ch  +
push dword ptr [eax+8]  +
call sub_1007CE0  +
test eax eax +
jz loc_10086E8  +
mov ecx [ebp+var_10] +
mov esi [ecx+8] +
add esi eax +
lea eax [edi+8] +
push eax  +
push 200h  +
lea eax [esi+0Ch] +
push eax  +
mov dword ptr [esi] 1 +
call sub_10083D0  +
mov eax [edi] +
mov [esi+4] eax +
mov eax [edi+4] +
mov [esi+8] eax +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add edi 208h +
cmp eax [ebp+arg_4] +
jb loc_10086B0  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
inc dword ptr [esi]  +
jmp loc_1008745  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_18] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+8] 0 +
mov ebx ecx +
jz loc_10087CF  +
mov ecx [esi+4] +
mov eax [ecx] +
lea edx [ebp+var_14] +
push edx  +
call dword ptr [eax+4]  +
mov ecx [esi+8] +
lea eax [ebp+var_1C] +
push eax  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
call sub_100809C  +
test eax eax +
jz loc_10087CF  +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_1008855  +
xor ecx ecx +
cmp dword ptr [eax+4] 1 +
setz cl  +
mov [ebp+var_18] ecx +
push edi  +
lea edi [ebx+4] +
mov eax [edi] +
push 0  +
push 0  +
mov ecx edi +
call dword ptr [eax+4]  +
mov ecx [esi] +
test ecx ecx +
jz loc_10087F4  +
push [ebp+var_18]  +
mov eax [ecx] +
push edi  +
call dword ptr [eax+14h]  +
push dword ptr [esi]  +
call sub_1007A3E  +
push [ebp+var_18]  +
mov ecx [esi+4] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+14h]  +
push dword ptr [esi+4]  +
call sub_1007A3E  +
cmp dword ptr [esi+8] 0 +
jz loc_100883A  +
push [ebp+var_18]  +
mov ecx [esi+8] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+14h]  +
mov ecx [esi+8] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
call sub_100811C  +
test eax eax +
jz loc_1008854  +
push dword ptr [esi+8]  +
call sub_1007A3E  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
inc eax  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov esi ecx +
push dword ptr [ebp+8]  +
call sub_100809C  +
test eax eax +
jnz loc_100888A  +
xor eax eax +
jmp loc_1008901  +
mov eax [ebp-4] +
test eax eax +
jnz loc_10088FB  +
cmp [ebp+10h] eax +
jnz loc_1008886  +
mov eax [ebp+0Ch] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100889C  +
sub eax ecx +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+10h] eax +
add eax 1Fh +
and eax 0FFFFFFF8h +
push eax  +
mov [ebp-4] eax +
mov eax [esi+8] +
add eax 0Ch +
push eax  +
call sub_1007CE0  +
test eax eax +
jz loc_1008886  +
push ebx  +
mov ebx [esi+8] +
mov esi [ebp+8] +
push edi  +
push dword ptr [ebp+0Ch]  +
add ebx eax +
push dword ptr [ebp+10h]  +
mov dword ptr [ebx+4] 1 +
lea edi [ebx+8] +
movs   +
movs   +
movs   +
lea eax [ebx+18h] +
push eax  +
movs   +
call sub_10083D0  +
mov eax [ebp-4] +
pop edi  +
mov [ebx] eax +
pop ebx  +
jmp loc_10088FE  +
inc dword ptr [eax+4]  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 0Ch  +
***
push 8  +
push offset dword_100F950  +
call __SEH_prolog4  +
mov esi [ebp+8] +
lea ecx [esi+14h] +
call sub_10095E2  +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+50h] 1 +
mov ecx [esi+34h] +
call sub_100833F  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100894F  +
xor eax eax +
inc eax  +
call __SEH_epilog4  +
retn 4  +
***
lea ecx [esi+14h] +
call sub_10095F7  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi+4] offset off_10020B4 +
xor edi edi +
mov dword ptr [esi] offset off_1002104 +
mov dword ptr [esi+4] offset off_10020E4 +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [ebp-4] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+3Ch] edi +
mov [esi+40h] edi +
mov [esi+44h] edi +
push 18h  +
mov byte ptr [ebp-4] 2 +
mov [esi+4Ch] edi +
mov [esi+48h] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 3 +
cmp ecx edi +
jz loc_10089C4  +
push 64h  +
call sub_1009E8B  +
jmp loc_10089C6  +
xor eax eax +
push 18h  +
mov byte ptr [ebp-4] 2 +
mov [esi+30h] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 4 +
cmp ecx edi +
jz loc_10089EB  +
push 64h  +
call sub_1009E8B  +
jmp loc_10089ED  +
xor eax eax +
mov ecx [esi+30h] +
mov byte ptr [ebp-4] 2 +
mov [esi+34h] eax +
cmp ecx edi +
jz loc_1008A0A  +
cmp eax edi +
jnz loc_1008A27  +
cmp ecx edi +
jz loc_1008A0A  +
push 1  +
call sub_100850B  +
mov ecx [esi+34h] +
cmp ecx edi +
jz loc_1008A18  +
push 1  +
call sub_100850B  +
push edi  +
push edi  +
push 1  +
push 0C0000025h  +
call ds:RaiseException  +
mov [esi+8] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+38h] edi +
mov [esi+50h] edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
call sub_10096BD  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
call sub_1009638  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 38h +
call sub_10096EB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_1008AA8  +
mov edx [ecx+40h] +
mov [eax] edx +
mov eax [ecx+38h] +
pop ebp  +
retn 8  +
***
add ecx 38h +
jmp sub_100755D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
imul eax eax +
add eax [ecx+18h] +
pop ebp  +
retn 4  +
***
mov eax [ecx+1Ch] +
retn   +
***
call __SEH_prolog4  +
lea ecx [esi+14h] +
call sub_10095F7  +
retn   +
***
push 24h  +
push offset dword_100F9D8  +
call __SEH_prolog4  +
xor edi edi +
mov [ebp-2Ch] edi +
xor ebx ebx +
mov [ebp-30h] ebx +
mov [ebp-1Ch] edi +
mov [ebp-20h] edi +
mov [ebp-28h] edi +
mov [ebp-24h] edi +
mov [ebp-34h] edi +
cmp [ebp+14h] edi +
jnz loc_1008BB4  +
xor eax eax +
jmp loc_1008D77  +
mov ecx [ebp+8] +
add ecx 14h +
call sub_10095E2  +
mov [ebp-4] edi +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
cmp dword ptr [ebp+1Ch] 0 +
jz loc_1008C1E  +
push dword ptr [ebp+1Ch]  +
call sub_10079D4  +
mov edi eax +
mov [ebp-2Ch] edi +
test edi edi +
jz loc_1008D5F  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax]  +
cmp eax 2 +
jnz loc_1008D5F  +
mov edx [edi] +
mov eax [ebp+8] +
mov ecx eax +
add eax 4 +
neg ecx  +
sbb ecx ecx +
and ecx eax +
push ecx  +
push dword ptr [ebp+20h]  +
mov ecx edi +
call dword ptr [edx+8]  +
test eax eax +
jz loc_1008D5F  +
xor ecx ecx +
cmp eax 5 +
setz cl  +
mov [ebp-24h] ecx +
push dword ptr [ebp+14h]  +
call sub_10079D4  +
mov ebx eax +
mov [ebp-30h] ebx +
test ebx ebx +
jz loc_1008D5F  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax]  +
cmp eax esi +
jnz loc_1008D5F  +
mov esi [ebp+8] +
lea eax [esi+4] +
neg esi  +
sbb esi esi +
and esi eax +
mov eax [ebx] +
push esi  +
push dword ptr [ebp+18h]  +
mov ecx ebx +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1008D5F  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1008C9B  +
push dword ptr [ebp+0Ch]  +
call sub_10079D4  +
mov [ebp-1Ch] eax +
test eax eax +
jz loc_1008D5F  +
mov ecx eax +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jnz loc_1008D5F  +
mov ecx [ebp-1Ch] +
mov eax [ecx] +
push esi  +
push dword ptr [ebp+10h]  +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1008D5F  +
push 0Ch  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-20h] eax +
test eax eax +
jz loc_1008D5F  +
mov [eax+8] edi +
mov ecx [ebp-1Ch] +
mov [eax] ecx +
mov [eax+4] ebx +
test edi edi +
jz loc_1008CE7  +
push dword ptr [ebp-24h]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
push eax  +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
call near ptr dword_1008868+2  +
test eax eax +
jz loc_1008D5F  +
mov dword ptr [ebp-34h] 1 +
mov ecx [ebp+8] +
add ecx 4 +
mov eax [ecx] +
push 0  +
push 0  +
call dword ptr [eax+4]  +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_1008D0F  +
mov eax [eax] +
xor ecx ecx +
cmp [ebp-24h] ecx +
setz cl  +
push ecx  +
push esi  +
mov ecx [ebp-1Ch] +
call dword ptr [eax+0Ch]  +
xor eax eax +
cmp [ebp-24h] eax +
setz al  +
mov [ebp+1Ch] eax +
mov eax [ebx] +
push dword ptr [ebp+1Ch]  +
push esi  +
mov ecx ebx +
call dword ptr [eax+0Ch]  +
test edi edi +
jz loc_1008D34  +
mov eax [edi] +
push dword ptr [ebp+1Ch]  +
push esi  +
mov ecx edi +
call dword ptr [eax+0Ch]  +
mov ecx [ebp+8] +
add ecx 4 +
mov eax [ecx] +
call dword ptr [eax+10h]  +
push dword ptr [ebp-20h]  +
mov esi [ebp+8] +
mov ecx [esi+30h] +
call sub_1009ED7  +
push dword ptr [ebp-20h]  +
mov ecx [esi+34h] +
call sub_1009ED7  +
mov dword ptr [ebp-28h] 1 +
and dword ptr [ebp-4] 0 +
call sub_1008D85  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008DF1  +
mov eax [ebp-28h] +
call __SEH_epilog4  +
retn 20h  +
***
xor eax eax +
mov ecx [ebp+8] +
add ecx 14h +
call sub_10095F7  +
retn   +
***
push 8  +
push offset dword_100FA00  +
call __SEH_prolog4  +
mov esi [ebp+8] +
lea ecx [esi+14h] +
call sub_10095E2  +
and dword ptr [ebp-4] 0 +
mov ecx [esi+30h] +
and dword ptr [ecx+8] 0 +
call sub_10083A4  +
mov edi eax +
test edi edi +
jz loc_1008E52  +
cmp edi [ebp+0Ch] +
jnz loc_1008E69  +
push edi  +
mov ecx esi +
call sub_100876D  +
test eax eax +
jz loc_1008E69  +
push edi  +
mov ecx [esi+30h] +
call sub_1008367  +
push edi  +
mov ecx [esi+34h] +
call sub_1008367  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1008E71  +
xor eax eax +
inc eax  +
call __SEH_epilog4  +
retn 8  +
***
mov ecx [esi+30h] +
jmp loc_1008E24  +
***
lea ecx [esi+14h] +
call sub_10095F7  +
retn   +
***
push 1Ch  +
push offset dword_100FA40  +
call __SEH_prolog4  +
mov edi [ebp+8] +
mov eax [edi+20h] +
cmp [ebp+0Ch] eax +
jbe loc_1008F86  +
mov [ebp+0Ch] eax +
lea ecx [edi+14h] +
call sub_10095E2  +
xor edx edx +
mov [ebp-28h] edx +
wait   +
mov [ebp-4] edx +
lea ecx [ebp+10h] +
mov [ebp-20h] ecx +
mov [ebp-1Ch] edx +
mov [ebp-24h] edx +
mov eax [ebp-1Ch] +
cmp eax [ebp+0Ch] +
jnb loc_10090B9  +
imul eax eax +
mov esi [edi+1Ch] +
lea esi [eax+esi+208h] +
mov eax [esi] +
sub eax edx +
jz loc_1009025  +
dec eax  +
jz loc_100900F  +
dec eax  +
jz loc_1008FE6  +
dec eax  +
jz loc_1008FD6  +
mov [ebp-28h] edx +
jmp loc_10090EB  +
push 8  +
pop eax  +
add ecx eax +
mov [ebp-20h] ecx +
fld  qword ptr [ecx-8] +
fstp  qword ptr [esi+8] +
jmp loc_100901D  +
add ecx 4 +
mov [ebp-20h] ecx +
mov eax [ecx-4] +
mov [esi+8] eax +
add ecx 4 +
mov [ebp-20h] ecx +
mov eax [ecx-4] +
mov [esi+10h] eax +
cmp [esi+8] edx +
jnz loc_10090AE  +
mov [esi+10h] edx +
jmp loc_10090AE  +
push 4  +
pop eax  +
add ecx eax +
mov [ebp-20h] ecx +
mov ecx [ecx-4] +
mov [esi+8] ecx +
mov [esi+10h] eax +
jmp loc_10090AE  +
add ecx 4 +
mov [ebp-20h] ecx +
mov eax [ecx-4] +
mov [ebp-2Ch] eax +
cmp eax edx +
jz loc_10090A5  +
lea ebx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009038  +
sub eax ebx +
mov ebx eax +
mov eax [edi+28h] +
cmp eax edx +
jz loc_100909C  +
mov edi [ebp-24h] +
imul edi edi +
lea ecx [ebx+ebx+2] +
push ecx  +
lea ecx [edi+eax] +
call sub_10096EB  +
test eax eax +
jz loc_1009097  +
mov eax [ebp+8] +
mov eax [eax+28h] +
mov eax [edi+eax] +
mov [esi+8] eax +
xor ecx ecx +
mov edx [ebp-24h] +
mov [eax+edx*2] cx +
push dword ptr [ebp-2Ch]  +
push offset aS  +
lea eax [ebx+1] +
push eax  +
push dword ptr [esi+8]  +
call sub_10053AD  +
add esp 10h +
mov [esi+10h] ebx +
xor edx edx +
mov edi [ebp+8] +
jmp loc_10090AB  +
xor edx edx +
mov edi [ebp+8] +
mov dword ptr [esi+8] offset aLogCannotConve +
jmp loc_10090AE  +
mov [esi+8] edx +
mov [esi+10h] edx +
inc dword ptr [ebp-24h]  +
inc dword ptr [ebp-1Ch]  +
mov ecx [ebp-20h] +
jmp loc_1008FA3  +
***
mov eax [ebp-1Ch] +
cmp eax [edi+20h] +
jnb loc_10090DE  +
imul eax eax +
mov ecx [edi+1Ch] +
lea eax [eax+ecx+208h] +
fldz   +
fstp  qword ptr [eax+8] +
mov [eax+10h] edx +
inc dword ptr [ebp-1Ch]  +
jmp loc_10090B9  +
***
mov [ebp-20h] edx +
mov ecx edi +
call near ptr dword_1008E7C+3  +
mov [ebp-28h] eax +
wait   +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1009104  +
mov eax [ebp-28h] +
call __SEH_epilog4  +
retn   +
***
lea ecx [edi+14h] +
call sub_10095F7  +
retn   +
***
push 14h  +
push offset dword_100FA60  +
call __SEH_prolog4  +
mov ebx [ebp+8] +
mov eax [ebx+20h] +
cmp [ebp+0Ch] eax +
jbe loc_100912C  +
mov [ebp+0Ch] eax +
lea ecx [ebx+14h] +
call sub_10095E2  +
xor esi esi +
mov [ebp-24h] esi +
wait   +
mov [ebp-4] esi +
lea ecx [ebp+10h] +
mov [ebp-20h] ecx +
mov [ebp-1Ch] esi +
mov eax [ebp-1Ch] +
cmp eax [ebp+0Ch] +
jnb loc_10091EE  +
imul eax eax +
mov edx [ebx+1Ch] +
lea eax [eax+edx+208h] +
mov edx [eax] +
sub edx esi +
jz loc_10091BB  +
dec edx  +
jz loc_10091AB  +
dec edx  +
jz loc_1009189  +
dec edx  +
jz loc_1009179  +
mov [ebp-24h] esi +
jmp loc_1009220  +
push 8  +
pop edx  +
add ecx edx +
mov [ebp-20h] ecx +
fld  qword ptr [ecx-8] +
fstp  qword ptr [eax+8] +
jmp loc_10091E3  +
add ecx 4 +
mov [ebp-20h] ecx +
mov edx [ecx-4] +
mov [eax+8] edx +
add ecx 4 +
mov [ebp-20h] ecx +
mov edx [ecx-4] +
mov [eax+10h] edx +
cmp [eax+8] esi +
jnz loc_10091E6  +
mov [eax+10h] esi +
jmp loc_10091E6  +
push 4  +
pop edx  +
add ecx edx +
mov [ebp-20h] ecx +
mov edi [ecx-4] +
mov [eax+8] edi +
jmp loc_10091E3  +
add ecx 4 +
mov [ebp-20h] ecx +
mov edx [ecx-4] +
mov [eax+8] edx +
cmp edx esi +
jz loc_10091E1  +
lea edi [edx+2] +
mov si [edx] +
inc edx  +
inc edx  +
test si si +
jnz loc_10091CE  +
sub edx edi +
sar edx 1 +
inc edx  +
xor esi esi +
jmp loc_10091E3  +
xor edx edx +
mov [eax+10h] edx +
inc dword ptr [ebp-1Ch]  +
jmp loc_1009146  +
***
mov eax [ebp-1Ch] +
cmp eax [ebx+20h] +
jnb loc_1009213  +
imul eax eax +
mov ecx [ebx+1Ch] +
lea eax [eax+ecx+208h] +
fldz   +
fstp  qword ptr [eax+8] +
mov [eax+10h] esi +
inc dword ptr [ebp-1Ch]  +
jmp loc_10091EE  +
***
mov [ebp-20h] esi +
mov ecx ebx +
call near ptr dword_1008E7C+3  +
mov [ebp-24h] eax +
wait   +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1009239  +
mov eax [ebp-24h] +
call __SEH_epilog4  +
retn   +
***
lea ecx [ebx+14h] +
call sub_10095F7  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002104 +
mov dword ptr [esi+4] offset off_10020E4 +
mov dword ptr [ebp-4] 2 +
call sub_1008AE4  +
mov ecx [esi+34h] +
test ecx ecx +
jz loc_100927F  +
push 1  +
call sub_100850B  +
mov ecx [esi+30h] +
and dword ptr [esi+34h] 0 +
test ecx ecx +
jz loc_1009291  +
push 1  +
call sub_100850B  +
and dword ptr [esi+30h] 0 +
lea ecx [esi+3Ch] +
call sub_100519A  +
lea ecx [esi+14h] +
mov byte ptr [ebp-4] 0 +
call sub_10095C6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+0Ch] +
call sub_100960A  +
call __EH_epilog3  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-24h] 0 +
jnz loc_1009419  +
mov ecx esi +
call sub_1007E50  +
lea ecx [esi+14h] +
call sub_10095F7  +
cmp dword ptr [ebp-24h] 0 +
jnz locret_100942E  +
mov ecx esi +
call sub_1008AE4  +
retn   +
***
xor eax eax +
call __SEH_epilog4  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009247  +
test [ebp+arg_0] 1 +
jz loc_1009543  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1009562  +
push 1  +
call sub_1009529  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call sub_1007391  +
test eax eax +
jz loc_10095BD  +
push esi  +
push 54h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1009593  +
mov ecx eax +
call sub_100895D  +
mov esi eax +
jmp loc_1009595  +
xor esi esi +
test esi esi +
jz loc_10095B6  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10092C0  +
test eax eax +
jnz loc_10095BA  +
push 1  +
mov ecx esi +
call sub_1009529  +
xor eax eax +
jmp loc_10095BC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10095DB  +
push eax  +
call dword_1013D6C  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_10095F1  +
push 0FFFFFFFFh  +
push eax  +
call dword_1013D68  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_1009604  +
push eax  +
call dword_1013D64  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1009631  +
mov eax [esi+4] +
test eax eax +
jz loc_1009626  +
push eax  +
call dword_1013D78  +
and dword ptr [esi+4] 0 +
push dword ptr [esi]  +
call dword_1013D6C  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_1009675  +
mov edi [ebp+dwBytes] +
mov ebx edi +
test edi edi +
jnz loc_1009656  +
mov ebx 1000h +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
test eax eax +
jnz loc_1009670  +
xor eax eax +
jmp loc_10096B1  +
mov [esi+4] edi +
jmp loc_10096AC  +
mov ebx [ebp+dwBytes] +
cmp [esi+4] ebx +
jnb loc_10096AC  +
mov edi ds:GetProcessHeap +
push eax  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
push ebx  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
test eax eax +
jnz loc_10096A9  +
and [esi+4] eax +
and [esi+8] eax +
jmp loc_100966C  +
mov [esi+4] ebx +
mov eax [esi] +
mov [esi+8] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+dwBytes]  +
mov esi ecx +
call sub_1009638  +
test eax eax +
jz loc_10096DF  +
push 0  +
mov ecx esi +
call sub_1009638  +
xor eax eax +
inc eax  +
jmp loc_10096E1  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_1009703  +
push [ebp+dwBytes]  +
call sub_1009638  +
jmp loc_100972C  +
push edi  +
mov edi [ebp+dwBytes] +
cmp [esi+4] edi +
jnb loc_1009726  +
push edi  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
test eax eax +
jz loc_100972B  +
mov [esi] eax +
mov [esi+4] edi +
mov eax [esi] +
mov [esi+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push dword_1013DA8  +
mov esi 80h +
push esi  +
push 3  +
push 0  +
push [ebp+arg_0]  +
mov edi ecx +
call dword_1013D7C  +
mov [edi] eax +
cmp eax 0FFFFFFFFh +
jz loc_100976A  +
push eax  +
call dword_1013D6C  +
xor eax eax +
jmp loc_1009778  +
call ds:GetLastError  +
sub eax 20h +
neg eax  +
sbb eax eax +
inc eax  +
mov ecx [ebp+arg_10] +
test ecx ecx +
jz loc_1009781  +
mov [ecx] eax +
cmp [ebp+arg_8] 0 +
jz loc_100978F  +
test eax eax +
jnz loc_100978F  +
push 2  +
jmp loc_1009791  +
push 4  +
mov ecx [ebp+arg_C] +
neg ecx  +
pop eax  +
push dword_1013DA8  +
sbb ecx ecx +
and ecx 80000000h +
or ecx esi +
push ecx  +
push eax  +
mov eax [ebp+arg_4] +
neg eax  +
sbb eax eax +
and eax 3 +
push eax  +
push [ebp+arg_0]  +
call dword_1013D7C  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov [edi] eax +
pop edi  +
pop esi  +
mov eax ecx +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_10097EA  +
push eax  +
call dword_1013D6C  +
or dword ptr [esi] 0FFFFFFFFh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call dword_1013D80  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push 2  +
push 0  +
mov esi ecx +
push 0  +
push dword ptr [esi]  +
call dword_1013D80  +
test eax eax +
jz loc_100983D  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call dword_1013D84  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
test eax eax +
jz loc_100986E  +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
call ds:GetFileSizeEx  +
test eax eax +
jz loc_100986E  +
mov eax [ebp+var_8] +
or eax [ebp+var_4] +
jnz loc_100986E  +
inc eax  +
leave   +
retn   +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor ecx ecx +
mov [eax+10h] edx +
mov edx [ebp+arg_8] +
mov dword ptr [eax+4] 1 +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+14h] edx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+10h] +
push edi  +
mov edi [esi+4] +
test eax eax +
jz loc_10098CB  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10098C0  +
sub eax edx +
add edi eax +
mov eax [esi+14h] +
test eax eax +
jz loc_10098E0  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10098D5  +
sub eax edx +
add edi eax +
mov ecx [esi] +
mov eax [ecx] +
push 0  +
push edi  +
call dword ptr [eax+8]  +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
test eax eax +
jz loc_10098FA  +
xor eax eax +
mov [esi+8] edi +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10095C6  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_1013D60  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi] eax +
pop esi  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100960A  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call dword_1013D70  +
mov [esi] eax +
test eax eax +
jnz loc_1009956  +
xor eax eax +
jmp loc_1009970  +
push eax  +
call dword_1013D74  +
mov [esi+4] eax +
test eax eax +
jnz loc_100996D  +
mov ecx esi +
call sub_100960A  +
jmp loc_1009952  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_10099C0  +
call sub_10098AD  +
test eax eax +
jz loc_10099C0  +
mov eax [esi+18h] +
mov byte ptr [eax] 0 +
mov eax [esi+10h] +
test eax eax +
jz loc_10099BB  +
push eax  +
push dword ptr [esi+8]  +
push dword ptr [esi+18h]  +
call sub_1005223  +
mov eax [esi+10h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_10099AC  +
sub eax ecx +
add [esi+18h] eax +
mov [esi+0Ch] eax +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1009A1F  +
mov ecx [esi+18h] +
test ecx ecx +
jz loc_1009A1F  +
mov eax [esi+14h] +
test eax eax +
jz loc_1009A00  +
push eax  +
push dword ptr [esi+8]  +
push ecx  +
call sub_1005223  +
mov eax [esi+14h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_10099F1  +
sub eax ecx +
add [esi+0Ch] eax +
add [esi+18h] eax +
mov ecx [esi] +
mov eax [ecx] +
push 0  +
push dword ptr [esi+0Ch]  +
call dword ptr [eax+8]  +
mov ecx [esi+0Ch] +
mov [esi+1Ch] eax +
mov [esi+8] ecx +
add ecx eax +
xor eax eax +
mov [esi+18h] ecx +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
jz loc_1009A79  +
mov eax [esi+18h] +
test eax eax +
jz loc_1009A79  +
lea ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_4]  +
push dword ptr [esi+8]  +
push eax  +
call sub_10052FA  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
test eax eax +
jz loc_1009A7B  +
mov edx [esi+18h] +
push ebx  +
mov ecx edx +
push edi  +
lea edi [ecx+1] +
mov bl [ecx] +
inc ecx  +
test bl bl +
jnz loc_1009A64  +
sub ecx edi +
add [esi+0Ch] ecx +
add edx ecx +
pop edi  +
mov [esi+18h] edx +
pop ebx  +
jmp loc_1009A7B  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edx eax +
pop ecx  +
test edx edx +
jz loc_1009A9C  +
push edi  +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
pop edi  +
mov eax edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+8] 0 +
jnz loc_1009AC0  +
mov eax [esi+10h] +
test eax eax +
jz loc_1009AC0  +
push eax  +
call sub_100C369  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:_wcsicmp +
push offset aLog  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009AF1  +
xor ecx ecx +
jmp loc_1009B04  +
push offset aSuppress  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009B12  +
xor ecx ecx +
inc ecx  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1009B0D  +
mov [eax] ecx +
xor eax eax +
inc eax  +
jmp loc_1009B14  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_10021AC[esi*8]  +
push [ebp+arg_0]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009B49  +
inc esi  +
cmp esi 7 +
jb loc_1009B26  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1009B59  +
mov ecx ds:dword_10021B0[esi*8] +
mov [eax] ecx +
xor eax eax +
inc eax  +
jmp loc_1009B44  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_1009B7C  +
dec eax  +
jz loc_1009B77  +
dec eax  +
dec eax  +
jnz loc_1009B8A  +
xor eax eax +
inc eax  +
jmp loc_1009B8C  +
xor eax eax +
inc eax  +
cmp [ebp+arg_0] 0 +
jz loc_1009B8C  +
cmp [ebp+arg_0] eax +
jz loc_1009B8C  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_1009BE9  +
dec eax  +
jz loc_1009BDC  +
dec eax  +
jz loc_1009BD0  +
dec eax  +
jz loc_1009BC5  +
dec eax  +
jz loc_1009BBD  +
dec eax  +
jz loc_1009BB5  +
xor eax eax +
jmp loc_1009BF4  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_8] +
jmp loc_1009BCB  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
jmp loc_1009BD6  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
sbb eax eax +
inc eax  +
jmp loc_1009BF4  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_8] +
sbb eax eax +
neg eax  +
jmp loc_1009BF4  +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx [ebp+arg_8] +
setnz al  +
jmp loc_1009BF4  +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp ecx [ebp+arg_8] +
setz al  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
sub eax 0 +
jz loc_1009C62  +
dec eax  +
jz loc_1009C53  +
dec eax  +
jz loc_1009C46  +
dec eax  +
jz loc_1009C33  +
dec eax  +
jz loc_1009C26  +
dec eax  +
jnz loc_1009C40  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jmp loc_1009C6D  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 5 +
jmp loc_1009C6D  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 1 +
jz loc_1009C6F  +
xor eax eax +
pop ebp  +
retn 14h  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 41h +
jmp loc_1009C3E  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jnp loc_1009C40  +
jmp loc_1009C6F  +
fld  [ebp+arg_C] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
test ah 44h +
jp loc_1009C40  +
xor eax eax +
inc eax  +
jmp loc_1009C42  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
call sub_100C347  +
mov ecx [ebp+arg_4] +
sub ecx 0 +
jz loc_1009CA1  +
dec ecx  +
jz loc_1009C98  +
xor eax eax +
jmp loc_1009CA1  +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
cmp [ebp+arg_0] 0 +
jnz loc_1009CBF  +
xor eax eax +
jmp locret_1009D4A  +
push esi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push offset aUUU  +
push [ebp+arg_0]  +
xor esi esi +
inc esi  +
call swscanf_s  +
add esp 14h +
cmp eax 3 +
jz loc_1009D09  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push offset aUUU_0  +
push [ebp+arg_0]  +
call swscanf_s  +
add esp 14h +
cmp eax 3 +
jz loc_1009D09  +
xor eax eax +
jmp loc_1009D49  +
push edi  +
xor eax eax +
cmp [ebp+pvtime] 0 +
lea edi [ebp+SystemTime] +
stos   +
stos   +
stos   +
stos   +
mov ax word ptr [ebp+var_4] +
mov [ebp+SystemTime.wYear] ax +
mov ax word ptr [ebp+var_8] +
mov [ebp+SystemTime.wMonth] ax +
mov ax word ptr [ebp+var_C] +
mov [ebp+SystemTime.wDay] ax +
pop edi  +
jz loc_1009D47  +
push [ebp+pvtime]  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:SystemTimeToVariantTime  +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
mov esi ecx +
shl eax 2 +
push eax  +
lea ecx [esi+0Ch] +
call sub_10096EB  +
mov ebx eax +
test ebx ebx +
jz loc_1009D99  +
mov eax [esi+4] +
cmp eax edi +
jnb loc_1009D91  +
mov ecx edi +
sub ecx eax +
shl ecx 2 +
push ecx  +
lea eax [ebx+eax*4] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
mov [esi+4] edi +
mov [esi] ebx +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+8] +
sub eax 0 +
jz loc_1009DEC  +
dec eax  +
jz loc_1009DDD  +
dec eax  +
dec eax  +
jnz loc_1009DFB  +
lea eax [ebp+pvtime] +
push eax  +
push [ebp+arg_0]  +
call sub_1009CAA  +
test eax eax +
jz loc_1009DFB  +
fld  [ebp+pvtime] +
fstp  qword ptr [esi+10h] +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
push [ebp+arg_0]  +
call ds:_wtoi  +
pop ecx  +
mov [esi+10h] eax +
jmp loc_1009DD5  +
push [ebp+arg_0]  +
call sub_100C3C1  +
mov [esi+10h] eax +
test eax eax +
jnz loc_1009DD5  +
xor eax eax +
jmp loc_1009DD8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
call dword ptr [eax+18h]  +
test eax eax +
jnz loc_1009E22  +
xor eax eax +
jmp loc_1009E80  +
mov ecx [eax+208h] +
cmp ecx [esi+8] +
jnz loc_1009E1E  +
sub ecx 0 +
jz loc_1009E6D  +
dec ecx  +
jz loc_1009E58  +
dec ecx  +
dec ecx  +
jnz loc_1009E1E  +
fld  qword ptr [esi+10h] +
push ecx  +
push ecx  +
fstp  [esp+10h+var_14+4] +
push dword ptr [esi+4]  +
fld  qword ptr [eax+210h] +
push ecx  +
push ecx  +
mov ecx edi +
fstp  [esp+1Ch+var_20+4] +
call sub_1009BFD  +
jmp loc_1009E80  +
push dword ptr [esi+10h]  +
mov ecx edi +
push dword ptr [esi+4]  +
push dword ptr [eax+210h]  +
call sub_1009B95  +
jmp loc_1009E80  +
push dword ptr [esi+10h]  +
mov ecx edi +
push dword ptr [esi+4]  +
push dword ptr [eax+210h]  +
call sub_1009C79  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
xor eax eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [ebp-4] eax +
cmp [ebp+8] eax +
jnz loc_1009EB6  +
mov dword ptr [ebp+8] 64h +
push dword ptr [ebp+8]  +
mov ecx esi +
mov [esi+8] eax +
mov [esi+4] eax +
mov [esi] eax +
call sub_1009D53  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
test ebx ebx +
jnz loc_1009EEB  +
xor eax eax +
jmp loc_1009F41  +
mov eax [esi+4] +
xor edx edx +
test eax eax +
jbe loc_1009F02  +
mov ecx [esi] +
cmp [ecx] ebx +
jz loc_1009F1A  +
inc edx  +
add ecx 4 +
cmp edx eax +
jb loc_1009EF6  +
push edi  +
xor edi edi +
test eax eax +
jbe loc_1009F22  +
mov ecx [esi] +
cmp dword ptr [ecx] 0 +
jz loc_1009F1F  +
inc edi  +
add ecx 4 +
cmp edi eax +
jb loc_1009F0B  +
jmp loc_1009F22  +
xor eax eax +
inc eax  +
jmp loc_1009F41  +
mov [ebp+arg_0] edi +
cmp edi eax +
jnz loc_1009F35  +
inc eax  +
push eax  +
mov ecx esi +
call sub_1009D53  +
test eax eax +
jnz loc_1009F38  +
jmp loc_1009F40  +
mov edi [ebp+arg_0] +
mov eax [esi] +
mov [eax+edi*4] ebx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 64h  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1002228 +
call sub_1009E8B  +
and dword ptr [esi+1Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1009F91  +
push esi  +
mov esi offset dword_100219C +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 64h  +
lea ecx [esi+4] +
call sub_1009E8B  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1007734  +
test [ebp+arg_0] 1 +
jz loc_1009FD0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz locret_100A0AE  +
test edi edi +
jz locret_100A0AE  +
push edi  +
mov ecx [ebp-1Ch] +
call sub_1009AA4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea esi [edi+4] +
and dword ptr [esi+8] 0 +
mov ebx ecx +
jmp loc_100A0D9  +
push eax  +
push [ebp+arg_0]  +
mov ecx ebx +
call sub_1009E04  +
test eax eax +
jz loc_100A0F9  +
mov ecx esi +
call sub_10083A4  +
test eax eax +
jnz loc_100A0CA  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100A0EF  +
mov ecx [edi] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_100A0F2  +
***
call __EH_prolog3  +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100A12A  +
call sub_1009F9B  +
jmp loc_100A12C  +
xor eax eax +
test eax eax +
jz loc_100A133  +
and dword ptr [eax] 0 +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea esi [edi+4] +
and dword ptr [esi+8] 0 +
mov ebx ecx +
jmp loc_100A15C  +
push eax  +
mov ecx ebx +
call sub_1009AA4  +
mov ecx esi +
call sub_10083A4  +
test eax eax +
jnz loc_100A154  +
mov ecx esi +
call sub_100833F  +
test edi edi +
jz loc_100A17B  +
push 1  +
mov ecx edi +
call sub_1009FB3  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
and dword ptr [esi+8] 0 +
jmp loc_100A19E  +
push eax  +
mov ecx edi +
call sub_100A13E  +
mov ecx esi +
call sub_10083A4  +
test eax eax +
jnz loc_100A196  +
mov ecx esi +
call sub_100833F  +
and dword ptr [edi+1Ch] 0 +
pop edi  +
pop esi  +
retn   +
***
call __SEH_prolog4  +
xor esi esi +
cmp [ebp-2Ch] esi +
jnz loc_100A379  +
cmp [ebp-24h] esi +
jz loc_100A379  +
push dword ptr [ebp-24h]  +
mov ecx [ebp-28h] +
call sub_100A13E  +
cmp ebx esi +
jz loc_100A38C  +
push ebx  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-1Ch] esi +
jz loc_100A3A2  +
push dword ptr [ebp-1Ch]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp-20h] esi +
jz locret_100A3B8  +
push dword ptr [ebp-20h]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
call __SEH_prolog4  +
mov esi ds:GetProcessHeap +
cmp [ebp-28h] ebx +
jz loc_100A5CE  +
push dword ptr [ebp-28h]  +
call ds:fclose  +
pop ecx  +
cmp [ebp-34h] ebx +
jnz loc_100A5DB  +
mov ecx [ebp-38h] +
call sub_100A187  +
cmp [ebp-1Ch] ebx +
jz loc_100A5ED  +
push dword ptr [ebp-1Ch]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-24h] ebx +
jz loc_100A5FF  +
push dword ptr [ebp-24h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
cmp [ebp-20h] ebx +
jz locret_100A611  +
push dword ptr [ebp-20h]  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
push edi  +
lea edi [esi+4] +
and dword ptr [edi+8] 0 +
mov [ebp+var_4] eax +
jmp loc_100A643  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100A0B4  +
test eax eax +
jnz loc_100A64E  +
mov ecx edi +
call sub_10083A4  +
test eax eax +
jnz loc_100A630  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002228 +
and dword ptr [ebp-4] 0 +
call sub_100A187  +
lea ecx [esi+4] +
call sub_1007734  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A187  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_100A3BE  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100A617  +
xor ecx ecx +
test eax eax +
setnz cl  +
inc ecx  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A65C  +
test [ebp+arg_0] 1 +
jz loc_100A6ED  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jz loc_100A718  +
push dword ptr [ebp+0Ch]  +
push dword ptr [eax]  +
call sub_100A68F  +
test eax eax +
jz loc_100A718  +
xor eax eax +
inc eax  +
jmp loc_100A71A  +
xor eax eax +
pop ebp  +
retn 8  +
***
test ecx ecx +
jz locret_100A72E  +
push 1  +
call sub_100A6D3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100A752  +
mov eax [ebp+arg_0] +
jb loc_100A749  +
cmp eax 0FFFFFFFFh +
ja loc_100A752  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100A75D  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100A780  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100A78B  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_8] 0 +
push ebx  +
push esi  +
push edi  +
jbe loc_100A7F4  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
add esi 8 +
mov eax [esi-8] +
mov ebx [esi+4] +
test eax eax +
jz loc_100A7E2  +
push dword ptr [esi]  +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+14h]  +
test eax eax +
jz loc_100A7E2  +
mov ecx [esi] +
push dword ptr [ecx]  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+18h]  +
test eax eax +
jz loc_100A7FE  +
mov ecx [esi-4] +
cmp ecx [eax+208h] +
jmp loc_100A7E4  +
test ebx ebx +
jnz loc_100A7FE  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add esi 10h +
cmp eax [ebp+arg_8] +
jb loc_100A7B0  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
xor eax eax +
jmp loc_100A7F7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
xor ecx ecx +
mov edx [ebp+arg_0] +
cmp edx dword_10138D0[ecx*8] +
jz loc_100A824  +
inc ecx  +
cmp ecx 17h +
jb loc_100A810  +
jmp loc_100A846  +
mov eax off_10138D4[ecx*8] +
mov ecx eax +
push esi  +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_100A831  +
mov edx [ebp+arg_4] +
sub ecx esi +
sar ecx 1 +
inc ecx  +
mov [edx] ecx +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx 9000000h +
cmp eax ecx +
ja loc_100A8B6  +
jz loc_100A91E  +
test eax eax +
jz loc_100A92E  +
cmp eax 1000000h +
jz loc_100A8A3  +
cmp eax 2000000h +
jz loc_100A8F7  +
cmp eax 3000000h +
jz loc_100A907  +
cmp eax 4000000h +
jz loc_100A91E  +
cmp eax 5000000h +
jnz loc_100A8E0  +
mov eax offset aStatus +
jmp loc_100A933  +
mov ecx [ebp+arg_4] +
mov eax offset aFatalerror +
mov dword ptr [ecx] 0Bh +
jmp loc_100A93C  +
cmp eax 65000000h +
jz loc_100A92E  +
cmp eax 67000000h +
jz loc_100A91E  +
cmp eax 68000000h +
jz loc_100A917  +
cmp eax 6A000000h +
jz loc_100A907  +
cmp eax 6B000000h +
jz loc_100A8F7  +
cmp eax 70000000h +
jz loc_100A8F0  +
mov ecx [ebp+arg_4] +
mov eax offset aUndefined +
mov dword ptr [ecx] 0Ah +
jmp loc_100A93C  +
mov eax offset aTrace +
jmp loc_100A8FC  +
mov eax offset aError +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 6 +
jmp loc_100A93C  +
mov eax offset aWarning +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 8 +
jmp loc_100A93C  +
mov eax offset aVerbose +
jmp loc_100A90C  +
mov ecx [ebp+arg_4] +
mov eax offset aInfo +
mov dword ptr [ecx] 5 +
jmp loc_100A93C  +
mov eax offset aAssert +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 7 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 9000000h +
cmp ecx eax +
ja loc_100A988  +
jz loc_100A984  +
test ecx ecx +
jz loc_100A984  +
cmp ecx 1000000h +
jz loc_100A984  +
cmp ecx 2000000h +
jz loc_100A984  +
cmp ecx 3000000h +
jz loc_100A984  +
cmp ecx 4000000h +
jz loc_100A984  +
cmp ecx 5000000h +
jnz loc_100A9B8  +
xor ecx ecx +
jmp loc_100A9BF  +
cmp ecx 65000000h +
jz loc_100A9BC  +
cmp ecx 67000000h +
jz loc_100A9BC  +
cmp ecx 68000000h +
jz loc_100A9BC  +
cmp ecx 6A000000h +
jz loc_100A9BC  +
cmp ecx 6B000000h +
jz loc_100A9BC  +
cmp ecx 70000000h +
jz loc_100A9BC  +
xor eax eax +
jmp loc_100A9CB  +
xor ecx ecx +
inc ecx  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_100A9C8  +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor ecx ecx +
xor eax eax +
test edx edx +
jz loc_100AA13  +
cmp edx 1000000h +
jz loc_100AA13  +
cmp edx 2000000h +
jz loc_100AA13  +
cmp edx 9000000h +
jz loc_100AA13  +
cmp edx 65000000h +
jz loc_100AA0C  +
cmp edx 6B000000h +
jnz loc_100AA18  +
xor ecx ecx +
inc ecx  +
mov eax ecx +
jmp loc_100AA18  +
xor eax eax +
xor ecx ecx +
inc eax  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_100AA21  +
mov [edx] ecx +
pop ebp  +
retn 8  +
***
mov eax ecx +
or dword ptr [eax+4] 0FFFFFFFFh +
and dword ptr [eax+0Ch] 0 +
mov dword ptr [eax] offset off_10024B4 +
mov dword ptr [eax+8] 4000000h +
mov dword ptr [eax+10h] 1 +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp-4] eax +
cmp word_1013988 3Fh +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
mov ebx ecx +
jnz loc_100AAAD  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
call ds:GetWindowsDirectoryW  +
test eax eax +
jz loc_100AB0F  +
cmp eax 104h +
jnb loc_100AB0F  +
mov ax [ebp-20Ch] +
mov word_1013988 ax +
test esi esi +
jnz loc_100AAB6  +
xor eax eax +
inc eax  +
jmp loc_100AB11  +
mov eax [esi] +
test eax eax +
jz loc_100AB0F  +
mov edx [edi] +
lea ecx [ebp-210h] +
push ecx  +
push eax  +
mov ecx edi +
call dword ptr [edx+14h]  +
test eax eax +
jz loc_100AB0F  +
mov eax [ebp-210h] +
mov [ebx+4] eax +
mov edx [edi] +
push eax  +
mov ecx edi +
call dword ptr [edx+18h]  +
test eax eax +
jz loc_100AB0F  +
cmp dword ptr [eax+208h] 1 +
jnz loc_100AB0F  +
push 0  +
push dword ptr [esi+4]  +
call sub_100A945  +
test eax eax +
jz loc_100AB0F  +
mov eax [esi+4] +
mov [ebx+8] eax +
mov eax [esi+0Ch] +
mov [ebx+0Ch] eax +
mov eax [esi+8] +
mov [ebx+10h] eax +
jmp loc_100AAB1  +
***
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jz loc_100AB74  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+18h]  +
mov edx [eax+210h] +
lea eax [ebp+arg_0] +
push eax  +
push edx  +
call sub_100A945  +
test eax eax +
jz loc_100AB77  +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_100AB65  +
cmp [esi+10h] eax +
jz loc_100AB74  +
push 2  +
pop eax  +
jmp loc_100AB77  +
cmp [esi+0Ch] eax +
jz loc_100AB6F  +
cmp edx [esi+8] +
jmp loc_100AB5E  +
cmp edx [esi+8] +
jg loc_100AB60  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
or ecx 0FFFFFFFFh +
mov dword ptr [eax] offset off_1002504 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 50h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_100ABC5  +
xor eax eax +
jmp loc_100AC4C  +
mov edx [eax] +
push edi  +
lea edi [ecx+0Ch] +
mov [ebp-38h] edi +
mov edi [eax+4] +
mov [ebp-50h] edx +
mov [ebp-30h] edi +
lea edx [ecx+14h] +
lea edi [ecx+4] +
mov [ebp-48h] edx +
mov edx [eax+0Ch] +
mov [ebp-28h] edi +
mov edi [eax+10h] +
mov eax [eax+8] +
mov [ebp-20h] edi +
lea edi [ecx+10h] +
mov [ebp-40h] edx +
mov [ebp-10h] eax +
push 5  +
lea eax [ebp-50h] +
xor edx edx +
inc edx  +
mov [ebp-18h] edi +
mov edi [ebp+0Ch] +
push eax  +
add ecx 8 +
push edi  +
mov dword ptr [ebp-4Ch] 3 +
mov [ebp-44h] esi +
mov [ebp-3Ch] edx +
mov [ebp-34h] esi +
mov [ebp-2Ch] edx +
mov [ebp-24h] esi +
mov [ebp-1Ch] edx +
mov [ebp-14h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] edx +
call sub_100A794  +
test eax eax +
jz loc_100AC4B  +
mov eax [edi] +
push esi  +
push 4000h  +
mov ecx edi +
call dword ptr [eax]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+lpWideCharStr] +
test eax eax +
jz locret_100ACFA  +
movzx edx word ptr [eax] +
push esi  +
mov ecx eax +
test dx dx +
jz loc_100AC89  +
movzx edx dx +
mov esi 100h +
cmp dx si +
jnb loc_100AC89  +
inc ecx  +
inc ecx  +
movzx edx word ptr [ecx] +
test dx dx +
jnz loc_100AC75  +
cmp word ptr [ecx] 0 +
jnz loc_100AC93  +
xor eax eax +
jmp loc_100ACF9  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100AC96  +
sub eax edx +
sar eax 1 +
lea esi [eax+1] +
mov [ebp+cchWideChar] esi +
imul esi esi +
push ebx  +
push edi  +
mov edi ds:GetProcessHeap +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jz loc_100ACF5  +
push eax  +
push eax  +
push esi  +
push ebx  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push eax  +
push 0FDE9h  +
call ds:WideCharToMultiByte  +
test eax eax +
jg loc_100ACF0  +
push ebx  +
xor ebx ebx +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
mov byte ptr [esi+ebx-1] 0 +
pop edi  +
mov eax ebx +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002094 +
and dword ptr [ebp-4] 0 +
lea edi [esi+8] +
mov ecx edi +
call sub_10097D4  +
mov esi [esi+4] +
test esi esi +
jz loc_100AD3F  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx edi +
call sub_10097D4  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov ecx [ebp+8] +
mov eax [ecx] +
push edi  +
lea edx [ebp-4] +
push edx  +
mov [ebp-4] edi +
call dword ptr [eax+0Ch]  +
mov ebx eax +
cmp ebx edi +
jz loc_100ADB7  +
cmp [ebp-4] edi +
jz loc_100ADB7  +
cmp [esi+0Ch] edi +
jz loc_100ADA3  +
push 3  +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+8] +
mov byte ptr [ebp+8] 0EFh +
mov byte ptr [ebp+9] 0BBh +
mov byte ptr [ebp+0Ah] 0BFh +
call sub_1009810  +
test eax eax +
jz loc_100ADBA  +
mov [esi+0Ch] edi +
push dword ptr [ebp-4]  +
lea ecx [esi+8] +
push ebx  +
call sub_1009810  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_100ADBA  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+10h]  +
push dword ptr [esi+8]  +
call ds:FlushFileBuffers  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax ecx +
or ecx 0FFFFFFFFh +
mov dword ptr [eax] offset off_1002558 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
retn   +
***
xor eax eax +
inc eax  +
retn   +
***
retn   +
***
mov edi edi +
push ecx  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 60h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_100AE66  +
xor eax eax +
jmp loc_100AEFB  +
mov edx [eax] +
push edi  +
lea edi [ecx+4] +
mov [ebp-58h] edi +
mov edi [eax+4] +
mov [ebp-50h] edi +
mov [ebp-60h] edx +
xor edx edx +
inc edx  +
lea edi [ecx+8] +
mov [ebp-48h] edi +
mov edi [eax+8] +
mov [ebp-5Ch] edx +
mov [ebp-44h] edx +
mov [ebp-40h] edi +
mov [ebp-2Ch] edx +
lea edi [ecx+0Ch] +
lea edx [ecx+10h] +
mov [ebp-38h] edi +
mov edi [eax+0Ch] +
mov [ebp-28h] edx +
mov edx [eax+10h] +
mov eax [eax+14h] +
mov [ebp-10h] eax +
push 6  +
lea eax [ebp-60h] +
mov [ebp-30h] edi +
mov edi [ebp+0Ch] +
mov [ebp-20h] edx +
lea edx [ecx+14h] +
push eax  +
add ecx 18h +
push edi  +
mov [ebp-54h] esi +
mov [ebp-4Ch] esi +
mov [ebp-3Ch] esi +
mov [ebp-34h] esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] edx +
mov [ebp-14h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] esi +
call sub_100A794  +
test eax eax +
jz loc_100AEFA  +
mov eax [edi] +
push esi  +
push 4000h  +
mov ecx edi +
call dword ptr [eax]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 60h +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_100AF1E  +
xor eax eax +
jmp loc_100AFB4  +
mov edx [eax] +
push edi  +
lea edi [ecx+4] +
mov [ebp-58h] edi +
mov edi [eax+4] +
mov [ebp-50h] edi +
mov [ebp-60h] edx +
xor edx edx +
inc edx  +
lea edi [ecx+8] +
mov [ebp-48h] edi +
mov edi [eax+8] +
mov [ebp-5Ch] edx +
mov [ebp-54h] edx +
mov [ebp-44h] edx +
mov [ebp-40h] edi +
mov [ebp-2Ch] edx +
lea edi [ecx+0Ch] +
lea edx [ecx+10h] +
mov [ebp-38h] edi +
mov edi [eax+0Ch] +
mov [ebp-28h] edx +
mov edx [eax+10h] +
mov eax [eax+14h] +
mov [ebp-10h] eax +
push 6  +
lea eax [ebp-60h] +
mov [ebp-30h] edi +
mov edi [ebp+0Ch] +
mov [ebp-20h] edx +
lea edx [ecx+14h] +
push eax  +
add ecx 18h +
push edi  +
mov [ebp-4Ch] esi +
mov [ebp-3Ch] esi +
mov [ebp-34h] esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] edx +
mov [ebp-14h] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] ecx +
mov [ebp-4] esi +
call sub_100A794  +
test eax eax +
jz loc_100AFB3  +
mov eax [edi] +
push esi  +
push 4000h  +
mov ecx edi +
call dword ptr [eax+4]  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
push dword ptr [edi+8]  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ebx 208h +
add eax ebx +
cmp dword ptr [eax+8] 0 +
jnz loc_100AFE6  +
xor eax eax +
jmp loc_100B035  +
mov eax [eax+10h] +
mov [ebp+arg_0] eax +
mov eax [edi+4] +
cmp eax 0FFFFFFFFh +
jz loc_100AFE2  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov eax [eax+210h] +
test eax eax +
jz loc_100B00D  +
cmp eax 65000000h +
jnz loc_100B032  +
push dword ptr [edi+0Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
add eax ebx +
cmp dword ptr [eax+8] 0 +
jz loc_100B032  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_100A766  +
test eax eax +
jl loc_100AFE2  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_100B052  +
xor eax eax +
jmp loc_100B0C4  +
and [ebp+arg_0] 0 +
push esi  +
movzx esi word ptr [ebx] +
push edi  +
mov edi ebx +
jmp loc_100B0A6  +
push 103h  +
push esi  +
call ds:iswctype  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B09E  +
push 5Fh  +
pop eax  +
cmp ax si +
jz loc_100B09E  +
cmp [ebp+arg_0] 0 +
jbe loc_100B0C9  +
push 4  +
push esi  +
call ds:iswctype  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B09E  +
push 2Dh  +
pop eax  +
cmp ax si +
jz loc_100B09E  +
push 2Eh  +
pop eax  +
cmp ax si +
jnz loc_100B0C9  +
inc edi  +
inc edi  +
inc [ebp+arg_0]  +
movzx esi word ptr [edi] +
test si si +
jnz loc_100B05F  +
push 3  +
push offset aXml  +
push ebx  +
call ds:_wcsnicmp  +
add esp 0Ch +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100B0C2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_100B104  +
dec eax  +
jz loc_100B0FD  +
dec eax  +
jz loc_100B0F6  +
dec eax  +
jz loc_100B0EF  +
mov eax offset word_1001A12 +
jmp loc_100B109  +
mov eax offset aDatetime +
jmp loc_100B109  +
mov eax offset aHexbinary +
jmp loc_100B109  +
mov eax offset aInt +
jmp loc_100B109  +
mov eax offset aString +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push ebx  +
xor eax eax +
xor ebx ebx +
push esi  +
inc eax  +
push edi  +
mov [ebp+arg_4] ecx +
cmp ecx ebx +
jz loc_100B1E3  +
cmp [ecx] bx +
jz loc_100B1E3  +
mov edi [ebp+arg_0] +
mov esi offset aS_4 +
mov ecx [ebp+arg_4] +
movzx edx word ptr [ecx] +
mov ecx edx +
sub ecx 22h +
jz loc_100B1B8  +
sub ecx 4 +
jz loc_100B1A0  +
dec ecx  +
jz loc_100B195  +
sub ecx 15h +
jz loc_100B17D  +
dec ecx  +
dec ecx  +
jz loc_100B172  +
test edi edi +
jz loc_100B16F  +
push edx  +
push offset aC_0  +
push edi  +
call sub_1009A28  +
add esp 0Ch +
inc ebx  +
jmp loc_100B1CE  +
test edi edi +
jz loc_100B190  +
push offset aGt  +
jmp loc_100B186  +
test edi edi +
jz loc_100B190  +
push offset aLt  +
push esi  +
push edi  +
call sub_1009A28  +
add esp 0Ch +
add ebx 4 +
jmp loc_100B1CE  +
test edi edi +
jz loc_100B1CB  +
push offset aApos  +
jmp loc_100B1C1  +
test edi edi +
jz loc_100B1B3  +
push offset aAmp  +
push esi  +
push edi  +
call sub_1009A28  +
add esp 0Ch +
add ebx 5 +
jmp loc_100B1CE  +
test edi edi +
jz loc_100B1CB  +
push offset aQuot  +
push esi  +
push edi  +
call sub_1009A28  +
add esp 0Ch +
add ebx 6 +
test eax eax +
jz loc_100B1F6  +
add [ebp+arg_4] 2 +
mov ecx [ebp+arg_4] +
cmp word ptr [ecx] 0 +
jnz loc_100B13E  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100B1EC  +
mov [eax] ebx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100B1FF  +
mov [eax] ebx +
xor eax eax +
jmp loc_100B1EF  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+4] +
mov dword ptr [esi] offset off_1002034 +
test ecx ecx +
jz loc_100B225  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
and dword ptr [esi+4] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_100B240  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ecx [ebp+lpMem] +
mov eax [ecx] +
xor edi edi +
push edi  +
lea edx [ebp+var_4] +
push edx  +
mov [ebp+var_10] esi +
mov [ebp+var_4] edi +
call dword ptr [eax+0Ch]  +
mov [ebp+lpMultiByteStr] eax +
cmp eax edi +
jz loc_100B387  +
cmp [ebp+var_4] edi +
jz loc_100B387  +
cmp [esi+4] edi +
jz loc_100B387  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push eax  +
push edi  +
push edi  +
call ds:MultiByteToWideChar  +
mov [ebp+cchWideChar] eax +
cmp eax edi +
jnz loc_100B2A1  +
xor eax eax +
jmp loc_100B38A  +
mov ebx ds:GetProcessHeap +
add eax eax +
push eax  +
push edi  +
mov [ebp+var_C] eax +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+lpMem] esi +
cmp esi edi +
jz loc_100B29A  +
push [ebp+cchWideChar]  +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push edi  +
push edi  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_100B2E2  +
push esi  +
push edi  +
call ebx  +
push eax  +
call ds:HeapFree  +
jmp loc_100B29A  +
mov eax [ebp+var_C] +
lea eax [eax+esi-2] +
mov [ebp+var_1C] eax +
cmp esi eax +
jnb loc_100B37C  +
mov eax 0FFFFFF62h +
add esi 9Eh +
sub eax [ebp+lpMem] +
mov [ebp+var_18] eax +
jmp loc_100B30A  +
mov eax [ebp+var_18] +
mov ecx [ebp+cchWideChar] +
add eax esi +
sar eax 1 +
sub ecx eax +
dec ecx  +
mov [ebp+var_C] edi +
mov [ebp+lpMultiByteStr] edi +
cmp ecx 4Fh +
jbe loc_100B331  +
movzx eax word ptr [esi] +
mov [ebp+lpMultiByteStr] eax +
xor eax eax +
mov [ebp+var_C] 1 +
mov [esi] ax +
lea eax [esi-9Eh] +
push eax  +
mov eax [ebp+var_10] +
mov ecx [eax+4] +
call sub_100C439  +
test eax eax +
jz loc_100B391  +
cmp [ebp+var_C] 1 +
jnz loc_100B379  +
mov eax [ebp+var_10] +
mov ecx [eax+4] +
push offset asc_1002604  +
call sub_100C439  +
test eax eax +
jz loc_100B391  +
mov ax word ptr [ebp+lpMultiByteStr] +
mov [esi] ax +
add esi 9Eh +
lea eax [esi-9Eh] +
cmp eax [ebp+var_1C] +
jb loc_100B307  +
mov esi [ebp+lpMem] +
push esi  +
push edi  +
call ebx  +
push eax  +
call ds:HeapFree  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push [ebp+lpMem]  +
jmp loc_100B2D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
push 0  +
push 0  +
call dword ptr [eax+4]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100B3D0  +
push esi  +
mov esi offset dword_10023B4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100B3F2  +
push esi  +
mov esi offset dword_10023C4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100B414  +
push esi  +
mov esi offset dword_10023F4 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
push dword ptr [edi+8]  +
xor ebx ebx +
mov ecx esi +
mov [ebp+var_228] edi +
mov [ebp+var_230] esi +
mov [ebp+var_234] ebx +
call dword ptr [eax+18h]  +
mov ecx [eax+210h] +
add eax 208h +
mov [ebp+var_224] ecx +
cmp ecx ebx +
jz loc_100B90F  +
mov eax [eax+10h] +
push ecx  +
mov [ebp+var_218] eax +
call sub_100AC56  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_100B49D  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B48E  +
sub eax edx +
mov [ebp+var_218] eax +
mov eax [edi+14h] +
mov [ebp+var_22C] ebx +
cmp eax 0FFFFFFFFh +
jz loc_100B54A  +
mov edx [esi] +
lea ecx [ebp+var_244] +
push ecx  +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
fld  qword ptr [eax+210h] +
push ecx  +
push ecx  +
fstp  [esp+264h+var_264] +
call ds:VariantTimeToSystemTime  +
movzx eax [ebp+var_238] +
push eax  +
movzx eax [ebp+var_23A] +
push eax  +
movzx eax [ebp+var_23C] +
push eax  +
movzx eax [ebp+var_23E] +
push eax  +
movzx eax word ptr [ebp+var_244+2] +
push eax  +
movzx eax word ptr [ebp+var_244] +
push eax  +
push offset aD02d02d02d02d0  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_10053AD  +
lea eax [ebp+var_20C] +
add esp 24h +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_100B521  +
sub eax ecx +
lea ecx [ebp+var_218] +
push ecx  +
sar eax 1 +
push eax  +
push [ebp+var_218]  +
call sub_100A766  +
test eax eax +
jl loc_100B8F1  +
mov eax [edi+4] +
mov dword ptr [ebp+var_21C] offset aNoseverity +
cmp eax 0FFFFFFFFh +
jz loc_100B5AA  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov edx [eax+210h] +
lea eax [ebp+var_220] +
push eax  +
push edx  +
call sub_100A84F  +
push ebx  +
push edx  +
mov dword ptr [ebp+var_21C] eax +
call sub_100A9D4  +
mov [ebp+var_22C] eax +
lea eax [ebp+var_218] +
push eax  +
push [ebp+var_220]  +
push [ebp+var_218]  +
call sub_100A766  +
test eax eax +
jl loc_100B8F1  +
mov eax [ebp+var_228] +
mov eax [eax+10h] +
mov edi offset dword_10023A0 +
mov [ebp+var_210] ebx +
mov ebx edi +
cmp eax 0FFFFFFFFh +
jz loc_100B65F  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov eax [eax+210h] +
mov [ebp+var_210] eax +
test eax 800000h +
jz loc_100B5EE  +
mov [ebp+var_22C] 1 +
and [ebp+var_220] 0 +
and eax 0FC000h +
jz loc_100B655  +
lea ecx [ebp+var_220] +
push ecx  +
push eax  +
call sub_100A807  +
mov ebx eax +
test ebx ebx +
jnz loc_100B635  +
lea eax [ebp+var_220] +
push eax  +
mov eax [ebp+var_210] +
and eax 0F0000h +
push eax  +
call sub_100A807  +
mov ebx eax +
test ebx ebx +
jnz loc_100B635  +
and [ebp+var_220] eax +
mov ebx edi +
lea eax [ebp+var_218] +
push eax  +
push [ebp+var_220]  +
push [ebp+var_218]  +
call sub_100A766  +
test eax eax +
jl loc_100B8F1  +
and [ebp+var_210] 0FFFFFh +
lea eax [ebp+var_218] +
push eax  +
push 80h  +
push [ebp+var_218]  +
call sub_100A766  +
test eax eax +
jl loc_100B8F1  +
mov eax [ebp+var_218] +
lea edx [ebp+var_218] +
push edx  +
xor ecx ecx +
push ecx  +
push eax  +
call sub_100A734  +
test eax eax +
jl loc_100B8F1  +
mov edi [ebp+var_218] +
mov eax [esi] +
push 0  +
push edi  +
mov ecx esi +
call dword ptr [eax+4]  +
mov esi eax +
test esi esi +
jz loc_100B8F1  +
test dword_1013D24 20000000h +
jz loc_100B70B  +
cmp [ebp+lpMem] 0 +
lea eax [ebp+var_20C] +
jz loc_100B6EE  +
push [ebp+lpMem]  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s0x06xS  +
jmp loc_100B834  +
push [ebp+var_224]  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s0x06xS_0  +
jmp loc_100B834  +
mov eax [ebp+var_228] +
cmp dword ptr [eax+14h] 0FFFFFFFFh +
jz loc_100B7B2  +
test [ebp+var_210] 3FFFh +
lea eax [ebp+var_20C] +
jnz loc_100B766  +
cmp [ebp+lpMem] 0 +
jz loc_100B74E  +
push [ebp+lpMem]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s6sS  +
jmp loc_100B834  +
push [ebp+var_224]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s21s6sS_0  +
jmp loc_100B834  +
cmp [ebp+lpMem] 0 +
jz loc_100B78A  +
push [ebp+lpMem]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s10s0x06x6sS  +
jmp loc_100B7A3  +
push [ebp+var_224]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push eax  +
push offset a20s10s0x06x6_0  +
push edi  +
push esi  +
call sub_1005372  +
add esp 20h +
jmp loc_100B83E  +
test [ebp+var_210] 3FFFh +
jnz loc_100B7F9  +
cmp [ebp+lpMem] 0 +
jz loc_100B7DB  +
push [ebp+lpMem]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push offset a21s6sS_0  +
jmp loc_100B7ED  +
push [ebp+var_224]  +
push ebx  +
push dword ptr [ebp+var_21C]  +
push offset a21s6sS  +
push edi  +
push esi  +
call sub_1005372  +
add esp 18h +
jmp loc_100B83E  +
cmp [ebp+lpMem] 0 +
jz loc_100B81C  +
push [ebp+lpMem]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push offset a10s0x06x6sS  +
jmp loc_100B834  +
push [ebp+var_224]  +
push ebx  +
push [ebp+var_210]  +
push dword ptr [ebp+var_21C]  +
push offset a10s0x06x6sS_0  +
push edi  +
push esi  +
call sub_1005372  +
add esp 1Ch +
test eax eax +
jl loc_100B8F1  +
cmp [ebp+var_22C] 0 +
jz loc_100B8A7  +
mov eax [ebp+var_228] +
mov eax [eax+0Ch] +
cmp eax 0FFFFFFFFh +
jz loc_100B8A7  +
mov ecx [ebp+var_230] +
mov edx [ecx] +
push eax  +
call dword ptr [edx+18h]  +
mov eax [eax+210h] +
test eax eax +
jnz loc_100B87F  +
test [ebp+var_210] 800000h +
jz loc_100B8A7  +
mov ecx esi +
lea ebx [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100B884  +
push eax  +
sub ecx ebx +
mov eax edi +
sub eax ecx +
push offset aGle0x_8x  +
push eax  +
add ecx esi +
push ecx  +
call sub_1005372  +
add esp 10h +
test eax eax +
jl loc_100B8F1  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B8AC  +
sub eax edx +
push offset asc_100260C  +
sub edi eax +
push edi  +
add eax esi +
push eax  +
call sub_1005223  +
test eax eax +
jl loc_100B8F1  +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_100B8CC  +
sub esi ecx +
mov ecx [ebp+var_230] +
mov eax [ecx] +
push 0  +
push esi  +
call dword ptr [eax+8]  +
test eax eax +
jz loc_100B8F1  +
mov [ebp+var_234] 1 +
cmp [ebp+lpMem] 0 +
jz loc_100B90F  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_234] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
test edi edi +
jnz loc_100B943  +
xor eax eax +
jmp loc_100BA04  +
mov eax [edi] +
test eax eax +
jz loc_100B93C  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B94C  +
sub eax edx +
sar eax 1 +
mov [ebp+8] eax +
jz loc_100B93C  +
mov eax [esi+4] +
push ebx  +
mov ebx ds:GetProcessHeap +
test eax eax +
jz loc_100B979  +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+8] +
lea eax [eax+eax+2] +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [esi+4] eax +
test eax eax +
jnz loc_100B99D  +
lea ecx [esi+8] +
call sub_10097D4  +
jmp loc_100B9E6  +
push dword ptr [edi]  +
mov ecx [ebp+8] +
inc ecx  +
push ecx  +
push eax  +
call sub_100528B  +
test eax eax +
jl loc_100B9E6  +
mov eax [edi+4] +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-4] +
push ecx  +
mov ecx eax +
and ecx 1 +
push ecx  +
and eax 2 +
push eax  +
push 1  +
push dword ptr [edi]  +
lea ebx [esi+8] +
mov ecx ebx +
call sub_1009736  +
test eax eax +
jz loc_100B9E6  +
push 2  +
xor edi edi +
push edi  +
push edi  +
mov ecx ebx +
call sub_10097F1  +
test eax eax +
jnz loc_100B9EA  +
xor eax eax +
jmp loc_100BA03  +
mov ecx ebx +
call sub_1009847  +
mov [esi+0Ch] eax +
xor eax eax +
cmp [ebp-4] edi +
setnz al  +
lea eax ds:1[eax*4] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_10] 0 +
cmp dword_10139A4 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jz loc_100BBFA  +
call ds:IsDebuggerPresent  +
test eax eax +
jz loc_100BBFA  +
mov esi [ebp+arg_0] +
push dword ptr [ebx+8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
mov edi 208h +
add eax edi +
mov ecx [eax+8] +
mov [ebp+var_14] ecx +
test ecx ecx +
jnz loc_100BA60  +
xor eax eax +
jmp loc_100BBFD  +
mov eax [eax+10h] +
mov [ebp+arg_0] eax +
mov eax [ebx+4] +
cmp eax 0FFFFFFFFh +
jz loc_100BAD3  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx+18h]  +
mov edx [eax+210h] +
lea eax [ebp+var_C] +
push eax  +
push edx  +
call sub_100A84F  +
mov [ebp+var_4] eax +
test edx edx +
jz loc_100BA95  +
cmp edx 65000000h +
jnz loc_100BABE  +
push dword ptr [ebx+0Ch]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
add eax edi +
mov ecx [eax+8] +
mov [ebp+var_10] ecx +
test ecx ecx +
jz loc_100BABE  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_100A766  +
test eax eax +
jl loc_100BA59  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [ebp+var_C]  +
push [ebp+arg_0]  +
call sub_100A766  +
test eax eax +
jge loc_100BAD7  +
jmp loc_100BA59  +
and [ebp+var_4] 0 +
push dword ptr [ebx+18h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
push dword ptr [ebx+14h]  +
add eax edi +
mov [ebp+var_18] eax +
mov eax [eax+8] +
mov [ebp+var_8] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
add eax edi +
mov ecx [eax+8] +
mov dword ptr [ebp+var_C] ecx +
test ecx ecx +
jz loc_100BB39  +
lea ecx [ebp+arg_0] +
push ecx  +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_100A766  +
test eax eax +
jl loc_100BA59  +
cmp [ebp+var_8] 0 +
jz loc_100BB39  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+var_18] +
push dword ptr [eax+10h]  +
push [ebp+arg_0]  +
call sub_100A766  +
test eax eax +
jl loc_100BA59  +
lea eax [ebp+arg_0] +
push eax  +
push 2000h  +
push [ebp+arg_0]  +
call sub_100A766  +
test eax eax +
jl loc_100BA59  +
mov eax [ebp+arg_0] +
lea edx [ebp+arg_0] +
push edx  +
xor ecx ecx +
push ecx  +
push eax  +
call sub_100A734  +
test eax eax +
jl loc_100BA59  +
mov eax [esi] +
push 0  +
push [ebp+arg_0]  +
mov ecx esi +
call dword ptr [eax+4]  +
mov edi eax +
test edi edi +
jz loc_100BA59  +
mov byte ptr [edi] 0 +
push dword ptr [ebx+10h]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
mov eax [eax+210h] +
xor ebx ebx +
cmp dword ptr [ebp+var_C] ebx +
jz loc_100BBBF  +
cmp [ebp+var_8] ebx +
jz loc_100BC04  +
push [ebp+var_8]  +
push eax  +
push dword ptr [ebp+var_C]  +
push offset aSDS  +
push [ebp+arg_0]  +
push edi  +
call sub_1005372  +
add esp 18h +
test eax eax +
jl loc_100BA59  +
push [ebp+var_14]  +
cmp [ebp+var_4] ebx +
jz loc_100BC32  +
cmp [ebp+var_10] ebx +
jz loc_100BC1B  +
push [ebp+var_10]  +
push [ebp+var_4]  +
push edi  +
push offset aSSSS  +
push [ebp+arg_0]  +
push edi  +
call sub_1005372  +
add esp 1Ch +
test eax eax +
jl loc_100BA59  +
push edi  +
call ds:OutputDebugStringA  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
push 2  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push eax  +
push dword ptr [ebp+var_C]  +
push offset aSD  +
push [ebp+arg_0]  +
push edi  +
call sub_1005372  +
add esp 14h +
jmp loc_100BBB7  +
push [ebp+var_4]  +
push edi  +
push offset aS20sS  +
push [ebp+arg_0]  +
push edi  +
call sub_1005372  +
add esp 18h +
jmp loc_100BBE4  +
push edi  +
push offset aSS_1  +
push [ebp+arg_0]  +
push edi  +
call sub_1005372  +
add esp 14h +
jmp loc_100BBE4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
or eax 0FFFFFFFFh +
mov edi 104h +
push edi  +
lea ebx [esi+1Ch] +
push ebx  +
push 0  +
mov dword ptr [esi] offset off_10027B4 +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
call ds:GetModuleFileNameA  +
test eax eax +
jnz loc_100BC8F  +
push offset aProgramNameUnk  +
push edi  +
push ebx  +
call sub_1005223  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100BCC5  +
push esi  +
mov esi offset dword_1002404 +
movs   +
movs   +
movs   +
movs   +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
mov eax [esi] +
push edi  +
mov ecx esi +
xor edi edi +
call dword ptr [eax+1Ch]  +
mov ebx eax +
test ebx ebx +
jbe loc_100BD00  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
push eax  +
call sub_100B041  +
test eax eax +
jz loc_100BD0A  +
inc edi  +
cmp edi ebx +
jb loc_100BCE9  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_100BD03  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push offset aSElementtypeSS  +
push offset aXmlXmlnsSUuidB  +
push esi  +
lea ecx [ebp+var_20] +
call sub_1009877  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov edi eax +
mov eax [esi] +
imul edi edi +
mov ecx esi +
xor ebx ebx +
call dword ptr [eax+1Ch]  +
mov [ebp+arg_4] eax +
test eax eax +
jbe loc_100BD71  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+18h]  +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100BD5B  +
sub eax ecx +
sar eax 1 +
add edi eax +
inc ebx  +
cmp ebx [ebp+arg_4] +
jb loc_100BD50  +
mov eax [ebp+var_1C] +
lea eax [eax+edi+1] +
lea ecx [ebp+var_20] +
mov [ebp+var_1C] eax +
call sub_100997A  +
test eax eax +
jnz loc_100BD8B  +
xor eax eax +
jmp loc_100BDDA  +
mov eax [esi] +
mov ecx esi +
xor edi edi +
call dword ptr [eax+1Ch]  +
mov ebx eax +
test ebx ebx +
jbe loc_100BDCC  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ecx eax +
push dword ptr [ecx+208h]  +
call sub_100B0D2  +
push eax  +
push edi  +
push ecx  +
lea eax [ebp+var_20] +
push offset aSAttributetype  +
push eax  +
call sub_1009A28  +
add esp 14h +
test eax eax +
jz loc_100BD87  +
inc edi  +
cmp edi ebx +
jb loc_100BD9A  +
lea ecx [ebp+var_20] +
call sub_10099C9  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+208h] +
sub eax 0 +
jz loc_100BE19  +
dec eax  +
jz loc_100BE15  +
dec eax  +
jz loc_100BE0B  +
dec eax  +
jz loc_100BE06  +
xor eax eax +
jmp loc_100BE2D  +
push 13h  +
pop eax  +
jmp loc_100BE2D  +
mov eax [ecx+218h] +
add eax eax +
jmp loc_100BE2D  +
push 0Bh  +
jmp loc_100BE08  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [ecx+210h]  +
push 0  +
call sub_100B112  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+208h] +
push edi  +
xor edi edi +
sub eax edi +
jz loc_100BEF6  +
dec eax  +
jz loc_100BEDE  +
dec eax  +
jz loc_100BEA5  +
dec eax  +
jnz loc_100BEDA  +
fld  qword ptr [esi+210h] +
lea eax [ebp+SystemTime] +
push eax  +
push ecx  +
push ecx  +
fstp  [esp+24h+var_24] +
call ds:VariantTimeToSystemTime  +
movzx eax [ebp+SystemTime.wSecond] +
push eax  +
movzx eax [ebp+SystemTime.wMinute] +
push eax  +
movzx eax [ebp+SystemTime.wHour] +
push eax  +
movzx eax [ebp+SystemTime.wDay] +
push eax  +
movzx eax [ebp+SystemTime.wMonth] +
push eax  +
movzx eax [ebp+SystemTime.wYear] +
push eax  +
push offset aD02d02dt02d02d  +
push [ebp+vtime]  +
call sub_1009A28  +
add esp 20h +
jmp loc_100BF05  +
cmp [esi+218h] edi +
jbe loc_100BED5  +
mov eax [esi+210h] +
movzx eax byte ptr [eax+edi] +
push eax  +
push offset a_2x  +
push [ebp+vtime]  +
call sub_1009A28  +
add esp 0Ch +
test eax eax +
jz loc_100BEDA  +
inc edi  +
cmp edi [esi+218h] +
jb loc_100BEAD  +
xor eax eax +
inc eax  +
jmp loc_100BF05  +
xor eax eax +
jmp loc_100BF05  +
push dword ptr [esi+210h]  +
push offset aD_0  +
push [ebp+vtime]  +
call sub_1009A28  +
add esp 0Ch +
jmp loc_100BF05  +
push edi  +
push dword ptr [esi+210h]  +
push [ebp+vtime]  +
call sub_100B112  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push offset asc_10029CC  +
push offset aZRow  +
push esi  +
lea ecx [ebp-28h] +
call sub_1009877  +
mov eax [esi] +
mov ecx esi +
xor edi edi +
xor ebx ebx +
call dword ptr [eax+1Ch]  +
mov [ebp-8] eax +
test eax eax +
jbe loc_100BF79  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ecx eax +
mov [ebp+8] ecx +
lea edx [ecx+2] +
mov ax [ecx] +
inc ecx  +
inc ecx  +
test ax ax +
jnz loc_100BF53  +
push dword ptr [ebp+8]  +
sub ecx edx +
sar ecx 1 +
mov [ebp-4] ecx +
call sub_100BDE6  +
add eax [ebp-4] +
inc ebx  +
lea edi [edi+eax+4] +
cmp ebx [ebp-8] +
jb loc_100BF43  +
mov eax [ebp-24h] +
lea eax [eax+edi+1] +
lea ecx [ebp-28h] +
mov [ebp-24h] eax +
call sub_100997A  +
test eax eax +
jnz loc_100BF93  +
xor eax eax +
jmp loc_100BFF9  +
mov eax [esi] +
mov ecx esi +
xor edi edi +
call dword ptr [eax+1Ch]  +
mov [ebp+8] eax +
test eax eax +
jbe loc_100BFEB  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+18h]  +
mov ebx eax +
push ebx  +
lea eax [ebp-28h] +
push offset aS_3  +
push eax  +
call sub_1009A28  +
add esp 0Ch +
test eax eax +
jz loc_100BF8F  +
push ebx  +
lea eax [ebp-28h] +
push eax  +
call sub_100BE36  +
test eax eax +
jz loc_100BF8F  +
lea eax [ebp-28h] +
push offset asc_10029B8  +
push eax  +
call sub_1009A28  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100BF8F  +
inc edi  +
cmp edi [ebp+8] +
jb loc_100BFA3  +
lea ecx [ebp-28h] +
call sub_10099C9  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100C01A  +
push dword ptr [ebp+8]  +
push 0  +
call sub_100BD13  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
cmp [ebp+0Ch] ebx +
jz loc_100C06B  +
mov esi [ebp+8] +
mov eax [esi] +
push 13h  +
mov ecx esi +
call dword ptr [eax+4]  +
push offset aRsDataXml  +
mov edi eax +
push 13h  +
push edi  +
call sub_1005223  +
test eax eax +
jl loc_100C074  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100C057  +
sub eax edx +
mov edx [esi] +
push ebx  +
push eax  +
mov ecx esi +
call dword ptr [edx+8]  +
jmp loc_100C074  +
mov ecx [ebp+8] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov ebx ecx +
test esi esi +
jz loc_100C188  +
mov edi [esi] +
test edi edi +
jz loc_100C188  +
cmp dword ptr [esi+4] 0 +
jz loc_100C188  +
push 2ACh  +
lea eax [ebp-2B0h] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
cmp dword ptr [ebx+4] 0 +
jnz loc_100C188  +
cmp dword ptr [ebx+8] 0 +
jnz loc_100C188  +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100C0E8  +
sub eax ecx +
sar eax 1 +
lea edi [eax+eax+2] +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx+8] eax +
test eax eax +
jz loc_100C188  +
push dword ptr [esi]  +
push edi  +
push eax  +
call sub_10083D0  +
mov edi 8007007Ah +
test eax eax +
jge loc_100C127  +
cmp eax edi +
jnz loc_100C188  +
push dword ptr [esi]  +
lea eax [ebp-2ACh] +
push 41h  +
push eax  +
call sub_100528B  +
test eax eax +
jge loc_100C13F  +
cmp eax edi +
jnz loc_100C188  +
push dword ptr [esi+4]  +
lea eax [ebp-22Ah] +
push 101h  +
push eax  +
call sub_100528B  +
test eax eax +
jge loc_100C15B  +
cmp eax edi +
jnz loc_100C188  +
and dword ptr [ebp-2B0h] 0 +
and dword ptr [ebp-28h] 0 +
sub esp 2ACh +
mov edi esp +
mov ecx 0ABh +
lea esi [ebp-2B0h] +
movs   +
call sub_100C3DD  +
mov [ebx+4] eax +
xor eax eax +
inc eax  +
jmp loc_100C18A  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn 8  +
***
mov [esi+4] eax +
call ds:HeapCreate  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_1002A58 +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_100C1DD  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C1C9  +
test byte ptr [ebp+8] 1 +
jz loc_100C1FD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
push hHeap  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jnz loc_100C238  +
xor eax eax +
inc eax  +
jmp loc_100C249  +
push [ebp+lpMem]  +
push 0  +
push hHeap  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100C273  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C261  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 2Ah +
jnz loc_100C29A  +
cmp word ptr [esi+2] 0 +
jnz loc_100C29A  +
xor eax eax +
inc eax  +
jmp loc_100C33D  +
mov eax [ebp+arg_4] +
movzx eax word ptr [eax] +
push ebx  +
push edi  +
test ax ax +
jz loc_100C2E3  +
mov edi ds:towlower +
push eax  +
call edi  +
movzx ebx ax +
movzx eax word ptr [esi] +
push eax  +
mov [ebp+arg_0] ebx +
call edi  +
movzx eax ax +
pop ecx  +
pop ecx  +
cmp ax 2Ah +
jz loc_100C2FE  +
cmp ax 3Fh +
jz loc_100C2D2  +
cmp bx ax +
jnz loc_100C2F8  +
inc esi  +
inc esi  +
add [ebp+arg_4] 2 +
mov eax [ebp+arg_4] +
movzx eax word ptr [eax] +
test ax ax +
jnz loc_100C2AD  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100C338  +
cmp ax 2Ah +
jnz loc_100C2F8  +
cmp word ptr [esi+2] 0 +
jz loc_100C338  +
xor eax eax +
jmp loc_100C33B  +
mov esi eax +
lea eax [esi+2] +
cmp word ptr [eax] 2Ah +
jz loc_100C2FC  +
lea ebx [esi+2] +
movzx eax word ptr [ebx] +
push eax  +
call edi  +
movzx eax ax +
pop ecx  +
test ax ax +
jz loc_100C338  +
cmp ax word ptr [ebp+arg_0] +
jz loc_100C325  +
cmp ax 3Fh +
jnz loc_100C2D4  +
push [ebp+arg_4]  +
mov esi ebx +
push esi  +
call sub_100C27C  +
test eax eax +
jnz loc_100C338  +
dec esi  +
dec esi  +
jmp loc_100C2D4  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100C35E  +
cmp [ebp+arg_4] 0 +
jz loc_100C35E  +
pop ebp  +
jmp sub_100C27C  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_100C37A  +
pop ebp  +
jmp loc_100C228  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100C392  +
xor eax eax +
jmp loc_100C3B8  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_100C252  +
mov edi eax +
push edi  +
call sub_100C209  +
mov esi eax +
test esi esi +
jz loc_100C3B4  +
push [ebp+arg_0]  +
push edi  +
push esi  +
call sub_10083D0  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100C3D2  +
xor eax eax +
pop ebp  +
retn 4  +
pop ebp  +
jmp loc_100C383  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax 0ABh +
mov ecx eax +
lea esi [ebp+arg_0] +
lea edi [ebp+var_2B0] +
movs   +
and [ebp+var_2B0] 0 +
sub esp 2ACh +
mov ecx eax +
mov edi esp +
lea esi [ebp+var_2B0] +
movs   +
call sub_100C460  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10049E5  +
leave   +
retn 2ACh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
lea esi [ecx+8] +
sub esp 14h +
push 5  +
pop ecx  +
mov edi esp +
movs   +
call sub_100C98F  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov ecx 0ABh +
lea esi [ebp+arg_0] +
lea edi [ebp+var_2B0] +
push 1Ch  +
movs   +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100C4A2  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1002A5C +
mov ebx eax +
jmp loc_100C4A4  +
xor ebx ebx +
test ebx ebx +
jz loc_100C4D5  +
mov eax [ebx] +
sub esp 2ACh +
mov edi esp +
mov ecx 0ABh +
lea esi [ebp+var_2B0] +
movs   +
mov ecx ebx +
call dword ptr [eax]  +
mov [ebx+4] eax +
test eax eax +
jnz loc_100C4D5  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax+8]  +
xor ebx ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn 2ACh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B0h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx 0ABh +
lea esi [ebp+8] +
lea edi [ebp-2B0h] +
movs   +
lea ecx [ebp-2B0h] +
push ecx  +
add eax 8 +
push eax  +
call sub_100C648  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10049E5  +
leave   +
retn 2ACh  +
***
add ecx 8 +
push ecx  +
call sub_100C817  +
retn   +
***
cmp dword ptr [ecx+4] 0 +
mov dword ptr [ecx] offset off_1002A5C +
jz locret_100C55F  +
add ecx 8 +
push ecx  +
call sub_100C817  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100C54A  +
test byte ptr [ebp+8] 1 +
jz loc_100C57F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
mov [ebp+var_1C] 1 +
xor esi esi +
mov [ebp+ms_exc.disabled] esi +
mov edi [ebp+arg_0] +
cmp edi esi +
jz loc_100C5C7  +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
push 0C0000000h  +
push offset FileName  +
call ds:CreateFileW  +
mov [edi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100C5D7  +
mov [ebp+var_1C] esi +
jmp loc_100C5D7  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 4  +
***
call __SEH_prolog4  +
xor ecx ecx +
mov [ebp+ms_exc.disabled] ecx +
mov esi [ebp+arg_0] +
cmp esi ecx +
jnz loc_100C60B  +
mov [ebp+var_1C] ecx +
jmp loc_100C631  +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_100C606  +
push eax  +
call ds:CloseHandle  +
mov [ebp+var_1C] eax +
cmp eax 1 +
jnz loc_100C631  +
or dword ptr [esi] 0FFFFFFFFh +
jmp loc_100C631  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn 4  +
***
call __SEH_prolog4_GS  +
cmp [ebp-3Ch] esi +
jz loc_100C7F3  +
push dword ptr [ebp-3Ch]  +
call ds:LocalFree  +
cmp [ebp-34h] esi +
jnz locret_100C811  +
cmp dword ptr [ebp-38h] 0FFFFFFFFh +
jz locret_100C811  +
lea eax [ebp-38h] +
push eax  +
call sub_100C5EE  +
xor eax eax +
mov edi [ebp-40h] +
stos   +
stos   +
stos   +
stos   +
stos   +
retn   +
***
call __SEH_prolog4_GS  +
mov ebx [ebp+arg_0] +
xor edx edx +
mov [ebp+ms_exc.disabled] edx +
cmp ebx edx +
jz loc_100C882  +
cmp ebx 0FFFFFFFFh +
jz loc_100C882  +
mov ecx [ebx+10h] +
cmp ecx 0FFFFFFFFh +
jz loc_100C882  +
cmp ecx edx +
jz loc_100C882  +
xor eax eax +
lea edi [ebp+InBuffer] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov esi ebx +
lea edi [ebp+InBuffer] +
movs   +
movs   +
movs   +
movs   +
push edx  +
lea eax [ebp+BytesReturned] +
push eax  +
push edx  +
push edx  +
push 14h  +
lea eax [ebp+InBuffer] +
push eax  +
push 228008h  +
push ecx  +
call ds:DeviceIoControl  +
mov [ebp+var_34] eax +
lea eax [ebx+10h] +
push eax  +
call sub_100C5EE  +
xor eax eax +
mov edi ebx +
stos   +
stos   +
stos   +
stos   +
jmp loc_100C892  +
mov [ebp+var_34] edx +
jmp loc_100C892  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and dword ptr [ebp-34h] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_34] +
call __SEH_epilog4_GS  +
retn 4  +
***
call __SEH_prolog4_GS  +
test ebx ebx +
jz locret_100C989  +
push ebx  +
call ds:LocalFree  +
retn   +
***
call __SEH_prolog4_GS  +
push 5  +
pop ecx  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_30] +
movs   +
mov esi [ebp+arg_14] +
and [ebp+ms_exc.disabled] 0 +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C9B2  +
sub eax edx +
sar eax 1 +
add eax eax +
jz loc_100C9E4  +
push eax  +
push esi  +
sub esp 14h +
push 5  +
pop ecx  +
lea esi [ebp+var_30] +
mov edi esp +
movs   +
call sub_100C8A9  +
mov [ebp+var_34] eax +
jmp loc_100C9E8  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
and [ebp+var_34] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_34] +
call __SEH_epilog4_GS  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpSrc] +
push 104h  +
lea ecx [ebp+Dst] +
push ecx  +
push eax  +
call ds:off_1003B04  +
lea eax [ebp+Dst] +
push eax  +
push 0  +
call ds:SHELL32_165  +
cmp eax 50h +
jz loc_100CA45  +
cmp eax 0B7h +
jnz loc_100CA47  +
xor eax eax +
test eax eax +
jnz loc_100CA5E  +
lea eax [ebp+Dst] +
push eax  +
push 300F000h  +
push 0  +
call sub_1005F2E  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10049E5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+lpName] +
push esi  +
push edi  +
mov edi ds:GetEnvironmentVariableW +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
call edi  +
xor esi esi +
mov [ebp+var_210] eax +
cmp eax esi +
jnz loc_100CB3C  +
mov edi ds:GetLastError +
call edi  +
push esi  +
mov [ebp+var_210] eax +
push esi  +
cmp eax 0CBh +
jnz loc_100CAFF  +
call edi  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0BFh  +
push esi  +
push offset aD  +
push esi  +
push ebx  +
push offset aIeGcCommonDump  +
push 4000000h  +
call sub_1004045  +
add esp 0Ch +
jmp loc_100CC35  +
call edi  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0C2h  +
push esi  +
push offset aD  +
push esi  +
push [ebp+var_210]  +
push ebx  +
push offset aIeGcCommonDu_0  +
push 2000000h  +
call sub_1004045  +
add esp 10h +
jmp loc_100CC35  +
cmp eax 104h +
jbe loc_100CBF0  +
add eax eax +
push eax  +
call ds:malloc  +
pop ecx  +
mov [ebp+var_214] eax +
cmp eax esi +
jnz loc_100CB90  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0CBh  +
push esi  +
push offset aD  +
push esi  +
push ebx  +
push offset aIeGcCommonDu_1  +
push 2000000h  +
jmp loc_100CAF2  +
push [ebp+var_210]  +
push eax  +
push ebx  +
call edi  +
push esi  +
push esi  +
mov edi eax +
call ds:GetLastError  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0CFh  +
push esi  +
push offset aD  +
push esi  +
push edi  +
push [ebp+var_214]  +
push ebx  +
push offset aIeGcCommonDu_2  +
push 4000000h  +
call sub_1004045  +
add esp 14h +
push eax  +
call sub_1005745  +
push [ebp+var_214]  +
call ds:__imp_free  +
pop ecx  +
jmp loc_100CC3B  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_1004CC7  +
push eax  +
push offset aDumpenvironmen  +
push offset aDW7rtmInetco_0  +
push 0D5h  +
push esi  +
push offset aD  +
push esi  +
push [ebp+var_210]  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push offset aIeGcCommonDu_2  +
push 4000000h  +
call sub_1004045  +
add esp 14h +
push eax  +
call sub_1005745  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 310h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push edi  +
push eax  +
push offset aS_1  +
mov edi 104h +
lea eax [ebp-310h] +
xor ecx ecx +
push edi  +
push eax  +
mov [ebp-310h] cx +
call sub_10053AD  +
add esp 10h +
test eax eax +
jl loc_100CCFD  +
push esi  +
xor esi esi +
push esi  +
push esi  +
push edi  +
lea eax [ebp-108h] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp-310h] +
push eax  +
push esi  +
push esi  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_100CCFC  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call sub_1004CC7  +
mov ecx [ebp+8] +
push eax  +
push offset aWdslog  +
push offset aDW7rtmInetco_0  +
push 11h  +
push esi  +
dec ecx  +
push offset aD  +
neg ecx  +
push esi  +
lea eax [ebp-108h] +
push eax  +
sbb ecx ecx +
mov eax 2000000h +
and ecx eax +
add ecx eax +
push ecx  +
call sub_1004045  +
pop ecx  +
pop ecx  +
push eax  +
call sub_1005745  +
pop esi  +
mov ecx [ebp-4] +
xor ecx ebp +
pop edi  +
call sub_10049E5  +
leave   +
retn 8  +
***
push offset aInstaller_shad  +
call sub_100CA71  +
push offset aInstaller_wi_0  +
call sub_100CA71  +
push offset aInstaller_sh_0  +
call sub_100CA71  +
push offset aInstaller_wi_1  +
call sub_100CA71  +
push offset aInstaller_sh_1  +
call sub_100CA71  +
push offset aInstaller_wi_2  +
call sub_100CA71  +
push offset aInstaller_sh_2  +
call sub_100CA71  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push edi  +
push offset aRegisteriepk_8  +
xor edi edi +
push edi  +
call sub_100CF4E  +
pop ecx  +
pop ecx  +
push 2  +
push edi  +
call CoInitializeEx  +
mov ebx eax +
cmp ebx edi +
jl loc_100CE51  +
push esi  +
push offset aRegisteriepk_9  +
push edi  +
call sub_100CF4E  +
mov esi offset aProgramfilesIn +
push esi  +
push offset aRegisteriep_10  +
push edi  +
call sub_100CF4E  +
push offset aRegisteriep_11  +
push edi  +
call sub_100CF4E  +
add esp 1Ch +
call sub_100F288  +
test eax eax +
jl loc_100CDD5  +
push esi  +
push offset aRegisteriep_12  +
push edi  +
call sub_100CF4E  +
add esp 0Ch +
jmp loc_100CDE5  +
push ebx  +
push esi  +
push offset aRegisteriep_13  +
push edi  +
call sub_100CF4E  +
add esp 10h +
lea eax [ebp+var_4] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
test eax eax +
jnz loc_100CDFD  +
mov [ebp+var_4] edi +
push 29h  +
call sub_100DC42  +
test eax eax +
jz loc_100CE1C  +
cmp [ebp+var_4] edi +
jz loc_100CE1C  +
push offset aRegisteriep_14  +
push edi  +
call sub_100CF4E  +
pop ecx  +
pop ecx  +
jmp loc_100CE49  +
call sub_100F234  +
mov ebx eax +
cmp ebx edi +
jl loc_100CE38  +
push esi  +
push offset aRegisteriep_15  +
push edi  +
call sub_100CF4E  +
add esp 0Ch +
jmp loc_100CE49  +
push ebx  +
push esi  +
push offset aRegisteriep_16  +
push 1  +
call sub_100CF4E  +
add esp 10h +
call CoUninitialize  +
pop esi  +
jmp loc_100CE61  +
push ebx  +
push offset aRegisteriep_17  +
push 1  +
call sub_100CF4E  +
add esp 0Ch +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push edi  +
push offset aRegisteriep_18  +
xor ebx ebx +
push ebx  +
call sub_100CF4E  +
pop ecx  +
pop ecx  +
push 2  +
push ebx  +
call CoInitializeEx  +
mov edi eax +
cmp edi ebx +
jl loc_100CEE2  +
push esi  +
push offset aRegisteriep_19  +
push ebx  +
call sub_100CF4E  +
mov esi offset aProgramfilesIn +
push esi  +
push offset aRegisteriep_20  +
push ebx  +
call sub_100CF4E  +
add esp 14h +
call sub_100F288  +
mov edi eax +
cmp edi ebx +
jl loc_100CEC9  +
push esi  +
push offset aRegisteriep_21  +
push ebx  +
call sub_100CF4E  +
add esp 0Ch +
jmp loc_100CEDA  +
push edi  +
push esi  +
push offset aRegisteriep_22  +
push 1  +
call sub_100CF4E  +
add esp 10h +
call CoUninitialize  +
pop esi  +
jmp loc_100CEF2  +
push edi  +
push offset aRegisteriep_23  +
push 1  +
call sub_100CF4E  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100CF17  +
push [ebp+arg_0]  +
call ds:EncodePointer  +
mov dword_1013DC4 eax +
jmp loc_100CF1E  +
and dword_1013DC4 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
jmp loc_100CF3F  +
cmp word ptr [eax] 25h +
jnz loc_100CF3D  +
push 24h  +
pop ecx  +
mov [eax] cx +
inc eax  +
inc eax  +
cmp word ptr [eax] 0 +
jnz loc_100CF31  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_1013DC4 0 +
jz loc_100CFB5  +
xor eax eax +
mov word ptr [ebp+var_20C] ax +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_1005336  +
test eax eax +
jl loc_100CFB5  +
lea eax [ebp+var_20C] +
push eax  +
call sub_100CF27  +
push dword_1013DC4  +
call ds:DecodePointer  +
lea ecx [ebp+var_20C] +
push ecx  +
push [ebp+arg_0]  +
call eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10049E5  +
leave   +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101100C +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_10049E5  +
jmp __SEH_epilog4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
jmp ds:_purecall  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_100D13B  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_100D0FB  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_100D132  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-1Ch] 0 +
jnz $LN9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100D0EB  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz $LN10_0  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100D0EB  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100D254  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpDst] +
push esi  +
mov esi [ebp+nSize] +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jnz loc_100D2A4  +
push esi  +
push ebx  +
push [ebp+lpSrc]  +
call ds:ExpandEnvironmentStringsW  +
mov edi eax +
cmp edi esi +
jbe loc_100D2A0  +
test esi esi +
jz loc_100D29C  +
xor eax eax +
mov [ebx+esi*2-2] ax +
xor edi edi +
jmp loc_100D2AE  +
test edi edi +
jnz loc_100D2AE  +
push [ebp+lpSrc]  +
push esi  +
push ebx  +
call sub_100528B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+nSize]  +
push [ebp+lpDst]  +
push [ebp+lpSrc]  +
push 0  +
call sub_100D26B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_100D330  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_100D358  +
mov eax 80070057h +
jmp loc_100D369  +
cmp dword ptr [eax] 2Ch +
jnz loc_100D351  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_100D2F5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100D387  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100D3B0  +
cmp eax [ecx+4] +
jge loc_100D3B0  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_100D3FF  +
mov eax 80070057h +
jmp loc_100D446  +
mov eax [esi] +
cmp eax edi +
jz loc_100D444  +
cmp eax 2Ch +
jnz loc_100D3F8  +
cmp [esi+24h] edi +
jle loc_100D42F  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_100D396  +
movzx eax word ptr [eax] +
push [ebp+hInstance]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_100D413  +
pop ebx  +
lea ecx [esi+20h] +
call sub_100D372  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_100D2DA  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
adc eax offset DeleteCriticalSection +
lea ecx [esi+30h] +
pop esi  +
jmp sub_100D372  +
***
or al dh +
add eax offset byte_1013DB9 +
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push dword_1013DCC  +
mov esi ecx +
push esi  +
call sub_100D3E8  +
lea ecx [esi+20h] +
pop esi  +
jmp sub_100D372  +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1003BB0 +
jz locret_100D5BE  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_100D5BE  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_100D5F9  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_100D617  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_100D638  +
cmp [ebp+0Ch] eax +
jnz loc_100D628  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_100D638  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100D5A4  +
test byte ptr [ebp+8] 1 +
jz loc_100D677  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1003BC4 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_100D6CD  +
cmp eax 0FFFFFFFFh +
jbe loc_100D6D4  +
mov eax 80070057h +
jmp loc_100D6DB  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
ror byte ptr [ebp-0FBDEBBFh] cl +
xadd [eax] edx +
lea eax [ecx+8] +
retn   +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003BC4 +
jz loc_100D72D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_100D754  +
mov eax 80070057h +
jmp loc_100D75D  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_100D782  +
mov eax [ebp+arg_8] +
jmp loc_100D788  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_100D766  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_100D6B9  +
test eax eax +
jl loc_100D7F1  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_100D739  +
test eax eax +
jl loc_100D7F1  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_100D7F1  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_100D7F3  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_100D766  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_100D6B9  +
test eax eax +
jl loc_100D855  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_100D739  +
test eax eax +
jl loc_100D855  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_100D855  +
dec edi  +
mov [eax+8] edi +
jmp loc_100D857  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
jmp ds:MiniDumpWriteDump  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:RegOpenKeyExA +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
push 1  +
xor edi edi +
push edi  +
push [ebp+phkResult]  +
mov dword ptr [ebp+Data] edi +
push [ebp+hKey]  +
call esi  +
mov ebx ds:RegQueryValueExA +
test eax eax +
jnz loc_100D8E6  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push [ebp+phkResult]  +
call ebx  +
test eax eax +
jnz loc_100D8DD  +
cmp [ebp+Type] 4 +
jz loc_100D8DD  +
mov dword ptr [ebp+Data] edi +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
lea eax [ebp+phkResult] +
push eax  +
push 1  +
push edi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jnz loc_100D929  +
push 4  +
pop esi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
mov [ebp+cbData] esi +
push [ebp+phkResult]  +
call ebx  +
test eax eax +
jnz loc_100D920  +
cmp [ebp+Type] esi +
jz loc_100D920  +
mov dword ptr [ebp+Data] edi +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax dword ptr [ebp+Data] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 114h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+lpSubKey] +
mov eax [ebp+hKey] +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
lea edx [ebp+phkResult] +
push edx  +
push 1  +
xor esi esi +
push esi  +
push ecx  +
push eax  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_100D9B0  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push edi  +
push [ebp+phkResult]  +
mov [ebp+cbData] 104h +
call ds:RegQueryValueExA  +
push [ebp+phkResult]  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_10049E5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10139C0 +
cmp eax 0FFFFFFFFh +
jnz loc_100DA01  +
push 7  +
call sub_100DC42  +
test eax eax +
jz loc_100D9FA  +
push offset aNetgetjoininfo  +
push offset LibFileName  +
call ds:LoadLibraryW  +
push eax  +
call ds:GetProcAddress  +
jmp loc_100D9FC  +
xor eax eax +
mov dword_10139C0 eax +
test eax eax +
jz loc_100DA08  +
pop ebp  +
jmp eax  +
push 7Fh  +
pop eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10139C4 +
cmp eax 0FFFFFFFFh +
jnz loc_100DA4E  +
push 7  +
call sub_100DC42  +
test eax eax +
jz loc_100DA47  +
push offset aNetapibufferfr  +
push offset LibFileName  +
call ds:GetModuleHandleW  +
push eax  +
call ds:GetProcAddress  +
jmp loc_100DA49  +
xor eax eax +
mov dword_10139C4 eax +
test eax eax +
jz loc_100DA55  +
pop ebp  +
jmp eax  +
push 7Fh  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push 7  +
call sub_100DC42  +
test eax eax +
jz loc_100DAB3  +
cmp dword_1013E94 0 +
jnz loc_100DAB3  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
call sub_100D9C7  +
xor esi esi +
inc esi  +
test eax eax +
jnz loc_100DAAC  +
cmp [ebp+var_4] eax +
jz loc_100DAA0  +
push [ebp+var_4]  +
call sub_100DA14  +
cmp [ebp+var_8] 3 +
jnz loc_100DAAC  +
mov dword_1013E90 esi +
mov dword_1013E94 esi +
pop esi  +
mov eax dword_1013E90 +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_10139C8 +
cmp eax 0FFFFFFFFh +
jnz locret_100DB17  +
push esi  +
push offset aNtqueryinforma  +
push offset aNtdll_dll  +
call ds:GetModuleHandleW  +
push eax  +
call ds:GetProcAddress  +
mov esi eax +
test esi esi +
jz loc_100DB0F  +
push 0  +
push 4  +
lea eax [ebp+var_4] +
push eax  +
push 1Ah  +
call ds:GetCurrentProcess  +
push eax  +
call esi  +
test eax eax +
jl loc_100DB0F  +
cmp [ebp+var_4] 0 +
jz loc_100DB0F  +
xor eax eax +
inc eax  +
jmp loc_100DB11  +
xor eax eax +
mov dword_10139C8 eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and dword ptr [ebp+Data] 0 +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push 0  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100DB70  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 0  +
push 0  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax dword ptr [ebp+Data] +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push offset Name  +
xor esi esi +
push esi  +
push 100000h  +
call ds:OpenEventW  +
mov edi eax +
cmp edi esi +
jz loc_100DBAD  +
push esi  +
push edi  +
call ds:WaitForSingleObject  +
mov esi eax +
neg esi  +
sbb esi esi +
push edi  +
inc esi  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10139CC +
sub esp 10h +
cmp eax 0FFFFFFFFh +
jnz locret_100DC3B  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push 0  +
push offset aSystemWpaAppli  +
push 80000002h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_100DC2A  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset aInstalled  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_100DC21  +
cmp [ebp+Type] 4 +
jnz loc_100DC21  +
cmp dword ptr [ebp+Data] eax +
jz loc_100DC21  +
mov dword_10139CC 1 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax dword_10139CC +
cmp eax 0FFFFFFFFh +
jnz locret_100DC3B  +
xor eax eax +
mov dword_10139CC eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
inc ebx  +
cmp dword_1013F34 0 +
push edi  +
jnz loc_100DC85  +
mov esi ds:GetVersionExA +
mov edi offset VersionInformation +
push edi  +
mov dword_1013F34 ebx +
mov VersionInformation.dwOSVersionInfoSize 9Ch +
call esi  +
test eax eax +
jnz loc_100DC85  +
push edi  +
mov VersionInformation.dwOSVersionInfoSize 94h +
call esi  +
mov eax [ebp+arg_0] +
cmp eax 29h +
ja loc_100E07C  +
jmp ds:off_100E086[eax*4]  +
push 1000h  +
call ds:GetSystemMetrics  +
jmp loc_100E07E  +
test byte ptr dword_1013F30 10h +
jz loc_100E07C  +
cmp VersionInformation.dwMajorVersion 5 +
jb loc_100E07C  +
jmp loc_100E004  +
mov eax dword_1013F30 +
test al 10h +
jz loc_100E07C  +
test eax 100h +
jmp loc_100E002  +
mov eax dword_1013F30 +
test al 10h +
jz loc_100E07C  +
test eax 100h +
jz loc_100E07C  +
jmp loc_100E004  +
mov eax dword_1013F30 +
test eax 100h +
jz loc_100E07C  +
test al 10h +
jmp loc_100E002  +
test dword_1013F30 110h +
jz loc_100E07C  +
push offset aAllowmultiplet  +
push offset aSoftwareMicr_0  +
push offset phkResult  +
push 80000002h  +
call sub_100D885  +
test eax eax +
jmp loc_100DCF0  +
push 25h  +
call sub_100DC42  +
test eax eax +
jnz loc_100E07C  +
cmp byte ptr dword_1013F30+2 bl +
jnz loc_100E07C  +
push offset aGinadll  +
mov edi offset phkResult +
push edi  +
mov esi 80000002h +
push esi  +
call sub_100D938  +
test eax eax +
jnz loc_100E07C  +
push offset aLogontype  +
push offset aSoftwareMicr_0  +
push edi  +
push esi  +
jmp loc_100DD36  +
call sub_100DA61  +
jmp loc_100E07E  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_100E07C  +
jmp loc_100DCB5  +
cmp byte ptr dword_1013F30+2 bl +
jnz loc_100E07C  +
cmp VersionInformation.dwMajorVersion 5 +
jmp loc_100E002  +
mov al byte ptr dword_1013F30+2 +
cmp al 3 +
jz loc_100DDCB  +
cmp al 2 +
jnz loc_100E07C  +
cmp VersionInformation.dwMajorVersion 5 +
jnz loc_100E07C  +
mov al byte ptr dword_1013F30 +
test al 2 +
jz loc_100E07C  +
test al al +
js loc_100E07C  +
jmp loc_100E004  +
mov al byte ptr dword_1013F30+2 +
cmp al 3 +
jz loc_100DE03  +
cmp al 2 +
jnz loc_100E07C  +
cmp VersionInformation.dwMajorVersion 5 +
jnz loc_100E07C  +
test byte ptr dword_1013F30 80h +
jmp loc_100DCF0  +
mov al byte ptr dword_1013F30+2 +
cmp al 3 +
jz loc_100DE2D  +
cmp al 2 +
jnz loc_100E07C  +
test byte ptr dword_1013F30 82h +
jmp loc_100DDA8  +
mov eax dword_1013F30 +
and eax 40h +
jmp loc_100E07E  +
xor eax eax +
cmp VersionInformation.dwPlatformId ebx +
setz al  +
jmp loc_100E07E  +
xor eax eax +
cmp VersionInformation.dwPlatformId 2 +
jmp loc_100DE4E  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_100E07C  +
cmp VersionInformation.dwMajorVersion 4 +
jmp loc_100DCBC  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_100E07C  +
cmp VersionInformation.dwMajorVersion 4 +
jnz loc_100E07C  +
cmp VersionInformation.dwMinorVersion 0 +
jnz loc_100E07C  +
mov eax 3B6h +
cmp word ptr VersionInformation.dwBuildNumber ax +
jmp loc_100E002  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_100E07C  +
mov eax VersionInformation.dwMajorVersion +
cmp eax 4 +
ja loc_100E004  +
jnz loc_100E07C  +
cmp VersionInformation.dwMinorVersion 0Ah +
jmp loc_100DCBC  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_100E07C  +
cmp VersionInformation.dwMajorVersion 4 +
jnz loc_100E07C  +
cmp VersionInformation.dwMinorVersion 0Ah +
jnz loc_100E07C  +
mov eax 7CEh +
jmp loc_100DEA4  +
cmp VersionInformation.dwPlatformId ebx +
jnz loc_100E07C  +
mov eax VersionInformation.dwMajorVersion +
cmp eax 4 +
jnz loc_100E07A  +
cmp VersionInformation.dwMinorVersion 5Ah +
jnb loc_100E004  +
cmp eax eax +
jmp loc_100E07A  +
cmp VersionInformation.dwPlatformId 2 +
jmp loc_100DE67  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_100E07C  +
mov eax VersionInformation.dwMajorVersion +
cmp eax 5 +
jmp loc_100E06F  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_100E07C  +
test dword_1013F30 200h +
jmp loc_100DCF0  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_100E07C  +
cmp byte ptr dword_1013F30+2 bl +
jmp loc_100E002  +
mov al byte ptr dword_1013F30+2 +
cmp al 3 +
jz loc_100DE10  +
cmp al 2 +
jmp loc_100DE0A  +
mov al byte ptr dword_1013F30+2 +
cmp al 3 +
jz loc_100DDD8  +
cmp al 2 +
jmp loc_100DDD2  +
mov al byte ptr dword_1013F30+2 +
cmp al 3 +
jz loc_100DFC7  +
cmp al 2 +
jnz loc_100E07C  +
mov eax dword_1013F30 +
test al 0A3h +
jnz loc_100E07C  +
test eax 400h +
jmp loc_100E002  +
mov eax dword_1013F30 +
and eax 400h +
jmp loc_100E07E  +
mov eax dword_1013F30 +
and eax 20h +
jmp loc_100E07E  +
mov al byte ptr dword_1013F30+2 +
cmp al 3 +
jz loc_100E004  +
cmp al 2 +
jnz loc_100E07C  +
mov eax ebx +
jmp loc_100E07E  +
xor eax eax +
cmp byte ptr dword_1013F30+2 2 +
jmp loc_100DE4E  +
call sub_100DABF  +
jmp loc_100E07E  +
call sub_100DB7A  +
jmp loc_100E07E  +
push 57h  +
jmp loc_100DC9D  +
push 58h  +
jmp loc_100DC9D  +
call sub_100DBB7  +
jmp loc_100E07E  +
call sub_100DB1E  +
jmp loc_100E07E  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_100E07C  +
cmp VersionInformation.dwMajorVersion 6 +
jmp loc_100DCBC  +
push 1Eh  +
call sub_100DC42  +
jmp loc_100E07E  +
cmp VersionInformation.dwPlatformId 2 +
jnz loc_100E07C  +
mov eax VersionInformation.dwMajorVersion +
cmp eax 6 +
ja loc_100E004  +
jnz loc_100E07C  +
cmp VersionInformation.dwMinorVersion 0 +
ja loc_100E004  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp ecx eax +
jz loc_100E14E  +
push esi  +
mov esi [ecx] +
cmp esi [ebp+arg_0] +
pop esi  +
jb loc_100E14E  +
mov eax 80070057h +
jmp loc_100E167  +
test [ebp+arg_4] 100h +
jz loc_100E167  +
cmp [edx] eax +
jnz loc_100E167  +
mov dword ptr [edx] offset dword_10023A0 +
cmp ecx eax +
jz loc_100E167  +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_100E18B  +
cmp [ebp+arg_0] eax +
jnz loc_100E18F  +
cmp ecx eax +
jnz loc_100E194  +
jmp loc_100E18F  +
cmp ecx eax +
jz loc_100E194  +
cmp ecx [ebp+arg_4] +
jbe loc_100E199  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100E1D7  +
cmp [ebp+arg_4] eax +
jz loc_100E1D3  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100E1D3  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100E1B6  +
test esi esi +
jnz loc_100E1DF  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E1ED  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 2 +
jbe loc_100E21C  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_100E251  +
test [ebp+arg_8] 1000h +
jz loc_100E251  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_100E299  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_100E281  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_100E299  +
test esi esi +
jbe loc_100E2B2  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_100E2B2  +
test [ebp+arg_8] 800h +
jz loc_100E2B2  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx eax word ptr [ecx] +
cmp ax 5Ch +
jnz loc_100E2D3  +
xor eax eax +
jmp loc_100E2E2  +
test ax ax +
jz loc_100E2DF  +
cmp word ptr [ecx+2] 3Ah +
jz loc_100E2CF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jz loc_100E338  +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
movzx ecx word ptr [esi] +
inc esi  +
lea eax [ecx-41h] +
inc esi  +
cmp eax 19h +
ja loc_100E30E  +
add ecx 20h +
movzx eax word ptr [edx] +
inc edx  +
lea edi [eax-41h] +
inc edx  +
cmp edi 19h +
ja loc_100E31E  +
add eax 20h +
dec [ebp+arg_8]  +
jz loc_100E32B  +
test ecx ecx +
jz loc_100E32B  +
cmp ecx eax +
jz loc_100E2FE  +
xor edx edx +
cmp ecx eax +
setz dl  +
pop edi  +
pop esi  +
mov eax edx +
jmp loc_100E33B  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
jmp loc_100E356  +
dec eax  +
dec eax  +
cmp word ptr [eax] 5Ch +
jz loc_100E35D  +
cmp [ebp+arg_0] eax +
jb loc_100E34E  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp ax 30h +
jb loc_100E37A  +
cmp ax 39h +
jbe loc_100E38F  +
cmp ax 41h +
jb loc_100E386  +
cmp ax 46h +
jbe loc_100E38F  +
add eax 0FFFFFF9Fh +
cmp ax 5 +
ja loc_100E394  +
xor eax eax +
inc eax  +
jmp loc_100E396  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi offset a00000000000000 +
xor ebx ebx +
sub edi esi +
movzx ecx word ptr [esi] +
movzx eax word ptr [edi+esi] +
cmp cx ax +
jz loc_100E3CF  +
cmp ax 30h +
jnz loc_100E3E1  +
push ecx  +
call sub_100E366  +
test eax eax +
jz loc_100E3E1  +
inc ebx  +
inc esi  +
inc esi  +
cmp ebx 26h +
jb loc_100E3B3  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100E3DA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 0Ah  +
push offset a?Volume  +
push esi  +
call sub_100E2EB  +
test eax eax +
jz loc_100E416  +
add esi 14h +
push esi  +
call sub_100E39F  +
test eax eax +
jz loc_100E416  +
xor eax eax +
inc eax  +
jmp loc_100E418  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_100E170  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_100E536  +
test [ebp+arg_14] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+arg_0] edi +
mov [ebp+var_4] ebx +
jz loc_100E468  +
cmp [ebp+arg_8] eax +
jnz loc_100E468  +
mov [ebp+arg_8] offset dword_10023A0 +
xor esi esi +
test [ebp+arg_14] 0FFFFE000h +
jz loc_100E483  +
mov esi 80070057h +
cmp ecx eax +
jz loc_100E4EF  +
xor eax eax +
mov [edi] ax +
jmp loc_100E4EF  +
cmp ecx eax +
jnz loc_100E4A4  +
mov edx [ebp+arg_8] +
cmp [edx] ax +
jz loc_100E520  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_100E4EF  +
mov [ebp+arg_0] eax +
push 7FFFFFFEh  +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_8] +
mov edx ecx +
mov ecx edi +
call sub_100E1A2  +
mov esi eax +
mov eax [ebp+arg_0] +
sub ebx eax +
lea ecx [edi+eax*2] +
mov [ebp+arg_0] ecx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_100E4EC  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_100E520  +
cmp ebx 1 +
jbe loc_100E520  +
push [ebp+arg_0]  +
lea ecx [ebx+ebx] +
call sub_100E1F9  +
jmp loc_100E520  +
mov ecx [ebp+arg_4] +
test [ebp+arg_14] 1C00h +
jz loc_100E514  +
test ecx ecx +
jz loc_100E514  +
push [ebp+arg_14]  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_100E227  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_100E520  +
cmp esi 8007007Ah +
jnz loc_100E535  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100E52C  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100E535  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_18]  +
mov edi [ebp+arg_4] +
mov edx 7FFFFFFFh +
push edx  +
push esi  +
mov ecx edi +
call sub_100E170  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100E67C  +
push ebx  +
push [ebp+arg_18]  +
mov ebx edi +
push edx  +
lea ecx [ebp+arg_C] +
lea edx [ebp+arg_8] +
mov [ebp+var_4] esi +
mov [ebp+arg_4] ebx +
call sub_100E133  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+arg_0] eax +
jl loc_100E621  +
test [ebp+arg_18] 0FFFFE000h +
jz loc_100E5B1  +
mov [ebp+arg_0] 80070057h +
cmp edi ecx +
jz loc_100E630  +
xor eax eax +
mov [esi] ax +
jmp loc_100E630  +
cmp edi ecx +
jnz loc_100E5D8  +
cmp [ebp+arg_C] ecx +
jz loc_100E62A  +
mov eax [ebp+arg_8] +
cmp [eax] cx +
jz loc_100E62A  +
cmp esi ecx +
jnz loc_100E5CF  +
mov [ebp+arg_0] 80070057h +
jmp loc_100E630  +
mov [ebp+arg_0] 8007007Ah +
jmp loc_100E62A  +
push [ebp+arg_C]  +
lea eax [ebp+arg_4] +
mov [ebp+arg_4] ecx +
push eax  +
mov eax [ebp+arg_8] +
mov edx edi +
mov ecx esi +
call sub_100E1A2  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_4] +
sub ebx eax +
cmp [ebp+arg_0] 0 +
lea edx [esi+eax*2] +
mov [ebp+var_4] edx +
mov [ebp+arg_4] ebx +
jl loc_100E630  +
test [ebp+arg_18] 200h +
jz loc_100E62A  +
cmp ebx 1 +
jbe loc_100E62A  +
mov eax [ebp+arg_18] +
lea ecx [ebx+ebx] +
push edx  +
call sub_100E1F9  +
jmp loc_100E62A  +
cmp edi ecx +
jz loc_100E62A  +
xor eax eax +
mov [esi] ax +
cmp [ebp+arg_0] 0 +
jge loc_100E666  +
test [ebp+arg_18] 1C00h +
jz loc_100E657  +
test edi edi +
jz loc_100E657  +
push [ebp+arg_18]  +
lea eax [ebp+var_4] +
push eax  +
lea eax [edi+edi] +
push eax  +
lea ebx [ebp+arg_4] +
xor ecx ecx +
mov edi esi +
call sub_100E227  +
mov ebx [ebp+arg_4] +
cmp [ebp+arg_0] 0 +
jge loc_100E666  +
cmp [ebp+arg_0] 8007007Ah +
jnz loc_100E67B  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_100E672  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_100E67B  +
mov [eax] ebx +
pop ebx  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
cmp edi ebx +
jz loc_100E69D  +
mov [edi] ebx +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 5Ch +
jnz loc_100E6DB  +
cmp word ptr [esi+2] 5Ch +
jnz loc_100E6DB  +
cmp word ptr [esi+4] 3Fh +
jz loc_100E6B8  +
push 2  +
jmp loc_100E6CE  +
push 5  +
push offset aUnc  +
lea eax [esi+6] +
push eax  +
call sub_100E2EB  +
test eax eax +
jz loc_100E6DB  +
push 8  +
xor ebx ebx +
inc ebx  +
pop eax  +
test edi edi +
jz loc_100E6DB  +
lea eax [esi+eax*2] +
mov [edi] eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_100E7AC  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100E7AC  +
push 3  +
mov ebx offset asc_1003EC0 +
push ebx  +
lea edi [esi+2] +
push edi  +
call sub_100E2EB  +
test eax eax +
jz loc_100E725  +
xor eax eax +
inc eax  +
jmp loc_100E7AE  +
movzx eax word ptr [esi] +
cmp ax 5Ch +
jnz loc_100E734  +
cmp word ptr [edi] 0 +
jz loc_100E71D  +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_100E68A  +
test eax eax +
jz loc_100E768  +
mov ecx [ebp+arg_0] +
xor edx edx +
jmp loc_100E75E  +
cmp ax 5Ch +
jnz loc_100E75C  +
inc edx  +
cmp edx 1 +
jg loc_100E7AC  +
cmp word ptr [ecx+2] 0 +
jz loc_100E7AC  +
inc ecx  +
inc ecx  +
movzx eax word ptr [ecx] +
test ax ax +
jnz loc_100E749  +
jmp loc_100E71D  +
push 4  +
push offset a?  +
push esi  +
call sub_100E2EB  +
test eax eax +
jz loc_100E790  +
cmp word ptr [esi+8] 0 +
jz loc_100E790  +
push 3  +
push ebx  +
lea eax [esi+0Ah] +
push eax  +
call sub_100E2EB  +
test eax eax +
jnz loc_100E71D  +
push esi  +
call sub_100E3EA  +
test eax eax +
jz loc_100E7AC  +
cmp word ptr [esi+60h] 5Ch +
jnz loc_100E7AC  +
cmp word ptr [esi+62h] 0 +
jz loc_100E71D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100E7C9  +
and dword ptr [eax] 0 +
push ebx  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jz loc_100E7D4  +
and dword ptr [ebx] 0 +
mov edx [ebp+arg_0] +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E7DD  +
mov ecx [ebp+arg_4] +
sub eax esi +
sar eax 1 +
pop esi  +
cmp eax ecx +
jb loc_100E7FA  +
mov eax 8007007Ah +
jmp loc_100E846  +
sub ecx eax +
lea edx [edx+eax*2] +
mov [ebp+arg_C] edx +
mov [ebp+arg_0] ecx +
test eax eax +
jz loc_100E82D  +
push 5Ch  +
pop eax  +
cmp ax [edx-2] +
jz loc_100E82D  +
push 0  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push offset asc_1001594  +
push ecx  +
push edx  +
call sub_100E422  +
mov edx [ebp+arg_C] +
jmp loc_100E830  +
xor eax eax +
inc eax  +
test eax eax +
jl loc_100E846  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_100E83D  +
mov [ecx] edx +
test ebx ebx +
jz loc_100E846  +
mov ecx [ebp+arg_0] +
mov [ebx] ecx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100E85F  +
and dword ptr [eax] 0 +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100E869  +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E874  +
mov ebx [ebp+arg_4] +
sub eax edx +
sar eax 1 +
mov esi eax +
cmp esi ebx +
jb loc_100E892  +
mov eax 80070057h +
jmp loc_100E8D1  +
mov [ebp+arg_0] 1 +
test esi esi +
jbe loc_100E8BC  +
cmp word ptr [edi+esi*2-2] 5Ch +
jnz loc_100E8B7  +
push edi  +
dec esi  +
call sub_100E6E9  +
test eax eax +
jnz loc_100E8B7  +
and [ebp+arg_0] eax +
mov [edi+esi*2] ax +
lea edi [edi+esi*2] +
sub ebx esi +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100E8C5  +
mov [eax] edi +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100E8CE  +
mov [eax] ebx +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E850  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_100E9E3  +
cmp [esi] bx +
jz loc_100E9E3  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_100E9E3  +
mov [eax] ebx +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_100E68A  +
push 5Ch  +
test eax eax +
jz loc_100E98F  +
mov esi [ebp+arg_0] +
push esi  +
call wcschr  +
mov edi eax +
pop ecx  +
pop ecx  +
cmp edi ebx +
jz loc_100E977  +
lea ebx [edi+2] +
push 5Ch  +
push ebx  +
call wcschr  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_100E95F  +
cmp esi ebx +
jz loc_100E9DA  +
jmp loc_100E9D8  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E964  +
sub eax edx +
sar eax 1 +
lea esi [edi+eax*2] +
jmp loc_100E9DA  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100E97C  +
sub eax edx +
sar eax 1 +
lea esi [esi+eax*2] +
jmp loc_100E9DA  +
pop edi  +
cmp [esi] di +
jnz loc_100E9A1  +
lea eax [esi+2] +
cmp [eax] di +
jz loc_100E9A1  +
mov esi eax +
jmp loc_100E9DA  +
push esi  +
call sub_100E3EA  +
test eax eax +
jz loc_100E9B0  +
add esi 60h +
jmp loc_100E9D3  +
push 4  +
push offset a?  +
push esi  +
call sub_100E2EB  +
test eax eax +
jz loc_100E9C4  +
add esi 8 +
cmp [esi] bx +
jz loc_100E9E3  +
cmp word ptr [esi+2] 3Ah +
jnz loc_100E9E3  +
add esi 4 +
cmp [esi] di +
jnz loc_100E9DA  +
inc esi  +
inc esi  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor eax eax +
jmp loc_100E9E8  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100EA67  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_100EA67  +
cmp ebx 8000h +
ja loc_100EA67  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
call sub_100E8FA  +
mov esi eax +
test esi esi +
jl loc_100EA56  +
mov eax [ebp+arg_0] +
lea ecx [edi+ebx*2] +
cmp eax ecx +
jb loc_100EA31  +
mov esi 80070057h +
test esi esi +
jl loc_100EA56  +
cmp word ptr [eax] 0 +
push ebx  +
push edi  +
jnz loc_100EA46  +
call sub_100E8DD  +
mov esi eax +
jmp loc_100EA52  +
xor ecx ecx +
mov [eax] cx +
call sub_100E8DD  +
xor esi esi +
test esi esi +
jge loc_100EA62  +
push offset dword_10023A0  +
push ebx  +
push edi  +
call sub_100528B  +
mov eax esi +
pop esi  +
jmp loc_100EA6C  +
mov eax 80070057h +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push offset dword_10023A0  +
push esi  +
push [ebp+arg_0]  +
xor edi edi +
mov [ebp+var_10] edi +
call sub_100528B  +
cmp eax edi +
mov [ebp+var_4] eax +
jl loc_100EEC4  +
cmp esi 8000h +
jbe loc_100EAB4  +
mov eax 80070057h +
jmp loc_100EEC4  +
mov eax 104h +
cmp esi eax +
ja loc_100EAC1  +
and [ebp+arg_C] 0FFFFFFFEh +
mov ecx [ebp+arg_C] +
and ecx 1 +
mov [ebp+var_C] ecx +
jnz loc_100EAD5  +
cmp esi eax +
jbe loc_100EAD5  +
mov esi eax +
mov [ebp+arg_4] esi +
push ebx  +
mov ebx [ebp+arg_8] +
lea eax [ebp+arg_8] +
push eax  +
push ebx  +
mov [ebp+var_8] esi +
call sub_100E68A  +
mov [ebp+var_14] eax +
cmp eax edi +
jz loc_100EB1C  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
cmp [ebp+var_C] edi +
jz loc_100EB15  +
mov [ebp+var_10] 6 +
push offset a?Unc  +
push esi  +
push [ebp+arg_0]  +
call sub_100E422  +
mov edi [ebp+arg_8] +
jmp loc_100EB85  +
push offset asc_1003ED8  +
jmp loc_100EB07  +
mov eax [ebp+arg_0] +
push 4  +
mov esi offset a? +
push esi  +
push ebx  +
mov edi ebx +
mov [ebp+arg_C] eax +
call sub_100E2EB  +
test eax eax +
jz loc_100EB4E  +
lea ecx [ebx+8] +
cmp word ptr [ecx] 0 +
jz loc_100EB4A  +
cmp word ptr [ebx+0Ah] 3Ah +
jnz loc_100EB4A  +
mov edi ecx +
jmp loc_100EB5E  +
xor eax eax +
jmp loc_100EB5E  +
cmp word ptr [ebx] 0 +
jz loc_100EB5E  +
cmp word ptr [ebx+2] 3Ah +
jnz loc_100EB5E  +
xor eax eax +
inc eax  +
cmp [ebp+var_C] 0 +
jz loc_100EBCD  +
test eax eax +
jz loc_100EB88  +
push 0  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push esi  +
push [ebp+arg_4]  +
mov [ebp+var_10] 4 +
push [ebp+arg_0]  +
call sub_100E422  +
mov [ebp+var_4] eax +
cmp [ebp+var_C] 0 +
jz loc_100EBCD  +
mov eax [ebp+var_10] +
test eax eax +
jz loc_100EBCD  +
add eax 104h +
cmp [ebp+arg_4] eax +
ja loc_100EBCD  +
mov eax 104h +
cmp [ebp+arg_4] eax +
jbe loc_100EBAC  +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
and [ebp+var_10] 0 +
push offset dword_10023A0  +
push eax  +
push ecx  +
mov [ebp+var_8] eax +
mov edi ebx +
mov [ebp+arg_C] ecx +
call sub_100528B  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jl loc_100ED89  +
cmp word ptr [edi] 0 +
jz loc_100ED83  +
push 5Ch  +
push edi  +
call wcschr  +
xor esi esi +
pop ecx  +
pop ecx  +
cmp eax esi +
jz loc_100EBF5  +
sub eax edi +
jmp loc_100EC06  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_100EBFA  +
sub eax edx +
sar eax 1 +
mov ebx eax +
cmp ebx 100h +
jbe loc_100EC1B  +
cmp [ebp+var_C] esi +
jz loc_100ED77  +
cmp ebx 8000h +
jnb loc_100ED77  +
cmp ebx 1 +
jnz loc_100EC81  +
cmp word ptr [edi] 2Eh +
jnz loc_100ED05  +
lea eax [edi+2] +
cmp [eax] si +
jnz loc_100EC79  +
mov edi eax +
mov eax [ebp+arg_0] +
cmp [ebp+arg_C] eax +
jbe loc_100ED6C  +
push eax  +
call sub_100E6E9  +
test eax eax +
jnz loc_100ED6C  +
sub [ebp+arg_C] 2 +
inc [ebp+var_8]  +
push offset dword_10023A0  +
push [ebp+var_8]  +
push [ebp+arg_C]  +
call sub_100528B  +
mov [ebp+var_4] eax +
jmp loc_100ED6C  +
add edi 4 +
jmp loc_100ED6C  +
cmp ebx 2 +
jnz loc_100ECF4  +
cmp word ptr [edi] 2Eh +
jnz loc_100ED05  +
lea esi [edi+2] +
cmp word ptr [esi] 2Eh +
jnz loc_100ED03  +
mov ebx [ebp+arg_C] +
cmp ebx [ebp+arg_0] +
jbe loc_100ECE4  +
push [ebp+arg_0]  +
call sub_100E6E9  +
test eax eax +
jnz loc_100ECE4  +
mov esi [ebp+arg_0] +
add ebx 0FFFFFFFEh +
push ebx  +
push esi  +
call sub_100E344  +
mov [ebp+arg_C] eax +
test eax eax +
mov eax [ebp+arg_4] +
jz loc_100ECCB  +
mov ecx [ebp+arg_C] +
sub ecx esi +
sar ecx 1 +
sub eax ecx +
jmp loc_100ECCE  +
mov [ebp+arg_C] esi +
push offset dword_10023A0  +
push eax  +
push [ebp+arg_C]  +
mov [ebp+var_8] eax +
call sub_100528B  +
mov [ebp+var_4] eax +
jmp loc_100ECED  +
cmp word ptr [edi+4] 5Ch +
jnz loc_100ECED  +
mov edi esi +
add edi 4 +
xor esi esi +
jmp loc_100ED6C  +
cmp ebx esi +
jnz loc_100ED05  +
cmp word ptr [edi] 5Ch +
jnz loc_100ED05  +
xor ebx ebx +
inc ebx  +
jmp loc_100ED05  +
xor esi esi +
push esi  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
push ebx  +
push edi  +
push [ebp+var_8]  +
push [ebp+arg_C]  +
call sub_100E543  +
mov [ebp+var_4] eax +
cmp eax 8007007Ah +
jnz loc_100ED69  +
cmp ebx 1 +
jnz loc_100ED69  +
cmp word ptr [edi] 5Ch +
jnz loc_100ED69  +
movzx eax word ptr [edi+2] +
cmp ax si +
jz loc_100ED80  +
cmp ax 2Eh +
jnz loc_100ED45  +
cmp [edi+4] si +
jz loc_100ED80  +
cmp [ebp+var_8] 1 +
jnz loc_100ED69  +
cmp ax 2Eh +
jnz loc_100ED69  +
cmp [edi+4] ax +
jnz loc_100ED69  +
mov ecx [ebp+arg_C] +
xor eax eax +
add [ebp+arg_C] 2 +
mov [ecx] ax +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
lea edi [edi+ebx*2] +
cmp [ebp+var_4] esi +
jge loc_100EBD7  +
jmp loc_100ED83  +
mov [ebp+var_4] 800700CEh +
jmp loc_100ED89  +
mov [ebp+var_4] esi +
cmp [ebp+var_4] 0 +
jge loc_100EDD7  +
push offset dword_10023A0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100528B  +
mov eax [ebp+var_4] +
cmp eax 8007007Ah +
jnz loc_100EEC3  +
cmp [ebp+var_C] 0 +
jnz loc_100EDC0  +
cmp [ebp+arg_4] 104h +
jz loc_100EDCD  +
cmp [ebp+var_C] 0 +
jz loc_100EEC3  +
cmp [ebp+arg_4] 8000h +
jnz loc_100EEC3  +
mov eax 800700CEh +
jmp loc_100EEC3  +
mov ecx [ebp+arg_C] +
mov edx [ebp+arg_0] +
cmp ecx edx +
jbe loc_100EE0A  +
dec ecx  +
dec ecx  +
cmp word ptr [ecx] 2Eh +
jnz loc_100EE0A  +
cmp ecx edx +
jz loc_100EE05  +
lea eax [ecx-2] +
cmp word ptr [eax] 2Ah +
jz loc_100EE0A  +
xor esi esi +
mov [ecx] si +
cmp word ptr [eax] 2Eh +
mov ecx eax +
jz loc_100EDE9  +
jmp loc_100EE0A  +
xor eax eax +
mov [ecx] ax +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100EE0F  +
sub eax esi +
sar eax 1 +
lea esi [edx+eax*2] +
add edx 0Eh +
cmp esi edx +
jb loc_100EE40  +
push 7  +
push offset aData  +
sub esi 0Eh +
push esi  +
call sub_100E2EB  +
test eax eax +
jz loc_100EE40  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_10] +
mov esi [ebp+arg_0] +
xor edi edi +
cmp eax edi +
jz loc_100EE8A  +
lea eax [esi+eax*2] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_100EE52  +
sub eax edx +
sar eax 1 +
cmp eax 104h +
jnb loc_100EE8A  +
cmp [ebp+var_14] edi +
jz loc_100EE7D  +
lea eax [esi+10h] +
push eax  +
mov eax [ebp+arg_4] +
add eax 0FFFFFFFEh +
push eax  +
lea eax [esi+4] +
push eax  +
jmp loc_100EE85  +
lea eax [esi+8] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_100528B  +
cmp [ebp+arg_4] 1 +
jbe loc_100EEA1  +
cmp [esi] di +
jnz loc_100EEA1  +
push 5Ch  +
pop eax  +
mov [esi] ax +
xor eax eax +
mov [esi+2] ax +
cmp [ebp+arg_4] 3 +
jbe loc_100EEC1  +
cmp word ptr [esi+2] 3Ah +
jnz loc_100EEC1  +
cmp [esi+4] di +
jnz loc_100EEC1  +
push 5Ch  +
pop eax  +
mov [esi+4] ax +
xor eax eax +
mov [esi+6] ax +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_8] +
push ebx  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_C] +
mov [ebp+var_220] ecx +
mov [ebp+var_214] eax +
mov [ebp+var_218] edi +
mov [ebp+var_21C] ebx +
mov [ebp+hMem] ebx +
cmp ecx ebx +
jz loc_100F104  +
cmp [ebp+arg_4] ebx +
jz loc_100F104  +
mov edx 8000h +
cmp [ebp+arg_4] edx +
ja loc_100F104  +
push esi  +
cmp eax ebx +
jnz loc_100EF71  +
cmp edi ebx +
jnz loc_100EFA2  +
mov esi 80070057h +
push offset dword_10023A0  +
push [ebp+arg_4]  +
push [ebp+var_220]  +
call sub_100528B  +
lea eax [ebp+var_20C] +
cmp [ebp+hMem] eax +
jz loc_100EF69  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov eax esi +
pop esi  +
jmp loc_100F109  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100EF74  +
sub eax esi +
sar eax 1 +
mov [ebp+var_21C] eax +
cmp eax edx +
jb loc_100EF93  +
mov esi 800700CEh +
jmp loc_100EF3C  +
test eax eax +
jz loc_100EF9E  +
inc eax  +
mov [ebp+var_21C] eax +
test edi edi +
jz loc_100EFC0  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100EFA7  +
sub eax esi +
sar eax 1 +
mov ebx eax +
cmp ebx edx +
jnb loc_100EF8C  +
test ebx ebx +
jz loc_100EFC0  +
inc ebx  +
mov eax [ebp+var_21C] +
lea edi [ebx+eax] +
mov eax 104h +
cmp edi eax +
jbe loc_100EFF2  +
lea eax [edi+edi] +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jnz loc_100F009  +
mov esi 8007000Eh +
jmp loc_100EF3C  +
xor ecx ecx +
mov word ptr [ebp+var_20C] cx +
lea ecx [ebp+var_20C] +
mov [ebp+hMem] ecx +
mov edi eax +
cmp [ebp+var_21C] 0 +
jz loc_100F0C6  +
test ebx ebx +
jnz loc_100F025  +
push [ebp+var_214]  +
jmp loc_100F0D0  +
mov ebx [ebp+var_218] +
push ebx  +
call sub_100E2BE  +
test eax eax +
jz loc_100F084  +
push [ebp+var_214]  +
push edi  +
push [ebp+hMem]  +
call sub_100528B  +
mov esi eax +
test esi esi +
jl loc_100EF3C  +
lea eax [ebp+var_218] +
push eax  +
lea eax [ebp+var_214] +
push eax  +
push edi  +
push [ebp+hMem]  +
call sub_100E7BA  +
mov esi eax +
test esi esi +
jl loc_100EF3C  +
push ebx  +
push [ebp+var_218]  +
push [ebp+var_214]  +
jmp loc_100F0D7  +
cmp word ptr [ebx] 5Ch +
jnz loc_100F0C3  +
add ebx 2 +
cmp word ptr [ebx] 5Ch +
jz loc_100F0BD  +
push [ebp+var_214]  +
push edi  +
push [ebp+hMem]  +
call sub_100528B  +
mov esi eax +
test esi esi +
jl loc_100EF3C  +
push edi  +
push [ebp+hMem]  +
call sub_100E9F4  +
jmp loc_100F047  +
mov ebx [ebp+var_218] +
push ebx  +
jmp loc_100F0D0  +
test ebx ebx +
jz loc_100F0E6  +
push [ebp+var_218]  +
push edi  +
push [ebp+hMem]  +
call sub_100528B  +
mov esi eax +
test esi esi +
jl loc_100EF3C  +
push [ebp+arg_10]  +
push [ebp+hMem]  +
push [ebp+arg_4]  +
push [ebp+var_220]  +
call sub_100EA77  +
mov esi eax +
jmp loc_100EF4F  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_100F152  +
push 0  +
push esi  +
call sub_100E68A  +
test eax eax +
jnz loc_100F152  +
push 4  +
push offset a?  +
push esi  +
call sub_100E2EB  +
test eax eax +
jnz loc_100F152  +
jmp loc_100F14C  +
inc esi  +
inc esi  +
cmp word ptr [esi] 5Ch +
jz loc_100F14A  +
push [ebp+arg_C]  +
push esi  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100EECF  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_101100C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+LibFileName] ax +
lea eax [ebp+var_214] +
xor esi esi +
push eax  +
mov [ebp+var_214] esi +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
lea eax [ebp+LibFileName] +
push eax  +
xor eax eax +
cmp [ebp+var_214] esi +
push esi  +
setnz al  +
push esi  +
lea eax ds:25h[eax*4] +
push eax  +
push esi  +
call ds:SHGetFolderPathW  +
cmp eax esi +
mov [ebp+var_210] eax +
jl loc_100F218  +
push esi  +
push ebx  +
push 104h  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100F11E  +
cmp eax esi +
mov [ebp+var_210] eax +
jl loc_100F218  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryW  +
mov [edi] eax +
cmp eax esi +
jnz loc_100F218  +
mov [ebp+var_210] 80004001h +
mov ecx [ebp+var_4] +
mov eax [ebp+var_210] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10049E5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hLibModule] 0 +
push esi  +
lea eax [ebp+hLibModule] +
push eax  +
push offset aPropsys_dll  +
call sub_100F16E  +
mov esi eax +
test esi esi +
jl loc_100F27E  +
push offset aPsregisterprop  +
push [ebp+hLibModule]  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100F270  +
push offset aProgramfilesIn  +
call eax  +
mov esi eax +
jmp loc_100F275  +
mov esi 80004002h +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hLibModule] 0 +
push esi  +
lea eax [ebp+hLibModule] +
push eax  +
push offset aPropsys_dll  +
call sub_100F16E  +
cmp [ebp+hLibModule] 0 +
mov esi eax +
jz loc_100F2D4  +
push offset aPsunregisterpr  +
push [ebp+hLibModule]  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100F2C6  +
push offset aProgramfilesIn  +
call eax  +
mov esi eax +
jmp loc_100F2CB  +
mov esi 80004002h +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push dword ptr [ebp-10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
lea ecx [ebp-1Ch] +
jmp sub_100519A  +
***
jmp fword ptr [eax+1Dh]  +
***
fdivp st(7) st +
jmp fword ptr [eax+4Ch]  +
***
add al ch +
mov eax 59FFFF52h +
retn   +
***
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
retn   +
***
mov dword_1013DBC offset off_1002A58 +
test eax eax +
jz locret_100F637  +
push eax  +
call ds:HeapDestroy  +
retn   +
***
mov ecx offset dword_1013E30 +
jmp sub_100D5A4  +
***
mov dword_1013E3C offset off_1003BC4 +
retn   +
***
or [edx] cl +
add [eax] eax +
sub cl [edx] +
add [eax] eax +
or al [ecx] +
add [edx+ecx] bl +
add [eax] eax +
retf 102h  +
***
fimul  dword ptr [eax] +
add [eax] eax +
retf 108h  +
***
add [eax] eax +
mov byte ptr [ecx] 1 +
add [esi-4FFFFEFFh] bh +
add [ecx] eax +
add [esi-67FFFEFFh] ah +
add [ecx] eax +
add [esi+1] bh +
add [eax] eax +
push 1  +
add [eax] eax +
dec esp  +
add [ecx] eax +
add [esi] bh +
add [ecx] eax +
add [esi] ch +
add [ecx] eax +
add [edx] bl +
add [ecx] eax +
add [ecx+eax] cl +
add [eax] eax +
add [ecx] al +
add [eax] eax +
test byte ptr [eax] 1 +
add dh ch +
add [ecx] al +
add al ah +
add [ecx] al +
add dl dl +
add [ecx] al +
add dl cl +
add [ecx] al +
add al al +
add [ecx] al +
add [eax+ecx+0A40001h] dh +
add [eax] eax +
retn 10Ah  +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756F4C1Dh  +
***
inc ecx  +
ins  dx +
ins  dx +
outs   +
arpl [eax] ax +
retf   +
***
