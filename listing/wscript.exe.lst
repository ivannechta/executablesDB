cmp ecx dword_1019004 +
jnz loc_100E137  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
and [ebp+ppmk] 0 +
and [ebp+var_210] 0 +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_21C] ecx +
mov ecx [ebp+arg_14] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_218] ecx +
mov ecx esi +
call sub_1003467  +
test eax eax +
jl loc_1006A6B  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push 104h  +
push edi  +
call sub_100368E  +
test eax eax +
jl loc_1006A6B  +
mov edi ds:SysAllocString +
lea eax [ebp+Buffer] +
push eax  +
call edi  +
mov [esi+238h] eax +
test eax eax +
jz loc_1006A82  +
push [ebp+FilePart]  +
call edi  +
mov [esi+23Ch] eax +
test eax eax +
jz loc_1006A82  +
push ebx  +
mov ecx esi +
call sub_100397C  +
mov edi eax +
test edi edi +
jl loc_1006ACB  +
cmp [ebp+var_218] 0 +
lea eax [ebp+var_210] +
mov ecx esi +
push eax  +
jnz loc_1006A8C  +
call sub_1001569  +
test eax eax +
jl loc_1006A9C  +
cmp byte ptr [esi+26h] 0 +
push [ebp+var_210]  +
mov ecx esi +
jz loc_1006ABF  +
call sub_1001CC1  +
mov edi eax +
cmp edi 1 +
jz loc_1006AB7  +
test edi edi +
jl loc_10014D2  +
push [ebp+var_210]  +
mov ecx esi +
call sub_1001933  +
mov edi eax +
test edi edi +
jl loc_10014D2  +
xor edi edi +
test edi edi +
jl loc_10014D2  +
mov eax [ebp+ppmk] +
test eax eax +
jnz loc_1006B9A  +
push [ebp+var_210]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 18h  +
cmp edi 8004FFFFh +
jnz loc_1006B71  +
jmp loc_10014A5  +
***
mov edi edi +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
call ds:GetWindowLongA  +
cmp dword ptr [ebp+0Ch] 81h +
mov ebx [ebp+14h] +
mov esi eax +
jz loc_1003ED5  +
push ebx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
test esi esi +
jz loc_1003EE8  +
mov ecx esi +
call sub_1001631  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+Msg] +
dec eax  +
dec eax  +
push esi  +
mov esi ecx +
jz loc_1005694  +
sub eax 0Fh +
jz loc_1006F0B  +
sub eax 5 +
jz loc_1005681  +
sub eax 6Ch +
jz loc_100568F  +
sub eax 91h +
jz loc_1005688  +
sub eax 2EEh +
jz loc_1006EAE  +
dec eax  +
jz loc_1005676  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push dword ptr [esi]  +
call ds:DefWindowProcA  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea edi [esi+4] +
push edi  +
call ds:InterlockedDecrement  +
test eax eax +
jz loc_100570D  +
mov eax [edi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+23h] 0 +
push edi  +
jnz loc_1006A32  +
xor eax eax +
lea edi [esi+248h] +
push edi  +
push eax  +
push dword ptr [esi+238h]  +
call sub_100281B  +
test eax eax +
jl loc_1006A3D  +
push [ebp+arg_0]  +
mov ecx [edi] +
call sub_1002782  +
test eax eax +
jl loc_10019CF  +
cmp byte ptr [esi+21h] 0 +
jnz loc_1006A4C  +
mov eax [edi] +
push dword ptr [eax+40h]  +
lea edi [esi+244h] +
mov ecx [edi] +
push eax  +
call sub_100291F  +
mov ebx eax +
test ebx ebx +
jl loc_10019A4  +
mov ecx [edi] +
call sub_10019E3  +
mov ebx eax +
test ebx ebx +
jl loc_10019A4  +
xor ebx ebx +
mov ecx [esi+244h] +
call sub_10056BD  +
mov ecx [esi+24Ch] +
test ecx ecx +
jz loc_10019BE  +
call sub_1005C36  +
mov ecx esi +
call sub_1005633  +
test eax eax +
jnz loc_1006A5F  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov ebx eax +
test ebx ebx +
jge loc_100197C  +
jmp loc_10019A4  +
***
mov eax [ecx+24h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax 80020101h +
jz loc_1007512  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jz loc_10084B0  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset riid +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jz loc_1005453  +
mov ecx [ebp+8] +
push edx  +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFF4h +
mov eax [ecx] +
call dword ptr [eax+4]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+10h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
lea eax [esi+0Ch] +
mov dword ptr [esi] offset off_100155C +
mov dword ptr [eax] offset off_1001B60 +
mov dword ptr [eax+4] 1 +
jnz loc_10084BA  +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
push offset Addend  +
mov [esi+8] eax +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
jnz loc_1001BB6  +
push [ebp+lpString]  +
mov esi ds:lstrlenW +
call esi  +
push [ebp+arg_4]  +
mov edi eax +
call esi  +
mov [ebp+arg_8] edi +
cmp edi eax +
ja loc_1001BB6  +
mov [ebp+arg_8] eax +
cmp [ebp+arg_8] 1 +
jb loc_1001C0D  +
mov eax [ebp+lpString] +
movzx esi word ptr [eax] +
mov eax [ebp+arg_4] +
movzx edi word ptr [eax] +
dec [ebp+arg_8]  +
add [ebp+lpString] 2 +
add [ebp+arg_4] 2 +
xor eax eax +
cmp si di +
jz loc_1001C08  +
cmp ax si +
jz loc_1001C11  +
cmp ax di +
jz loc_1001C16  +
push edi  +
call sub_100418A  +
push esi  +
mov bx ax +
call sub_100418A  +
cmp ax bx +
jz loc_1001BB6  +
cmp di si +
sbb eax eax +
and eax 2 +
dec eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
cmp ax si +
jnz loc_1001BB6  +
xor eax eax +
jmp loc_1001C01  +
or eax 0FFFFFFFFh +
jmp loc_1001C01  +
xor eax eax +
inc eax  +
jmp loc_1001C01  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
mov eax ecx +
test edx edx +
jz loc_10079F0  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001C9C +
xor ebx ebx +
cmps   +
jz loc_1003F33  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset sub_1001CAC +
xor ebx ebx +
cmps   +
jz loc_1003F33  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_1002BD4 +
xor ebx ebx +
cmps   +
jz loc_10079FA  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_10022E8 +
xor ebx ebx +
cmps   +
jz loc_10079FF  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1002373  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
shr dword ptr [ecx-4E1AD33Bh] 1 +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
mov [ebp+lpBuffer] eax +
mov eax [esi+238h] +
mov [ebp+hLibModule] ebx +
mov [ebp+hObject] ebx +
mov [ebp+var_84] ebx +
mov [ebp+var_94] ebx +
mov [ebp+var_88] ebx +
mov [ebp+var_8C] eax +
mov [ebp+var_90] ebx +
cmp [esi+26h] bl +
jz loc_10077CF  +
lea eax [ebp+hLibModule] +
push eax  +
push offset dword_1001EE4  +
call sub_1002068  +
test eax eax +
jl loc_10077D7  +
push edi  +
mov edi ds:GetProcAddress +
push offset ProcName  +
push [ebp+hLibModule]  +
call edi  +
mov [ebp+var_98] eax +
cmp eax ebx +
jz loc_10077E3  +
push offset aSafercomputeto  +
push [ebp+hLibModule]  +
call edi  +
mov [ebp+var_9C] eax +
cmp eax ebx +
jz loc_10077E3  +
push offset aSafercloseleve  +
push [ebp+hLibModule]  +
call edi  +
mov [ebp+var_90] eax +
cmp eax ebx +
jz loc_10077E3  +
cmp [esi+27h] bl +
jnz loc_10077EF  +
push 70h  +
lea eax [ebp+var_74] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp+var_8C] +
mov [ebp+var_6C] eax +
mov eax [ebp+var_94] +
push 40h  +
mov [ebp+var_68] eax +
lea eax [ebp+var_60] +
push ebx  +
push eax  +
mov [ebp+var_74] 70h +
mov [ebp+var_70] 0Dh +
mov [ebp+var_64] ebx +
call memset  +
xor eax eax +
inc eax  +
add esp 18h +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
cmp [esi+28h] eax +
jz loc_1001E80  +
mov [ebp+var_8] 2 +
push offset aScript  +
lea ecx [ebp+var_84] +
push ecx  +
lea ecx [ebp+var_74] +
push ecx  +
push eax  +
call [ebp+var_98]  +
test eax eax +
jz loc_100783B  +
push ebx  +
push 1  +
lea eax [ebp+hObject] +
push eax  +
push ebx  +
push [ebp+var_84]  +
call [ebp+var_9C]  +
test eax eax +
jz loc_1007857  +
cmp [ebp+hObject] ebx +
jnz loc_1007894  +
mov [ebp+lpBuffer] ebx +
cmp [ebp+var_88] ebx +
jnz loc_10078A7  +
pop edi  +
cmp [ebp+hObject] ebx +
jnz loc_10078B8  +
cmp [ebp+var_84] ebx +
jz loc_1001E5F  +
cmp [ebp+var_90] ebx +
jz loc_1001E5F  +
push [ebp+var_84]  +
call [ebp+var_90]  +
cmp [ebp+hLibModule] ebx +
jz loc_1001E6D  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov eax [ebp+lpBuffer] +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 4  +
mov [ebp+var_8] eax +
cmp [esi+20h] bl +
jz loc_1001DE6  +
jmp loc_1001DDF  +
***
call sub_10021C5  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1001F49  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10015D0  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
and dword ptr [esi] 0 +
cmp [ebp+cchMultiByte] 0 +
push edi  +
jz loc_1006779  +
xor ebx ebx +
inc ebx  +
test byte ptr [ebp+cchMultiByte] bl +
jnz loc_1001F9C  +
call sub_1002299  +
test al al +
jz loc_10067F3  +
lea eax [ebp+i] +
push eax  +
push [ebp+cchMultiByte]  +
mov [ebp+i] 1EEh +
push [ebp+lpMultiByteStr]  +
call ds:IsTextUnicode  +
mov eax [ebp+i] +
test eax 100h +
jz loc_1006798  +
xor eax eax +
push eax  +
push eax  +
push [ebp+cchMultiByte]  +
xor ebx ebx +
push [ebp+lpMultiByteStr]  +
push eax  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
mov esi eax +
test esi esi +
jz loc_10067E2  +
push esi  +
push 0  +
call ds:SysAllocStringLen  +
mov edi eax +
test edi edi +
jz loc_10067AE  +
test ebx ebx +
jnz loc_1006851  +
push esi  +
push edi  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
mov esi eax +
test esi esi +
jz loc_1006836  +
push 1Ah  +
lea esi [edi+esi*2-2] +
pop eax  +
cmp ax [esi] +
jz loc_1006884  +
mov eax [ebp+arg_C] +
mov [eax] edi +
xor edi edi +
xor esi esi +
test edi edi +
jnz loc_100688F  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
test eax eax +
jz loc_1002046  +
push eax  +
call ds:UnmapViewOfFile  +
mov eax [esi+4] +
mov edi ds:CloseHandle +
test eax eax +
jz loc_1002056  +
push eax  +
call edi  +
mov esi [esi] +
cmp esi 0FFFFFFFFh +
jz loc_1002060  +
push esi  +
call edi  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
push esi  +
push 0  +
lea eax [ebp-1] +
push eax  +
call ds:GetSystemDirectoryA  +
mov esi eax +
test esi esi +
jz loc_100778D  +
mov eax [ebp+arg_0] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1002091  +
push ebx  +
sub eax ecx +
push edi  +
lea edi [eax+esi+2] +
push edi  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_10077AA  +
inc esi  +
push esi  +
push ebx  +
call ds:GetSystemDirectoryA  +
test eax eax +
jz loc_10077B4  +
sub edi eax +
push offset asc_1002020  +
lea esi [eax+ebx] +
push edi  +
push esi  +
call sub_1002111  +
push [ebp+arg_0]  +
dec edi  +
push edi  +
inc esi  +
push esi  +
call sub_1002111  +
add esp 18h +
push ebx  +
call ds:LoadLibraryA  +
test eax eax +
jz loc_10077B4  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor esi esi +
test ebx ebx +
jz loc_1002103  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp ecx ebx +
jz loc_1006378  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jbe loc_1006378  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jz loc_1006396  +
mov edx ecx +
mov al [esi] +
mov [edx] al +
inc edx  +
inc esi  +
cmp al bl +
jz loc_100214B  +
dec edi  +
jnz loc_100213E  +
cmp edi ebx +
jz loc_100639A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1019004 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hFile] +
push esi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jz loc_10083DE  +
push edi  +
xor edi edi +
push edi  +
push eax  +
mov [esi] eax +
call ds:GetFileSize  +
mov [esi+0Ch] eax +
cmp eax 0FFFFFFFFh +
jz loc_10083E8  +
cmp eax edi +
jz loc_1008405  +
push ebx  +
mov ebx [ebp+flProtect] +
push edi  +
push eax  +
push edi  +
push ebx  +
push edi  +
push dword ptr [esi]  +
call ds:CreateFileMappingA  +
mov [esi+4] eax +
cmp eax edi +
jz loc_1008419  +
push 2  +
pop ecx  +
cmp ebx ecx +
jnz loc_1002289  +
push 4  +
pop ecx  +
push edi  +
push edi  +
push edi  +
push ecx  +
push eax  +
call ds:MapViewOfFile  +
mov [esi+8] eax +
cmp eax edi +
jz loc_1008419  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
cmp ebx 4 +
jnz loc_100840C  +
jmp loc_100226A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
test eax eax +
jz loc_1006772  +
xor eax eax +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
setz al  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn   +
***
xor dword ptr [edx-454B4E6Ah] 1Ah +
adc [esi+0AA009Ch] dh +
xor al 1Dh +
pop es  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 4  +
mov eax ecx +
pop ecx  +
mov edi offset dword_100239C +
xor edx edx +
cmps   +
pop edi  +
pop esi  +
jz loc_10026B7  +
mov ecx eax +
pop ebp  +
jmp sub_1001AB5  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10023BD  +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
add eax 8 +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10023E0  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
cmp [ebp+pptlib] 0 +
jnz loc_10084D0  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+14h] +
mov ebx offset CriticalSection +
push ebx  +
call ds:EnterCriticalSection  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_10084DA  +
mov eax [esi+1Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [esi+1Ch] +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor edi edi +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
test edi edi +
jl loc_1002427  +
jmp loc_1002414  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov eax [ebp+8] +
push dword ptr [ebp+18h]  +
add eax 8 +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100246B  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_10024C4 +
xor eax eax +
cmps   +
jnz loc_1008524  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+arg_4] +
push edx  +
push [ebp+arg_10]  +
push 0  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_10024BC  +
push [ebp+arg_14]  +
mov eax [ebp+arg_4] +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+28h]  +
mov eax [ebp+8] +
push dword ptr [ebp+24h]  +
add eax 8 +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100250B  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_10024C4 +
xor eax eax +
cmps   +
jnz loc_100852E  +
mov esi [ebp+arg_0] +
mov eax [esi] +
lea ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_C]  +
xor edi edi +
push edi  +
push esi  +
call dword ptr [eax+18h]  +
cmp eax edi +
jl loc_1002571  +
push edi  +
push edi  +
call ds:SetErrorInfo  +
push [ebp+arg_20]  +
mov eax [ebp+arg_8] +
push [ebp+arg_1C]  +
mov ecx [eax] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_4]  +
push dword ptr [esi+8]  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
mov eax [ebp+arg_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor edi edi +
cmp [ebp+0Ch] edi +
jz loc_1007530  +
push ebx  +
push esi  +
push 0FFFFFFFFh  +
push offset aWscript  +
push dword ptr [ebp+0Ch]  +
mov [ebp-8] edi +
xor ebx ebx +
mov [ebp-4] edi +
call sub_1001B8C  +
test eax eax +
jnz loc_100753A  +
test byte ptr [ebp+10h] 2 +
mov eax [ebp+8] +
mov eax [eax+2Ch] +
mov esi [eax+240h] +
jnz loc_1007553  +
test byte ptr [ebp+10h] 1 +
jz loc_10025D7  +
mov eax [esi] +
push esi  +
mov ebx esi +
call dword ptr [eax+4]  +
or edi 1 +
cmp [ebp+10h] edi +
jnz loc_100758A  +
mov eax [ebp+18h] +
xor edi edi +
cmp eax edi +
jnz loc_1007594  +
mov eax [ebp+14h] +
cmp eax edi +
jz loc_10025F8  +
mov [eax] ebx +
xor ebx ebx +
mov eax [ebp-8] +
test eax eax +
jnz loc_10075AB  +
mov eax [ebp-4] +
test eax eax +
jnz loc_10075B6  +
test ebx ebx +
jnz loc_10075C1  +
pop esi  +
mov eax edi +
pop ebx  +
pop edi  +
leave   +
retn 14h  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10022FD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov ecx [esi+8] +
push edi  +
mov edi [ebp+arg_4] +
lea eax [edi+eax+1] +
cmp eax ecx +
jb loc_1002680  +
add ecx edi +
mov eax ecx +
imul eax eax +
push ebx  +
push 64h  +
pop ebx  +
xor edx edx +
div  ebx +
add eax ecx +
mov [esi+8] eax +
add eax eax +
push eax  +
push dword ptr [esi]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapReAlloc  +
pop ebx  +
test eax eax +
jz loc_1007D0D  +
mov [esi] eax +
mov eax [esi] +
test eax eax +
jz loc_10026AF  +
cmp edi 1 +
jb loc_10026A4  +
lea ecx [edi+edi] +
push ecx  +
mov ecx [esi+4] +
push [ebp+arg_0]  +
lea eax [eax+ecx*2] +
push eax  +
call memcpy  +
add esp 0Ch +
add [esi+4] edi +
mov eax [esi+4] +
mov ecx [esi] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [eax+8] +
mov edx [ebp+arg_4] +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
mov eax [ebp+8] +
cmp ecx [eax+40h] +
jnb loc_1006FEE  +
mov eax [eax+24h] +
push esi  +
lea ecx [eax+ecx*2] +
xor esi esi +
xor edx edx +
cmp eax ecx +
ja loc_1002711  +
push edi  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov di [eax] +
inc edx  +
inc eax  +
inc eax  +
cmp di 0Ah +
jz loc_100272C  +
cmp eax ecx +
jbe loc_1002700  +
pop edi  +
mov eax [ebp+10h] +
test eax eax +
jz loc_100271A  +
mov [eax] esi +
mov eax [ebp+14h] +
pop esi  +
test eax eax +
jnz loc_1006FF8  +
xor eax eax +
pop ebp  +
retn 10h  +
***
xor edx edx +
inc esi  +
jmp loc_100270C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push esi  +
mov ebx ecx +
call sub_1002633  +
test eax eax +
jl loc_1002776  +
cmp edi 1 +
jb loc_1002774  +
lea eax [esi+edi*2] +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
cmp esi eax +
jnb loc_1002774  +
mov cx [esi] +
inc esi  +
inc esi  +
cmp cx 0Ah +
jnz loc_1002760  +
inc dword ptr [ebx+0Ch]  +
jmp loc_1002760  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:SysAllocString  +
mov [esi+2Ch] eax +
test eax eax +
jz loc_1006FDC  +
push edi  +
push eax  +
call ds:SysStringLen  +
and dword ptr [esi+28h] 0 +
mov edi eax +
mov eax [esi+2Ch] +
lea ecx [eax+edi*2] +
push ecx  +
push eax  +
lea ecx [esi+1Ch] +
call sub_10027EA  +
test eax eax +
jl loc_10027DF  +
mov [esi+40h] edi +
test edi edi +
jz loc_1006FE6  +
mov eax [esi] +
push 0  +
lea ecx [esi+44h] +
push ecx  +
dec edi  +
push edi  +
push esi  +
call dword ptr [eax+20h]  +
test eax eax +
jl loc_10027DF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100280F  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_100280F  +
cmp eax edx +
ja loc_100280F  +
mov [ecx+8] eax +
mov [ecx] eax +
mov [ecx+4] edx +
xor eax eax +
pop ebp  +
retn 8  +
mov eax 80070057h +
jmp loc_100280B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_1006FFF  +
cmp [ebp+arg_8] edi +
jz loc_1006FFF  +
push ebx  +
push esi  +
push 48h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_100288F  +
push edi  +
mov ecx eax +
call sub_100289E  +
mov esi eax +
cmp esi edi +
jz loc_1007009  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi+30h] eax +
cmp eax edi +
jz loc_1007013  +
mov eax [ebp+arg_4] +
cmp eax edi +
jnz loc_100701D  +
mov eax [ebp+arg_8] +
mov [eax] esi +
xor esi esi +
xor ebx ebx +
test esi esi +
jnz loc_1007079  +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
leave   +
retn 0Ch  +
xor esi esi +
jmp loc_100284E  +
***
test ebx ebx +
jge loc_1002875  +
jmp loc_100287E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+1Ch] +
call sub_10028F6  +
push esi  +
push [ebp+arg_0]  +
lea edi [esi+8] +
mov ecx edi +
call sub_1001B1A  +
or dword ptr [esi+40h] 0FFFFFFFFh +
xor eax eax +
or dword ptr [esi+44h] 0FFFFFFFFh +
mov dword ptr [edi] offset off_1001888 +
mov [esi+2Ch] eax +
mov [esi+28h] eax +
mov [esi+30h] eax +
mov [esi+38h] eax +
mov [esi+3Ch] eax +
pop edi  +
mov dword ptr [esi] offset off_10018E0 +
mov dword ptr [esi+4] offset off_1001890 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100290D  +
and dword ptr [esi+0Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax+8] ecx +
mov [eax] ecx +
mov [eax+4] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_4] edi +
jz loc_1002965  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov eax [eax+24h] +
push eax  +
lea ecx [esi+30h] +
call sub_1002736  +
cmp eax edi +
jl loc_1002990  +
lea ebx [esi+40h] +
push ebx  +
push [ebp+arg_4]  +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_10029B6  +
cmp eax edi +
jl loc_1002990  +
push dword ptr [ebx]  +
mov ecx [ebp+arg_0] +
call sub_100299C  +
cmp [esi+34h] edi +
jz loc_100298E  +
mov ecx [esi+30h] +
mov eax [esi+28h] +
mov edx [eax] +
push edi  +
push edi  +
push 82h  +
push 1  +
push dword ptr [esi+20h]  +
push edi  +
push edi  +
push edi  +
push ecx  +
push eax  +
call dword ptr [edx+14h]  +
cmp eax edi +
jl loc_10074FD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+38h] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_10079C8  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10079D2  +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_10079DC  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1002A1E  +
push 0  +
mov ecx eax +
call sub_1002A27  +
test eax eax +
jz loc_10079E6  +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_C] +
mov [eax+24h] ecx +
add ecx edx +
mov [eax+1Ch] ebx +
mov [eax+20h] edi +
mov [eax+28h] edx +
mov [eax+2Ch] ecx +
mov [esi] eax +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 14h  +
xor eax eax +
jmp loc_10029F4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
push esi  +
push [ebp+arg_0]  +
lea edi [esi+8] +
mov ecx edi +
mov dword ptr [esi+4] offset off_1002A68 +
call sub_1001B1A  +
and dword ptr [esi+1Ch] 0 +
and dword ptr [esi+20h] 0 +
mov dword ptr [edi] offset off_10018A8 +
pop edi  +
mov dword ptr [esi] offset off_10018C0 +
mov dword ptr [esi+4] offset off_10018B0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push esi  +
mov esi [ebp+14h] +
xor ecx ecx +
push edi  +
mov edi [ebp+10h] +
cmp esi ecx +
jz loc_100797D  +
push ebx  +
mov [ebp-1Ch] ecx +
mov [ebp-18h] ecx +
mov [esi] ecx +
cmp eax ecx +
jz loc_1002B20  +
xor edx edx +
cmp dx [eax] +
jz loc_1002B20  +
cmp edi ecx +
jz loc_1002AC3  +
cmp [edi] cx +
jnz loc_1002AC3  +
xor edi edi +
lea ecx [ebp-1Ch] +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
call sub_1002B37  +
mov ebx eax +
test ebx ebx +
jl loc_1002B25  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push offset dword_100239C  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jl loc_1002B25  +
xor ebx ebx +
cmp edi ebx +
jnz loc_1007987  +
mov eax [ebp-18h] +
mov [esi] eax +
mov [ebp-18h] ebx +
mov eax [ebp-1Ch] +
test eax eax +
jz loc_1002B0D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
pop ebx  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn 10h  +
***
mov ebx 80070057h +
mov eax [ebp-18h] +
test eax eax +
jnz loc_10079BD  +
jmp loc_1002B00  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+rclsid]  +
push [ebp+lpWideCharStr]  +
call ds:CLSIDFromProgID  +
mov esi eax +
test esi esi +
jl loc_1007914  +
push [ebp+ppv]  +
push offset riid  +
push 15h  +
push 0  +
push [ebp+rclsid]  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_100795E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_101900C +
mov al [eax+20h] +
mov ecx [ebp+arg_0] +
mov [ecx] al +
xor eax eax +
pop ebp  +
retn 4  +
***
mov word ptr [ecx+242E676Dh] es +
inc edx  +
mov edx 9EF2D4F9h +
ficom  dword ptr [edi] +
jbe loc_1002B75  +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_10078F6  +
mov eax [ebp+8] +
mov edx [eax+30h] +
mov [ecx] edx +
mov eax [eax+30h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_1007A10  +
and dword ptr [esi] 0 +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push 1  +
push dword ptr [eax+28h]  +
call ds:SafeArrayGetUBound  +
test eax eax +
jl loc_1002C47  +
mov eax [ebp+0Ch] +
inc eax  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov eax [ebp+8] +
push dword ptr [ebp+18h]  +
add eax 0Ch +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100246B  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+28h]  +
mov eax [ebp+8] +
push dword ptr [ebp+24h]  +
add eax 0Ch +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_100250B  +
pop ebp  +
retn 24h  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1002CB8  +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
add eax 0Ch +
push dword ptr [ebp+0Ch]  +
push eax  +
call sub_10023E0  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1007900  +
push ebx  +
push 0Ah  +
lea eax [ebp-44h] +
push eax  +
mov eax [esi+40h] +
movzx eax word ptr [eax+0Eh] +
push eax  +
call _itow  +
mov ebx eax +
add esp 0Ch +
lea eax [ebp-44h] +
push eax  +
call ds:lstrlenW  +
push 2Eh  +
lea eax [ebx+eax*2] +
pop ecx  +
mov [eax] cx +
add eax 2 +
push 0Ah  +
push eax  +
mov eax [esi+40h] +
movzx eax word ptr [eax+0Ch] +
push eax  +
call _itow  +
add esp 0Ch +
lea eax [ebp-44h] +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
pop ebx  +
test eax eax +
jz loc_100790A  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:MsgWaitForMultipleObjects +
push edi  +
push [ebp+dwWakeMask]  +
lea eax [ebp+pHandles] +
push [ebp+dwMilliseconds]  +
push [ebp+fWaitAll]  +
push eax  +
push 1  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_1002DAB  +
mov edi ds:PeekMessageA +
cmp eax 1 +
jz loc_1006E4D  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
cmp eax 0FFFFFFFFh +
jz loc_1002DAB  +
jmp loc_1002DA2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push esi  +
push edi  +
lea edx [ebp+lpClassName] +
mov eax offset ClassName +
push edx  +
mov esi ecx +
mov ecx hInstance +
push eax  +
push ecx  +
mov [ebp-34h] ecx +
mov [ebp-20h] eax +
call ds:GetClassInfoA  +
xor edi edi +
test eax eax +
jnz loc_1002E1B  +
lea eax [ebp+lpClassName] +
push eax  +
mov [ebp+lpClassName] edi +
mov dword ptr [ebp-40h] offset loc_10015E9 +
mov [ebp-3Ch] edi +
mov [ebp-38h] edi +
mov [ebp-30h] edi +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
mov [ebp-24h] edi +
call ds:RegisterClassA  +
test ax ax +
jz loc_1006F26  +
push esi  +
push hInstance  +
push edi  +
push edi  +
push 1  +
push 1  +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-20h]  +
push edi  +
call ds:CreateWindowExA  +
mov [esi] eax +
cmp eax edi +
jz loc_1006F26  +
push ebx  +
push dword ptr [esi+1Ch]  +
mov [esi+0Ch] edi +
call ds:SetEvent  +
mov ebx ds:GetMessageA +
push edi  +
push edi  +
push dword ptr [esi]  +
lea eax [ebp+Msg] +
push eax  +
call ebx  +
cmp eax edi +
jnz loc_1003C43  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_1002DBD  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push esi  +
call sub_1003D73  +
push offset dword_1002FD0  +
mov eax offset dword_1002FCC +
call sub_1002FE9  +
mov eax offset dword_1002FC4 +
mov [esp+4Ch+var_4C] offset dword_1002FC8 +
call sub_1002FE9  +
pop ecx  +
lea eax [ebp+StartupInfo] +
xor esi esi +
push eax  +
mov [ebp+StartupInfo.dwFlags] esi +
call ds:GetStartupInfoA  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1002FBE  +
movzx eax [ebp+StartupInfo.wShowWindow] +
push eax  +
push esi  +
push esi  +
push esi  +
call ds:GetModuleHandleA  +
push eax  +
call sub_100300D  +
mov esi eax +
push offset dword_1002FD8  +
mov eax offset dword_1002FD4 +
call sub_1002FE9  +
mov eax offset dword_1002FDC +
mov [esp+4Ch+var_4C] offset dword_1002FE0 +
call sub_1002FE9  +
pop ecx  +
push esi  +
call ds:ExitProcess  +
int 3  +
push 0Ah  +
pop eax  +
jmp loc_1002F83  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
cmp esi [ebp+arg_0] +
jnb loc_1003005  +
mov eax [esi] +
test eax eax +
jnz loc_1006231  +
add esi 4 +
jmp loc_1002FF1  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push 9C4h  +
xor ebx ebx +
push ebx  +
call ds:GetModuleHandleA  +
push eax  +
call sub_1005350  +
test eax eax +
jz loc_1006253  +
push ebx  +
call ds:CoInitialize  +
cmp eax ebx +
mov [ebp+var_4] eax +
jl loc_100625B  +
push esi  +
push edi  +
mov [ebp+var_C] ebx +
cmp byte_1019001 bl +
jz loc_100626E  +
call ds:GetCommandLineW  +
mov edi eax +
push edi  +
call ds:lstrlenW  +
mov esi eax +
inc esi  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1006262  +
push edi  +
push esi  +
push eax  +
call sub_100502D  +
add esp 0Ch +
push ebx  +
push [ebp+var_8]  +
call sub_10041BB  +
xor ecx ecx +
push 4  +
inc eax  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_10062B4  +
push edi  +
push [ebp+var_8]  +
call sub_10041BB  +
mov [ebp+cchWideChar] eax +
mov [edi+eax*4] ebx +
cmp eax 2 +
jnz loc_10030EF  +
mov esi [edi+4] +
movzx eax word ptr [esi] +
push 2Dh  +
pop ecx  +
cmp cx ax +
jz loc_10062C0  +
push 2Fh  +
pop ecx  +
cmp cx ax +
jz loc_10062C0  +
push [ebp+cchWideChar]  +
mov ecx [ebp+pUnk] +
call sub_1003134  +
mov [ebp+var_C] eax +
cmp edi ebx +
jz loc_1003108  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
push [ebp+var_8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
call ds:CoUninitialize  +
call sub_10056DB  +
cmp [ebp+var_4] ebx +
pop edi  +
pop esi  +
jl loc_1006317  +
mov eax [ebp+var_C] +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 288h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
lea ecx [ebp+var_288] +
call sub_10049F4  +
lea ecx [ebp+var_288] +
call sub_1003E02  +
test eax eax +
jz loc_1006238  +
call sub_1004BF0  +
test eax eax +
jl loc_100624B  +
push 0  +
push edi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_288] +
push esi  +
call sub_10031AC  +
mov esi eax +
lea ecx [ebp+var_288] +
call sub_1005C67  +
mov eax esi +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 578h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_8] +
lea ecx [ebp+var_34C] +
mov [ebp+var_574] eax +
call sub_1004ED5  +
dec [ebp+arg_4]  +
add edi 4 +
mov [ebp+var_578] edi +
call sub_1003E1B  +
test eax eax +
jz loc_10064E7  +
lea edi [esi+260h] +
push edi  +
call sub_1004E69  +
test eax eax +
jl loc_100320C  +
mov ecx [edi] +
call sub_1003EF9  +
cmp byte_1019001 0 +
push ebx  +
jz loc_100650D  +
push 105h  +
xor eax eax +
lea edi [esi+2Ch] +
push edi  +
mov [esi+234h] ax +
push hInstance  +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_10064FA  +
xor eax eax +
cmp ax [esi+234h] +
jnz loc_10064FA  +
xor ebx ebx +
lea eax [esi+10h] +
push eax  +
lea eax [esi+0Ch] +
push eax  +
push edi  +
call sub_1004B39  +
cmp eax ebx +
mov ecx esi +
jl loc_1006555  +
call sub_1004809  +
cmp [ebp+arg_4] ebx +
jz loc_1006570  +
push [ebp+var_578]  +
lea ecx [ebp+var_34C] +
push [ebp+arg_4]  +
call sub_1003F18  +
push 80000002h  +
lea ecx [ebp+var_34C] +
call sub_1004550  +
cmp eax ebx +
jl loc_100657E  +
mov edi 80000001h +
push edi  +
lea ecx [ebp+var_34C] +
call sub_1004550  +
cmp eax ebx +
jl loc_100657E  +
mov al [ebp+var_33B] +
lea ecx [ebp+var_34C] +
mov [esi+20h] al +
call sub_1004F83  +
cmp eax ebx +
jl loc_1006588  +
mov al [ebp+var_33B] +
mov cl [ebp+var_335] +
mov [esi+20h] al +
mov eax [ebp+var_34C] +
mov [esi+8] eax +
mov al [ebp+var_348] +
mov [esi+21h] al +
mov al [ebp+var_339] +
mov [esi+23h] al +
mov al [ebp+var_337] +
mov [esi+24h] al +
mov [esi+25h] cl +
test al al +
jnz loc_1006597  +
mov al [esi+27h] +
test al al +
jnz loc_10065AD  +
cmp [ebp+var_11E] 0 +
jnz loc_10065B6  +
cmp [ebp+var_346] 0 +
jz loc_100333E  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
cmp [ebp+var_11F] 0 +
jnz loc_10065DA  +
xor al al +
cmp [ebp+var_120] al +
jnz loc_100662F  +
cmp [ebp+var_11D] 0 +
jnz loc_1006655  +
mov ecx [ebp+var_128] +
cmp ecx ebx +
jz loc_10066A6  +
cmp word ptr [ebp+var_330] bx +
jz loc_10066AE  +
cmp [ebp+var_114] ebx +
jnz loc_10066F2  +
push [ebp+var_574]  +
mov eax [ebp+var_124] +
push ebx  +
push [ebp+var_11C]  +
add eax 4 +
push eax  +
dec ecx  +
push ecx  +
lea eax [ebp+var_330] +
push eax  +
mov ecx esi +
call sub_1001387  +
cmp eax ebx +
jl loc_10066C0  +
mov esi [esi+1Ch] +
lea ecx [ebp+var_34C] +
call sub_10058BF  +
mov eax esi +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn 10h  +
***
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1019001 bl +
jz loc_1008083  +
push [ebp+phkResult]  +
push [ebp+samDesired]  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jnz loc_100806E  +
xor eax eax +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor eax eax +
test edx edx +
jz loc_10033DD  +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_10033DD  +
cmp cx [ebp+arg_4] +
jz loc_100345E  +
inc edx  +
inc edx  +
jmp loc_100344C  +
mov eax edx +
jmp loc_100345A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+27Dh] 0 +
jz loc_10034B9  +
cmp byte ptr [esi+27Ch] 0 +
jnz loc_10034B9  +
call sub_1003E8E  +
test eax eax +
jl loc_10034B4  +
lea eax [esi+240h] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call sub_10045DE  +
test eax eax +
jl loc_10034B4  +
lea eax [esi+24Ch] +
push eax  +
push esi  +
call sub_10034C5  +
test eax eax +
jl loc_10034B4  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax 8007000Eh +
jmp loc_10034B4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 20h  +
call ??2@YAPAXI@Z  +
xor ebx ebx +
pop ecx  +
cmp eax ebx +
jz loc_1003570  +
mov ecx eax +
call sub_1003EB2  +
mov esi eax +
cmp esi ebx +
jz loc_1006F45  +
mov eax [ebp+arg_0] +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov [esi+8] eax +
call ds:CreateEventA  +
mov [esi+1Ch] eax +
cmp eax ebx +
jz loc_1006F4F  +
lea eax [esi+14h] +
push eax  +
push ebx  +
push esi  +
push offset StartAddress  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov [esi+10h] eax +
cmp eax ebx +
jz loc_1006F4F  +
push 0FFh  +
push 0FFFFFFFFh  +
push ebx  +
push dword ptr [esi+1Ch]  +
call sub_1002D76  +
push dword ptr [esi+1Ch]  +
call ds:CloseHandle  +
mov eax [esi+0Ch] +
cmp eax ebx +
mov [esi+1Ch] ebx +
jg loc_1006F6A  +
mov edi eax +
cmp edi ebx +
jl loc_100355F  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor esi esi +
xor edi edi +
cmp esi ebx +
jnz loc_1006F79  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor esi esi +
jmp loc_10034E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_10063AA  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
jbe loc_10063AA  +
mov esi [ebp+arg_8] +
cmp esi edi +
jz loc_10063C8  +
mov ecx edx +
cmp [ecx] di +
jz loc_10035B3  +
inc ecx  +
inc ecx  +
dec ebx  +
jnz loc_10035A9  +
cmp ebx edi +
jz loc_10063C8  +
movzx eax word ptr [esi] +
mov [ecx] ax +
inc ecx  +
inc ecx  +
inc esi  +
inc esi  +
cmp ax di +
jz loc_10035CD  +
dec ebx  +
jnz loc_10035BB  +
xor eax eax +
cmp ebx edi +
jz loc_10063CF  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jz loc_100751C  +
call ds:GetUserDefaultLCID  +
cmp eax 0FFFFFFFFh +
jz loc_1007526  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
test ecx ecx +
jz loc_10075CC  +
mov eax [ebp+8] +
mov eax [eax+28h] +
mov eax [eax+254h] +
test eax eax +
jnz loc_10075D6  +
mov eax 80004001h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:GetProcessHeap +
test eax eax +
jnz loc_1007CF2  +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
add eax eax +
push eax  +
push 0  +
call edi  +
push eax  +
call ds:HeapAlloc  +
and dword ptr [esi+4] 0 +
pop edi  +
mov [esi] eax +
pop esi  +
test eax eax +
jz loc_1007D03  +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
xor esi esi +
push edi  +
cmp byte_1019001 bl +
jz loc_1007FD3  +
push [ebp+lpFilePart]  +
push [ebp+lpBuffer]  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
call ds:GetFullPathNameW  +
test eax eax +
jz loc_1007FB8  +
mov eax esi +
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 10h  +
***
mov eax ecx +
or dword ptr [eax] 0FFFFFFFFh +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push ebx  +
push esi  +
push edi  +
mov edx ecx +
push 4  +
pop ecx  +
mov edi offset dword_1003758 +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_10074DB  +
push 4  +
pop ecx  +
mov edi offset loc_1003778 +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_1003788  +
push 4  +
pop ecx  +
mov edi offset dword_1003768 +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_10074E3  +
push dword ptr [ebp+0Ch]  +
mov ecx edx +
push eax  +
call sub_1001AB5  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
adc [edi+edx*4] edi +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
lea ecx [edx-8] +
lea eax [edx-0Ch] +
neg eax  +
sbb eax eax +
and eax ecx +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
lea eax [edx-0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_100374E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 82Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpWideCharStr] +
push esi  +
push edi  +
mov [ebp+lpData] ecx +
lea ecx [ebp+hKey] +
push ecx  +
mov edi 20019h +
push edi  +
push eax  +
mov esi 80000000h +
push esi  +
call sub_10033E6  +
test eax eax +
jl loc_1003881  +
push ebx  +
push 400h  +
lea eax [ebp+WideCharStr] +
push eax  +
push 0  +
push [ebp+hKey]  +
call sub_10038B5  +
push [ebp+hKey]  +
mov ebx ds:RegCloseKey +
mov [ebp+var_828] eax +
call ebx  +
mov eax [ebp+var_828] +
test eax eax +
jl loc_1003880  +
push offset aScriptengine  +
lea eax [ebp+WideCharStr] +
push 40Eh  +
push eax  +
call sub_100357C  +
add esp 0Ch +
lea eax [ebp+hKey] +
push eax  +
push edi  +
lea eax [ebp+WideCharStr] +
push eax  +
push esi  +
call sub_10033E6  +
test eax eax +
jl loc_1003880  +
push [ebp+cchWideChar]  +
push [ebp+lpData]  +
push 0  +
push [ebp+hKey]  +
call sub_10038B5  +
push [ebp+hKey]  +
mov esi eax +
call ebx  +
test esi esi +
jl loc_10069CC  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1019001 bl +
jz loc_1008181  +
lea eax [ebp+lpValueName] +
push eax  +
mov eax [ebp+cchWideChar] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_100394F  +
test eax eax +
jl loc_1008156  +
mov eax [ebp+lpValueName] +
mov esi [ebp+lpData] +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push esi  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
cmp eax ebx +
jnz loc_1008160  +
cmp [ebp+Type] 1 +
jnz loc_1008175  +
mov eax [ebp+cbData] +
shr eax 1 +
cmp [esi+eax*2-2] bx +
jnz loc_1008156  +
xor eax eax +
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1006FB4  +
mov eax [ebp+arg_0] +
jb loc_100396C  +
cmp eax 0FFFFFFFFh +
ja loc_1006FB4  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov esi ecx +
test eax eax +
jnz loc_10069D3  +
push 2Eh  +
push dword ptr [esi+23Ch]  +
call sub_100343E  +
test eax eax +
jz loc_10069DA  +
push 100h  +
push eax  +
lea ecx [ebp+var_204] +
call sub_10037AB  +
test eax eax +
jl loc_10039E8  +
lea edi [ebp+var_204] +
lea eax [esi+244h] +
push eax  +
push esi  +
push edi  +
call sub_10039FD  +
test eax eax +
jl loc_10069FA  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
push 54h  +
mov [ebp+var_20] eax +
mov [ebp+var_1C] edi +
mov [ebp+ppv] edi +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_1003B7D  +
push edi  +
mov ecx eax +
call sub_1003BB9  +
mov esi eax +
cmp esi edi +
jz loc_10075E5  +
push 1000h  +
lea ecx [esi+30h] +
call sub_1003641  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
mov eax [ebp+arg_4] +
mov [esi+2Ch] eax +
lea eax [ebp+rclsid] +
push eax  +
push ebx  +
call ds:CLSIDFromString  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 17h  +
push 0  +
lea eax [ebp+rclsid] +
push eax  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea ebx [esi+24h] +
push ebx  +
push offset dword_1003B8C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
mov eax [ebp+ppv] +
mov edx [eax] +
lea ecx [esi+28h] +
push ecx  +
push offset dword_1003B9C  +
push eax  +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
mov eax [ebx] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
mov eax [esi+28h] +
mov ecx [eax] +
push eax  +
mov [ebp+var_1C] 1 +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
mov eax [ebx] +
mov ecx [eax] +
push 2  +
push offset aWscript  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
mov eax [ebx] +
mov ecx [eax] +
push 2  +
push offset aWsh  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
mov eax [ebx] +
mov ecx [eax] +
push 5  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_1003B55  +
mov eax [ebp+arg_4] +
mov al [eax+23h] +
mov [esi+50h] al +
test al al +
jnz loc_10075EF  +
inc dword_1019014  +
mov eax dword_1019014 +
mov [esi+20h] eax +
mov eax [ebp+var_20] +
mov [eax] esi +
xor esi esi +
xor edi edi +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1003B62  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test esi esi +
jnz loc_1007604  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 0Ch  +
xor esi esi +
jmp loc_1003A3D  +
***
mov edi eax +
test edi edi +
jl loc_1003B55  +
jmp loc_1003B3E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push esi  +
push [ebp+arg_0]  +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1001B1A  +
lea ecx [esi+30h] +
mov dword ptr [esi] offset off_10014F8 +
mov dword ptr [esi+4] offset off_1002E94 +
mov dword ptr [esi+8] offset off_1002E80 +
mov dword ptr [edi] offset off_1002E78 +
call sub_1003C1F  +
xor eax eax +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
mov [esi+40h] eax +
mov [esi+44h] eax +
mov [esi+48h] eax +
mov [esi+4Ch] eax +
mov [esi+50h] al +
mov [esi+51h] al +
mov [esi+20h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1003C36  +
and dword ptr [esi+0Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+8] ecx +
mov [eax+4] ecx +
retn   +
***
cmp eax 0FFFFFFFFh +
jz loc_1002E65  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
jmp loc_1002E53  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1019004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1006364  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1003DF6  +
test dword_1019004 ebx +
jz loc_1003DF6  +
mov dword_1019004 esi +
not esi  +
mov dword_1019008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_1003DE3  +
***
xor eax eax +
cmp [ecx+27Dh] al +
jz locret_1003E15  +
cmp [ecx+27Ch] al +
jnz locret_1003E15  +
inc eax  +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
cmp byte_1019000 bl +
jz loc_10064C1  +
push esi  +
push offset LibFileName  +
call ds:LoadLibraryA  +
mov esi eax +
cmp esi ebx +
jz loc_10064C6  +
push offset aHeapsetinforma  +
push esi  +
call ds:GetProcAddress  +
cmp eax ebx +
jz loc_1003E5B  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call eax  +
mov ebx eax +
push esi  +
call ds:FreeLibrary  +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
mov esi ecx +
mov [ebp+var_4] ebx +
cmp [esi+23h] bl +
jnz loc_10068E4  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn   +
***
xor eax eax +
push esi  +
mov esi ecx +
mov [esi+10h] eax +
mov [esi] eax +
mov [esi+1Ch] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
call ds:GetCurrentThreadId  +
mov [esi+18h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov esi [ebx] +
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongA  +
mov [esi] edi +
jmp loc_100160F  +
***
push edi  +
call ds:DefWindowProcA  +
jmp loc_1001625  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+8] +
push eax  +
push esi  +
call ds:CoRegisterMessageFilter  +
test eax eax +
jl loc_1003F11  +
mov byte ptr [esi+4] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+224h] eax +
mov eax [ebp+arg_4] +
mov [ecx+228h] eax +
pop ebp  +
retn 8  +
***
lea ecx [eax-0Ch] +
add eax 0FFFFFFF4h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1001C94  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push offset off_1019064  +
push esi  +
lea ebx [esi+0Ch] +
xor edi edi +
push edi  +
mov ecx ebx +
mov dword ptr [esi+4] offset off_1003FB0 +
call sub_1005242  +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
mov [esi+30h] edi +
mov [esi+38h] edi +
mov [esi+34h] edi +
mov [esi+40h] edi +
mov [esi+44h] edi +
mov [esi+3Ch] edi +
pop edi  +
mov dword ptr [esi] offset off_1001524 +
mov dword ptr [esi+4] offset off_1002F00 +
mov dword ptr [esi+8] offset off_1002EF0 +
mov dword ptr [esi+48h] 1 +
mov eax esi +
pop esi  +
mov dword ptr [ebx] offset off_1001748 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword_101901C +
test eax eax +
jnz loc_1004032  +
push esi  +
call ds:GetUserDefaultLCID  +
mov esi eax +
mov ecx esi +
and ecx 3FFh +
xor edx edx +
movzx eax cx +
inc edx  +
cmp dx ax +
jz loc_1007D3A  +
push 0Dh  +
pop edx  +
cmp dx ax +
jz loc_1007D3A  +
cmp byte_1019000 0 +
jz loc_1007D59  +
mov eax hInstance +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1808h +
call sub_100440A  +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [esi] ebx +
push edi  +
mov [ebp+var_1808] ebx +
cmp byte_1019001 bl +
jz loc_1007F6F  +
push 800h  +
lea eax [ebp+WideCharStr] +
push eax  +
push [ebp+uID]  +
push dword_101901C  +
call ds:LoadStringW  +
mov [ebp+var_1808] eax +
cmp eax ebx +
jz loc_10040B4  +
lea eax [ebp+WideCharStr] +
push eax  +
call ds:SysAllocString  +
mov [esi] eax +
cmp eax ebx +
jz loc_1007FB1  +
mov eax [ebp+var_1808] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
cmp byte_1019001 bl +
jz loc_10080FD  +
push [ebp+phkResult]  +
push ebx  +
push [ebp+samDesired]  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
cmp eax ebx +
jnz loc_10080E8  +
xor eax eax +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 10h  +
***
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1019004 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax-41h] +
cmp cx 19h +
jbe loc_100419F  +
pop ebp  +
retn 4  +
add eax 20h +
jmp loc_100419B  +
***
test bl bl +
jnz loc_10041FE  +
cmp [ebp+arg_4] ecx +
jz loc_10041B2  +
xor eax eax +
mov [esi] ax +
inc esi  +
inc esi  +
jmp loc_1004205  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
mov [ebp+var_4] ecx +
cmp [esi] cx +
jz loc_100421C  +
push ebx  +
push edi  +
movzx eax word ptr [esi] +
cmp ax 20h +
jz loc_1004235  +
cmp ax 9 +
jz loc_1004235  +
cmp [esi] cx +
jz loc_100421A  +
xor bl bl +
mov edi esi +
movzx eax word ptr [esi] +
cmp ax 20h +
jz loc_10041A4  +
cmp ax 9 +
jz loc_10041A4  +
cmp ax 22h +
jz loc_1004224  +
inc esi  +
inc esi  +
cmp [esi] cx +
jnz loc_10041E9  +
mov eax [ebp+arg_4] +
cmp eax ecx +
jz loc_1004212  +
mov edx [ebp+var_4] +
mov [eax+edx*4] edi +
inc [ebp+var_4]  +
cmp [esi] cx +
jnz loc_10041D1  +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 8  +
test bl bl +
setz bl  +
cmp [ebp+arg_4] ecx +
jz loc_10041FE  +
mov eax esi +
lea edx [eax+2] +
jmp loc_1004239  +
inc esi  +
inc esi  +
jmp loc_10041D1  +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1004239  +
sub eax edx +
sar eax 1 +
lea ecx [esi+2] +
push ecx  +
inc eax  +
push eax  +
push esi  +
call sub_100502D  +
add esp 0Ch +
dec esi  +
dec esi  +
xor ecx ecx +
jmp loc_10041FE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
movzx eax word ptr [edx] +
push esi  +
push edi  +
mov ecx edx +
mov esi edx +
test ax ax +
jz loc_1004290  +
movzx eax ax +
cmp ax 2Fh +
jz loc_10042D4  +
cmp ax 5Ch +
jz loc_10042D4  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100427A  +
cmp [ebp+arg_8] 0 +
mov edi [ebp+arg_4] +
jz loc_100429E  +
xor eax eax +
mov [edi] ax +
cmp ecx edx +
jz loc_1006BB2  +
sub ecx edx +
shr ecx 1 +
mov eax ecx +
jz loc_1006BCD  +
lea ecx [eax+1] +
cmp ecx [ebp+arg_8] +
jnb loc_10042CE  +
lea esi [eax+eax] +
push esi  +
push edx  +
push edi  +
call memcpy  +
add esp 0Ch +
xor eax eax +
mov [esi+edi] ax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov ecx esi +
jmp loc_1004286  +
***
lea eax [ebp+String] +
cmp [ebp+Type] ebx +
jbe loc_1004349  +
cmp [ebp+Type] 2 +
ja loc_10083B8  +
push 0FFFFFFFFh  +
push offset a0  +
lea eax [ebp+String] +
push eax  +
mov byte ptr [esi] 1 +
call sub_1001B8C  +
test eax eax +
jz loc_1004345  +
push 0FFFFFFFFh  +
push offset aNo  +
lea eax [ebp+String] +
push eax  +
call sub_1001B8C  +
test eax eax +
jz loc_1004345  +
push 0FFFFFFFFh  +
push offset aFalse  +
lea eax [ebp+String] +
push eax  +
call sub_1001B8C  +
test eax eax +
jz loc_1004345  +
mov byte ptr [esi] 1 +
xor eax eax +
jmp loc_10043E0  +
mov [esi] bl +
jmp loc_100433E  +
mov eax 80040153h +
jmp loc_10043E0  +
***
mov edi edi +
sub ecx eax +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jnb loc_100442B  +
sub eax 1000h +
test [eax] eax +
jmp loc_100441E  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
xor eax eax +
push esi  +
mov esi ecx +
mov edx [esi+224h] +
mov ecx [esi+228h] +
push edi  +
mov [ebp+lpString] eax +
mov [ebp+var_14] eax +
mov [ebp+var_24] ecx +
mov [ebp+var_20] eax +
mov [ebp+var_3] al +
mov [ebp+var_2] al +
mov [ebp+var_4] al +
mov [ebp+var_1] al +
mov [ebp+var_5] 1 +
mov [ebp+var_10] edx +
mov [ebp+var_18] ecx +
cmp edx 1 +
jb loc_1004505  +
mov ecx [ebp+var_18] +
dec [ebp+var_10]  +
add [ebp+var_18] 4 +
mov edi [ecx] +
cmp [ebp+var_3] al +
jnz loc_100452E  +
movzx ecx word ptr [edi] +
cmp cx 2Fh +
jnz loc_1004515  +
cmp [edi+2] cx +
jnz loc_1004515  +
lea ebx [edi+4] +
cmp [ebx] ax +
jz loc_1007116  +
lea eax [ebp+lpString] +
push eax  +
call sub_10055CD  +
cmp eax 4Ah +
jg loc_10054B4  +
jz loc_100722B  +
sub eax 2Fh +
jz loc_100453F  +
sub eax 10h +
jz loc_100721F  +
sub eax 3 +
jnz loc_1007127  +
xor eax eax +
cmp [ebp+var_2] al +
jnz loc_1007211  +
mov byte ptr [esi+11h] 1 +
mov [ebp+var_2] 1 +
mov byte ptr [esi+12h] 1 +
inc [ebp+var_20]  +
xor eax eax +
cmp [ebp+var_10] 1 +
jnb loc_1004480  +
mov eax [ebp+var_14] +
mov [esi+224h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp [ebp+var_5] al +
jz loc_100452E  +
cmp cx 2Fh +
jz loc_100711F  +
cmp cx 2Dh +
jz loc_1007158  +
mov ecx [ebp+var_24] +
add [ebp+var_24] 4 +
inc [ebp+var_14]  +
mov [ecx] edi +
mov [ebp+var_5] al +
jmp loc_10044FB  +
mov [ebp+var_3] 1 +
jmp loc_10044F6  +
***
test eax eax +
jge loc_10044F6  +
jmp loc_1004510  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push offset aSoftwareMicros  +
push [ebp+hKey]  +
mov esi ecx +
call sub_10040D0  +
test eax eax +
jl loc_10045CE  +
push ebx  +
push edi  +
lea eax [ebp+Data] +
push eax  +
push offset WideCharStr  +
push [ebp+hKey]  +
call sub_1004951  +
mov edi eax +
mov ebx 80070002h +
test edi edi +
jge loc_1007084  +
cmp edi ebx +
jnz loc_10045C1  +
mov byte ptr [esi+4] 0 +
and dword ptr [esi] 0 +
lea eax [esi+6] +
push eax  +
push offset aDisplaylogo  +
push [ebp+hKey]  +
call sub_1004369  +
mov edi eax +
test edi edi +
jge loc_10045D3  +
cmp edi ebx +
jnz loc_10045C1  +
mov byte ptr [esi+7] 0 +
xor edi edi +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov byte ptr [esi+7] 1 +
jmp loc_10045C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_218] eax +
mov eax [ebp+arg_C] +
xor ebx ebx +
push 44h  +
mov [ebp+var_21C] eax +
mov [ebp+pptlib] ebx +
mov [ebp+var_210] ebx +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_100474F  +
push ebx  +
mov ecx eax +
call sub_10051EC  +
mov esi eax +
cmp esi ebx +
jz loc_10078E1  +
lea ebx [edi+2Ch] +
mov [esi+40h] edi +
mov edi ds:SysAllocString +
push ebx  +
call edi  +
mov [esi+28h] eax +
test eax eax +
jz loc_10078E1  +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push ebx  +
call sub_1004261  +
lea eax [ebp+var_20C] +
push eax  +
call edi  +
mov [esi+2Ch] eax +
test eax eax +
jz loc_10078E1  +
mov eax dword_1019024 +
inc eax  +
push eax  +
lea edi [esi+24h] +
push edi  +
call sub_1004043  +
cmp dword ptr [edi] 0 +
jz loc_10078E1  +
lea eax [ebp+pptlib] +
push eax  +
push ebx  +
call ds:LoadTypeLib  +
mov edi eax +
test edi edi +
jl loc_1004714  +
push [ebp+pptlib]  +
lea ecx [esi+8] +
call sub_100479C  +
mov edi eax +
test edi edi +
jl loc_1004714  +
lea eax [ebp+var_210] +
push eax  +
push [ebp+var_218]  +
push [ebp+arg_4]  +
call sub_1005080  +
mov edi eax +
test edi edi +
jl loc_1004714  +
push [ebp+pptlib]  +
mov ecx [ebp+var_210] +
call sub_100475B  +
mov edi eax +
test edi edi +
jl loc_1004714  +
mov eax [ebp+var_210] +
mov ecx [eax] +
lea edx [esi+30h] +
push edx  +
push offset sub_1001CAC  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jl loc_1004714  +
mov eax [ebp+var_21C] +
mov [eax] esi +
xor esi esi +
xor edi edi +
mov eax [ebp+pptlib] +
test eax eax +
jz loc_1004724  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_210] +
test eax eax +
jz loc_1004734  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test esi esi +
jnz loc_10078EB  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 10h  +
xor esi esi +
jmp loc_1004633  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov ecx [esi+2Ch] +
add ecx 8 +
call sub_100479C  +
test eax eax +
jl loc_1004792  +
mov ecx [esi+30h] +
push [ebp+arg_0]  +
add ecx 8 +
call sub_100479C  +
test eax eax +
jl loc_1004792  +
push [ebp+arg_0]  +
lea ecx [esi+0Ch] +
call sub_100479C  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
mov edx [esi+14h] +
push dword ptr [edx+14h]  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_10047FF  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
test edi edi +
jl loc_10084C2  +
mov eax [esi+14h] +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
add eax 1Ch +
push eax  +
push [ebp+var_4]  +
push ecx  +
call dword ptr [edx+38h]  +
mov edi eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test edi edi +
jl loc_10047FC  +
mov byte ptr [esi+18h] 1 +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov edi 20019h +
push edi  +
xor ebx ebx +
mov esi offset aSoftwareMicros +
push esi  +
push 80000002h  +
mov [ebp+var_14] ecx +
mov [ebp+hKey] ebx +
mov [ebp+phkResult] ebx +
mov byte ptr [ebp+var_3] bl +
mov byte ptr [ebp+var_3+2] bl +
mov byte ptr [ebp+var_3+1] bl +
call sub_10033E6  +
cmp [ebp+phkResult] ebx +
jz loc_1004858  +
lea eax [ebp+var_3] +
push eax  +
push offset ValueName  +
push [ebp+phkResult]  +
call sub_1004369  +
cmp byte ptr [ebp+var_3] bl +
jnz loc_100486D  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push esi  +
push 80000001h  +
call sub_10033E6  +
mov esi offset aTrustpolicy +
mov edi offset aUsewinsafer +
cmp [ebp+hKey] ebx +
jz loc_10048AB  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push [ebp+hKey]  +
call sub_1004951  +
test eax eax +
jge loc_1006E0A  +
lea eax [ebp-4] +
push eax  +
push edi  +
push [ebp+hKey]  +
call sub_1004369  +
test eax eax +
jge loc_1006E13  +
cmp byte ptr [ebp+var_3+2] bl +
jnz loc_10048C5  +
cmp [ebp+phkResult] ebx +
jz loc_10048C5  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push [ebp+phkResult]  +
call sub_1004951  +
test eax eax +
jge loc_1006E1C  +
cmp byte ptr [ebp+var_3+1] bl +
jnz loc_10048E4  +
cmp [ebp+phkResult] ebx +
jz loc_10048E4  +
lea eax [ebp-4] +
push eax  +
push edi  +
push [ebp+phkResult]  +
call sub_1004369  +
test eax eax +
jl loc_10048E4  +
mov byte ptr [ebp+var_3+1] 1 +
mov ecx [ebp+var_14] +
cmp byte ptr [ebp+var_3+2] bl +
jnz loc_1006E25  +
cmp byte ptr [ebp+var_3+1] bl +
jz loc_10048FB  +
mov al [ebp+var_4] +
mov [ecx+26h] al +
mov esi ds:RegCloseKey +
cmp [ebp+hKey] ebx +
jz loc_100490B  +
push [ebp+hKey]  +
call esi  +
cmp [ebp+phkResult] ebx +
jz loc_1004915  +
push [ebp+phkResult]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+cbData] 4 +
cmp byte_1019001 bl +
jz loc_1008232  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
cmp eax ebx +
jz loc_100829A  +
jle loc_10049A7  +
and eax 0FFFFh +
or eax 80070000h +
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 0Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004A39  +
and dword ptr [esi+280h] 0 +
mov dword ptr [esi] offset off_1004A10 +
mov eax esi +
pop esi  +
retn   +
***
xor eax eax +
push esi  +
mov esi ecx +
lea ecx [esi+264h] +
mov dword ptr [esi] offset off_1002EBC +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] al +
mov [esi+21h] al +
mov [esi+22h] al +
mov [esi+23h] al +
mov [esi+24h] al +
mov [esi+25h] al +
mov [esi+26h] al +
mov [esi+27h] al +
mov [esi+28h] eax +
mov [esi+238h] eax +
mov [esi+23Ch] eax +
mov [esi+240h] eax +
mov [esi+244h] eax +
mov [esi+248h] eax +
mov [esi+24Ch] eax +
mov [esi+250h] eax +
mov [esi+254h] eax +
mov [esi+258h] eax +
mov [esi+25Ch] eax +
mov [esi+260h] eax +
call sub_1004ADC  +
xor eax eax +
mov [esi+2Ch] ax +
call ds:GetCurrentThreadId  +
mov [esi+14h] eax +
mov dword_101900C esi +
mov eax esi +
pop esi  +
retn   +
***
call sub_10021C5  +
mov esi ecx +
mov [ebp-1Ch] esi +
xor eax eax +
mov [esi+18h] al +
mov [esi+19h] al +
mov [ebp-4] eax +
push esi  +
call ds:InitializeCriticalSection  +
mov byte ptr [esi+19h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax esi +
call sub_10015D0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
mov [eax] ebx +
mov eax [ebp+arg_8] +
push esi  +
mov [eax] ebx +
push edi  +
cmp byte_1019001 bl +
jz loc_100642D  +
lea eax [ebp+dwHandle] +
push eax  +
push [ebp+lpWideCharStr]  +
call GetFileVersionInfoSizeW  +
mov esi eax +
cmp esi ebx +
jz loc_1004BD0  +
call sub_10043F7  +
mov edi esp +
push edi  +
push esi  +
push [ebp+dwHandle]  +
push [ebp+lpWideCharStr]  +
call GetFileVersionInfoW  +
test eax eax +
jz loc_1004BD0  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push edi  +
call VerQueryValueW  +
test eax eax +
jz loc_1004BD0  +
mov eax [ebp+lpBuffer] +
mov ecx [eax+10h] +
mov edx [ebp+arg_4] +
mov [edx] ecx +
mov eax [eax+14h] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 0Ch  +
call ds:GetLastError  +
jmp loc_1006416  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov edi 20019h +
push edi  +
mov esi offset aSoftwareMicros +
xor ebx ebx +
push esi  +
push 80000001h  +
mov [ebp+var_C] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+hKey] ebx +
call sub_10033E6  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push esi  +
push 80000002h  +
call sub_10033E6  +
push 1  +
push [ebp+hKey]  +
push [ebp+phkResult]  +
push offset aEnabled  +
call sub_1004DC9  +
test al al +
jz loc_1006DE0  +
cmp byte_1019001 bl +
jz loc_1004C66  +
push ebx  +
push ebx  +
push ebx  +
push 3  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
call ds:CoInitializeSecurity  +
mov [ebp+var_C] eax +
mov esi ds:RegCloseKey +
cmp [ebp+hKey] ebx +
jz loc_1004C76  +
push [ebp+hKey]  +
call esi  +
cmp [ebp+phkResult] ebx +
jz loc_1004C80  +
push [ebp+phkResult]  +
call esi  +
cmp [ebp+var_C] ebx +
jl loc_1006DFE  +
push 0BEEh  +
push ebx  +
call sub_1004CA1  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
cmp byte_1019001 bl +
jz loc_1004D87  +
push esi  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov edi 20019h +
push edi  +
mov esi offset aSoftwareMicros +
push esi  +
push 80000001h  +
mov [ebp+nSize] 100h +
mov [ebp+var_224] ebx +
mov [ebp+lpUserSid] ebx +
mov [ebp+cbReferencedDomainName] ebx +
mov [ebp+cbSid] ebx +
mov [ebp+var_220] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+hKey] ebx +
call sub_10033E6  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push esi  +
push 80000002h  +
call sub_10033E6  +
cmp [ebp+arg_0] bl +
jnz loc_1006BDD  +
push ebx  +
push [ebp+hKey]  +
push [ebp+phkResult]  +
push offset aLogsecuritysuc  +
call sub_1004DC9  +
test al al +
jnz loc_1006C13  +
push [ebp+var_220]  +
call ds:SysFreeString  +
mov esi ds:RegCloseKey +
cmp [ebp+hKey] ebx +
jz loc_1004D75  +
push [ebp+hKey]  +
call esi  +
cmp [ebp+phkResult] ebx +
jz loc_1004D85  +
push [ebp+phkResult]  +
call esi  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi [ebp+hKey] +
setz byte ptr [ebp+var_2+1]  +
mov byte ptr [ebp+var_2] 1 +
mov [ebp+var_3] 1 +
test esi esi +
jz loc_1004DFC  +
cmp [ebp+arg_4] 0 +
jz loc_1004DFC  +
lea eax [ebp-1] +
push eax  +
push offset ValueName  +
push esi  +
call sub_1004369  +
cmp byte ptr [ebp+var_2+1] 0 +
jnz loc_1004E19  +
lea eax [ebp+var_2] +
push eax  +
push [ebp+lpValueName]  +
push [ebp+arg_4]  +
call sub_1004369  +
test eax eax +
jge loc_1006BD5  +
test esi esi +
jz loc_1004E31  +
lea eax [ebp-3] +
push eax  +
push [ebp+lpValueName]  +
push esi  +
call sub_1004369  +
test eax eax +
mov al [ebp+var_3] +
jge loc_1004E34  +
mov al [ebp+arg_C] +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1004E94  +
mov ecx eax +
call sub_1004E9D  +
test eax eax +
jz loc_1006F94  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1004E81  +
***
mov eax ecx +
and dword ptr [eax+8] 0 +
mov dword ptr [eax] offset off_1004EB8 +
mov byte ptr [eax+4] 0 +
mov dword ptr [eax+0Ch] 1 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004F22  +
xor ecx ecx +
lea eax [esi+234h] +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [esi+224h] ecx +
mov [esi+228h] ecx +
mov [esi+22Ch] cl +
mov [esi+22Dh] cl +
mov [esi+22Eh] cl +
mov [esi+22Fh] cl +
mov [esi+230h] ecx +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
mov [esi] ebx +
mov byte ptr [esi+6] 1 +
call ds:GetACP  +
mov [esi+0Ch] eax +
xor eax eax +
mov ecx esi +
mov [esi+11h] bl +
mov [esi+13h] bl +
mov [esi+15h] bl +
mov [esi+17h] bl +
mov dword ptr [esi+18h] 57h +
mov [esi+1Ch] ax +
call sub_1004F63  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
xor al al +
mov [ecx+4] al +
mov [ecx+5] al +
mov [ecx+7] al +
mov [ecx+8] al +
mov [ecx+10h] al +
mov [ecx+12h] al +
mov [ecx+14h] al +
mov [ecx+16h] al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
xor eax eax +
lea ebx [esi+1Ch] +
mov [ebx] ax +
call sub_100443A  +
test eax eax +
jl loc_100500F  +
cmp dword ptr [esi+224h] 0 +
jz loc_10073C8  +
mov eax [esi+228h] +
push edi  +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edi 104h +
cmp eax edi +
jge loc_10073CF  +
mov eax [esi+228h] +
push dword ptr [eax]  +
push edi  +
push ebx  +
call sub_100502D  +
add esp 0Ch +
push 2Eh  +
push ebx  +
call sub_100343E  +
test eax eax +
jz loc_100500C  +
push 0FFFFFFFFh  +
push offset aWsh_0  +
add eax 2 +
push eax  +
call sub_1001B8C  +
test eax eax +
jz loc_10073DA  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_10063E0  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
jbe loc_10063E0  +
mov esi [ebp+arg_8] +
cmp esi edi +
jz loc_10063FE  +
mov ecx edx +
movzx eax word ptr [esi] +
mov [ecx] ax +
inc ecx  +
inc ecx  +
inc esi  +
inc esi  +
cmp ax di +
jz loc_100506C  +
dec ebx  +
jnz loc_100505A  +
xor eax eax +
cmp ebx edi +
jz loc_1006405  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
push 4Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100511E  +
mov ecx eax +
call sub_1003F4D  +
mov esi eax +
test esi esi +
jz loc_1007C31  +
mov edi [ebp+arg_0] +
and [ebp+rgsabound.lLbound] 0 +
lea eax [ebp+rgsabound] +
push eax  +
push 1  +
push 0Ch  +
mov [ebp+rgsabound.cElements] edi +
call ds:SafeArrayCreate  +
mov [esi+28h] eax +
test eax eax +
jz loc_1007C3B  +
and [ebp+rgIndices] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
test edi edi +
jg loc_1007C45  +
lea eax [esi+2Ch] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
call sub_1005271  +
mov edi eax +
test edi edi +
jl loc_100510D  +
lea eax [esi+30h] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
call sub_1005127  +
mov edi eax +
test edi edi +
jl loc_100510D  +
mov eax [ebp+arg_8] +
mov [eax] esi +
xor esi esi +
xor edi edi +
pop ebx  +
test esi esi +
jnz loc_1007C95  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
xor esi esi +
jmp loc_10050A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
push 28h  +
call ??2@YAPAXI@Z  +
xor ebx ebx +
pop ecx  +
cmp eax ebx +
jz loc_10051A3  +
mov ecx eax +
call sub_10051B3  +
mov esi eax +
cmp esi ebx +
jz loc_1007B98  +
xor eax eax +
cmp [ebp+arg_0] ebx +
mov [ebp+var_4] ebx +
jg loc_1007BA2  +
mov eax [ebp+var_4] +
mov [ebp+rgsabound.cElements] eax +
lea eax [ebp+rgsabound] +
push eax  +
push 1  +
push 0Ch  +
mov [ebp+rgsabound.lLbound] ebx +
call ds:SafeArrayCreate  +
mov [esi+24h] eax +
cmp eax ebx +
jz loc_10051A7  +
cmp [ebp+arg_0] ebx +
mov [ebp+rgIndices] ebx +
jg loc_1007BBF  +
mov eax [ebp+arg_8] +
mov [eax] esi +
xor esi esi +
xor edi edi +
test esi esi +
jnz loc_1007C26  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
xor esi esi +
jmp loc_1005149  +
mov edi 8007000Eh +
jmp loc_1005192  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push offset off_10190A4  +
push esi  +
lea edi [esi+8] +
push 0  +
mov ecx edi +
call sub_1005242  +
and dword ptr [esi+24h] 0 +
mov dword ptr [edi] offset off_10016F0 +
pop edi  +
mov dword ptr [esi] offset off_100171C +
mov dword ptr [esi+4] offset off_1002EE0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
push offset off_1019044  +
push esi  +
push [ebp+arg_0]  +
lea edi [esi+8] +
mov ecx edi +
call sub_1005242  +
xor eax eax +
mov dword ptr [edi] offset off_1001774 +
mov [esi+28h] eax +
mov [esi+24h] eax +
mov [esi+2Ch] eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov [esi+3Ch] eax +
mov [esi+40h] eax +
pop edi  +
mov dword ptr [esi] offset off_10017A0 +
mov dword ptr [esi+4] offset off_1002EE0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1001B1A  +
mov eax [ebp+arg_8] +
mov [esi+14h] eax +
mov dword ptr [esi] offset off_1001818 +
mov byte ptr [esi+18h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push edi  +
push 2Ch  +
call ??2@YAPAXI@Z  +
xor edi edi +
pop ecx  +
cmp eax edi +
jz loc_1005303  +
mov ecx eax +
call sub_1005313  +
mov ebx eax +
cmp ebx edi +
jz loc_1007A2E  +
xor eax eax +
cmp [ebp+arg_0] edi +
mov [ebp+var_8] edi +
jg loc_1007A38  +
mov eax [ebp+var_8] +
push esi  +
mov esi ds:SafeArrayCreate +
mov [ebp+rgsabound.cElements] eax +
lea eax [ebp+rgsabound] +
push eax  +
push 1  +
push 0Ch  +
mov [ebp+rgsabound.lLbound] edi +
call esi  +
mov [ebx+24h] eax +
cmp eax edi +
jz loc_1005307  +
lea eax [ebp+rgsabound] +
push eax  +
push 1  +
push 0Ch  +
call esi  +
mov [ebx+28h] eax +
cmp eax edi +
jz loc_1005307  +
xor eax eax +
cmp [ebp+arg_0] edi +
mov [ebp+rgIndices] edi +
mov [ebp+var_14] eax +
jg loc_1007A55  +
mov eax [ebp+arg_8] +
mov [eax] ebx +
xor ebx ebx +
pop esi  +
test ebx ebx +
jnz loc_1007B8D  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
xor ebx ebx +
jmp loc_1005292  +
mov edi 8007000Eh +
jmp loc_10052F2  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push offset off_1019084  +
push esi  +
lea edi [esi+8] +
push 0  +
mov ecx edi +
call sub_1005242  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+28h] 0 +
mov dword ptr [edi] offset off_1001694 +
pop edi  +
mov dword ptr [esi] offset off_10016C0 +
mov dword ptr [esi+4] offset off_1002EE0 +
mov eax esi +
pop esi  +
retn   +
***
call sub_100413D  +
mov esi [ebp+0Ch] +
mov dword_1019024 esi +
mov eax [ebp+8] +
mov hInstance eax +
xor edi edi +
mov [ebp-4] edi +
push offset CriticalSection  +
call ds:InitializeCriticalSection  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-0B0h] 94h +
lea eax [ebp-0B0h] +
push eax  +
call ds:GetVersionExA  +
test eax eax +
jz loc_1005418  +
cmp dword ptr [ebp-0ACh] 6 +
sbb al al +
inc al  +
mov byte_1019000 al +
call sub_1003FD5  +
mov dword_101901C eax +
cmp dword ptr [ebp-0A0h] 2 +
jnz loc_10053FA  +
mov byte_1019001 1 +
cmp dword ptr [ebp-0ACh] 5 +
jb loc_10053DE  +
mov byte_1019002 1 +
jz loc_100540D  +
cmp dword ptr [ebp-0ACh] 6 +
jb loc_10053FA  +
cmp esi 7D0h +
jz loc_1007F51  +
mov byte_1019020 1 +
xor eax eax +
cmp hInstance edi +
setnz al  +
call sub_100543C  +
retn 8  +
cmp dword ptr [ebp-0A8h] 1 +
jb loc_10053DE  +
jmp loc_10053E7  +
xor eax eax +
jmp loc_1005405  +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_1001375  +
jmp sub_10015D0  +
***
mov eax eax +
retn   +
***
mov eax [ebp+8] +
mov [edx] eax +
inc dword ptr [eax+4]  +
xor eax eax +
jmp loc_1001A9C  +
***
sub eax 53h +
jz loc_1007327  +
dec eax  +
jz loc_10072E9  +
dec eax  +
jz loc_10072D3  +
sub eax 3 +
jz loc_10072BE  +
sub eax 0Bh +
jz loc_100727B  +
sub eax 9 +
jz loc_1007256  +
dec eax  +
dec eax  +
jnz loc_100737D  +
cmp [ebp+var_4] al +
jnz loc_1007248  +
mov [ebp+var_4] 1 +
mov byte ptr [esi+7] 1 +
mov byte ptr [esi+8] 1 +
mov [esi+6] al +
jmp loc_10044F6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
push esi  +
push edi  +
mov edi [ebp+8] +
mov eax [edi+8] +
mov eax [eax+240h] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_100559F  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jl loc_100559F  +
push offset dword_10055C4  +
call ds:SysAllocString  +
mov ecx [ebp-8] +
mov edx [ecx] +
lea esi [ebp+8] +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+28h]  +
mov esi eax +
test esi esi +
jl loc_100559F  +
cmp word ptr [ebp+8] 0 +
jz loc_100559F  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jl loc_100559F  +
mov eax [edi+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jl loc_100559F  +
xor esi esi +
inc esi  +
mov eax [ebp-4] +
test eax eax +
jz loc_10055AC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_10055B9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp ax [ebx] +
jz loc_1005626  +
push esi  +
push edi  +
mov edi offset off_10193E8 +
cmp off_10193E8 eax +
jz loc_100562A  +
push dword ptr [edi]  +
call ds:lstrlenW  +
mov esi eax +
push esi  +
push ebx  +
push dword ptr [edi]  +
call sub_1001B8C  +
test eax eax +
jz loc_100560A  +
add edi 0Ch +
xor ecx ecx +
cmp [edi] ecx +
jnz loc_10055E8  +
jmp loc_100562A  +
mov eax [edi+8] +
xor ecx ecx +
sub eax ecx +
jnz loc_100709E  +
cmp [ebx+esi*2] cx +
jnz loc_10070E0  +
mov eax [edi+4] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1005624  +
***
add ecx 4 +
push ecx  +
call ds:InterlockedCompareExchange  +
sub eax 8004FFFEh +
neg eax  +
sbb eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+254h] +
test eax eax +
jnz loc_10069A0  +
add esi 250h +
mov eax [esi] +
test eax eax +
jnz loc_10069BE  +
pop esi  +
retn   +
***
mov eax [esi+4] +
test eax eax +
jnz loc_1006E86  +
xor eax eax +
jmp loc_100168D  +
call sub_1010D71  +
jmp loc_1005681  +
and dword ptr [esi] 0 +
jmp loc_1005681  +
push 0  +
call ds:PostQuitMessage  +
jmp loc_1005681  +
***
mov eax dword_1019010 +
and dword_1019010 0 +
test eax eax +
jnz loc_1006F9E  +
retn   +
***
mov eax [ecx+24h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001849  +
***
mov eax dword_101901C +
push esi  +
mov esi ds:FreeLibrary +
cmp eax hInstance +
jnz loc_1007D17  +
mov eax dword_101949C +
test eax eax +
jnz loc_1007D32  +
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
pop esi  +
retn   +
***
lea ecx [esi-0Ch] +
test ecx ecx +
jz loc_100571A  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
xor eax eax +
jmp loc_1001881  +
***
sub ecx 8 +
jmp loc_1005730  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005756  +
test byte ptr [ebp+8] 1 +
jz loc_100574A  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
call ds:InterlockedDecrement  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
lea esi [edi+0Ch] +
push esi  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_1005819  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esi] +
jmp loc_1005813  +
***
sub ecx 8 +
jmp loc_100582C  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005852  +
test byte ptr [ebp+8] 1 +
jz loc_1005846  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
lea esi [ecx+8] +
mov dword ptr [ecx] offset off_10018E0 +
mov dword ptr [ecx+4] offset off_1001890 +
mov dword ptr [esi] offset off_1001888 +
call sub_100587D  +
mov ecx esi +
pop esi  +
jmp sub_10057DB  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:SysFreeString +
mov esi ecx +
push dword ptr [esi+2Ch]  +
call edi  +
push dword ptr [esi+30h]  +
and dword ptr [esi+2Ch] 0 +
call edi  +
mov eax [esi+38h] +
and dword ptr [esi+30h] 0 +
test eax eax +
jz loc_10058AC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+38h] 0 +
mov eax [esi+3Ch] +
test eax eax +
jnz loc_1006FC4  +
pop edi  +
pop esi  +
retn   +
***
add ecx 234h +
jmp loc_10058CC  +
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_10070E8  +
pop esi  +
retn   +
***
sub ecx 0Ch +
jmp loc_10058EB  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005911  +
test byte ptr [ebp+8] 1 +
jz loc_1005905  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+44h] +
push edi  +
lea edi [esi+0Ch] +
mov dword ptr [esi] offset off_10014F8 +
mov dword ptr [esi+4] offset off_1002E94 +
mov dword ptr [esi+8] offset off_1002E80 +
mov dword ptr [edi] offset off_1002E78 +
test eax eax +
jnz loc_10074BA  +
mov eax [esi+48h] +
test eax eax +
jnz loc_10074C5  +
mov eax [esi+4Ch] +
test eax eax +
jnz loc_10074D0  +
mov eax [esi+28h] +
test eax eax +
jz loc_1005962  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+24h] +
test eax eax +
jz loc_100596F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+40h] +
test eax eax +
jz loc_100597C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+30h] +
call sub_1005992  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_10057DB  +
***
mov eax [ecx] +
test eax eax +
jz locret_10059A8  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
retn   +
***
sub ecx 8 +
jmp loc_10059B8  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10059DE  +
test byte ptr [ebp+8] 1 +
jz loc_10059D2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
lea esi [ecx+8] +
mov dword ptr [ecx] offset off_100171C +
mov dword ptr [ecx+4] offset off_1002EE0 +
mov ecx [ecx+24h] +
mov dword ptr [esi] offset off_10016F0 +
test ecx ecx +
jz loc_1005A05  +
push ecx  +
call ds:SafeArrayDestroy  +
mov ecx esi +
pop esi  +
jmp sub_1005797  +
***
sub ecx 0Ch +
jmp loc_1005A1C  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005A42  +
test byte ptr [ebp+8] 1 +
jz loc_1005A36  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
lea ebx [esi+0Ch] +
push edi  +
mov dword ptr [esi] offset off_1001524 +
mov dword ptr [esi+4] offset off_1002F00 +
mov dword ptr [esi+8] offset off_1002EF0 +
mov dword ptr [ebx] offset off_1001748 +
test eax eax +
jz loc_1005A74  +
push eax  +
call ds:SafeArrayDestroy  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1005A81  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+30h] +
test eax eax +
jz loc_1005A8E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [esi+40h]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [esi+44h]  +
call edi  +
push dword ptr [esi+3Ch]  +
call edi  +
lea edi [esi+34h] +
cmp dword ptr [edi] 0 +
jnz loc_1007A1A  +
pop edi  +
pop esi  +
mov ecx ebx +
pop ebx  +
jmp sub_1005797  +
***
sub ecx 8 +
jmp loc_1005AC8  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005AEE  +
test byte ptr [ebp+8] 1 +
jz loc_1005AE2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+28h] +
lea ebx [esi+8] +
push edi  +
mov edi ds:SysFreeString +
mov dword ptr [esi] offset off_10017A0 +
mov dword ptr [esi+4] offset off_1002EE0 +
mov dword ptr [ebx] offset off_1001774 +
test eax eax +
jz loc_1005B1B  +
push eax  +
call edi  +
mov eax [esi+24h] +
test eax eax +
jz loc_1005B25  +
push eax  +
call edi  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_1005B2F  +
push eax  +
call edi  +
mov eax [esi+30h] +
test eax eax +
jz loc_1005B3C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+34h] +
test eax eax +
jnz loc_1007CAA  +
mov eax [esi+38h] +
test eax eax +
jnz loc_1007CB5  +
mov esi [esi+3Ch] +
test esi esi +
jnz loc_1007CC0  +
pop edi  +
pop esi  +
mov ecx ebx +
pop ebx  +
jmp sub_1005797  +
***
sub ecx 8 +
jmp loc_1005B76  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005B9C  +
test byte ptr [ebp+8] 1 +
jz loc_1005B90  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_10018C0 +
mov dword ptr [ecx+4] offset off_10018B0 +
add ecx 8 +
mov dword ptr [ecx] offset off_10018A8 +
jmp sub_10057DB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005BE2  +
test [ebp+arg_0] 1 +
jz loc_1005BD6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1Ch] +
push edi  +
mov edi ds:CloseHandle +
test eax eax +
jnz loc_1006F3D  +
mov ecx esi +
call sub_1005C36  +
mov eax [esi] +
test eax eax +
jz loc_1005C24  +
push 0  +
push 0  +
push 12h  +
push eax  +
call ds:PostMessageA  +
push 0FFh  +
push 0FFFFFFFFh  +
push 0  +
push dword ptr [esi+10h]  +
call sub_1002D76  +
mov esi [esi+10h] +
test esi esi +
jz loc_1005C2E  +
push esi  +
call edi  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1006E74  +
push 0  +
push 0  +
push 402h  +
push eax  +
call ds:SendMessageA  +
mov eax [esi+0Ch] +
test eax eax +
jg loc_1006E77  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002EBC +
call sub_1005C98  +
and dword_101900C 0 +
lea eax [esi+264h] +
cmp byte ptr [eax+19h] 0 +
pop esi  +
jz locret_1005C92  +
push eax  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+25Ch] +
mov eax [edi] +
xor ebx ebx +
cmp eax ebx +
jnz loc_10064CD  +
lea edi [esi+24Ch] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_1005CC6  +
push 1  +
call sub_1005BBC  +
mov [edi] ebx +
lea edi [esi+240h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1005CDA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
lea edi [esi+258h] +
mov eax [edi] +
cmp eax ebx +
jnz loc_10064DA  +
lea edi [esi+248h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_1005D05  +
call sub_100587D  +
mov eax [edi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
mov ecx esi +
call sub_1005651  +
lea edi [esi+244h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1005D20  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
call sub_10056A3  +
lea edi [esi+238h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1005D3A  +
push eax  +
call ds:SysFreeString  +
mov [edi] ebx +
lea edi [esi+23Ch] +
mov eax [edi] +
cmp eax ebx +
jz loc_1005D4F  +
push eax  +
call ds:SysFreeString  +
mov [edi] ebx +
add esi 260h +
mov ecx [esi] +
cmp ecx ebx +
jz loc_1005D6A  +
call sub_1005D73  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi ecx +
cmp byte ptr [edi+4] 0 +
jz loc_1005DAC  +
push esi  +
mov esi ds:CoRegisterMessageFilter +
lea eax [ebp+lpMessageFilter] +
push eax  +
push dword ptr [edi+8]  +
call esi  +
test eax eax +
jl loc_1006F87  +
mov eax [ebp+lpMessageFilter] +
test eax eax +
jz loc_1005DA7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov byte ptr [edi+4] 0 +
pop esi  +
pop edi  +
leave   +
retn   +
***
test eax eax +
jge loc_1005D9A  +
jmp loc_1005DAB  +
***
call sub_10021C5  +
mov [ebp-1Ch] ecx +
lea esi [ecx+18h] +
cmp byte ptr [esi] 0 +
jnz loc_1006202  +
and dword ptr [ebp-4] 0 +
push ecx  +
call ds:EnterCriticalSection  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
cmp [esi] al +
setz al  +
call sub_10015D0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+24h] +
mov ecx [eax] +
push 2  +
push [ebp+arg_0]  +
push 0FFFFFFFDh  +
push eax  +
call dword ptr [ecx+38h]  +
test eax eax +
jl loc_1005E34  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+40h] +
mov edx [ebp+0Ch] +
mov [ecx+1Ch] edx +
mov ecx [eax+40h] +
mov byte ptr [ecx+22h] 1 +
mov ecx [eax+40h] +
push 8004FFFDh  +
call sub_1005E71  +
test eax eax +
jl loc_1005E68  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx [ebp+Value] +
push esi  +
push edi  +
mov esi ecx +
push ebx  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedExchange  +
xor edi edi +
mov [ebp+var_4] ebx +
xor eax eax +
lea ebx [esi+264h] +
mov ecx ebx +
mov [ebp+Value] 80004005h +
mov word ptr [ebp+var_20] ax +
mov word ptr [ebp+var_20+2] ax +
mov [ebp+var_1C] edi +
mov [ebp+var_18] edi +
mov [ebp+var_14] edi +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
call sub_1005DBA  +
test eax eax +
jz loc_10068BB  +
mov ecx [esi+244h] +
cmp ecx edi +
jz loc_10068C5  +
lea eax [ebp+var_20] +
push eax  +
call sub_1005E19  +
mov [ebp+Value] eax +
mov ecx ebx +
call sub_1005EF9  +
mov eax [ebp+Value] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_10021C5  +
mov [ebp-1Ch] ecx +
cmp byte ptr [ecx+18h] 0 +
jnz loc_1005F20  +
and dword ptr [ebp-4] 0 +
push ecx  +
call ds:LeaveCriticalSection  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10015D0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push edi  +
mov edi [ebp+0Ch] +
mov eax [edi] +
lea ecx [ebp-50h] +
xor ebx ebx +
push ecx  +
push edi  +
mov [ebp-0Ch] ebx +
mov [ebp-10h] ebx +
mov [ebp-4] ebx +
call dword ptr [eax+0Ch]  +
cmp eax ebx +
jl loc_1005FC9  +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+2Ch] +
call sub_1005FF1  +
test eax eax +
jz loc_1007630  +
mov ecx [ebp-34h] +
cmp ecx 8004FFFCh +
jz loc_1005FCF  +
cmp ecx 8004FFFDh +
jnz loc_100763A  +
xor edi edi +
push dword ptr [ebp-4Ch]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-48h]  +
call esi  +
push dword ptr [ebp-44h]  +
call esi  +
push dword ptr [ebp-4]  +
call esi  +
push dword ptr [ebp-10h]  +
call esi  +
mov eax [ebp-0Ch] +
cmp eax ebx +
jnz loc_1007782  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
cmp [esi+51h] bl +
jz loc_10076F9  +
jmp loc_1005F9A  +
***
cmp edi 80020006h +
jz loc_1005F9A  +
jmp loc_1005F9C  +
***
mov edi eax +
cmp edi ebx +
jge loc_1005F9A  +
jmp loc_1005F9C  +
***
push ecx  +
push edi  +
mov ecx [esp+arg_0] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
or eax eax +
mov ebx offset unk_10194A8 +
mov esp [ebp-18h] +
mov esi [ebp-1Ch] +
mov byte ptr [esi+18h] 1 +
jmp loc_1004B03  +
***
mov esp [ebp-18h] +
mov esp [ebp-18h] +
mov eax [ebp-1Ch] +
mov byte ptr [eax+18h] 1 +
jmp loc_1005F19  +
***
call eax  +
jmp loc_1003000  +
***
lea ecx [ebp+var_288] +
call sub_1005C67  +
xor eax eax +
inc eax  +
jmp loc_1003198  +
xor esi esi +
inc esi  +
jmp loc_100318B  +
***
xor eax eax +
inc eax  +
jmp loc_100312A  +
call sub_10056DB  +
jmp loc_1006253  +
mov [ebp+var_4] 8007000Eh +
jmp loc_1003111  +
call ds:GetCommandLineA  +
mov esi ds:MultiByteToWideChar +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
mov edi eax +
push edi  +
push ebx  +
push ebx  +
call esi  +
xor ecx ecx +
push 2  +
pop edx  +
mov [ebp+cchWideChar] eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1006262  +
push [ebp+cchWideChar]  +
push eax  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push ebx  +
call esi  +
jmp loc_1003094  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10030FD  +
push 0FFFFFFFFh  +
inc esi  +
push offset aRegserver  +
inc esi  +
push esi  +
call sub_1001B8C  +
test eax eax +
jnz loc_10062DA  +
call sub_100D191  +
jmp loc_100630F  +
push 0FFFFFFFFh  +
push offset aUnregserver  +
push esi  +
call sub_1001B8C  +
test eax eax +
jnz loc_10062F2  +
call sub_100D87F  +
jmp loc_100630F  +
push 0FFFFFFFFh  +
push offset aEmbedding  +
push esi  +
call sub_1001B8C  +
test eax eax +
jnz loc_10030EF  +
push [ebp+pUnk]  +
call sub_100D04C  +
mov [ebp+var_4] eax +
jmp loc_10030FD  +
mov [ebp+var_C] 1 +
jmp loc_1003127  +
***
test eax ebx +
jz loc_1003D9C  +
not eax  +
mov dword_1019008 eax +
jmp loc_1003DF2  +
***
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_100DE02  +
add esp 14h +
mov eax esi +
jmp loc_1002155  +
mov [ecx] bl +
jmp loc_1006378  +
mov [ecx] bl +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1006382  +
***
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_100DE02  +
add esp 14h +
mov eax esi +
jmp loc_10035D7  +
xor eax eax +
mov [edx] ax +
jmp loc_10063AA  +
mov [edx] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_10063B4  +
***
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_100DE02  +
add esp 14h +
mov eax esi +
jmp loc_1005076  +
xor eax eax +
mov [edx] ax +
jmp loc_10063E0  +
mov [edx] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_10063EA  +
***
cmp eax ebx +
jle loc_1004BBC  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1004BBC  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1004BD0  +
call sub_10043F7  +
mov [ebp+lptstrFilename] esp +
cmp esp ebx +
jnz loc_1006460  +
mov eax 8007000Eh +
jmp loc_1004BBC  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lptstrFilename]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1004BD0  +
lea eax [ebp+dwHandle] +
push eax  +
push [ebp+lptstrFilename]  +
call GetFileVersionInfoSizeA  +
mov esi eax +
cmp esi ebx +
jz loc_1004BD0  +
call sub_10043F7  +
mov edi esp +
push edi  +
push esi  +
push [ebp+dwHandle]  +
push [ebp+lptstrFilename]  +
call GetFileVersionInfoA  +
test eax eax +
jz loc_1004BD0  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset asc_1002020  +
push edi  +
call VerQueryValueA  +
jmp loc_1004BA3  +
***
xor eax eax +
inc eax  +
pop ebx  +
retn   +
xor eax eax +
jmp loc_1003E64  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
jmp loc_1005CB1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
jmp loc_1005CEA  +
***
lea ecx [ebp+var_34C] +
call sub_10058BF  +
xor eax eax +
inc eax  +
jmp loc_10033CD  +
lea ecx [ebp+var_34C] +
call sub_10058BF  +
xor eax eax +
inc eax  +
jmp loc_10033CC  +
mov ebx 105h +
push ebx  +
lea eax [ebp+MultiByteStr] +
push eax  +
push hInstance  +
mov [ebp+var_8] 0 +
call ds:GetModuleFileNameA  +
test eax eax +
jz loc_10064FA  +
cmp [ebp+var_8] 0 +
jnz loc_10064FA  +
push ebx  +
lea edi [esi+2Ch] +
push edi  +
push 0FFFFFFFFh  +
lea eax [ebp+MultiByteStr] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_10064FA  +
jmp loc_1003251  +
push eax  +
push 0C80h  +
mov eax dword_1019024 +
mov edx [esi] +
add eax 14h +
push eax  +
call dword ptr [edx]  +
xor esi esi +
inc esi  +
jmp loc_10033BF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov esi eax +
jmp loc_10033BF  +
push eax  +
push 0C85h  +
mov ecx esi +
jmp loc_100655B  +
cmp eax 8004FFFFh +
jz loc_1006568  +
push eax  +
push 0C87h  +
jmp loc_1006584  +
cmp [ebp+var_336] 0 +
jz loc_1003316  +
mov byte ptr [esi+23h] 1 +
jmp loc_1003316  +
mov byte ptr [esi+20h] 1 +
jmp loc_1003321  +
test al al +
jnz loc_10065D3  +
mov [esi+20h] al +
cmp [ebp+var_346] al +
jz loc_10065CC  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
xor esi esi +
jmp loc_10033BF  +
lea ecx [ebp+var_570] +
call sub_1004F22  +
push edi  +
lea ecx [ebp+var_570] +
call sub_1011954  +
cmp eax ebx +
jl loc_1006604  +
push [ebp+var_558]  +
call sub_10101EA  +
cmp eax ebx +
jge loc_100661E  +
push 0C83h  +
mov eax dword_1019024 +
add eax 14h +
push eax  +
mov ecx esi +
call sub_10118A6  +
jmp loc_1006568  +
mov eax [esi] +
push 0BEAh  +
push ebx  +
push esi  +
call dword ptr [eax+10h]  +
add esp 0Ch +
jmp loc_10065D3  +
push edi  +
lea ecx [ebp+var_34C] +
call sub_1011954  +
test eax eax +
jl loc_1006604  +
mov eax [esi] +
push 0BEBh  +
push ebx  +
push esi  +
call dword ptr [eax+10h]  +
add esp 0Ch +
mov al 1 +
jmp loc_1003359  +
push [ebp+var_334]  +
call sub_10101EA  +
test eax eax +
jge loc_100666B  +
push 0C82h  +
jmp loc_1006609  +
cmp [ebp+var_128] ebx +
jnz loc_100669F  +
cmp [ebp+var_334] 43h +
jz loc_1006690  +
cmp [ebp+var_334] 57h +
jnz loc_1006568  +
push 0BECh  +
jmp loc_1006695  +
push 0BEDh  +
mov eax [esi] +
push ebx  +
push esi  +
call dword ptr [eax+10h]  +
add esp 0Ch +
mov al 1 +
jmp loc_1003366  +
test al al +
jnz loc_10065D3  +
mov eax dword_1019024 +
push 0CE8h  +
add eax 15h +
jmp loc_1006611  +
cmp byte ptr [esi+22h] 0 +
jnz loc_10066CD  +
mov dword ptr [esi+1Ch] 1 +
cmp eax 8004FFFFh +
jz loc_10033BC  +
mov edx [esi] +
push eax  +
mov eax dword_1019024 +
push 0C87h  +
add eax 14h +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_10033BC  +
xor edi edi +
cmp [ebp+var_114] ebx +
jle loc_10033BC  +
push [ebp+var_574]  +
mov eax [ebp+var_118] +
mov eax [eax+edi*4] +
push eax  +
push [ebp+var_11C]  +
mov eax [ebp+var_124] +
add eax 4 +
push eax  +
mov eax [ebp+var_128] +
dec eax  +
push eax  +
lea eax [ebp+var_330] +
push eax  +
mov ecx esi +
call sub_1001387  +
cmp eax ebx +
jge loc_1006763  +
cmp byte ptr [esi+22h] 0 +
jnz loc_1006747  +
mov dword ptr [esi+1Ch] 1 +
cmp eax 8004FFFFh +
jz loc_1006763  +
mov edx [esi] +
push eax  +
mov eax dword_1019024 +
push 0C87h  +
add eax 14h +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
inc edi  +
cmp edi [ebp+var_114] +
jge loc_10033BC  +
jmp loc_1006700  +
***
xor al al +
jmp loc_10022D9  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
jmp loc_1001F1E  +
***
mov eax 80004005h +
jmp loc_1005EED  +
lea eax [esi+25Ch] +
cmp [eax] edi +
jz loc_1005EE3  +
mov eax [eax] +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_1005EE0  +
***
push edi  +
lea edi [esi+250h] +
push edi  +
push offset stru_1006980  +
push 17h  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov ecx eax +
cmp ecx ebx +
jge loc_1006912  +
sub eax 80040154h +
neg eax  +
sbb eax eax +
and eax ecx +
jmp loc_100697A  +
mov eax [edi] +
mov ecx [eax] +
lea edi [esi+254h] +
push edi  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jl loc_100697A  +
xor eax eax +
cmp [esi+23h] bl +
setz al  +
lea eax [eax+eax+1] +
add eax dword_1019024 +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1004043  +
cmp [ebp+var_4] ebx +
jnz loc_100694D  +
mov eax 80004005h +
jmp loc_100697A  +
mov eax [edi] +
push [ebp+var_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
push [ebp+var_4]  +
mov [ebp+var_8] eax +
call ds:SysFreeString  +
mov eax [ebp+var_8] +
cmp eax ebx +
jl loc_100697A  +
cmp [esi+24h] bl +
jz loc_1006978  +
mov edi [edi] +
mov eax [edi] +
push edi  +
call dword ptr [eax+10h]  +
xor eax eax +
pop edi  +
jmp loc_1003EA9  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [esi+254h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+254h] 0 +
jmp loc_1005664  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
jmp loc_1005674  +
***
mov eax esi +
jmp loc_1003880  +
***
mov edi eax +
jmp loc_10039D0  +
push dword ptr [esi+238h]  +
mov eax dword_1019024 +
push 0CEAh  +
add eax 15h +
push eax  +
mov ecx esi +
call sub_1011885  +
jmp loc_10039E8  +
mov ecx dword_1019024 +
mov eax [esi] +
push edi  +
push dword ptr [esi+238h]  +
add ecx 14h +
push 0C81h  +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
jmp loc_10039E8  +
***
lea ecx [ebp+var_10] +
call sub_1002032  +
mov eax edi +
jmp loc_10015CA  +
mov esi eax +
jmp loc_10015C0  +
***
mov eax [esi+254h] +
jmp loc_1001949  +
push eax  +
mov ecx esi +
call sub_10118C6  +
mov ebx eax +
jmp loc_10019A4  +
push dword ptr [esi+8]  +
mov ecx [esi+24Ch] +
call sub_1010CD4  +
jmp loc_10019D6  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+20h]  +
jmp loc_10019CD  +
***
mov edx [esi] +
push eax  +
mov eax dword_1019024 +
push 0C80h  +
add eax 14h +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_1006AB0  +
mov edi 8007000Eh +
jmp loc_1006B7D  +
push [ebp+var_218]  +
call sub_10103E9  +
jmp loc_100145E  +
cmp eax 800C0005h +
jnz loc_1006AA8  +
mov eax 80070002h +
push eax  +
mov ecx esi +
call sub_10118C6  +
mov edi eax +
jmp loc_10014A1  +
push [ebp+var_210]  +
mov ecx esi +
call sub_1010594  +
mov edi eax +
jmp loc_1001488  +
cmp edi 8004FFFFh +
jz loc_10014A1  +
push 2Eh  +
push dword ptr [esi+238h]  +
call sub_100343E  +
mov edi eax +
test edi edi +
jz loc_1006B49  +
push 0FFFFFFFFh  +
push offset a_wsf  +
push edi  +
call sub_1001B8C  +
test eax eax +
jnz loc_1006B56  +
mov eax [ebp+var_218] +
test eax eax +
jz loc_1006B13  +
mov ecx [eax] +
push eax  +
mov [ebp+ppmk] eax +
call dword ptr [ecx+4]  +
jmp loc_1006B31  +
lea eax [ebp+ppmk] +
push eax  +
push dword ptr [esi+238h]  +
push 0  +
call sub_101095C  +
mov edi eax +
test edi edi +
jl loc_10014D2  +
push [ebp+var_21C]  +
mov ecx esi +
push [ebp+ppmk]  +
call sub_1013E56  +
jmp loc_1001499  +
push dword ptr [esi+238h]  +
push 0CEAh  +
jmp loc_1006B5C  +
push edi  +
push 0CEDh  +
mov eax dword_1019024 +
add eax 15h +
push eax  +
mov ecx esi +
call sub_1011885  +
jmp loc_1001499  +
cmp edi 80020101h +
jz loc_10014A5  +
mov ecx dword_1019024 +
mov eax [esi] +
push edi  +
add ecx 14h +
push 0C86h  +
push ecx  +
mov ecx esi +
call dword ptr [eax]  +
mov edi eax +
jmp loc_10014A5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10014B3  +
***
cmp [ebp+arg_8] 2 +
jb loc_10042CE  +
push 2Eh  +
pop eax  +
mov [edi] ax +
xor eax eax +
mov [edi+2] ax +
jmp loc_10042CE  +
xor eax eax +
inc eax  +
jmp loc_10042B2  +
***
mov al byte ptr [ebp+var_2] +
jmp loc_1004E34  +
***
push 1  +
push [ebp+hKey]  +
push [ebp+phkResult]  +
push offset aLogsecurityfai  +
call sub_1004DC9  +
test al al +
jz loc_1004D53  +
mov [ebp+dwEventID] 0C0FF03E8h +
mov dword ptr [ebp+wType] 10h +
jmp loc_1006C27  +
mov [ebp+dwEventID] 0FF03E9h +
mov dword ptr [ebp+wType] 8 +
push offset SourceName  +
push ebx  +
call ds:RegisterEventSourceW  +
mov edi eax +
cmp edi ebx +
jz loc_1004D53  +
lea eax [ebp+nSize] +
push eax  +
lea eax [ebp+AccountName] +
push eax  +
call ds:GetUserNameW  +
test eax eax +
jz loc_1006CFF  +
mov esi ds:LookupAccountNameW +
lea eax [ebp+peUse] +
push eax  +
lea eax [ebp+cbReferencedDomainName] +
push eax  +
push ebx  +
lea eax [ebp+cbSid] +
push eax  +
push ebx  +
lea eax [ebp+AccountName] +
push eax  +
push ebx  +
call esi  +
cmp [ebp+cbSid] ebx +
jbe loc_1006CFF  +
cmp [ebp+cbReferencedDomainName] ebx +
jbe loc_1006CFF  +
push [ebp+cbSid]  +
call ??2@YAPAXI@Z  +
mov [ebp+lpUserSid] eax +
mov eax [ebp+cbReferencedDomainName] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
pop ecx  +
lea ecx [ebp+peUse] +
push ecx  +
lea ecx [ebp+cbReferencedDomainName] +
push ecx  +
push eax  +
mov [ebp+var_224] eax +
lea eax [ebp+cbSid] +
push eax  +
push [ebp+lpUserSid]  +
lea eax [ebp+AccountName] +
push eax  +
push ebx  +
call esi  +
test eax eax +
jnz loc_1006CFF  +
push [ebp+lpUserSid]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [ebp+lpUserSid] ebx +
push [ebp+uID]  +
lea eax [ebp+var_220] +
push eax  +
call sub_1004043  +
mov eax [ebp+var_220] +
cmp eax ebx +
jnz loc_1006D22  +
mov [ebp+Strings] ebx +
xor eax eax +
jmp loc_1006D31  +
mov [ebp+Strings] eax +
xor eax eax +
mov [ebp+var_234] ebx +
inc eax  +
push ebx  +
lea ecx [ebp+Strings] +
push ecx  +
push ebx  +
push eax  +
push [ebp+lpUserSid]  +
push [ebp+dwEventID]  +
push ebx  +
push dword ptr [ebp+wType]  +
push edi  +
call ds:ReportEventW  +
push edi  +
call ds:DeregisterEventSource  +
cmp [ebp+lpUserSid] ebx +
jz loc_1006D70  +
push [ebp+lpUserSid]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+var_224] ebx +
jz loc_1004D53  +
push [ebp+var_224]  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1004D53  +
***
mov eax dword_1019024 +
mov ecx dword_101900C +
push 0C88h  +
add eax 14h +
push eax  +
call sub_10118A6  +
jmp loc_1004C63  +
push 0C89h  +
push 1  +
jmp loc_1004C8F  +
***
mov byte ptr [ebp+var_3+2] 1 +
jmp loc_1004891  +
mov byte ptr [ebp+var_3+1] 1 +
jmp loc_10048A6  +
mov byte ptr [ebp+var_3+2] 1 +
jmp loc_10048C5  +
mov eax dword ptr [ebp+Data] +
cmp eax [ecx+28h] +
jle loc_10048F0  +
mov [ecx+28h] eax +
jmp loc_10048F0  +
***
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push 1  +
xor eax eax +
push eax  +
push eax  +
push eax  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_1006E39  +
push [ebp+dwWakeMask]  +
lea eax [ebp+pHandles] +
push [ebp+dwMilliseconds]  +
push [ebp+fWaitAll]  +
push eax  +
push 1  +
call esi  +
jmp loc_1002DB1  +
***
inc eax  +
pop esi  +
retn   +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1005C60  +
***
push eax  +
push dword ptr [esi]  +
call ds:KillTimer  +
test eax eax +
jnz loc_1006EA1  +
call ds:GetLastError  +
mov [esi+0Ch] eax +
jmp loc_1005681  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
jmp loc_1005681  +
mov eax [esi+4] +
push edi  +
mov edi ds:GetLastError +
test eax eax +
jz loc_1006ED4  +
push eax  +
push dword ptr [esi]  +
call ds:KillTimer  +
test eax eax +
jnz loc_1006ED0  +
call edi  +
mov [esi+0Ch] eax +
jmp loc_1006ED4  +
and dword ptr [esi+0Ch] 0 +
cmp [ebp+wParam] 1 +
jb loc_1006F05  +
mov eax [ebp+wParam] +
imul eax eax +
push 0  +
push eax  +
push 19771215h  +
push dword ptr [esi]  +
call ds:SetTimer  +
mov [esi+4] eax +
test eax eax +
jnz loc_1006F01  +
call edi  +
mov [esi+0Ch] eax +
jmp loc_1006F05  +
and dword ptr [esi+0Ch] 0 +
pop edi  +
jmp loc_100167C  +
cmp [ebp+lParam] 0 +
jnz loc_1006F1E  +
mov ecx [esi+8] +
push 8004FFFCh  +
call sub_1005E71  +
xor eax eax +
inc eax  +
jmp loc_100168D  +
***
push dword ptr [esi+1Ch]  +
call ds:SetEvent  +
call ds:GetLastError  +
mov [esi+0Ch] eax +
jmp loc_1002E68  +
***
push eax  +
call edi  +
jmp loc_1005BF9  +
***
mov edi 8007000Eh +
jmp loc_1003567  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1006F63  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_100355F  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1003550  +
push 1  +
mov ecx esi +
call sub_1005BBC  +
jmp loc_1003567  +
***
lea eax [ebp+lpMessageFilter] +
push eax  +
push 0  +
call esi  +
jmp loc_1005DAF  +
***
mov eax 8007000Eh +
jmp loc_1004E90  +
***
push esi  +
mov ecx [eax] +
mov esi [eax+18h] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
test esi esi +
jnz loc_1006F9F  +
pop esi  +
jmp locret_10056B7  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_1003973  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [esi+3Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+3Ch] 0 +
jmp loc_10058B7  +
***
mov eax 8007000Eh +
jmp loc_10027E0  +
and [esi+44h] edi +
jmp loc_10027DD  +
***
mov eax 80070057h +
jmp loc_1002728  +
***
mov [eax] edx +
jmp loc_1002726  +
***
mov eax 80004003h +
jmp loc_100288A  +
mov ebx 8007000Eh +
jmp loc_1002886  +
mov ebx 8007000Eh +
jmp loc_100287E  +
mov ecx [eax] +
lea edi [esi+3Ch] +
push edi  +
push eax  +
call dword ptr [ecx+6Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_100287E  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+4] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov ebx eax +
test ebx ebx +
jl loc_100287E  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov ebx eax +
test ebx ebx +
jl loc_100287E  +
mov edi [edi] +
push [ebp+var_4]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+28h]  +
mov ebx eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1002893  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1002886  +
***
mov eax dword ptr [ebp+Data] +
test eax eax +
setnz cl  +
mov [esi+4] cl +
mov [esi] eax +
test eax eax +
jz loc_100459D  +
jmp loc_10045A0  +
***
dec eax  +
jnz loc_100562A  +
movzx eax word ptr [ebx+esi*2] +
cmp ax 3Ah +
jnz loc_10070BB  +
cmp [ebx+esi*2+2] cx +
jnz loc_10070C8  +
cmp ax ax +
jz loc_10070D6  +
cmp ax cx +
jz loc_10070D6  +
add edi 0Ch +
jmp loc_1005604  +
mov ecx [ebp+arg_0] +
lea eax [ebx+esi*2+2] +
mov [ecx] eax +
jmp loc_1005621  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_1005621  +
push 3Ah  +
pop eax  +
jmp loc_1005624  +
***
push edi  +
xor edi edi +
cmp [esi+4] edi +
jle loc_1007108  +
mov eax [esi] +
lea eax [eax+edi*4] +
cmp dword ptr [eax] 0 +
jz loc_1007102  +
push dword ptr [eax]  +
call ??3@YAXPAX@Z  +
pop ecx  +
inc edi  +
cmp edi [esi+4] +
jl loc_10070F0  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop edi  +
jmp loc_10058DA  +
***
mov [ebp+var_3] 1 +
jmp loc_10044FB  +
lea ebx [edi+2] +
jmp loc_10044B0  +
dec eax  +
dec eax  +
jz loc_10072C6  +
dec eax  +
jz loc_10071FB  +
sub eax 3 +
jz loc_100717A  +
dec eax  +
jnz loc_100737D  +
cmp [ebp+var_2] al +
jz loc_1007150  +
cmp [esi+11h] al +
jnz loc_100736C  +
mov [esi+11h] al +
jmp loc_10044EE  +
lea ebx [edi+2] +
movzx ecx word ptr [ebx] +
cmp cx ax +
jz loc_100452E  +
cmp cx 2Dh +
jnz loc_10044B0  +
cmp [ebx+2] ax +
jmp loc_10044AA  +
xor ebx ebx +
cmp [ebp+lpString] ebx +
jz loc_1007350  +
push 0FFFFFFFFh  +
push offset aCscript  +
push [ebp+lpString]  +
call sub_1001B8C  +
test eax eax +
jnz loc_10071BE  +
cmp [ebp+var_1] bl +
jz loc_10071A7  +
cmp dword ptr [esi+18h] 43h +
jnz loc_1007358  +
mov [ebp+var_1] 1 +
mov byte ptr [esi+22Fh] 1 +
mov dword ptr [esi+18h] 43h +
jmp loc_10044F6  +
push 0FFFFFFFFh  +
push offset aWscript_0  +
push [ebp+lpString]  +
call sub_1001B8C  +
test eax eax +
jnz loc_100735B  +
cmp [ebp+var_1] bl +
jz loc_10071E4  +
cmp dword ptr [esi+18h] 57h +
jnz loc_1007358  +
mov [ebp+var_1] 1 +
mov byte ptr [esi+22Fh] 1 +
mov dword ptr [esi+18h] 57h +
jmp loc_10044F6  +
mov eax [ebp+lpString] +
test eax eax +
jz loc_1007363  +
mov [esi+230h] eax +
jmp loc_10044F6  +
cmp [esi+11h] al +
jnz loc_10044EA  +
jmp loc_100736C  +
mov byte ptr [esi+22Eh] 1 +
jmp loc_10044F6  +
cmp [ebp+lpString] 0 +
jz loc_1007374  +
push [ebp+lpString]  +
lea ecx [esi+234h] +
call sub_1011C87  +
jmp loc_1004545  +
cmp [esi+6] al +
jz loc_10054F7  +
jmp loc_100736C  +
xor eax eax +
cmp [ebp+var_4] al +
jz loc_1007266  +
cmp [esi+6] al +
jz loc_100736C  +
mov [ebp+var_4] 1 +
mov byte ptr [esi+7] 1 +
mov byte ptr [esi+8] 1 +
mov byte ptr [esi+6] 1 +
jmp loc_10044F6  +
xor edi edi +
push edi  +
cmp [ebp+lpString] edi +
jz loc_1007385  +
push edi  +
push edi  +
lea eax [ebp+CodePage] +
push eax  +
push [ebp+lpString]  +
push 0Ah  +
call sub_1015AA4  +
test al al +
jnz loc_100729F  +
or [ebp+CodePage] 0FFFFFFFFh +
push [ebp+CodePage]  +
call sub_1011C0D  +
test al al +
jz loc_100738C  +
mov eax [ebp+CodePage] +
mov byte ptr [esi+10h] 1 +
mov [esi+0Ch] eax +
jmp loc_10044F6  +
mov byte ptr [esi+16h] 1 +
mov byte ptr [esi+15h] 1 +
mov byte ptr [esi+14h] 1 +
mov byte ptr [esi+13h] 1 +
jmp loc_10044F6  +
cmp byte_1019001 0 +
jz loc_1007394  +
mov byte ptr [esi+17h] 1 +
jmp loc_10044F6  +
xor edi edi +
push edi  +
cmp [ebp+lpString] edi +
jz loc_100739D  +
push edi  +
push edi  +
lea eax [ebp+var_28] +
push eax  +
push [ebp+lpString]  +
push 0Ah  +
call sub_1015AA4  +
test al al +
jz loc_10073AE  +
mov eax [ebp+var_28] +
cmp eax edi +
jl loc_10073AE  +
mov byte ptr [esi+4] 1 +
mov byte ptr [esi+5] 1 +
mov [esi] eax +
jmp loc_10044F6  +
xor eax eax +
cmp [ebp+var_20] eax +
jnz loc_1007344  +
cmp [ebp+var_10] eax +
jnz loc_1007344  +
cmp [ebp+var_14] eax +
jnz loc_1007344  +
mov byte ptr [esi+22Dh] 1 +
jmp loc_10044F6  +
mov byte ptr [esi+22Ch] 1 +
jmp loc_10044F6  +
push ebx  +
push 0CEBh  +
jmp loc_10073A2  +
push ebx  +
jmp loc_100736D  +
push ebx  +
push 0CECh  +
jmp loc_10073A2  +
push 0  +
push 0CF1h  +
jmp loc_10073A2  +
push eax  +
push 0CE9h  +
jmp loc_10073A2  +
push 0  +
push 0CF5h  +
jmp loc_10073A2  +
push edi  +
push 0CE6h  +
jmp loc_10073A2  +
push 0CF3h  +
jmp loc_10073A2  +
push edi  +
push 0CF4h  +
jmp loc_10073A2  +
push 0  +
push 0CF6h  +
jmp loc_10073A2  +
push 0CE4h  +
mov ecx esi +
call sub_1011C45  +
jmp loc_1004510  +
push edi  +
push 0CE5h  +
jmp loc_10073A2  +
***
xor eax eax +
jmp loc_100500F  +
push ebx  +
push 0CEFh  +
jmp loc_1007498  +
push ebx  +
lea eax [ebp+WideCharStr] +
push edi  +
push eax  +
call sub_100502D  +
add esp 0Ch +
lea eax [ebp+WideCharStr] +
push eax  +
mov ecx esi +
call sub_1011AD7  +
mov edi eax +
test edi edi +
jge loc_1007472  +
cmp byte ptr [esi+6] 0 +
jz loc_1007410  +
mov ecx dword_101900C +
mov eax [ecx] +
call dword ptr [eax+8]  +
cmp edi 80070002h +
jnz loc_1007426  +
lea edx [ebp+WideCharStr] +
push edx  +
push 0CEEh  +
jmp loc_1007498  +
and [ebp+var_210] 0 +
lea eax [ebp+var_210] +
push eax  +
push edi  +
call sub_101060B  +
push [ebp+var_210]  +
mov eax dword_101900C +
mov ecx [eax] +
lea edx [ebp+WideCharStr] +
push edx  +
mov edx dword_1019024 +
push 0C84h  +
add edx 14h +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
add esp 14h +
push [ebp+var_210]  +
call ds:SysFreeString  +
jmp loc_10074B0  +
cmp edi 1 +
jnz loc_100500C  +
cmp byte ptr [esi+6] 0 +
jz loc_100748C  +
mov ecx dword_101900C +
mov eax [ecx] +
call dword ptr [eax+8]  +
lea edx [ebp+WideCharStr] +
push edx  +
push 0D48h  +
mov edx dword_1019024 +
mov eax dword_101900C +
mov ecx [eax] +
add edx 15h +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
add esp 10h +
mov eax 8004FFFFh +
jmp loc_100500E  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100593F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100594A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005955  +
***
lea eax [edx-0Ch] +
jmp loc_1003794  +
***
mov eax [edx+20h] +
cmp [eax+20h] bl +
jz loc_10074F5  +
mov eax 80004002h +
jmp loc_100374E  +
***
lea ecx [edx-4] +
jmp loc_100378B  +
***
cmp eax 80020101h +
jnz loc_1002990  +
mov eax 8004FFFFh +
jmp loc_1002990  +
***
mov eax 8004FFFFh +
jmp locret_10019F9  +
***
mov eax 80004003h +
jmp loc_1003605  +
***
mov eax 409h +
jmp loc_1003601  +
***
mov eax 80004003h +
jmp loc_100261A  +
***
push 0FFFFFFFFh  +
push offset aWsh  +
push dword ptr [ebp+0Ch]  +
call sub_1001B8C  +
test eax eax +
jz loc_10025B0  +
jmp loc_10075A1  +
mov eax [esi] +
lea ecx [ebp-8] +
push ecx  +
push offset loc_10022E8  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jl loc_10025F8  +
mov eax [ebp-8] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_10025F8  +
push 2  +
pop edi  +
jmp loc_10025C6  +
***
mov edi 80070057h +
jmp loc_10025F8  +
***
mov ecx [ebp-4] +
mov [eax] ecx +
mov [ebp-4] edi +
jmp loc_10025ED  +
***
mov edi 80004005h +
jmp loc_10025F8  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1002603  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100260E  +
***
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
jmp loc_1002616  +
***
mov eax 80004003h +
jmp loc_1003638  +
***
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1003638  +
***
mov edi 8007000Eh +
jmp loc_1003B55  +
mov ebx [ebx] +
mov eax [ebx] +
lea ecx [esi+4Ch] +
push ecx  +
push offset loc_1007620  +
push ebx  +
call dword ptr [eax]  +
jmp loc_1003B84  +
cmp [ebp+var_1C] 0 +
jz loc_1007613  +
mov eax [esi+24h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1003B6A  +
***
adc [edi+edx*4] bh +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
mov eax 80004005h +
jmp loc_1005FC8  +
***
cmp ecx 8004FFFEh +
jz loc_10076EA  +
mov eax [ebp-48h] +
mov [ebp+8] eax +
cmp eax ebx +
jz loc_1007655  +
cmp [eax] bx +
jnz loc_1007672  +
lea eax [ebp-10h] +
push eax  +
push ecx  +
call sub_101060B  +
mov edi eax +
cmp edi ebx +
jl loc_1005F9C  +
mov eax [ebp-10h] +
mov edi [ebp+0Ch] +
mov [ebp+8] eax +
mov eax [edi] +
lea ecx [ebp-14h] +
push ecx  +
lea ecx [ebp-8] +
push ecx  +
lea ecx [ebp-20h] +
push ecx  +
push edi  +
call dword ptr [eax+10h]  +
test eax eax +
jl loc_1007694  +
mov eax [edi] +
lea ecx [ebp-4] +
push ecx  +
push edi  +
call dword ptr [eax+14h]  +
jmp loc_100769B  +
or dword ptr [ebp-14h] 0FFFFFFFFh +
mov [ebp-8] ebx +
cmp [ebp-4] ebx +
jnz loc_10076AE  +
push dword ptr [ebp-8]  +
mov ecx [esi+40h] +
call sub_101422F  +
mov [ebp-4] eax +
mov edx [ebp-14h] +
mov ecx [esi+2Ch] +
mov eax [ecx] +
push ebx  +
push dword ptr [ebp-34h]  +
inc edx  +
push dword ptr [ebp-4]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-4Ch]  +
push edx  +
push dword ptr [ebp-8]  +
call dword ptr [eax+14h]  +
mov eax [esi+2Ch] +
cmp [eax+23h] bl +
jz loc_1005F9A  +
push dword ptr [ebp-8]  +
mov ecx esi +
push dword ptr [esi+40h]  +
push edi  +
call sub_1011E13  +
jmp loc_1005F9A  +
***
mov ecx [esi+2Ch] +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov edi eax +
jmp loc_1005F9C  +
***
mov ecx esi +
mov byte ptr [esi+51h] 1 +
call sub_1011D46  +
mov edi eax +
cmp edi ebx +
jl loc_1005F9C  +
lea eax [ebp-0Ch] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1011D86  +
mov edi eax +
cmp edi ebx +
jl loc_1005F9C  +
mov eax [ebp-0Ch] +
lea edx [ebp-18h] +
push edx  +
push 400h  +
push 1  +
lea edx [ebp-1Ch] +
push edx  +
mov esi offset dword_10024C4 +
push esi  +
mov [ebp-18h] ebx +
mov dword ptr [ebp-1Ch] offset aWscript_onscri +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_1005FDA  +
mov eax [ebp-0Ch] +
push ebx  +
push ebx  +
push ebx  +
lea edx [ebp-30h] +
push edx  +
push 1  +
push 400h  +
push esi  +
push dword ptr [ebp-18h]  +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
jmp loc_1005FE4  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005FC6  +
***
call ds:GetLastError  +
test eax eax +
jg loc_100779E  +
mov esi eax +
jmp loc_1002105  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1007797  +
mov esi 8007000Eh +
jmp loc_10020F8  +
call ds:GetLastError  +
test eax eax +
jle loc_10077C8  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_10020F8  +
***
xor eax eax +
inc eax  +
jmp loc_1001E70  +
mov [ebp+lpBuffer] 1 +
jmp loc_1001E3A  +
mov [ebp+lpBuffer] 1 +
jmp loc_1001E39  +
lea eax [ebp+var_88] +
push eax  +
lea eax [ebp+var_94] +
push eax  +
push [ebp+lpBuffer]  +
call ds:SysStringLen  +
push eax  +
push [ebp+lpBuffer]  +
push 2Eh  +
push dword ptr [esi+238h]  +
call wcsrchr  +
pop ecx  +
pop ecx  +
push eax  +
call sub_101214B  +
cmp eax ebx +
mov [ebp+lpBuffer] eax +
jl loc_1001E2D  +
mov eax [ebp+var_88] +
mov [ebp+var_8C] eax +
jmp loc_1001D83  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100784F  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+lpBuffer] eax +
jmp loc_1001E2D  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100786B  +
and eax 0FFFFh +
or eax 80070000h +
push offset aSaferrecordeve  +
push [ebp+hLibModule]  +
mov [ebp+lpBuffer] eax +
call edi  +
cmp eax ebx +
jz loc_1001E2D  +
push ebx  +
push [ebp+var_8C]  +
push [ebp+var_84]  +
call eax  +
jmp loc_1001E2D  +
push [ebp+hObject]  +
call ds:ImpersonateLoggedOnUser  +
test eax eax +
jnz loc_1001E2A  +
jmp loc_100783B  +
push [ebp+var_88]  +
call ds:SysFreeString  +
jmp loc_1001E39  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1001E43  +
***
mov edi 8007000Eh +
jmp loc_1004714  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_100473C  +
***
mov eax 80004003h +
jmp loc_1002C0C  +
***
mov eax 80004003h +
jmp loc_1002D56  +
***
mov eax 8007000Eh +
jmp loc_1002D56  +
***
cmp esi 800401F3h +
jnz loc_100793A  +
push [ebp+lpWideCharStr]  +
push 0C1Dh  +
push offset aWscript_create  +
push offset dword_1001ACC  +
call sub_1010991  +
mov esi 80020009h +
jmp loc_1007975  +
lea eax [ebp+lpWideCharStr] +
push eax  +
push esi  +
call sub_101060B  +
push [ebp+lpWideCharStr]  +
push offset aWscript_create  +
push offset dword_1001ACC  +
call sub_1010AA9  +
add esp 0Ch +
jmp loc_1002B72  +
push [ebp+lpWideCharStr]  +
push 0C1Fh  +
push offset aWscript_create  +
push offset dword_1001ACC  +
call sub_1010991  +
add esp 10h +
jmp loc_1002B72  +
***
mov eax 80004003h +
jmp loc_1002B10  +
***
push edi  +
mov edi [ebp-18h] +
lea eax [ebp-14h] +
push eax  +
call sub_1012FF5  +
test eax eax +
jge loc_1002AF8  +
push 0C1Eh  +
push offset aWscript_create  +
push offset dword_1001ACC  +
call sub_1010991  +
add esp 0Ch +
mov ebx 80020009h +
jmp loc_1002B25  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1002B00  +
***
mov eax 80004003h +
jmp loc_1002A19  +
mov eax 80004003h +
jmp loc_1002A18  +
mov eax 80004003h +
jmp loc_1002A17  +
mov eax 8007000Eh +
jmp loc_1002A17  +
***
mov eax 80004003h +
jmp loc_1001C97  +
***
lea esi [eax-8] +
jmp loc_1007A02  +
lea esi [eax-4] +
lea ecx [eax-0Ch] +
neg ecx  +
sbb ecx ecx +
and ecx esi +
jmp loc_1003F36  +
***
mov eax 80004003h +
jmp loc_1002C47  +
***
mov eax [edi] +
mov ecx [eax+4] +
mov [edi] ecx +
push eax  +
mov ecx esi +
call sub_1014EC0  +
jmp loc_1005AA6  +
***
mov edi 8007000Eh +
jmp loc_10052FB  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+eax*4] +
push 2Fh  +
pop edx  +
cmp dx [ecx] +
jnz loc_1007A49  +
inc [ebp+var_8]  +
inc eax  +
cmp eax [ebp+arg_0] +
jge loc_10052A8  +
jmp loc_1007A38  +
mov ecx [ebp+var_8] +
cmp [ebp+rgIndices] ecx +
jge loc_10052EB  +
mov ecx [ebp+arg_4] +
mov eax [ecx+eax*4] +
push 2Fh  +
pop ecx  +
cmp cx [eax] +
jnz loc_1007B76  +
lea ecx [eax+2] +
mov esi ecx +
mov [ebp+var_C] edi +
mov [ebp+var_10] edi +
jmp loc_1007AA7  +
push 3Ah  +
pop edx  +
cmp dx ax +
jz loc_1007AB3  +
lea edx [esi+2] +
xor edi edi +
cmp di [edx] +
jnz loc_1007AA2  +
push 2Bh  +
pop edi  +
cmp di ax +
jz loc_1007ABE  +
push 2Dh  +
pop edi  +
cmp di ax +
jz loc_1007ABE  +
inc [ebp+var_C]  +
mov esi edx +
movzx eax word ptr [esi] +
xor edx edx +
cmp dx ax +
jz loc_1007AC5  +
jmp loc_1007A80  +
inc esi  +
mov [ebp+var_10] 1 +
inc esi  +
jmp loc_1007AC5  +
mov [ebp+var_10] 2 +
push 8  +
pop eax  +
push [ebp+var_C]  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push ecx  +
call ds:SysAllocStringLen  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jz loc_1005307  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [ebx+24h]  +
call ds:SafeArrayPutElement  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test edi edi +
jl loc_10052F2  +
mov eax [ebp+var_10] +
sub eax 0 +
jz loc_1007B48  +
dec eax  +
jz loc_1007B2D  +
dec eax  +
jnz loc_1007B4E  +
push 0Bh  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
push 2Bh  +
xor ecx ecx +
pop eax  +
cmp ax [esi] +
setnz cl  +
dec ecx  +
mov word ptr [ebp+pvarg.anonymous_0+8] cx +
jmp loc_1007B4E  +
push 8  +
pop eax  +
push esi  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jz loc_1005307  +
jmp loc_1007B4E  +
xor eax eax +
mov word ptr [ebp+pvarg.anonymous_0] ax +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [ebx+28h]  +
call ds:SafeArrayPutElement  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test edi edi +
jl loc_10052F2  +
inc [ebp+rgIndices]  +
mov eax [ebp+var_14] +
inc eax  +
xor edi edi +
cmp eax [ebp+arg_0] +
mov [ebp+var_14] eax +
jge loc_10052EB  +
jmp loc_1007A55  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
jmp loc_10052FB  +
***
mov edi 8007000Eh +
jmp loc_100519A  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+eax*4] +
push 2Fh  +
pop edx  +
cmp dx [ecx] +
jz loc_1007BB3  +
inc [ebp+var_4]  +
inc eax  +
cmp eax [ebp+arg_0] +
jge loc_100515F  +
jmp loc_1007BA2  +
mov eax [ebp+var_4] +
cmp [ebp+rgIndices] eax +
jge loc_1005189  +
mov eax [ebp+arg_4] +
mov eax [eax+ebx*4] +
push 2Fh  +
pop ecx  +
cmp cx [eax] +
jz loc_1007C1A  +
push 8  +
pop ecx  +
push eax  +
mov word ptr [ebp+pvarg.anonymous_0] cx +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jz loc_10051A7  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [esi+24h]  +
call ds:SafeArrayPutElement  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test edi edi +
jl loc_1005192  +
inc [ebp+rgIndices]  +
inc ebx  +
cmp ebx [ebp+arg_0] +
jge loc_1005189  +
jmp loc_1007BBF  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_100519A  +
***
mov edi 8007000Eh +
jmp loc_1005116  +
mov edi 8007000Eh +
jmp loc_100510E  +
push 8  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+rgIndices] +
push dword ptr [ebx+eax*4]  +
call ds:SysAllocString  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
test eax eax +
jz loc_1007CA0  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [esi+28h]  +
call ds:SafeArrayPutElement  +
mov edi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
test edi edi +
jl loc_100510D  +
inc [ebp+rgIndices]  +
mov eax [ebp+rgIndices] +
cmp eax [ebp+arg_0] +
jge loc_10050DE  +
jmp loc_1007C45  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1005116  +
mov edi 8007000Eh +
jmp loc_100510D  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005B47  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005B52  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1005B5D  +
***
lea ecx [eax-8] +
jmp loc_1007CDC  +
lea ecx [eax-8] +
neg ecx  +
lea edx [eax-4] +
sbb ecx ecx +
and ecx edx +
mov edx [ebp+0Ch] +
add eax 0FFFFFFF8h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
push eax  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
jmp loc_100365A  +
mov eax 8007000Eh +
jmp loc_1003685  +
***
mov eax 8007000Eh +
jmp loc_10026B1  +
***
cmp byte_10194C4 0 +
push eax  +
jz loc_1007D2B  +
call sub_10166E6  +
jmp loc_10056F3  +
call esi  +
jmp loc_10056F3  +
push eax  +
call esi  +
jmp loc_1005700  +
***
cmp dword_1019024 7D0h +
jz loc_100402C  +
mov dword_10194C8 180000h +
jmp loc_100401F  +
push 9  +
pop eax  +
cmp ax cx +
jz loc_100402C  +
push ebx  +
push edi  +
push esi  +
push hInstance  +
call sub_101550B  +
cmp eax hInstance +
jnz loc_1007D83  +
push eax  +
call sub_10166E6  +
jmp loc_1007D8B  +
test eax eax +
jnz loc_1007F40  +
push 5  +
lea eax [ebp+LCData] +
push eax  +
push 3  +
push esi  +
call ds:GetLocaleInfoA  +
test eax eax +
jnz loc_1007DA8  +
mov eax dword_101901C +
jmp loc_1007F37  +
mov esi 104h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 3E9h  +
push hInstance  +
call ds:LoadStringA  +
test eax eax +
jz loc_1007D9E  +
lea eax [ebp+LCData] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
mov ebx offset dword_1007F48 +
push ebx  +
lea eax [ebp+var_110] +
push esi  +
push eax  +
call sub_100D132  +
add esp 14h +
push esi  +
lea eax [ebp+Filename] +
push eax  +
push hInstance  +
call ds:GetModuleFileNameA  +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_110] +
push eax  +
mov eax esi +
lea ecx [ebp+Filename] +
call sub_10155DD  +
mov edi ds:LoadLibraryExA +
push 2  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_1007F40  +
push 2  +
push eax  +
lea eax [ebp+var_110] +
push eax  +
call edi  +
test eax eax +
jnz loc_1007F40  +
lea eax [ebp+LCData] +
push eax  +
call ds:lstrlenA  +
cmp eax 2 +
jle loc_1007EBC  +
lea eax [ebp+LCData] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
lea eax [ebp+var_110] +
push esi  +
push eax  +
mov byte ptr [ebp-0Ah] 0 +
call sub_100DE92  +
add esp 14h +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_110] +
push eax  +
mov eax esi +
lea ecx [ebp+Filename] +
call sub_10155DD  +
push 2  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_1007F40  +
push 2  +
push eax  +
lea eax [ebp+var_110] +
push eax  +
call edi  +
test eax eax +
jnz loc_1007F40  +
call ds:GetUserDefaultLCID  +
push 5  +
lea ecx [ebp+LCData] +
push ecx  +
and eax 3FFh +
or eax 400h +
push 3  +
push eax  +
call ds:GetLocaleInfoA  +
test eax eax +
jz loc_1007D9E  +
lea eax [ebp+LCData] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
lea eax [ebp+var_110] +
push esi  +
push eax  +
call sub_100DE92  +
add esp 14h +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_110] +
push eax  +
mov eax esi +
lea ecx [ebp+Filename] +
call sub_10155DD  +
push 2  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
call edi  +
test eax eax +
jnz loc_1007F40  +
push 2  +
push eax  +
lea eax [ebp+var_110] +
push eax  +
call edi  +
test eax eax +
jnz loc_1007F40  +
mov eax hInstance +
pop edi  +
pop ebx  +
jmp loc_1004031  +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1005418  +
***
mov edi 800h +
push edi  +
lea eax [ebp+MultiByteStr] +
push eax  +
push [ebp+uID]  +
push dword_101901C  +
call ds:LoadStringA  +
test eax eax +
jz loc_10040B4  +
push edi  +
lea eax [ebp+WideCharStr] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+MultiByteStr] +
push eax  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
jmp loc_1004093  +
xor eax eax +
jmp loc_10040BA  +
***
call ds:GetLastError  +
cmp eax ebx +
jle loc_1007FCC  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_10036CD  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1007FB8  +
call sub_10043F7  +
mov [ebp+lpFileName] esp +
cmp esp ebx +
jnz loc_1008002  +
mov esi 8007000Eh +
jmp loc_10036CD  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpFileName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1007FB8  +
mov eax [ebp+cchWideChar] +
call sub_10043F7  +
mov edi esp +
lea eax [ebp+FilePart] +
push eax  +
push edi  +
push [ebp+cchWideChar]  +
push [ebp+lpFileName]  +
call ds:GetFullPathNameA  +
test eax eax +
jz loc_1007FB8  +
push [ebp+cchWideChar]  +
mov esi ds:MultiByteToWideChar +
push [ebp+lpBuffer]  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1007FB8  +
mov eax [ebp+FilePart] +
push ebx  +
push ebx  +
sub eax edi +
push eax  +
push edi  +
push ebx  +
push ebx  +
call esi  +
mov ecx [ebp+lpBuffer] +
lea eax [ecx+eax*2] +
mov ecx [ebp+lpFilePart] +
mov [ecx] eax +
mov esi ebx +
jmp loc_10036CD  +
***
jle loc_1003425  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1003425  +
mov eax [ebp+lpWideCharStr] +
cmp eax ebx +
jz loc_10080CD  +
cmp [eax] bx +
jz loc_10080CD  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push eax  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_10080B0  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_100806E  +
call sub_10043F7  +
mov [ebp+lpSubKey] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSubKey]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10080A6  +
jmp loc_10080D0  +
mov [ebp+lpSubKey] ebx +
push [ebp+phkResult]  +
push [ebp+samDesired]  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
jmp loc_100341B  +
***
jle loc_1004113  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1004113  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_100811F  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_10080E8  +
call sub_10043F7  +
mov [ebp+lpSubKey] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSubKey]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1008115  +
push ebx  +
push [ebp+phkResult]  +
push ebx  +
push [ebp+samDesired]  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExA  +
jmp loc_1004109  +
***
mov eax 80040153h +
jmp loc_1003936  +
jle loc_1003936  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1003936  +
cmp [ebp+Type] 2 +
jz loc_1003924  +
jmp loc_1008156  +
cmp [ebp+lpWideCharStr] ebx +
jz loc_10081C6  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_10081A9  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_1008160  +
call sub_10043F7  +
mov [ebp+lpValueName] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpValueName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_100819F  +
jmp loc_10081C9  +
mov [ebp+lpValueName] ebx +
mov esi [ebp+cchWideChar] +
inc esi  +
mov eax esi +
call sub_10043F7  +
mov edi esp +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
mov [ebp+cbData] esi +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
cmp eax ebx +
jnz loc_1008160  +
cmp [ebp+Type] 1 +
jz loc_1008207  +
cmp [ebp+Type] 2 +
jnz loc_1008156  +
mov eax [ebp+cbData] +
cmp [edi+eax-1] bl +
jnz loc_1008156  +
push [ebp+cchWideChar]  +
push [ebp+lpData]  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_1003934  +
jmp loc_100819F  +
***
cmp [ebp+lpWideCharStr] ebx +
jz loc_100827A  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_100825D  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_100499B  +
call sub_10043F7  +
mov [ebp+lpValueName] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpValueName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1008250  +
jmp loc_100827D  +
mov [ebp+lpValueName] ebx +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegQueryValueExA  +
jmp loc_1004993  +
cmp [ebp+Type] 4 +
jnz loc_10082AD  +
cmp [ebp+cbData] 4 +
jnz loc_10082AD  +
xor eax eax +
jmp loc_10049A7  +
mov eax 80040153h +
jmp loc_10049A7  +
***
cmp edi ebx +
jz loc_1008360  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+cchMultiByte] eax +
cmp eax ebx +
jnz loc_10082E7  +
call ds:GetLastError  +
cmp eax ebx +
jmp loc_10043D4  +
call sub_10043F7  +
mov [ebp+lpMultiByteStr] esp +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0FFFFFFFFh  +
push edi  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10082DA  +
mov esi [ebp+var_C1C] +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+MultiByteStr] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpMultiByteStr]  +
mov edi 400h +
push [ebp+var_C14]  +
mov [ebp+cbData] edi +
call ds:RegQueryValueExA  +
cmp eax ebx +
jnz loc_10043D4  +
mov eax [ebp+cbData] +
cmp eax ebx +
jnz loc_1008368  +
mov eax 80004005h +
jmp loc_10043E0  +
mov [ebp+lpMultiByteStr] ebx +
jmp loc_1008311  +
cmp [ebp+Type] 1 +
mov [ebp+eax+var_405] bl +
jz loc_100838C  +
cmp [ebp+Type] 2 +
jz loc_100838C  +
lea eax [ebp+MultiByteStr] +
jmp loc_10042DE  +
push edi  +
lea eax [ebp+String] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+MultiByteStr] +
push eax  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_10082DA  +
mov eax [ebp+var_C14] +
jmp loc_10042DE  +
cmp [ebp+Type] 4 +
jnz loc_1004349  +
cmp [ebp+cbData] 4 +
jnz loc_1004349  +
cmp [eax] ebx +
setnz al  +
mov [esi] al +
jmp loc_100433E  +
***
mov eax 8000FFFFh +
jmp loc_1002284  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1002283  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1002283  +
xor eax eax +
jmp loc_1002283  +
xor ecx ecx +
cmp ebx 8 +
setz cl  +
jmp loc_100226A  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1002282  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1002282  +
***
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_100846B  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10021B1  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10021B1  +
call sub_10043F7  +
mov [ebp+lpFileName] esp +
cmp esp ebx +
jnz loc_1008481  +
mov eax 8007000Eh +
jmp loc_10021B1  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpFileName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_100844E  +
push ebx  +
push [ebp+dwFlagsAndAttributes]  +
push [ebp+dwCreationDisposition]  +
push ebx  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call ds:CreateFileA  +
jmp loc_100219C  +
***
mov eax 80004003h +
jmp loc_1001A9C  +
***
mov eax [ebp+arg_0] +
jmp loc_1001B42  +
***
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10047FC  +
***
mov eax 8002000Bh +
jmp loc_1002433  +
mov eax [edi+14h] +
lea ecx [ebp+pptlib] +
push ecx  +
push [ebp+lcid]  +
movzx ecx word ptr [eax+18h] +
push 0  +
push ecx  +
push dword ptr [eax+10h]  +
call ds:LoadRegTypeLib  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_100850A  +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+arg_0] +
jmp loc_1002430  +
push [ebp+pptlib]  +
mov ecx edi +
call sub_100479C  +
mov edi eax +
mov eax [ebp+pptlib] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1002437  +
***
mov eax 80020001h +
jmp loc_10024BC  +
***
mov eax 80020001h +
jmp loc_1002571  +
***
retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
sub eax [esi+8] +
pop esi  +
neg eax  +
sbb eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:SysFreeString +
mov esi ecx +
push dword ptr [esi+18h]  +
mov dword ptr [esi] offset off_1001A10 +
call edi  +
push dword ptr [esi+1Ch]  +
call edi  +
push dword ptr [esi+20h]  +
call edi  +
mov eax [esi+24h] +
test eax eax +
jz loc_100B725  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+28h] +
test eax eax +
jz loc_100B73D  +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [esi+28h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [esi+2Ch] +
cmp byte ptr [eax+19h] 0 +
pop edi  +
pop esi  +
jz locret_100B74F  +
push eax  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_100B768  +
mov eax 80004003h +
jmp loc_100B7B5  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset riid +
xor eax eax +
cmps   +
jz loc_100B79D  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100239C +
xor eax eax +
cmps   +
jz loc_100B79D  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_10085CC +
xor eax eax +
cmps   +
jnz loc_100B7AC  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_100B7B3  +
and [edx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B6F7  +
test [ebp+arg_0] 1 +
jz loc_100B7D8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_C] +
and dword ptr [edi] 0 +
cmp [ebp+arg_4] 0 +
jz loc_100B816  +
mov eax 8002000Bh +
jmp loc_100B83D  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100B6DD  +
test eax eax +
jnz loc_100B82C  +
mov eax 8000FFFFh +
jmp loc_100B83C  +
mov eax [esi+24h] +
mov [edi] eax +
mov eax [esi+24h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100B6DD  +
test eax eax +
jnz loc_100B862  +
mov eax 8000FFFFh +
jmp loc_100B874  +
push [ebp+arg_14]  +
mov eax [esi+24h] +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+28h]  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100B6DD  +
test eax eax +
jnz loc_100B899  +
mov eax 8000FFFFh +
jmp loc_100B8B5  +
push [ebp+arg_20]  +
mov eax [esi+24h] +
push [ebp+arg_1C]  +
mov ecx [eax] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_4]  +
push esi  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_100B8D3  +
mov eax 80004003h +
jmp loc_100B8FF  +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_100B6DD  +
test eax eax +
jnz loc_100B8EC  +
mov eax 8000FFFFh +
jmp loc_100B8FE  +
push 0  +
push 0  +
add edi 10h +
push edi  +
call ds:InterlockedCompareExchange  +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_100B91D  +
mov eax 80004003h +
jmp loc_100B949  +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_100B6DD  +
test eax eax +
jnz loc_100B936  +
mov eax 8000FFFFh +
jmp loc_100B948  +
push 0  +
push 0  +
add edi 0Ch +
push edi  +
call ds:InterlockedCompareExchange  +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_100B967  +
mov eax 80004003h +
jmp loc_100B993  +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_100B6DD  +
test eax eax +
jnz loc_100B980  +
mov eax 8000FFFFh +
jmp loc_100B992  +
push 0  +
push 0  +
add edi 14h +
push edi  +
call ds:InterlockedCompareExchange  +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_100B9B1  +
mov eax 80004003h +
jmp loc_100BA05  +
and dword ptr [edi] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100B6DD  +
test eax eax +
jnz loc_100B9CA  +
mov eax 8000FFFFh +
jmp loc_100BA04  +
push ebx  +
lea ebx [esi+2Ch] +
mov ecx ebx +
call sub_1005DBA  +
test eax eax +
jz loc_100B9F5  +
push dword ptr [esi+18h]  +
call ds:SysStringLen  +
push eax  +
push dword ptr [esi+18h]  +
call ds:SysAllocStringLen  +
mov ecx ebx +
mov [edi] eax +
call sub_1005EF9  +
cmp dword ptr [edi] 0 +
pop ebx  +
jnz loc_100BA02  +
mov eax 8007000Eh +
jmp loc_100BA04  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_100BA23  +
mov eax 80004003h +
jmp loc_100BA77  +
and dword ptr [edi] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100B6DD  +
test eax eax +
jnz loc_100BA3C  +
mov eax 8000FFFFh +
jmp loc_100BA76  +
push ebx  +
lea ebx [esi+2Ch] +
mov ecx ebx +
call sub_1005DBA  +
test eax eax +
jz loc_100BA67  +
push dword ptr [esi+1Ch]  +
call ds:SysStringLen  +
push eax  +
push dword ptr [esi+1Ch]  +
call ds:SysAllocStringLen  +
mov ecx ebx +
mov [edi] eax +
call sub_1005EF9  +
cmp dword ptr [edi] 0 +
pop ebx  +
jnz loc_100BA74  +
mov eax 8007000Eh +
jmp loc_100BA76  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_100BA95  +
mov eax 80004003h +
jmp loc_100BAE9  +
and dword ptr [edi] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100B6DD  +
test eax eax +
jnz loc_100BAAE  +
mov eax 8000FFFFh +
jmp loc_100BAE8  +
push ebx  +
lea ebx [esi+2Ch] +
mov ecx ebx +
call sub_1005DBA  +
test eax eax +
jz loc_100BAD9  +
push dword ptr [esi+20h]  +
call ds:SysStringLen  +
push eax  +
push dword ptr [esi+20h]  +
call ds:SysAllocStringLen  +
mov ecx ebx +
mov [edi] eax +
call sub_1005EF9  +
cmp dword ptr [edi] 0 +
pop ebx  +
jnz loc_100BAE6  +
mov eax 8007000Eh +
jmp loc_100BAE8  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov edi ds:SysStringLen +
mov esi ecx +
call edi  +
mov ebx ds:SysAllocStringLen +
push eax  +
push [ebp+arg_8]  +
call ebx  +
mov [ebp+arg_8] eax +
test eax eax +
jz loc_100BB43  +
push [ebp+arg_C]  +
call edi  +
push eax  +
push [ebp+arg_C]  +
call ebx  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100BB43  +
push [ebp+arg_10]  +
call edi  +
push eax  +
push [ebp+arg_10]  +
call ebx  +
mov ebx eax +
test ebx ebx +
jnz loc_100BB5E  +
push [ebp+arg_8]  +
mov esi ds:SysFreeString +
call esi  +
push [ebp+var_4]  +
call esi  +
push 0  +
call esi  +
mov eax 8007000Eh +
jmp loc_100BBA5  +
push [ebp+Value]  +
mov edi ds:InterlockedExchange +
lea eax [esi+10h] +
push eax  +
call edi  +
push [ebp+arg_0]  +
lea eax [esi+0Ch] +
push eax  +
call edi  +
push [ebp+arg_4]  +
lea eax [esi+14h] +
push eax  +
call edi  +
lea edi [esi+2Ch] +
mov ecx edi +
call sub_1005DBA  +
test eax eax +
jz loc_100BBA3  +
mov eax [ebp+var_4] +
mov [esi+18h] eax +
mov eax [ebp+arg_8] +
mov ecx edi +
mov [esi+1Ch] eax +
mov [esi+20h] ebx +
call sub_1005EF9  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea edi [esi+4] +
push edi  +
call ds:InterlockedDecrement  +
mov ebx eax +
test ebx ebx +
jnz loc_100BBFE  +
mov ecx esi +
call sub_100B6DD  +
test eax eax +
jz loc_100BBE6  +
test esi esi +
jz loc_100BBFE  +
push 1  +
mov ecx esi +
call sub_100B7BE  +
jmp loc_100BBFE  +
push edi  +
call ds:InterlockedIncrement  +
push 0  +
push esi  +
push 40Bh  +
push dword ptr [esi+8]  +
call ds:PostThreadMessageA  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
xor eax eax +
push esi  +
mov esi ecx +
lea ecx [esi+2Ch] +
mov dword ptr [esi] offset off_1001A10 +
mov dword ptr [esi+4] 1 +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov [esi+24h] eax +
mov [esi+28h] eax +
call sub_1004ADC  +
call ds:GetCurrentThreadId  +
mov [esi+8] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 48h  +
mov [ebp+pptlib] ebx +
mov [eax] ebx +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_100BC7A  +
mov ecx eax +
call sub_100BC0C  +
mov esi eax +
jmp loc_100BC7C  +
xor esi esi +
cmp esi ebx +
jz loc_100BCDE  +
cmp [esi+45h] bl +
jz loc_100BCDE  +
cmp [esi+44h] bl +
jnz loc_100BCDE  +
mov edi [ebp+arg_0] +
mov [esi+28h] edi +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [edi] +
push 1  +
push edi  +
call dword ptr [eax+10h]  +
lea eax [ebp+pptlib] +
push eax  +
push 409h  +
push ebx  +
push 1  +
push offset rguid  +
call ds:LoadRegTypeLib  +
mov edi eax +
cmp edi ebx +
jl loc_100BCE3  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
lea edx [esi+24h] +
push edx  +
push offset dword_10085CC  +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
cmp edi ebx +
jl loc_100BCE3  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor esi esi +
xor edi edi +
jmp loc_100BCE3  +
mov edi 8007000Eh +
mov eax [ebp+pptlib] +
cmp eax ebx +
jz loc_100BCF0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jz loc_100BCFA  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_100BD1B  +
mov eax 80004003h +
jmp loc_100BD57  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset riid +
xor eax eax +
cmps   +
jz loc_100BD3F  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100BD5C +
xor eax eax +
cmps   +
jnz loc_100BD4E  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_100BD55  +
and [edx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10019FC +
jz loc_100BD8C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+14h] +
test esi esi +
jnz loc_100BDAC  +
mov eax 80004003h +
jmp loc_100BDF5  +
and dword ptr [esi] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_100BDBC  +
mov eax 80040110h +
jmp loc_100BDF5  +
and dword ptr [ebp+14h] 0 +
push edi  +
lea eax [ebp+14h] +
push eax  +
mov eax [ebp+8] +
push eax  +
push dword ptr [eax+0Ch]  +
call sub_100C986  +
mov edi eax +
test edi edi +
jl loc_100BDE5  +
mov eax [ebp+14h] +
mov ecx [eax] +
push esi  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
mov eax [ebp+14h] +
test eax eax +
jz loc_100BDF2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
push offset unk_10194B8  +
jz loc_100BE17  +
call ds:InterlockedIncrement  +
jmp loc_100BE31  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_100BE31  +
push eax  +
push eax  +
mov eax [ebp+8] +
push 12h  +
push dword ptr [eax+8]  +
call ds:PostThreadMessageA  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_100BE63  +
test esi esi +
jz loc_100BE63  +
push 1  +
mov ecx esi +
call sub_100BD71  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10019FC +
mov [esi+0Ch] eax +
mov dword ptr [esi+4] 1 +
call ds:GetCurrentThreadId  +
mov [esi+8] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
sub eax [esi+14h] +
pop esi  +
neg eax  +
sbb eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
sub eax [esi+18h] +
pop esi  +
neg eax  +
sbb eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_100BEEA  +
mov eax 80004003h +
jmp loc_100BF8B  +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
push edi  +
push 4  +
pop ecx  +
mov edi eax +
mov esi offset riid +
xor ebx ebx +
cmps   +
jz loc_100BF72  +
push 4  +
pop ecx  +
mov edi eax +
mov esi offset dword_100239C +
xor ebx ebx +
cmps   +
jz loc_100BF72  +
push 4  +
pop ecx  +
mov edi eax +
mov esi offset loc_10022E8 +
xor ebx ebx +
cmps   +
jnz loc_100BF28  +
mov eax [ebp+8] +
lea esi [eax+4] +
jmp loc_100BF56  +
push 4  +
pop ecx  +
mov edi eax +
mov esi offset dword_10086B4 +
xor ebx ebx +
cmps   +
jnz loc_100BF40  +
mov eax [ebp+8] +
lea esi [eax+8] +
jmp loc_100BF56  +
push 4  +
pop ecx  +
mov edi eax +
mov esi offset loc_100BF90 +
xor ebx ebx +
cmps   +
jnz loc_100BF62  +
mov eax [ebp+8] +
lea esi [eax+0Ch] +
mov ecx eax +
neg ecx  +
sbb ecx ecx +
and ecx esi +
mov [edx] ecx +
jmp loc_100BF77  +
push 4  +
mov edi eax +
pop ecx  +
mov esi offset dword_10085DC +
xor eax eax +
cmps   +
jnz loc_100BF81  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_100BF88  +
and [edx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
xchg dh [edx-454B4E6Ah] +
sbb dl [eax] +
mov dh 9Ch +
add [edx+71D3400h] ch +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 10h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
lea ecx [esi-4] +
call sub_100BEBA  +
test eax eax +
jnz loc_100BFDC  +
mov eax 8000FFFFh +
jmp loc_100BFFA  +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_100BFEA  +
mov eax 80004003h +
jmp loc_100BFFA  +
mov ecx [esi+2Ch] +
mov [eax] ecx +
mov eax [esi+2Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_C] +
and dword ptr [edi] 0 +
cmp [ebp+arg_4] 0 +
jz loc_100C01D  +
mov eax 8002000Bh +
jmp loc_100C044  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100BEBA  +
test eax eax +
jnz loc_100C033  +
mov eax 8000FFFFh +
jmp loc_100C043  +
mov eax [esi+2Ch] +
mov [edi] eax +
mov eax [esi+2Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100BEBA  +
test eax eax +
jnz loc_100C069  +
mov eax 8000FFFFh +
jmp loc_100C07B  +
push [ebp+arg_14]  +
mov eax [esi+2Ch] +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+28h]  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100BEBA  +
test eax eax +
jnz loc_100C0A0  +
mov eax 8000FFFFh +
jmp loc_100C0BC  +
push [ebp+arg_20]  +
mov eax [esi+2Ch] +
push [ebp+arg_1C]  +
mov ecx [eax] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_4]  +
push esi  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+pUnk] +
mov ecx esi +
call sub_100BEBA  +
test eax eax +
jnz loc_100C0E1  +
mov eax 8000FFFFh +
jmp loc_100C14E  +
cmp byte ptr [esi+24h] 0 +
jz loc_100C0EE  +
mov eax 80004005h +
jmp loc_100C14E  +
mov eax [ebp+arg_8] +
and [ebp+pUnk] 0 +
push ebx  +
push edi  +
lea edx [ebp+pUnk] +
push edx  +
mov edi offset iid +
push edi  +
mov byte ptr [esi+24h] 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jl loc_100C13D  +
push [ebp+arg_4]  +
call ds:SysAllocString  +
mov [esi+38h] eax +
test eax eax +
jnz loc_100C127  +
mov ebx 8007000Eh +
jmp loc_100C13D  +
add esi 40h +
push esi  +
push [ebp+pUnk]  +
push edi  +
call ds:CoMarshalInterThreadInterfaceInStream  +
mov ebx eax +
test ebx ebx +
jl loc_100C13D  +
xor ebx ebx +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_100C14A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax ebx +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100BEBA  +
test eax eax +
jnz loc_100C173  +
mov eax 8000FFFFh +
jmp loc_100C1AA  +
push ebx  +
push edi  +
lea edi [esi+44h] +
mov ecx edi +
xor ebx ebx +
call sub_1005DBA  +
test eax eax +
jz loc_100C1A1  +
mov ecx [esi+3Ch] +
test ecx ecx +
jz loc_100C198  +
push 8004FFFCh  +
call sub_1005E71  +
mov ebx eax +
mov ecx edi +
call sub_1005EF9  +
jmp loc_100C1A6  +
mov ebx 80004005h +
pop edi  +
mov eax ebx +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_100BEBA  +
test eax eax +
jnz loc_100C1CF  +
mov eax 8000FFFFh +
jmp loc_100C1F1  +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_100C1DE  +
mov eax 80004003h +
jmp loc_100C1F0  +
push 0  +
push 0  +
add edi 1Ch +
push edi  +
call ds:InterlockedCompareExchange  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jnz loc_100C20E  +
mov eax 80004003h +
jmp loc_100C221  +
mov eax [ebp+arg_0] +
mov edx [eax+28h] +
mov [ecx] edx +
mov eax [eax+28h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_100C23D  +
mov eax 80004003h +
jmp loc_100C259  +
mov ecx [ebp+8] +
and dword ptr [eax] 0 +
add ecx 0FFFFFFF8h +
call sub_100BEBA  +
neg eax  +
sbb eax eax +
and eax 0FFFF4002h +
add eax 8000FFFFh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_100C275  +
mov eax 80004003h +
jmp loc_100C2DC  +
and dword ptr [eax] 0 +
push ebx  +
mov ebx [ebp+8] +
lea ecx [ebx-8] +
mov [ebp+8] ecx +
call sub_100BEBA  +
test eax eax +
jnz loc_100C292  +
mov eax 8000FFFFh +
jmp loc_100C2DB  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_100239C +
xor eax eax +
cmps   +
jz loc_100C2BD  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset loc_100C2E0 +
xor eax eax +
cmps   +
jz loc_100C2BD  +
mov eax 80040200h +
jmp loc_100C2D9  +
mov ecx [ebp+10h] +
lea eax [ebx-8] +
add ebx 4 +
neg eax  +
sbb eax eax +
and eax ebx +
mov [ecx] eax +
mov eax [ebp+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
sal byte ptr [ebx] 0EAh +
adc dword ptr ds:52A211D2h[ecx*8] 0 +
adc [ebx-2Dh] cl +
push eax  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jnz loc_100C309  +
mov eax 80004003h +
jmp loc_100C32C  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF4h +
call sub_100BEBA  +
test eax eax +
jnz loc_100C31F  +
mov eax 8000FFFFh +
jmp loc_100C32C  +
push esi  +
mov esi offset dword_100239C +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+0Ch] +
test ebx ebx +
jnz loc_100C34A  +
mov eax 80004003h +
jmp loc_100C37E  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea edi [esi-0Ch] +
mov ecx edi +
call sub_100BEBA  +
test eax eax +
jnz loc_100C366  +
and [ebx] eax +
mov eax 8000FFFFh +
jmp loc_100C37C  +
lea eax [esi-0Ch] +
add esi 0FFFFFFFCh +
neg eax  +
sbb eax eax +
and eax esi +
mov [ebx] eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_100C39B  +
mov eax 80004003h +
jmp loc_100C3B7  +
mov ecx [ebp+8] +
and dword ptr [eax] 0 +
add ecx 0FFFFFFF4h +
call sub_100BEBA  +
neg eax  +
sbb eax eax +
and eax 0FFFF4002h +
add eax 8000FFFFh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
push [ebp+lParam]  +
push esi  +
push 40Ah  +
push dword ptr [esi+18h]  +
call ds:PostThreadMessageA  +
test eax eax +
jnz loc_100C3EA  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+28h] +
pop ebp  +
jmp loc_100BAF3  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+0C8h] 0 +
call ds:GetCurrentThreadId  +
push 0C8h  +
push 0  +
push esi  +
mov [esi+0CCh] eax +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
cmp dword ptr [edi+esi*4] 0 +
jz loc_100C44F  +
mov eax [edi+esi*4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc esi  +
cmp esi 32h +
jl loc_100C440  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+0C8h] +
jmp loc_100C475  +
cmp dword ptr [edi+esi*4] 0 +
jz loc_100C48B  +
inc esi  +
cmp esi 32h +
jl loc_100C46E  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov eax 80040201h +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax [ebp+arg_0] +
mov [edi+esi*4] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov ecx [ebp+arg_4] +
lea eax [esi+1] +
mov [edi+0C8h] eax +
mov [ecx] eax +
xor eax eax +
jmp loc_100C485  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
dec esi  +
push edi  +
mov edi ecx +
cmp esi 31h +
ja loc_100C4E1  +
mov eax [edi+esi*4] +
test eax eax +
jz loc_100C4E1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+esi*4] 0 +
lea eax [edi+0C8h] +
cmp esi [eax] +
jge loc_100C4DD  +
mov [eax] esi +
xor eax eax +
jmp loc_100C4E6  +
mov eax 80040200h +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov ebx ecx +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
xor edi edi +
cmp [ebx+edi*4] esi +
jz loc_100C532  +
mov eax [ebx+edi*4] +
mov ecx [eax] +
push esi  +
push esi  +
push esi  +
lea edx [ebp+var_10] +
push edx  +
push 1  +
push 400h  +
push offset dword_10024C4  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+18h]  +
inc edi  +
cmp edi 32h +
jl loc_100C50E  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005C67  +
test [ebp+arg_0] 1 +
jz loc_100C55E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_100BEA0  +
test eax eax +
jnz loc_100C586  +
mov eax 8000FFFFh +
jmp loc_100C6D2  +
cmp byte ptr [esi+5Dh] 0 +
jz loc_100C592  +
cmp byte ptr [esi+5Ch] 0 +
jz loc_100C59C  +
mov eax 8007000Eh +
jmp loc_100C6D2  +
push ebx  +
push edi  +
lea eax [ebp+ppv] +
push eax  +
push offset iid  +
push dword ptr [esi+40h]  +
xor ebx ebx +
mov [ebp+ppv] ebx +
call ds:CoGetInterfaceAndReleaseStream  +
and [esi+40h] ebx +
mov edi eax +
test edi edi +
jl loc_100C6AA  +
mov eax [esi+38h] +
test eax eax +
jz loc_100C613  +
push ebx  +
push eax  +
call sub_10041BB  +
mov edi eax +
inc edi  +
xor ecx ecx +
push 4  +
pop edx  +
lea eax [edi+1] +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_100C649  +
lea eax [ebx+4] +
push eax  +
push dword ptr [esi+38h]  +
call sub_10041BB  +
mov dword ptr [ebx] offset aWscript_0 +
and dword ptr [ebx+edi*4] 0 +
lea ecx [esi+44h] +
call sub_1005DBA  +
test eax eax +
jnz loc_100C61D  +
mov edi 80004005h +
jmp loc_100C6AA  +
push 284h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100C635  +
mov ecx eax +
call sub_10049F4  +
jmp loc_100C637  +
xor eax eax +
lea ecx [esi+44h] +
mov [esi+3Ch] eax +
call sub_1005EF9  +
mov ecx [esi+3Ch] +
test ecx ecx +
jnz loc_100C650  +
mov edi 8007000Eh +
jmp loc_100C6AA  +
push esi  +
call sub_100CBB8  +
push 1  +
mov ecx esi +
call sub_100C3C0  +
push [ebp+ppv]  +
mov ecx [esi+3Ch] +
push ebx  +
push edi  +
push dword ptr [esi+20h]  +
call sub_10031AC  +
push 2  +
mov ecx esi +
mov edi eax +
call sub_100C3C0  +
lea ecx [esi+44h] +
call sub_1005DBA  +
test eax eax +
jz loc_100C6A0  +
mov ecx [esi+3Ch] +
test ecx ecx +
jz loc_100C694  +
push 1  +
call sub_100C544  +
and dword ptr [esi+3Ch] 0 +
lea ecx [esi+44h] +
call sub_1005EF9  +
neg edi  +
sbb edi edi +
and edi 80004005h +
push 2  +
add esi 1Ch +
push esi  +
call ds:InterlockedExchange  +
test ebx ebx +
jz loc_100C6C1  +
push ebx  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_100C6CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
call ds:GetCurrentThreadId  +
mov esi [ebp+8] +
xor edi edi +
push edi  +
mov [esi+14h] eax +
call ds:CoInitialize  +
test eax eax +
jl loc_100C702  +
mov ecx esi +
inc edi  +
call sub_100C56A  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
test edi edi +
pop edi  +
pop esi  +
jz loc_100C714  +
call ds:CoUninitialize  +
pop ebp  +
jmp ds:_endthread  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_100BEBA  +
test eax eax +
jnz loc_100C73E  +
mov eax 8000FFFFh +
jmp loc_100C7C2  +
cmp byte ptr [esi+25h] 0 +
jz loc_100C74B  +
mov eax 80004005h +
jmp loc_100C7C2  +
push edi  +
push 0  +
push 0  +
lea edi [esi+1Ch] +
push edi  +
mov byte ptr [esi+25h] 1 +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_100C780  +
push 0A2Bh  +
push offset aWshremote_exec  +
push offset dword_10085DC  +
call sub_1010991  +
add esp 0Ch +
mov eax 80020009h +
jmp loc_100C7C1  +
mov eax [esi] +
push esi  +
mov dword ptr [edi] 1 +
call dword ptr [eax+4]  +
push esi  +
push 0  +
push offset loc_100C6DA  +
call ds:_beginthread  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_100C7BF  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
push 0A2Ch  +
push offset aWshremote_exec  +
push offset dword_10085DC  +
call sub_1010991  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+0Ch] +
test ebx ebx +
jnz loc_100C805  +
mov eax 80004003h +
jmp loc_100C870  +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_100C814  +
mov eax 80004003h +
jmp loc_100C86F  +
and dword ptr [edi] 0 +
push esi  +
mov esi [ebp+8] +
lea ecx [esi-0Ch] +
call sub_100BEBA  +
test eax eax +
jnz loc_100C82E  +
mov eax 8000FFFFh +
jmp loc_100C86E  +
mov eax [ebx] +
and dword ptr [ebp+0Ch] 0 +
lea ecx [ebp+0Ch] +
push ecx  +
push offset dword_100239C  +
push ebx  +
call dword ptr [eax]  +
test eax eax +
jge loc_100C84B  +
mov esi 80040202h +
jmp loc_100C85F  +
push edi  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+54h] +
call sub_100C45D  +
mov esi eax +
test esi esi +
jl loc_100C85F  +
xor esi esi +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_100C86C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
lea ecx [esi-0Ch] +
call sub_100BEBA  +
test eax eax +
jnz loc_100C896  +
mov eax 8000FFFFh +
jmp loc_100C8A1  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+54h] +
call sub_100C4AE  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 60h +
pop ebp  +
jmp loc_100C4F1  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
mov dword ptr [esi] offset off_100858C +
mov dword ptr [esi+4] offset off_100857C +
mov dword ptr [esi+8] offset off_1008568 +
mov dword ptr [esi+0Ch] offset off_1008548 +
mov dword ptr [esi+10h] 1 +
mov [esi+14h] ebx +
call ds:GetCurrentThreadId  +
lea ecx [esi+44h] +
mov [esi+18h] eax +
mov [esi+1Ch] ebx +
mov [esi+24h] bl +
mov [esi+25h] bl +
mov [esi+28h] ebx +
mov [esi+2Ch] ebx +
mov [esi+30h] ebx +
mov [esi+34h] ebx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
call sub_1004ADC  +
lea ecx [esi+60h] +
call sub_100C407  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_100BFA5  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100BFA5  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100BED4  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_100BFA5  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100BED4  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_100BED4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
and [ebp+pptlib] 0 +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push 130h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100C9B2  +
mov ecx eax +
call sub_100C8BE  +
mov esi eax +
jmp loc_100C9B4  +
xor esi esi +
test esi esi +
jnz loc_100C9C2  +
mov ebx 8007000Eh +
jmp loc_100CA45  +
push edi  +
mov edi [ebp+arg_4] +
lea eax [esi+28h] +
push eax  +
push edi  +
call sub_100BC50  +
mov ebx eax +
test ebx ebx +
jl loc_100CA44  +
lea eax [ebp+pptlib] +
push eax  +
push 409h  +
push 0  +
push 1  +
push offset rguid  +
call ds:LoadRegTypeLib  +
mov ebx eax +
test ebx ebx +
jl loc_100CA44  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
lea edx [esi+2Ch] +
push edx  +
push offset dword_10085DC  +
push eax  +
call dword ptr [ecx+18h]  +
mov ebx eax +
test ebx ebx +
jl loc_100CA44  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
lea edx [esi+30h] +
push edx  +
push offset stru_10085EC  +
push eax  +
call dword ptr [ecx+18h]  +
mov ebx eax +
test ebx ebx +
jl loc_100CA44  +
mov [esi+34h] edi +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [edi] +
push 1  +
push edi  +
call dword ptr [eax+10h]  +
mov eax [ebp+arg_0] +
mov [esi+20h] eax +
mov eax [ebp+arg_8] +
mov [eax] esi +
xor esi esi +
xor ebx ebx +
pop edi  +
mov eax [ebp+pptlib] +
test eax eax +
jz loc_100CA52  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test esi esi +
jz loc_100CA5C  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+3Ch] +
mov dword ptr [esi] offset off_100858C +
mov dword ptr [esi+4] offset off_100857C +
mov dword ptr [esi+8] offset off_1008568 +
mov dword ptr [esi+0Ch] offset off_1008548 +
test ecx ecx +
jz loc_100CA97  +
push 1  +
call sub_100C544  +
push dword ptr [esi+38h]  +
call ds:SysFreeString  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_100CAAD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+30h] +
test eax eax +
jz loc_100CABA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+40h] +
test eax eax +
jz loc_100CAC7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+28h] +
test eax eax +
jz loc_100CAD4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+34h] +
test eax eax +
jz loc_100CAEC  +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [esi+34h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+60h] +
call sub_100C438  +
lea eax [esi+44h] +
cmp byte ptr [eax+19h] 0 +
pop esi  +
jz locret_100CB05  +
push eax  +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100CA69  +
test [ebp+arg_0] 1 +
jz loc_100CB25  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:InterlockedDecrement  +
mov ebx eax +
test ebx ebx +
jnz loc_100CB7E  +
mov ecx esi +
call sub_100BEBA  +
test eax eax +
jz loc_100CB66  +
test esi esi +
jz loc_100CB7E  +
push 1  +
mov ecx esi +
call sub_100CB0B  +
jmp loc_100CB7E  +
push edi  +
call ds:InterlockedIncrement  +
push 0  +
push esi  +
push 40Bh  +
push dword ptr [esi+18h]  +
call ds:PostThreadMessageA  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100CB31  +
***
sub dword ptr [esp+4] 8 +
jmp loc_100CB31  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_100CB31  +
***
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+280h] eax +
mov byte ptr [ecx+27h] 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1019024 +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
add eax 0Ah +
push eax  +
lea eax [ebp-4] +
push eax  +
call sub_1004043  +
test eax eax +
jz locret_100CC3A  +
mov eax dword_1019024 +
inc eax  +
push eax  +
lea eax [ebp-8] +
push eax  +
call sub_1004043  +
test eax eax +
jz locret_100CC3A  +
mov eax dword_10194C8 +
push esi  +
or eax 40h +
push eax  +
push dword ptr [ebp-8]  +
push dword ptr [ebp-4]  +
call ds:GetActiveWindow  +
push eax  +
call ds:MessageBoxW  +
push dword ptr [ebp-4]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-8]  +
call esi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-4] +
push eax  +
push offset dword_100CC74  +
push 1  +
push 0  +
push offset dword_100CC84  +
call ds:CoCreateInstance  +
test eax eax +
jl locret_100CC72  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl locret_100CC72  +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_100290D  +
lea ecx [ebp-28h] +
call sub_1003C36  +
mov eax [ebp+8] +
xor ebx ebx +
mov [ebp-8] ebx +
mov [ebp-0Ch] ebx +
mov [ebp-4] ebx +
cmp [eax+20h] bl +
jz loc_100CCD2  +
lea ecx [ebp-28h] +
call sub_1005992  +
jmp loc_100CDCE  +
push esi  +
push dword ptr [ebp+10h]  +
lea eax [ebp-8] +
push eax  +
call sub_1004043  +
test eax eax +
jz loc_100CDB0  +
lea eax [ebp+14h] +
mov [ebp-10h] eax +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp-8]  +
call sub_1010759  +
cmp eax ebx +
mov [ebp-10h] ebx +
jl loc_100CDB0  +
push dword ptr [ebp-4]  +
call ds:SysStringLen  +
mov esi eax +
mov eax [ebp-4] +
lea ecx [eax+esi*2] +
push ecx  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10027EA  +
push esi  +
lea ecx [ebp-28h] +
call sub_1003641  +
test eax eax +
jge loc_100CD53  +
jmp loc_100CDB0  +
lea ecx [ebp-1Ch] +
call sub_10154FB  +
cmp eax 0Dh +
jz loc_100CD53  +
movzx eax ax +
mov [ebp+8] eax +
push 1  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-28h] +
call sub_1002633  +
mov eax [ebp-1Ch] +
cmp eax [ebp-18h] +
jb loc_100CD32  +
push edi  +
push 1  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-28h] +
mov dword ptr [ebp+8] 0Ah +
call sub_1002633  +
mov esi dword_10194C8 +
mov edi [ebp-28h] +
or esi 40000h +
cmp [ebp+0Ch] ebx +
jnz loc_100CD8A  +
or esi 40h +
jmp loc_100CD8D  +
or esi 10h +
mov eax dword_1019024 +
inc eax  +
push eax  +
lea eax [ebp-0Ch] +
push eax  +
call sub_1004043  +
push esi  +
push dword ptr [ebp-0Ch]  +
push edi  +
call ds:GetActiveWindow  +
push eax  +
call ds:MessageBoxW  +
pop edi  +
push dword ptr [ebp-8]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-0Ch]  +
call esi  +
push dword ptr [ebp-4]  +
call esi  +
lea ecx [ebp-28h] +
call sub_1005992  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+27h] 0 +
jnz loc_100CE1A  +
push dword ptr [ebp+10h]  +
mov edx [ebp+20h] +
push dword ptr [ebp+1Ch]  +
mov eax [ecx] +
push dword ptr [ebp+14h]  +
neg edx  +
push dword ptr [ebp+0Ch]  +
sbb edx edx +
push dword ptr [ebp+8]  +
and edx 0FFFFF5D7h +
push dword ptr [ecx+238h]  +
add edx 0A29h +
push 0A28h  +
push edx  +
push ecx  +
call dword ptr [eax+10h]  +
add esp 24h +
jmp loc_100CE44  +
push esi  +
push dword ptr [ebp+1Ch]  +
lea esi [ecx+280h] +
push dword ptr [ebp+18h]  +
mov ecx [esi] +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100C3F4  +
mov ecx [esi] +
push 3  +
call sub_100C3C0  +
pop esi  +
xor eax eax +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
and [ebp-4] esi +
cmp byte ptr [ecx+20h] 0 +
jz loc_100CE65  +
xor eax eax +
jmp loc_100CEBF  +
mov eax dword_1019024 +
inc eax  +
push eax  +
lea eax [ebp-4] +
push eax  +
call sub_1004043  +
cmp [ebp-4] esi +
jnz loc_100CE81  +
mov esi 8007000Eh +
jmp loc_100CEB4  +
mov eax dword_10194C8 +
or eax 10000h +
push eax  +
push dword ptr [ebp-4]  +
push dword ptr [ebp+8]  +
push 0  +
call ds:MessageBoxW  +
test eax eax +
jnz loc_100CEB4  +
call ds:GetLastError  +
test eax eax +
jle loc_100CEB2  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push dword ptr [ebp-4]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
mov [ebp-0Ch] ebx +
cmp [esi+27h] bl +
jnz loc_100CEFC  +
push dword ptr [ebp+14h]  +
mov eax [esi] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call dword ptr [eax+10h]  +
add esp 14h +
jmp loc_100CF58  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-4] +
push eax  +
call sub_1004043  +
cmp [ebp-4] ebx +
jz loc_100CF58  +
push dword ptr [ebp+14h]  +
lea eax [ebp-8] +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp-4]  +
call sub_10108A5  +
add esp 10h +
test eax eax +
jl loc_100CF58  +
push 0A2Ah  +
lea eax [ebp-0Ch] +
push eax  +
call sub_1004043  +
push 80004005h  +
push ebx  +
push dword ptr [ebp-8]  +
add esi 280h +
push dword ptr [ebp-0Ch]  +
mov ecx [esi] +
push ebx  +
push ebx  +
call sub_100C3F4  +
mov ecx [esi] +
push 3  +
call sub_100C3C0  +
push dword ptr [ebp-4]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-8]  +
call esi  +
push dword ptr [ebp-0Ch]  +
call esi  +
pop esi  +
mov eax 8004FFFFh +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi 8004FFFFh +
mov esi ecx +
mov [ebp-4] ebx +
mov [ebp-8] ebx +
mov [ebp-0Ch] ebx +
cmp [ebp+10h] edi +
jz loc_100D03E  +
cmp dword ptr [ebp+10h] 80020101h +
jz loc_100D03E  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-8] +
push eax  +
call sub_1004043  +
cmp [ebp-8] ebx +
jz loc_100D029  +
cmp [esi+27h] bl +
jnz loc_100CFEB  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+10h]  +
call sub_101060B  +
push dword ptr [ebp-4]  +
mov eax [esi] +
push dword ptr [ebp-8]  +
push 0DADh  +
push dword ptr [ebp+8]  +
push esi  +
call dword ptr [eax+10h]  +
add esp 14h +
jmp loc_100D029  +
push 0A2Ah  +
lea eax [ebp-0Ch] +
push eax  +
call sub_1004043  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+10h]  +
call sub_101060B  +
push dword ptr [ebp+10h]  +
add esi 280h +
push dword ptr [ebp-4]  +
mov ecx [esi] +
push dword ptr [ebp-8]  +
push dword ptr [ebp-0Ch]  +
push ebx  +
push ebx  +
call sub_100C3F4  +
mov ecx [esi] +
push 3  +
call sub_100C3C0  +
push dword ptr [ebp-4]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-8]  +
call esi  +
push dword ptr [ebp-0Ch]  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
call sub_1010B96  +
mov esi eax +
xor edi edi +
cmp esi edi +
jl loc_100D125  +
push 10h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_100D082  +
push [ebp+pUnk]  +
mov ecx eax +
call sub_100BE70  +
mov [ebp+pUnk] eax +
jmp loc_100D085  +
mov [ebp+pUnk] edi +
cmp [ebp+pUnk] edi +
jnz loc_100D094  +
mov esi 8007000Eh +
jmp loc_100D125  +
lea eax [ebp+dwRegister] +
push eax  +
push edi  +
push 14h  +
push [ebp+pUnk]  +
push offset stru_10085EC  +
call ds:CoRegisterClassObject  +
mov esi eax +
cmp esi edi +
jl loc_100D11C  +
mov esi ds:GetMessageA +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
cmp eax edi +
jz loc_100D10B  +
push ebx  +
cmp eax 0FFFFFFFFh +
jz loc_100D10A  +
mov eax [ebp+Msg.message] +
sub eax 40Ah +
jz loc_100D0E0  +
dec eax  +
jnz loc_100D0F3  +
mov eax [ebp+Msg.wParam] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100D0F3  +
mov ebx [ebp+Msg.wParam] +
push [ebp+Msg.lParam]  +
mov ecx ebx +
call sub_100C8AB  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
cmp eax edi +
jnz loc_100D0C3  +
pop ebx  +
push [ebp+dwRegister]  +
call ds:CoRevokeClassObject  +
mov esi eax +
cmp esi edi +
jl loc_100D11C  +
xor esi esi +
mov eax [ebp+pUnk] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100D148  +
cmp ecx 7FFFFFFFh +
jbe loc_100D14D  +
mov eax 80070057h +
test eax eax +
jl loc_100D18A  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100D17D  +
cmp eax esi +
ja loc_100D17D  +
jnz loc_100D185  +
mov [esi+edi] bl +
jmp loc_100D185  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3D8h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
lea eax [ebp+ppMalloc] +
push eax  +
push 1  +
mov [ebp+lpWideCharStr] ebx +
mov [ebp+ppMalloc] ebx +
mov [ebp+pptlib] ebx +
mov [ebp+var_3BC] ebx +
mov [ebp+rclsid] ebx +
mov [ebp+var_3A8] ebx +
mov [ebp+lpSubKey] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+hKey] ebx +
mov [ebp+var_3B8] ebx +
mov [ebp+var_3AC] ebx +
call ds:CoGetMalloc  +
mov esi eax +
cmp esi ebx +
jl loc_100D78E  +
mov esi 105h +
push esi  +
lea eax [ebp+Data] +
push eax  +
push ebx  +
mov [ebp+var_88] bl +
call ds:GetModuleFileNameA  +
test eax eax +
jnz loc_100D23E  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100D237  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_100D78E  +
cmp [ebp+var_88] bl +
jz loc_100D250  +
mov esi 8007007Ah +
jmp loc_100D78E  +
push esi  +
lea eax [ebp+szFile] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+Data] +
push eax  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
cmp eax ebx +
jz loc_100D223  +
push 5Ch  +
pop ecx  +
add eax eax +
push 32h  +
mov word ptr [ebp+eax+lpSubKey+2] cx +
pop ecx  +
mov [ebp+eax+szFile] cx +
xor ecx ecx +
mov [ebp+eax-39Ah] cx +
lea eax [ebp+pptlib] +
push eax  +
push 1  +
lea eax [ebp+szFile] +
push eax  +
call ds:LoadTypeLibEx  +
mov esi eax +
cmp esi ebx +
jl loc_100D78E  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
lea edx [ebp+rclsid] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100D78E  +
lea eax [ebp+phkResult] +
push eax  +
push offset SubKey  +
push 80000000h  +
call ds:RegOpenKeyA  +
cmp eax ebx +
jle loc_100D2F1  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78E  +
lea eax [ebp+lpsz] +
push eax  +
push [ebp+rclsid]  +
call ds:StringFromCLSID  +
mov esi eax +
cmp esi ebx +
jl loc_100D78E  +
push dword ptr [ebp+lpsz]  +
lea eax [ebp+var_84] +
push offset aS  +
push 30h  +
push eax  +
call sub_100D132  +
mov eax [ebp+ppMalloc] +
mov ecx [eax] +
add esp 10h +
push dword ptr [ebp+lpsz]  +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [ebp+rclsid] +
movzx ecx word ptr [eax+1Ah] +
movzx eax word ptr [eax+18h] +
push ecx  +
push eax  +
push offset loc_100D874  +
lea eax [ebp+var_24] +
push 20h  +
push eax  +
call sub_100DE92  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
add esp 14h +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+var_3D8] eax +
mov [ebp+var_3C4] ebx +
cmp eax ebx +
jbe loc_100D78E  +
push edi  +
mov edi ds:RegSetValueA +
mov eax [ebp+var_3BC] +
cmp eax ebx +
jz loc_100D3C6  +
cmp [ebp+var_3A8] ebx +
jz loc_100D3BA  +
push [ebp+var_3A8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [ebp+var_3BC] +
mov [ebp+var_3A8] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3BC] ebx +
mov eax [ebp+pptlib] +
mov ecx [eax] +
lea edx [ebp+var_3BC] +
push edx  +
push [ebp+var_3C4]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_100D757  +
mov eax [ebp+var_3BC] +
mov ecx [eax] +
lea edx [ebp+var_3A8] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100D757  +
mov eax [ebp+var_3A8] +
cmp dword ptr [eax+28h] 5 +
jnz loc_100D757  +
test byte ptr [eax+36h] 2 +
jz loc_100D757  +
push [ebp+lpWideCharStr]  +
call ds:SysFreeString  +
mov eax [ebp+pptlib] +
push ebx  +
push ebx  +
push ebx  +
lea edx [ebp+lpWideCharStr] +
push edx  +
push [ebp+var_3C4]  +
mov [ebp+lpWideCharStr] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_100D757  +
lea eax [ebp+var_3D4] +
push eax  +
push [ebp+var_3A8]  +
call ds:StringFromCLSID  +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
push [ebp+var_3D4]  +
lea eax [ebp+SubKey] +
push offset aS  +
push 30h  +
push eax  +
call sub_100DE92  +
mov eax [ebp+ppMalloc] +
mov ecx [eax] +
add esp 10h +
push [ebp+var_3D4]  +
push eax  +
call dword ptr [ecx+14h]  +
cmp [ebp+lpWideCharStr] ebx +
jz loc_100D506  +
cmp [ebp+lpSubKey] ebx +
jz loc_100D4BC  +
push [ebp+lpSubKey]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call ds:WideCharToMultiByte  +
mov esi eax +
lea eax [esi+1] +
push eax  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+lpSubKey] eax +
cmp eax ebx +
jz loc_100D770  +
push ebx  +
push ebx  +
push esi  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call ds:WideCharToMultiByte  +
test eax eax +
jz loc_100D777  +
cmp [ebp+hKey] ebx +
jz loc_100D520  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov [ebp+hKey] ebx +
lea eax [ebp+hKey] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call ds:RegCreateKeyA  +
cmp eax ebx +
jle loc_100D545  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
cmp [ebp+var_3AC] ebx +
jz loc_100D569  +
push [ebp+var_3AC]  +
call ds:RegCloseKey  +
mov [ebp+var_3AC] ebx +
lea eax [ebp+var_3AC] +
push eax  +
push offset aLocalserver32  +
push [ebp+hKey]  +
call ds:RegCreateKeyA  +
cmp eax ebx +
jle loc_100D58F  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
lea eax [ebp+Data] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100D5A2  +
sub eax edx +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 1  +
push ebx  +
push [ebp+var_3AC]  +
call edi  +
cmp eax ebx +
jle loc_100D5CC  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
lea eax [ebp+var_84] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100D5DF  +
sub eax edx +
push eax  +
lea eax [ebp+var_84] +
push eax  +
push 1  +
push offset aTypelib  +
push [ebp+hKey]  +
call edi  +
cmp eax ebx +
jle loc_100D60D  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
lea eax [ebp+var_24] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100D61D  +
sub eax edx +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push 1  +
push offset aVersion  +
push [ebp+hKey]  +
call edi  +
cmp eax ebx +
jle loc_100D648  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
cmp [ebp+lpSubKey] ebx +
jz loc_100D757  +
mov eax [ebp+lpSubKey] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100D667  +
sub eax esi +
push eax  +
push [ebp+lpSubKey]  +
push 1  +
push ebx  +
push [ebp+hKey]  +
call edi  +
cmp eax ebx +
jle loc_100D690  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
mov eax [ebp+lpSubKey] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100D6A3  +
sub eax esi +
push eax  +
push [ebp+lpSubKey]  +
push 1  +
push offset aProgid  +
push [ebp+hKey]  +
call edi  +
cmp eax ebx +
jle loc_100D6D0  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
cmp [ebp+var_3B8] ebx +
jz loc_100D6F4  +
push [ebp+var_3B8]  +
call ds:RegCloseKey  +
mov [ebp+var_3B8] ebx +
lea eax [ebp+var_3B8] +
push eax  +
push [ebp+lpSubKey]  +
push 80000000h  +
call ds:RegCreateKeyA  +
cmp eax ebx +
jle loc_100D71A  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
lea eax [ebp+SubKey] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_100D726  +
sub eax edx +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push 1  +
push offset SubKey  +
push [ebp+var_3B8]  +
call edi  +
cmp eax ebx +
jle loc_100D751  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_100D78D  +
inc [ebp+var_3C4]  +
mov eax [ebp+var_3C4] +
cmp eax [ebp+var_3D8] +
jnb loc_100D78D  +
jmp loc_100D390  +
mov esi 8007000Eh +
jmp loc_100D78D  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100D78B  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
pop edi  +
mov eax [ebp+ppMalloc] +
cmp eax ebx +
jz loc_100D79E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+pptlib] +
cmp eax ebx +
jz loc_100D7C8  +
cmp [ebp+rclsid] ebx +
jz loc_100D7C2  +
push [ebp+rclsid]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_3BC] +
cmp eax ebx +
jz loc_100D7F2  +
cmp [ebp+var_3A8] ebx +
jz loc_100D7EC  +
push [ebp+var_3A8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [ebp+var_3BC] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_3B8] ebx +
jz loc_100D806  +
push [ebp+var_3B8]  +
call ds:RegCloseKey  +
cmp [ebp+var_3AC] ebx +
jz loc_100D81A  +
push [ebp+var_3AC]  +
call ds:RegCloseKey  +
cmp [ebp+hKey] ebx +
jz loc_100D82E  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [ebp+phkResult] ebx +
jz loc_100D842  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
push [ebp+lpWideCharStr]  +
call ds:SysFreeString  +
cmp [ebp+lpSubKey] ebx +
jz loc_100D862  +
push [ebp+lpSubKey]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C0h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor edi edi +
lea eax [ebp+ppMalloc] +
push eax  +
push 1  +
mov [ebp+var_9C] edi +
mov [ebp+lpSubKey] edi +
mov [ebp+ppMalloc] edi +
mov [ebp+pptlib] edi +
mov [ebp+rclsid] edi +
mov [ebp+hKey] edi +
mov [ebp+var_8C] edi +
mov [ebp+var_88] edi +
call ds:CoGetMalloc  +
mov esi eax +
cmp esi edi +
jl loc_100DC45  +
lea eax [ebp+pptlib] +
push eax  +
push edi  +
push edi  +
push 1  +
push offset rguid  +
call ds:LoadRegTypeLib  +
mov esi eax +
cmp esi edi +
jl loc_100DC45  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
lea edx [ebp+rclsid] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jl loc_100DC45  +
lea eax [ebp+hKey] +
push eax  +
push offset SubKey  +
push 80000000h  +
call ds:RegOpenKeyA  +
cmp eax edi +
jle loc_100D943  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi edi +
jl loc_100DC45  +
lea eax [ebp+lpsz] +
push eax  +
push [ebp+rclsid]  +
call ds:StringFromCLSID  +
mov esi eax +
cmp esi edi +
jl loc_100DC45  +
push ebx  +
push dword ptr [ebp+lpsz]  +
lea eax [ebp+var_84] +
push offset aS  +
push 30h  +
push eax  +
call sub_100D132  +
mov eax [ebp+ppMalloc] +
mov ecx [eax] +
add esp 10h +
push dword ptr [ebp+lpsz]  +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+var_BC] eax +
mov [ebp+var_A4] edi +
cmp eax edi +
jbe loc_100DC2B  +
mov ebx ds:RegDeleteKeyA +
mov eax [ebp+var_8C] +
cmp eax edi +
jz loc_100D9F5  +
cmp [ebp+var_88] edi +
jz loc_100D9E9  +
push [ebp+var_88]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [ebp+var_8C] +
mov [ebp+var_88] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_8C] edi +
mov eax [ebp+pptlib] +
mov ecx [eax] +
lea edx [ebp+var_8C] +
push edx  +
push [ebp+var_A4]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi edi +
jl loc_100DC44  +
mov eax [ebp+var_8C] +
mov ecx [eax] +
lea edx [ebp+var_88] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_100DC44  +
mov eax [ebp+var_88] +
cmp dword ptr [eax+28h] 5 +
jnz loc_100DC13  +
test byte ptr [eax+36h] 2 +
jz loc_100DC13  +
push [ebp+var_9C]  +
call ds:SysFreeString  +
mov eax [ebp+pptlib] +
push edi  +
push edi  +
push edi  +
lea edx [ebp+var_9C] +
push edx  +
push [ebp+var_A4]  +
mov [ebp+var_9C] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi edi +
jl loc_100DC44  +
lea eax [ebp+var_B4] +
push eax  +
push [ebp+var_88]  +
call ds:StringFromCLSID  +
mov esi eax +
cmp esi edi +
jl loc_100DC44  +
push dword ptr [ebp+var_B4]  +
lea eax [ebp+SubKey] +
push offset aS  +
push 30h  +
push eax  +
call sub_100D132  +
mov eax [ebp+ppMalloc] +
mov ecx [eax] +
add esp 10h +
push dword ptr [ebp+var_B4]  +
push eax  +
call dword ptr [ecx+14h]  +
cmp [ebp+lpSubKey] edi +
jz loc_100DAE3  +
push [ebp+lpSubKey]  +
call ??3@YAXPAX@Z  +
pop ecx  +
push [ebp+var_9C]  +
call ds:SysStringLen  +
mov esi eax +
inc esi  +
inc esi  +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+lpSubKey] eax +
cmp eax edi +
jz loc_100DCED  +
push [ebp+var_9C]  +
push offset aS  +
push esi  +
push eax  +
call sub_100DE92  +
add esp 10h +
lea eax [ebp+phkResult] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
call ds:RegOpenKeyA  +
test eax eax +
jnz loc_100DC13  +
lea eax [ebp+cbValue] +
push eax  +
lea eax [ebp+Value] +
push eax  +
push offset aVersion  +
push [ebp+phkResult]  +
mov [ebp+cbValue] 20h +
call ds:RegQueryValueA  +
push 4  +
mov edi offset loc_100DCF8 +
lea esi [ebp+Value] +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_100DC05  +
push offset aLocalserver32  +
push [ebp+phkResult]  +
call ebx  +
push offset aTypelib  +
push [ebp+phkResult]  +
call ebx  +
push offset aVersion  +
push [ebp+phkResult]  +
call ebx  +
push offset aProgid  +
push [ebp+phkResult]  +
call ebx  +
push [ebp+phkResult]  +
mov esi ds:RegCloseKey +
call esi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
call ebx  +
lea eax [ebp+var_B0] +
push eax  +
push [ebp+lpSubKey]  +
push 80000000h  +
call ds:RegOpenKeyA  +
test eax eax +
jnz loc_100DC11  +
push offset SubKey  +
push [ebp+var_B0]  +
call ebx  +
push [ebp+var_B0]  +
call esi  +
push [ebp+lpSubKey]  +
push 80000000h  +
call ebx  +
jmp loc_100DC11  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
xor edi edi +
inc [ebp+var_A4]  +
mov eax [ebp+var_A4] +
cmp eax [ebp+var_BC] +
jb loc_100D9BF  +
push 1  +
push edi  +
push edi  +
push 1  +
push offset rguid  +
call ds:UnRegisterTypeLib  +
mov esi eax +
cmp esi edi +
jl loc_100DC44  +
xor esi esi +
pop ebx  +
mov eax [ebp+ppMalloc] +
cmp eax edi +
jz loc_100DC55  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+lpSubKey] edi +
jz loc_100DC69  +
push [ebp+lpSubKey]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax [ebp+var_8C] +
cmp eax edi +
jz loc_100DC93  +
cmp [ebp+var_88] edi +
jz loc_100DC8D  +
push [ebp+var_88]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [ebp+var_8C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+pptlib] +
cmp eax edi +
jz loc_100DCBD  +
cmp [ebp+rclsid] edi +
jz loc_100DCB7  +
push [ebp+rclsid]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+hKey] edi +
jz loc_100DCD1  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
push [ebp+var_9C]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn   +
mov esi 8007000Eh +
jmp loc_100DC44  +
***
xor [esi] ebp +
xor [eax] al +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1001375  +
push offset dword_1019004  +
call sub_100DF41  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_100DD2B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jz loc_100DE3D  +
cmp [ebp+arg_4] ebx +
ja loc_100DE5D  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_100DE02  +
add esp 14h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
cmp [ebp+arg_8] ebx +
jz loc_100DE3D  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_100EF7F  +
add esp 10h +
cmp eax ebx +
jge loc_100DE59  +
mov [esi] bl +
cmp eax 0FFFFFFFEh +
jnz loc_100DE56  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_100DE49  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100DE28  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_100DEC8  +
cmp [ebp+arg_4] esi +
ja loc_100DEE8  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
call sub_100DE02  +
add esp 14h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn   +
cmp [ebp+arg_8] esi +
jz loc_100DEC8  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edi  +
call sub_100FC07  +
add esp 10h +
cmp eax esi +
jge loc_100DEE4  +
xor ecx ecx +
mov [edi] cx +
cmp eax 0FFFFFFFEh +
jnz loc_100DEE1  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_100DED4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100DEB3  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_100DF77  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_100E09C  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_100E001  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_100DFD4  +
mov edx edi +
call sub_10060D7  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_100E00B  +
jg loc_100E014  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_100DFA9  +
cmp [ebp+var_1] 0 +
jz loc_100E001  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100DFF3  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_100DFE1  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100E048  +
cmp dword_10194D8 0 +
jz loc_100E048  +
push offset dword_10194D8  +
call sub_100FD6A  +
add esp 4 +
test eax eax +
jz loc_100E048  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_10194D8  +
add esp 8 +
mov ecx [ebp+arg_C] +
call sub_1006107  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_100E069  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call sub_1006121  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100E081  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call sub_10060EE  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_100E001  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call sub_1006121  +
jmp loc_100DFE1  +
***
mov eax eax +
push ebp  +
mov ebp esp +
sub esp 20h +
and esp 0FFFFFFF0h +
fld  st +
fst  [esp+20h+var_8] +
fistp  [esp+20h+var_10] +
fild  [esp+20h+var_10] +
mov edx [esp+20h+var_8] +
mov eax dword ptr [esp+20h+var_10] +
test eax eax +
jz loc_100E121  +
fsubp st(1) st +
test edx edx +
jns loc_100E109  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
xor ecx 80000000h +
add ecx 7FFFFFFFh +
adc eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
adc edx 0 +
jmp locret_100E135  +
fstp  [esp+20h+var_20] +
mov ecx [esp+20h+var_20] +
add ecx 7FFFFFFFh +
sbb eax 0 +
mov edx dword ptr [esp+20h+var_10+4] +
sbb edx 0 +
jmp locret_100E135  +
mov edx dword ptr [esp+20h+var_10+4] +
test edx 7FFFFFFFh +
jnz loc_100E0E5  +
fstp  [esp+20h+var_8] +
fstp  [esp+20h+var_8] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10191C8 eax +
mov dword_10191C4 ecx +
mov dword_10191C0 edx +
mov dword_10191BC ebx +
mov dword_10191B8 esi +
mov dword_10191B4 edi +
mov word_10191E0 ss +
mov word_10191D4 cs +
mov word_10191B0 ds +
mov word_10191AC es +
mov word_10191A8 fs +
mov word_10191A4 gs +
pushf   +
pop dword_10191D8  +
mov eax [ebp+0] +
mov dword_10191CC eax +
mov eax [ebp+4] +
mov dword_10191D0 eax +
lea eax [ebp+8] +
mov dword_10191DC eax +
mov eax [ebp-320h] +
mov dword_1019118 10001h +
mov eax dword_10191D0 +
mov dword_10190D4 eax +
mov dword_10190C8 0C0000409h +
mov dword_10190CC 1 +
mov eax dword_1019004 +
mov [ebp-328h] eax +
mov eax dword_1019008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
test byte ptr [ecx+0Ch] 40h +
jz loc_100E238  +
cmp dword ptr [ecx+8] 0 +
jz loc_100E25C  +
dec dword ptr [ecx+4]  +
js loc_100E248  +
mov edx [ecx] +
mov [edx] al +
inc dword ptr [ecx]  +
movzx eax al +
jmp loc_100E254  +
movsx eax al +
push ecx  +
push eax  +
call sub_100FE0F  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_100E25C  +
or [esi] eax +
retn   +
inc dword ptr [esi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
jmp loc_100E281  +
mov ecx [ebp+arg_8] +
mov al [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_100E22C  +
cmp dword ptr [esi] 0FFFFFFFFh +
jz loc_100E287  +
cmp [ebp+arg_4] 0 +
jg loc_100E26E  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [edi+0Ch] 40h +
push ebx  +
push esi  +
mov esi eax +
mov ebx ecx +
jz loc_100E2D3  +
cmp dword ptr [edi+8] 0 +
jnz loc_100E2D3  +
mov eax [ebp+arg_0] +
add [esi] eax +
jmp loc_100E2D9  +
mov al [ebx] +
dec [ebp+arg_0]  +
mov ecx edi +
call sub_100E22C  +
inc ebx  +
cmp dword ptr [esi] 0FFFFFFFFh +
jnz loc_100E2D3  +
call ds:__imp__errno  +
cmp dword ptr [eax] 2Ah +
jnz loc_100E2D9  +
mov ecx edi +
mov al 3Fh +
call sub_100E22C  +
cmp [ebp+arg_0] 0 +
jg loc_100E2AD  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_28] eax +
xor eax eax +
inc eax  +
push edi  +
mov edi [ebp+arg_4] +
test [ebp+arg_14] al +
jz loc_100E30A  +
sub [ebp+arg_C] 20h +
test [ebp+arg_14] 80h +
mov [ebp+var_24] 25h +
jz loc_100E31B  +
push 2  +
mov byte ptr [ebp-23h] 23h +
pop eax  +
push esi  +
mov [ebp+eax+var_24] 2Eh +
push 0Ah  +
lea eax [ebp+eax-23h] +
push eax  +
push [ebp+arg_10]  +
call ds:_itoa  +
lea eax [ebp+var_24] +
add esp 0Ch +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100E33A  +
mov cl byte ptr [ebp+arg_C] +
sub eax esi +
mov [ebp+eax+var_24] cl +
mov byte ptr [ebp+eax-23h] 0 +
mov eax [ebp+arg_8] +
lea esi [edi+eax-1] +
mov byte ptr [esi] 0 +
push ecx  +
push ecx  +
mov ecx [ebp+var_28] +
fld  qword ptr [ecx] +
lea ecx [ebp+var_24] +
fstp  [esp+38h+var_38] +
push ecx  +
push eax  +
push edi  +
call ds:_snprintf  +
add esp 14h +
cmp byte ptr [esi] 0 +
pop esi  +
jnz loc_100E380  +
test eax eax +
jle loc_100E380  +
xor eax eax +
jmp loc_100E386  +
push 16h  +
mov byte ptr [edi] 0 +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
cmp edi ebx +
jnz loc_100E3CD  +
cmp [ebp+arg_8] ebx +
jbe loc_100E3CD  +
cmp esi ebx +
jz loc_100E470  +
mov [esi] ebx +
jmp loc_100E470  +
cmp esi ebx +
jz loc_100E3D4  +
or dword ptr [esi] 0FFFFFFFFh +
cmp [ebp+arg_8] 7FFFFFFFh +
jbe loc_100E3FB  +
call ds:__imp__errno  +
push 16h  +
pop ecx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov esi ecx +
mov [eax] ecx +
call sub_100DE02  +
add esp 14h +
mov eax esi +
jmp loc_100E472  +
push dword ptr [ebp+arg_C]  +
lea eax [ebp+var_C] +
push eax  +
call ds:wctomb  +
cmp eax ebx +
pop ecx  +
pop ecx  +
jge loc_100E433  +
cmp edi ebx +
jz loc_100E424  +
cmp [ebp+arg_8] ebx +
jbe loc_100E424  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
call ds:__imp__errno  +
push 2Ah  +
pop ecx  +
mov [eax] ecx +
mov eax ecx +
jmp loc_100E472  +
cmp esi ebx +
jz loc_100E439  +
mov [esi] eax +
cmp [ebp+arg_8] eax +
jge loc_100E45E  +
cmp edi ebx +
jz loc_100E454  +
cmp [ebp+arg_8] ebx +
jbe loc_100E454  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
call memset  +
add esp 0Ch +
call ds:__imp__errno  +
push 22h  +
jmp loc_100E3E5  +
cmp edi ebx +
jz loc_100E470  +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
call memcpy  +
add esp 0Ch +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 268h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_24C] eax +
mov [ebp+var_224] edi +
mov [ebp+var_248] esi +
mov [ebp+var_210] esi +
mov [ebp+var_234] esi +
mov [ebp+var_218] esi +
mov [ebp+var_230] esi +
mov dword ptr [ebp+var_23C] esi +
mov [ebp+var_250] esi +
mov [ebp+var_238] esi +
cmp eax esi +
jnz loc_100E50A  +
call ds:__imp__errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 16h +
call sub_100DE02  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100EF4B  +
cmp ebx esi +
jz loc_100E4E9  +
mov cl [ebx] +
mov [ebp+var_228] esi +
mov [ebp+var_220] esi +
mov [ebp+var_240] esi +
mov [ebp+var_244] esi +
mov [ebp+var_211] cl +
test cl cl +
jz loc_100EF45  +
inc ebx  +
cmp [ebp+var_228] esi +
mov [ebp+var_260] ebx +
jl loc_100EF30  +
mov al cl +
sub al 20h +
cmp al 58h +
ja loc_100E560  +
movsx eax cl +
movzx eax byte ptr ds:(aTypelib+4)[eax] +
and eax 0Fh +
jmp loc_100E562  +
xor eax eax +
mov edx [ebp+var_240] +
imul eax eax +
movzx eax ds:byte_1008648[eax+edx] +
shr eax 4 +
mov [ebp+var_240] eax +
cmp eax 8 +
jz loc_100E4E9  +
push 7  +
pop edx  +
cmp eax edx +
ja loc_100EEE7  +
jmp ds:off_100EF5A[eax*4]  +
or [ebp+var_218] 0FFFFFFFFh +
mov dword ptr [ebp+var_23C] esi +
mov [ebp+var_250] esi +
mov [ebp+var_234] esi +
mov [ebp+var_230] esi +
mov [ebp+var_210] esi +
mov [ebp+var_238] esi +
jmp loc_100EEF5  +
movsx eax cl +
sub eax 20h +
jz loc_100E619  +
sub eax 3 +
jz loc_100E60A  +
sub eax 8 +
jz loc_100E5FE  +
dec eax  +
dec eax  +
jz loc_100E5F2  +
sub eax 3 +
jnz loc_100EEE7  +
or [ebp+var_210] 8 +
jmp loc_100EEF5  +
or [ebp+var_210] 4 +
jmp loc_100EEF5  +
or [ebp+var_210] 1 +
jmp loc_100EEF5  +
or [ebp+var_210] 80h +
jmp loc_100EEF5  +
or [ebp+var_210] 2 +
jmp loc_100EEF5  +
cmp cl 2Ah +
jnz loc_100E655  +
mov eax [edi] +
add edi 4 +
cmp eax esi +
mov [ebp+var_224] edi +
mov [ebp+var_234] eax +
jge loc_100EEF5  +
or [ebp+var_210] 4 +
neg [ebp+var_234]  +
jmp loc_100EEF5  +
mov eax [ebp+var_234] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_234] eax +
jmp loc_100EEF5  +
mov [ebp+var_218] esi +
jmp loc_100EEF5  +
cmp cl 2Ah +
jnz loc_100E6A5  +
mov eax [edi] +
add edi 4 +
cmp eax esi +
mov [ebp+var_224] edi +
mov [ebp+var_218] eax +
jge loc_100EEF5  +
or [ebp+var_218] 0FFFFFFFFh +
jmp loc_100EEF5  +
mov eax [ebp+var_218] +
imul eax eax +
movsx ecx cl +
lea eax [eax+ecx-30h] +
mov [ebp+var_218] eax +
jmp loc_100EEF5  +
cmp cl 49h +
jz loc_100E714  +
cmp cl 68h +
jz loc_100E708  +
cmp cl 6Ch +
jz loc_100E6E7  +
cmp cl 77h +
jnz loc_100EEF5  +
or [ebp+var_210] 800h +
jmp loc_100EEF5  +
cmp byte ptr [ebx] 6Ch +
jnz loc_100E6FC  +
inc ebx  +
or [ebp+var_210] 1000h +
jmp loc_100EEF5  +
or [ebp+var_210] 10h +
jmp loc_100EEF5  +
or [ebp+var_210] 20h +
jmp loc_100EEF5  +
mov al [ebx] +
cmp al 36h +
jnz loc_100E731  +
cmp byte ptr [ebx+1] 34h +
jnz loc_100E731  +
inc ebx  +
inc ebx  +
or [ebp+var_210] 8000h +
jmp loc_100EEF5  +
cmp al 33h +
jnz loc_100E74C  +
cmp byte ptr [ebx+1] 32h +
jnz loc_100E74C  +
inc ebx  +
inc ebx  +
and [ebp+var_210] 0FFFF7FFFh +
jmp loc_100EEF5  +
cmp al 64h +
jz loc_100EEF5  +
cmp al 69h +
jz loc_100EEF5  +
cmp al 6Fh +
jz loc_100EEF5  +
cmp al 75h +
jz loc_100EEF5  +
cmp al 78h +
jz loc_100EEF5  +
cmp al 58h +
jz loc_100EEF5  +
mov [ebp+var_240] esi +
movzx eax cl +
push eax  +
mov [ebp+var_238] esi +
call ds:isleadbyte  +
pop ecx  +
test eax eax +
jz loc_100E7BF  +
mov ecx [ebp+var_24C] +
mov al [ebp+var_211] +
lea esi [ebp+var_228] +
call sub_100E22C  +
mov al [ebx] +
inc ebx  +
mov [ebp+var_211] al +
test al al +
jz loc_100EF08  +
mov ecx [ebp+var_24C] +
mov al [ebp+var_211] +
lea esi [ebp+var_228] +
call sub_100E22C  +
jmp loc_100EEF3  +
movsx eax cl +
cmp eax 64h +
jg loc_100E9FD  +
jz loc_100EA54  +
cmp eax 53h +
jg loc_100E8E8  +
jz loc_100E87C  +
sub eax 41h +
jz loc_100E811  +
dec eax  +
dec eax  +
jz loc_100E85D  +
dec eax  +
dec eax  +
jz loc_100E811  +
dec eax  +
dec eax  +
jnz loc_100ED57  +
add cl 20h +
mov dword ptr [ebp+var_23C] 1 +
mov [ebp+var_211] cl +
or [ebp+var_210] 40h +
cmp [ebp+var_218] esi +
lea eax [ebp+var_20C] +
mov [ebp+var_21C] eax +
mov eax 200h +
mov [ebp+var_254] eax +
jge loc_100EA83  +
mov [ebp+var_218] 6 +
jmp loc_100EAF1  +
test [ebp+var_210] 830h +
jnz loc_100E905  +
or [ebp+var_210] 800h +
jmp loc_100E905  +
test [ebp+var_210] 830h +
jnz loc_100E892  +
or [ebp+var_210] 800h +
mov ecx [ebp+var_218] +
cmp ecx 0FFFFFFFFh +
jnz loc_100E8A2  +
mov ecx 7FFFFFFFh +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
mov edi [edi-4] +
mov [ebp+var_21C] edi +
jz loc_100ED29  +
cmp edi esi +
jnz loc_100E8D3  +
mov eax off_10194A4 +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
mov [ebp+var_238] 1 +
jmp loc_100ED1B  +
sub eax 58h +
jz loc_100EB7F  +
dec eax  +
dec eax  +
jz loc_100E96E  +
sub eax edx +
jz loc_100E824  +
dec eax  +
dec eax  +
jnz loc_100ED57  +
add edi 4 +
test [ebp+var_210] 810h +
mov [ebp+var_224] edi +
jz loc_100E94A  +
movzx eax word ptr [edi-4] +
push eax  +
push 200h  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_220] +
push eax  +
call sub_100E398  +
add esp 10h +
test eax eax +
jz loc_100E95D  +
mov [ebp+var_250] 1 +
jmp loc_100E95D  +
mov al [edi-4] +
mov byte ptr [ebp+var_20C] al +
mov [ebp+var_220] 1 +
lea eax [ebp+var_20C] +
mov [ebp+var_21C] eax +
jmp loc_100ED57  +
mov eax [edi] +
add edi 4 +
mov [ebp+var_224] edi +
cmp eax esi +
jz loc_100E9E1  +
mov esi [eax+4] +
xor edi edi +
cmp esi edi +
jz loc_100E9E1  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_100EF20  +
test [ebp+var_210] 800h +
movzx eax cx +
jz loc_100E9D0  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_100EF20  +
mov edx esi +
not edx  +
test dl cl +
jz loc_100EF20  +
mov [ebp+var_21C] esi +
shr eax 1 +
mov [ebp+var_238] ecx +
jmp loc_100ED51  +
mov [ebp+var_238] edi +
mov [ebp+var_21C] esi +
jmp loc_100ED51  +
mov eax off_10194A0 +
mov [ebp+var_21C] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100E9EF  +
sub eax edx +
jmp loc_100ED51  +
cmp eax 70h +
jg loc_100EB87  +
jz loc_100EB75  +
cmp eax 65h +
jl loc_100ED57  +
cmp eax 67h +
jle loc_100E824  +
cmp eax 69h +
jz loc_100EA54  +
cmp eax 6Eh +
jz loc_100E4E9  +
cmp eax 6Fh +
jnz loc_100ED57  +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 8 +
jz loc_100EA65  +
or [ebp+var_210] 200h +
jmp loc_100EA65  +
or [ebp+var_210] 40h +
mov [ebp+var_220] 0Ah +
mov eax [ebp+var_210] +
test eax 8000h +
jz loc_100EBE6  +
mov eax [edi] +
mov edx [edi+4] +
add edi 8 +
jmp loc_100EC1B  +
jnz loc_100EA96  +
cmp cl 67h +
jnz loc_100EAF1  +
mov [ebp+var_218] 1 +
jmp loc_100EAF1  +
cmp [ebp+var_218] eax +
jle loc_100EAA4  +
mov [ebp+var_218] eax +
mov ebx 0A3h +
cmp [ebp+var_218] ebx +
jle loc_100EAEB  +
mov esi [ebp+var_218] +
add esi 15Dh +
push esi  +
call ds:__imp_malloc  +
pop ecx  +
mov cl [ebp+var_211] +
mov [ebp+var_244] eax +
test eax eax +
jz loc_100EAE3  +
mov [ebp+var_21C] eax +
mov [ebp+var_254] esi +
jmp loc_100EAF1  +
mov [ebp+var_218] ebx +
jmp loc_100EAF1  +
mov cl [ebp+var_211] +
test byte ptr [ebp+var_210] 80h +
jz loc_100EB04  +
or dword ptr [ebp+var_23C] 80h +
mov eax [edi] +
push dword ptr [ebp+var_23C]  +
mov esi [ebp+var_21C] +
push [ebp+var_218]  +
add edi 8 +
mov [ebp+var_268] eax +
mov eax [edi-4] +
mov [ebp+var_264] eax +
movsx eax cl +
push eax  +
push [ebp+var_254]  +
lea eax [ebp+var_268] +
push esi  +
push eax  +
mov [ebp+var_224] edi +
call sub_100E2E2  +
add esp 18h +
cmp byte ptr [esi] 2Dh +
jnz loc_100EB5F  +
or [ebp+var_210] 100h +
inc [ebp+var_21C]  +
mov eax [ebp+var_21C] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jz loc_100E9F6  +
jmp loc_100EB68  +
mov [ebp+var_218] 8 +
mov [ebp+var_248] edx +
jmp loc_100EBAB  +
sub eax 73h +
jz loc_100E892  +
dec eax  +
dec eax  +
jz loc_100EA5B  +
sub eax 3 +
jnz loc_100ED57  +
mov [ebp+var_248] 27h +
test byte ptr [ebp+var_210] 80h +
mov [ebp+var_220] 10h +
jz loc_100EA65  +
mov al byte ptr [ebp+var_248] +
add al 51h +
mov byte ptr [ebp+var_22C] 30h +
mov byte ptr [ebp+var_22C+1] al +
mov [ebp+var_230] 2 +
jmp loc_100EA65  +
test eax 1000h +
jnz loc_100EA76  +
add edi 4 +
test al 20h +
jz loc_100EC0F  +
mov [ebp+var_224] edi +
test al 40h +
jz loc_100EC08  +
movsx eax word ptr [edi-4] +
jmp loc_100EC0C  +
movzx eax word ptr [edi-4] +
cdq   +
jmp loc_100EC21  +
test al 40h +
mov eax [edi-4] +
jz loc_100EC19  +
cdq   +
jmp loc_100EC1B  +
xor edx edx +
mov [ebp+var_224] edi +
test byte ptr [ebp+var_210] 40h +
jz loc_100EC45  +
cmp edx esi +
jg loc_100EC45  +
jl loc_100EC34  +
cmp eax esi +
jnb loc_100EC45  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_210] 100h +
test [ebp+var_210] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_100EC57  +
xor ebx ebx +
cmp [ebp+var_218] 0 +
jge loc_100EC6C  +
mov [ebp+var_218] 1 +
jmp loc_100EC86  +
and [ebp+var_210] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_218] eax +
jle loc_100EC86  +
mov [ebp+var_218] eax +
mov eax edi +
or eax ebx +
jnz loc_100EC92  +
and [ebp+var_230] eax +
lea esi [ebp+var_D] +
mov eax [ebp+var_218] +
dec [ebp+var_218]  +
test eax eax +
jg loc_100ECAB  +
mov eax edi +
or eax ebx +
jz loc_100ECD8  +
mov eax [ebp+var_220] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call sub_1006138  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_254] ebx +
mov edi eax +
mov ebx edx +
jle loc_100ECD3  +
add ecx [ebp+var_248] +
mov [esi] cl +
dec esi  +
jmp loc_100EC95  +
lea eax [ebp+var_D] +
sub eax esi +
inc esi  +
test [ebp+var_210] 200h +
mov [ebp+var_220] eax +
mov [ebp+var_21C] esi +
jz loc_100ED57  +
test eax eax +
jz loc_100ED01  +
mov ecx esi +
cmp byte ptr [ecx] 30h +
jz loc_100ED57  +
dec [ebp+var_21C]  +
mov ecx [ebp+var_21C] +
mov byte ptr [ecx] 30h +
inc eax  +
jmp loc_100ED51  +
dec ecx  +
cmp [eax] si +
jz loc_100ED1F  +
inc eax  +
inc eax  +
cmp ecx esi +
jnz loc_100ED13  +
sub eax [ebp+var_21C] +
sar eax 1 +
jmp loc_100ED51  +
cmp edi esi +
jnz loc_100ED38  +
mov eax off_10194A0 +
mov [ebp+var_21C] eax +
mov eax [ebp+var_21C] +
jmp loc_100ED47  +
dec ecx  +
cmp byte ptr [eax] 0 +
jz loc_100ED4B  +
inc eax  +
cmp ecx esi +
jnz loc_100ED40  +
sub eax [ebp+var_21C] +
mov [ebp+var_220] eax +
cmp [ebp+var_250] 0 +
jnz loc_100EECA  +
mov eax [ebp+var_210] +
test al 40h +
jz loc_100EDA0  +
test eax 100h +
jz loc_100ED7E  +
mov byte ptr [ebp+var_22C] 2Dh +
jmp loc_100ED96  +
test al 1 +
jz loc_100ED8B  +
mov byte ptr [ebp+var_22C] 2Bh +
jmp loc_100ED96  +
test al 2 +
jz loc_100EDA0  +
mov byte ptr [ebp+var_22C] 20h +
mov [ebp+var_230] 1 +
mov ebx [ebp+var_234] +
sub ebx [ebp+var_220] +
sub ebx [ebp+var_230] +
test byte ptr [ebp+var_210] 0Ch +
jnz loc_100EDD2  +
push [ebp+var_24C]  +
lea eax [ebp+var_228] +
push ebx  +
push 20h  +
call sub_100E264  +
add esp 0Ch +
push [ebp+var_230]  +
mov edi [ebp+var_24C] +
lea eax [ebp+var_228] +
lea ecx [ebp+var_22C] +
call sub_100E28F  +
test byte ptr [ebp+var_210] 8 +
pop ecx  +
jz loc_100EE14  +
test byte ptr [ebp+var_210] 4 +
jnz loc_100EE14  +
push edi  +
push ebx  +
push 30h  +
lea eax [ebp+var_228] +
call sub_100E264  +
add esp 0Ch +
cmp [ebp+var_238] 0 +
jz loc_100EE8E  +
cmp [ebp+var_220] 0 +
jle loc_100EE8E  +
mov eax [ebp+var_220] +
mov esi [ebp+var_21C] +
mov [ebp+var_254] eax +
movzx eax word ptr [esi] +
dec [ebp+var_254]  +
push eax  +
push 6  +
lea eax [ebp+var_D+1] +
push eax  +
lea eax [ebp+var_25C] +
inc esi  +
push eax  +
inc esi  +
call sub_100E398  +
add esp 10h +
test eax eax +
jnz loc_100EE85  +
cmp [ebp+var_25C] eax +
jz loc_100EE85  +
push [ebp+var_25C]  +
lea eax [ebp+var_228] +
lea ecx [ebp+var_D+1] +
call sub_100E28F  +
cmp [ebp+var_254] 0 +
pop ecx  +
jz loc_100EEA6  +
jmp loc_100EE38  +
or [ebp+var_228] 0FFFFFFFFh +
jmp loc_100EEA6  +
push [ebp+var_220]  +
mov ecx [ebp+var_21C] +
lea eax [ebp+var_228] +
call sub_100E28F  +
pop ecx  +
cmp [ebp+var_228] 0 +
jl loc_100EECA  +
test byte ptr [ebp+var_210] 4 +
jz loc_100EECA  +
push edi  +
push ebx  +
push 20h  +
lea eax [ebp+var_228] +
call sub_100E264  +
add esp 0Ch +
cmp [ebp+var_244] 0 +
jz loc_100EEE7  +
push [ebp+var_244]  +
call ds:__imp_free  +
and [ebp+var_244] 0 +
pop ecx  +
mov ebx [ebp+var_260] +
mov edi [ebp+var_224] +
xor esi esi +
mov al [ebx] +
mov [ebp+var_211] al +
test al al +
jz loc_100EF30  +
mov cl al +
jmp loc_100E536  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
jmp loc_100E4FA  +
call ds:__imp__errno  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
jmp loc_100E4F4  +
cmp [ebp+var_240] esi +
jz loc_100EF45  +
cmp [ebp+var_240] 7 +
jnz loc_100E4E9  +
mov eax [ebp+var_228] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0FFFFFFFFh +
jnz loc_100EF99  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_100EFC4  +
cmp edi 7FFFFFFFh +
jbe loc_100EFC1  +
call ds:__imp__errno  +
mov dword ptr [eax] 16h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
call sub_100DE02  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100F02B  +
mov [ebp+var_1C] edi +
push ebx  +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_14] 42h +
call sub_100E486  +
mov ebx eax +
xor eax eax +
add esp 0Ch +
cmp ebx eax +
mov [esi+edi-1] al +
jge loc_100F005  +
cmp [ebp+var_1C] eax +
jl loc_100F026  +
cmp esi eax +
jz loc_100F022  +
cmp edi eax +
jbe loc_100F022  +
mov [esi] al +
jmp loc_100F022  +
dec [ebp+var_1C]  +
js loc_100F011  +
mov ecx [ebp+var_20] +
mov [ecx] al +
jmp loc_100F022  +
lea ecx [ebp+var_20] +
push ecx  +
push eax  +
call sub_100FE0F  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_100F026  +
mov eax ebx +
jmp loc_100F029  +
push 0FFFFFFFEh  +
pop eax  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov ecx [eax+0Ch] +
test cl 40h +
jz loc_100F041  +
cmp dword ptr [eax+8] 0 +
jz loc_100F076  +
add dword ptr [eax+4] 0FFFFFFFEh +
mov edx 0FFFFh +
js loc_100F059  +
mov ecx [eax] +
mov [ecx] si +
add dword ptr [eax] 2 +
movzx ecx si +
jmp loc_100F061  +
or ecx 20h +
mov [eax+0Ch] ecx +
mov ecx edx +
cmp cx dx +
jnz loc_100F076  +
push eax  +
call ds:ferror  +
pop ecx  +
test eax eax +
jz loc_100F076  +
or dword ptr [edi] 0FFFFFFFFh +
retn   +
inc dword ptr [edi]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
mov edi eax +
jle loc_100F0A7  +
push esi  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
dec [ebp+arg_4]  +
call sub_100F033  +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_100F0A6  +
cmp [ebp+arg_4] 0 +
jg loc_100F08D  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebx+0Ch] 40h +
push edi  +
mov edi eax +
jz loc_100F0CA  +
cmp dword ptr [ebx+8] 0 +
jnz loc_100F0CA  +
mov eax [ebp+arg_4] +
add [edi] eax +
jmp loc_100F106  +
cmp [ebp+arg_4] 0 +
jle loc_100F106  +
push esi  +
mov eax [ebp+arg_0] +
movzx esi word ptr [eax] +
dec [ebp+arg_4]  +
mov eax ebx +
call sub_100F033  +
add [ebp+arg_0] 2 +
cmp dword ptr [edi] 0FFFFFFFFh +
jnz loc_100F0FF  +
call ds:__imp__errno  +
cmp dword ptr [eax] 2Ah +
jnz loc_100F105  +
push 3Fh  +
mov eax ebx +
pop esi  +
call sub_100F033  +
cmp [ebp+arg_4] 0 +
jg loc_100F0D1  +
pop esi  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 468h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_428] eax +
mov [ebp+var_418] ebx +
mov [ebp+var_44C] edi +
mov [ebp+var_408] edi +
mov [ebp+var_430] edi +
mov [ebp+var_40C] edi +
mov [ebp+var_424] edi +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_42C] edi +
cmp eax edi +
jnz loc_100F192  +
call ds:__imp__errno  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
mov dword ptr [eax] 16h +
call sub_100DE02  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100FBD3  +
cmp esi edi +
jz loc_100F171  +
movzx ecx word ptr [esi] +
mov [ebp+var_420] edi +
mov [ebp+var_414] edi +
mov [ebp+var_440] edi +
mov [ebp+var_448] edi +
mov [ebp+var_41C] ecx +
cmp cx di +
jz loc_100FBCD  +
inc esi  +
inc esi  +
cmp [ebp+var_420] edi +
mov [ebp+var_450] esi +
jl loc_100FBB8  +
lea eax [ecx-20h] +
cmp ax 58h +
ja loc_100F1EC  +
movzx eax cx +
movzx eax byte ptr ds:(aTypelib+4)[eax] +
and eax 0Fh +
jmp loc_100F1EE  +
xor eax eax +
mov edx [ebp+var_440] +
imul eax eax +
movzx eax ds:byte_1008648[eax+edx] +
push 8  +
shr eax 4 +
pop edx  +
mov [ebp+var_440] eax +
cmp eax edx +
jz loc_100F171  +
cmp eax 7 +
ja loc_100FB95  +
jmp ds:off_100FBE2[eax*4]  +
or [ebp+var_40C] 0FFFFFFFFh +
mov dword ptr [ebp+var_438] edi +
mov [ebp+var_454] edi +
mov [ebp+var_430] edi +
mov [ebp+var_424] edi +
mov [ebp+var_408] edi +
mov [ebp+var_42C] edi +
jmp loc_100FBA3  +
movzx eax cx +
sub eax 20h +
jz loc_100F2A3  +
sub eax 3 +
jz loc_100F294  +
sub eax edx +
jz loc_100F288  +
dec eax  +
dec eax  +
jz loc_100F27C  +
sub eax 3 +
jnz loc_100FB95  +
or [ebp+var_408] edx +
jmp loc_100FBA3  +
or [ebp+var_408] 4 +
jmp loc_100FBA3  +
or [ebp+var_408] 1 +
jmp loc_100FBA3  +
or [ebp+var_408] 80h +
jmp loc_100FBA3  +
or [ebp+var_408] 2 +
jmp loc_100FBA3  +
cmp cx 2Ah +
jnz loc_100F2E0  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_430] eax +
jge loc_100FBA3  +
or [ebp+var_408] 4 +
neg [ebp+var_430]  +
jmp loc_100FBA3  +
mov eax [ebp+var_430] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_430] eax +
jmp loc_100FBA3  +
mov [ebp+var_40C] edi +
jmp loc_100FBA3  +
cmp cx 2Ah +
jnz loc_100F331  +
mov eax [ebx] +
add ebx 4 +
cmp eax edi +
mov [ebp+var_418] ebx +
mov [ebp+var_40C] eax +
jge loc_100FBA3  +
or [ebp+var_40C] 0FFFFFFFFh +
jmp loc_100FBA3  +
mov eax [ebp+var_40C] +
imul eax eax +
movzx ecx cx +
lea eax [eax+ecx-30h] +
mov [ebp+var_40C] eax +
jmp loc_100FBA3  +
movzx eax cx +
cmp eax 49h +
jz loc_100F3A5  +
cmp eax 68h +
jz loc_100F399  +
cmp eax 6Ch +
jz loc_100F376  +
cmp eax 77h +
jnz loc_100FBA3  +
or [ebp+var_408] 800h +
jmp loc_100FBA3  +
cmp word ptr [esi] 6Ch +
jnz loc_100F38D  +
inc esi  +
inc esi  +
or [ebp+var_408] 1000h +
jmp loc_100FBA3  +
or [ebp+var_408] 10h +
jmp loc_100FBA3  +
or [ebp+var_408] 20h +
jmp loc_100FBA3  +
movzx eax word ptr [esi] +
cmp ax 36h +
jnz loc_100F3C7  +
cmp word ptr [esi+2] 34h +
jnz loc_100F3C7  +
add esi 4 +
or [ebp+var_408] 8000h +
jmp loc_100FBA3  +
cmp ax 33h +
jnz loc_100F3E6  +
cmp word ptr [esi+2] 32h +
jnz loc_100F3E6  +
add esi 4 +
and [ebp+var_408] 0FFFF7FFFh +
jmp loc_100FBA3  +
cmp ax 64h +
jz loc_100FBA3  +
cmp ax 69h +
jz loc_100FBA3  +
cmp ax 6Fh +
jz loc_100FBA3  +
cmp ax 75h +
jz loc_100FBA3  +
cmp ax 78h +
jz loc_100FBA3  +
cmp ax 58h +
jz loc_100FBA3  +
mov [ebp+var_440] edi +
mov eax [ebp+var_428] +
lea edi [ebp+var_420] +
mov esi ecx +
mov [ebp+var_42C] 1 +
call sub_100F033  +
jmp loc_100FB9B  +
movzx eax cx +
cmp eax 64h +
jg loc_100F6A1  +
jz loc_100F6F4  +
cmp eax 53h +
jg loc_100F579  +
jz loc_100F4E4  +
sub eax 41h +
jz loc_100F47C  +
dec eax  +
dec eax  +
jz loc_100F4C8  +
dec eax  +
dec eax  +
jz loc_100F47C  +
dec eax  +
dec eax  +
jnz loc_100F9F8  +
add ecx 20h +
mov dword ptr [ebp+var_438] 1 +
mov [ebp+var_41C] ecx +
or [ebp+var_408] 40h +
cmp [ebp+var_40C] edi +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov eax 200h +
mov [ebp+var_434] eax +
jge loc_100F723  +
mov [ebp+var_40C] 6 +
jmp loc_100F78A  +
test [ebp+var_408] 830h +
jnz loc_100F59B  +
or [ebp+var_408] 20h +
jmp loc_100F59B  +
test [ebp+var_408] 830h +
jnz loc_100F4F7  +
or [ebp+var_408] 20h +
mov edi [ebp+var_40C] +
cmp edi 0FFFFFFFFh +
jnz loc_100F507  +
mov edi 7FFFFFFFh +
add ebx 4 +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_418] ebx +
mov ebx [ebx-4] +
mov [ebp+var_410] ebx +
jz loc_100F9BC  +
test ebx ebx +
jnz loc_100F535  +
mov eax off_10194A0 +
mov [ebp+var_410] eax +
and [ebp+var_414] 0 +
mov esi [ebp+var_410] +
test edi edi +
jle loc_100F9F8  +
mov al [esi] +
test al al +
jz loc_100F9F8  +
movzx eax al +
push eax  +
call ds:isleadbyte  +
pop ecx  +
test eax eax +
jz loc_100F564  +
inc esi  +
inc esi  +
inc [ebp+var_414]  +
cmp [ebp+var_414] edi +
jge loc_100F9F8  +
jmp loc_100F54A  +
sub eax 58h +
jz loc_100F814  +
dec eax  +
dec eax  +
jz loc_100F614  +
sub eax 7 +
jz loc_100F48F  +
dec eax  +
dec eax  +
jnz loc_100F9F8  +
movzx eax word ptr [ebx] +
add ebx 4 +
xor esi esi +
inc esi  +
test byte ptr [ebp+var_408] 20h +
mov [ebp+var_42C] esi +
mov [ebp+var_418] ebx +
mov dword ptr [ebp+var_458] eax +
jz loc_100F5F6  +
mov [ebp+var_444] al +
mov eax ds:__mb_cur_max +
mov byte ptr [ebp-443h] 0 +
push dword ptr [eax]  +
lea eax [ebp+var_444] +
push eax  +
lea eax [ebp+var_404] +
push eax  +
call ds:mbtowc  +
add esp 0Ch +
test eax eax +
jge loc_100F5FD  +
mov [ebp+var_454] esi +
jmp loc_100F5FD  +
mov [ebp+var_404] ax +
lea eax [ebp+var_404] +
mov [ebp+var_410] eax +
mov [ebp+var_414] esi +
jmp loc_100F9F8  +
mov eax [ebx] +
add ebx 4 +
mov [ebp+var_418] ebx +
cmp eax edi +
jz loc_100F685  +
mov esi [eax+4] +
cmp esi edi +
jz loc_100F685  +
movzx ecx word ptr [eax] +
cmp [eax+2] cx +
jb loc_100F171  +
test [ebp+var_408] 800h +
movzx eax cx +
jz loc_100F674  +
xor ecx ecx +
mov edx eax +
not edx  +
inc ecx  +
test dl cl +
jz loc_100F171  +
mov edx esi +
not edx  +
test dl cl +
jz loc_100F171  +
mov [ebp+var_410] esi +
shr eax 1 +
mov [ebp+var_42C] ecx +
jmp loc_100F9F2  +
mov [ebp+var_42C] edi +
mov [ebp+var_410] esi +
jmp loc_100F9F2  +
mov eax off_10194A0 +
mov [ebp+var_410] eax +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100F693  +
sub eax edx +
jmp loc_100F9F2  +
cmp eax 70h +
jg loc_100F820  +
jz loc_100F80E  +
cmp eax 65h +
jl loc_100F9F8  +
cmp eax 67h +
jle loc_100F48F  +
cmp eax 69h +
jz loc_100F6F4  +
cmp eax 6Eh +
jz loc_100F171  +
cmp eax 6Fh +
jnz loc_100F9F8  +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] edx +
jz loc_100F705  +
or [ebp+var_408] 200h +
jmp loc_100F705  +
or [ebp+var_408] 40h +
mov [ebp+var_41C] 0Ah +
mov eax [ebp+var_408] +
test eax 8000h +
jz loc_100F884  +
add ebx edx +
mov eax [ebx-8] +
mov edx [ebx-4] +
jmp loc_100F8B9  +
jnz loc_100F737  +
cmp cx 67h +
jnz loc_100F78A  +
mov [ebp+var_40C] 1 +
jmp loc_100F78A  +
cmp [ebp+var_40C] eax +
jle loc_100F745  +
mov [ebp+var_40C] eax +
mov edi 0A3h +
cmp [ebp+var_40C] edi +
jle loc_100F78A  +
mov esi [ebp+var_40C] +
add esi 15Dh +
push esi  +
call ds:__imp_malloc  +
pop ecx  +
mov ecx [ebp+var_41C] +
mov [ebp+var_448] eax +
test eax eax +
jz loc_100F784  +
mov [ebp+var_410] eax +
mov [ebp+var_434] esi +
jmp loc_100F78A  +
mov [ebp+var_40C] edi +
test byte ptr [ebp+var_408] 80h +
jz loc_100F79D  +
or dword ptr [ebp+var_438] 80h +
mov eax [ebx] +
push dword ptr [ebp+var_438]  +
mov esi [ebp+var_410] +
push [ebp+var_40C]  +
add ebx 8 +
mov [ebp+var_468] eax +
mov eax [ebx-4] +
mov [ebp+var_464] eax +
movsx eax cl +
push eax  +
push [ebp+var_434]  +
lea eax [ebp+var_468] +
push esi  +
push eax  +
mov [ebp+var_418] ebx +
call sub_100E2E2  +
add esp 18h +
cmp byte ptr [esi] 2Dh +
jnz loc_100F7F8  +
or [ebp+var_408] 100h +
inc [ebp+var_410]  +
mov eax [ebp+var_410] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jz loc_100F69A  +
jmp loc_100F801  +
mov [ebp+var_40C] edx +
mov [ebp+var_44C] 7 +
jmp loc_100F844  +
sub eax 73h +
jz loc_100F4F7  +
dec eax  +
dec eax  +
jz loc_100F6FB  +
sub eax 3 +
jnz loc_100F9F8  +
mov [ebp+var_44C] 27h +
test byte ptr [ebp+var_408] 80h +
mov [ebp+var_41C] 10h +
jz loc_100F705  +
push 30h  +
pop eax  +
mov word ptr [ebp+var_43C] ax +
mov eax [ebp+var_44C] +
add eax 51h +
mov word ptr [ebp+var_43C+2] ax +
mov [ebp+var_424] 2 +
jmp loc_100F705  +
test eax 1000h +
jnz loc_100F716  +
add ebx 4 +
test al 20h +
jz loc_100F8AD  +
mov [ebp+var_418] ebx +
test al 40h +
jz loc_100F8A6  +
movsx eax word ptr [ebx-4] +
jmp loc_100F8AA  +
movzx eax word ptr [ebx-4] +
cdq   +
jmp loc_100F8BF  +
test al 40h +
mov eax [ebx-4] +
jz loc_100F8B7  +
cdq   +
jmp loc_100F8B9  +
xor edx edx +
mov [ebp+var_418] ebx +
test byte ptr [ebp+var_408] 40h +
jz loc_100F8E3  +
cmp edx edi +
jg loc_100F8E3  +
jl loc_100F8D2  +
cmp eax edi +
jnb loc_100F8E3  +
neg eax  +
adc edx 0 +
neg edx  +
or [ebp+var_408] 100h +
test [ebp+var_408] 9000h +
mov ebx edx +
mov edi eax +
jnz loc_100F8F5  +
xor ebx ebx +
cmp [ebp+var_40C] 0 +
jge loc_100F90A  +
mov [ebp+var_40C] 1 +
jmp loc_100F924  +
and [ebp+var_408] 0FFFFFFF7h +
mov eax 200h +
cmp [ebp+var_40C] eax +
jle loc_100F924  +
mov [ebp+var_40C] eax +
mov eax edi +
or eax ebx +
jnz loc_100F930  +
and [ebp+var_424] eax +
lea esi [ebp+var_205] +
mov eax [ebp+var_40C] +
dec [ebp+var_40C]  +
test eax eax +
jg loc_100F94C  +
mov eax edi +
or eax ebx +
jz loc_100F979  +
mov eax [ebp+var_41C] +
cdq   +
push edx  +
push eax  +
push ebx  +
push edi  +
call sub_1006138  +
add ecx 30h +
cmp ecx 39h +
mov [ebp+var_45C] ebx +
mov edi eax +
mov ebx edx +
jle loc_100F974  +
add ecx [ebp+var_44C] +
mov [esi] cl +
dec esi  +
jmp loc_100F936  +
lea eax [ebp+var_205] +
sub eax esi +
inc esi  +
test [ebp+var_408] 200h +
mov [ebp+var_414] eax +
mov [ebp+var_410] esi +
jz loc_100F9F8  +
test eax eax +
jz loc_100F9A5  +
mov eax esi +
cmp byte ptr [eax] 30h +
jz loc_100F9F8  +
dec [ebp+var_410]  +
mov eax [ebp+var_410] +
inc [ebp+var_414]  +
mov byte ptr [eax] 30h +
jmp loc_100F9F8  +
test ebx ebx +
jnz loc_100F9CB  +
mov eax off_10194A4 +
mov [ebp+var_410] eax +
mov eax [ebp+var_410] +
mov [ebp+var_42C] 1 +
jmp loc_100F9E6  +
dec edi  +
cmp word ptr [eax] 0 +
jz loc_100F9EA  +
inc eax  +
inc eax  +
test edi edi +
jnz loc_100F9DD  +
sub eax [ebp+var_410] +
sar eax 1 +
mov [ebp+var_414] eax +
cmp [ebp+var_454] 0 +
jnz loc_100FB78  +
mov eax [ebp+var_408] +
test al 40h +
jz loc_100FA3A  +
test eax 100h +
jz loc_100FA1A  +
push 2Dh  +
jmp loc_100FA28  +
test al 1 +
jz loc_100FA22  +
push 2Bh  +
jmp loc_100FA28  +
test al 2 +
jz loc_100FA3A  +
push 20h  +
pop ecx  +
mov word ptr [ebp+var_43C] cx +
mov [ebp+var_424] 1 +
mov esi [ebp+var_430] +
sub esi [ebp+var_414] +
sub esi [ebp+var_424] +
mov [ebp+var_45C] esi +
test al 0Ch +
jnz loc_100FA6D  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_100F07E  +
add esp 0Ch +
push [ebp+var_424]  +
mov ebx [ebp+var_428] +
lea eax [ebp+var_43C] +
push eax  +
lea eax [ebp+var_420] +
call sub_100F0AF  +
test byte ptr [ebp+var_408] 8 +
pop ecx  +
pop ecx  +
jz loc_100FAB1  +
test byte ptr [ebp+var_408] 4 +
jnz loc_100FAB1  +
push ebx  +
push esi  +
push 30h  +
lea eax [ebp+var_420] +
call sub_100F07E  +
add esp 0Ch +
cmp [ebp+var_42C] 0 +
jnz loc_100FB36  +
mov eax [ebp+var_414] +
test eax eax +
jle loc_100FB36  +
mov ecx [ebp+var_410] +
mov [ebp+var_41C] ecx +
mov [ebp+var_434] eax +
mov eax ds:__mb_cur_max +
push dword ptr [eax]  +
dec [ebp+var_434]  +
push [ebp+var_41C]  +
lea eax [ebp+var_458] +
push eax  +
call ds:mbtowc  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jle loc_100FB2D  +
mov eax [ebp+var_428] +
mov esi dword ptr [ebp+var_458] +
lea edi [ebp+var_420] +
call sub_100F033  +
add [ebp+var_41C] ebx +
cmp [ebp+var_434] 0 +
mov esi [ebp+var_45C] +
jle loc_100FB4F  +
jmp loc_100FAD6  +
or [ebp+var_420] 0FFFFFFFFh +
jmp loc_100FB4F  +
push [ebp+var_414]  +
lea eax [ebp+var_420] +
push [ebp+var_410]  +
call sub_100F0AF  +
pop ecx  +
pop ecx  +
cmp [ebp+var_420] 0 +
jl loc_100FB78  +
test byte ptr [ebp+var_408] 4 +
jz loc_100FB78  +
push [ebp+var_428]  +
lea eax [ebp+var_420] +
push esi  +
push 20h  +
call sub_100F07E  +
add esp 0Ch +
cmp [ebp+var_448] 0 +
jz loc_100FB95  +
push [ebp+var_448]  +
call ds:__imp_free  +
and [ebp+var_448] 0 +
pop ecx  +
mov ebx [ebp+var_418] +
mov esi [ebp+var_450] +
xor edi edi +
movzx eax word ptr [esi] +
mov [ebp+var_41C] eax +
cmp ax di +
jz loc_100FBB8  +
mov ecx eax +
jmp loc_100F1C0  +
cmp [ebp+var_440] edi +
jz loc_100FBCD  +
cmp [ebp+var_440] 7 +
jnz loc_100F171  +
mov eax [ebp+var_420] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0FFFFFFFFh +
jnz loc_100FC22  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_100FC53  +
cmp edi 3FFFFFFFh +
jbe loc_100FC4D  +
call ds:__imp__errno  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_100DE02  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100FCDE  +
lea eax [edi+edi] +
mov [ebp+var_1C] eax +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_14] 42h +
call sub_100F10E  +
xor ecx ecx +
xor ebx ebx +
add esp 0Ch +
cmp eax ebx +
mov [ebp+arg_4] eax +
mov [esi+edi*2-2] cx +
jge loc_100FC98  +
cmp [ebp+var_1C] ebx +
jl loc_100FCDA  +
cmp esi ebx +
jz loc_100FCDD  +
cmp edi ebx +
jbe loc_100FCDD  +
mov [esi] cx +
jmp loc_100FCDD  +
dec [ebp+var_1C]  +
js loc_100FCA7  +
mov eax [ebp+var_20] +
mov [eax] bl +
inc [ebp+var_20]  +
jmp loc_100FCB8  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_100FE0F  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_100FCDA  +
dec [ebp+var_1C]  +
js loc_100FCC4  +
mov eax [ebp+var_20] +
mov [eax] bl +
jmp loc_100FCD5  +
lea eax [ebp+var_20] +
push eax  +
push ebx  +
call sub_100FE0F  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_100FCDA  +
mov eax [ebp+arg_4] +
jmp loc_100FCDD  +
push 0FFFFFFFEh  +
pop eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100FCFD  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100FCF9  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100FD5E  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100FD56  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100FD60  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100FD46  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_10021C5  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_100FCE7  +
pop ecx  +
test eax eax +
jz loc_100FDC7  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_100FD21  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100FDC7  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100FDD0  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_10015D0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
call ds:_fileno  +
mov [ebp+arg_4] eax +
mov eax [esi+0Ch] +
pop ecx  +
test al 82h +
jnz loc_100FE43  +
call ds:__imp__errno  +
mov dword ptr [eax] 9 +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_100FF83  +
test al 40h +
jz loc_100FE55  +
call ds:__imp__errno  +
mov dword ptr [eax] 22h +
jmp loc_100FE37  +
push ebx  +
xor ebx ebx +
test al 1 +
jz loc_100FE6E  +
mov [esi+4] ebx +
test al 10h +
jz loc_100FEC9  +
mov ecx [esi+8] +
and eax 0FFFFFFFEh +
mov [esi] ecx +
mov [esi+0Ch] eax +
mov eax [esi+0Ch] +
and eax 0FFFFFFEFh +
or eax 2 +
mov [esi+0Ch] eax +
mov [esi+4] ebx +
mov [ebp+var_4] ebx +
test eax 10Ch +
jnz loc_100FED1  +
mov eax ds:_iob +
lea ecx [eax+20h] +
cmp esi ecx +
jz loc_100FE9A  +
add eax 40h +
cmp esi eax +
jnz loc_100FEA8  +
push [ebp+arg_4]  +
call ds:_isatty  +
pop ecx  +
test eax eax +
jnz loc_100FED1  +
call ds:__imp__errno  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov dword ptr [eax] 16h +
call sub_100DE02  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100FF82  +
or eax 20h +
mov [esi+0Ch] eax +
jmp loc_100FEC1  +
test dword ptr [esi+0Ch] 108h +
push edi  +
jz loc_100FF54  +
mov eax [esi+8] +
mov edi [esi] +
lea ecx [eax+1] +
mov [esi] ecx +
mov ecx [esi+18h] +
sub edi eax +
dec ecx  +
cmp edi ebx +
mov [esi+4] ecx +
jle loc_100FF05  +
push edi  +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
jmp loc_100FF4A  +
mov eax [ebp+arg_4] +
cmp eax 0FFFFFFFFh +
jz loc_100FF28  +
cmp eax 0FFFFFFFEh +
jz loc_100FF28  +
mov edx ds:__pioinfo +
mov ecx eax +
and eax 1Fh +
imul eax eax +
sar ecx 5 +
add eax [edx+ecx*4] +
jmp loc_100FF2D  +
mov eax ds:__badioinfo +
test byte ptr [eax+4] 20h +
jz loc_100FF4A  +
push 2  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
call ds:_lseeki64  +
and eax edx +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_100FF70  +
mov eax [esi+8] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
jmp loc_100FF6B  +
xor edi edi +
inc edi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_4]  +
call ds:_write  +
add esp 0Ch +
mov [ebp+var_4] eax +
cmp [ebp+var_4] edi +
jz loc_100FF79  +
or dword ptr [esi+0Ch] 20h +
or eax 0FFFFFFFFh +
jmp loc_100FF81  +
mov eax [ebp+arg_0] +
and eax 0FFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push 20006h  +
push 0  +
push [ebp+phkResult]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
mov esi eax +
test esi esi +
jnz loc_100FFD8  +
push [ebp+lpData]  +
call ds:lstrlenA  +
inc eax  +
push eax  +
push [ebp+lpData]  +
push 1  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegSetValueExA  +
push [ebp+phkResult]  +
mov esi eax +
call ds:RegCloseKey  +
test esi esi +
jle loc_100FFE6  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push 20019h  +
push 0  +
push [ebp+phkResult]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
mov esi eax +
test esi esi +
jnz loc_1010020  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
test esi esi +
jle loc_101002E  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+phkResult]  +
xor esi esi +
push 20006h  +
push esi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExA  +
cmp eax esi +
jz loc_101007C  +
push [ebp+phkResult]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyA  +
cmp eax esi +
jz loc_101007C  +
jle loc_101007A  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax dword ptr [ebp+arg_0] +
push esi  +
push offset stru_10086F8  +
push eax  +
push offset aSoftwareClasse  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call sub_100D132  +
mov esi eax +
add esp 14h +
test esi esi +
jl loc_1010105  +
lea eax [ebp+hKey] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push 80000001h  +
call sub_101003A  +
mov esi eax +
test esi esi +
jl loc_1010105  +
push edi  +
mov eax offset phkResult +
push eax  +
push eax  +
push [ebp+hKey]  +
call sub_100FF8B  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi eax +
lea eax [ebp+hKey] +
push eax  +
push 2001Fh  +
xor esi esi +
push esi  +
push [ebp+lpSubKey]  +
push 80000000h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_10101B8  +
cmp [ebp+arg_4] esi +
jz loc_1010179  +
push offset stru_10101D8  +
push [ebp+hKey]  +
call sub_100FFF2  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov eax ecx +
jmp loc_101017C  +
xor eax eax +
inc eax  +
test eax eax +
jz loc_10101AD  +
push edi  +
push offset phkResult  +
push offset stru_10086F8  +
push [ebp+hKey]  +
call sub_100FF8B  +
mov esi eax +
test esi esi +
jge loc_10101AD  +
and eax 0FFFFh +
cmp eax 5 +
jnz loc_10101AD  +
push [ebp+lpSubKey]  +
call sub_1010088  +
mov esi eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_10101CD  +
cmp [ebp+arg_4] esi +
jnz loc_10101CD  +
test eax eax +
jle loc_10101CB  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] 43h +
jz loc_1010221  +
cmp [ebp+arg_0] 57h +
jz loc_1010215  +
mov eax 80070057h +
jmp loc_101036D  +
mov [ebp+var_214] offset aOpen +
jmp loc_101022B  +
mov [ebp+var_214] offset aOpen2 +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
mov [ebp+dwIndex] ebx +
mov edi 104h +
push ebx  +
mov esi 80000000h +
jmp loc_1010318  +
cmp eax ebx +
jnz loc_101035E  +
cmp [ebp+Name] 2Eh +
jnz loc_10102FA  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
lea eax [ebp+Name] +
push eax  +
push esi  +
call ds:RegOpenKeyExA  +
cmp eax ebx +
jnz loc_101035E  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push ebx  +
push ebx  +
push offset phkResult  +
push [ebp+hKey]  +
mov [ebp+cbName] edi +
call ds:RegQueryValueExA  +
push [ebp+hKey]  +
mov [ebp+var_220] eax +
call ds:RegCloseKey  +
cmp [ebp+var_220] ebx +
jnz loc_10102FA  +
mov eax [ebp+cbName] +
cmp eax ebx +
jz loc_10102FA  +
mov [ebp+eax+var_109] bl +
push 1  +
lea eax [ebp+SubKey] +
push eax  +
mov eax [ebp+var_214] +
call sub_1010134  +
cmp eax ebx +
jl loc_101036A  +
inc [ebp+dwIndex]  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
push esi  +
mov [ebp+cbName] edi +
call ds:RegEnumKeyExA  +
cmp eax 103h +
jnz loc_1010258  +
mov eax [ebp+var_214] +
push ebx  +
push offset aWsffile  +
call sub_1010134  +
cmp eax ebx +
jl loc_101036A  +
mov eax [ebp+var_214] +
push ebx  +
push offset aWshfile  +
call sub_1010134  +
cmp eax ebx +
jl loc_101036A  +
xor eax eax +
jmp loc_101036A  +
jle loc_101036A  +
and eax 0FFFFh +
or eax 80070000h +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 4  +
***
add ecx 4 +
push ecx  +
call ds:InterlockedCompareExchange  +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+21h] 0 +
jz loc_10103CE  +
xor eax eax +
inc eax  +
jmp loc_10103E0  +
mov eax [ebp+wParam] +
mov [ecx+8] eax +
mov ecx [ecx+24Ch] +
push eax  +
call sub_1010CD4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_5C] eax +
xor edi edi +
lea eax [ebp+ppbc] +
push eax  +
push edi  +
mov [ebp+var_60] ecx +
mov [ebp+ppbc] edi +
mov [ebp+var_50] edi +
mov [ebp+lpMultiByteStr] edi +
call ds:CreateBindCtx  +
mov esi eax +
cmp esi edi +
jl loc_10104CA  +
mov eax [ebp+ppbc] +
lea edx [ebp+var_70] +
push edx  +
mov [ebp+var_70] 10h +
mov [ebp+var_6C] edi +
mov [ebp+var_68] edi +
mov [ebp+var_64] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi edi +
jl loc_10104CA  +
mov eax [ebx] +
lea ecx [ebp+var_50] +
push ecx  +
push offset dword_1010500  +
push edi  +
push [ebp+ppbc]  +
push ebx  +
call dword ptr [eax+24h]  +
mov esi eax +
cmp esi edi +
jl loc_10104CA  +
mov eax [ebp+var_50] +
mov ecx [eax] +
push 1  +
lea edx [ebp+var_4C] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
cmp esi edi +
jl loc_10104CA  +
cmp [ebp+var_40] edi +
jnz loc_1010492  +
mov ebx [ebp+len] +
push ebx  +
push edi  +
call ds:SysAllocStringByteLen  +
mov [ebp+lpMultiByteStr] eax +
cmp eax edi +
jnz loc_1010499  +
mov esi 8007000Eh +
jmp loc_10104CA  +
mov eax [ebp+var_50] +
mov ecx [eax] +
push edi  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_10104CA  +
jz loc_10104B6  +
mov esi 80004005h +
jmp loc_10104CA  +
push [ebp+var_5C]  +
mov eax [ebp+var_60] +
push ebx  +
push [ebp+lpMultiByteStr]  +
push dword ptr [eax+18h]  +
call sub_1001F49  +
mov esi eax +
push [ebp+lpMultiByteStr]  +
call ds:SysFreeString  +
mov eax [ebp+var_50] +
cmp eax edi +
jz loc_10104E0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppbc] +
cmp eax edi +
jz loc_10104ED  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
and dword ptr [edi] 0 +
lea esi [ecx+258h] +
cmp dword ptr [esi] 0 +
jnz loc_1010543  +
mov ecx [ecx+244h] +
test ecx ecx +
jz loc_1010557  +
push esi  +
push 0  +
call sub_1011D86  +
test eax eax +
jl loc_1010551  +
mov eax [esi] +
mov [edi] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax 80004005h +
jmp loc_1010551  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea esi [ecx+258h] +
mov eax [esi] +
test eax eax +
jz loc_101057B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
mov [esi] eax +
pop esi  +
test eax eax +
jz loc_101058B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
cmp [esi+28h] ebx +
jnz loc_10105B9  +
xor eax eax +
jmp loc_10105F5  +
mov ecx [esi+244h] +
lea eax [ebp+var_14] +
push eax  +
call sub_10120CE  +
test eax eax +
jl loc_10105CF  +
lea ebx [ebp+var_14] +
xor eax eax +
inc eax  +
cmp [esi+28h] eax +
jnz loc_10105DD  +
cmp byte ptr [esi+20h] 0 +
jz loc_10105DF  +
xor eax eax +
push eax  +
push ebx  +
push edi  +
call ds:SysStringLen  +
push eax  +
push edi  +
push dword ptr [esi+238h]  +
call sub_1012797  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
push ebx  +
mov [ebp+var_4] ebx +
mov [ebp+Buffer] ebx +
mov [ebp+lpMultiByteStr] ebx +
push ebx  +
cmp byte_1019001 bl +
jz loc_10106B5  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
push [ebp+dwMessageId]  +
push ebx  +
push 11FFh  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_1010683  +
push 16h  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+Buffer] eax +
cmp eax ebx +
jnz loc_1010670  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_101066B  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_1010691  +
push [ebp+dwMessageId]  +
push offset a0x8x  +
push 0Bh  +
push eax  +
call sub_100DF20  +
add esp 10h +
push [ebp+Buffer]  +
call ds:SysAllocString  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov esi ds:LocalFree +
cmp [ebp+lpMultiByteStr] ebx +
jz loc_10106A1  +
push [ebp+lpMultiByteStr]  +
call esi  +
cmp [ebp+Buffer] ebx +
jz loc_10106AB  +
push [ebp+Buffer]  +
call esi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
lea eax [ebp+lpMultiByteStr] +
push eax  +
push ebx  +
push [ebp+dwMessageId]  +
push ebx  +
push 11FFh  +
call ds:FormatMessageA  +
test eax eax +
jnz loc_10106F4  +
push 0Bh  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jz loc_1010657  +
push [ebp+dwMessageId]  +
push offset dword_1010740  +
push 0Bh  +
push eax  +
call sub_100DE92  +
add esp 10h +
mov esi ds:MultiByteToWideChar +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1010657  +
lea eax [edi+edi] +
push eax  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+Buffer] eax +
cmp eax ebx +
jz loc_1010657  +
push edi  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jnz loc_1010683  +
jmp loc_1010657  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+Buffer] ebx +
mov [ebp+hMem] ebx +
cmp byte_1019001 bl +
jz loc_10107BD  +
push [ebp+Arguments]  +
lea eax [ebp+Buffer] +
push ebx  +
push eax  +
push ebx  +
push ebx  +
push [ebp+lpWideCharStr]  +
push 500h  +
call ds:FormatMessageW  +
test eax eax +
jnz loc_1010856  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10107B5  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_8] eax +
jmp loc_101086F  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_10107A1  +
call sub_10043F7  +
mov [ebp+lpSource] esp +
cmp esp ebx +
jz loc_1010868  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpSource]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10107A1  +
push [ebp+Arguments]  +
lea eax [ebp+hMem] +
push ebx  +
push eax  +
push ebx  +
push ebx  +
push [ebp+lpSource]  +
push 500h  +
call ds:FormatMessageA  +
test eax eax +
jz loc_10107A1  +
mov esi ds:MultiByteToWideChar +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+hMem]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_10107A1  +
lea eax [edi+edi] +
push eax  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+Buffer] eax +
cmp eax ebx +
jz loc_10107A1  +
push edi  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+hMem]  +
push ebx  +
push ebx  +
call esi  +
jmp loc_1010799  +
push [ebp+Buffer]  +
call ds:SysAllocString  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp eax ebx +
jnz loc_101086F  +
mov [ebp+var_8] 8007000Eh +
mov esi ds:LocalFree +
cmp [ebp+hMem] ebx +
jz loc_101087F  +
push [ebp+hMem]  +
call esi  +
cmp [ebp+Buffer] ebx +
jz loc_1010889  +
push [ebp+Buffer]  +
call esi  +
mov eax [ebp+var_8] +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push [ebp+arg_4]  +
push [ebp+lpWideCharStr]  +
call sub_1010759  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10194C0 +
test eax eax +
jnz loc_1010924  +
mov eax dword_101949C +
test eax eax +
jnz loc_101090F  +
push offset aUrlmon_dll  +
call ds:LoadLibraryA  +
mov dword_101949C eax +
test eax eax +
jnz loc_101090F  +
mov byte_10194BC 1 +
call ds:GetLastError  +
test eax eax +
jle loc_1010931  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1010931  +
push offset aCreateurlmonik  +
push eax  +
call ds:GetProcAddress  +
mov dword_10194C0 eax +
test eax eax +
jz loc_10108F2  +
push 1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte_10194BC 0 +
jnz loc_101097C  +
push [ebp+ppmk]  +
push [ebp+lpszPathName]  +
push [ebp+arg_0]  +
call sub_10108C7  +
test eax eax +
jge loc_1010988  +
push [ebp+ppmk]  +
push [ebp+lpszPathName]  +
call ds:CreateFileMoniker  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor edi edi +
lea eax [ebp+pperrinfo] +
push eax  +
mov [ebp+perrinfo] edi +
mov [ebp+pperrinfo] edi +
mov [ebp+lpWideCharStr] edi +
mov [ebp+var_10] edi +
call ds:CreateErrorInfo  +
mov esi eax +
cmp esi edi +
jl loc_1010A74  +
mov eax [ebp+pperrinfo] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1010A74  +
mov eax [ebp+pperrinfo] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi edi +
jl loc_1010A74  +
push [ebp+uID]  +
lea eax [ebp+lpWideCharStr] +
push eax  +
call sub_1004043  +
test eax eax +
jnz loc_1010A00  +
mov esi 8007000Eh +
jmp loc_1010A74  +
lea eax [ebp+arg_C] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+lpWideCharStr]  +
call sub_1010759  +
mov esi eax +
cmp esi edi +
mov [ebp+Arguments] edi +
jl loc_1010A74  +
mov eax [ebp+pperrinfo] +
push [ebp+var_10]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi edi +
jl loc_1010A74  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi edi +
jl loc_1010A74  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1010A74  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
lea edx [ebp+perrinfo] +
push edx  +
push offset dword_10086A4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_1010A74  +
push [ebp+perrinfo]  +
push edi  +
call ds:SetErrorInfo  +
mov esi eax +
mov eax [ebp+pperrinfo] +
cmp eax edi +
jz loc_1010A81  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+perrinfo] +
cmp eax edi +
jz loc_1010A8E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+lpWideCharStr]  +
mov edi ds:SysFreeString +
call edi  +
push [ebp+var_10]  +
call edi  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor edi edi +
lea eax [ebp+pperrinfo] +
push eax  +
mov [ebp+perrinfo] edi +
mov [ebp+pperrinfo] edi +
mov [ebp+var_C] edi +
call ds:CreateErrorInfo  +
mov esi eax +
cmp esi edi +
jl loc_1010B68  +
mov eax [ebp+pperrinfo] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1010B68  +
mov eax [ebp+pperrinfo] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi edi +
jl loc_1010B68  +
lea eax [ebp+arg_C] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+lpWideCharStr]  +
call sub_1010759  +
mov eax [ebp+pperrinfo] +
push [ebp+var_C]  +
mov [ebp+Arguments] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi edi +
jl loc_1010B68  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi edi +
jl loc_1010B68  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1010B68  +
mov eax [ebp+pperrinfo] +
mov ecx [eax] +
lea edx [ebp+perrinfo] +
push edx  +
push offset dword_10086A4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_1010B68  +
push [ebp+perrinfo]  +
push edi  +
call ds:SetErrorInfo  +
mov esi eax +
mov eax [ebp+pperrinfo] +
cmp eax edi +
jz loc_1010B75  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+perrinfo] +
cmp eax edi +
jz loc_1010B82  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_C]  +
call ds:SysFreeString  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
mov [ebp+var_C] ebx +
mov [ebp+hKey] ebx +
mov [ebp+phkResult] ebx +
cmp byte_1019001 bl +
jnz loc_1010BBB  +
mov [ebp+var_C] 8000401Bh +
jmp loc_1010C3A  +
push esi  +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov edi 20019h +
push edi  +
mov esi offset aSoftwareMicros +
push esi  +
push 80000001h  +
call sub_10033E6  +
lea eax [ebp+hKey] +
push eax  +
push edi  +
push esi  +
push 80000002h  +
call sub_10033E6  +
push 1  +
push [ebp+hKey]  +
push [ebp+phkResult]  +
push offset aEnabled  +
call sub_1004DC9  +
test al al +
jz loc_1010C12  +
push ebx  +
push [ebp+hKey]  +
push [ebp+phkResult]  +
push offset aRemote  +
call sub_1004DC9  +
test al al +
jnz loc_1010C19  +
mov [ebp+var_C] 8000401Bh +
mov esi ds:RegCloseKey +
cmp [ebp+hKey] ebx +
jz loc_1010C29  +
push [ebp+hKey]  +
call esi  +
cmp [ebp+phkResult] ebx +
jz loc_1010C33  +
push [ebp+phkResult]  +
call esi  +
cmp [ebp+var_C] ebx +
pop edi  +
pop esi  +
jge loc_1010C43  +
push 0C8Ah  +
push 1  +
jmp loc_1010C49  +
push 0BEFh  +
push ebx  +
call sub_1004CA1  +
mov eax [ebp+var_C] +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hWnd] +
push 5  +
lea ecx [ebp+ClassName] +
push ecx  +
push eax  +
call ds:GetClassNameA  +
cmp eax 3 +
jnz loc_1010CBF  +
cmp byte ptr [ebp-9] 0 +
jnz loc_1010CBF  +
cmp [ebp+ClassName] 49h +
jz loc_1010CA2  +
cmp [ebp+ClassName] 69h +
jnz loc_1010CBF  +
cmp byte ptr [ebp-0Bh] 4Dh +
jz loc_1010CAE  +
cmp byte ptr [ebp-0Bh] 6Dh +
jnz loc_1010CBF  +
cmp byte ptr [ebp-0Ah] 45h +
jz loc_1010CBA  +
cmp byte ptr [ebp-0Ah] 65h +
jnz loc_1010CBF  +
xor eax eax +
inc eax  +
jmp loc_1010CC1  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_1010CE5  +
inc eax  +
jmp loc_1010D07  +
push 0  +
push [ebp+wParam]  +
push 401h  +
push eax  +
call ds:SendMessageA  +
mov eax [esi+0Ch] +
test eax eax +
jle loc_1010D07  +
and eax 0FFFFh +
or eax 80070000h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+hWnd] +
push edi  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_1010D64  +
push esi  +
mov esi edi +
test edi edi +
jz loc_1010D43  +
push esi  +
call sub_1010C69  +
test al al +
jnz loc_1010D63  +
push esi  +
call ds:GetParent  +
mov esi eax +
test esi esi +
jnz loc_1010D2C  +
mov esi ds:PostMessageA +
push 0  +
push 0  +
push 10h  +
push edi  +
call esi  +
push 0  +
push 0Dh  +
push 100h  +
push edi  +
call esi  +
mov eax [ebp+arg_4] +
inc dword ptr [eax]  +
pop esi  +
xor eax eax +
inc eax  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:KillTimer  +
mov ecx [esi+8] +
and dword ptr [esi+4] 0 +
push 8004FFFEh  +
call sub_1005E71  +
and [ebp+lParam] 0 +
lea eax [ebp+lParam] +
push eax  +
push offset fn  +
push dword ptr [esi+18h]  +
call ds:EnumThreadWindows  +
cmp [ebp+lParam] 0 +
jnz loc_1010D96  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_1010DCD  +
mov eax 80004003h +
jmp loc_1010E09  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset riid +
xor eax eax +
cmps   +
jz loc_1010DFA  +
mov edi [ebp+0Ch] +
push 4  +
pop ecx  +
mov esi offset dword_1010E10 +
xor eax eax +
cmps   +
jz loc_1010DFA  +
and [edx] eax +
mov eax 80004002h +
jmp loc_1010E07  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 2710h +
sbb eax eax +
and eax 1F5h +
dec eax  +
pop ebp  +
retn 10h  +
***
xor eax eax +
inc eax  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
xor esi esi +
lea edx [ebp+var_8] +
push edx  +
mov [eax] esi +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov edi offset riid +
push edi  +
push eax  +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
call dword ptr [ecx]  +
mov ebx eax +
cmp ebx esi +
jl loc_1010ECD  +
mov esi dword_1019010 +
jmp loc_1010EBD  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1010E9F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
mov eax [esi+4] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jl loc_1010ECD  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jz loc_1010EC1  +
mov esi [esi+18h] +
test esi esi +
jnz loc_1010E8E  +
mov eax [ebp+arg_4] +
xor ebx ebx +
test esi esi +
mov [eax] esi +
setz bl  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1010EDA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1010EE7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
lea edx [ebp+var_C] +
push edx  +
xor edi edi +
push offset dword_10086B4  +
mov ebx ecx +
mov ecx [eax] +
push eax  +
mov [ebp+var_C] edi +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_1010FB7  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1010FB7  +
mov esi [ebp+var_8] +
mov ecx [ebp+var_C] +
lea eax [ebx+20h] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
mov edx [ecx] +
lea esi [ebp+var_4] +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+10h]  +
mov esi eax +
test esi esi +
jl loc_1010FB7  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebx+14h] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
test esi esi +
jl loc_1010FB7  +
push [ebp+arg_8]  +
call ds:SysAllocString  +
xor esi esi +
mov [ebx+8] eax +
cmp eax esi +
jnz loc_1010F88  +
mov esi 8007000Eh +
jmp loc_1010FB7  +
mov eax [ebp+var_4] +
mov [ebx+10h] eax +
mov eax [ebp+arg_4] +
mov [ebx+0Ch] eax +
mov ecx [eax] +
push eax  +
mov [ebp+var_4] esi +
call dword ptr [ecx+4]  +
mov eax [ebp+arg_0] +
mov [ebx+4] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax dword_1019010 +
mov [ebx+18h] eax +
mov dword_1019010 ebx +
cmp [ebp+var_8] 0 +
jz loc_1010FC9  +
mov eax [ebp+arg_4] +
push [ebp+var_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [ebp+var_C] +
test eax eax +
jz loc_1010FD6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1010FE3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_1011004  +
mov eax 80004003h +
jmp loc_1011057  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_100239C +
xor eax eax +
cmps   +
jnz loc_101101C  +
mov eax [ebp+8] +
jmp loc_1011041  +
mov esi [ebp+0Ch] +
push 4  +
xor eax eax +
mov eax [ebp+8] +
pop ecx  +
mov edi offset riid +
cmps   +
jz loc_1011041  +
mov esi [ebp+0Ch] +
push ebx  +
push 4  +
pop ecx  +
xor ebx ebx +
lea edi [eax+20h] +
cmps   +
pop ebx  +
jnz loc_101104D  +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1011055  +
and dword ptr [edx] 0 +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+1Ch]  +
mov eax [eax+1Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
and dword ptr [eax] 0 +
mov eax 8002000Bh +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0 +
jnz loc_10110B8  +
mov eax 80004003h +
jmp loc_10110DF  +
cmp dword ptr [ebp+1Ch] 0 +
jz loc_10110B1  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
xor eax eax +
pop ecx  +
mov edi offset dword_10024C4 +
cmps   +
setz al  +
pop edi  +
pop esi  +
dec eax  +
and eax 6C056h +
add eax 80004001h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi [ebp+10h] +
xor ebx ebx +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_10024C4 +
xor eax eax +
cmps   +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
mov [ebp-8] ebx +
mov [ebp-0Ch] ebx +
jz loc_1011125  +
mov edi 80070057h +
jmp loc_1011382  +
mov esi [ebp+8] +
mov eax [esi+0Ch] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push 1  +
lea edx [ebp-4] +
push edx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_101131F  +
cmp [ebp-10h] ebx +
jnz loc_1011157  +
mov edi 8000FFFFh +
jmp loc_101131F  +
push dword ptr [esi+8]  +
mov ebx ds:lstrlenW +
call ebx  +
push dword ptr [ebp-4]  +
mov edi eax +
call ebx  +
add edi eax +
push edi  +
push 0  +
call ds:SysAllocStringLen  +
mov [ebp-8] eax +
test eax eax +
jz loc_10112C8  +
push dword ptr [esi+8]  +
inc edi  +
push edi  +
push eax  +
call sub_100502D  +
push dword ptr [ebp-4]  +
push edi  +
push dword ptr [ebp-8]  +
call sub_100357C  +
mov ecx dword_101900C +
add esp 18h +
lea eax [ebp-0Ch] +
push eax  +
call sub_1010515  +
mov edi eax +
test edi edi +
jl loc_101131F  +
mov eax [ebp-0Ch] +
and dword ptr [ebp+0Ch] 0 +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push dword ptr [ebp+14h]  +
lea edx [ebp-8] +
push 1  +
push edx  +
push offset dword_10024C4  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jge loc_10111EA  +
cmp edi 80020006h +
jnz loc_101131F  +
xor edi edi +
jmp loc_101131F  +
mov ebx [ebp+1Ch] +
mov ecx [ebx+0Ch] +
test ecx ecx +
jbe loc_1011207  +
mov eax [ebx+4] +
cmp dword ptr [eax] 0FFFFFD9Bh +
jnz loc_1011207  +
mov [ebp+8] ebx +
jmp loc_10112F0  +
lea eax [ebp-20h] +
mov [ebp+8] eax +
mov eax [ebx+8] +
inc eax  +
inc ecx  +
mov [ebp-14h] ecx +
xor ecx ecx +
push 10h  +
pop edx  +
mov [ebp-18h] eax +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-20h] eax +
test eax eax +
jz loc_10112C8  +
push 9  +
pop ecx  +
mov [eax] cx +
mov eax [esi+4] +
mov ecx [ebp-20h] +
mov [ecx+8] eax +
mov esi [esi+4] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor edi edi +
inc edi  +
cmp [ebp-18h] edi +
jbe loc_1011270  +
push 10h  +
pop esi  +
mov eax [ebp-20h] +
add eax esi +
push eax  +
call ds:VariantInit  +
inc edi  +
add esi 10h +
cmp edi [ebp-18h] +
jb loc_101125B  +
xor eax eax +
inc eax  +
mov [ebp+10h] eax +
cmp [ebp-18h] eax +
jbe loc_10112A9  +
push 10h  +
pop esi  +
mov eax [ebx] +
lea eax [eax+esi-10h] +
push eax  +
mov eax [ebp-20h] +
add eax esi +
push eax  +
call ds:VariantCopy  +
mov edi eax +
test edi edi +
jl loc_101131F  +
inc dword ptr [ebp+10h]  +
mov eax [ebp+10h] +
add esi 10h +
cmp eax [ebp-18h] +
jb loc_101127E  +
mov eax [ebp-14h] +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_10112CF  +
mov edi 8007000Eh +
jmp loc_101131F  +
mov dword ptr [eax] 0FFFFFD9Bh +
xor eax eax +
inc eax  +
cmp [ebp-14h] eax +
jbe loc_10112F0  +
mov ecx [ebx+4] +
mov ecx [ecx+eax*4-4] +
mov edx [ebp-1Ch] +
mov [edx+eax*4] ecx +
inc eax  +
cmp eax [ebp-14h] +
jb loc_10112DD  +
push 0  +
push 0  +
call ds:SetErrorInfo  +
push dword ptr [ebp+28h]  +
mov eax [ebp-0Ch] +
push dword ptr [ebp+24h]  +
mov ecx [eax] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push offset dword_10024C4  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
xor ebx ebx +
cmp [ebp-20h] ebx +
jz loc_101134B  +
xor esi esi +
cmp [ebp-18h] esi +
jbe loc_1011342  +
mov eax [ebp-20h] +
add eax esi +
push eax  +
call ds:VariantClear  +
inc ebx  +
add esi 10h +
cmp ebx [ebp-18h] +
jb loc_101132D  +
push dword ptr [ebp-20h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
xor ebx ebx +
cmp [ebp-1Ch] ebx +
jz loc_101135B  +
push dword ptr [ebp-1Ch]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov esi ds:SysFreeString +
cmp [ebp-4] ebx +
jz loc_101136B  +
push dword ptr [ebp-4]  +
call esi  +
cmp [ebp-8] ebx +
jz loc_1011375  +
push dword ptr [ebp-8]  +
call esi  +
mov eax [ebp-0Ch] +
cmp eax ebx +
jz loc_1011382  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1008704 +
mov eax dword_1019010 +
mov ecx offset dword_1019010 +
jmp loc_10113B0  +
cmp eax esi +
jz loc_10113B6  +
lea ecx [eax+18h] +
mov eax [ecx] +
test eax eax +
jz loc_10113BB  +
jmp loc_10113A7  +
mov eax [eax+18h] +
mov [ecx] eax +
mov eax [esi+10h] +
test eax eax +
jz loc_10113D4  +
push dword ptr [esi+14h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [esi+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_10113E1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+4] +
test eax eax +
jz loc_10113EE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [esi+8]  +
call ds:SysFreeString  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011390  +
test [ebp+arg_0] 1 +
jz loc_1011418  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+1Ch]  +
mov eax [ecx+1Ch] +
cmp eax 1 +
jnb loc_1011440  +
push 1  +
call sub_10113FE  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax ecx +
or dword ptr [eax+14h] 0FFFFFFFFh +
xor ecx ecx +
mov dword ptr [eax] offset off_1008704 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
mov dword ptr [eax+1Ch] 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
mov eax ecx +
test edx edx +
jnz loc_1011488  +
mov eax 80004003h +
jmp loc_10114FD  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_100881C +
xor ebx ebx +
cmps   +
jnz loc_10114A1  +
lea ecx [eax-8] +
jmp loc_10114E0  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_1011504 +
xor ebx ebx +
cmps   +
jz loc_101149C  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_1011524 +
xor ebx ebx +
cmps   +
jz loc_101149C  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_1011514 +
xor ebx ebx +
cmps   +
jnz loc_10114EF  +
lea ecx [eax-8] +
neg ecx  +
lea esi [eax-4] +
sbb ecx ecx +
and ecx esi +
add eax 0FFFFFFF8h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_10114FA  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1001AB5  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
pop ds  +
cmp al 97h +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
and [edi+edx*4] bh +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
and bh [edi+edx*4] +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101154B  +
mov eax 80004003h +
jmp loc_101155A  +
xor eax eax +
cmp [ebp+10h] eax +
setz al  +
lea eax [eax+eax-7FFFBFFFh] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1011576  +
mov eax 80004003h +
jmp loc_101157B  +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 0FFFFFFFCh +
mov ecx [eax] +
push offset dword_100881C  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_10115B9  +
mov eax 80004003h +
jmp loc_101160B  +
cmp dword ptr [ebp+0Ch] 0 +
jl loc_1011606  +
cmp dword ptr [ebp+0Ch] 3 +
jg loc_1011606  +
push esi  +
mov esi [ebp+8] +
push 5Ch  +
push dword ptr [esi+30h]  +
call sub_100343E  +
test eax eax +
jnz loc_10115EA  +
push 2Fh  +
push dword ptr [esi+30h]  +
call sub_100343E  +
test eax eax +
jnz loc_10115EA  +
mov eax [esi+30h] +
jmp loc_10115EC  +
inc eax  +
inc eax  +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
pop esi  +
jmp loc_101160B  +
mov eax 80070057h +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+44h] +
cmp ecx 0FFFFFFFFh +
jnz loc_101162C  +
mov eax 80004005h +
jmp loc_1011649  +
cmp dword ptr [eax+40h] 0FFFFFFFFh +
jz loc_1011625  +
mov edx [ebp+0Ch] +
test edx edx +
jz loc_101163B  +
mov [edx] ecx +
mov ecx [ebp+10h] +
test ecx ecx +
jz loc_1011647  +
mov eax [eax+40h] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_1011666  +
mov eax 80004003h +
jmp loc_10116AA  +
mov edx [ebp+8] +
push esi  +
mov esi [ebp+0Ch] +
cmp esi [edx+44h] +
jbe loc_1011679  +
mov eax 80070057h +
jmp loc_10116A9  +
mov ecx [edx+24h] +
mov edx [edx+40h] +
mov eax ecx +
lea edx [ecx+edx*2] +
cmp esi 1 +
jb loc_10116A1  +
cmp ecx edx +
jnb loc_10116A1  +
push ebx  +
mov bx [eax] +
inc eax  +
inc eax  +
cmp bx 0Ah +
jnz loc_101169C  +
dec esi  +
jz loc_10116A0  +
cmp eax edx +
jb loc_101168E  +
pop ebx  +
sub eax ecx +
sar eax 1 +
mov [edi] eax +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+1Ch] +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi [ebp+8] +
lea ecx [ebx+eax] +
mov eax [esi+40h] +
push edi  +
mov [ebp+1Ch] ecx +
cmp ecx eax +
jb loc_10116D5  +
mov [ebp+1Ch] eax +
mov edi [ebp+1Ch] +
mov eax [ebp+18h] +
sub edi ebx +
test eax eax +
jz loc_10116E3  +
mov [eax] edi +
lea eax [ebp+8] +
push eax  +
push 2  +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
call sub_100394F  +
test eax eax +
jl loc_1011787  +
cmp dword ptr [ebp+10h] 0 +
jz loc_1011718  +
mov eax [esi+24h] +
push dword ptr [ebp+8]  +
lea eax [eax+ebx*2] +
push eax  +
push dword ptr [ebp+10h]  +
call memcpy  +
add esp 0Ch +
mov ebx [ebp+14h] +
test ebx ebx +
jz loc_1011785  +
lea ecx [ebx+edi*2] +
cmp ebx ecx +
jnb loc_1011744  +
sub ecx ebx +
push 4  +
dec ecx  +
pop eax  +
movzx edx ax +
shr ecx 1 +
inc ecx  +
mov eax edx +
shl edx 10h +
or eax edx +
shr ecx 1 +
mov edi ebx +
stos   +
adc ecx ecx +
stos   +
mov eax [esi+38h] +
mov ecx [ebp+0Ch] +
mov edi ecx +
test eax eax +
jz loc_1011785  +
cmp ecx [eax+2Ch] +
ja loc_1011785  +
mov ecx [eax+24h] +
cmp ecx [ebp+1Ch] +
jnb loc_1011785  +
mov eax [esi+24h] +
lea edx [eax+ecx*2] +
mov eax [esi+38h] +
mov esi ecx +
sub esi edi +
lea esi [ebx+esi*2] +
push esi  +
mov esi [eax+2Ch] +
push 0  +
push 0  +
sub esi ecx +
mov ecx [eax+20h] +
push esi  +
push edx  +
call sub_1012085  +
test eax eax +
jl loc_1011787  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_10117A7  +
mov eax 80004003h +
jmp loc_10117F3  +
push esi  +
mov esi [ebp+14h] +
test esi esi +
jnz loc_10117B6  +
mov eax 80004003h +
jmp loc_10117F2  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push offset dword_1008754  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_10117D2  +
mov eax 80004001h +
jmp loc_10117F2  +
mov eax [ebp+10h] +
mov ecx [eax] +
lea edx [ebp+14h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_10117F2  +
mov eax [ebp+14h] +
mov ecx [eax+24h] +
mov [edi] ecx +
mov eax [eax+28h] +
mov [esi] eax +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+38h] +
test eax eax +
jz loc_1011849  +
mov ecx [ebp+0Ch] +
cmp ecx [eax+24h] +
jb loc_1011849  +
mov edx [ebp+10h] +
push edi  +
lea edi [ecx+edx] +
cmp edi [eax+2Ch] +
pop edi  +
ja loc_1011849  +
lea esi [ebp+8] +
push esi  +
push edx  +
push ecx  +
push dword ptr [eax+20h]  +
push dword ptr [eax+1Ch]  +
call sub_10029B6  +
test eax eax +
jl loc_1011849  +
push dword ptr [ebp+14h]  +
mov eax [ebp+8] +
mov ecx [eax] +
push offset dword_100882C  +
push eax  +
call dword ptr [ecx]  +
jmp loc_101184E  +
mov eax 80004005h +
pop esi  +
pop ebp  +
retn 10h  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1011DEC  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10115A5  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001919  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push offset word_1008700  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [eax+4]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx] +
mov eax offset word_1008700 +
push eax  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [edx+4]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov eax 8004FFFFh +
cmp ecx eax +
jz loc_101194A  +
cmp ecx 80020101h +
jz loc_101194A  +
cmp ecx 80070002h +
jl loc_1011914  +
cmp ecx 80070003h +
jg loc_1011914  +
push dword ptr [esi+238h]  +
mov eax dword_1019024 +
push 0CEEh  +
add eax 15h +
push eax  +
mov ecx esi +
call sub_1011885  +
jmp loc_101193D  +
lea eax [ebp+var_4] +
push eax  +
push ecx  +
call sub_101060B  +
push [ebp+var_4]  +
mov ecx dword_1019024 +
push dword ptr [esi+238h]  +
mov eax [esi] +
add ecx 14h +
push 0C84h  +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
push [ebp+var_4]  +
mov esi eax +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 20006h  +
push offset aSoftwareMicros  +
push [ebp+hKey]  +
mov esi ecx +
call sub_10040D0  +
test eax eax +
jl loc_10119B7  +
cmp byte ptr [esi+4] 0 +
jz loc_1011980  +
mov eax [esi] +
jmp loc_1011982  +
xor eax eax +
push edi  +
push eax  +
push offset WideCharStr  +
push [ebp+hKey]  +
call sub_1015683  +
mov edi eax +
test edi edi +
jl loc_10119AB  +
movzx eax byte ptr [esi+6] +
push eax  +
push offset aDisplaylogo  +
push [ebp+hKey]  +
call sub_101573A  +
mov edi eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 39Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+lpFileName] +
xor ebx ebx +
push edi  +
mov [ebp+lpWideCharStr] esi +
cmp byte_1019001 bl +
jz loc_1011A1E  +
push esi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_1011AB2  +
call ds:GetLastError  +
cmp eax 20h +
jnz loc_1011AB6  +
lea eax [ebp+FindFileData] +
push eax  +
push esi  +
call ds:FindFirstFileW  +
jmp loc_1011A9E  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push esi  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1011A4B  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1011ABB  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1011ABB  +
call sub_10043F7  +
mov [ebp+lpMultiByteStr] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpMultiByteStr]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1011A35  +
push [ebp+lpMultiByteStr]  +
call ds:GetFileAttributesA  +
cmp eax 0FFFFFFFFh +
jnz loc_1011AB2  +
call ds:GetLastError  +
cmp eax 20h +
jnz loc_1011AB6  +
lea eax [ebp+var_144] +
push eax  +
push [ebp+lpMultiByteStr]  +
call ds:FindFirstFileA  +
cmp eax ebx +
jz loc_1011AB6  +
cmp eax 0FFFFFFFFh +
jz loc_1011AB6  +
push eax  +
call ds:FindClose  +
xor eax eax +
jmp loc_1011ABB  +
test al 10h +
jz loc_1011AAE  +
mov eax 80070002h +
lea esp [ebp-3A8h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpWideCharStr] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea ecx [ebp+FilePart] +
push ecx  +
lea ecx [ebp+WideCharStr] +
push ecx  +
mov edi 104h +
push edi  +
push eax  +
call sub_100368E  +
xor ebx ebx +
cmp eax ebx +
jl loc_1011BC3  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_10119C1  +
cmp eax ebx +
jl loc_1011BC3  +
push offset word_1008700  +
push edi  +
lea eax [esi+1Ch] +
push eax  +
push offset KeyName  +
push offset AppName  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_101575F  +
cmp eax ebx +
jl loc_1011BC3  +
mov edi offset aOptions +
cmp [esi+5] bl +
jnz loc_1011B8B  +
push ebx  +
lea eax [ebp+var_214] +
push eax  +
push offset WideCharStr  +
push edi  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_1015930  +
cmp eax ebx +
jl loc_1011B86  +
mov ecx [ebp+var_214] +
mov byte ptr [esi+4] 1 +
mov [esi] ecx +
jmp loc_1011B8B  +
mov [esi+4] bl +
xor eax eax +
cmp [esi+8] bl +
jnz loc_1011BC3  +
push 1  +
lea eax [ebp-20Dh] +
push eax  +
push offset aDisplaylogo  +
push edi  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_1015A69  +
cmp eax ebx +
jl loc_1011BBE  +
mov cl [ebp+var_20D] +
mov byte ptr [esi+7] 1 +
mov [esi+6] cl +
jmp loc_1011BC3  +
mov [esi+7] bl +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+CPInfo] +
push eax  +
push [ebp+CodePage]  +
call ds:GetCPInfo  +
mov ecx [ebp+var_4] +
neg eax  +
sbb eax eax +
xor ecx ebp +
neg eax  +
call sub_1001375  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+6] 0 +
jz loc_1011C5B  +
mov ecx dword_101900C +
mov eax [ecx] +
call dword ptr [eax+8]  +
push [ebp+arg_4]  +
mov edx dword_1019024 +
push [ebp+arg_0]  +
mov eax dword_101900C +
mov ecx [eax] +
add edx 15h +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
add esp 10h +
mov eax 8004FFFFh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
cmp [esi+4] eax +
jnz loc_1011CEF  +
xor ecx ecx +
push 4  +
add eax 0Ah +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1011CBD  +
mov eax 8007000Eh +
jmp loc_1011D3B  +
add dword ptr [esi+8] 0Ah +
xor eax eax +
cmp [esi+4] eax +
jle loc_1011CD6  +
mov ecx [esi] +
mov ecx [ecx+eax*4] +
mov [edi+eax*4] ecx +
inc eax  +
cmp eax [esi+4] +
jl loc_1011CC8  +
mov eax [esi+4] +
jmp loc_1011CE0  +
and dword ptr [edi+eax*4] 0 +
inc eax  +
cmp eax [esi+8] +
jl loc_1011CDB  +
push dword ptr [esi]  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov [esi] edi +
push ebx  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov edi eax +
inc edi  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_1011D20  +
mov eax 8007000Eh +
jmp loc_1011D3A  +
push [ebp+lpString]  +
push edi  +
push ebx  +
call sub_100502D  +
mov eax [esi+4] +
mov ecx [esi] +
add esp 0Ch +
mov [ecx+eax*4] ebx +
inc dword ptr [esi+4]  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_1011D72  +
mov eax [esi+24h] +
push [ebp+var_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1011D72  +
xor eax eax +
pop esi  +
cmp eax 80020101h +
jnz locret_1011D7F  +
mov eax 8004FFFFh +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ecx+24h] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1011DB7  +
mov eax 80004003h +
jmp loc_1011DC1  +
call ds:GetActiveWindow  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+24h] +
movzx eax byte ptr [eax+20h] +
neg eax  +
sbb eax eax +
and eax 80004005h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+0Ch] eax +
setz al  +
lea eax [eax+eax-7FFFBFFFh] +
pop ebp  +
retn 8  +
***
xor eax eax +
retn 0Ch  +
***
mov edi edi +
adc bh [edi+edx*4] +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
sub edi [edi+edx*4] +
push ecx  +
or al 0CBh +
rcl byte ptr [ecx] 1 +
mov ch 0C9h +
add [eax+7A0E4A24h] ah +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_14] 0 +
jnz loc_1011FAF  +
mov eax 80004003h +
jmp loc_101200F  +
mov eax [ebp+arg_4] +
mov ecx [eax+1Ch] +
cmp ecx [ebp+arg_8] +
jz loc_1011FC1  +
mov eax 80070057h +
jmp loc_101200F  +
mov edx [eax+3Ch] +
push esi  +
push edi  +
test edx edx +
jz loc_1012008  +
mov esi [ebp+arg_C] +
cmp esi [edx+24h] +
jb loc_1012008  +
mov ecx edx +
mov edi [ecx+28h] +
add edi [ecx+24h] +
mov ecx [ebp+arg_10] +
push ebx  +
lea ebx [esi+ecx] +
cmp ebx edi +
pop ebx  +
ja loc_1012008  +
lea edi [ebp+arg_4] +
push edi  +
push ecx  +
push esi  +
add eax 0FFFFFFFCh +
push eax  +
push dword ptr [edx+1Ch]  +
call sub_10029B6  +
test eax eax +
jl loc_101200D  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
xor eax eax +
jmp loc_101200D  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101202A  +
mov eax 80004003h +
jmp loc_101204A  +
mov eax [ebp+8] +
mov eax [eax+28h] +
mov eax [eax+254h] +
test eax eax +
jnz loc_1012041  +
mov eax 80004001h +
jmp loc_101204A  +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+0Ch] eax +
jnz loc_1012066  +
mov eax 80004003h +
jmp loc_101207C  +
cmp [ebp+10h] eax +
jz loc_101205F  +
xor ecx ecx +
cmp [ebp+14h] eax +
setz cl  +
lea ecx [ecx+ecx-7FFFBFFFh] +
mov eax ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
mov eax [ecx+4Ch] +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax [ecx+4Ch] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+14h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+24h] +
and [ebp+var_4] 0 +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1012118  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1012104  +
mov eax [ebp+var_4] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jl loc_1012104  +
xor esi esi +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1012111  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001B00  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001AE1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_C] +
push ebx  +
xor ebx ebx +
mov [eax] ebx +
mov eax [ebp+arg_10] +
push esi  +
push edi  +
mov [ebp+lpMultiByteStr] ebx +
mov [ebp+hObject] ebx +
mov [ebp+Buffer] 0FEFFh +
cmp eax ebx +
jz loc_1012173  +
mov [eax] ebx +
mov edi ds:WideCharToMultiByte +
cmp [ebp+lpWideCharStr] ebx +
jz loc_10121AF  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call edi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jnz loc_10121AF  +
call ds:GetLastError  +
cmp eax ebx +
jg loc_10121A3  +
mov esi eax +
jmp loc_10123C1  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101219C  +
mov esi ds:GetTempPathA +
push ebx  +
push ebx  +
call esi  +
cmp eax ebx +
jz loc_1012192  +
inc eax  +
push eax  +
mov [ebp+var_14] eax +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+lpPathName] eax +
cmp eax ebx +
jnz loc_10121D9  +
mov esi 8007000Eh +
jmp loc_10123A5  +
push eax  +
push [ebp+var_14]  +
call esi  +
cmp eax ebx +
jnz loc_1012200  +
call ds:GetLastError  +
cmp eax ebx +
jg loc_10121F4  +
mov esi eax +
jmp loc_10123A5  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10121ED  +
mov ecx [ebp+lpMultiByteStr] +
lea esi [eax+ecx+0Fh] +
push esi  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jnz loc_101221F  +
mov esi 8007000Eh +
jmp loc_1012397  +
push eax  +
push ebx  +
push offset PrefixString  +
push [ebp+lpPathName]  +
call ds:GetTempFileNameA  +
test eax eax +
jnz loc_1012250  +
call ds:GetLastError  +
cmp eax ebx +
jg loc_1012244  +
mov esi eax +
jmp loc_1012397  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101223D  +
cmp [ebp+lpWideCharStr] ebx +
jz loc_101227F  +
mov ecx [ebp+lpMultiByteStr] +
mov eax ecx +
lea edx [eax+1] +
mov [ebp+var_14] edx +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_1012260  +
sub eax [ebp+var_14] +
push ebx  +
push ebx  +
sub esi eax +
push esi  +
add eax ecx +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call edi  +
test eax eax +
jz loc_1012233  +
push ebx  +
push 4002100h  +
push 2  +
push ebx  +
push ebx  +
push 0C0000000h  +
push [ebp+lpMultiByteStr]  +
call ds:CreateFileA  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10122A2  +
mov [ebp+hObject] ebx +
cmp [ebp+hObject] ebx +
jz loc_1012233  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jle loc_1012302  +
mov eax [ebp+lpBuffer] +
mov ax [eax] +
mov esi ds:WriteFile +
cmp ax word ptr [ebp+Buffer] +
jz loc_10122D8  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hObject]  +
call esi  +
test eax eax +
jz loc_1012233  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
lea eax [edi+edi] +
push eax  +
push [ebp+lpBuffer]  +
push [ebp+hObject]  +
call esi  +
test eax eax +
jz loc_1012233  +
push [ebp+hObject]  +
call ds:FlushFileBuffers  +
test eax eax +
jz loc_1012233  +
cmp [ebp+arg_10] ebx +
jz loc_1012379  +
mov eax [ebp+lpMultiByteStr] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
cmp cl bl +
jnz loc_101230D  +
push ebx  +
push ebx  +
sub eax esi +
mov esi ds:MultiByteToWideChar +
push eax  +
push [ebp+lpMultiByteStr]  +
mov [ebp+lpBuffer] eax +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1012233  +
push edi  +
push ebx  +
call ds:SysAllocStringLen  +
mov [ebp+lpWideCharStr] eax +
cmp eax ebx +
jnz loc_1012349  +
mov esi 8007000Eh +
jmp loc_1012389  +
push edi  +
push eax  +
push [ebp+lpBuffer]  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jnz loc_1012371  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_101236D  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1012389  +
mov eax [ebp+lpWideCharStr] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
mov ecx [ebp+hObject] +
mov eax [ebp+arg_C] +
mov [ebp+lpWideCharStr] ebx +
mov [eax] ecx +
mov [ebp+hObject] ebx +
xor esi esi +
cmp [ebp+lpWideCharStr] ebx +
jz loc_1012397  +
push [ebp+lpWideCharStr]  +
call ds:SysFreeString  +
cmp [ebp+lpMultiByteStr] ebx +
jz loc_10123A5  +
push [ebp+lpMultiByteStr]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+lpPathName] ebx +
jz loc_10123B3  +
push [ebp+lpPathName]  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [ebp+hObject] ebx +
jz loc_10123C1  +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov [ebp+var_44] eax +
push esi  +
push edi  +
mov eax 0CD44h +
mov [ebp+var_10] ax +
mov eax 11D0h +
mov esi ecx +
xor ebx ebx +
push 0Ah  +
mov [ebp+var_E] ax +
xor eax eax +
pop ecx  +
lea edi [ebp+var_3C] +
stos   +
mov [ebp+var_48] esi +
mov [ebp+var_14] 0AAC56Bh +
mov [ebp+var_C] 8Ch +
mov [ebp+var_B] 0C2h +
mov [ebp+var_A] bl +
mov [ebp+var_9] 0C0h +
mov [ebp+var_8] 4Fh +
mov [ebp+var_7] 0C2h +
mov [ebp+var_6] 95h +
mov [ebp+var_5] 0EEh +
mov [ebp+hLibModule] ebx +
mov [ebp+var_3C] 28h +
cmp [ebp+var_44] ebx +
jz loc_1012455  +
mov esi [ebp+var_44] +
lea edi [ebp+var_38] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_48] +
mov eax [ebp+arg_0] +
add eax eax +
mov ecx offset word_1008700 +
mov [ebp+var_28] edx +
mov [ebp+var_24] eax +
mov [ebp+var_20] ecx +
cmp esi ebx +
jz loc_101246F  +
mov [ebp+var_20] esi +
mov [ebp+var_1C] eax +
mov [ebp+var_18] ecx +
cmp esi ebx +
jz loc_101247C  +
mov [ebp+var_18] esi +
push 30h  +
pop esi  +
push esi  +
lea eax [ebp+var_78] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
add esp 0Ch +
cmp [ebp+arg_8] ebx +
mov [ebp+var_78] esi +
setz al  +
mov [ebp+var_68] ebx +
mov [ebp+var_5C] ebx +
mov [ebp+var_58] ebx +
mov [ebp+var_54] ebx +
mov [ebp+var_64] 3 +
inc eax  +
mov [ebp+var_6C] eax +
mov eax [ebp+arg_8] +
neg eax  +
sbb eax eax +
and eax 0FFFFFF00h +
add eax 100h +
mov [ebp+var_50] eax +
lea eax [ebp+var_3C] +
mov [ebp+var_60] eax +
lea eax [ebp+hLibModule] +
push eax  +
push offset dword_1008774  +
call sub_1002068  +
mov esi eax +
cmp esi ebx +
jl loc_1012552  +
push offset aWinverifytrust  +
push [ebp+hLibModule]  +
call ds:GetProcAddress  +
cmp eax ebx +
jnz loc_1012507  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1012503  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1012552  +
lea ecx [ebp+var_78] +
push ecx  +
lea ecx [ebp+var_14] +
push ecx  +
push ebx  +
call eax  +
mov edi 80070000h +
cmp eax ebx +
jz loc_101252E  +
jbe loc_1012528  +
cmp eax ebx +
jle loc_1012528  +
and eax 0FFFFh +
or eax edi +
mov esi eax +
cmp esi ebx +
jl loc_1012552  +
cmp [ebp+arg_8] ebx +
jnz loc_1012550  +
call ds:GetLastError  +
cmp eax ebx +
jz loc_1012550  +
jbe loc_101254A  +
cmp eax ebx +
jle loc_101254A  +
and eax 0FFFFh +
or eax edi +
mov esi eax +
cmp esi ebx +
jl loc_1012552  +
xor esi esi +
cmp [ebp+hLibModule] ebx +
jz loc_1012560  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+lpBuffer] eax +
push ebx  +
mov eax 0CD44h +
mov [ebp+var_10] ax +
push esi  +
mov eax 11D0h +
push edi  +
mov [ebp+var_E] ax +
xor ebx ebx +
lea eax [ebp+hLibModule] +
push eax  +
mov edi ecx +
push offset dword_1008774  +
mov [ebp+var_30] edi +
mov [ebp+var_14] 0AAC56Bh +
mov [ebp+var_C] 8Ch +
mov [ebp+var_B] 0C2h +
mov [ebp+var_A] bl +
mov [ebp+var_9] 0C0h +
mov [ebp+var_8] 4Fh +
mov [ebp+var_7] 0C2h +
mov [ebp+var_6] 95h +
mov [ebp+var_5] 0EEh +
mov [ebp+hObject] ebx +
mov [ebp+hLibModule] ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_28] ebx +
call sub_1002068  +
mov esi eax +
cmp esi ebx +
jl loc_1012720  +
mov esi ds:GetProcAddress +
push offset aWinverifytrust  +
push [ebp+hLibModule]  +
call esi  +
mov [ebp+var_38] eax +
cmp eax ebx +
jnz loc_1012628  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1012621  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1012720  +
push offset aWintrustgetreg  +
push [ebp+hLibModule]  +
call esi  +
mov [ebp+var_34] eax +
cmp eax ebx +
jz loc_101260D  +
push offset aWintrustsetreg  +
push [ebp+hLibModule]  +
call esi  +
mov [ebp+var_24] eax +
cmp eax ebx +
jz loc_101260D  +
push ebx  +
lea eax [ebp+hObject] +
push eax  +
push [ebp+arg_4]  +
push [ebp+lpBuffer]  +
push 2Eh  +
push edi  +
call wcsrchr  +
pop ecx  +
pop ecx  +
push eax  +
call sub_101214B  +
mov esi eax +
cmp esi ebx +
jl loc_1012720  +
push 30h  +
pop esi  +
push esi  +
lea eax [ebp+var_78] +
push ebx  +
push eax  +
call memset  +
xor eax eax +
add esp 0Ch +
cmp [ebp+arg_C] ebx +
lea edi [ebp+var_48] +
setz al  +
mov [ebp+var_78] esi +
mov [ebp+var_68] ebx +
mov [ebp+var_5C] ebx +
mov [ebp+var_58] ebx +
mov [ebp+var_54] ebx +
mov [ebp+var_50] ebx +
inc eax  +
mov [ebp+var_6C] eax +
lea eax [ebp+var_48] +
mov [ebp+var_60] eax +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+var_30] +
mov [ebp+var_44] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_3C] eax +
mov eax [ebp+hObject] +
mov [ebp+var_64] 1 +
mov [ebp+var_48] 10h +
mov [ebp+var_40] eax +
cmp [ebp+arg_C] ebx +
jnz loc_10126F8  +
lea eax [ebp+var_20] +
push eax  +
call [ebp+var_34]  +
mov eax [ebp+var_20] +
or eax 40000h +
mov [ebp+var_28] eax +
cmp eax [ebp+var_20] +
jz loc_10126F8  +
push eax  +
call [ebp+var_24]  +
test eax eax +
jnz loc_10126F8  +
mov esi 80004005h +
jmp loc_1012720  +
lea eax [ebp+var_78] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
call [ebp+var_38]  +
cmp eax ebx +
jz loc_101271E  +
jbe loc_1012718  +
cmp eax ebx +
jle loc_1012718  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_1012720  +
xor esi esi +
mov eax [ebp+var_20] +
cmp eax [ebp+var_28] +
jz loc_101272C  +
push eax  +
call [ebp+var_24]  +
cmp [ebp+hObject] ebx +
jz loc_101273A  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+hLibModule] ebx +
jz loc_1012748  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte_1019020 0 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
jz loc_10127BB  +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
call sub_10123D5  +
jmp loc_10127C6  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1012578  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+Mode] +
push eax  +
push [ebp+Mode]  +
call ds:GetConsoleMode  +
test eax eax +
setnz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_1002633  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
test ecx ecx +
jnz loc_1012828  +
mov eax 80004003h +
jmp loc_1012835  +
mov eax [ebp+8] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1012852  +
mov eax 80004003h +
jmp loc_101286D  +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_101286B  +
mov eax 8007000Eh +
jmp loc_101286D  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_101288B  +
mov eax 80004003h +
jmp loc_10128A6  +
mov eax [ebp+8] +
push dword ptr [eax+24h]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_10128A4  +
mov eax 8007000Eh +
jmp loc_10128A6  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10128C4  +
mov eax 80004003h +
jmp loc_10128DF  +
mov eax [ebp+8] +
push dword ptr [eax+2Ch]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_10128DD  +
mov eax 8007000Eh +
jmp loc_10128DF  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_10128FC  +
mov eax 80004003h +
jmp loc_101290F  +
mov ecx [ebp+8] +
mov ecx [ecx+40h] +
xor edx edx +
cmp [ecx+20h] dl +
setz dl  +
mov [eax] dx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp word ptr [ebp+0Ch] 0 +
mov ecx [ebp+8] +
mov ecx [ecx+40h] +
setz al  +
mov [ecx+20h] al +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_101294D  +
mov eax 80004003h +
jmp loc_101296E  +
mov eax [ebp+8] +
mov eax [eax+40h] +
push dword ptr [eax+238h]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_101296C  +
mov eax 8007000Eh +
jmp loc_101296E  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jnz loc_101298C  +
mov eax 80004003h +
jmp loc_10129CB  +
mov eax [ebp+8] +
mov eax [eax+40h] +
push esi  +
mov esi [eax+238h] +
push 5Ch  +
push esi  +
call sub_100343E  +
test eax eax +
jnz loc_10129B1  +
push 2Fh  +
push esi  +
call sub_100343E  +
test eax eax +
jz loc_10129B4  +
lea esi [eax+2] +
push esi  +
call ds:SysAllocString  +
mov [edi] eax +
pop esi  +
test eax eax +
jnz loc_10129C9  +
mov eax 8007000Eh +
jmp loc_10129CB  +
xor eax eax +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_10129E8  +
mov eax 80004003h +
jmp loc_10129F6  +
mov ecx [ebp+8] +
mov ecx [ecx+40h] +
movzx ecx word ptr [ecx+10h] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1012A12  +
mov eax 80004003h +
jmp loc_1012A1F  +
mov ecx [ebp+8] +
mov ecx [ecx+40h] +
mov ecx [ecx+8] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jge loc_1012A3A  +
mov eax 80070057h +
jmp loc_1012A48  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax+40h] +
call sub_10103BE  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
xor esi esi +
cmp [ebp+0Ch] esi +
jge loc_1012A6B  +
mov eax 80070057h +
jmp loc_1012B28  +
push ebx  +
mov ebx ds:GetTickCount +
call ebx  +
mov [ebp-4] eax +
fild  dword ptr [ebp-4] +
test eax eax +
jge loc_1012A84  +
fadd  ds:dbl_1012B38 +
fst  qword ptr [ebp-10h] +
fild  dword ptr [ebp+0Ch] +
fadd st st(1) +
fstp  qword ptr [ebp-8] +
fld  st +
fld  qword ptr [ebp-8] +
fcomp  st(2) +
fnstsw  ax +
fstp  st(1) +
test ah 41h +
jnz loc_1012B23  +
fsubr  qword ptr [ebp-8] +
call sub_100E0C0  +
cmp eax 3E8h +
jbe loc_1012AB7  +
mov eax 3E8h +
push 1FFh  +
push eax  +
push 1  +
push esi  +
push esi  +
call ds:MsgWaitForMultipleObjects  +
push 1  +
push esi  +
push esi  +
push esi  +
lea eax [ebp-2Ch] +
push eax  +
call ds:PeekMessageA  +
test eax eax +
jz loc_1012AE4  +
lea eax [ebp-2Ch] +
push eax  +
call ds:DispatchMessageA  +
mov eax [ebp+8] +
mov ecx [eax+40h] +
call sub_10103A1  +
test eax eax +
jnz loc_1012B25  +
call ebx  +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
test eax eax +
jge loc_1012B05  +
fadd  ds:dbl_1012B38 +
fld  qword ptr [ebp-10h] +
fcomp  st(1) +
fnstsw  ax +
test ah 41h +
jnz loc_1012B17  +
fadd  ds:dbl_1012B30 +
fld  qword ptr [ebp-8] +
fcomp  st(1) +
fnstsw  ax +
jmp loc_1012A9A  +
***
fstp  st +
xor eax eax +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jnz loc_1012B5C  +
mov eax 80004003h +
jmp loc_1012BD7  +
push esi  +
mov esi [ebp+8] +
add esi 34h +
mov [eax] ebx +
push edi  +
cmp [esi] ebx +
jnz loc_1012BC7  +
lea eax [ebp-4] +
push eax  +
push offset dword_10086D4  +
push 1  +
push ebx  +
push offset dword_10086E4  +
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_1012BC0  +
cmp byte_1019001 bl +
jz loc_1012BA2  +
mov eax [ebp+8] +
mov eax [eax+40h] +
cmp [eax+25h] bl +
jz loc_1012BA2  +
push esi  +
push 1  +
jmp loc_1012BA4  +
push esi  +
push ebx  +
mov eax [ebp-4] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+80h]  +
mov edi eax +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi ebx +
jge loc_1012BC4  +
mov eax edi +
jmp loc_1012BD5  +
mov eax [ebp+0Ch] +
mov ecx [esi] +
mov [eax] ecx +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jnz loc_1012BFB  +
mov eax 80004003h +
jmp loc_1012C89  +
push esi  +
mov esi [ebp+8] +
add esi 38h +
mov [eax] ebx +
push edi  +
cmp [esi] ebx +
jnz loc_1012C79  +
lea eax [ebp-4] +
push eax  +
push offset dword_10086D4  +
push 1  +
push ebx  +
push offset dword_10086E4  +
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_1012C72  +
cmp byte_1019001 bl +
jz loc_1012C53  +
mov eax [ebp+8] +
mov eax [eax+40h] +
cmp [eax+25h] bl +
jnz loc_1012C4E  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
push eax  +
call sub_10127CF  +
test al al +
jz loc_1012C53  +
push esi  +
push 1  +
jmp loc_1012C55  +
push esi  +
push ebx  +
mov eax [ebp-4] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+80h]  +
mov edi eax +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi ebx +
jge loc_1012C76  +
mov eax edi +
jmp loc_1012C87  +
mov eax [ebp+0Ch] +
mov ecx [esi] +
mov [eax] ecx +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jnz loc_1012CAD  +
mov eax 80004003h +
jmp loc_1012D3B  +
push esi  +
mov esi [ebp+8] +
add esi 3Ch +
mov [eax] ebx +
push edi  +
cmp [esi] ebx +
jnz loc_1012D2B  +
lea eax [ebp-4] +
push eax  +
push offset dword_10086D4  +
push 1  +
push ebx  +
push offset dword_10086E4  +
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_1012D24  +
cmp byte_1019001 bl +
jz loc_1012D05  +
mov eax [ebp+8] +
mov eax [eax+40h] +
cmp [eax+25h] bl +
jnz loc_1012D00  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push eax  +
call sub_10127CF  +
test al al +
jz loc_1012D05  +
push esi  +
push 1  +
jmp loc_1012D07  +
push esi  +
push ebx  +
mov eax [ebp-4] +
mov ecx [eax] +
push 2  +
push eax  +
call dword ptr [ecx+80h]  +
mov edi eax +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi ebx +
jge loc_1012D28  +
mov eax edi +
jmp loc_1012D39  +
mov eax [ebp+0Ch] +
mov ecx [esi] +
mov [eax] ecx +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
xor ebx ebx +
lea ecx [ebp+var_4] +
push ecx  +
mov [eax] ebx +
mov eax [esi] +
push esi  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
call dword ptr [eax+0Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_1012DE7  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+28h] 5 +
movzx ecx word ptr [eax+30h] +
mov [ebp+var_C] ecx +
jz loc_1012D83  +
mov edi 8000FFFFh +
jmp loc_1012DE7  +
test ecx ecx +
jbe loc_1012DCE  +
mov eax [esi] +
lea ecx [ebp+var_10] +
push ecx  +
push ebx  +
push esi  +
call dword ptr [eax+24h]  +
mov edi eax +
test edi edi +
jl loc_1012DE7  +
mov eax [ebp+var_10] +
and eax 3 +
cmp al 3 +
jz loc_1012DAA  +
inc ebx  +
cmp ebx [ebp+var_C] +
jnb loc_1012DCE  +
jmp loc_1012D87  +
mov eax [esi] +
lea ecx [ebp+var_14] +
push ecx  +
push ebx  +
push esi  +
call dword ptr [eax+20h]  +
mov edi eax +
test edi edi +
jl loc_1012DE7  +
mov eax [esi] +
lea ecx [ebp+var_8] +
push ecx  +
push [ebp+var_14]  +
push esi  +
call dword ptr [eax+38h]  +
mov edi eax +
test edi edi +
jl loc_1012DE7  +
cmp ebx [ebp+var_C] +
jnz loc_1012DDA  +
mov edi 80004005h +
jmp loc_1012DE7  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_0] +
xor edi edi +
mov [ecx] eax +
mov [ebp+var_8] edi +
cmp [ebp+var_4] 0 +
jz loc_1012DF6  +
push [ebp+var_4]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4Ch]  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1012E03  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
push 30h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1012E33  +
mov ecx eax +
call sub_1011449  +
mov edi eax +
jmp loc_1012E35  +
xor edi edi +
test edi edi +
jnz loc_1012E40  +
mov esi 8007000Eh +
jmp loc_1012E83  +
mov esi [ebp+arg_4] +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
call sub_1012D45  +
mov ebx [ebp+var_4] +
mov esi eax +
test esi esi +
jl loc_1012E6E  +
push [ebp+arg_8]  +
mov ecx edi +
push ebx  +
push [ebp+arg_0]  +
call sub_1010EF5  +
mov esi eax +
test esi esi +
jl loc_1012E6E  +
xor edi edi +
xor esi esi +
test ebx ebx +
jz loc_1012E78  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
pop ebx  +
test edi edi +
jz loc_1012E83  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [esi] +
push ebx  +
push edi  +
lea ecx [ebp+var_C] +
push ecx  +
xor ebx ebx +
push esi  +
mov [ebp+var_10] ebx +
mov [ebp+var_4] ebx +
call dword ptr [eax+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_1012F1F  +
cmp [ebp+var_C] ebx +
jnz loc_1012EBE  +
mov edi 80004002h +
jmp loc_1012F1F  +
mov [ebp+var_8] ebx +
cmp [ebp+var_C] ebx +
jbe loc_1012F1F  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1012ED6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov eax [esi] +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp+var_14] +
push ecx  +
lea ecx [ebp+var_4] +
push ecx  +
push 1  +
push [ebp+var_8]  +
push esi  +
call dword ptr [eax+18h]  +
mov edi eax +
cmp edi ebx +
jl loc_1012F0D  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call sub_1012E10  +
mov edi eax +
cmp edi ebx +
jl loc_1012F0D  +
mov [ebp+var_10] 1 +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_C] +
jb loc_1012EC6  +
cmp [ebp+var_10] ebx +
jz loc_1012F1F  +
xor edi edi +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1012F2C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea ecx [ebp+var_C] +
push ecx  +
mov esi eax +
mov eax [esi] +
push offset loc_1012FE0  +
push esi  +
call dword ptr [eax]  +
test eax eax +
jl loc_1012F73  +
push [ebp+arg_0]  +
push esi  +
mov esi [ebp+var_C] +
call sub_1012E90  +
mov edi eax +
jmp loc_1012FAE  +
mov eax [esi] +
lea ecx [ebp+var_8] +
push ecx  +
push offset loc_10022E8  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jl loc_1012FAE  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_1012FAE  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
push esi  +
call sub_1012E10  +
mov edi eax +
test edi edi +
jl loc_1012FAE  +
xor edi edi +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1012FBB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1012FC8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
test eax eax +
jz loc_1012FD5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push [ebp+arg_4]  +
xor ebx ebx +
mov eax edi +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
call sub_1012F39  +
mov esi eax +
cmp esi ebx +
jge loc_101308D  +
mov eax [edi] +
lea ecx [ebp+var_10] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_101308D  +
cmp [ebp+var_10] ebx +
jnz loc_1013036  +
mov esi 80004005h +
jmp loc_101308D  +
mov eax [edi] +
lea ecx [ebp+var_8] +
push ecx  +
push 800h  +
push ebx  +
push edi  +
call dword ptr [eax+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_101308D  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
lea edx [ebp+var_C] +
push edx  +
push eax  +
call dword ptr [ecx+48h]  +
mov esi eax +
cmp esi ebx +
jl loc_101308D  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jl loc_101308D  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push edi  +
call sub_1012E10  +
mov esi eax +
cmp esi ebx +
jl loc_101308D  +
xor esi esi +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_101309A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_10130A7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_10130B4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_10130DF  +
mov eax 80004003h +
jmp locret_10130F3  +
jnz loc_10130F1  +
mov eax [ebp-4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_1010E57  +
test eax eax +
jl locret_10130F3  +
jmp loc_10130D4  +
***
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1013144  +
mov eax [ebp+10h] +
test eax eax +
jz loc_1013144  +
xor ecx ecx +
cmp cx [eax] +
jz loc_1013144  +
push eax  +
mov eax [ebp+0Ch] +
call sub_1012F39  +
test eax eax +
jge loc_1013140  +
push 0C1Eh  +
push offset aWscript_create  +
push offset dword_1001ACC  +
call sub_1010991  +
add esp 0Ch +
mov eax 80020009h +
jmp loc_1013149  +
xor eax eax +
jmp loc_1013149  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
mov ebx [ebp+0Ch] +
test ebx ebx +
jnz loc_1013169  +
xor eax eax +
jmp loc_101327D  +
push esi  +
push edi  +
lea ecx [ebp-14h] +
call sub_1003C36  +
xor eax eax +
push 400h  +
lea ecx [ebp-14h] +
mov [ebp-34h] ax +
mov [ebp-24h] ax +
call sub_1003641  +
mov edi ds:VariantClear +
mov esi eax +
test esi esi +
jl loc_1013265  +
mov ebx [ebx+10h] +
and dword ptr [ebp-4] 0 +
test ebx ebx +
jle loc_101324F  +
lea eax [ebp-34h] +
push eax  +
call edi  +
lea eax [ebp-24h] +
push eax  +
call edi  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
call ds:SafeArrayGetElement  +
mov esi eax +
test esi esi +
jl loc_1013265  +
xor eax eax +
inc eax  +
push 8  +
cmp ax [ebp-34h] +
jnz loc_10131F9  +
pop eax  +
push offset aNull  +
mov [ebp-24h] ax +
call ds:SysAllocString  +
mov [ebp-1Ch] eax +
test eax eax +
jnz loc_101320F  +
mov esi 8007000Eh +
jmp loc_1013265  +
push 0  +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
test esi esi +
jl loc_1013265  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-14h] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1013265  +
lea eax [ebx-1] +
cmp [ebp-4] eax +
jz loc_1013243  +
push 1  +
lea eax [ebp-8] +
push eax  +
lea ecx [ebp-14h] +
mov dword ptr [ebp-8] 20h +
call sub_1002633  +
mov esi eax +
test esi esi +
jl loc_1013265  +
inc dword ptr [ebp-4]  +
cmp [ebp-4] ebx +
jl loc_10131A9  +
mov eax [ebp+8] +
mov ecx [eax+40h] +
push dword ptr [ebp-14h]  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
mov esi eax +
test esi esi +
jl loc_1013265  +
xor esi esi +
lea eax [ebp-34h] +
push eax  +
call edi  +
lea eax [ebp-24h] +
push eax  +
call edi  +
lea ecx [ebp-14h] +
call sub_1005992  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp-4] eax +
mov ecx [ebp+18h] +
mov edx [ebp+14h] +
mov eax [ebp+10h] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+0Ch] +
mov [ebp-22Ch] edx +
mov [ebp-230h] ecx +
cmp ecx ebx +
jnz loc_10132D2  +
mov eax 80004003h +
jmp loc_101353F  +
cmp esi ebx +
jz loc_10132DD  +
cmp [esi] bx +
jnz loc_10132DD  +
xor esi esi +
cmp edx ebx +
jz loc_10132EC  +
cmp [edx] bx +
jnz loc_10132EC  +
mov [ebp-22Ch] ebx +
push edi  +
cmp eax ebx +
jz loc_101339C  +
cmp [eax] bx +
jnz loc_10132FC  +
xor eax eax +
cmp eax ebx +
jz loc_101339C  +
lea ecx [ebp-220h] +
push ecx  +
lea ecx [ebp-21Ch] +
push ecx  +
push eax  +
call sub_1002B37  +
cmp eax ebx +
jl loc_101353E  +
cmp esi ebx +
jz loc_1013378  +
mov eax [ebp-220h] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push offset dword_1013550  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp edi ebx +
jge loc_101334C  +
mov eax [ebp-220h] +
jmp loc_10133CE  +
mov eax [ebp-224h] +
mov ecx [eax] +
push 2  +
push esi  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov eax [ebp-224h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jge loc_1013378  +
mov eax [ebp-220h] +
jmp loc_10134A1  +
mov eax [ebp-220h] +
mov ecx [eax] +
lea edx [ebp-228h] +
push edx  +
push offset dword_100239C  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp-220h] +
jmp loc_10134D2  +
cmp esi ebx +
jnz loc_10133AA  +
mov eax 80070057h +
jmp loc_101353E  +
lea eax [ebp-220h] +
push eax  +
push ebx  +
mov [ebp-220h] ebx +
call ds:CreateBindCtx  +
mov edi eax +
cmp edi ebx +
jge loc_10133DB  +
mov eax [ebp-220h] +
cmp eax ebx +
jz loc_10133D4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_101353E  +
push 3Ah  +
push esi  +
mov [ebp-224h] ebx +
call sub_101565A  +
cmp eax ebx +
jz loc_1013407  +
sub eax esi +
and eax 0FFFFFFFEh +
cmp eax 2 +
jz loc_1013407  +
lea eax [ebp-224h] +
push eax  +
push esi  +
push ebx  +
call sub_101095C  +
jmp loc_101344F  +
lea eax [ebp-234h] +
push eax  +
lea eax [ebp-20Ch] +
push eax  +
push 104h  +
push esi  +
call sub_100368E  +
mov esi eax +
cmp esi ebx +
jge loc_101342E  +
mov eax [ebp-224h] +
jmp loc_101348D  +
lea eax [ebp-224h] +
push eax  +
lea eax [ebp-238h] +
push eax  +
lea eax [ebp-20Ch] +
push eax  +
push dword ptr [ebp-220h]  +
call ds:MkParseDisplayName  +
mov esi eax +
cmp esi ebx +
mov eax [ebp-224h] +
jl loc_101348D  +
mov ecx [eax] +
lea edx [ebp-228h] +
push edx  +
push offset dword_100239C  +
push ebx  +
push dword ptr [ebp-220h]  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi 800C0005h +
jnz loc_1013483  +
mov esi 800401EAh +
cmp esi ebx +
mov eax [ebp-224h] +
jge loc_10134A9  +
cmp eax ebx +
jz loc_1013497  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-220h] +
cmp eax ebx +
jz loc_10134DC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10134DC  +
mov ecx [eax] +
lea edx [ebp-21Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
mov eax [ebp-224h] +
cmp eax ebx +
jz loc_10134C8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-220h] +
cmp eax ebx +
jz loc_10134D8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jge loc_10134E0  +
mov eax esi +
jmp loc_101353E  +
cmp [ebp-22Ch] ebx +
jz loc_101352E  +
push dword ptr [ebp-22Ch]  +
mov edi [ebp-228h] +
lea eax [ebp-21Ch] +
push eax  +
call sub_1012FF5  +
test eax eax +
jge loc_101352E  +
mov eax [ebp-228h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 0C1Eh  +
push offset aWscript_create  +
push offset dword_1001ACC  +
call sub_1010991  +
add esp 0Ch +
mov eax 80020009h +
jmp loc_101353E  +
mov eax [ebp-228h] +
mov ecx [ebp-230h] +
mov [ecx] eax +
xor eax eax +
pop edi  +
mov ecx [ebp-4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 14h  +
***
mov dword ptr [ecx] offset off_10087B0 +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1013578  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013565  +
test [ebp+arg_0] 1 +
jz loc_10135B3  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_10135D2  +
mov eax 80004003h +
jmp loc_101360E  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset riid +
xor eax eax +
cmps   +
jz loc_10135F6  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1013614 +
xor eax eax +
cmps   +
jnz loc_1013605  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_101360C  +
and [edx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+14h] +
test edx edx +
jnz loc_101363C  +
mov eax 80004003h +
jmp loc_1013669  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1013670 +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jnz loc_1013662  +
mov eax [ebp+8] +
mov eax [eax+4] +
mov ecx [eax] +
push edx  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ecx]  +
jmp loc_1013669  +
and [edx] eax +
mov eax 80004002h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10049BC +
mov dword ptr [esi+4] offset off_10087F0 +
mov dword ptr [esi+8] offset off_10087C0 +
jz loc_10136AE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_10136CD  +
mov eax 80004003h +
jmp loc_1013746  +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
push edi  +
push 4  +
pop ecx  +
mov edi offset riid +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_1013736  +
push 4  +
pop ecx  +
mov edi offset dword_101374C +
mov esi eax +
xor ebx ebx +
cmps   +
jz loc_1013736  +
push 4  +
pop ecx  +
mov edi offset dword_101375C +
mov esi eax +
xor ebx ebx +
cmps   +
jnz loc_101370B  +
mov eax [ebp+8] +
lea esi [eax+4] +
jmp loc_1013721  +
push 4  +
mov esi eax +
pop ecx  +
mov edi offset loc_101376C +
xor eax eax +
cmps   +
jnz loc_101372D  +
mov eax [ebp+8] +
lea esi [eax+8] +
mov ecx eax +
neg ecx  +
sbb ecx ecx +
and ecx esi +
mov [edx] ecx +
jmp loc_101373B  +
and [edx] eax +
mov eax 80004002h +
jmp loc_1013743  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
or [ecx+ebp] cl +
push es  +
stos   +
dec eax  +
rcl byte ptr [ecx] cl +
test [edx] dh +
add [eax+8] ah +
retn   +
***
sti   +
cld   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+10h] +
movzx eax byte ptr [eax+20h] +
neg eax  +
sbb eax eax +
and eax 80004005h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
mov ebx [ebp+10h] +
mov eax [ebx] +
push esi  +
lea ecx [ebp-48h] +
xor esi esi +
push ecx  +
push ebx  +
mov [ebp-4] esi +
mov [ebp-0Ch] esi +
mov [ebp-8] esi +
call dword ptr [eax+0Ch]  +
cmp eax esi +
jl loc_101396B  +
push edi  +
mov edi [ebp+8] +
mov ecx [edi+10h] +
call sub_1005FF1  +
test eax eax +
jnz loc_10137E6  +
mov eax 80004005h +
jmp loc_101396A  +
mov ecx [ebp-2Ch] +
cmp ecx 80004004h +
jz loc_101392A  +
cmp ecx 8004FFFCh +
jz loc_1013894  +
cmp ecx 8004FFFDh +
jz loc_101393C  +
cmp ecx 8004FFFEh +
jz loc_101392A  +
mov eax [ebp-40h] +
cmp eax esi +
jz loc_101382B  +
xor edx edx +
cmp dx [eax] +
jz loc_101382B  +
mov esi eax +
jmp loc_1013842  +
lea eax [ebp-0Ch] +
push eax  +
push ecx  +
call sub_101060B  +
mov esi eax +
test esi esi +
jl loc_101393C  +
mov esi [ebp-0Ch] +
mov eax [ebx] +
lea ecx [ebp+10h] +
push ecx  +
lea ecx [ebp-10h] +
push ecx  +
push ebx  +
call dword ptr [eax+10h]  +
test eax eax +
jge loc_101385C  +
and dword ptr [ebp-10h] 0 +
or dword ptr [ebp+10h] 0FFFFFFFFh +
mov eax [ebx] +
lea ecx [ebp-4] +
push ecx  +
push ebx  +
call dword ptr [eax+14h]  +
test eax eax +
jge loc_101386E  +
and dword ptr [ebp-4] 0 +
mov edx [ebp+0Ch] +
mov ecx [edi+10h] +
mov eax [ecx] +
and edx 1 +
push edx  +
push dword ptr [ebp-2Ch]  +
mov edx [ebp+10h] +
push dword ptr [ebp-4]  +
inc edx  +
push esi  +
push dword ptr [ebp-44h]  +
push edx  +
push dword ptr [ebp-10h]  +
call dword ptr [eax+14h]  +
jmp loc_1013934  +
cmp [edi+18h] esi +
jnz loc_101393C  +
mov eax [edi+14h] +
mov dword ptr [edi+18h] 1 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
test esi esi +
jl loc_101393C  +
mov ecx [edi+10h] +
lea eax [ebp-8] +
push eax  +
call sub_1010515  +
mov esi eax +
test esi esi +
jl loc_101393C  +
mov eax [ebp-8] +
and dword ptr [ebp-14h] 0 +
lea edx [ebp-14h] +
push edx  +
mov ebx 400h +
push ebx  +
push 1  +
lea edx [ebp-18h] +
push edx  +
mov edi offset dword_10024C4 +
push edi  +
mov dword ptr [ebp-18h] offset aWscript_onscri +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
xor eax eax +
cmp esi eax +
jge loc_1013905  +
cmp esi 80020006h +
jz loc_101393A  +
jmp loc_101393C  +
mov ecx [ebp-8] +
push eax  +
push eax  +
push eax  +
mov [ebp-28h] eax +
mov [ebp-24h] eax +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
mov edx [ecx] +
lea eax [ebp-28h] +
push eax  +
push 1  +
push ebx  +
push edi  +
push dword ptr [ebp-14h]  +
push ecx  +
call dword ptr [edx+18h]  +
jmp loc_1013934  +
mov edi [edi+10h] +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+20h]  +
mov esi eax +
test esi esi +
jl loc_101393C  +
xor esi esi +
push dword ptr [ebp-40h]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [ebp-44h]  +
call edi  +
push dword ptr [ebp-3Ch]  +
call edi  +
push dword ptr [ebp-4]  +
call edi  +
push dword ptr [ebp-0Ch]  +
call edi  +
mov eax [ebp-8] +
test eax eax +
jz loc_1013968  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+0Ch] +
call sub_10103A1  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
dec eax  +
push esi  +
jz loc_1013A07  +
dec eax  +
jz loc_10139AB  +
mov eax 80004001h +
jmp loc_1013A1D  +
mov esi [ebp+14h] +
test esi esi +
jz loc_1013A00  +
push 8  +
pop eax  +
cmp ax [esi] +
jnz loc_1013A00  +
push 0FFFFFFFFh  +
push offset aWscript  +
push dword ptr [esi+8]  +
call sub_1001B8C  +
test eax eax +
jz loc_10139E0  +
push 0FFFFFFFFh  +
push offset aWsh  +
push dword ptr [esi+8]  +
call sub_1001B8C  +
test eax eax +
jnz loc_1013A00  +
mov ecx [ebp+18h] +
push 9  +
pop eax  +
mov [ecx] ax +
mov eax [ebp+8] +
mov eax [eax+10h] +
mov eax [eax+240h] +
mov [ecx+8] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1013A1B  +
mov eax 80004005h +
jmp loc_1013A1D  +
call ds:GetActiveWindow  +
mov ecx [ebp+18h] +
mov [ecx+8] eax +
mov eax 4000h +
mov [ecx] ax +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push offset dword_100239C  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_1013A48  +
mov eax 80004005h +
jmp loc_1013A61  +
mov eax [ebp+8] +
push dword ptr [ebp+10h]  +
mov ecx [eax+8] +
call sub_1010563  +
mov eax [ebp+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+8] +
push 0  +
call sub_1010563  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_1013AE1  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset loc_1002BD4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1013AE1  +
push dword ptr [ebp+18h]  +
mov eax [ebp-8] +
push dword ptr [ebp+14h]  +
mov ecx [eax] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_1013AEE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_1013AFB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_1013B61  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset loc_1002BD4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1013B61  +
push dword ptr [ebp+18h]  +
mov eax [ebp-8] +
push dword ptr [ebp+14h]  +
mov ecx [eax] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_1013B6E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_1013B7B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_1013BD8  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset loc_1002BD4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1013BD8  +
mov eax [ebp-8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_1013BE5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_1013BF2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_1013C4F  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset loc_1002BD4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1013C4F  +
mov eax [ebp-8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_1013C5C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_1013C69  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-8] 0 +
mov eax [eax+8] +
mov eax [eax+240h] +
mov ecx [eax] +
push esi  +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jl loc_1013CC6  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push offset loc_1002BD4  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1013CC6  +
mov eax [ebp-8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_1013CD3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-8] +
test eax eax +
jz loc_1013CE0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10049D9  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10049D9  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10136BA  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10136BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1013D4F  +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_10087B0 +
mov dword ptr [eax+8] 1 +
mov esi eax +
jmp loc_1013D51  +
xor esi esi +
test esi esi +
jnz loc_1013D5C  +
mov eax 8007000Eh +
jmp loc_1013D6F  +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1013DA0  +
test esi esi +
jz loc_1013DA0  +
push 1  +
mov ecx esi +
call sub_1013599  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_10049BC +
mov dword ptr [eax+4] offset off_10087F0 +
mov dword ptr [eax+8] offset off_10087C0 +
mov dword ptr [eax+0Ch] 1 +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1013DF5  +
mov ecx eax +
call sub_1013DAD  +
jmp loc_1013DF7  +
xor eax eax +
test eax eax +
jnz loc_1013E02  +
mov eax 8007000Eh +
jmp loc_1013E15  +
mov ecx [ebp+arg_0] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_4] +
mov [eax+14h] ecx +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+0Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1013E45  +
test esi esi +
jz loc_1013E45  +
push 1  +
mov ecx esi +
call sub_1013685  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
lea edi [ecx+25Ch] +
mov eax [edi] +
mov [ebp+var_8] ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_18] ebx +
mov [ebp+ppv] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_14] ebx +
mov [ebp+ppbc] ebx +
cmp eax ebx +
jz loc_1013E92  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
mov esi ds:CoCreateInstance +
push edi  +
push offset stru_10141BC  +
push 1  +
push ebx  +
push offset stru_101419C  +
call esi  +
test eax eax +
jge loc_1013EC6  +
push edi  +
push offset stru_10141BC  +
push 1  +
push ebx  +
push offset stru_101418C  +
call esi  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
push 3  +
pop eax  +
mov word ptr [ebp+var_44] ax +
call ds:GetUserDefaultLCID  +
lea edx [ebp+var_44] +
push edx  +
push ebx  +
mov [ebp+var_3C] eax +
mov eax [edi] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
lea eax [ebp+var_18] +
push eax  +
push dword ptr [edi]  +
call sub_1013D28  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
lea eax [ebp+var_1C] +
push eax  +
push dword ptr [edi]  +
push [ebp+var_8]  +
call sub_1013DDB  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [edi] +
push [ebp+var_1C]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10141EC  +
push ebx  +
push 1  +
push offset stru_10141AC  +
call ds:CoGetClassObject  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset loc_10141CC  +
push ebx  +
push [ebp+var_18]  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [ebp+var_8] +
push 2  +
pop edx  +
cmp [eax+23h] bl +
jz loc_1013F80  +
push 22h  +
pop edx  +
mov ecx [eax+28h] +
cmp ecx ebx +
jz loc_1013F8A  +
or edx 40h +
cmp ecx 1 +
jnz loc_1013F94  +
cmp [eax+20h] bl +
jz loc_1013F9A  +
or edx 80h +
cmp [eax+26h] bl +
jz loc_1013FA5  +
or edx 100h +
cmp [eax+27h] bl +
jz loc_1013FB0  +
or edx 200h +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push offset loc_10141DC  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [ebp+var_10] +
mov ecx [eax] +
push 2  +
push offset aWscript  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [ebp+var_10] +
mov ecx [eax] +
push 2  +
push offset aWsh  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_14] +
push edx  +
push offset dword_10141FC  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
lea eax [ebp+ppbc] +
push eax  +
push ebx  +
call ds:CreateBindCtx  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [ebp+ppbc] +
lea edx [ebp+var_34] +
push edx  +
mov [ebp+var_34] 10h +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] ebx +
mov [ebp+var_28] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [ebp+var_14] +
mov ecx [eax] +
push ebx  +
push [ebp+ppbc]  +
push [ebp+arg_0]  +
push 1  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
cmp esi ebx +
jge loc_1014099  +
cmp esi 80020101h +
jz loc_10140FA  +
mov ecx [ebp+var_8] +
push 80070002h  +
call sub_10118C6  +
jmp loc_10140F4  +
mov eax [ebp+var_8] +
cmp [eax+21h] bl +
jz loc_10140B5  +
push dword ptr [eax+8]  +
mov ecx [eax+24Ch] +
call sub_1010CD4  +
mov esi eax +
cmp esi ebx +
jl loc_10140FA  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_24] +
push edx  +
push offset riid  +
push ebx  +
push dword ptr [edi]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jge loc_10140F8  +
cmp esi 80070057h +
jnz loc_10140FA  +
push [ebp+arg_4]  +
mov eax dword_1019024 +
mov ecx [ebp+var_8] +
push 0CF7h  +
add eax 15h +
push eax  +
call sub_1011885  +
mov esi eax +
jmp loc_10140FA  +
xor esi esi +
mov eax [ebp+ppbc] +
cmp eax ebx +
jz loc_1014107  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_14] +
cmp eax ebx +
jz loc_1014114  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_24] +
cmp eax ebx +
jz loc_1014121  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_101412E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_10] +
cmp eax ebx +
jz loc_101413B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_18] +
cmp eax ebx +
jz loc_1014148  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_1C] +
cmp eax ebx +
jz loc_1014155  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1014162  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi [ebp+var_8] +
mov ecx [edi+24Ch] +
call sub_1005C36  +
mov ecx edi +
call sub_1005633  +
test eax eax +
jz loc_1014182  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+20h]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
jmp locret_10141D9  +
sub [esi] eax +
stos   +
dec eax  +
rcl byte ptr [ecx] cl +
test [edx] dh +
add [eax+8] ah +
retn   +
***
sti   +
cld   +
or [ecx+ebp] ecx +
push es  +
stos   +
dec eax  +
rcl byte ptr [ecx] cl +
test [edx] dh +
add [eax+8] ah +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_1013E1E  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1013E1E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi+1Ch] +
mov ecx [edi+24h] +
mov eax [eax+24h] +
lea esi [eax+ecx*2] +
lea ecx [ebp+var_C] +
call sub_100290D  +
mov edi [edi+28h] +
lea eax [esi+edi*2] +
push eax  +
push esi  +
lea ecx [ebp+var_C] +
call sub_10027EA  +
test eax eax +
jge loc_1014267  +
xor eax eax +
jmp loc_10142A6  +
push ebx  +
or ebx 0FFFFFFFFh +
xor edi edi +
jmp loc_101428D  +
lea ecx [ebp+var_C] +
call sub_10154FB  +
cmp eax 0Ah +
jnz loc_101428A  +
cmp [ebp+arg_0] 0 +
jz loc_1014297  +
dec [ebp+arg_0]  +
lea esi [esi+edi*2] +
xor edi edi +
inc edi  +
mov ebx eax +
mov eax [ebp+var_C] +
cmp eax [ebp+var_8] +
jnb loc_101429D  +
jmp loc_101426F  +
cmp ebx 0Dh +
jnz loc_101429D  +
dec edi  +
push edi  +
push esi  +
call ds:SysAllocStringLen  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
test ecx ecx +
jnz loc_10142C4  +
mov eax 80004003h +
jmp loc_10142D7  +
mov eax [ebp+8] +
mov edx [eax+1Ch] +
mov [ecx] edx +
mov eax [eax+1Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
mov ecx [eax+20h] +
push dword ptr [eax+24h]  +
mov edx [ecx+20h] +
push edx  +
call sub_10120AB  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1014319  +
mov eax 80004003h +
jmp loc_1014323  +
mov ecx [ebp+8] +
add ecx 0FFFFFFFCh +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1014340  +
mov eax 80004003h +
jmp loc_101437F  +
and dword ptr [ebp+0Ch] 0 +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
call sub_1015ED4  +
mov edi eax +
test edi edi +
jl loc_101436C  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push esi  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
jmp loc_101436F  +
and dword ptr [esi] 0 +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_101437C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
lea eax [ebp-10h] +
push eax  +
call ds:VariantInit  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+28h]  +
call ds:SafeArrayGetElement  +
test eax eax +
jl locret_10143BD  +
mov eax [ebp+10h] +
mov ecx [ebp-8] +
mov [eax] ecx +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_10143D8  +
mov eax 80004003h +
jmp loc_10143E4  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
mov eax [eax+2Ch] +
mov ecx [eax] +
push offset dword_1003C7C  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
mov eax [eax+30h] +
mov ecx [eax] +
push offset dword_1003C8C  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+var_4C] ecx +
push edi  +
lea ecx [ebp+var_38] +
mov [ebp+var_54] eax +
call sub_1003C36  +
xor edi edi +
push 1Eh  +
lea eax [ebp+lpString] +
push eax  +
mov [ebp+lpString] edi +
mov [ebp+var_44] edi +
mov [ebp+var_40] edi +
mov [ebp+var_50] edi +
mov [ebp+var_3C] edi +
call sub_1004043  +
cmp [ebp+lpString] edi +
jnz loc_101447F  +
mov esi 8007000Eh +
jmp loc_1014C12  +
push 1Fh  +
lea eax [ebp+var_44] +
push eax  +
call sub_1004043  +
cmp [ebp+var_44] edi +
jz loc_1014475  +
push 20h  +
lea eax [ebp+var_40] +
push eax  +
call sub_1004043  +
cmp [ebp+var_40] edi +
jz loc_1014475  +
mov eax dword_101900C +
mov esi [eax+238h] +
push 5Ch  +
push esi  +
call sub_100343E  +
cmp eax edi +
jnz loc_10144C2  +
push 2Fh  +
push esi  +
call sub_100343E  +
cmp eax edi +
jz loc_10144C5  +
lea esi [eax+2] +
push esi  +
call ds:SysAllocString  +
push 1000h  +
lea ecx [ebp+var_38] +
mov [ebp+var_50] eax +
call sub_1003641  +
mov esi eax +
cmp esi edi +
jl loc_1014C12  +
mov esi [ebp+var_4C] +
push dword ptr [esi+40h]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_1014522  +
push dword ptr [esi+40h]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C12  +
push offset String  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C12  +
push [ebp+lpString]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C12  +
push [ebp+var_50]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C12  +
push ebx  +
mov ebx [ebp+var_4C] +
mov edi [ebx+34h] +
test edi edi +
jz loc_1014BDC  +
mov eax [edi] +
sub eax 0 +
jz loc_10149AF  +
dec eax  +
jnz loc_1014A93  +
push dword ptr [edi+8]  +
mov esi ds:SysStringLen +
call esi  +
cmp [ebp+var_3C] eax +
jnb loc_1014585  +
push dword ptr [edi+8]  +
call esi  +
mov [ebp+var_3C] eax +
push offset asc_1014C6C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
mov eax [edi+10h] +
xor ebx ebx +
lea ecx [ebp+var_38] +
cmp [edi+14h] ebx +
jz loc_1014893  +
sub eax ebx +
jz loc_101483D  +
dec eax  +
push dword ptr [edi+8]  +
jz loc_10147BB  +
dec eax  +
jz loc_10146CA  +
call sub_10127EF  +
mov esi eax +
cmp esi ebx +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
mov ebx offset a___ +
push ebx  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [edi+10h]  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C6C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C60  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
mov eax [edi+10h] +
inc eax  +
push eax  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push ebx  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jge loc_1014A7C  +
jmp loc_1014C11  +
call sub_10127EF  +
mov esi eax +
cmp esi ebx +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C6C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 2  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C6C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C60  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 3  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset a___  +
jmp loc_10146B3  +
call sub_10127EF  +
mov esi eax +
cmp esi ebx +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C6C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C60  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 2  +
jmp loc_1014796  +
push offset asc_1014C60  +
call sub_10127EF  +
mov esi eax +
cmp esi ebx +
jl loc_1014C11  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C6C  +
jmp loc_1014809  +
sub eax ebx +
jz loc_1014993  +
dec eax  +
push dword ptr [edi+8]  +
jz loc_1014985  +
dec eax  +
jz loc_101491D  +
call sub_10127EF  +
mov esi eax +
cmp esi ebx +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset a___  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push dword ptr [edi+10h]  +
call _itow  +
add esp 0Ch +
push eax  +
jmp loc_1014A81  +
call sub_10127EF  +
mov esi eax +
cmp esi ebx +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 1  +
call _itow  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C6C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push 0Ah  +
lea eax [ebp+var_2C] +
push eax  +
push 2  +
jmp loc_101490F  +
call sub_10127EF  +
mov esi eax +
cmp esi ebx +
jmp loc_1014A8D  +
push offset asc_1014C60  +
call sub_10127EF  +
mov esi eax +
cmp esi ebx +
jl loc_1014C11  +
push dword ptr [edi+8]  +
jmp loc_10146B3  +
push dword ptr [edi+8]  +
mov esi ds:SysStringLen +
call esi  +
cmp [ebp+var_3C] eax +
jnb loc_10149C7  +
push dword ptr [edi+8]  +
call esi  +
mov [ebp+var_3C] eax +
push offset asc_1014C6C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
cmp dword ptr [edi+10h] 0 +
jnz loc_10149FB  +
push offset asc_1014C60  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C5C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
cmp dword ptr [edi+14h] 1 +
jnz loc_1014A59  +
push offset asc_1014C58  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push [ebp+var_40]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
cmp dword ptr [edi+14h] 2 +
jnz loc_1014A76  +
push offset asc_1014C4C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
cmp dword ptr [edi+10h] 0 +
jnz loc_1014A93  +
push offset dword_1014C48  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
mov edi [edi+4] +
test edi edi +
jnz loc_101455B  +
push [ebp+var_44]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
mov ebx [ebp+var_4C] +
mov edi [ebx+34h] +
test edi edi +
jz loc_1014BDC  +
mov eax [edi] +
sub eax 0 +
jz loc_1014B34  +
dec eax  +
jnz loc_1014BCE  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
call ds:SysStringLen  +
mov ebx eax +
jmp loc_1014AFA  +
test esi esi +
jl loc_1014C11  +
inc ebx  +
push offset asc_1014C6C  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
cmp ebx [ebp+var_3C] +
jb loc_1014AF1  +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C58  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C6C  +
jmp loc_1014B9C  +
push dword ptr [edi+8]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+8]  +
call ds:SysStringLen  +
mov ebx eax +
jmp loc_1014B6B  +
push offset asc_1014C6C  +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
inc ebx  +
lea ecx [ebp+var_38] +
cmp ebx [ebp+var_3C] +
jb loc_1014B56  +
mov ebx offset asc_1014C6C +
push ebx  +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset asc_1014C58  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push ebx  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push dword ptr [edi+0Ch]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push offset String  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
mov edi [edi+4] +
test edi edi +
jnz loc_1014AC1  +
mov ebx [ebp+var_4C] +
push dword ptr [ebx+44h]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_1014BFA  +
push dword ptr [ebx+44h]  +
lea ecx [ebp+var_38] +
call sub_10127EF  +
mov esi eax +
test esi esi +
jl loc_1014C11  +
push [ebp+var_38]  +
call ds:SysAllocString  +
mov ecx [ebp+var_54] +
mov [ecx] eax +
test eax eax +
jnz loc_1014C11  +
mov esi 8007000Eh +
pop ebx  +
push [ebp+lpString]  +
mov edi ds:SysFreeString +
call edi  +
push [ebp+var_44]  +
call edi  +
push [ebp+var_40]  +
call edi  +
push [ebp+var_50]  +
call edi  +
lea ecx [ebp+var_38] +
call sub_1005992  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ecx+48h] 0 +
push esi  +
jz loc_1014CAC  +
lea eax [ebp-4] +
push eax  +
call sub_101442F  +
mov esi eax +
test esi esi +
jl loc_1014CBD  +
mov ecx dword_101900C +
push dword ptr [ebp-4]  +
mov eax [ecx] +
call dword ptr [eax+18h]  +
jmp loc_1014CBB  +
mov eax dword_101900C +
push dword ptr [ecx+3Ch]  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+18h]  +
mov esi eax +
push dword ptr [ebp-4]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+38h] +
push edi  +
xor edi edi +
test eax eax +
jz loc_1014CEC  +
push eax  +
call ds:SysFreeString  +
push dword ptr [ebp+0Ch]  +
call ds:SysAllocString  +
mov [esi+38h] eax +
test eax eax +
jnz loc_1014D01  +
mov edi 8007000Eh +
xor eax eax +
test edi edi +
setl al  +
mov [esi+44h] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+3Ch] +
push edi  +
xor edi edi +
test eax eax +
jz loc_1014D32  +
push eax  +
call ds:SysFreeString  +
push dword ptr [ebp+0Ch]  +
call ds:SysAllocString  +
mov [esi+3Ch] eax +
test eax eax +
jnz loc_1014D47  +
mov edi 8007000Eh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi+40h] +
push edi  +
xor edi edi +
test eax eax +
jz loc_1014D6E  +
push eax  +
call ds:SysFreeString  +
push dword ptr [ebp+0Ch]  +
call ds:SysAllocString  +
mov [esi+40h] eax +
test eax eax +
jnz loc_1014D83  +
mov edi 8007000Eh +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 18h  +
call malloc  +
mov esi eax +
xor eax eax +
pop ecx  +
test esi esi +
jz loc_1014E1C  +
push ebx  +
mov ebx ds:SysStringLen +
push edi  +
push 6  +
pop ecx  +
push [ebp+arg_0]  +
mov edi esi +
stos   +
and [esi] eax +
call ebx  +
mov edi ds:SysAllocString +
test eax eax +
jbe loc_1014DD2  +
push [ebp+arg_0]  +
call edi  +
mov [esi+8] eax +
test eax eax +
jz loc_1014DE7  +
push [ebp+arg_4]  +
call ebx  +
test eax eax +
jbe loc_1014E0C  +
push [ebp+arg_4]  +
call edi  +
mov [esi+0Ch] eax +
test eax eax +
jnz loc_1014E0C  +
mov eax [esi+8] +
mov edi ds:SysFreeString +
test eax eax +
jz loc_1014DF7  +
push eax  +
call edi  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1014E01  +
push eax  +
call edi  +
push esi  +
call free  +
pop ecx  +
xor eax eax +
jmp loc_1014E1A  +
mov eax [ebp+arg_8] +
mov [esi+14h] eax +
mov eax [ebp+arg_C] +
mov [esi+10h] eax +
mov eax esi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 18h  +
call malloc  +
mov esi eax +
xor eax eax +
pop ecx  +
test esi esi +
jz loc_1014EB6  +
push ebx  +
mov ebx ds:SysStringLen +
push edi  +
push 6  +
pop ecx  +
push [ebp+arg_0]  +
mov edi esi +
stos   +
mov dword ptr [esi] 1 +
call ebx  +
mov edi ds:SysAllocString +
test eax eax +
jbe loc_1014E6C  +
push [ebp+arg_0]  +
call edi  +
mov [esi+8] eax +
test eax eax +
jz loc_1014E81  +
push [ebp+arg_4]  +
call ebx  +
test eax eax +
jbe loc_1014EA6  +
push [ebp+arg_4]  +
call edi  +
mov [esi+0Ch] eax +
test eax eax +
jnz loc_1014EA6  +
mov eax [esi+8] +
mov edi ds:SysFreeString +
test eax eax +
jz loc_1014E91  +
push eax  +
call edi  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1014E9B  +
push eax  +
call edi  +
push esi  +
call free  +
pop ecx  +
xor eax eax +
jmp loc_1014EB4  +
mov eax [ebp+arg_8] +
mov [esi+14h] eax +
mov eax [ebp+arg_C] +
mov [esi+10h] eax +
mov eax esi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1014EFA  +
mov eax [esi] +
sub eax 0 +
push edi  +
jz loc_1014ED8  +
dec eax  +
jnz loc_1014EF2  +
mov eax [esi+8] +
mov edi ds:SysFreeString +
test eax eax +
jz loc_1014EE8  +
push eax  +
call edi  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1014EF2  +
push eax  +
call edi  +
push esi  +
call free  +
pop ecx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call sub_100B7E4  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
mov eax ecx +
test edx edx +
jnz loc_1014F36  +
mov eax 80004003h +
jmp loc_1014F89  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1003C7C +
xor ebx ebx +
cmps   +
jnz loc_1014F4F  +
lea ecx [eax-8] +
jmp loc_1014F6C  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_10022E8 +
xor ebx ebx +
cmps   +
jnz loc_1014F7B  +
lea ecx [eax-8] +
neg ecx  +
lea esi [eax-4] +
sbb ecx ecx +
and ecx esi +
add eax 0FFFFFFF8h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1014F86  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1002373  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1014FA6  +
mov eax 80004003h +
jmp loc_1014FE5  +
and dword ptr [ebp+0Ch] 0 +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+24h]  +
call sub_1015ED4  +
mov edi eax +
test edi edi +
jl loc_1014FD2  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push esi  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
jmp loc_1014FD5  +
and dword ptr [esi] 0 +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1014FE2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1015003  +
mov eax 80004003h +
jmp loc_1015024  +
and dword ptr [esi] 0 +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push 1  +
push dword ptr [eax+24h]  +
call ds:SafeArrayGetUBound  +
test eax eax +
jl loc_1015024  +
mov eax [ebp+0Ch] +
inc eax  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+lpString] +
push eax  +
mov esi ecx +
call ds:VariantInit  +
mov eax [esi] +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
call dword ptr [eax+20h]  +
mov ebx ds:VariantClear +
mov edi eax +
test edi edi +
jl loc_10150B2  +
and [ebp+rgIndices] 0 +
cmp [ebp+var_8] 0 +
jle loc_101509C  +
lea eax [ebp+lpString] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push dword ptr [esi+24h]  +
call ds:SafeArrayGetElement  +
mov edi eax +
test edi edi +
jl loc_10150B2  +
push [ebp+arg_0]  +
push dword ptr [ebp-10h]  +
call sub_1015B93  +
test eax eax +
jnz loc_101509C  +
lea eax [ebp+lpString] +
push eax  +
call ebx  +
inc [ebp+rgIndices]  +
mov eax [ebp+rgIndices] +
cmp eax [ebp+var_8] +
jl loc_1015065  +
mov ecx [ebp+rgIndices] +
xor eax eax +
cmp ecx [ebp+var_8] +
setz al  +
mov edi eax +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10150B2  +
mov [eax] ecx +
lea eax [ebp+lpString] +
push eax  +
call ebx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+0Ch] +
mov eax ecx +
test edx edx +
jnz loc_10150DB  +
mov eax 80004003h +
jmp loc_101512E  +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1003C8C +
xor ebx ebx +
cmps   +
jnz loc_10150F4  +
lea ecx [eax-8] +
jmp loc_1015111  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset loc_10022E8 +
xor ebx ebx +
cmps   +
jnz loc_1015120  +
lea ecx [eax-8] +
neg ecx  +
lea esi [eax-4] +
sbb ecx ecx +
and ecx esi +
add eax 0FFFFFFF8h +
mov [edx] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_101512B  +
push edx  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1002373  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101514A  +
mov eax 80004003h +
jmp locret_1015186  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+24h]  +
call sub_1015ED4  +
mov esi eax +
test esi esi +
jl loc_1015176  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp-4] +
mov ecx [eax] +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp-4] +
test eax eax +
jz loc_1015183  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0 +
jnz loc_10151A1  +
mov eax 80004003h +
jmp loc_10151BD  +
push dword ptr [ebp+10h]  +
call ds:VariantInit  +
push dword ptr [ebp+10h]  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+24h]  +
call ds:SafeArrayGetElement  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10151DA  +
mov eax 80004003h +
jmp loc_10151FB  +
lea eax [ebp+0Ch] +
push eax  +
mov eax [ebp+8] +
push 1  +
push dword ptr [eax+24h]  +
call ds:SafeArrayGetUBound  +
test eax eax +
jl loc_10151F8  +
mov ecx [ebp+0Ch] +
inc ecx  +
mov [esi] ecx +
jmp loc_10151FB  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 8  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1014F04  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10022FD  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1002317  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 0Ch +
push eax  +
call sub_100B7E4  +
pop ebp  +
retn 8  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1002C7A  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001849  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1001849  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001B00  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001AE1  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1001B00  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1002C51  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_101524C  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1001AE1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+18h]  +
mov esi [ebp+8] +
cmp dword ptr [esi+30h] 0 +
push dword ptr [ebp+14h]  +
lea ecx [esi-4] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
jnz loc_1015324  +
call sub_1014D90  +
mov [esi+34h] eax +
mov [esi+30h] eax +
test eax eax +
jnz loc_101533C  +
mov eax 8007000Eh +
jmp loc_101533E  +
call sub_1014D90  +
mov ecx [esi+34h] +
mov [ecx+4] eax +
mov eax [esi+34h] +
mov eax [eax+4] +
test eax eax +
jz loc_101531D  +
mov [esi+34h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+18h]  +
mov esi [ebp+8] +
cmp dword ptr [esi+30h] 0 +
push dword ptr [ebp+14h]  +
lea ecx [esi-4] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
jnz loc_101537C  +
call sub_1014E26  +
mov [esi+34h] eax +
mov [esi+30h] eax +
test eax eax +
jnz loc_1015394  +
mov eax 8007000Eh +
jmp loc_1015396  +
call sub_1014E26  +
mov ecx [esi+34h] +
mov [ecx+4] eax +
mov eax [esi+34h] +
mov eax [eax+4] +
test eax eax +
jz loc_1015375  +
mov [esi+34h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword ptr [ebp+10h] 0 +
jnz loc_10153B3  +
mov eax 80004003h +
jmp locret_10153EC  +
push esi  +
push dword ptr [ebp+10h]  +
call ds:VariantInit  +
mov esi [ebp+8] +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_101502E  +
test eax eax +
jl loc_10153EB  +
cmp eax 1 +
jnz loc_10153DB  +
xor eax eax +
jmp loc_10153EB  +
push dword ptr [ebp+10h]  +
lea eax [ebp-4] +
push eax  +
push dword ptr [esi+28h]  +
call ds:SafeArrayGetElement  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
test esi esi +
jnz loc_1015409  +
mov eax 80004003h +
jmp loc_101542B  +
mov ecx [ebp+8] +
xor eax eax +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [esi] ax +
call sub_101502E  +
test eax eax +
jl loc_101542B  +
xor ecx ecx +
test eax eax +
setnz cl  +
dec ecx  +
mov [esi] cx +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call sub_1015C7B  +
pop ebp  +
retn 8  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1015435  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1002442  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1002317  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10024D9  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001919  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edx ecx +
push 4  +
pop ecx  +
mov edi offset dword_100882C +
xor eax eax +
cmps   +
jnz loc_10154B9  +
lea eax [edx-8] +
jmp loc_10154D6  +
mov esi [ebp+8] +
push 4  +
pop ecx  +
mov edi offset dword_1008754 +
xor eax eax +
cmps   +
jnz loc_10154EC  +
lea eax [edx-8] +
neg eax  +
lea ecx [edx-4] +
sbb eax eax +
and eax ecx +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
lea eax [edx-8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
pop edi  +
pop esi  +
mov ecx edx +
pop ebp  +
jmp sub_1001AB5  +
***
mov edx [ecx] +
movzx eax word ptr [edx] +
add edx 2 +
mov [ecx] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hModule] +
push esi  +
push 104h  +
lea ecx [ebp+Filename] +
push ecx  +
push eax  +
xor esi esi +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_1015550  +
push dword ptr [ebp+wLanguage]  +
lea eax [ebp+Filename] +
push 8  +
push eax  +
call sub_10168CF  +
mov esi eax +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aKernel32_dll  +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jz loc_101559F  +
push offset aSetthreaduilan  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1015598  +
push [ebp+arg_0]  +
call eax  +
movzx eax ax +
mov [ebp+arg_0] eax +
push esi  +
call ds:FreeLibrary  +
mov ax word ptr [ebp+arg_0] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ebx eax +
test edi edi +
jz loc_101564C  +
cmp [ebp+arg_0] 0 +
jz loc_101564C  +
cmp byte ptr [edi] 0 +
mov esi edi +
mov eax edi +
jz loc_1015612  +
cmp byte ptr [eax] 5Ch +
jnz loc_1015606  +
inc eax  +
mov esi eax +
jmp loc_101560D  +
push eax  +
call ds:CharNextA  +
cmp byte ptr [eax] 0 +
jnz loc_10155FC  +
mov eax [ebp+arg_0] +
sub esi edi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_101561A  +
sub eax ecx +
lea eax [eax+esi+1] +
cmp ebx eax +
jb loc_101564C  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
call memcpy  +
push [ebp+arg_0]  +
sub ebx esi +
push ebx  +
add esi edi +
push esi  +
call sub_1002111  +
xor eax eax +
add esp 18h +
inc eax  +
jmp loc_101564E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1015670  +
jmp loc_1015678  +
cmp cx [ebp+arg_4] +
jz loc_101567A  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1015668  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1019001 bl +
jz loc_10156B8  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
jmp loc_1015713  +
cmp [ebp+lpWideCharStr] ebx +
jz loc_10156FB  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_10156DE  +
call ds:GetLastError  +
jmp loc_1015713  +
call sub_10043F7  +
mov [ebp+lpValueName] esp +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpValueName]  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10156D6  +
jmp loc_10156FE  +
mov [ebp+lpValueName] ebx +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExA  +
cmp eax ebx +
jle loc_1015721  +
and eax 0FFFFh +
or eax 80070000h +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jz loc_1015749  +
push 1  +
jmp loc_101574B  +
push 0  +
push [ebp+lpWideCharStr]  +
push [ebp+hKey]  +
call sub_1015683  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1019001 bl +
jz loc_101579B  +
push [ebp+lpWideCharStr]  +
push [ebp+nSize]  +
push [ebp+lpReturnedString]  +
push [ebp+lpString]  +
push [ebp+lpKeyName]  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileStringW  +
jmp loc_1015915  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
or edi 0FFFFFFFFh +
push edi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jnz loc_10157D4  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1015917  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1015917  +
call sub_10043F7  +
mov [ebp+lpFileName] esp +
cmp esp ebx +
jnz loc_10157EA  +
mov eax 8007000Eh +
jmp loc_1015917  +
push ebx  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpFileName]  +
push edi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10157B7  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpAppName]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jz loc_10157B7  +
call sub_10043F7  +
mov [ebp+var_14] esp +
cmp esp ebx +
jz loc_10157E0  +
push ebx  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push [ebp+var_14]  +
push edi  +
push [ebp+lpAppName]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10157B7  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpKeyName]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jz loc_10157B7  +
call sub_10043F7  +
mov [ebp+var_10] esp +
cmp esp ebx +
jz loc_10157E0  +
push ebx  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push [ebp+var_10]  +
push edi  +
push [ebp+lpKeyName]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10157B7  +
push [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jle loc_10158BA  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpString]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+lpMultiByteStr] eax +
cmp eax ebx +
jz loc_10157B7  +
call sub_10043F7  +
mov [ebp+lpDefault] esp +
cmp esp ebx +
jz loc_10157E0  +
push ebx  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpDefault]  +
push edi  +
push [ebp+lpString]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_10157B7  +
jmp loc_10158D1  +
push 4  +
pop eax  +
call sub_100440A  +
mov eax esp +
mov [ebp+lpDefault] eax +
cmp eax ebx +
jz loc_10157E0  +
mov [eax] bl +
mov esi [ebp+nSize] +
lea eax [esi+1] +
call sub_10043F7  +
mov [ebp+lpMultiByteStr] esp +
cmp esp ebx +
jz loc_10157E0  +
push [ebp+lpFileName]  +
push esi  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpDefault]  +
push [ebp+var_10]  +
push [ebp+var_14]  +
call ds:GetPrivateProfileStringA  +
push esi  +
push [ebp+lpReturnedString]  +
push edi  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push ebx  +
call ds:MultiByteToWideChar  +
test eax eax +
jz loc_10157B7  +
xor eax eax +
lea esp [ebp-24h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp byte_1019001 bl +
jz loc_1015966  +
push [ebp+lpWideCharStr]  +
push [ebp+nDefault]  +
push [ebp+lpKeyName]  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileIntW  +
jmp loc_1015A49  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
or edi 0FFFFFFFFh +
push edi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+cchMultiByte] eax +
cmp eax ebx +
jnz loc_101599F  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1015A50  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1015A50  +
call sub_10043F7  +
mov [ebp+lpFileName] esp +
cmp esp ebx +
jnz loc_10159B5  +
mov eax 8007000Eh +
jmp loc_1015A50  +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpFileName]  +
push edi  +
push [ebp+lpWideCharStr]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1015982  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpAppName]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1015982  +
call sub_10043F7  +
mov [ebp+cchMultiByte] esp +
cmp esp ebx +
jz loc_10159AB  +
push ebx  +
push ebx  +
push [ebp+var_8]  +
push [ebp+cchMultiByte]  +
push edi  +
push [ebp+lpAppName]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1015982  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push [ebp+lpKeyName]  +
push ebx  +
push ebx  +
call esi  +
mov [ebp+var_14] eax +
cmp eax ebx +
jz loc_1015982  +
call sub_10043F7  +
mov [ebp+var_8] esp +
cmp esp ebx +
jz loc_10159AB  +
push ebx  +
push ebx  +
push [ebp+var_14]  +
push [ebp+var_8]  +
push edi  +
push [ebp+lpKeyName]  +
push ebx  +
push ebx  +
call esi  +
test eax eax +
jz loc_1015982  +
push [ebp+lpFileName]  +
push [ebp+nDefault]  +
push [ebp+var_8]  +
push [ebp+cchMultiByte]  +
call ds:GetPrivateProfileIntA  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor eax eax +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001375  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp byte ptr [ebp+arg_10] al +
setnz al  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+lpKeyName]  +
push [ebp+lpAppName]  +
push [ebp+lpWideCharStr]  +
call sub_1015930  +
test eax eax +
jl loc_1015A9B  +
cmp [ebp+arg_10] 0 +
mov ecx [ebp+arg_C] +
setnle al  +
mov [ecx] al +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
lea eax [edi-2] +
cmp eax 23h +
ja loc_1015B87  +
cmp byte ptr [ebp+arg_C] 0 +
mov eax [ebp+arg_4] +
jnz loc_1015AD2  +
jmp loc_1015ADA  +
cmp cx 20h +
jz loc_1015AD0  +
cmp cx 9 +
jnz loc_1015ADA  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1015AC4  +
movzx ecx word ptr [eax] +
sub ecx 2Bh +
jz loc_1015AEE  +
dec ecx  +
dec ecx  +
jnz loc_1015AF0  +
or [ebp+arg_C] 0FFFFFFFFh +
inc eax  +
inc eax  +
jmp loc_1015AF7  +
inc eax  +
inc eax  +
mov [ebp+arg_C] 1 +
push ebx  +
xor edx edx +
xor ebx ebx +
push esi  +
cmp edi 0Ah +
ja loc_1015B49  +
lea esi [edi+2Fh] +
jmp loc_1015B18  +
movzx ecx cx +
cmp ecx esi +
jg loc_1015B21  +
imul edx edi +
inc eax  +
inc eax  +
lea edx [edx+ecx-30h] +
inc ebx  +
movzx ecx word ptr [eax] +
cmp cx 30h +
jnb loc_1015B07  +
mov ecx [ebp+arg_14] +
test ecx ecx +
jz loc_1015B2A  +
mov [ecx] eax +
pop esi  +
test ebx ebx +
pop ebx  +
jz loc_1015B87  +
imul edx [ebp+arg_C] +
cmp [ebp+arg_10] 0 +
mov ecx [ebp+arg_8] +
mov [ecx] edx +
jnz loc_1015B82  +
cmp word ptr [eax] 0 +
jz loc_1015B82  +
xor eax eax +
jmp loc_1015B89  +
movzx ecx word ptr [eax] +
lea esi [ecx-30h] +
cmp esi 9 +
ja loc_1015B58  +
mov ecx esi +
jmp loc_1015B78  +
cmp ecx 41h +
jl loc_1015B69  +
lea esi [edi+37h] +
cmp ecx esi +
jg loc_1015B69  +
sub ecx 4Bh +
jmp loc_1015B78  +
cmp ecx 61h +
jl loc_1015B21  +
lea esi [edi+57h] +
cmp ecx esi +
jg loc_1015B21  +
sub ecx 6Bh +
imul edx edi +
add edx ecx +
inc eax  +
inc eax  +
inc ebx  +
jmp loc_1015B49  +
xor eax eax +
inc eax  +
jmp loc_1015B89  +
xor al al +
pop edi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:SysStringLen +
push edi  +
push [ebp+lpString]  +
call esi  +
push [ebp+arg_4]  +
mov edi eax +
call esi  +
cmp edi eax +
jz loc_1015BB4  +
xor eax eax +
jmp loc_1015BCF  +
test edi edi +
jnz loc_1015BBD  +
xor eax eax +
inc eax  +
jmp loc_1015BCF  +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
push [ebp+lpString]  +
call sub_1001B8C  +
neg eax  +
sbb eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10057DB  +
test byte ptr [ebp+8] 1 +
jz loc_1015BF4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [eax+14h] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
setnz al  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_1015C8D  +
mov eax 80004003h +
jmp loc_1015CCE  +
push esi  +
mov esi [ebp+pptlib] +
mov eax [esi+14h] +
lea ecx [ebp+pptlib] +
push ecx  +
movzx ecx word ptr [eax+18h] +
push 0  +
push 0  +
push ecx  +
push dword ptr [eax+10h]  +
call ds:LoadRegTypeLib  +
test eax eax +
jl loc_1015CCD  +
mov eax [esi+14h] +
push [ebp+arg_4]  +
mov eax [eax] +
mov ecx [ebp+pptlib] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+18h]  +
mov esi eax +
mov eax [ebp+pptlib] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005797  +
test byte ptr [ebp+8] 1 +
jz loc_1015CF1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+10h] +
test edx edx +
jnz loc_1015D10  +
mov eax 80004003h +
jmp loc_1015D4C  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1015D50 +
xor eax eax +
cmps   +
jz loc_1015D34  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset riid +
xor eax eax +
cmps   +
jnz loc_1015D43  +
mov eax [ebp+8] +
mov [edx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1015D4A  +
and [edx] eax +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jbe loc_1015D9C  +
mov esi [ebp+10h] +
push esi  +
call ds:VariantInit  +
add esi 10h +
dec edi  +
jnz loc_1015D8F  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_1015DD8  +
mov edi [ebp+8] +
mov ebx [ebp+10h] +
lea esi [edi+8] +
mov eax [esi] +
cmp eax [edi+10h] +
jg loc_1015DD8  +
push ebx  +
push esi  +
push dword ptr [edi+14h]  +
call ds:SafeArrayGetElement  +
mov [ebp+8] eax +
test eax eax +
jl loc_1015DF3  +
inc dword ptr [esi]  +
inc dword ptr [ebp-4]  +
mov eax [ebp-4] +
add ebx 10h +
cmp eax [ebp+0Ch] +
jb loc_1015DAF  +
mov eax [ebp+14h] +
mov ecx [ebp-4] +
test eax eax +
jz loc_1015DE4  +
mov [eax] ecx +
xor eax eax +
cmp ecx [ebp+0Ch] +
setnz al  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov esi [ebp+10h] +
mov edi [ebp+0Ch] +
push esi  +
call ds:VariantClear  +
add esi 10h +
dec edi  +
jnz loc_1015DF9  +
mov eax [ebp+8] +
jmp loc_1015DEC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+0Ch] +
mov [eax+8] ecx +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
add [eax+8] ecx +
mov edx [eax+8] +
mov ecx [eax+10h] +
cmp edx ecx +
jle loc_1015E4A  +
inc ecx  +
mov [eax+8] ecx +
xor eax eax +
inc eax  +
jmp loc_1015E4C  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov dword ptr [ecx] offset off_1008800 +
mov ecx [ecx+14h] +
test ecx ecx +
jz locret_1015E69  +
push ecx  +
call ds:SafeArrayDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1015E55  +
test [ebp+arg_0] 1 +
jz loc_1015E89  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
mov eax [ecx+4] +
jnz loc_1015EAE  +
push 1  +
call sub_1015E6F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax ecx +
or dword ptr [eax+8] 0FFFFFFFFh +
and dword ptr [eax+14h] 0 +
mov dword ptr [eax] offset off_1008800 +
mov dword ptr [eax+4] 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 18h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1015EF2  +
mov ecx eax +
call sub_1015EB7  +
mov esi eax +
jmp loc_1015EF4  +
xor esi esi +
test esi esi +
jnz loc_1015EFF  +
mov edi 8007000Eh +
jmp loc_1015F56  +
push ebx  +
lea ebx [esi+0Ch] +
push ebx  +
push 1  +
push [ebp+psa]  +
call ds:SafeArrayGetLBound  +
mov edi eax +
test edi edi +
jl loc_1015F4B  +
lea eax [esi+10h] +
push eax  +
push 1  +
push [ebp+psa]  +
call ds:SafeArrayGetUBound  +
mov edi eax +
test edi edi +
jl loc_1015F4B  +
mov eax [ebx] +
mov [esi+8] eax +
lea eax [esi+14h] +
push eax  +
push [ebp+psa]  +
call ds:SafeArrayCopy  +
mov edi eax +
test edi edi +
jl loc_1015F4B  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor esi esi +
xor edi edi +
pop ebx  +
test esi esi +
jz loc_1015F56  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+8] +
push eax  +
mov eax [ebp+8] +
push dword ptr [eax+14h]  +
call sub_1015ED4  +
test eax eax +
jl loc_1015F85  +
mov eax [ebp+0Ch] +
mov ecx [ebp+8] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call _vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1015FF8  +
cmp eax esi +
ja loc_1015FF8  +
jnz loc_1016005  +
jmp loc_1015FFD  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101600E  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_101601B  +
test eax eax +
jz loc_1016062  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_10160C0  +
cmp [ebp+arg_4] 0 +
jz loc_10160C0  +
push [ebp+hModule]  +
call sub_1016045  +
push [ebp+arg_4]  +
mov esi eax +
call sub_1016045  +
test esi esi +
jz loc_10160B8  +
test eax eax +
jz loc_10160B8  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_10160C0  +
cmp [eax] ecx +
jnz loc_10160C0  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_10160C0  +
inc eax  +
jmp loc_10160C2  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_10160DF  +
xor eax eax +
jmp loc_101614D  +
cmp [ebp+arg_4] esi +
jz loc_101613A  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10160DB  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_10160DB  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_10160DB  +
or eax 1 +
jmp loc_101614D  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_10194CC edi +
jnz loc_1016275  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_10161C0  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_10194CC edi +
pop esi  +
jz loc_1016248  +
dec eax  +
jnz loc_1016275  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_1016235  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_1016229  +
dec eax  +
jz loc_1016216  +
dec eax  +
jz loc_10161FC  +
mov dword_10194CC 14h +
jmp loc_1016275  +
cmp [ebp+var_C] 1 +
jb loc_101620D  +
mov dword_10194CC 10h +
or dword_10194CC 4 +
jmp loc_1016275  +
cmp [ebp+var_C] 2 +
jb loc_101620D  +
mov dword_10194CC 8 +
jmp loc_101620D  +
mov dword_10194CC 4 +
jmp loc_1016275  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_1016287  +
mov dword_10194CC 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_1016275  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_101626B  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_101626B  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_1016275  +
mov dword_10194CC 1 +
mov ecx [ebp+var_4] +
mov eax dword_10194CC +
xor ecx ebp +
pop edi  +
call sub_1001375  +
leave   +
retn   +
mov dword_10194CC 20h +
jmp loc_1016275  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_10162EC  +
push 3  +
lea eax [ebp+LCData] +
push offset word_10162FC  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_10194D0 +
jnz loc_10163A2  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset aSoftwareMicr_0  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10163A1  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset aLocale  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_10163A1  +
push 3  +
push ds:off_10163B8[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1016393  +
inc esi  +
cmp esi 1Ch +
jnb loc_10163A1  +
jmp loc_1016372  +
mov ax ds:word_10163BC[esi*8] +
mov word_10194D0 ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_10194D0 +
xor ecx ebp +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1016621  +
cmp [ebp+arg_0] ebx +
jz loc_1016621  +
cmp [ebp+arg_4] ebx +
jz loc_1016621  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_101659D  +
movzx eax ax +
sub eax 61h +
jmp loc_10165AC  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_10165D6  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_10165D6  +
mov esi ds:dword_1016628[eax*4] +
test esi esi +
jnz loc_10165CE  +
jmp loc_10165D6  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10165E1  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_10165BE  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jge loc_1016620  +
jmp loc_1016589  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10165E9  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_1016620  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1016601  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_10166DB  +
cmp [ebp+arg_4] 0 +
jz loc_10166DB  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_10171F6  +
test eax eax +
jz loc_10166DB  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_101729C  +
test edi edi +
jz loc_10166D6  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_1016563  +
xor eax eax +
inc eax  +
jmp loc_10166DD  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_101670C  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1016711  +
mov eax 80070057h +
test eax eax +
jl loc_101672A  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_1015FD0  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1016748  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_101674D  +
mov eax 80070057h +
test eax eax +
jl loc_1016767  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_1015FD0  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_101678F  +
xor eax eax +
jmp loc_10167FA  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_10166F7  +
test eax eax +
jl loc_10167F7  +
push esi  +
call sub_1016159  +
mov esi eax +
and esi 26h +
call sub_1016159  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_10160CC  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_10167F7  +
push ebx  +
push edi  +
call sub_101606B  +
test eax eax +
jnz loc_10167F7  +
push ebx  +
test bl 1 +
jz loc_10167EF  +
call ds:UnmapViewOfFile  +
jmp loc_10167F5  +
call ds:FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1001375  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_1016867  +
test ecx ecx +
jz loc_1016867  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_101684B  +
test edx edx +
jz loc_1016838  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_101676E  +
add esp 14h +
jmp loc_1016869  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_101676E  +
add esp 10h +
jmp loc_1016869  +
test edx edx +
jz loc_1016857  +
push edx  +
push offset a_SS_mui  +
jmp loc_1016840  +
push offset a_S_mui  +
push ecx  +
call sub_101676E  +
add esp 0Ch +
jmp loc_1016869  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_1019004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_1016902  +
xor eax eax +
jmp loc_101705B  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_10168FB  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_101691E  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_1016F88  +
call sub_1016159  +
mov dword_10194D4 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_1016F88  +
test byte ptr dword_10194D4 20h +
jnz loc_101705A  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_1016F7C  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_101699A  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_10169AC  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_101601B  +
test eax eax +
jz loc_1016F64  +
test di di +
jnz loc_1016F3C  +
mov al byte ptr dword_10194D4 +
test al 4 +
jz loc_1016D4B  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_10169FE  +
call sub_1016298  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_1016AD4  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1016695  +
test eax eax +
jz loc_1016FC8  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
cmp word ptr [ebp+var_208] ax +
jz loc_1016AB3  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_1016C7F  +
mov [ebp+var_420] 404h +
jmp loc_1016A0A  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1016733  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1016695  +
test eax eax +
jz loc_1016B86  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101710B  +
movzx eax ax +
test ax ax +
jz loc_1016B86  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1016733  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_1016AC5  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_1016C63  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1016733  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1016695  +
test eax eax +
jz loc_1016C5D  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101710B  +
movzx eax ax +
test ax ax +
jz loc_1016C5D  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1016733  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_1016F14  +
cmp ax si +
jmp loc_1016EEC  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_1016D32  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1016695  +
test eax eax +
jz loc_1016F64  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
cmp word ptr [ebp+var_208] ax +
jz loc_1016D32  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jnz loc_1016E09  +
jmp loc_1016F14  +
test al 3 +
jz loc_1016F64  +
call sub_1016307  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_1016E32  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1016695  +
test eax eax +
jz loc_1016F64  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
cmp word ptr [ebp+var_208] ax +
jz loc_1016E02  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_1016F14  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1016695  +
mov edx esi +
jmp loc_1016EF3  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1016733  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1016695  +
test eax eax +
jz loc_1016EE0  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_101710B  +
movzx eax ax +
test ax ax +
jz loc_1016EE0  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1016733  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_1016F14  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jnz loc_1016FCC  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jz loc_1016FC8  +
jmp loc_1016FCC  +
test byte ptr dword_10194D4 7 +
jz loc_1016F64  +
test byte ptr [ebp+arg_4] 8 +
jz loc_1016F8F  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1016695  +
test eax eax +
jnz loc_1016FA9  +
test byte ptr [ebp+arg_4] 10h +
jz loc_1016FDC  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_101601B  +
test eax eax +
jnz loc_1016FDC  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
xor eax eax +
jmp loc_101705A  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1016733  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_101680C  +
mov ebx eax +
test ebx ebx +
jz loc_1016F64  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
mov eax ebx +
jmp loc_101705A  +
test byte ptr [ebp+hModule] 1 +
jz loc_1017054  +
push [ebp+hModule]  +
call ds:FreeLibrary  +
call sub_1016159  +
test al 38h +
jz loc_1017031  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_1016733  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_10160CC  +
jmp loc_101704E  +
call sub_1016159  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001375  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_10170BF  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_1017100  +
cmp word ptr [eax] 7Fh +
jz loc_1017100  +
xor eax eax +
inc eax  +
jmp loc_1017102  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1017160  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_1017160  +
push offset sub_10170CC  +
push 8  +
push 163h  +
push offset off_100AB70  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_1017160  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_1009AB8 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_101715B  +
push ecx  +
call sub_10170E7  +
test eax eax +
jnz loc_1017160  +
mov ax [ecx] +
jmp loc_101716A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_101718E  +
cmp ecx 7FFFFFFFh +
jbe loc_1017190  +
mov eax edx +
test eax eax +
jl loc_10171ED  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_10171AC  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_10171EC  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10171DC  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10171D8  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_10171D8  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_10171C0  +
test esi esi +
jnz loc_10171E3  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_1017287  +
cmp [ebp+arg_4] 0 +
jnz loc_1017213  +
cmp [ebp+arg_8] 0 +
jnz loc_1017287  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1017287  +
push offset sub_10170A5  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_1009AB8  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_1017287  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_101724F  +
push ecx  +
call sub_10170E7  +
test eax eax +
jnz loc_1017287  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1017257  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_1017283  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1017173  +
test eax eax +
jge loc_1017283  +
push 7Ah  +
jmp loc_1017289  +
mov eax esi +
jmp loc_1017291  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_101734A  +
cmp [ebp+arg_8] edi +
jle loc_10172BF  +
cmp [ebp+arg_4] edi +
jz loc_101734A  +
cmp [ebp+arg_8] edi +
jl loc_101734A  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_101734A  +
push offset sub_10170CC  +
push 8  +
push 163h  +
push offset off_100AB70  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_101734A  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_1009AB8 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_101730B  +
push ecx  +
call sub_10170E7  +
test eax eax +
jnz loc_101734A  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_101731B  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_1017346  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1017173  +
test eax eax +
jge loc_1017346  +
push 7Ah  +
jmp loc_101734C  +
mov eax esi +
jmp loc_1017354  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
retf   +
***
