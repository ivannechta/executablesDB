push [ebp+arg_C]  +
mov edi edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset sub_1028111  +
push offset aNc@  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-8] edx +
mov [ebp-1Ch] ebx +
mov [ebp-0Ch] esi +
lea ebx [ebp+4] +
mov [ebp-20h] edi +
sub ebx 4 +
mov [ebp-14h] ebx +
mov eax [ebx] +
mov [ebp-18h] eax +
mov eax [ebx+8] +
test byte ptr [eax] 1 +
jz loc_10012BE  +
xor esi esi +
cmp [eax+0Ch] esi +
jz loc_1001297  +
mov ecx [eax+18h] +
mov edi [eax+4] +
mov edx ds:dword_101C790[ecx*4] +
imul edx [ebp+edi*4-24h] +
jmp loc_1001299  +
xor edx edx +
cmp [eax+24h] esi +
jz loc_10012A5  +
mov ecx [eax+14h] +
mov esi [ebp+ecx*4-24h] +
mov edi [eax+8] +
mov ecx [eax+20h] +
neg ecx  +
sbb ecx ecx +
and ecx offset __ImageBase +
add edi ecx +
add edi esi +
mov ecx [edi+edx] +
jmp loc_10012C5  +
mov ecx [eax+14h] +
mov ecx [ebp+ecx*4-24h] +
mov edx offset Address +
mov [ebp-4] ecx +
lea esi [eax+28h] +
lea edi [esi-1] +
cmp edi edx +
jb loc_100130E  +
mov eax ds:dword_100DDCC +
mov ecx ds:dword_1004CB8 +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_100130E  +
mov eax edi +
mov ecx ds:dword_1004CB8 +
sub eax edx +
xor edx edx +
div  ecx +
mov edx ds:dword_1004CB8 +
imul edx eax +
lea eax Address[edx] +
jmp loc_1001310  +
xor eax eax +
test eax eax +
jnz loc_100131C  +
and edi 0FFFF0000h +
mov eax edi +
sub esi eax +
lea edx [esi-40h] +
test edx edx +
jge loc_1001327  +
xor edx edx +
add edx eax +
push 40h  +
pop ecx  +
mov byte ptr [edx] 0 +
inc edx  +
dec ecx  +
jnz loc_100132C  +
mov ecx [ebp-4] +
push eax  +
lea eax [ebp-24h] +
push eax  +
push ebx  +
call sub_1009D56  +
mov [ebx+8] eax +
mov ecx [ebp-24h] +
mov ebx [ebp-1Ch] +
mov esi [ebp-0Ch] +
mov eax [ebp-10h] +
mov edi [ebp-20h] +
mov edx [ebp-8] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push edi  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-20h] eax +
mov [ebp-18h] ecx +
mov [ebp-10h] edx +
mov [ebp-14h] ebx +
mov [ebp-24h] esi +
lea esi [ebp+4] +
mov [ebp-1Ch] edi +
mov eax [esi+8] +
sub esi 4 +
lea ecx [eax+4] +
mov ebx [eax] +
mov edi offset Address +
shr ebx 1 +
lea eax [ecx-1] +
and ebx 0FFFFFFFh +
add ebx offset __ImageBase +
cmp eax edi +
mov [ebp-0Ch] ebx +
mov [ebp-8] eax +
jb loc_10013E4  +
mov eax ds:dword_100DDCC +
mov edx ds:dword_1004CB8 +
imul eax edx +
lea edx Address[eax] +
mov eax [ebp-8] +
cmp eax edx +
jnb loc_10013E4  +
mov ebx ds:dword_1004CB8 +
sub eax edi +
xor edx edx +
div  ebx +
mov edx ds:dword_1004CB8 +
imul edx eax +
mov ebx [ebp-0Ch] +
lea eax Address[edx] +
mov [ebp-4] eax +
mov eax [ebp-8] +
jmp loc_10013E8  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-4] 0 +
jnz loc_10013F6  +
and eax 0FFFF0000h +
mov [ebp-4] eax +
mov edx [ebp-4] +
sub ecx edx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1001404  +
xor eax eax +
push 40h  +
add eax edx +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1001409  +
mov eax 57FB1F3Ch +
cmp [ebp-4] edi +
jb loc_1001453  +
mov ecx ds:dword_1004CB8 +
mov eax ds:dword_100DDCC +
imul eax ecx +
lea eax Address[eax] +
cmp [ebp-4] eax +
jnb loc_1001453  +
mov ecx ds:dword_1004CB8 +
mov eax [ebp-4] +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_1004CB8 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_1001455  +
xor ecx ecx +
test ecx ecx +
jz loc_100147B  +
mov ecx ds:dword_1004CB8 +
mov eax [ebp-4] +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_100DDCC +
mov dword_104D078[eax*4] 0C4A6h +
jmp loc_100149A  +
call ds:__imp_GetLastError  +
mov edi eax +
push 8000h  +
push 0  +
push dword ptr [ebp-4]  +
call ds:VirtualFree  +
push edi  +
call ds:SetLastError  +
mov [esi+8] ebx +
add dword ptr [esi+0Ch] 4 +
mov edi [ebp-1Ch] +
mov eax [ebp-20h] +
mov ecx [ebp-18h] +
mov edx [ebp-10h] +
mov ebx [ebp-14h] +
mov esi [ebp-24h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-20h] eax +
mov [ebp-18h] ecx +
mov [ebp-10h] edx +
mov [ebp-14h] ebx +
lea ebx [ebp+4] +
mov [ebp-24h] esi +
mov esi offset Address +
mov [ebp-1Ch] edi +
mov eax [ebx+4] +
mov ecx [eax] +
sub ebx 4 +
shr ecx 1 +
and ecx 0FFFFFFFh +
add ecx offset __ImageBase +
mov [ebp-0Ch] ecx +
lea ecx [eax+4] +
lea edi [ecx-1] +
cmp edi esi +
mov [ebp-8] ebx +
jb loc_1001540  +
mov eax ds:dword_100DDCC +
mov edx ds:dword_1004CB8 +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_1001540  +
mov eax edi +
sub eax esi +
xor edx edx +
mov ebx ds:dword_1004CB8 +
div  ebx +
mov ebx [ebp-8] +
mov edx ds:dword_1004CB8 +
imul edx eax +
lea eax Address[edx] +
mov [ebp-4] eax +
jmp loc_1001544  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-4] 0 +
jnz loc_1001553  +
and edi 0FFFF0000h +
mov [ebp-4] edi +
mov edx [ebp-4] +
sub ecx edx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1001561  +
xor eax eax +
push 40h  +
pop ecx  +
add eax edx +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1001566  +
mov eax 2B2A7F3Bh +
mov edi [ebp-4] +
cmp edi esi +
jb loc_10015B0  +
mov ecx ds:dword_1004CB8 +
mov eax ds:dword_100DDCC +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_10015B0  +
mov ecx ds:dword_1004CB8 +
mov eax edi +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_1004CB8 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_10015B2  +
xor ecx ecx +
test ecx ecx +
jz loc_10015D7  +
mov ecx ds:dword_1004CB8 +
mov eax edi +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_100DDCC +
mov dword_104D078[eax*4] 0C4A6h +
jmp loc_10015F4  +
call ds:__imp_GetLastError  +
mov esi eax +
push 8000h  +
push 0  +
push edi  +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp-0Ch] +
mov [ebx+8] eax +
mov eax [ebp-20h] +
mov esi [ebp-24h] +
mov ebx [ebp-14h] +
mov edx [ebp-10h] +
mov ecx [ebp-18h] +
mov edi [ebp-1Ch] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp-4Ch] eax +
mov [ebp-44h] ecx +
mov [ebp-3Ch] edx +
mov [ebp-40h] ebx +
mov [ebp-50h] esi +
lea esi [ebp+4] +
mov [ebp-48h] edi +
mov edi [esi+4] +
mov eax edi +
sub esi 4 +
push edi  +
mov [ebp-0Ch] esi +
mov [ebp-14h] edi +
mov eax 9860DBB0h +
mov eax 0FFFFFFFh +
mov ebx [edi+8] +
mov edi [edi+4] +
mov edx ds:off_1005164 +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-20h] 0 +
and edi eax +
pop ecx  +
and ebx eax +
mov eax offset __ImageBase +
add edi eax +
mov ecx eax +
sub ecx edx +
mov [ebp-18h] ecx +
jnz loc_10016C0  +
and dword ptr [ebp-4] 0 +
test ebx ebx +
jbe loc_10018B0  +
mov esi 5F85A31Bh +
mov eax [ebp-4] +
movzx ecx byte ptr [eax+edi] +
add ecx esi +
add [ebp-24h] ecx +
add ecx [ebp-20h] +
mov eax ecx +
imul eax eax +
rol eax 0Bh +
ror ecx 0Bh +
xor eax ecx +
imul eax eax +
ror eax 1 +
mov ecx esi +
mul  ecx +
add eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
cmp [ebp-4] ebx +
jb loc_1001680  +
jmp loc_10018AD  +
lea ecx [ebx+edi] +
mov edx ds:dword_100003C +
mov [ebp-1Ch] ecx +
mov ecx edi +
sub ecx eax +
mov esi ecx +
and esi 0FFFFF000h +
mov [ebp-4] esi +
mov esi ecx +
sub esi [ebp-4] +
add ecx ebx +
mov ebx ecx +
and ebx 0FFFFF000h +
sub ecx ebx +
mov [ebp-34h] ecx +
mov ecx ds:dword_10000A0[edx] +
mov [ebp-38h] ebx +
mov ebx ds:dword_10000A4[edx] +
add ecx eax +
add ebx ecx +
jmp loc_100170E  +
mov eax [ebp-4] +
cmp [ecx] eax +
jnb loc_1001712  +
add ecx [ecx+4] +
cmp ecx ebx +
jnz loc_1001704  +
and dword ptr [ebp-28h] 0 +
cmp ecx ebx +
jz loc_100174D  +
mov eax [ebp-4] +
cmp [ecx] eax +
jnz loc_100174D  +
mov eax [ecx+4] +
sub eax 8 +
shr eax 1 +
jz loc_100174D  +
lea edx [ecx+8] +
mov [ebp-4] edx +
mov edx [ebp-4] +
movzx edx word ptr [edx] +
and edx 0FFFh +
cmp edx esi +
jnb loc_100174D  +
inc dword ptr [ebp-28h]  +
add dword ptr [ebp-4] 2 +
cmp [ebp-28h] eax +
jnz loc_1001731  +
mov esi 5F85A31Bh +
cmp ecx ebx +
jz loc_100186B  +
mov eax [ebp-38h] +
cmp [ecx] eax +
ja loc_100186B  +
mov eax [ecx+4] +
lea edx [eax-8] +
mov eax [ebp-28h] +
shr edx 1 +
cmp eax edx +
jnz loc_1001790  +
add ecx [ecx+4] +
cmp ecx ebx +
jz loc_100186B  +
mov eax [ebp-38h] +
cmp [ecx] eax +
ja loc_100186B  +
and dword ptr [ebp-28h] 0 +
jmp loc_1001765  +
***
mov edx [ebp-38h] +
cmp [ecx] edx +
jnz loc_10017AA  +
movzx eax word ptr [ecx+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-34h] +
jnb loc_100186B  +
mov edx 0F000h +
mov eax [ebp-28h] +
inc dword ptr [ebp-28h]  +
test [ecx+eax*2+8] dx +
jz loc_1001752  +
mov edx [ecx] +
movzx eax word ptr [ecx+eax*2+8] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] edi +
mov [ebp-10h] eax +
jz loc_100181F  +
mov eax [ebp-4] +
movzx edx byte ptr [eax+edi] +
add edx esi +
add [ebp-24h] edx +
add edx [ebp-20h] +
mov eax edx +
imul eax eax +
rol eax 0Bh +
ror edx 0Bh +
xor eax edx +
imul eax eax +
ror eax 1 +
mov edx esi +
mul  edx +
add eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
mov eax [ebp-4] +
cmp eax [ebp-8] +
jb loc_10017DE  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
mov [ebp-8] eax +
xor edi edi +
movzx edx byte ptr [ebp+edi-8] +
add edx esi +
add [ebp-24h] edx +
add edx [ebp-20h] +
mov eax edx +
imul eax eax +
rol eax 0Bh +
ror edx 0Bh +
xor eax edx +
imul eax eax +
mov edx esi +
ror eax 1 +
mul  edx +
add eax edx +
add [ebp-24h] eax +
inc edi  +
cmp edi 4 +
mov [ebp-20h] eax +
jb loc_1001829  +
mov edi [ebp-10h] +
add edi 4 +
jmp loc_1001752  +
***
mov eax [ebp-1Ch] +
xor ebx ebx +
sub eax edi +
mov [ebp-1Ch] eax +
jz loc_10018AD  +
movzx ecx byte ptr [ebx+edi] +
add ecx esi +
add [ebp-24h] ecx +
add ecx [ebp-20h] +
mov eax ecx +
imul eax eax +
rol eax 0Bh +
ror ecx 0Bh +
xor eax ecx +
imul eax eax +
ror eax 1 +
mov ecx esi +
mul  ecx +
add eax edx +
add [ebp-24h] eax +
inc ebx  +
mov [ebp-20h] eax +
cmp ebx [ebp-1Ch] +
jb loc_1001877  +
mov esi [ebp-0Ch] +
add dword ptr [esi+8] 10h +
mov eax [ebp-14h] +
mov eax [eax] +
and eax 0FFFFFFFh +
mov ecx [ebp-24h] +
cmp ecx ds:__ImageBase[eax] +
jnz loc_10018D8  +
mov ecx [ebp-20h] +
cmp ecx ds:dword_1000004[eax] +
jz loc_1001987  +
call sub_100E99C  +
mov edx 0FFFFF000h +
lea ecx [esi+0Ch] +
and ecx 0FFFFFFFCh +
and eax edx +
lea edi [ecx+0FFFh] +
and edi edx +
mov [ebp-1Ch] eax +
mov dword ptr [esi+8] offset sub_1025029 +
xor eax eax +
mov edx 0FFFFh +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_1001903  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
mov eax [ebp-1Ch] +
cmp ecx edi +
mov [ebp-3Ch] eax +
mov eax ecx +
mov [ebp-44h] edx +
mov dword ptr [ebp-1Ch] 0 +
jnb loc_1001954  +
mov ecx [ebp-1Ch] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_1001948  +
mov eax [ebp-14h] +
mov dword ptr [esi+8] offset sub_1025029 +
mov eax [eax+0Ch] +
and eax 0FFFFFFFh +
mov ecx [ebp-44h] +
mov [ebp-48h] ecx +
mov edx ecx +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_104D018 +
xor edx ecx +
and dword ptr [ebp-44h] 0 +
mov [ebp-50h] edx +
mov eax 2FD286Ah +
mov esi [ebp-50h] +
mov ecx [ebp-44h] +
mov edi [ebp-48h] +
mov eax [ebp-4Ch] +
mov edx [ebp-3Ch] +
mov ebx [ebp-40h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp-4Ch] eax +
mov [ebp-44h] ecx +
mov [ebp-3Ch] edx +
mov [ebp-40h] ebx +
mov [ebp-50h] esi +
mov [ebp-48h] edi +
lea esi [ebp+4] +
mov edi [esi+4] +
push edi  +
sub esi 4 +
mov eax edi +
mov [ebp-0Ch] esi +
mov [ebp-14h] edi +
mov eax 46643ACCh +
mov eax 0FFFFFFFh +
mov ebx [edi+4] +
mov edx ds:off_1005164 +
mov edi [edi+0Ch] +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-20h] 0 +
pop ecx  +
and edi eax +
and ebx eax +
mov eax offset __ImageBase +
mov ecx eax +
add edi eax +
sub ecx edx +
mov [ebp-18h] ecx +
jnz loc_1001A5A  +
and dword ptr [ebp-4] 0 +
test ebx ebx +
jbe loc_1001C62  +
mov esi 48686C7Ah +
mov ecx esi +
mov eax [ebp-4] +
movzx eax byte ptr [eax+edi] +
add eax esi +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  ecx +
add eax edx +
mov ecx eax +
imul ecx ecx +
rol ecx 0Ah +
ror eax 0Ah +
xor ecx eax +
mov eax ecx +
imul eax eax +
rol eax 0Ah +
ror ecx 0Ah +
xor eax ecx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
cmp [ebp-4] ebx +
jb loc_1001A12  +
jmp loc_1001C5F  +
lea ecx [ebx+edi] +
mov edx ds:dword_100003C +
mov [ebp-1Ch] ecx +
mov ecx edi +
sub ecx eax +
mov esi ecx +
and esi 0FFFFF000h +
mov [ebp-4] esi +
mov esi ecx +
sub esi [ebp-4] +
add ecx ebx +
mov ebx ecx +
and ebx 0FFFFF000h +
sub ecx ebx +
mov [ebp-34h] ecx +
mov ecx ds:dword_10000A0[edx] +
add ecx eax +
mov [ebp-38h] ebx +
mov ebx ds:dword_10000A4[edx] +
add ebx ecx +
jmp loc_1001AA8  +
mov eax [ebp-4] +
cmp [ecx] eax +
jnb loc_1001AAC  +
add ecx [ecx+4] +
cmp ecx ebx +
jnz loc_1001A9E  +
and dword ptr [ebp-28h] 0 +
cmp ecx ebx +
jz loc_1001AE7  +
mov eax [ebp-4] +
cmp [ecx] eax +
jnz loc_1001AE7  +
mov eax [ecx+4] +
sub eax 8 +
shr eax 1 +
jz loc_1001AE7  +
lea edx [ecx+8] +
mov [ebp-4] edx +
mov edx [ebp-4] +
movzx edx word ptr [edx] +
and edx 0FFFh +
cmp edx esi +
jnb loc_1001AE7  +
inc dword ptr [ebp-28h]  +
add dword ptr [ebp-4] 2 +
cmp [ebp-28h] eax +
jnz loc_1001ACB  +
mov esi 48686C7Ah +
cmp ecx ebx +
jz loc_1001C15  +
mov eax [ebp-38h] +
cmp [ecx] eax +
ja loc_1001C15  +
mov eax [ecx+4] +
lea edx [eax-8] +
mov eax [ebp-28h] +
shr edx 1 +
cmp eax edx +
jnz loc_1001B2A  +
add ecx [ecx+4] +
cmp ecx ebx +
jz loc_1001C15  +
mov eax [ebp-38h] +
cmp [ecx] eax +
ja loc_1001C15  +
and dword ptr [ebp-28h] 0 +
jmp loc_1001AFF  +
***
mov edx [ebp-38h] +
cmp [ecx] edx +
jnz loc_1001B44  +
movzx eax word ptr [ecx+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-34h] +
jnb loc_1001C15  +
mov eax [ebp-28h] +
mov edx 0F000h +
inc dword ptr [ebp-28h]  +
test [ecx+eax*2+8] dx +
jz loc_1001AEC  +
movzx eax word ptr [ecx+eax*2+8] +
mov edx [ecx] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] edi +
mov [ebp-10h] eax +
jz loc_1001BC1  +
mov eax [ebp-4] +
mov edx esi +
movzx eax byte ptr [eax+edi] +
add eax esi +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Ah +
ror eax 0Ah +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 0Ah +
ror edx 0Ah +
xor eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
mov eax [ebp-4] +
cmp eax [ebp-8] +
jb loc_1001B78  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
xor edi edi +
mov [ebp-8] eax +
movzx eax byte ptr [ebp+edi-8] +
mov edx esi +
add eax esi +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Ah +
ror eax 0Ah +
xor edx eax +
mov eax edx +
imul eax eax +
rol eax 0Ah +
ror edx 0Ah +
xor eax edx +
add [ebp-24h] eax +
inc edi  +
mov [ebp-20h] eax +
cmp edi 4 +
jb loc_1001BCB  +
mov edi [ebp-10h] +
add edi 4 +
jmp loc_1001AEC  +
***
mov eax [ebp-1Ch] +
xor ebx ebx +
sub eax edi +
mov [ebp-1Ch] eax +
jz loc_1001C5F  +
mov ecx esi +
movzx eax byte ptr [edi+ebx] +
add eax esi +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  ecx +
add eax edx +
mov ecx eax +
imul ecx ecx +
rol ecx 0Ah +
ror eax 0Ah +
xor ecx eax +
mov eax ecx +
imul eax eax +
rol eax 0Ah +
ror ecx 0Ah +
xor eax ecx +
add [ebp-24h] eax +
mov [ebp-20h] eax +
inc ebx  +
cmp ebx [ebp-1Ch] +
jb loc_1001C21  +
mov esi [ebp-0Ch] +
add dword ptr [esi+8] 10h +
mov eax [ebp-14h] +
mov eax [eax+8] +
and eax 0FFFFFFFh +
mov ecx [ebp-24h] +
cmp ecx ds:__ImageBase[eax] +
jnz loc_1001C8B  +
mov ecx [ebp-20h] +
cmp ecx ds:dword_1000004[eax] +
jz loc_1001D39  +
call sub_100E99C  +
lea ecx [esi+0Ch] +
mov edx 0FFFFF000h +
and ecx 0FFFFFFFCh +
lea edi [ecx+0FFFh] +
and eax edx +
and edi edx +
mov edx 0FFFFh +
mov [ebp-1Ch] eax +
mov dword ptr [esi+8] offset sub_1025029 +
xor eax eax +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_1001CB6  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
cmp ecx edi +
mov eax [ebp-1Ch] +
mov [ebp-3Ch] eax +
mov [ebp-44h] edx +
mov dword ptr [ebp-1Ch] 0 +
mov eax ecx +
jnb loc_1001D07  +
mov ecx [ebp-1Ch] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_1001CFB  +
mov eax [ebp-14h] +
mov dword ptr [esi+8] offset sub_1025029 +
mov eax [eax] +
and eax 0FFFFFFFh +
mov ecx [ebp-44h] +
mov edx ecx +
mov [ebp-48h] ecx +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_104E508 +
xor edx ecx +
and dword ptr [ebp-44h] 0 +
mov [ebp-50h] edx +
mov eax 0DE997BFCh +
mov ebx [ebp-40h] +
mov eax [ebp-4Ch] +
mov esi [ebp-50h] +
mov ecx [ebp-44h] +
mov edi [ebp-48h] +
mov edx [ebp-3Ch] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
xor esi esi +
jmp loc_1001FBD  +
***
mov ecx esi +
inc esi  +
mov [ebp-58h] esi +
mov esi 0F000h +
test [edx+ecx*2+8] si +
jz loc_1001FA6  +
movzx esi word ptr [edx+ecx*2+8] +
mov ecx [edx] +
and esi 0FFFh +
lea esi __ImageBase[esi+ecx] +
mov [ebp-24h] esi +
xor ecx ecx +
sub [ebp-24h] eax +
mov [ebp-18h] esi +
mov [ebp-20h] ecx +
jz loc_1002067  +
movzx esi byte ptr [ecx+eax] +
add esi ebx +
add [ebp-30h] esi +
add esi [ebp-2Ch] +
imul esi esi +
ror esi 9 +
imul esi esi +
ror esi 9 +
mov ecx esi +
add [ebp-30h] ecx +
mov ecx [ebp-20h] +
mov [ebp-2Ch] esi +
inc ecx  +
mov [ebp-20h] ecx +
cmp ecx [ebp-24h] +
jb loc_1002035  +
mov eax [ebp-18h] +
mov eax [eax] +
sub eax [ebp-40h] +
xor ecx ecx +
mov [ebp-74h] eax +
movzx eax byte ptr [ebp+ecx-74h] +
add eax ebx +
add [ebp-30h] eax +
add eax [ebp-2Ch] +
imul eax eax +
ror eax 9 +
imul eax eax +
ror eax 9 +
add [ebp-30h] eax +
inc ecx  +
cmp ecx 4 +
mov [ebp-2Ch] eax +
jb loc_1002074  +
mov eax [ebp-18h] +
add eax 4 +
jmp loc_1001FA6  +
***
xor edx edx +
test ebx ebx +
jge loc_10022AD  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_10022AD  +
***
xor edx edx +
mov eax [ebp-38h] +
mov [ebp-40h] eax +
not eax  +
mov [ebp-18h] eax +
xor eax eax +
jmp loc_10022B2  +
***
push ebp  +
mov edi edi +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 1 +
jnz loc_100265C  +
call sub_101C897  +
test eax eax +
jge loc_100265C  +
call sub_100E955  +
xor eax eax +
jmp loc_100267D  +
mov eax ds:dword_10014B8 +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call eax  +
mov esi eax +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_100267A  +
call sub_100E955  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
add [ecx+2AB81A3Fh] al +
mov ebp 0D4C0D729h +
or [edx+14565DC0h] cl +
mov cl 0F6h +
sbb al 7Fh +
mov dh 0CFh +
retf   +
and eax [ebx] +
and al 0BCh +
retn   +
***
pop ds  +
xchg eax ecx +
push es  +
xor dh al +
cwde   +
push edi  +
xchg eax edx +
pop ds  +
mov dword ptr [ecx] 86251460h +
pop ebp  +
cmc   +
mov ebp 5B2717B8h +
cmp edi [esi+56h] +
retn 0AB2Bh  +
***
xor [ebx-6Dh] edi +
lds edi [ecx+ecx+4Ah] +
retn   +
***
cmp ch [eax] +
fdivr  qword ptr [ebp+edx+2Ah] +
add al ch +
retf 0FB30h  +
***
dec edi  +
adc [ebx+26972843h] eax +
cmp al 1Bh +
xchg ch cl +
push ds  +
xchg eax edx +
sub ebx [ecx] +
xor [ebx] esp +
add al 45h +
xchg eax ecx +
lds edi [ebx-53h] +
push ss  +
dec ebp  +
movs   +
sbb [ebp-7Eh] eax +
mov al 38h +
shr byte ptr [esi+2E2A1EFEh] 1 +
wait   +
add esp [ebp+2E8BF94Bh] +
retn   +
***
mov ecx 0CDA20F7Fh +
retn   +
***
add [esi+2A639A9Dh] dl +
sub [ebx+329DFEEDh] bl +
lods   +
cmp al 2Ch +
or ebx [ebx+ecx+42h] +
retf   +
***
xor eax 0DFC36D79h +
mov bh 5Bh +
jle loc_1005149  +
cmp eax 5316415Fh +
lods   +
or eax [edx-3Eh] +
inc eax  +
mov dl cl +
and edi edi +
cmp [edi] ecx +
pop ss  +
mov esp 5875C49Bh +
push edi  +
test al 0EFh +
add [esp+ebx] al +
das   +
jnp loc_1005102  +
sbb ebp esi +
pushf   +
and bl [ebx-37h] +
xor al [ecx-8] +
ins  dx +
***
pop ds  +
stc   +
adc [ebx-0FB426Ah] esp +
retf 0E745h  +
***
add al 36h +
mov ah 0A2h +
mov ebp esi +
xor ds:0C65575ECh al +
sbb eax 8F715FD6h +
add al 0BEh +
fist  dword ptr [ebx] +
xor al 0BAh +
setalc   +
adc eax 0BB28A22Eh +
or al 0C1h +
sbb dword ptr [ebp+1258102Ch] 22FDFB2Fh +
test [eax-0F45AC16h] bl +
scas   +
or [ebx] edi +
fsub st st(1) +
mov eax ds:0B0227C30h +
sub eax 57h +
push ds  +
retf 0DA9Eh  +
***
and edx edx +
fsub st st(3) +
mov [esi+5Dh] dl +
retf 944Fh  +
***
xor ecx esp +
mov dl 0B2h +
mov eax ds:48B279DCh +
or eax 54A40FCFh +
cdq   +
push es  +
push es  +
adc [eax-3681AB29h] ch +
and [edi+1Bh] ecx +
and dword ptr [edx-2F74AFD0h] 30h +
push edi  +
mov dl 1Ch +
mov ecx 7E5315C6h +
push esp  +
sbb al 0C4h +
sub al 46h +
rcr byte ptr [eax+esi*4+670D5948h] cl +
adc eax 99BD399Fh +
mov edx [edx+73h] +
retn   +
***
add esi [edx+edi*2-37AA5EAh] +
pop edx  +
mov bh 8 +
fdivr  dword ptr [ecx+edx-67h] +
mov byte ptr [eax] 3Bh +
push 0D46D5AAh  +
lahf   +
retf 0F785h  +
***
sub eax 0D607ED18h +
push eax  +
and al 1Fh +
sbb ch [eax-7E78D9DEh] +
das   +
push ecx  +
aad  0D3h +
wait   +
retf   +
***
adc ebp [ebx] +
dec edx  +
jge near ptr loc_1005563+4  +
mov edx 0BE1A0B36h +
lods   +
add es:[esi-38FC8629h] ah +
pop esp  +
xor edx [ebx-4Eh] +
dec edi  +
stos   +
retn 5EBCh  +
***
sbb [edx+101E1F73h] edx +
sub ecx [edx-4C9F90EDh] +
test byte ptr [esp+ecx+4Fh] 99h +
pop eax  +
mov eax 0B77E5B0Bh +
sub ebx [esp+ecx] +
das   +
mov ch 0DFh +
cmp bl [esi] +
shr ebp cl +
sbb dh bh +
adc ch dl +
jnz loc_1005813  +
push es  +
adc [edx-75DD5782h] al +
cmp eax 73FE6F6Ch +
dec edx  +
or al [ecx-2C28611Fh] +
push esp  +
retn   +
***
pcmpeqw mm0 mm4 +
fld  tbyte ptr [eax+50h] +
mov ch 90h +
add ebp ss:[ebx+1Dh] +
add bh ah +
push esp  +
sbb [ebx-202F45DCh] ch +
or al 5 +
inc eax  +
push ds  +
inc ebp  +
imul  byte ptr [edi+20h] +
add ebx [eax-54314436h] +
cmp [ebx+eax*4+32331DFh] bl +
out 0D5h al +
mov [ecx+eax*2+2E482F0Ah] ebp +
add ebx esi +
or [edi-663D5ECFh] bh +
cmps   +
mov ebx 0DD36D01Dh +
dec esp  +
push ebp  +
add esi edx +
aaa   +
in eax dx +
mov [esi] ah +
iret   +
***
sub ebp ebp +
xchg eax ecx +
jmp loc_100585D  +
not dword ptr [edx-479AE526h]  +
mov dl 0FCh +
adc [edi] edi +
les esi [esi] +
test al 52h +
pop ss  +
pop ecx  +
cmps   +
test eax 0AF5E07ADh +
loope loc_10058DE  +
wait   +
mov eax ds:79EF375Dh +
mov cl 2Eh +
and byte ptr [eax] 0CBh +
push edx  +
xor eax 0AD3603E4h +
xor bl [ebx-1BFBAF61h] +
xchg eax [edi+622D7FBFh] +
sub edx [edx] +
inc ebx  +
push ss  +
mov ch 8Ch +
imul ecx [edx+32094E7Eh] +
adc eax 0CFBFA5F5h +
pop edx  +
pop ds  +
into   +
xor [ebx+edx*4-7EB7F7Fh] dh +
mov esi 0A54F22B0h +
into   +
imul edx ebx +
cmp ebp [ebp-43h] +
adc [edx-33E1508Eh] ecx +
xor [edi] ecx +
add ch ds:0BB955F5h[esi*4] +
outs   +
dec ebx  +
dec esi  +
and esp [ecx+ebx] +
inc edx  +
wait   +
jnp near ptr loc_10058C5+3  +
push ebx  +
dec edi  +
and cl [esi+esi*4-1CDD2F07h] +
leave   +
dec esi  +
cdq   +
xor al 0F4h +
xor al 0EBh +
dec dword ptr [ebp-4D9901DDh]  +
and al 2Eh +
aas   +
pop ebx  +
mov ebx 0B302DB75h +
push 0D70B43D9h  +
pop edi  +
sub ch [ebx+0Eh] +
lods   +
xor [ebx] edi +
aam   +
test edx ebp +
dec edi  +
daa   +
sub eax 4C75A371h +
jnz near ptr loc_1005927+1  +
sbb ebx esi +
mov dl 20h +
and bh bl +
sub bh [ebx+5Ch] +
leave   +
das   +
jb near ptr loc_10058BD+1  +
out dx al +
jb near ptr loc_100595D+2  +
mov byte ptr [ebp+25918B87h] 35h +
or [ebx-38h] ecx +
js near ptr loc_1005911+2  +
mov bl 8Fh +
ror dword ptr [edx-4Dh] cl +
sub dword ptr ds:0B4E65E7Eh 0FE431E18h +
cwde   +
loopne near ptr loc_100598F+5  +
loopne near ptr loc_1005924+1  +
mov ecx 4F1F35C3h +
pushf   +
jz loc_100597B  +
or al 0B9h +
loop loc_10059BA  +
xlat   +
ins  dx +
adc cl [ecx+1F07349Ch] +
fisttp  dword ptr [eax-61h] +
mov al ds:0D6DD88FDh +
pusha   +
and eax 0E1DA3304h +
xchg al [ebx-4B0CA480h] +
retf   +
***
test dword ptr [ebx] 57D48811h +
movs   +
or ebx 767DA41Ch +
pop esp  +
in al 48h +
movs   +
dec eax  +
jg near ptr loc_10059BC+1  +
xor ah [eax+18CD7912h] +
out 96h eax +
mov esi [ebx-7Bh] +
js loc_1005A15  +
sbb al 5Fh +
and ebp ss:[ebx] +
mov ecx 2136EE13h +
fisubr  dword ptr ds:2402764Ah +
mov al 29h +
push ds  +
hlt   +
rcl byte ptr [ecx+edi*2+1Bh] 2Ah +
adc al 1Ah +
iret   +
***
mov [edi] ch +
sbb eax [edx+10E98B4h] +
lods   +
jl near ptr loc_10059C5+1  +
jg loc_1005A3B  +
adc eax 5DDD6F66h +
sub [ebx] ecx +
mov ebx esp +
xchg eax ebx +
adc al 89h +
js near ptr 5988h  +
xor eax 0EA132307h +
xor ah ch +
mov bl [ebx+76D8E993h] +
xchg eax esp +
sub eax [esi] +
dec edi  +
jp loc_10059F8  +
cli   +
and eax 44973FFh +
lds ebp [edx+7Bh] +
or [edi+459D8F3Ah] ebp +
xor [edi+edi*8-61h] ecx +
in al dx +
jmp fword ptr [esi+63h]  +
***
bound esi [edi-3Bh] +
lahf   +
mov edi 18D81F86h +
jecxz loc_1005A19  +
push cs  +
jz near ptr loc_1005A54+1  +
out dx eax +
dec esp  +
dec byte ptr [edx-38A4CA86h]  +
jno loc_1005A7C  +
jecxz near ptr loc_1005A36+1  +
push edi  +
adc edi [ebp+7Eh] +
loope near ptr loc_1005A52+1  +
jg loc_10059FE  +
adc esi [ecx+5B3A991h] +
in al 37h +
pop es  +
sbb al 51h +
outs  byte ptr fs:[esi] +
pop ds  +
test [ecx] al +
pop esi  +
stos   +
jnp near ptr loc_1005A19+3  +
in al 6 +
in eax 5Ah +
and al 0FCh +
or al 3Ch +
adc [ebx-5D0958A6h] bh +
mov bh 76h +
sub [esi] bh +
fisttp  dword ptr [edx] +
sub esp [ecx+ebx*4+56760702h] +
xchg eax esi +
mov edx 18F298D7h +
mov eax ds:0CDA576FBh +
loope loc_1005A08  +
dec esi  +
dec eax  +
loop loc_1005AE6  +
sub esp edi +
rcr byte ptr [esi-49h] 1 +
enter 0FFFFC66Fh 47h +
mul  byte ptr [edi-3A62E2CAh] +
inc edx  +
lea edx [edi+9] +
mov cl 0A9h +
sbb esi [ebx+ecx+48A9F854h] +
jnb loc_1005B51  +
or ecx esi +
das   +
sbb [edx] al +
add eax 0BF48EC08h +
cmp eax 0F863830h +
rcr byte ptr [ecx+271BD0C5h] cl +
lods   +
mov eax ds:310D3D57h +
popf   +
push esi  +
test dword ptr [ebx] 1AFC8926h +
dec ebx  +
aaa   +
mov ss word ptr ds:0E4216CB4h +
fcomip st st +
jo loc_1005B09  +
cli   +
add [ebx+4B6B2D08h] al +
arpl ds:81FBDBD9h ax +
sti   +
cmp esp [ebx+edx+31h] +
std   +
cld   +
daa   +
xlat   +
test al 46h +
xchg dl [esi] +
mov dl dl +
das   +
mov esp 0CF4FE836h +
bswap ebx  +
pushf   +
jno loc_1005B7E  +
jnb loc_1005BAC  +
cmp al 0F1h +
adc dword ptr ds:0C6853926h 355BE90Bh +
dec ebp  +
inc edi  +
jbe loc_1005C00  +
shr byte ptr [ebp+4EFD2A97h] cl +
xchg eax ebx +
sbb [esi-6187C984h] bh +
fstp  dword ptr [ecx+5Ch] +
int 3  +
mov dl ds:81C9D893h +
adc edx ss:[ebx+3992DD54h] +
leave   +
popa   +
das   +
dec esp  +
inc ebx  +
arpl [ecx-1ADFA02Bh] ax +
cmps   +
jl near ptr loc_1005C1B+3  +
pusha   +
and [edx-5B21FDAEh] ah +
add [ebx] ch +
dec esi  +
lods   +
pop eax  +
aaa   +
mov eax 0BEBF0F16h +
jge near ptr loc_1005B85+1  +
add esp [ebx-2Ch] +
mov bh 0DDh +
mov cl 0Dh +
inc edi  +
setnp byte ptr [ebx-7Ah]  +
push es  +
lea ebp [edx+122D71F6h] +
adc al 83h +
and eax 673E4E17h +
enter 1F3Ah 86h +
scas   +
and ss:[ebx+33h] esi +
pop ebp  +
add dl ah +
sbb cl [ebp-50h] +
les eax [edx] +
cmp eax 205B51BEh +
or dl ah +
jnp near ptr loc_1005B95+4  +
and al [ebx] +
movs   +
mov dl 0E4h +
mov ds:5378AC54h eax +
sub edx [eax-416F6F70h] +
movs   +
xchg eax ecx +
stos   +
mov dh 0A9h +
aad  0FBh +
int 3  +
mov cl 0ADh +
mov ebp esp +
mov ecx [ebp-10h] +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A8h +
mov eax dword ptr aNc@ +
xor eax ebp +
mov [ebp+var_8] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx offset __ImageBase +
mov [ebp+var_8C] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
cmp esi ebx +
mov [ebp+var_70] eax +
mov eax [ebp+arg_8] +
push edi  +
mov edi 0FFFFFFFh +
mov [ebp+var_24] eax +
mov [ebp+var_68] esi +
jb loc_100A60A  +
mov eax ds:dword_100003C +
mov eax ds:dword_1000050[eax] +
add eax ebx +
cmp esi eax +
jnb loc_100A60D  +
mov ecx ds:dword_1016F10 +
and [ebp+var_2C] 0 +
sub esi ebx +
dec ecx  +
js loc_1009DEF  +
mov eax [ebp+var_2C] +
add eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
lea edx loc_103EDB4[eax*8] +
mov [ebp+var_6C] edx +
mov edx [edx+4] +
and edx edi +
cmp esi edx +
jnb loc_1009DE0  +
lea ecx [eax-1] +
jmp loc_1009DEA  +
jbe loc_1009EF4  +
inc eax  +
mov [ebp+var_2C] eax +
cmp ecx [ebp+var_2C] +
jge loc_1009DBE  +
xor ecx ecx +
test ecx ecx +
jz loc_100A60A  +
mov eax [ecx] +
mov edx eax +
shr edx 1Dh +
lea ecx [edx+ecx+8] +
shr eax 1 +
mov [ebp+var_3C] ecx +
and eax edi +
lea edx [eax+ecx] +
sub [ebp+var_3C] ebx +
mov [ebp+var_68] ecx +
mov ecx ds:dword_1004CB8 +
mov [ebp+var_74] eax +
mov [ebp+var_48] edx +
sub ecx eax +
inc ecx  +
xor eax eax +
test ecx ecx +
mov edx ecx +
jz loc_1009E52  +
mov esi dword_104D00C +
imul esi esi +
add esi 269EC3h +
mov dword_104D00C esi +
shr esi 10h +
shl eax 10h +
shr edx 10h +
or eax esi +
test edx edx +
jnz loc_1009E2B  +
xor edx edx +
div  ecx +
push [ebp+var_74]  +
mov eax [ebp+var_24] +
add eax edx +
push [ebp+var_3C]  +
mov [ebp+var_2C] eax +
mov eax 23B4E91Bh +
lea esi [ebp+var_A4] +
mov eax [ebp+var_48] +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_A4] ecx +
mov [ebp+var_A0] eax +
mov [ebp+var_1D] 0 +
mov eax 507C0C7h +
mov eax [ebp+var_A4] +
mov esi ds:off_1005164 +
mov edx ebx +
mov ecx [ebp+var_A0] +
and [ebp+var_54] 0 +
and [ebp+var_50] 0 +
and eax edi +
and ecx edi +
add eax ebx +
sub edx esi +
mov [ebp+var_30] edx +
jnz loc_1009F0F  +
xor esi esi +
test ecx ecx +
jbe loc_100A0D9  +
mov ebx 6E0A9DA6h +
movzx edx byte ptr [esi+eax] +
add edx ebx +
add [ebp+var_54] edx +
add edx [ebp+var_50] +
imul edx edx +
ror edx 9 +
imul edx edx +
ror edx 9 +
add [ebp+var_54] edx +
mov [ebp+var_50] edx +
inc esi  +
cmp esi ecx +
jb loc_1009EC6  +
jmp loc_100A0D9  +
mov eax [ebp+var_6C] +
mov ecx [eax] +
shr ecx 1 +
mov eax [eax+4] +
and ecx 3Fh +
and eax edi +
lea ecx __ImageBase[ecx+eax] +
jmp loc_1009DF1  +
mov esi eax +
mov edi ds:dword_100003C +
lea edx [eax+ecx] +
lea edi dword_10000A0[edi] +
mov [ebp+var_40] edx +
mov edx [edi] +
mov edi [edi+4] +
add edx ebx +
sub esi ebx +
mov ebx esi +
and ebx 0FFFFF000h +
add ecx esi +
mov [ebp+var_24] ebx +
mov ebx esi +
sub ebx [ebp+var_24] +
mov esi ecx +
and esi 0FFFFF000h +
mov [ebp+var_88] esi +
sub ecx esi +
mov [ebp+var_84] ecx +
add edi edx +
mov [ebp+var_80] edi +
jmp loc_1009F65  +
mov ecx [ebp+var_24] +
cmp [edx] ecx +
jnb loc_1009F69  +
add edx [edx+4] +
cmp edx edi +
jnz loc_1009F5B  +
and [ebp+var_78] 0 +
cmp edx edi +
jz loc_1009FA4  +
mov ecx [ebp+var_24] +
cmp [edx] ecx +
jnz loc_1009FA4  +
mov ecx [edx+4] +
sub ecx 8 +
shr ecx 1 +
jz loc_1009FA4  +
lea edi [edx+8] +
mov [ebp+var_24] edi +
mov edi [ebp+var_24] +
movzx edi word ptr [edi] +
and edi 0FFFh +
cmp edi ebx +
jnb loc_1009FA4  +
inc [ebp+var_78]  +
add [ebp+var_24] 2 +
cmp [ebp+var_78] ecx +
jnz loc_1009F88  +
mov ebx 6E0A9DA6h +
cmp edx [ebp+var_80] +
jz loc_100A0A7  +
cmp [edx] esi +
ja loc_100A0A7  +
mov ecx [edx+4] +
lea edi [ecx-8] +
shr edi 1 +
mov ecx [ebp+var_78] +
cmp ecx edi +
jnz loc_1009FE3  +
add edx [edx+4] +
cmp edx [ebp+var_80] +
jz loc_100A0A7  +
cmp [edx] esi +
ja loc_100A0A7  +
and [ebp+var_78] 0 +
jmp loc_1009FBA  +
cmp [edx] esi +
jnz loc_1009FFE  +
movzx ecx word ptr [edx+ecx*2+8] +
and ecx 0FFFh +
cmp ecx [ebp+var_84] +
jnb loc_100A0A7  +
mov edi 0F000h +
mov ecx [ebp+var_78] +
inc [ebp+var_78]  +
test [edx+ecx*2+8] di +
jz loc_1009FA9  +
movzx esi word ptr [edx+ecx*2+8] +
and esi 0FFFh +
mov ecx [edx] +
lea esi __ImageBase[esi+ecx] +
xor ecx ecx +
mov [ebp+var_24] esi +
sub [ebp+var_24] eax +
mov [ebp+var_6C] esi +
jz loc_100A05E  +
movzx esi byte ptr [ecx+eax] +
add esi ebx +
add [ebp+var_54] esi +
add esi [ebp+var_50] +
imul esi esi +
ror esi 9 +
imul esi esi +
ror esi 9 +
add [ebp+var_54] esi +
inc ecx  +
mov [ebp+var_50] esi +
cmp ecx [ebp+var_24] +
jb loc_100A031  +
mov esi [ebp+var_6C] +
mov eax [esi] +
sub eax [ebp+var_30] +
xor ecx ecx +
mov [ebp+var_94] eax +
movzx eax byte ptr [ebp+ecx+var_94] +
add eax ebx +
add [ebp+var_54] eax +
add eax [ebp+var_50] +
imul eax eax +
ror eax 9 +
imul eax eax +
ror eax 9 +
add [ebp+var_54] eax +
inc ecx  +
cmp ecx 4 +
mov [ebp+var_50] eax +
jb loc_100A06B  +
lea eax [esi+4] +
mov esi [ebp+var_88] +
jmp loc_1009FA9  +
xor edx edx +
mov esi [ebp+var_40] +
sub esi eax +
jz loc_100A0D9  +
movzx ecx byte ptr [eax+edx] +
add ecx ebx +
add [ebp+var_54] ecx +
add ecx [ebp+var_50] +
imul ecx ecx +
ror ecx 9 +
imul ecx ecx +
ror ecx 9 +
add [ebp+var_54] ecx +
inc edx  +
mov [ebp+var_50] ecx +
cmp edx esi +
jb loc_100A0B0  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl byte ptr [ebp+ecx+var_54] +
mov byte ptr [ebp+eax+var_1C] cl +
inc eax  +
cmp eax 8 +
jb loc_100A0DB  +
mov eax 0A8E2E8ADh +
mov esi [ebp+var_68] +
mov eax [ebp+var_2C] +
mov [ebp+var_38] eax +
mov eax [ebp+var_74] +
and eax 7 +
mov [ebp+var_30] eax +
jz loc_100A2B7  +
mov edi [ebp+var_3C] +
not edi  +
xor ecx ecx +
mov [ebp+var_34] ecx +
cmp eax ecx +
mov [ebp+var_58] ecx +
mov [ebp+var_28] ecx +
jle loc_100A148  +
push 38h  +
pop edx  +
cmp [ebp+var_28] 4 +
movzx ebx byte ptr [esi] +
jge loc_100A135  +
lea ecx [edx-20h] +
shl ebx cl +
or [ebp+var_58] ebx +
jmp loc_100A13C  +
mov ecx edx +
shl ebx cl +
or [ebp+var_34] ebx +
inc esi  +
inc [ebp+var_28]  +
sub edx 8 +
cmp [ebp+var_28] eax +
jl loc_100A122  +
movzx edx word ptr [ebp+var_1C+2] +
mov eax edi +
movzx ebx word ptr [ebp+var_18] +
mov ecx edx +
xor ecx edi +
rol ecx 6 +
imul ebx ecx +
rol eax 0Dh +
xor eax ebx +
xor eax [ebp+var_3C] +
mov ecx [ebp+var_18] +
xor ecx eax +
mov ebx [ebp+var_1C] +
sub ebx ecx +
xor edi ebx +
mov ecx edi +
movzx ebx word ptr [ebp+var_1C] +
sub ecx edx +
mov [ebp+var_28] edx +
imul ecx ebx +
mov edx edi +
shr edx 0Eh +
sub ecx edx +
movzx edx word ptr [ebp+var_18+2] +
xor eax ecx +
mov ecx [ebp+var_1C] +
mov [ebp+var_40] edx +
mov [ebp+var_24] ebx +
add ecx eax +
rol ecx 4 +
imul edx ecx +
mov ecx ebx +
mov ebx eax +
ror ebx 2 +
add ebx edx +
movzx edx word ptr [ebp+var_18] +
xor edi ebx +
mov ebx edi +
xor ecx edi +
rol ecx 3 +
imul edx ecx +
rol ebx 7 +
add ebx edx +
xor eax ebx +
mov ecx eax +
mov ebx [ebp+var_24] +
movzx edx word ptr [ebp+var_18] +
sub ecx edx +
rol ecx 5 +
mov edx [ebp+var_28] +
imul edx ecx +
mov ecx eax +
shr ecx 1 +
xor edx ecx +
mov ecx [ebp+var_18] +
xor edi edx +
mov edx edi +
xor ecx edi +
rol ecx 3 +
imul ebx ecx +
ror edx 0Ch +
add edx ebx +
mov ecx [ebp+var_40] +
xor eax edx +
mov ebx eax +
mov edx eax +
sub edx [ebp+var_1C] +
rol edx 7 +
imul ecx edx +
ror ebx 0Ch +
sub ecx ebx +
xor edi ecx +
mov edx edi +
mov ebx [ebp+var_28] +
ror edx 3 +
movzx ecx word ptr [ebp+var_18] +
sub edx ecx +
imul edx [ebp+var_24] +
xor eax edx +
mov edx eax +
mov ecx eax +
sub ecx [ebp+var_18] +
ror ecx 6 +
imul ebx ecx +
rol edx 0Ch +
xor edx ebx +
mov ecx [ebp+var_28] +
and [ebp+var_28] 0 +
xor edi edx +
mov ebx edi +
xor ecx edi +
rol ecx 7 +
mov edx ecx +
mov ecx [ebp+var_24] +
imul ecx edx +
xor edi [ebp+var_34] +
ror ebx 2 +
sub ecx ebx +
xor ecx [ebp+var_58] +
mov ebx [ebp+var_30] +
xor eax ecx +
test ebx ebx +
mov ecx edi +
mov [ebp+var_44] eax +
jle loc_100A28D  +
cmp [ebp+var_28] 4 +
jge loc_100A274  +
rol [ebp+var_44] 8 +
mov dl byte ptr [ebp+var_44] +
mov ebx [ebp+var_38] +
inc [ebp+var_38]  +
xor [ebp+var_1D] dl +
mov [ebx] dl +
jmp loc_100A282  +
mov edx [ebp+var_38] +
inc [ebp+var_38]  +
rol ecx 8 +
xor [ebp+var_1D] cl +
mov [edx] cl +
inc [ebp+var_28]  +
mov ebx [ebp+var_30] +
cmp [ebp+var_28] ebx +
jl loc_100A25A  +
add ebx 0FFFFFFFCh +
test ebx ebx +
jle loc_100A2A4  +
push 4  +
pop ecx  +
sub ecx ebx +
shl ecx 3 +
shr edi cl +
shl edi cl +
mov edx edi +
jmp loc_100A2C6  +
xor edx edx +
test ebx ebx +
jge loc_100A2C6  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_100A2C6  +
xor edx edx +
mov eax [ebp+var_3C] +
mov [ebp+var_58] eax +
not eax  +
mov [ebp+var_34] eax +
xor eax eax +
mov edi [ebp+var_74] +
shr edi 3 +
test edi edi +
jbe loc_100A496  +
movzx ecx word ptr [ebp+var_18] +
mov [ebp+var_24] ecx +
movzx ecx word ptr [ebp+var_18+2] +
neg [ebp+var_24]  +
mov [ebp+var_40] ecx +
movzx ecx word ptr [ebp+var_1C+2] +
mov [ebp+var_28] ecx +
mov [ebp+var_30] edi +
movzx ecx byte ptr [esi] +
movzx edi byte ptr [esi+1] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+2] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+3] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+5] +
mov [ebp+var_44] ecx +
movzx ecx byte ptr [esi+4] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+6] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+7] +
shl ecx 8 +
or ecx edi +
movzx edi word ptr [ebp+var_18] +
xor edx ecx +
mov [ebp+var_6C] ecx +
mov ecx [ebp+var_28] +
mov ebx edx +
xor ecx edx +
add esi 8 +
rol ecx 6 +
imul edi ecx +
mov ecx [ebp+var_1C] +
rol ebx 0Dh +
xor ebx edi +
mov edi [ebp+var_18] +
xor ebx [ebp+var_44] +
xor eax ebx +
mov ebx ecx +
xor edi eax +
sub ebx edi +
xor edx ebx +
mov ebx edx +
sub ebx [ebp+var_28] +
movzx edi cx +
imul ebx edi +
mov edi edx +
shr edi 0Eh +
sub ebx edi +
xor eax ebx +
add ecx eax +
rol ecx 4 +
mov edi eax +
mov ebx [ebp+var_40] +
imul ebx ecx +
movzx ecx word ptr [ebp+var_1C] +
ror edi 2 +
add edi ebx +
xor edx edi +
movzx edi word ptr [ebp+var_18] +
mov ebx edx +
xor ecx edx +
rol ecx 3 +
imul edi ecx +
rol ebx 7 +
add ebx edi +
xor eax ebx +
mov edi [ebp+var_28] +
mov ecx [ebp+var_24] +
add ecx eax +
rol ecx 5 +
imul edi ecx +
mov ecx eax +
shr ecx 1 +
xor edi ecx +
xor edx edi +
mov ebx edx +
movzx edi word ptr [ebp+var_1C] +
mov ecx [ebp+var_18] +
xor ecx edx +
rol ecx 3 +
ror ebx 0Ch +
imul edi ecx +
add ebx edi +
xor eax ebx +
mov ebx [ebp+var_40] +
mov ecx eax +
mov edi eax +
sub ecx [ebp+var_1C] +
rol ecx 7 +
imul ebx ecx +
ror edi 0Ch +
movzx ecx word ptr [ebp+var_18] +
sub ebx edi +
xor edx ebx +
mov ebx [ebp+var_28] +
mov edi edx +
ror edi 3 +
sub edi ecx +
movzx ecx word ptr [ebp+var_1C] +
imul edi ecx +
xor eax edi +
mov edi eax +
mov ecx eax +
sub ecx [ebp+var_18] +
ror ecx 6 +
imul ebx ecx +
rol edi 0Ch +
xor edi ebx +
mov ecx [ebp+var_28] +
xor edx edi +
movzx edi word ptr [ebp+var_1C] +
xor ecx edx +
rol ecx 7 +
mov ebx edx +
imul edi ecx +
mov cl [ebp+var_1D] +
xor edx [ebp+var_34] +
ror ebx 2 +
sub edi ebx +
xor edi [ebp+var_58] +
xor eax edi +
mov edi [ebp+var_38] +
mov [edi+3] al +
xor cl al +
xor cl dl +
mov [edi+7] dl +
ror eax 8 +
xor cl al +
ror edx 8 +
mov [edi+2] al +
mov [edi+6] dl +
xor cl dl +
ror eax 8 +
xor cl al +
mov [edi+1] al +
ror edx 8 +
mov [edi+5] dl +
xor cl dl +
ror eax 8 +
ror edx 8 +
mov bl dl +
xor bl al +
xor cl bl +
mov ebx [ebp+var_44] +
mov [edi] al +
mov [edi+4] dl +
add edi 8 +
mov [ebp+var_58] ebx +
mov ebx [ebp+var_6C] +
dec [ebp+var_30]  +
ror eax 8 +
ror edx 8 +
mov [ebp+var_1D] cl +
mov [ebp+var_34] ebx +
mov [ebp+var_38] edi +
jnz loc_100A2EF  +
jmp loc_100A499  +
mov cl [ebp+var_1D] +
mov eax [ebp+var_48] +
cmp cl [eax+8] +
jz loc_100A52E  +
call sub_100E99C  +
mov esi 0FFFFh +
mov edx [ebp+var_8C] +
mov ebx eax +
mov dword ptr [edx+8] offset sub_1025029 +
mov eax 0FFFFF000h +
lea ecx [edx+0Ch] +
and ecx 0FFFFFFFCh +
lea edi [ecx+0FFFh] +
mov [ebp+var_2C] esi +
and ebx eax +
and edi eax +
xor eax eax +
mov edx dword_104D00C +
shr [ebp+var_2C] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_104D00C edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp [ebp+var_2C] 0 +
jnz loc_100A4D8  +
xor edx edx +
div  esi +
inc edx  +
mov eax [ebp+var_70] +
mov [eax+1Ch] ebx +
mov [eax] edx +
mov [ebp+var_70] 0 +
jmp loc_100A520  +
mov eax [ebp+var_70] +
mov [ecx] eax +
add ecx 4 +
cmp ecx edi +
jb loc_100A518  +
mov eax offset sub_1025029 +
jmp loc_100AF20  +
mov edx ds:off_1005164 +
mov ecx offset __ImageBase +
mov eax [ebp+var_68] +
sub eax [ebp+var_2C] +
mov [ebp+var_30] eax +
sub ecx edx +
mov [ebp+var_48] ecx +
jnz loc_100A551  +
test eax eax +
jz loc_100A5F8  +
mov ecx ds:dword_100EB28 +
mov esi [ebp+var_2C] +
sub esi [ebp+var_68] +
mov ebx [ebp+var_3C] +
mov eax [ebp+var_74] +
add eax ebx +
xor edi edi +
mov [ebp+var_94] eax +
dec ecx  +
js loc_100A597  +
lea eax [ecx+edi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp ebx edx +
jnb loc_100A58E  +
lea ecx [eax-1] +
jmp loc_100A593  +
jbe loc_100A59B  +
lea edi [eax+1] +
cmp ecx edi +
jge loc_100A570  +
mov ebx edi +
jmp loc_100A5F0  +
mov ebx eax +
jmp loc_100A5F0  +
mov eax ds:dword_100EB2C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp+var_94] +
jnb loc_100A5F8  +
lea edi __ImageBase[ecx+esi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100A5E3  +
dec ecx  +
jz loc_100A5DE  +
dec ecx  +
jnz loc_100A5E9  +
mov edx [ebp+var_48] +
jmp loc_100A5E9  +
mov edx [ebp+var_30] +
jmp loc_100A5E9  +
mov edx [ebp+var_48] +
sub edx [ebp+var_30] +
dec eax  +
dec eax  +
jnz loc_100A5EF  +
add [edi] edx +
inc ebx  +
cmp ebx ds:dword_100EB28 +
jb loc_100A59F  +
mov eax ds:dword_1004CB8 +
mov eax 8DFCF4ABh +
mov eax [ebp+var_2C] +
jmp loc_100AF20  +
mov esi [ebp+var_68] +
cmp esi ebx +
jb loc_100AE91  +
mov eax ds:dword_100003C +
mov eax ds:dword_1000050[eax] +
add eax ebx +
cmp [ebp+var_68] eax +
jnb loc_100AE91  +
mov esi [ebp+var_68] +
mov ecx ds:dword_101C364 +
and [ebp+var_2C] 0 +
sub esi ebx +
dec ecx  +
js loc_100A66E  +
mov eax [ebp+var_2C] +
add eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
lea edx dword_1005778[eax*8] +
mov [ebp+var_6C] edx +
mov edx [edx+4] +
and edx edi +
cmp esi edx +
jnb loc_100A65F  +
lea ecx [eax-1] +
jmp loc_100A669  +
jbe loc_100A771  +
inc eax  +
mov [ebp+var_2C] eax +
cmp ecx [ebp+var_2C] +
jge loc_100A63D  +
xor eax eax +
test eax eax +
jz loc_100AE91  +
mov ecx [eax] +
shr ecx 1 +
and ecx 7 +
lea ecx [ecx+eax+8] +
mov eax [eax+4] +
mov [ebp+var_3C] ecx +
and eax edi +
lea edx [eax+ecx] +
sub [ebp+var_3C] ebx +
mov [ebp+var_68] ecx +
mov ecx ds:dword_1004CB8 +
mov [ebp+var_2C] eax +
mov [ebp+var_6C] edx +
sub ecx eax +
inc ecx  +
xor eax eax +
test ecx ecx +
mov edx ecx +
jz loc_100A6D2  +
mov esi dword_104D00C +
imul esi esi +
add esi 269EC3h +
mov dword_104D00C esi +
shr esi 10h +
shl eax 10h +
shr edx 10h +
or eax esi +
test edx edx +
jnz loc_100A6AB  +
xor edx edx +
div  ecx +
push [ebp+var_2C]  +
mov eax [ebp+var_24] +
add eax edx +
push [ebp+var_3C]  +
mov [ebp+var_74] eax +
mov eax 0E9A1234Ah +
mov eax [ebp+var_6C] +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
lea esi [ebp+var_9C] +
mov [ebp+var_9C] ecx +
mov [ebp+var_98] eax +
mov [ebp+var_1D] 0 +
mov eax 0D1ED05Fh +
mov eax ebx +
mov ecx [ebp+var_9C] +
mov esi [ebp+var_98] +
mov edx ds:off_1005164 +
and [ebp+var_64] 0 +
and [ebp+var_60] 0 +
and ecx edi +
and esi edi +
add ecx ebx +
sub eax edx +
mov [ebp+var_30] eax +
jnz loc_100A78A  +
xor edi edi +
test esi esi +
jbe loc_100A959  +
mov ebx 74A3CF2Eh +
movzx eax byte ptr [edi+ecx] +
add eax ebx +
add [ebp+var_64] eax +
mov edx ebx +
add eax [ebp+var_60] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp+var_64] eax +
inc edi  +
cmp edi esi +
mov [ebp+var_60] eax +
jb loc_100A746  +
jmp loc_100A959  +
mov eax [ebp+var_6C] +
mov ecx [eax+4] +
and ecx edi +
mov eax [eax] +
and eax 3Fh +
lea eax __ImageBase[ecx+eax] +
jmp loc_100A670  +
mov edi ds:dword_100003C +
lea edi dword_10000A0[edi] +
lea eax [ecx+esi] +
mov [ebp+var_40] eax +
mov edx ecx +
mov eax [edi] +
mov edi [edi+4] +
add eax ebx +
sub edx ebx +
mov ebx edx +
and ebx 0FFFFF000h +
mov [ebp+var_24] ebx +
mov ebx edx +
sub ebx [ebp+var_24] +
add edx esi +
mov esi edx +
and esi 0FFFFF000h +
mov [ebp+var_88] esi +
sub edx esi +
mov [ebp+var_84] edx +
add edi eax +
mov esi eax +
mov [ebp+var_80] edi +
cmp eax edi +
jz loc_100A7E9  +
mov eax [ebp+var_24] +
cmp [esi] eax +
jnb loc_100A7E9  +
add esi [esi+4] +
cmp esi [ebp+var_80] +
jnz loc_100A7DA  +
mov edx 0FFFh +
and [ebp+var_78] 0 +
cmp esi [ebp+var_80] +
jz loc_100A826  +
mov eax [ebp+var_24] +
cmp [esi] eax +
jnz loc_100A826  +
mov eax [esi+4] +
sub eax 8 +
shr eax 1 +
jz loc_100A826  +
lea edi [esi+8] +
mov [ebp+var_24] edi +
mov edi [ebp+var_24] +
movzx edi word ptr [edi] +
and edi edx +
cmp edi ebx +
jnb loc_100A826  +
inc [ebp+var_78]  +
add [ebp+var_24] 2 +
cmp [ebp+var_78] eax +
jnz loc_100A80E  +
mov ebx 74A3CF2Eh +
cmp esi [ebp+var_80] +
jz loc_100A92A  +
mov eax [esi] +
cmp eax [ebp+var_88] +
ja loc_100A92A  +
mov edi [ebp+var_78] +
mov eax [esi+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp edi eax +
jnz loc_100A86F  +
add esi [esi+4] +
cmp esi [ebp+var_80] +
jz loc_100A92A  +
mov eax [ebp+var_88] +
cmp [esi] eax +
ja loc_100A92A  +
xor edi edi +
jmp loc_100A845  +
mov eax [ebp+var_88] +
cmp [esi] eax +
jnz loc_100A88C  +
movzx eax word ptr [esi+edi*2+8] +
and eax edx +
cmp eax [ebp+var_84] +
jnb loc_100A92A  +
mov eax edi +
inc edi  +
mov [ebp+var_78] edi +
mov edi 0F000h +
test [esi+eax*2+8] di +
jz loc_100A82B  +
movzx eax word ptr [esi+eax*2+8] +
and eax edx +
mov edx [esi] +
lea eax __ImageBase[eax+edx] +
xor edi edi +
mov [ebp+var_24] eax +
sub [ebp+var_24] ecx +
mov [ebp+var_48] eax +
jz loc_100A8E2  +
movzx eax byte ptr [edi+ecx] +
mov edx ebx +
add eax ebx +
add [ebp+var_64] eax +
add eax [ebp+var_60] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp+var_64] eax +
inc edi  +
mov [ebp+var_60] eax +
cmp edi [ebp+var_24] +
jb loc_100A8BB  +
mov ecx [ebp+var_48] +
mov eax [ecx] +
sub eax [ebp+var_30] +
xor edi edi +
mov [ebp+var_90] eax +
mov edx ebx +
movzx eax byte ptr [ebp+edi+var_90] +
add eax ebx +
add [ebp+var_64] eax +
add eax [ebp+var_60] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp+var_64] eax +
inc edi  +
mov [ebp+var_60] eax +
cmp edi 4 +
jb loc_100A8F2  +
mov edx 0FFFh +
add ecx 4 +
jmp loc_100A82B  +
mov edi [ebp+var_40] +
xor esi esi +
sub edi ecx +
jz loc_100A959  +
mov edx ebx +
movzx eax byte ptr [ecx+esi] +
add eax ebx +
add [ebp+var_64] eax +
add eax [ebp+var_60] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp+var_64] eax +
mov [ebp+var_60] eax +
inc esi  +
cmp esi edi +
jb loc_100A933  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl byte ptr [ebp+ecx+var_64] +
mov byte ptr [ebp+eax+var_14] cl +
inc eax  +
cmp eax 8 +
jb loc_100A95D  +
mov eax 60A00FEFh +
mov edx [ebp+var_2C] +
mov eax [ebp+var_74] +
mov esi [ebp+var_68] +
mov [ebp+var_38] eax +
mov eax [ebp+var_3C] +
and edx 7 +
mov [ebp+var_30] edx +
jz loc_100AB39  +
cmp edx edi +
not eax  +
mov [ebp+var_24] edi +
mov [ebp+var_40] edi +
mov [ebp+var_28] edi +
jle loc_100A9C8  +
push 38h  +
pop edi  +
movzx ebx byte ptr [esi] +
cmp [ebp+var_28] 4 +
jge loc_100A9B5  +
lea ecx [edi-20h] +
shl ebx cl +
or [ebp+var_40] ebx +
jmp loc_100A9BC  +
mov ecx edi +
shl ebx cl +
or [ebp+var_24] ebx +
inc esi  +
inc [ebp+var_28]  +
sub edi 8 +
cmp [ebp+var_28] edx +
jl loc_100A9A2  +
movzx ebx word ptr [ebp+var_10] +
mov ecx [ebp+var_10] +
mov edx eax +
xor edx [ebp+var_14] +
sub ecx edx +
xor ecx [ebp+var_3C] +
mov edi ecx +
movzx edx word ptr [ebp+var_10+2] +
sub edi edx +
sub edi [ebp+var_14] +
xor eax edi +
mov [ebp+var_34] ebx +
movzx edi word ptr [ebp+var_14] +
mov [ebp+var_48] edi +
xor edi eax +
imul edi ebx +
mov [ebp+var_28] eax +
shr eax 3 +
add edi eax +
xor ecx edi +
mov ebx ecx +
mov eax edx +
movzx edi word ptr [ebp+var_14+2] +
xor eax ecx +
mov [ebp+var_58] edi +
rol eax 3 +
imul edi eax +
ror ebx 0Eh +
xor ebx edi +
xor [ebp+var_28] ebx +
mov eax [ebp+var_28] +
mov ebx [ebp+var_48] +
mov edi [ebp+var_28] +
sub eax [ebp+var_10] +
ror eax 4 +
imul ebx eax +
mov eax [ebp+var_14] +
rol edi 7 +
add edi ebx +
mov ebx edx +
xor ecx edi +
sub eax ecx +
mov edi ecx +
rol eax 6 +
imul ebx eax +
ror edi 6 +
add edi ebx +
xor [ebp+var_28] edi +
mov edi [ebp+var_28] +
mov ebx [ebp+var_34] +
mov eax [ebp+var_28] +
sub eax [ebp+var_14] +
rol eax 0Fh +
imul ebx eax +
rol edi 0Ch +
xor edi ebx +
xor ecx edi +
mov edi [ebp+var_34] +
mov eax ecx +
xor edi ecx +
imul edi [ebp+var_58] +
ror eax 4 +
sub edi eax +
xor [ebp+var_28] edi +
mov eax [ebp+var_28] +
xor eax ecx +
xor eax [ebp+var_10] +
xor eax [ebp+var_14] +
mov edi eax +
sub edi edx +
xor edi [ebp+var_28] +
xor edi [ebp+var_14] +
mov ecx edi +
mov ebx edi +
sub ecx edx +
imul ecx [ebp+var_34] +
shr ebx 3 +
sub ecx ebx +
xor eax ecx +
mov ecx [ebp+var_58] +
xor edx eax +
rol edx 1 +
mov ebx eax +
imul ecx edx +
mov edx [ebp+var_10] +
and [ebp+var_28] 0 +
ror ebx 0Eh +
sub ecx ebx +
xor edi ecx +
sub edx edi +
mov ebx edi +
mov ecx [ebp+var_48] +
ror edx 4 +
imul ecx edx +
xor edi [ebp+var_24] +
ror ebx 0Dh +
sub ecx ebx +
xor ecx [ebp+var_40] +
mov ebx [ebp+var_30] +
xor eax ecx +
mov ecx edi +
test ebx ebx +
mov [ebp+var_44] eax +
jle loc_100AB0F  +
cmp [ebp+var_28] 4 +
jge loc_100AAF6  +
rol [ebp+var_44] 8 +
mov ebx [ebp+var_38] +
mov dl byte ptr [ebp+var_44] +
inc [ebp+var_38]  +
xor [ebp+var_1D] dl +
mov [ebx] dl +
jmp loc_100AB04  +
mov edx [ebp+var_38] +
inc [ebp+var_38]  +
rol ecx 8 +
xor [ebp+var_1D] cl +
mov [edx] cl +
inc [ebp+var_28]  +
mov ebx [ebp+var_30] +
cmp [ebp+var_28] ebx +
jl loc_100AADC  +
add ebx 0FFFFFFFCh +
test ebx ebx +
jle loc_100AB26  +
push 4  +
pop ecx  +
sub ecx ebx +
shl ecx 3 +
shr edi cl +
shl edi cl +
mov edx edi +
jmp loc_100AB45  +
xor edx edx +
test ebx ebx +
jge loc_100AB45  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_100AB45  +
mov [ebp+var_40] eax +
not eax  +
xor edx edx +
mov [ebp+var_24] eax +
xor eax eax +
mov ecx [ebp+var_2C] +
shr ecx 3 +
test ecx ecx +
jbe loc_100AD11  +
movzx edi word ptr [ebp+var_10+2] +
mov [ebp+var_34] edi +
movzx edi word ptr [ebp+var_14+2] +
mov [ebp+var_58] edi +
mov [ebp+var_48] ecx +
movzx edi byte ptr [esi+1] +
movzx ebx byte ptr [esi+5] +
movzx ecx byte ptr [esi] +
shl ecx 8 +
or edi ecx +
movzx ecx byte ptr [esi+2] +
shl edi 8 +
or edi ecx +
movzx ecx byte ptr [esi+3] +
shl edi 8 +
or edi ecx +
movzx ecx byte ptr [esi+4] +
shl ecx 8 +
or ecx ebx +
shl ecx 8 +
movzx ebx byte ptr [esi+6] +
or ecx ebx +
shl ecx 8 +
movzx ebx byte ptr [esi+7] +
or ecx ebx +
xor edx ecx +
mov ebx [ebp+var_10] +
mov [ebp+var_30] ecx +
mov ecx edx +
xor ecx [ebp+var_14] +
sub ebx ecx +
xor ebx edi +
mov [ebp+var_44] edi +
xor eax ebx +
mov ebx [ebp+var_58] +
mov ecx eax +
sub ecx [ebp+var_34] +
sub ecx [ebp+var_14] +
add esi 8 +
xor edx ecx +
movzx ecx word ptr [ebp+var_14] +
mov edi ecx +
movzx ecx word ptr [ebp+var_10] +
xor edi edx +
imul edi ecx +
mov ecx edx +
shr ecx 3 +
add edi ecx +
xor eax edi +
mov edi eax +
mov ecx [ebp+var_34] +
xor ecx eax +
rol ecx 3 +
imul ebx ecx +
ror edi 0Eh +
xor edi ebx +
xor edx edi +
mov ebx edx +
movzx edi word ptr [ebp+var_14] +
mov ecx edx +
sub ecx [ebp+var_10] +
ror ecx 4 +
imul edi ecx +
mov ecx [ebp+var_14] +
rol ebx 7 +
add ebx edi +
xor eax ebx +
sub ecx eax +
mov edi eax +
mov ebx [ebp+var_34] +
rol ecx 6 +
imul ebx ecx +
ror edi 6 +
add edi ebx +
xor edx edi +
movzx edi word ptr [ebp+var_10] +
mov ebx edx +
mov ecx edx +
sub ecx [ebp+var_14] +
rol ecx 0Fh +
imul edi ecx +
rol ebx 0Ch +
xor ebx edi +
xor eax ebx +
mov ebx [ebp+var_58] +
mov edi eax +
ror edi 4 +
movzx ecx word ptr [ebp+var_10] +
xor ecx eax +
imul ecx [ebp+var_58] +
sub ecx edi +
xor edx ecx +
mov ecx edx +
xor ecx eax +
xor ecx [ebp+var_10] +
xor ecx [ebp+var_14] +
mov eax ecx +
sub ecx [ebp+var_34] +
xor ecx edx +
xor ecx [ebp+var_14] +
mov edx ecx +
movzx ecx word ptr [ebp+var_10] +
mov edi edx +
sub edi [ebp+var_34] +
imul edi ecx +
mov ecx edx +
shr ecx 3 +
sub edi ecx +
mov ecx [ebp+var_34] +
xor eax edi +
mov edi eax +
xor ecx eax +
rol ecx 1 +
imul ebx ecx +
ror edi 0Eh +
sub ebx edi +
mov ecx [ebp+var_10] +
xor edx ebx +
movzx edi word ptr [ebp+var_14] +
mov ebx edx +
sub ecx edx +
ror ecx 4 +
imul edi ecx +
xor edx [ebp+var_24] +
mov cl [ebp+var_1D] +
ror ebx 0Dh +
sub edi ebx +
xor edi [ebp+var_40] +
xor eax edi +
xor cl al +
xor cl dl +
mov edi [ebp+var_38] +
mov [edi+3] al +
ror eax 8 +
xor cl al +
mov [edi+7] dl +
mov [edi+2] al +
ror edx 8 +
mov [edi+6] dl +
xor cl dl +
ror eax 8 +
xor cl al +
ror edx 8 +
mov [edi+1] al +
xor cl dl +
ror eax 8 +
mov [edi+5] dl +
ror edx 8 +
mov bl dl +
xor bl al +
xor cl bl +
mov [ebp+var_1D] cl +
mov ecx [ebp+var_44] +
mov [edi] al +
mov [edi+4] dl +
add edi 8 +
mov [ebp+var_40] ecx +
mov ecx [ebp+var_30] +
dec [ebp+var_48]  +
ror eax 8 +
mov [ebp+var_24] ecx +
ror edx 8 +
mov [ebp+var_38] edi +
jnz loc_100AB64  +
mov ecx [ebp+var_6C] +
mov al [ebp+var_1D] +
cmp al [ecx+8] +
jz loc_100ADAC  +
call sub_100E99C  +
mov edx [ebp+var_8C] +
mov dword ptr [edx+8] offset sub_1025029 +
mov ebx eax +
mov esi 0FFFFh +
mov [ebp+var_2C] esi +
mov eax 0FFFFF000h +
lea ecx [edx+0Ch] +
and ecx 0FFFFFFFCh +
lea edi [ecx+0FFFh] +
and ebx eax +
and edi eax +
xor eax eax +
mov edx dword_104D00C +
shr [ebp+var_2C] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_104D00C edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp [ebp+var_2C] 0 +
jnz loc_100AD53  +
xor edx edx +
div  esi +
mov eax [ebp+var_70] +
inc edx  +
mov [eax+1Ch] ebx +
cmp ecx edi +
mov [eax] edx +
mov eax ecx +
mov [ebp+var_70] 0 +
jnb loc_100A524  +
mov ecx [ebp+var_70] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_100AD9B  +
jmp loc_100A524  +
mov eax [ebp+var_68] +
mov edx ds:off_1005164 +
sub eax [ebp+var_74] +
mov ecx offset __ImageBase +
sub ecx edx +
mov [ebp+var_8C] eax +
mov [ebp+var_70] ecx +
jnz loc_100ADD2  +
test eax eax +
jz loc_100AE7F  +
mov esi [ebp+var_74] +
mov eax [ebp+var_2C] +
sub esi [ebp+var_68] +
mov ecx ds:dword_100EB28 +
mov ebx [ebp+var_3C] +
add eax ebx +
xor edi edi +
dec ecx  +
mov [ebp+var_90] eax +
js loc_100AE18  +
lea eax [ecx+edi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp ebx edx +
jnb loc_100AE0F  +
lea ecx [eax-1] +
jmp loc_100AE14  +
jbe loc_100AE1C  +
lea edi [eax+1] +
cmp ecx edi +
jge loc_100ADF1  +
mov ebx edi +
jmp loc_100AE77  +
mov ebx eax +
jmp loc_100AE77  +
mov eax ds:dword_100EB2C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp+var_90] +
jnb loc_100AE7F  +
lea edi __ImageBase[ecx+esi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100AE67  +
dec ecx  +
jz loc_100AE5F  +
dec ecx  +
jnz loc_100AE70  +
mov edx [ebp+var_70] +
jmp loc_100AE70  +
mov edx [ebp+var_8C] +
jmp loc_100AE70  +
mov edx [ebp+var_70] +
sub edx [ebp+var_8C] +
dec eax  +
dec eax  +
jnz loc_100AE76  +
add [edi] edx +
inc ebx  +
cmp ebx ds:dword_100EB28 +
jb loc_100AE20  +
mov eax ds:dword_1004CB8 +
mov eax 0DDCC7158h +
mov eax [ebp+var_74] +
jmp loc_100AF20  +
mov eax 0D6856D9Ch +
mov edi [ebp+var_24] +
mov esi offset Address +
cmp edi esi +
jb loc_100AED9  +
mov eax ds:dword_100DDCC +
mov ecx ds:dword_1004CB8 +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_100AED9  +
mov eax edi +
sub eax esi +
xor edx edx +
mov ecx ds:dword_1004CB8 +
div  ecx +
mov ecx ds:dword_1004CB8 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_100AEDB  +
xor ecx ecx +
test ecx ecx +
jz loc_100AF00  +
mov ecx ds:dword_1004CB8 +
mov eax edi +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_100DDCC +
mov dword_104D078[eax*4] 0C4A6h +
jmp loc_100AF1D  +
call ds:__imp_GetLastError  +
mov esi eax +
push 8000h  +
push 0  +
push edi  +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp+var_68] +
mov ecx [ebp+var_8] +
xor ecx ebp +
pop edi  +
pop esi  +
pop ebx  +
call sub_1028111  +
leave   +
retn 0Ch  +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-20h] eax +
mov [ebp-18h] ecx +
mov [ebp-10h] edx +
mov [ebp-14h] ebx +
mov [ebp-24h] esi +
lea esi [ebp+4] +
mov [ebp-1Ch] edi +
mov edi offset Address +
mov eax [esi+4] +
mov ecx [esi+8] +
mov [ebp-0Ch] ecx +
sub esi 4 +
movzx ecx byte ptr [eax] +
and ecx 0Fh +
mov [ebp-8] ecx +
lea ecx [eax+1] +
lea eax [ecx-1] +
cmp eax edi +
mov [ebp-4] eax +
jb loc_100AFAD  +
mov ebx ds:dword_1004CB8 +
mov edx ds:dword_100DDCC +
imul edx ebx +
lea edx Address[edx] +
cmp eax edx +
jnb loc_100AFAD  +
mov ebx ds:dword_1004CB8 +
sub eax edi +
xor edx edx +
div  ebx +
mov edx ds:dword_1004CB8 +
imul edx eax +
lea ebx Address[edx] +
mov eax [ebp-4] +
jmp loc_100AFAF  +
xor ebx ebx +
test ebx ebx +
jnz loc_100AFBA  +
and eax 0FFFF0000h +
mov ebx eax +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_100AFC5  +
xor eax eax +
push 40h  +
pop ecx  +
add eax ebx +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100AFCA  +
mov eax 8A11CDFCh +
cmp ebx edi +
jb loc_100B011  +
mov eax ds:dword_100DDCC +
mov ecx ds:dword_1004CB8 +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_100B011  +
mov ecx ds:dword_1004CB8 +
mov eax ebx +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_1004CB8 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_100B013  +
xor ecx ecx +
test ecx ecx +
jz loc_100B038  +
mov ecx ds:dword_1004CB8 +
mov eax ebx +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_100DDCC +
mov dword_104D078[eax*4] 0C4A6h +
jmp loc_100B055  +
call ds:__imp_GetLastError  +
mov edi eax +
push 8000h  +
push 0  +
push ebx  +
call ds:VirtualFree  +
push edi  +
call ds:SetLastError  +
mov eax [ebp-8] +
mov eax ds:off_101C3D0[eax*4] +
mov [esi+8] eax +
mov eax [ebp-0Ch] +
mov [esi+0Ch] eax +
mov esi [ebp-24h] +
mov edx [ebp-10h] +
mov edi [ebp-1Ch] +
mov ecx [ebp-18h] +
mov eax [ebp-20h] +
mov ebx [ebp-14h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-8] edx +
mov [ebp-1Ch] ebx +
lea ebx [ebp+4] +
mov [ebp-0Ch] esi +
mov [ebp-20h] edi +
sub ebx 4 +
mov [ebp-14h] ebx +
mov eax [ebx] +
mov [ebp-18h] eax +
mov eax [ebx+8] +
test byte ptr [eax+24h] 1 +
jz loc_100B0F1  +
xor esi esi +
cmp [eax+10h] esi +
jz loc_100B0CA  +
mov ecx [eax+14h] +
mov edx ds:dword_101C790[ecx*4] +
mov edi [eax+4] +
imul edx [ebp+edi*4-24h] +
jmp loc_100B0CC  +
xor edx edx +
cmp [eax+18h] esi +
jz loc_100B0D8  +
mov ecx [eax+1Ch] +
mov esi [ebp+ecx*4-24h] +
mov edi [eax+20h] +
mov ecx [eax+8] +
neg ecx  +
sbb ecx ecx +
and ecx offset __ImageBase +
add edi ecx +
add edi esi +
mov ecx [edi+edx] +
jmp loc_100B0F8  +
mov ecx [eax+1Ch] +
mov ecx [ebp+ecx*4-24h] +
mov [ebp-4] ecx +
mov edx offset Address +
lea esi [eax+28h] +
lea edi [esi-1] +
cmp edi edx +
jb loc_100B141  +
mov eax ds:dword_100DDCC +
mov ecx ds:dword_1004CB8 +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_100B141  +
mov ecx ds:dword_1004CB8 +
mov eax edi +
sub eax edx +
xor edx edx +
div  ecx +
mov edx ds:dword_1004CB8 +
imul edx eax +
lea eax Address[edx] +
jmp loc_100B143  +
xor eax eax +
test eax eax +
jnz loc_100B14F  +
and edi 0FFFF0000h +
mov eax edi +
sub esi eax +
lea edx [esi-40h] +
test edx edx +
jge loc_100B15A  +
xor edx edx +
push 40h  +
add edx eax +
pop ecx  +
mov byte ptr [edx] 0 +
inc edx  +
dec ecx  +
jnz loc_100B15F  +
mov ecx [ebp-4] +
push eax  +
lea eax [ebp-24h] +
push eax  +
push ebx  +
call sub_1009D56  +
mov [ebx+8] eax +
mov esi [ebp-0Ch] +
mov edi [ebp-20h] +
mov eax [ebp-10h] +
mov ebx [ebp-1Ch] +
mov edx [ebp-8] +
mov ecx [ebp-24h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 18h +
mov [ebp-14h] eax +
mov [ebp-0Ch] ecx +
mov [ebp-4] edx +
lea edx [ebp+4] +
mov [ebp-8] ebx +
mov [ebp-18h] esi +
mov [ebp-10h] edi +
mov esi [edx+4] +
mov eax [edx] +
sub edx 4 +
mov ecx [esi+0Ch] +
and ecx 1Fh +
cmp ecx 2 +
jnz loc_100B1FC  +
test al 1 +
jnz loc_100B3F3  +
test al 4 +
jz loc_100B3F3  +
add dword ptr [edx+8] 10h +
mov eax [esi+8] +
lea ecx [ebp-18h] +
and eax 0FFFFFFFh +
push ecx  +
push edx  +
add eax offset __ImageBase +
call eax  +
mov esi [ebp-18h] +
mov edi [ebp-10h] +
mov eax [ebp-14h] +
mov edx [ebp-4] +
mov ecx [ebp-0Ch] +
mov ebx [ebp-8] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
cmp ecx 16h +
jnz loc_100B20D  +
not eax  +
and eax 1 +
mov ecx eax +
jmp loc_100B3EB  +
cmp ecx 0Bh +
jnz loc_100B223  +
test al al +
js loc_100B1CD  +
test eax 800h +
jnz loc_100B3F3  +
jmp loc_100B1CD  +
***
cmp ecx 9 +
jnz loc_100B23A  +
test al 1 +
jnz loc_100B3F3  +
test eax 800h +
jmp loc_100B3ED  +
test ecx ecx +
jnz loc_100B243  +
shr eax 0Ah +
jmp loc_100B201  +
***
cmp ecx 6 +
jnz loc_100B256  +
and al 80h +
xor ecx ecx +
cmp al 80h +
setz cl  +
jmp loc_100B3EB  +
cmp ecx 11h +
jnz loc_100B278  +
test al 40h +
jnz loc_100B1CD  +
mov ecx eax +
shr ecx 2 +
xor ecx eax +
test cl 1 +
jz loc_100B3F3  +
jmp loc_100B1CD  +
***
cmp ecx 5 +
jnz loc_100B288  +
xor ebx ebx +
inc ebx  +
and al bl +
xor ecx ecx +
cmp al bl +
jmp loc_100B24E  +
***
cmp ecx 3 +
jnz loc_100B29C  +
test al 1 +
jnz loc_100B3F3  +
test al 40h +
jmp loc_100B3ED  +
cmp ecx 8 +
jnz loc_100B2A8  +
xor ecx ecx +
cmp [ebp-0Ch] ecx +
jmp loc_100B24E  +
***
cmp ecx 14h +
jnz loc_100B2BF  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
and ecx 1 +
jmp loc_100B3EB  +
cmp ecx 0Ah +
jnz loc_100B2CC  +
shr eax 0Bh +
jmp loc_100B201  +
***
cmp ecx 19h +
jnz loc_100B2DC  +
and al 40h +
xor ecx ecx +
cmp al 40h +
jmp loc_100B24E  +
***
cmp ecx 12h +
jnz loc_100B2FD  +
test al 40h +
jnz loc_100B3F3  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_100B1CD  +
jmp loc_100B3F3  +
cmp ecx 7 +
jnz loc_100B30A  +
shr eax 4 +
jmp loc_100B203  +
***
cmp ecx 4 +
jnz loc_100B317  +
shr eax 6 +
jmp loc_100B201  +
***
cmp ecx 17h +
jnz loc_100B327  +
and al 4 +
xor ecx ecx +
cmp al 4 +
jmp loc_100B24E  +
***
cmp ecx 0Fh +
jnz loc_100B348  +
test al 40h +
jnz loc_100B1CD  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_100B3F3  +
jmp loc_100B1CD  +
***
xor ebx ebx +
inc ebx  +
cmp ecx ebx +
jnz loc_100B366  +
test al 4 +
jz loc_100B3F3  +
mov ecx eax +
shr ecx 5 +
xor ecx eax +
test cl 40h +
jmp loc_100B3ED  +
cmp ecx 13h +
jnz loc_100B37E  +
mov ecx 800h +
and eax ecx +
sub eax ecx +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_100B206  +
***
cmp ecx 18h +
jz loc_100B2D1  +
cmp ecx 1Ah +
jnz loc_100B398  +
shr eax 2 +
not eax  +
and eax ebx +
jmp loc_100B206  +
***
cmp ecx 0Ch +
jnz loc_100B3AC  +
test al bl +
jnz loc_100B1CD  +
test al 40h +
jmp loc_100B26D  +
***
cmp ecx 0Dh +
jnz loc_100B3C1  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
not ecx  +
and ecx ebx +
jmp loc_100B3EB  +
cmp ecx 15h +
jnz loc_100B3D5  +
test al 40h +
jz loc_100B1CD  +
test al 4 +
jmp loc_100B26D  +
***
cmp ecx 10h +
jnz loc_100B3DF  +
shr eax 7 +
jmp loc_100B38F  +
***
cmp ecx 0Eh +
jnz loc_100B3E9  +
shr eax 6 +
jmp loc_100B38F  +
***
xor ecx ecx +
test ecx ecx +
jz loc_100B1CD  +
mov eax [esi] +
shr eax 1 +
and eax 3Fh +
add [edx+8] eax +
mov eax [esi+4] +
jmp loc_100B1D4  +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 18h +
mov [ebp-14h] eax +
mov [ebp-0Ch] ecx +
mov [ebp-4] edx +
mov [ebp-8] ebx +
lea edx [ebp+4] +
mov [ebp-18h] esi +
mov [ebp-10h] edi +
mov eax [edx] +
mov esi [edx+4] +
sub edx 4 +
mov edi [esi] +
mov ecx edi +
shr ecx 7 +
and ecx 1Fh +
cmp ecx 0Eh +
jnz loc_100B44C  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
not ecx  +
and ecx 1 +
jmp loc_100B648  +
xor ebx ebx +
inc ebx  +
cmp ecx ebx +
jnz loc_100B461  +
shr eax 0Ah +
not eax  +
and eax ebx +
mov ecx eax +
jmp loc_100B648  +
cmp ecx 11h +
jnz loc_100B474  +
and al 40h +
xor ecx ecx +
cmp al 40h +
setz cl  +
jmp loc_100B648  +
cmp ecx 8 +
jnz loc_100B47E  +
shr eax 0Bh +
jmp loc_100B456  +
***
cmp ecx 0Ah +
jnz loc_100B493  +
mov ecx 800h +
and eax ecx +
sub eax ecx +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_100B45A  +
***
cmp ecx 9 +
jnz loc_100B4D3  +
test al 40h +
jz loc_100B4A4  +
test al 4 +
jz loc_100B650  +
add dword ptr [edx+8] 0Ch +
mov eax [esi+8] +
lea ecx [ebp-18h] +
and eax 0FFFFFFFh +
push ecx  +
add eax offset __ImageBase +
push edx  +
call eax  +
mov esi [ebp-18h] +
mov ebx [ebp-8] +
mov ecx [ebp-0Ch] +
mov edi [ebp-10h] +
mov eax [ebp-14h] +
mov edx [ebp-4] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
cmp ecx 3 +
jnz loc_100B4DF  +
xor ecx ecx +
cmp [ebp-0Ch] ecx +
jmp loc_100B46C  +
***
cmp ecx 17h +
jz loc_100B466  +
test ecx ecx +
jnz loc_100B4F1  +
and al 80h +
cmp al 80h +
jmp loc_100B46C  +
***
cmp ecx 19h +
jnz loc_100B501  +
and al bl +
xor ecx ecx +
cmp al bl +
jmp loc_100B46C  +
***
cmp ecx 18h +
jnz loc_100B518  +
test al bl +
jnz loc_100B650  +
test eax 800h +
jmp loc_100B64A  +
cmp ecx 1Ah +
jnz loc_100B525  +
shr eax 2 +
jmp loc_100B456  +
***
cmp ecx 0Bh +
jnz loc_100B541  +
test al 4 +
jz loc_100B650  +
mov ecx eax +
shr ecx 5 +
xor ecx eax +
test cl 40h +
jmp loc_100B64A  +
cmp ecx 13h +
jnz loc_100B54E  +
shr eax 6 +
jmp loc_100B456  +
***
cmp ecx 5 +
jnz loc_100B568  +
test al bl +
jnz loc_100B650  +
test al 4 +
jnz loc_100B4A4  +
jmp loc_100B650  +
cmp ecx 15h +
jz loc_100B456  +
cmp ecx 14h +
jnz loc_100B585  +
test al bl +
jnz loc_100B650  +
test al 40h +
jmp loc_100B64A  +
cmp ecx 16h +
jz loc_100B546  +
cmp ecx 0Fh +
jnz loc_100B59E  +
test al bl +
jnz loc_100B4A4  +
test al 40h +
jmp loc_100B49E  +
***
cmp ecx 0Ch +
jnz loc_100B5AB  +
shr eax 7 +
jmp loc_100B456  +
***
cmp ecx 7 +
jnz loc_100B5BB  +
and al 4 +
xor ecx ecx +
cmp al 4 +
jmp loc_100B46C  +
***
cmp ecx 4 +
jnz loc_100B5CE  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
and ecx ebx +
jmp loc_100B648  +
cmp ecx 6 +
jnz loc_100B5DB  +
shr eax 4 +
jmp loc_100B458  +
***
cmp ecx 12h +
jnz loc_100B5F4  +
test al al +
js loc_100B4A4  +
test eax 800h +
jnz loc_100B650  +
jmp loc_100B4A4  +
***
cmp ecx 0Dh +
jnz loc_100B611  +
test al 40h +
jnz loc_100B4A4  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_100B650  +
jmp loc_100B4A4  +
***
cmp ecx 10h +
jnz loc_100B62C  +
test al 40h +
jnz loc_100B4A4  +
mov ecx eax +
shr ecx 2 +
xor ecx eax +
test cl bl +
jmp loc_100B49E  +
***
cmp ecx 2 +
jnz loc_100B646  +
test al 40h +
jnz loc_100B650  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_100B4A4  +
jmp loc_100B650  +
xor ecx ecx +
test ecx ecx +
jz loc_100B4A4  +
shr edi 1 +
and edi 3Fh +
add [edx+8] edi +
mov eax [esi+4] +
jmp loc_100B4AB  +
***
push edi  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 94h +
mov [ebp-90h] eax +
lea eax [ebp+4] +
mov [ebp-88h] ecx +
mov [ebp-80h] edx +
sub eax 4 +
mov [ebp-84h] ebx +
mov ebx 0FFFFFFFh +
mov [ebp-94h] esi +
mov [ebp-8Ch] edi +
mov [ebp-58h] eax +
mov edi offset __ImageBase +
add eax 0Ch +
mov [ebp-54h] eax +
mov eax [eax] +
mov edx [eax] +
mov esi [eax+4] +
mov ecx [eax+8] +
and ecx ebx +
and edx ebx +
mov [ebp-78h] ecx +
lea ecx [eax+0Ch] +
add edx edi +
and esi ebx +
mov [ebp-50h] edx +
mov [ebp-4Ch] esi +
lea eax [ecx-1] +
mov [ebp-24h] eax +
cmp eax offset Address +
jb loc_100B717  +
mov eax ds:dword_100DDCC +
mov esi ds:dword_1004CB8 +
imul eax esi +
lea esi Address[eax] +
mov eax [ebp-24h] +
cmp eax esi +
jnb loc_100B714  +
xor edx edx +
mov esi ds:dword_1004CB8 +
sub eax offset Address +
div  esi +
mov edx ds:dword_1004CB8 +
mov esi [ebp-4Ch] +
imul edx eax +
lea eax Address[edx] +
mov edx [ebp-50h] +
mov [ebp-14h] eax +
jmp loc_100B71B  +
mov esi [ebp-4Ch] +
and dword ptr [ebp-14h] 0 +
cmp dword ptr [ebp-14h] 0 +
jnz loc_100B72C  +
mov eax [ebp-24h] +
and eax 0FFFF0000h +
mov [ebp-14h] eax +
sub ecx [ebp-14h] +
lea eax [ecx-40h] +
test eax eax +
jge loc_100B738  +
xor eax eax +
mov ecx [ebp-14h] +
mov dword ptr [ebp-24h] 40h +
add eax ecx +
mov byte ptr [eax] 0 +
inc eax  +
dec dword ptr [ebp-24h]  +
jnz loc_100B744  +
lea eax [esi+edx] +
mov [ebp-44h] eax +
mov eax ds:dword_1004CB8 +
mov [ebp-30h] edx +
sub eax esi +
sub [ebp-30h] edi +
lea ecx [eax+1] +
xor eax eax +
mov [ebp-40h] ecx +
test ecx ecx +
jz loc_100B796  +
mov edx dword_104D00C +
shr dword ptr [ebp-40h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_104D00C edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-40h] 0 +
jnz loc_100B76C  +
xor edx edx +
div  ecx +
mov eax [ebp-14h] +
push esi  +
add eax edx +
push dword ptr [ebp-30h]  +
mov [ebp-40h] eax +
mov eax 0AE38942h +
mov eax [ebp-44h] +
lea esi [ebp-74h] +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-74h] ecx +
mov [ebp-70h] eax +
mov byte ptr [ebp-0Dh] 0 +
mov eax 175E4FEEh +
mov ecx [ebp-70h] +
mov eax [ebp-74h] +
mov edx edi +
and eax ebx +
and ecx ebx +
mov ebx ds:off_1005164 +
xor esi esi +
mov [ebp-2Ch] esi +
add eax edi +
sub edx ebx +
mov [ebp-28h] esi +
mov [ebp-38h] edx +
jnz loc_100B82E  +
mov [ebp-18h] esi +
cmp ecx esi +
jbe loc_100BA02  +
mov ebx 6E0A9DA6h +
mov edx [ebp-18h] +
movzx edx byte ptr [edx+eax] +
add edx ebx +
add [ebp-2Ch] edx +
add edx [ebp-28h] +
imul edx edx +
ror edx 9 +
imul edx edx +
ror edx 9 +
add [ebp-2Ch] edx +
inc dword ptr [ebp-18h]  +
mov [ebp-28h] edx +
cmp [ebp-18h] ecx +
jb loc_100B7FA  +
jmp loc_100BA02  +
lea edx [eax+ecx] +
mov esi eax +
sub esi edi +
mov ebx ds:dword_100003C +
mov [ebp-14h] edx +
lea ebx dword_10000A0[ebx] +
mov edx [ebx] +
mov ebx [ebx+4] +
mov [ebp-34h] ebx +
mov ebx esi +
and ebx 0FFFFF000h +
add ecx esi +
mov [ebp-20h] ebx +
mov ebx esi +
mov esi ecx +
sub ebx [ebp-20h] +
and esi 0FFFFF000h +
sub ecx esi +
mov [ebp-68h] ecx +
mov ecx [ebp-34h] +
add edx edi +
mov [ebp-6Ch] esi +
add ecx edx +
mov [ebp-64h] ecx +
jmp loc_100B884  +
mov esi [ebp-20h] +
cmp [edx] esi +
jnb loc_100B888  +
add edx [edx+4] +
cmp edx ecx +
jnz loc_100B87A  +
and dword ptr [ebp-5Ch] 0 +
cmp edx ecx +
jz loc_100B8C3  +
mov ecx [ebp-20h] +
cmp [edx] ecx +
jnz loc_100B8C3  +
mov ecx [edx+4] +
sub ecx 8 +
shr ecx 1 +
jz loc_100B8C3  +
lea esi [edx+8] +
mov [ebp-20h] esi +
mov esi [ebp-20h] +
movzx esi word ptr [esi] +
and esi 0FFFh +
cmp esi ebx +
jnb loc_100B8C3  +
inc dword ptr [ebp-5Ch]  +
add dword ptr [ebp-20h] 2 +
cmp [ebp-5Ch] ecx +
jnz loc_100B8A7  +
mov ebx 6E0A9DA6h +
cmp edx [ebp-64h] +
jz loc_100B9CC  +
mov ecx [edx] +
cmp ecx [ebp-6Ch] +
ja loc_100B9CC  +
mov esi [ebp-5Ch] +
mov ecx [edx+4] +
add ecx 0FFFFFFF8h +
shr ecx 1 +
cmp esi ecx +
jnz loc_100B906  +
add edx [edx+4] +
cmp edx [ebp-64h] +
jz loc_100B9CC  +
mov ecx [ebp-6Ch] +
cmp [edx] ecx +
ja loc_100B9CC  +
xor esi esi +
jmp loc_100B8DF  +
***
mov ecx [ebp-6Ch] +
cmp [edx] ecx +
jnz loc_100B921  +
movzx ecx word ptr [edx+esi*2+8] +
and ecx 0FFFh +
cmp ecx [ebp-68h] +
jnb loc_100B9CC  +
mov ecx esi +
inc esi  +
mov [ebp-5Ch] esi +
mov esi 0F000h +
test [edx+ecx*2+8] si +
jz loc_100B8C8  +
movzx esi word ptr [edx+ecx*2+8] +
mov ecx [edx] +
and esi 0FFFh +
lea esi __ImageBase[esi+ecx] +
xor ecx ecx +
mov [ebp-20h] esi +
sub [ebp-20h] eax +
mov [ebp-18h] esi +
mov [ebp-24h] ecx +
jz loc_100B989  +
movzx esi byte ptr [ecx+eax] +
add esi ebx +
add [ebp-2Ch] esi +
add esi [ebp-28h] +
imul esi esi +
ror esi 9 +
imul esi esi +
ror esi 9 +
mov ecx esi +
add [ebp-2Ch] ecx +
mov ecx [ebp-24h] +
inc ecx  +
mov [ebp-28h] esi +
mov [ebp-24h] ecx +
cmp ecx [ebp-20h] +
jb loc_100B957  +
mov eax [ebp-18h] +
mov eax [eax] +
sub eax [ebp-38h] +
mov [ebp-7Ch] eax +
xor ecx ecx +
movzx eax byte ptr [ebp+ecx-7Ch] +
add eax ebx +
add [ebp-2Ch] eax +
add eax [ebp-28h] +
imul eax eax +
ror eax 9 +
imul eax eax +
ror eax 9 +
add [ebp-2Ch] eax +
inc ecx  +
mov [ebp-28h] eax +
cmp ecx 4 +
jb loc_100B996  +
mov eax [ebp-18h] +
add eax 4 +
jmp loc_100B8C8  +
***
xor edx edx +
mov ecx [ebp-14h] +
sub ecx eax +
mov [ebp-34h] ecx +
jz loc_100BA02  +
movzx ecx byte ptr [eax+edx] +
add ecx ebx +
add [ebp-2Ch] ecx +
add ecx [ebp-28h] +
imul ecx ecx +
ror ecx 9 +
imul ecx ecx +
ror ecx 9 +
add [ebp-2Ch] ecx +
inc edx  +
mov [ebp-28h] ecx +
cmp edx [ebp-34h] +
jb loc_100B9D8  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-2Ch] +
mov [ebp+eax-0Ch] cl +
inc eax  +
cmp eax 8 +
jb loc_100BA04  +
mov eax 165376D8h +
mov eax [ebp-40h] +
mov esi [ebp-50h] +
mov [ebp-3Ch] eax +
mov eax [ebp-4Ch] +
and eax 7 +
mov [ebp-24h] eax +
jz loc_100BE3E  +
mov edi [ebp-30h] +
xor ecx ecx +
mov [ebp-18h] ecx +
mov [ebp-38h] ecx +
cmp eax ecx +
mov [ebp-1Ch] ecx +
not edi  +
jle loc_100BA71  +
push 38h  +
pop edx  +
cmp dword ptr [ebp-1Ch] 4 +
movzx ebx byte ptr [esi] +
jge loc_100BA5E  +
lea ecx [edx-20h] +
shl ebx cl +
or [ebp-38h] ebx +
jmp loc_100BA65  +
mov ecx edx +
shl ebx cl +
or [ebp-18h] ebx +
inc esi  +
inc dword ptr [ebp-1Ch]  +
sub edx 8 +
cmp [ebp-1Ch] eax +
jl loc_100BA4B  +
movzx ebx word ptr [ebp-8] +
movzx edx word ptr [ebp-0Ah] +
mov eax edi +
mov ecx edx +
xor ecx edi +
rol ecx 6 +
imul ebx ecx +
rol eax 0Dh +
mov ecx [ebp-8] +
xor eax ebx +
mov ebx [ebp-0Ch] +
xor eax [ebp-30h] +
xor ecx eax +
sub ebx ecx +
xor edi ebx +
movzx ebx word ptr [ebp-0Ch] +
mov [ebp-1Ch] edx +
mov ecx edi +
sub ecx edx +
mov edx edi +
imul ecx ebx +
shr edx 0Eh +
sub ecx edx +
xor eax ecx +
movzx edx word ptr [ebp-6] +
mov ecx [ebp-0Ch] +
add ecx eax +
rol ecx 4 +
mov [ebp-20h] edx +
mov [ebp-14h] ebx +
imul edx ecx +
mov ecx ebx +
mov ebx eax +
ror ebx 2 +
add ebx edx +
xor edi ebx +
movzx edx word ptr [ebp-8] +
mov ebx edi +
xor ecx edi +
rol ecx 3 +
imul edx ecx +
rol ebx 7 +
add ebx edx +
xor eax ebx +
mov ebx [ebp-14h] +
mov ecx eax +
movzx edx word ptr [ebp-8] +
sub ecx edx +
mov edx [ebp-1Ch] +
rol ecx 5 +
imul edx ecx +
mov ecx eax +
shr ecx 1 +
xor edx ecx +
xor edi edx +
mov ecx [ebp-8] +
mov edx edi +
xor ecx edi +
rol ecx 3 +
imul ebx ecx +
mov ecx [ebp-20h] +
ror edx 0Ch +
add edx ebx +
xor eax edx +
mov ebx eax +
mov edx eax +
sub edx [ebp-0Ch] +
rol edx 7 +
imul ecx edx +
ror ebx 0Ch +
sub ecx ebx +
xor edi ecx +
mov edx edi +
ror edx 3 +
movzx ecx word ptr [ebp-8] +
mov ebx [ebp-1Ch] +
sub edx ecx +
imul edx [ebp-14h] +
xor eax edx +
mov ecx eax +
mov edx eax +
sub ecx [ebp-8] +
ror ecx 6 +
imul ebx ecx +
mov ecx [ebp-1Ch] +
rol edx 0Ch +
xor edx ebx +
and dword ptr [ebp-1Ch] 0 +
xor edi edx +
mov ebx edi +
xor ecx edi +
rol ecx 7 +
mov edx ecx +
mov ecx [ebp-14h] +
imul ecx edx +
xor edi [ebp-18h] +
ror ebx 2 +
sub ecx ebx +
xor ecx [ebp-38h] +
xor eax ecx +
mov ecx edi +
mov ebx [ebp-24h] +
test ebx ebx +
mov [ebp-14h] eax +
jle loc_100BBB6  +
cmp dword ptr [ebp-1Ch] 4 +
jge loc_100BB9D  +
rol dword ptr [ebp-14h] 8 +
mov dl [ebp-14h] +
mov ebx [ebp-3Ch] +
inc dword ptr [ebp-3Ch]  +
xor [ebp-0Dh] dl +
mov [ebx] dl +
jmp loc_100BBAB  +
mov edx [ebp-3Ch] +
inc dword ptr [ebp-3Ch]  +
rol ecx 8 +
xor [ebp-0Dh] cl +
mov [edx] cl +
inc dword ptr [ebp-1Ch]  +
mov ebx [ebp-24h] +
cmp [ebp-1Ch] ebx +
jl loc_100BB83  +
add ebx 0FFFFFFFCh +
test ebx ebx +
jle loc_100BE24  +
push 4  +
pop ecx  +
sub ecx ebx +
shl ecx 3 +
shr edi cl +
shl edi cl +
mov edx edi +
mov edi offset __ImageBase +
mov ebx [ebp-4Ch] +
shr ebx 3 +
test ebx ebx +
jbe loc_100BDA7  +
movzx ecx word ptr [ebp-8] +
mov [ebp-24h] ecx +
movzx ecx word ptr [ebp-6] +
neg dword ptr [ebp-24h]  +
mov [ebp-20h] ecx +
movzx ecx word ptr [ebp-0Ah] +
mov [ebp-1Ch] ecx +
mov [ebp-34h] ebx +
movzx edi byte ptr [esi+1] +
movzx ecx byte ptr [esi] +
shl ecx 8 +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+2] +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+3] +
or ecx edi +
movzx edi byte ptr [esi+5] +
mov [ebp-14h] ecx +
movzx ecx byte ptr [esi+4] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+6] +
shl ecx 8 +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+7] +
or ecx edi +
xor edx ecx +
movzx edi word ptr [ebp-8] +
mov [ebp-48h] ecx +
mov ecx [ebp-1Ch] +
mov ebx edx +
xor ecx edx +
add esi 8 +
rol ecx 6 +
imul edi ecx +
rol ebx 0Dh +
mov ecx [ebp-0Ch] +
xor ebx edi +
xor ebx [ebp-14h] +
xor eax ebx +
mov ebx ecx +
mov edi [ebp-8] +
xor edi eax +
sub ebx edi +
xor edx ebx +
movzx edi cx +
mov ebx edx +
sub ebx [ebp-1Ch] +
imul ebx edi +
mov edi edx +
shr edi 0Eh +
sub ebx edi +
xor eax ebx +
mov ebx [ebp-20h] +
mov edi eax +
add ecx eax +
rol ecx 4 +
imul ebx ecx +
movzx ecx word ptr [ebp-0Ch] +
ror edi 2 +
add edi ebx +
xor edx edi +
xor ecx edx +
rol ecx 3 +
movzx edi word ptr [ebp-8] +
mov ebx edx +
imul edi ecx +
rol ebx 7 +
add ebx edi +
mov edi [ebp-1Ch] +
mov ecx [ebp-24h] +
xor eax ebx +
add ecx eax +
rol ecx 5 +
imul edi ecx +
mov ecx eax +
shr ecx 1 +
xor edi ecx +
xor edx edi +
mov ecx [ebp-8] +
mov ebx edx +
movzx edi word ptr [ebp-0Ch] +
xor ecx edx +
rol ecx 3 +
ror ebx 0Ch +
imul edi ecx +
add ebx edi +
xor eax ebx +
mov ecx eax +
sub ecx [ebp-0Ch] +
mov ebx [ebp-20h] +
mov edi eax +
rol ecx 7 +
imul ebx ecx +
ror edi 0Ch +
sub ebx edi +
xor edx ebx +
movzx ecx word ptr [ebp-8] +
mov ebx [ebp-1Ch] +
mov edi edx +
ror edi 3 +
sub edi ecx +
movzx ecx word ptr [ebp-0Ch] +
imul edi ecx +
xor eax edi +
mov ecx eax +
sub ecx [ebp-8] +
ror ecx 6 +
imul ebx ecx +
mov ecx [ebp-1Ch] +
mov edi eax +
rol edi 0Ch +
xor edi ebx +
xor edx edi +
mov ebx edx +
movzx edi word ptr [ebp-0Ch] +
xor ecx edx +
rol ecx 7 +
imul edi ecx +
xor edx [ebp-18h] +
mov cl [ebp-0Dh] +
ror ebx 2 +
sub edi ebx +
xor edi [ebp-38h] +
xor eax edi +
mov edi [ebp-3Ch] +
xor cl al +
mov [edi+3] al +
mov [edi+7] dl +
xor cl dl +
ror eax 8 +
xor cl al +
ror edx 8 +
mov [edi+2] al +
xor cl dl +
mov [edi+6] dl +
ror eax 8 +
xor cl al +
ror edx 8 +
xor cl dl +
mov [edi+1] al +
ror eax 8 +
mov [edi+5] dl +
ror edx 8 +
mov bl dl +
xor bl al +
xor cl bl +
mov [ebp-0Dh] cl +
mov ecx [ebp-14h] +
mov [edi] al +
mov [edi+4] dl +
mov [ebp-38h] ecx +
add edi 8 +
mov ecx [ebp-48h] +
dec dword ptr [ebp-34h]  +
mov [ebp-18h] ecx +
mov [ebp-3Ch] edi +
ror eax 8 +
ror edx 8 +
jnz loc_100BBFD  +
mov edi offset __ImageBase +
mov eax [ebp-44h] +
mov cl [ebp-0Dh] +
cmp cl [eax+8] +
jz loc_100BE68  +
call sub_100E99C  +
mov edx 0FFFFh +
mov ecx [ebp-54h] +
mov edi eax +
and ecx 0FFFFFFFCh +
mov eax 0FFFFF000h +
lea esi [ecx+0FFFh] +
and edi eax +
and esi eax +
mov eax [ebp-58h] +
mov dword ptr [eax+8] offset sub_1025029 +
xor eax eax +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100BDE3  +
mov ebx 0FFFFh +
div  ebx +
mov [ebp-80h] edi +
inc edx  +
mov [ebp-88h] edx +
mov dword ptr [ebp-48h] 0 +
jmp loc_100BE5A  +
xor edx edx +
test ebx ebx +
jge loc_100BBCF  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_100BBCF  +
***
mov eax [ebp-30h] +
xor edx edx +
mov [ebp-38h] eax +
not eax  +
mov [ebp-18h] eax +
xor eax eax +
jmp loc_100BBD4  +
***
mov eax [ebp-48h] +
mov [ecx] eax +
add ecx 4 +
cmp ecx esi +
jb loc_100BE52  +
mov eax offset sub_1025029 +
jmp loc_100BF47  +
mov eax ds:off_1005164 +
mov ebx [ebp-50h] +
sub ebx [ebp-40h] +
mov [ebp-44h] ebx +
sub edi eax +
mov [ebp-34h] edi +
jnz loc_100BE85  +
test ebx ebx +
jz loc_100BF35  +
mov eax [ebp-4Ch] +
mov esi [ebp-40h] +
mov ecx [ebp-30h] +
sub esi [ebp-50h] +
add ecx eax +
xor edi edi +
mov [ebp-48h] ecx +
mov ecx ds:dword_100EB28 +
dec ecx  +
js loc_100BECC  +
lea eax [ecx+edi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-30h] edx +
jnb loc_100BEC0  +
lea ecx [eax-1] +
jmp loc_100BEC5  +
jbe loc_100BED1  +
lea edi [eax+1] +
cmp ecx edi +
jge loc_100BEA1  +
mov ebx [ebp-44h] +
mov [ebp-18h] edi +
jmp loc_100BF2A  +
mov ebx [ebp-44h] +
mov [ebp-18h] eax +
jmp loc_100BF2A  +
mov eax [ebp-18h] +
mov eax ds:dword_100EB2C[eax*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-48h] +
jnb loc_100BF35  +
lea edi __ImageBase[ecx+esi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100BF1C  +
dec ecx  +
jz loc_100BF18  +
dec ecx  +
jnz loc_100BF21  +
mov edx [ebp-34h] +
jmp loc_100BF21  +
mov edx ebx +
jmp loc_100BF21  +
mov edx [ebp-34h] +
sub edx ebx +
dec eax  +
dec eax  +
jnz loc_100BF27  +
add [edi] edx +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax ds:dword_100EB28 +
jb loc_100BED9  +
mov eax ds:dword_1004CB8 +
mov eax 6BBD6190h +
mov ecx [ebp-40h] +
mov eax [ebp-78h] +
add eax ecx +
mov ecx [ebp-58h] +
mov [ecx+8] eax +
mov eax [ebp-54h] +
add dword ptr [eax] 0Ch +
mov edi [ebp-8Ch] +
mov ebx [ebp-84h] +
mov edx [ebp-80h] +
mov eax [ebp-90h] +
mov ecx [ebp-88h] +
mov esi [ebp-94h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 90h +
mov [ebp-8Ch] eax +
mov [ebp-84h] ecx +
lea eax [ebp+4] +
sub eax 4 +
mov [ebp-7Ch] edx +
mov [ebp-80h] ebx +
mov [ebp-90h] esi +
mov ebx offset __ImageBase +
mov [ebp-88h] edi +
mov edi 0FFFFFFFh +
mov [ebp-60h] eax +
mov eax [eax+8] +
mov edx [eax] +
mov ecx [eax+4] +
shr edx 1 +
and edx edi +
mov [ebp-70h] edx +
mov edx [eax+8] +
add eax 0Ch +
and ecx edi +
add ecx ebx +
mov [ebp-5Ch] ecx +
lea esi [eax-1] +
and edx edi +
cmp esi offset Address +
mov [ebp-44h] edx +
mov [ebp-1Ch] eax +
mov [ebp-30h] esi +
jb loc_100C032  +
mov eax ds:dword_100DDCC +
mov esi ds:dword_1004CB8 +
imul eax esi +
lea eax Address[eax] +
mov esi [ebp-30h] +
cmp esi eax +
jnb loc_100C02F  +
mov eax esi +
mov esi ds:dword_1004CB8 +
sub eax offset Address +
xor edx edx +
div  esi +
mov esi [ebp-30h] +
mov edx ds:dword_1004CB8 +
imul edx eax +
lea eax Address[edx] +
mov edx [ebp-44h] +
mov [ebp-14h] eax +
mov eax [ebp-1Ch] +
jmp loc_100C036  +
mov eax [ebp-1Ch] +
and dword ptr [ebp-14h] 0 +
cmp dword ptr [ebp-14h] 0 +
jnz loc_100C045  +
and esi 0FFFF0000h +
mov [ebp-14h] esi +
mov esi [ebp-14h] +
sub eax esi +
add eax 0FFFFFFC0h +
jns loc_100C051  +
xor eax eax +
add eax esi +
mov dword ptr [ebp-30h] 40h +
mov byte ptr [eax] 0 +
inc eax  +
dec dword ptr [ebp-30h]  +
jnz loc_100C05A  +
mov eax ds:dword_1004CB8 +
mov [ebp-3Ch] ecx +
sub eax edx +
sub [ebp-3Ch] ebx +
lea esi [ecx+edx] +
mov [ebp-40h] esi +
lea ecx [eax+1] +
mov [ebp-20h] ecx +
xor eax eax +
jmp loc_100C0A3  +
mov edx dword_104D00C +
imul edx edx +
add edx 269EC3h +
mov dword_104D00C edx +
shr edx 10h +
shl eax 10h +
or eax edx +
shr ecx 10h +
test ecx ecx +
jnz loc_100C080  +
xor edx edx +
div  dword ptr [ebp-20h] +
push dword ptr [ebp-44h]  +
mov eax [ebp-14h] +
add eax edx +
push dword ptr [ebp-3Ch]  +
mov [ebp-30h] eax +
mov eax 0F136B8E9h +
mov eax [esi] +
mov [ebp-68h] eax +
mov eax [esi+4] +
pop ecx  +
lea esi [ebp-68h] +
pop ecx  +
mov [ebp-64h] eax +
mov byte ptr [ebp-0Dh] 0 +
mov eax 31FC3232h +
mov eax ebx +
mov esi [ebp-64h] +
mov ecx [ebp-68h] +
and ecx edi +
and esi edi +
mov edi ds:off_1005164 +
xor edx edx +
mov [ebp-28h] edx +
mov [ebp-24h] edx +
add ecx ebx +
sub eax edi +
mov [ebp-38h] eax +
jnz loc_100C13C  +
cmp esi edx +
mov [ebp-14h] edx +
jbe loc_100C302  +
mov edi 74A3CF2Eh +
mov eax [ebp-14h] +
mov edx edi +
movzx eax byte ptr [eax+ecx] +
add eax edi +
add [ebp-28h] eax +
add eax [ebp-24h] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-28h] eax +
inc dword ptr [ebp-14h]  +
mov [ebp-24h] eax +
cmp [ebp-14h] esi +
jb loc_100C10B  +
jmp loc_100C302  +
mov edx ds:dword_100003C +
mov edi ecx +
sub edi ebx +
lea eax [ecx+esi] +
mov [ebp-34h] eax +
lea edx dword_10000A0[edx] +
mov eax [edx] +
mov edx [edx+4] +
mov [ebp-14h] edx +
mov [ebp-20h] edi +
mov edx edi +
and edx 0FFFFF000h +
sub edi edx +
mov [ebp-1Ch] edi +
mov edi [ebp-20h] +
add esi edi +
mov edi esi +
and edi 0FFFFF000h +
sub esi edi +
mov [ebp-58h] edi +
mov edi [ebp-14h] +
add eax ebx +
mov [ebp-54h] esi +
add edi eax +
mov esi eax +
mov [ebp-50h] edi +
cmp eax edi +
jz loc_100C19B  +
cmp [esi] edx +
jnb loc_100C19B  +
add esi [esi+4] +
cmp esi [ebp-50h] +
jnz loc_100C18F  +
and dword ptr [ebp-48h] 0 +
cmp esi [ebp-50h] +
jz loc_100C1CC  +
cmp [esi] edx +
jnz loc_100C1CC  +
mov edx [esi+4] +
sub edx 8 +
shr edx 1 +
jz loc_100C1CC  +
lea edi [esi+8] +
movzx eax word ptr [edi] +
and eax 0FFFh +
cmp eax [ebp-1Ch] +
jnb loc_100C1CC  +
inc dword ptr [ebp-48h]  +
inc edi  +
inc edi  +
cmp [ebp-48h] edx +
jnz loc_100C1B5  +
mov edi 74A3CF2Eh +
cmp esi [ebp-50h] +
jz loc_100C2CF  +
mov eax [ebp-58h] +
cmp [esi] eax +
ja loc_100C2CF  +
mov eax [esi+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp [ebp-48h] eax +
jnz loc_100C20F  +
add esi [esi+4] +
cmp esi [ebp-50h] +
jz loc_100C2CF  +
mov eax [ebp-58h] +
cmp [esi] eax +
ja loc_100C2CF  +
and dword ptr [ebp-48h] 0 +
jmp loc_100C1E5  +
***
mov eax [ebp-58h] +
cmp [esi] eax +
jnz loc_100C22C  +
mov eax [ebp-48h] +
movzx eax word ptr [esi+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-54h] +
jnb loc_100C2CF  +
mov eax 0F000h +
mov edx [ebp-48h] +
inc dword ptr [ebp-48h]  +
test [esi+edx*2+8] ax +
jz loc_100C1D1  +
movzx eax word ptr [esi+edx*2+8] +
mov edx [esi] +
and dword ptr [ebp-14h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-1Ch] eax +
sub [ebp-1Ch] ecx +
mov [ebp-2Ch] eax +
jz loc_100C292  +
mov eax [ebp-14h] +
movzx eax byte ptr [eax+ecx] +
mov edx edi +
add eax edi +
add [ebp-28h] eax +
add eax [ebp-24h] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-28h] eax +
inc dword ptr [ebp-14h]  +
mov [ebp-24h] eax +
mov eax [ebp-14h] +
cmp eax [ebp-1Ch] +
jb loc_100C260  +
mov eax [ebp-2Ch] +
mov eax [eax] +
sub eax [ebp-38h] +
mov [ebp-78h] eax +
xor ecx ecx +
mov edx edi +
movzx eax byte ptr [ebp+ecx-78h] +
add eax edi +
add [ebp-28h] eax +
add eax [ebp-24h] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-28h] eax +
mov [ebp-24h] eax +
inc ecx  +
cmp ecx 4 +
jb loc_100C29C  +
mov ecx [ebp-2Ch] +
add ecx 4 +
jmp loc_100C1D1  +
***
xor esi esi +
mov eax [ebp-34h] +
sub eax ecx +
mov [ebp-20h] eax +
jz loc_100C302  +
movzx eax byte ptr [ecx+esi] +
add eax edi +
add [ebp-28h] eax +
add eax [ebp-24h] +
mov edx edi +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-28h] eax +
mov [ebp-24h] eax +
inc esi  +
cmp esi [ebp-20h] +
jb loc_100C2DB  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-28h] +
mov [ebp+eax-0Ch] cl +
inc eax  +
cmp eax 8 +
jb loc_100C304  +
mov eax 337FF04Dh +
mov eax [ebp-30h] +
mov esi [ebp-5Ch] +
mov [ebp-34h] eax +
mov eax [ebp-44h] +
and eax 7 +
mov [ebp-20h] eax +
jz loc_100C6C4  +
mov edi [ebp-3Ch] +
not edi  +
xor ecx ecx +
mov [ebp-14h] ecx +
mov [ebp-1Ch] ecx +
mov [ebp-18h] ecx +
cmp eax ecx +
jle loc_100C371  +
push 38h  +
pop edx  +
cmp dword ptr [ebp-18h] 4 +
movzx ebx byte ptr [esi] +
jge loc_100C35E  +
lea ecx [edx-20h] +
shl ebx cl +
or [ebp-1Ch] ebx +
jmp loc_100C365  +
mov ecx edx +
shl ebx cl +
or [ebp-14h] ebx +
inc esi  +
inc dword ptr [ebp-18h]  +
sub edx 8 +
cmp [ebp-18h] eax +
jl loc_100C34B  +
mov ecx [ebp-0Ch] +
mov eax [ebp-8] +
movzx ebx word ptr [ebp-8] +
xor ecx edi +
sub eax ecx +
xor eax [ebp-3Ch] +
mov edx eax +
movzx ecx word ptr [ebp-6] +
sub edx ecx +
sub edx [ebp-0Ch] +
mov [ebp-18h] ecx +
xor edi edx +
movzx edx word ptr [ebp-0Ch] +
mov [ebp-2Ch] edx +
xor edx edi +
imul edx ebx +
mov ebx edi +
shr ebx 3 +
add edx ebx +
xor eax edx +
mov ebx eax +
xor ecx eax +
rol ecx 3 +
movzx edx word ptr [ebp-0Ah] +
mov [ebp-38h] edx +
imul edx ecx +
ror ebx 0Eh +
xor ebx edx +
xor edi ebx +
mov edx edi +
mov ecx edi +
mov ebx [ebp-2Ch] +
sub ecx [ebp-8] +
ror ecx 4 +
imul ebx ecx +
mov ecx [ebp-0Ch] +
rol edx 7 +
add edx ebx +
xor eax edx +
mov edx eax +
mov ebx [ebp-18h] +
sub ecx eax +
rol ecx 6 +
imul ebx ecx +
ror edx 6 +
add edx ebx +
xor edi edx +
mov ecx edi +
sub ecx [ebp-0Ch] +
mov ebx edi +
rol ecx 0Fh +
movzx edx word ptr [ebp-8] +
imul edx ecx +
movzx ecx word ptr [ebp-8] +
rol ebx 0Ch +
xor ebx edx +
xor eax ebx +
mov edx eax +
xor ecx eax +
imul ecx [ebp-38h] +
ror edx 4 +
sub ecx edx +
xor edi ecx +
mov ecx [ebp-8] +
xor ecx [ebp-0Ch] +
xor ecx edi +
xor eax ecx +
mov ecx [ebp-18h] +
mov edx eax +
sub edx ecx +
xor edx [ebp-0Ch] +
xor edi edx +
movzx edx word ptr [ebp-8] +
mov ebx edi +
sub ebx ecx +
imul ebx edx +
mov edx edi +
shr edx 3 +
sub ebx edx +
xor eax ebx +
mov ebx eax +
mov edx [ebp-38h] +
xor ecx eax +
rol ecx 1 +
imul edx ecx +
mov ecx [ebp-2Ch] +
and dword ptr [ebp-18h] 0 +
ror ebx 0Eh +
sub edx ebx +
xor edi edx +
mov ebx edi +
mov edx [ebp-8] +
sub edx edi +
ror edx 4 +
imul ecx edx +
xor edi [ebp-14h] +
ror ebx 0Dh +
sub ecx ebx +
mov ebx [ebp-20h] +
xor ecx [ebp-1Ch] +
xor eax ecx +
mov ecx edi +
mov [ebp-2Ch] eax +
test ebx ebx +
jle loc_100C4B5  +
cmp dword ptr [ebp-18h] 4 +
jge loc_100C49C  +
rol dword ptr [ebp-2Ch] 8 +
mov dl [ebp-2Ch] +
mov ebx [ebp-34h] +
inc dword ptr [ebp-34h]  +
xor [ebp-0Dh] dl +
mov [ebx] dl +
jmp loc_100C4AA  +
mov edx [ebp-34h] +
inc dword ptr [ebp-34h]  +
rol ecx 8 +
xor [ebp-0Dh] cl +
mov [edx] cl +
inc dword ptr [ebp-18h]  +
mov ebx [ebp-20h] +
cmp [ebp-18h] ebx +
jl loc_100C482  +
add ebx 0FFFFFFFCh +
test ebx ebx +
jle loc_100C6AA  +
push 4  +
pop ecx  +
sub ecx ebx +
shl ecx 3 +
shr edi cl +
shl edi cl +
mov edx edi +
mov ebx offset __ImageBase +
mov ecx [ebp-44h] +
shr ecx 3 +
test ecx ecx +
jbe loc_100C6D8  +
mov edi [ebp-8] +
xor edi [ebp-0Ch] +
mov [ebp-20h] ecx +
mov [ebp-6Ch] edi +
movzx edi word ptr [ebp-6] +
mov [ebp-18h] edi +
movzx edi word ptr [ebp-0Ah] +
mov [ebp-38h] edi +
movzx ecx byte ptr [esi] +
shl ecx 8 +
movzx edi byte ptr [esi+1] +
movzx ebx byte ptr [esi+5] +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+2] +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+3] +
or ecx edi +
movzx edi byte ptr [esi+4] +
shl edi 8 +
or edi ebx +
shl edi 8 +
movzx ebx byte ptr [esi+6] +
or edi ebx +
shl edi 8 +
movzx ebx byte ptr [esi+7] +
or edi ebx +
xor edx edi +
mov ebx [ebp-8] +
mov [ebp-74h] edi +
mov edi [ebp-0Ch] +
mov [ebp-2Ch] ecx +
xor edi edx +
sub ebx edi +
xor ebx ecx +
xor eax ebx +
mov ecx eax +
sub ecx [ebp-18h] +
sub ecx [ebp-0Ch] +
mov ebx [ebp-38h] +
add esi 8 +
xor edx ecx +
movzx ecx word ptr [ebp-0Ch] +
mov edi ecx +
movzx ecx word ptr [ebp-8] +
xor edi edx +
imul edi ecx +
mov ecx edx +
shr ecx 3 +
add edi ecx +
xor eax edi +
mov ecx [ebp-18h] +
mov edi eax +
xor ecx eax +
rol ecx 3 +
imul ebx ecx +
ror edi 0Eh +
xor edi ebx +
xor edx edi +
mov ebx edx +
mov ecx edx +
movzx edi word ptr [ebp-0Ch] +
sub ecx [ebp-8] +
ror ecx 4 +
imul edi ecx +
mov ecx [ebp-0Ch] +
rol ebx 7 +
add ebx edi +
xor eax ebx +
sub ecx eax +
mov edi eax +
mov ebx [ebp-18h] +
rol ecx 6 +
imul ebx ecx +
ror edi 6 +
add edi ebx +
xor edx edi +
mov ecx edx +
movzx edi word ptr [ebp-8] +
sub ecx [ebp-0Ch] +
mov ebx edx +
rol ecx 0Fh +
imul edi ecx +
rol ebx 0Ch +
movzx ecx word ptr [ebp-8] +
xor ebx edi +
xor eax ebx +
mov edi eax +
ror edi 4 +
mov ebx [ebp-38h] +
xor ecx eax +
imul ecx [ebp-38h] +
sub ecx edi +
xor edx ecx +
mov ecx [ebp-6Ch] +
xor ecx edx +
xor eax ecx +
mov ecx eax +
sub ecx [ebp-18h] +
xor ecx [ebp-0Ch] +
xor edx ecx +
mov edi edx +
movzx ecx word ptr [ebp-8] +
sub edi [ebp-18h] +
imul edi ecx +
mov ecx edx +
shr ecx 3 +
sub edi ecx +
mov ecx [ebp-18h] +
xor eax edi +
mov edi eax +
xor ecx eax +
rol ecx 1 +
imul ebx ecx +
ror edi 0Eh +
sub ebx edi +
movzx edi word ptr [ebp-0Ch] +
mov ecx [ebp-8] +
xor edx ebx +
sub ecx edx +
mov ebx edx +
ror ecx 4 +
imul edi ecx +
xor edx [ebp-14h] +
ror ebx 0Dh +
sub edi ebx +
mov cl [ebp-0Dh] +
xor edi [ebp-1Ch] +
xor eax edi +
xor cl al +
xor cl dl +
mov edi [ebp-34h] +
mov [edi+3] al +
ror eax 8 +
mov [edi+7] dl +
xor cl al +
ror edx 8 +
mov [edi+2] al +
mov [edi+6] dl +
xor cl dl +
ror eax 8 +
mov [edi+1] al +
xor cl al +
ror edx 8 +
xor cl dl +
mov [edi+5] dl +
ror eax 8 +
ror edx 8 +
mov bl dl +
xor bl al +
xor cl bl +
mov ebx [ebp-2Ch] +
mov [edi] al +
mov [edi+4] dl +
mov [ebp-1Ch] ebx +
mov ebx [ebp-74h] +
add edi 8 +
dec dword ptr [ebp-20h]  +
mov [ebp-0Dh] cl +
mov [ebp-14h] ebx +
mov [ebp-34h] edi +
ror eax 8 +
ror edx 8 +
jnz loc_100C4FB  +
mov ebx offset __ImageBase +
jmp loc_100C6DB  +
xor edx edx +
test ebx ebx +
jge loc_100C4CE  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_100C4CE  +
***
xor edx edx +
mov eax [ebp-3Ch] +
mov [ebp-1Ch] eax +
not eax  +
mov [ebp-14h] eax +
xor eax eax +
jmp loc_100C4D3  +
***
mov cl [ebp-0Dh] +
mov eax [ebp-40h] +
cmp cl [eax+8] +
jz loc_100C76F  +
call sub_100E99C  +
mov edx [ebp-60h] +
mov edi eax +
lea ecx [edx+0Ch] +
and ecx 0FFFFFFFCh +
mov eax 0FFFFF000h +
mov dword ptr [edx+8] offset sub_1025029 +
and edi eax +
lea esi [ecx+0FFFh] +
mov edx 0FFFFh +
and esi eax +
xor eax eax +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100C714  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
mov [ebp-7Ch] edi +
mov [ebp-84h] edx +
mov eax ecx +
mov dword ptr [ebp-40h] 0 +
cmp ecx esi +
jnb loc_100C765  +
mov ecx [ebp-40h] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100C759  +
mov eax offset sub_1025029 +
jmp loc_100C840  +
mov ecx ds:off_1005164 +
mov eax [ebp-5Ch] +
sub eax [ebp-30h] +
sub ebx ecx +
mov [ebp-14h] eax +
mov [ebp-20h] ebx +
jnz loc_100C78D  +
test eax eax +
jz loc_100C82E  +
mov eax [ebp-44h] +
mov edi [ebp-3Ch] +
mov esi [ebp-30h] +
mov ecx ds:dword_100EB28 +
sub esi [ebp-5Ch] +
add eax edi +
mov [ebp-40h] eax +
xor ebx ebx +
dec ecx  +
js loc_100C7D0  +
lea eax [ecx+ebx] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp edi edx +
jnb loc_100C7C7  +
lea ecx [eax-1] +
jmp loc_100C7CC  +
jbe loc_100C7D4  +
lea ebx [eax+1] +
cmp ecx ebx +
jge loc_100C7A9  +
mov edi ebx +
jmp loc_100C826  +
mov edi eax +
jmp loc_100C826  +
mov eax ds:dword_100EB2C[edi*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-40h] +
jnb loc_100C82E  +
lea ebx __ImageBase[ecx+esi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100C819  +
dec ecx  +
jz loc_100C814  +
dec ecx  +
jnz loc_100C81F  +
mov edx [ebp-20h] +
jmp loc_100C81F  +
mov edx [ebp-14h] +
jmp loc_100C81F  +
mov edx [ebp-20h] +
sub edx [ebp-14h] +
dec eax  +
dec eax  +
jnz loc_100C825  +
add [ebx] edx +
inc edi  +
cmp edi ds:dword_100EB28 +
jb loc_100C7D8  +
mov eax ds:dword_1004CB8 +
mov eax 4A2A6E23h +
mov ecx [ebp-30h] +
mov eax [ebp-70h] +
add eax ecx +
mov ecx [ebp-60h] +
mov [ecx+8] eax +
mov edx [ebp-7Ch] +
mov edi [ebp-88h] +
mov esi [ebp-90h] +
mov eax [ebp-8Ch] +
mov ecx [ebp-84h] +
mov ebx [ebp-80h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
mov eax ds:dword_100DDCC +
mov [ebp-38h] eax +
mov eax ds:dword_1004CB8 +
mov eax ds:dword_100DDCC +
test eax eax +
jz loc_100C950  +
xor esi esi +
mov eax ds:dword_100DDCC +
dec eax  +
lea ecx [eax+1] +
mov edx ecx +
xor eax eax +
test ecx ecx +
jz loc_100C90D  +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100C8E6  +
xor edx edx +
div  ecx +
cmp dword ptr [ebp-38h] 0 +
jbe loc_100C94A  +
mov eax 0C4A6h +
inc esi  +
lea ebx dword_104D078[edx*4] +
mov ecx 0FFFF3B59h +
cmpxchg [ebx] ecx +
cmp eax 0C4A6h +
jz loc_100CAC6  +
lea eax [edx+1] +
xor edx edx +
mov ecx ds:dword_100DDCC +
div  ecx +
cmp esi [ebp-38h] +
jb loc_100C917  +
xor esi esi +
test esi esi +
jnz loc_100C9C6  +
call ds:__imp_GetLastError  +
xor esi esi +
mov ebx eax +
inc esi  +
push 40h  +
push 1000h  +
push dword ptr [ebp-28h]  +
push 0  +
call ds:VirtualAlloc  +
test eax eax +
jnz loc_100CADA  +
push eax  +
call ds:Sleep  +
cmp esi 11h +
jb loc_100C95A  +
xor esi esi +
cmp esi 10000h +
jb loc_100C993  +
test esi 3 +
jz loc_100C9A7  +
test esi esi +
jz loc_100C9A5  +
push 8000h  +
push 0  +
push esi  +
call ds:VirtualFree  +
xor esi esi +
push ebx  +
call ds:SetLastError  +
test esi esi +
jz loc_100C8BD  +
mov eax esi +
mov ecx [ebp-28h] +
test ecx ecx +
jz loc_100C9C6  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100C9BF  +
mov eax 2AD03611h +
mov eax [edi] +
mov ecx eax +
shr eax 1 +
and eax 0FFFFFFFh +
shr ecx 1Dh +
lea edi [ecx+edi+8] +
mov ecx eax +
lea eax [ecx+edi] +
mov [ebp-44h] eax +
mov eax ds:dword_1004CB8 +
mov [ebp-2Ch] edi +
mov [ebp-38h] edi +
mov edi offset __ImageBase +
sub eax ecx +
mov [ebp-4Ch] ecx +
sub [ebp-2Ch] edi +
lea ecx [eax+1] +
mov edx ecx +
xor eax eax +
test ecx ecx +
jz loc_100CA2F  +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100CA08  +
xor edx edx +
div  ecx +
add edx esi +
mov eax edx +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp-2Ch]  +
mov [ebp-48h] edx +
mov eax 0B4B030ABh +
mov eax [ebp-44h] +
pop ecx  +
pop ecx  +
mov ecx [eax] +
lea esi [ebp-70h] +
mov eax [eax+4] +
mov [ebp-70h] ecx +
mov [ebp-6Ch] eax +
mov byte ptr [ebp-0Dh] 0 +
mov eax 0C2820353h +
mov eax [ebp-70h] +
mov edx 0FFFFFFFh +
mov ecx [ebp-6Ch] +
mov esi ds:off_1005164 +
and dword ptr [ebp-20h] 0 +
and dword ptr [ebp-1Ch] 0 +
and eax edx +
and ecx edx +
mov edx edi +
add eax edi +
sub edx esi +
mov [ebp-50h] edx +
jnz loc_100CAE1  +
xor esi esi +
test ecx ecx +
jbe loc_100CC9E  +
mov edi 6E0A9DA6h +
movzx edx byte ptr [esi+eax] +
add edx edi +
add [ebp-20h] edx +
add edx [ebp-1Ch] +
imul edx edx +
ror edx 9 +
imul edx edx +
ror edx 9 +
add [ebp-20h] edx +
inc esi  +
mov [ebp-1Ch] edx +
cmp esi ecx +
jb loc_100CA98  +
jmp loc_100CC9E  +
mov esi ds:dword_1004CB8 +
imul esi edx +
lea esi Address[esi] +
jmp loc_100C94C  +
***
mov esi eax +
jmp loc_100C983  +
***
mov edi ds:dword_100003C +
lea edx [eax+ecx] +
mov esi eax +
lea edi dword_10000A0[edi] +
mov ebx offset __ImageBase +
sub esi ebx +
mov [ebp-28h] edx +
mov edx [edi] +
add edx ebx +
mov ebx [edi+4] +
mov edi esi +
and edi 0FFFFF000h +
mov [ebp-14h] edi +
add ecx esi +
mov edi esi +
mov esi ecx +
sub edi [ebp-14h] +
and esi 0FFFFF000h +
mov [ebp-64h] esi +
sub ecx esi +
mov [ebp-60h] ecx +
add ebx edx +
mov [ebp-5Ch] ebx +
jmp loc_100CB36  +
mov ecx [ebp-14h] +
cmp [edx] ecx +
jnb loc_100CB3A  +
add edx [edx+4] +
cmp edx ebx +
jnz loc_100CB2C  +
and dword ptr [ebp-54h] 0 +
cmp edx ebx +
jz loc_100CB75  +
mov ecx [ebp-14h] +
cmp [edx] ecx +
jnz loc_100CB75  +
mov ecx [edx+4] +
sub ecx 8 +
shr ecx 1 +
jz loc_100CB75  +
lea ebx [edx+8] +
mov [ebp-14h] ebx +
mov ebx [ebp-14h] +
movzx ebx word ptr [ebx] +
and ebx 0FFFh +
cmp ebx edi +
jnb loc_100CB75  +
inc dword ptr [ebp-54h]  +
add dword ptr [ebp-14h] 2 +
cmp [ebp-54h] ecx +
jnz loc_100CB59  +
mov edi 6E0A9DA6h +
cmp edx [ebp-5Ch] +
jz loc_100CC6C  +
cmp [edx] esi +
ja loc_100CC6C  +
mov ecx [edx+4] +
lea ebx [ecx-8] +
shr ebx 1 +
mov ecx [ebp-54h] +
cmp ecx ebx +
jnz loc_100CBB4  +
add edx [edx+4] +
cmp edx [ebp-5Ch] +
jz loc_100CC6C  +
cmp [edx] esi +
ja loc_100CC6C  +
and dword ptr [ebp-54h] 0 +
jmp loc_100CB8B  +
***
cmp [edx] esi +
jnz loc_100CBCC  +
movzx ecx word ptr [edx+ecx*2+8] +
and ecx 0FFFh +
cmp ecx [ebp-60h] +
jnb loc_100CC6C  +
mov ecx [ebp-54h] +
inc dword ptr [ebp-54h]  +
mov ebx 0F000h +
test [edx+ecx*2+8] bx +
jz loc_100CB7A  +
movzx esi word ptr [edx+ecx*2+8] +
and esi 0FFFh +
mov ecx [edx] +
lea esi __ImageBase[esi+ecx] +
xor ecx ecx +
mov [ebp-14h] esi +
sub [ebp-14h] eax +
mov [ebp-34h] esi +
jz loc_100CC2C  +
movzx esi byte ptr [ecx+eax] +
add esi edi +
add [ebp-20h] esi +
add esi [ebp-1Ch] +
imul esi esi +
ror esi 9 +
imul esi esi +
ror esi 9 +
add [ebp-20h] esi +
mov [ebp-1Ch] esi +
inc ecx  +
cmp ecx [ebp-14h] +
jb loc_100CBFF  +
mov esi [ebp-34h] +
mov eax [esi] +
sub eax [ebp-50h] +
mov [ebp-74h] eax +
xor ecx ecx +
movzx eax byte ptr [ebp+ecx-74h] +
add eax edi +
add [ebp-20h] eax +
add eax [ebp-1Ch] +
imul eax eax +
ror eax 9 +
imul eax eax +
ror eax 9 +
add [ebp-20h] eax +
inc ecx  +
cmp ecx 4 +
mov [ebp-1Ch] eax +
jb loc_100CC36  +
lea eax [esi+4] +
mov esi [ebp-64h] +
jmp loc_100CB7A  +
***
xor edx edx +
mov esi [ebp-28h] +
sub esi eax +
jz loc_100CC9E  +
movzx ecx byte ptr [eax+edx] +
add ecx edi +
add [ebp-20h] ecx +
add ecx [ebp-1Ch] +
imul ecx ecx +
ror ecx 9 +
imul ecx ecx +
ror ecx 9 +
add [ebp-20h] ecx +
inc edx  +
mov [ebp-1Ch] ecx +
cmp edx esi +
jb loc_100CC75  +
xor ebx ebx +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-20h] +
mov [ebp+eax-0Ch] cl +
inc eax  +
cmp eax 8 +
jb loc_100CCA2  +
mov eax 2563DFC1h +
mov eax [ebp-48h] +
mov esi [ebp-38h] +
mov [ebp-30h] eax +
mov eax [ebp-4Ch] +
and eax 7 +
mov [ebp-28h] eax +
jz loc_100CE75  +
mov edi [ebp-2Ch] +
cmp eax ebx +
not edi  +
mov [ebp-14h] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-18h] ebx +
jle loc_100CD0D  +
push 38h  +
pop edx  +
movzx ebx byte ptr [esi] +
cmp dword ptr [ebp-18h] 4 +
jge loc_100CCFA  +
lea ecx [edx-20h] +
shl ebx cl +
or [ebp-3Ch] ebx +
jmp loc_100CD01  +
mov ecx edx +
shl ebx cl +
or [ebp-14h] ebx +
inc esi  +
inc dword ptr [ebp-18h]  +
sub edx 8 +
cmp [ebp-18h] eax +
jl loc_100CCE7  +
movzx ebx word ptr [ebp-8] +
mov eax edi +
movzx edx word ptr [ebp-0Ah] +
mov ecx edx +
xor ecx edi +
rol ecx 6 +
imul ebx ecx +
mov ecx [ebp-8] +
rol eax 0Dh +
xor eax ebx +
xor eax [ebp-2Ch] +
xor ecx eax +
mov ebx [ebp-0Ch] +
sub ebx ecx +
xor edi ebx +
mov ecx edi +
sub ecx edx +
movzx ebx word ptr [ebp-0Ch] +
mov [ebp-18h] edx +
mov edx edi +
imul ecx ebx +
shr edx 0Eh +
sub ecx edx +
xor eax ecx +
mov ecx [ebp-0Ch] +
add ecx eax +
rol ecx 4 +
movzx edx word ptr [ebp-6] +
imul ecx edx +
movzx edx word ptr [ebp-8] +
mov [ebp-24h] ebx +
mov ebx eax +
ror ebx 2 +
add ebx ecx +
xor edi ebx +
mov ebx edi +
mov ecx edi +
xor ecx [ebp-24h] +
rol ecx 3 +
imul edx ecx +
rol ebx 7 +
add ebx edx +
movzx edx word ptr [ebp-8] +
xor eax ebx +
mov ecx eax +
sub ecx edx +
mov edx [ebp-18h] +
rol ecx 5 +
imul edx ecx +
mov ecx eax +
shr ecx 1 +
xor edx ecx +
mov ecx [ebp-8] +
xor edi edx +
xor ecx edi +
mov edx edi +
rol ecx 3 +
imul ecx [ebp-24h] +
ror edx 0Ch +
add edx ecx +
xor eax edx +
mov ecx eax +
movzx edx word ptr [ebp-6] +
sub ecx [ebp-0Ch] +
rol ecx 7 +
imul ecx edx +
mov ebx eax +
ror ebx 0Ch +
sub ecx ebx +
mov ebx [ebp-18h] +
xor edi ecx +
mov edx edi +
movzx ecx word ptr [ebp-8] +
ror edx 3 +
sub edx ecx +
imul edx [ebp-24h] +
xor eax edx +
mov edx eax +
mov ecx eax +
sub ecx [ebp-8] +
ror ecx 6 +
rol edx 0Ch +
imul ebx ecx +
mov ecx [ebp-18h] +
and dword ptr [ebp-18h] 0 +
xor edx ebx +
mov ebx [ebp-28h] +
xor edi edx +
xor ecx edi +
mov edx edi +
rol ecx 7 +
imul ecx [ebp-24h] +
xor edi [ebp-14h] +
ror edx 2 +
sub ecx edx +
xor ecx [ebp-3Ch] +
xor eax ecx +
mov ecx edi +
mov [ebp-24h] eax +
test ebx ebx +
jle loc_100CE4B  +
cmp dword ptr [ebp-18h] 4 +
jge loc_100CE32  +
rol dword ptr [ebp-24h] 8 +
mov ebx [ebp-30h] +
mov dl [ebp-24h] +
inc dword ptr [ebp-30h]  +
xor [ebp-0Dh] dl +
mov [ebx] dl +
jmp loc_100CE40  +
mov edx [ebp-30h] +
inc dword ptr [ebp-30h]  +
rol ecx 8 +
xor [ebp-0Dh] cl +
mov [edx] cl +
inc dword ptr [ebp-18h]  +
mov ebx [ebp-28h] +
cmp [ebp-18h] ebx +
jl loc_100CE18  +
add ebx 0FFFFFFFCh +
test ebx ebx +
jle loc_100CE62  +
push 4  +
pop ecx  +
sub ecx ebx +
shl ecx 3 +
shr edi cl +
shl edi cl +
mov edx edi +
jmp loc_100CE84  +
xor edx edx +
test ebx ebx +
jge loc_100CE84  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_100CE84  +
mov eax [ebp-2Ch] +
mov [ebp-3Ch] eax +
xor edx edx +
not eax  +
mov [ebp-14h] eax +
xor eax eax +
mov edi [ebp-4Ch] +
shr edi 3 +
test edi edi +
jbe loc_100D050  +
movzx ecx word ptr [ebp-8] +
mov [ebp-28h] ecx +
movzx ecx word ptr [ebp-6] +
neg dword ptr [ebp-28h]  +
mov [ebp-50h] ecx +
movzx ecx word ptr [ebp-0Ah] +
mov [ebp-18h] ecx +
mov [ebp-34h] edi +
movzx ecx byte ptr [esi] +
movzx edi byte ptr [esi+1] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+2] +
shl ecx 8 +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+3] +
or ecx edi +
movzx edi byte ptr [esi+5] +
mov [ebp-24h] ecx +
movzx ecx byte ptr [esi+4] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+6] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+7] +
shl ecx 8 +
or ecx edi +
movzx edi word ptr [ebp-8] +
mov [ebp-40h] ecx +
xor edx ecx +
mov ecx [ebp-18h] +
xor ecx edx +
mov ebx edx +
add esi 8 +
rol ecx 6 +
imul edi ecx +
mov ecx [ebp-0Ch] +
rol ebx 0Dh +
xor ebx edi +
xor ebx [ebp-24h] +
mov edi [ebp-8] +
xor eax ebx +
mov ebx ecx +
xor edi eax +
sub ebx edi +
xor edx ebx +
mov ebx edx +
sub ebx [ebp-18h] +
movzx edi cx +
imul ebx edi +
mov edi edx +
shr edi 0Eh +
sub ebx edi +
xor eax ebx +
add ecx eax +
mov edi eax +
rol ecx 4 +
imul ecx [ebp-50h] +
ror edi 2 +
add edi ecx +
xor edx edi +
mov ebx edx +
mov ecx edx +
movzx edi word ptr [ebp-0Ch] +
xor ecx edi +
rol ecx 3 +
movzx edi word ptr [ebp-8] +
imul edi ecx +
mov ecx [ebp-28h] +
rol ebx 7 +
add ebx edi +
mov edi [ebp-18h] +
xor eax ebx +
add ecx eax +
rol ecx 5 +
imul edi ecx +
mov ecx eax +
shr ecx 1 +
xor edi ecx +
mov ecx [ebp-8] +
xor edx edi +
mov ebx edx +
movzx edi word ptr [ebp-0Ch] +
xor ecx edx +
rol ecx 3 +
ror ebx 0Ch +
imul ecx edi +
add ebx ecx +
xor eax ebx +
mov ebx [ebp-18h] +
mov ecx eax +
sub ecx [ebp-0Ch] +
mov edi eax +
rol ecx 7 +
imul ecx [ebp-50h] +
ror edi 0Ch +
sub ecx edi +
xor edx ecx +
mov edi edx +
movzx ecx word ptr [ebp-8] +
ror edi 3 +
sub edi ecx +
movzx ecx word ptr [ebp-0Ch] +
imul edi ecx +
xor eax edi +
mov edi eax +
mov ecx eax +
sub ecx [ebp-8] +
ror ecx 6 +
imul ebx ecx +
mov ecx [ebp-18h] +
rol edi 0Ch +
xor edi ebx +
xor edx edi +
xor ecx edx +
mov ebx edx +
rol ecx 7 +
movzx edi word ptr [ebp-0Ch] +
imul ecx edi +
xor edx [ebp-14h] +
mov edi [ebp-30h] +
ror ebx 2 +
sub ecx ebx +
xor ecx [ebp-3Ch] +
mov [edi+7] dl +
xor eax ecx +
mov cl [ebp-0Dh] +
mov [edi+3] al +
xor cl al +
xor cl dl +
ror eax 8 +
mov [edi+2] al +
xor cl al +
ror edx 8 +
mov [edi+6] dl +
xor cl dl +
ror eax 8 +
xor cl al +
ror edx 8 +
xor cl dl +
mov [edi+1] al +
mov [edi+5] dl +
ror eax 8 +
ror edx 8 +
mov bl dl +
xor bl al +
xor cl bl +
mov [ebp-0Dh] cl +
mov ecx [ebp-24h] +
mov [edi] al +
mov [edi+4] dl +
mov [ebp-3Ch] ecx +
add edi 8 +
mov ecx [ebp-40h] +
dec dword ptr [ebp-34h]  +
mov [ebp-14h] ecx +
mov [ebp-30h] edi +
ror eax 8 +
ror edx 8 +
jnz loc_100CEAD  +
mov ecx [ebp-44h] +
mov al [ebp-0Dh] +
cmp al [ecx+8] +
jz loc_100D0E4  +
call sub_100E99C  +
mov edx 0FFFFF000h +
mov edi eax +
mov eax [ebp-68h] +
lea ecx [eax+0Ch] +
and ecx 0FFFFFFFCh +
mov dword ptr [eax+8] offset sub_1025029 +
lea esi [ecx+0FFFh] +
and edi edx +
and esi edx +
xor eax eax +
mov edx 0FFFFh +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100D08C  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
mov eax ecx +
mov [ebp-78h] edi +
cmp ecx esi +
mov [ebp-80h] edx +
mov dword ptr [ebp-40h] 0 +
jnb loc_100D0DA  +
mov ecx [ebp-40h] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100D0CE  +
mov eax offset sub_1025029 +
jmp loc_100D1C4  +
mov ecx ds:off_1005164 +
mov eax offset __ImageBase +
mov ebx [ebp-38h] +
sub ebx [ebp-48h] +
sub eax ecx +
mov [ebp-44h] ebx +
mov [ebp-34h] eax +
jnz loc_100D107  +
test ebx ebx +
jz loc_100D1B7  +
mov ecx [ebp-4Ch] +
mov eax [ebp-2Ch] +
mov esi [ebp-48h] +
sub esi [ebp-38h] +
add eax ecx +
xor edi edi +
mov ecx ds:dword_100EB28 +
dec ecx  +
mov [ebp-40h] eax +
js loc_100D14E  +
lea eax [ecx+edi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-2Ch] edx +
jnb loc_100D142  +
lea ecx [eax-1] +
jmp loc_100D147  +
jbe loc_100D153  +
lea edi [eax+1] +
cmp ecx edi +
jge loc_100D123  +
mov ebx [ebp-44h] +
mov [ebp-14h] edi +
jmp loc_100D1AC  +
mov ebx [ebp-44h] +
mov [ebp-14h] eax +
jmp loc_100D1AC  +
mov eax [ebp-14h] +
mov eax ds:dword_100EB2C[eax*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-40h] +
jnb loc_100D1B7  +
lea edi __ImageBase[ecx+esi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100D19E  +
dec ecx  +
jz loc_100D19A  +
dec ecx  +
jnz loc_100D1A3  +
mov edx [ebp-34h] +
jmp loc_100D1A3  +
mov edx ebx +
jmp loc_100D1A3  +
mov edx [ebp-34h] +
sub edx ebx +
dec eax  +
dec eax  +
jnz loc_100D1A9  +
add [edi] edx +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax ds:dword_100EB28 +
jb loc_100D15B  +
mov eax ds:dword_1004CB8 +
mov eax 0C2DCBD3h +
mov eax [ebp-48h] +
mov ecx [ebp-68h] +
mov [ecx+8] eax +
mov ebx [ebp-7Ch] +
mov eax [ebp-88h] +
mov esi [ebp-8Ch] +
mov ecx [ebp-80h] +
mov edx [ebp-78h] +
mov edi [ebp-84h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp-4Ch] eax +
mov [ebp-44h] ecx +
mov [ebp-3Ch] edx +
mov [ebp-40h] ebx +
mov [ebp-50h] esi +
lea ebx [ebp+4] +
mov [ebp-48h] edi +
mov edi [ebx+4] +
sub ebx 4 +
mov eax edi +
push edi  +
mov [ebp-0Ch] ebx +
mov [ebp-14h] edi +
mov eax 8621FD75h +
mov esi [edi] +
mov edx ds:off_1005164 +
mov edi [edi+8] +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-20h] 0 +
mov eax 0FFFFFFFh +
shr esi 1 +
pop ecx  +
and edi eax +
and esi eax +
mov eax offset __ImageBase +
add edi eax +
mov ecx eax +
sub ecx edx +
mov [ebp-18h] ecx +
jnz loc_100D293  +
and dword ptr [ebp-4] 0 +
test esi esi +
jbe loc_100D473  +
mov ecx 0AA4AB8E3h +
mov ebx 55B5471Dh +
mov edx ecx +
mov eax [ebp-4] +
movzx eax byte ptr [eax+edi] +
sub eax ebx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
cmp [ebp-4] esi +
jb loc_100D25F  +
jmp loc_100D470  +
mov edx edi +
sub edx eax +
lea ecx [esi+edi] +
mov ebx edx +
and ebx 0FFFFF000h +
add esi edx +
mov [ebp-4] ebx +
mov ebx edx +
mov edx esi +
sub ebx [ebp-4] +
and edx 0FFFFF000h +
sub esi edx +
mov [ebp-1Ch] ecx +
mov ecx ds:dword_100003C +
mov [ebp-34h] esi +
mov esi ds:dword_10000A0[ecx] +
add esi eax +
mov eax ds:dword_10000A4[ecx] +
add eax esi +
mov [ebp-38h] edx +
mov [ebp-30h] eax +
jmp loc_100D2E4  +
mov ecx [ebp-4] +
cmp [esi] ecx +
jnb loc_100D2E8  +
add esi [esi+4] +
cmp esi eax +
jnz loc_100D2DA  +
and dword ptr [ebp-28h] 0 +
cmp esi eax +
jz loc_100D329  +
mov ecx [ebp-4] +
cmp [esi] ecx +
jnz loc_100D329  +
mov ecx [esi+4] +
sub ecx 8 +
shr ecx 1 +
mov [ebp-10h] ecx +
jz loc_100D329  +
lea ecx [esi+8] +
mov [ebp-4] ecx +
mov ecx [ebp-4] +
movzx ecx word ptr [ecx] +
and ecx 0FFFh +
cmp ecx ebx +
jnb loc_100D329  +
inc dword ptr [ebp-28h]  +
mov ecx [ebp-10h] +
add dword ptr [ebp-4] 2 +
cmp [ebp-28h] ecx +
jnz loc_100D30A  +
mov ecx 0AA4AB8E3h +
mov ebx 55B5471Dh +
jmp loc_100D33B  +
mov eax [ebp-30h] +
mov edx [ebp-38h] +
cmp esi eax +
jz loc_100D43A  +
cmp [esi] edx +
ja loc_100D43A  +
mov eax [esi+4] +
lea edx [eax-8] +
mov eax [ebp-28h] +
shr edx 1 +
cmp eax edx +
jnz loc_100D377  +
add esi [esi+4] +
cmp esi [ebp-30h] +
jz loc_100D43A  +
mov eax [ebp-38h] +
cmp [esi] eax +
ja loc_100D43A  +
and dword ptr [ebp-28h] 0 +
jmp loc_100D34B  +
***
mov edx [ebp-38h] +
cmp [esi] edx +
jnz loc_100D391  +
movzx eax word ptr [esi+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-34h] +
jnb loc_100D43A  +
mov edx 0F000h +
mov eax [ebp-28h] +
inc dword ptr [ebp-28h]  +
test [esi+eax*2+8] dx +
jz loc_100D335  +
mov edx [esi] +
movzx eax word ptr [esi+eax*2+8] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] edi +
mov [ebp-10h] eax +
jz loc_100D3FA  +
mov eax [ebp-4] +
mov edx ecx +
movzx eax byte ptr [eax+edi] +
sub eax ebx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
mov eax [ebp-4] +
cmp eax [ebp-8] +
jb loc_100D3C5  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
mov [ebp-8] eax +
xor edi edi +
mov edx ecx +
movzx eax byte ptr [ebp+edi-8] +
sub eax ebx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-24h] eax +
inc edi  +
mov [ebp-20h] eax +
cmp edi 4 +
jb loc_100D404  +
mov edi [ebp-10h] +
add edi 4 +
jmp loc_100D335  +
***
xor esi esi +
mov eax [ebp-1Ch] +
sub eax edi +
mov [ebp-1Ch] eax +
jz loc_100D470  +
mov edx ecx +
movzx eax byte ptr [edi+esi] +
sub eax ebx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-24h] eax +
inc esi  +
mov [ebp-20h] eax +
cmp esi [ebp-1Ch] +
jb loc_100D446  +
mov ebx [ebp-0Ch] +
add dword ptr [ebx+8] 10h +
mov eax [ebp-14h] +
mov ecx [ebp-24h] +
mov eax [eax+4] +
and eax 0FFFFFFFh +
cmp ecx ds:__ImageBase[eax] +
jnz loc_100D49C  +
mov ecx [ebp-20h] +
cmp ecx ds:dword_1000004[eax] +
jz loc_100D54B  +
call sub_100E99C  +
lea ecx [ebx+0Ch] +
and ecx 0FFFFFFFCh +
mov edx 0FFFFF000h +
and eax edx +
lea esi [ecx+0FFFh] +
mov [ebp-1Ch] eax +
mov dword ptr [ebx+8] offset sub_1025029 +
and esi edx +
mov edx 0FFFFh +
xor eax eax +
mov edi dword_104D00C +
imul edi edi +
add edi 269EC3h +
mov dword_104D00C edi +
shr edi 10h +
shl eax 10h +
shr edx 10h +
or eax edi +
test edx edx +
jnz loc_100D4C7  +
mov edi 0FFFFh +
div  edi +
inc edx  +
mov eax [ebp-1Ch] +
cmp ecx esi +
mov [ebp-3Ch] eax +
mov [ebp-44h] edx +
mov dword ptr [ebp-1Ch] 0 +
mov eax ecx +
jnb loc_100D518  +
mov ecx [ebp-1Ch] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100D50C  +
mov eax [ebp-14h] +
mov dword ptr [ebx+8] offset sub_1025029 +
mov ecx [ebp-44h] +
mov eax [eax+0Ch] +
and eax 0FFFFFFFh +
mov edx ecx +
mov [ebp-48h] ecx +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_104D46C +
xor edx ecx +
and dword ptr [ebp-44h] 0 +
mov [ebp-50h] edx +
mov eax 7704CB29h +
mov edi [ebp-48h] +
mov eax [ebp-4Ch] +
mov esi [ebp-50h] +
mov edx [ebp-3Ch] +
mov ebx [ebp-40h] +
mov ecx [ebp-44h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp-4Ch] eax +
mov [ebp-44h] ecx +
mov [ebp-3Ch] edx +
mov [ebp-40h] ebx +
lea ebx [ebp+4] +
mov [ebp-50h] esi +
mov [ebp-48h] edi +
mov esi [ebx+4] +
sub ebx 4 +
push esi  +
mov [ebp-0Ch] esi +
mov eax esi +
mov eax 682E118h +
mov eax 0FFFFFFFh +
mov edx [esi+0Ch] +
mov edi offset __ImageBase +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-20h] 0 +
pop ecx  +
mov ecx [esi+4] +
mov esi ds:off_1005164 +
and ecx eax +
and edx eax +
mov eax edi +
add ecx edi +
sub eax esi +
mov [ebp-14h] eax +
jnz loc_100D605  +
xor edi edi +
test edx edx +
jbe loc_100D7FF  +
movzx esi byte ptr [edi+ecx] +
add esi 3D035533h +
add [ebp-24h] esi +
add esi [ebp-20h] +
mov eax esi +
imul eax eax +
rol eax 3 +
ror esi 3 +
xor eax esi +
imul eax eax +
ror eax 12h +
add [ebp-24h] eax +
inc edi  +
mov [ebp-20h] eax +
cmp edi edx +
jb loc_100D5CC  +
jmp loc_100D7FF  +
mov esi ds:dword_100003C +
lea eax [ecx+edx] +
mov [ebp-1Ch] eax +
mov eax ecx +
sub eax edi +
mov edi eax +
and edi 0FFFFF000h +
mov [ebp-4] edi +
mov edi eax +
sub edi [ebp-4] +
add eax edx +
mov edx eax +
and edx 0FFFFF000h +
sub eax edx +
mov [ebp-34h] eax +
mov eax ds:dword_10000A0[esi] +
add eax offset __ImageBase +
mov esi ds:dword_10000A4[esi] +
mov [ebp-8] edi +
add esi eax +
mov [ebp-38h] edx +
jmp loc_100D659  +
mov edx [eax] +
cmp edx [ebp-4] +
jnb loc_100D65D  +
add eax [eax+4] +
cmp eax esi +
jnz loc_100D64F  +
and dword ptr [ebp-28h] 0 +
cmp eax esi +
jz loc_100D7C2  +
mov edx [ebp-4] +
cmp [eax] edx +
jnz loc_100D6A7  +
mov edx [eax+4] +
sub edx 8 +
shr edx 1 +
mov [ebp-10h] edx +
jz loc_100D6A7  +
lea edx [eax+8] +
mov [ebp-4] edx +
jmp loc_100D688  +
mov edi [ebp-8] +
mov edx [ebp-4] +
movzx edx word ptr [edx] +
and edx 0FFFh +
cmp edx edi +
jnb loc_100D6A7  +
inc dword ptr [ebp-28h]  +
mov edx [ebp-28h] +
add dword ptr [ebp-4] 2 +
cmp edx [ebp-10h] +
jnz loc_100D685  +
cmp eax esi +
jz loc_100D7C2  +
mov edx [ebp-38h] +
cmp [eax] edx +
ja loc_100D7C2  +
mov edx [eax+4] +
lea edi [edx-8] +
mov edx [ebp-28h] +
shr edi 1 +
cmp edx edi +
jnz loc_100D6E5  +
add eax [eax+4] +
cmp eax esi +
jz loc_100D7C2  +
mov edx [ebp-38h] +
cmp [eax] edx +
ja loc_100D7C2  +
and dword ptr [ebp-28h] 0 +
jmp loc_100D6BA  +
***
mov edi [ebp-38h] +
cmp [eax] edi +
jnz loc_100D700  +
movzx edi word ptr [eax+edx*2+8] +
and edi 0FFFh +
cmp edi [ebp-34h] +
jnb loc_100D7C2  +
mov edi 0F000h +
inc dword ptr [ebp-28h]  +
test [eax+edx*2+8] di +
jz loc_100D6A7  +
movzx edx word ptr [eax+edx*2+8] +
mov edi [eax] +
and dword ptr [ebp-4] 0 +
and edx 0FFFh +
lea edi __ImageBase[edx+edi] +
mov [ebp-8] edi +
sub [ebp-8] ecx +
mov [ebp-10h] edi +
jz loc_100D772  +
mov edx [ebp-4] +
movzx edi byte ptr [edx+ecx] +
add edi 3D035533h +
add [ebp-24h] edi +
add edi [ebp-20h] +
mov edx edi +
imul edx edx +
rol edx 3 +
ror edi 3 +
xor edx edi +
imul edx edx +
ror edx 12h +
add [ebp-24h] edx +
inc dword ptr [ebp-4]  +
mov [ebp-20h] edx +
mov edx [ebp-4] +
cmp edx [ebp-8] +
jb loc_100D732  +
mov edi [ebp-10h] +
mov ecx [edi] +
sub ecx [ebp-14h] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] ecx +
mov ecx [ebp-4] +
movzx edx byte ptr [ebp+ecx-18h] +
add edx 3D035533h +
add [ebp-24h] edx +
add edx [ebp-20h] +
mov ecx edx +
imul ecx ecx +
rol ecx 3 +
ror edx 3 +
xor ecx edx +
imul ecx ecx +
ror ecx 12h +
add [ebp-24h] ecx +
inc dword ptr [ebp-4]  +
cmp dword ptr [ebp-4] 4 +
mov [ebp-20h] ecx +
jb loc_100D77E  +
lea ecx [edi+4] +
jmp loc_100D6A7  +
***
mov edi [ebp-1Ch] +
xor esi esi +
sub edi ecx +
jz loc_100D7FF  +
movzx edx byte ptr [esi+ecx] +
add edx 3D035533h +
add [ebp-24h] edx +
add edx [ebp-20h] +
mov eax edx +
imul eax eax +
rol eax 3 +
ror edx 3 +
xor eax edx +
imul eax eax +
ror eax 12h +
add [ebp-24h] eax +
mov [ebp-20h] eax +
inc esi  +
cmp esi edi +
jb loc_100D7CB  +
add dword ptr [ebx+8] 10h +
mov eax [ebp-0Ch] +
mov ecx [ebp-24h] +
mov eax [eax] +
and eax 0FFFFFFFh +
cmp ecx ds:__ImageBase[eax] +
jnz loc_100D827  +
mov ecx [ebp-20h] +
cmp ecx ds:dword_1000004[eax] +
jz loc_100D8D2  +
call sub_100E99C  +
mov edx 0FFFFF000h +
lea ecx [ebx+0Ch] +
and ecx 0FFFFFFFCh +
and eax edx +
mov [ebp-1Ch] eax +
lea esi [ecx+0FFFh] +
and esi edx +
mov dword ptr [ebx+8] offset sub_1025029 +
mov edx 0FFFFh +
xor eax eax +
mov edi dword_104D00C +
imul edi edi +
add edi 269EC3h +
mov dword_104D00C edi +
shr edi 10h +
shl eax 10h +
shr edx 10h +
or eax edi +
test edx edx +
jnz loc_100D852  +
mov edi 0FFFFh +
div  edi +
mov eax [ebp-1Ch] +
mov [ebp-3Ch] eax +
inc edx  +
mov [ebp-44h] edx +
mov dword ptr [ebp-1Ch] 0 +
jmp loc_100D89B  +
mov eax [ebp-1Ch] +
mov [ecx] eax +
add ecx 4 +
cmp ecx esi +
jb loc_100D893  +
mov eax [ebp-0Ch] +
mov dword ptr [ebx+8] offset sub_1025029 +
mov eax [eax+8] +
mov ecx [ebp-44h] +
and eax 0FFFFFFFh +
mov [ebp-48h] ecx +
mov edx ecx +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_104D060 +
xor edx ecx +
and dword ptr [ebp-44h] 0 +
mov [ebp-50h] edx +
mov eax 0E552FB93h +
mov esi [ebp-50h] +
mov edi [ebp-48h] +
mov ecx [ebp-44h] +
mov eax [ebp-4Ch] +
mov edx [ebp-3Ch] +
mov ebx [ebp-40h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp-4Ch] eax +
mov [ebp-44h] ecx +
mov [ebp-3Ch] edx +
mov [ebp-40h] ebx +
mov [ebp-50h] esi +
lea esi [ebp+4] +
mov [ebp-48h] edi +
mov ebx [esi+4] +
mov eax ebx +
sub esi 4 +
push ebx  +
mov [ebp-0Ch] esi +
mov [ebp-14h] ebx +
mov eax 0E0A45E4Ch +
mov edi [ebx+0Ch] +
mov eax 0FFFFFFFh +
mov ebx [ebx+4] +
mov edx ds:off_1005164 +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-20h] 0 +
pop ecx  +
and ebx eax +
and edi eax +
mov eax offset __ImageBase +
mov ecx eax +
add ebx eax +
sub ecx edx +
mov [ebp-18h] ecx +
jnz loc_100D9A5  +
and dword ptr [ebp-4] 0 +
test edi edi +
jbe loc_100DBB2  +
mov esi 7FFFFFFFh +
mov ecx 2B21F8BBh +
mov eax [ebp-4] +
movzx eax byte ptr [eax+ebx] +
mov edx ecx +
add eax ecx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax esi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax esi +
add eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
cmp [ebp-4] edi +
jb loc_100D962  +
jmp loc_100DBAF  +
mov edx ebx +
lea ecx [ebx+edi] +
sub edx eax +
mov esi edx +
and esi 0FFFFF000h +
mov [ebp-4] esi +
add edi edx +
mov esi edx +
sub esi [ebp-4] +
mov [ebp-1Ch] ecx +
mov ecx ds:dword_100003C +
mov edx edi +
and edx 0FFFFF000h +
sub edi edx +
mov [ebp-34h] edi +
mov edi ds:dword_10000A0[ecx] +
add edi eax +
mov eax ds:dword_10000A4[ecx] +
add eax edi +
mov [ebp-38h] edx +
mov [ebp-30h] eax +
jmp loc_100D9F6  +
mov ecx [ebp-4] +
cmp [edi] ecx +
jnb loc_100D9FA  +
add edi [edi+4] +
cmp edi eax +
jnz loc_100D9EC  +
and dword ptr [ebp-28h] 0 +
cmp edi eax +
jz loc_100DA3B  +
mov ecx [ebp-4] +
cmp [edi] ecx +
jnz loc_100DA3B  +
mov ecx [edi+4] +
sub ecx 8 +
shr ecx 1 +
mov [ebp-10h] ecx +
jz loc_100DA3B  +
lea ecx [edi+8] +
mov [ebp-4] ecx +
mov ecx [ebp-4] +
movzx ecx word ptr [ecx] +
and ecx 0FFFh +
cmp ecx esi +
jnb loc_100DA3B  +
inc dword ptr [ebp-28h]  +
mov ecx [ebp-10h] +
add dword ptr [ebp-4] 2 +
cmp [ebp-28h] ecx +
jnz loc_100DA1C  +
mov esi 7FFFFFFFh +
mov ecx 2B21F8BBh +
jmp loc_100DA4D  +
mov edx [ebp-38h] +
mov eax [ebp-30h] +
cmp edi eax +
jz loc_100DB6A  +
cmp [edi] edx +
ja loc_100DB6A  +
mov eax [edi+4] +
lea edx [eax-8] +
shr edx 1 +
mov eax [ebp-28h] +
cmp eax edx +
jnz loc_100DA89  +
add edi [edi+4] +
cmp edi [ebp-30h] +
jz loc_100DB6A  +
mov eax [ebp-38h] +
cmp [edi] eax +
ja loc_100DB6A  +
and dword ptr [ebp-28h] 0 +
jmp loc_100DA5D  +
***
mov edx [ebp-38h] +
cmp [edi] edx +
jnz loc_100DAA3  +
movzx eax word ptr [edi+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-34h] +
jnb loc_100DB6A  +
mov edx 0F000h +
mov eax [ebp-28h] +
inc dword ptr [ebp-28h]  +
test [edi+eax*2+8] dx +
jz loc_100DA47  +
movzx eax word ptr [edi+eax*2+8] +
mov edx [edi] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] ebx +
mov [ebp-10h] eax +
jz loc_100DB1B  +
mov eax [ebp-4] +
movzx eax byte ptr [eax+ebx] +
add eax ecx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax esi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax esi +
add eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
mov eax [ebp-4] +
cmp eax [ebp-8] +
jb loc_100DAD7  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
mov [ebp-8] eax +
xor ebx ebx +
mov edx ecx +
movzx eax byte ptr [ebp+ebx-8] +
add eax ecx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax esi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax esi +
add eax edx +
add [ebp-24h] eax +
mov [ebp-20h] eax +
inc ebx  +
cmp ebx 4 +
jb loc_100DB25  +
mov ebx [ebp-10h] +
add ebx 4 +
jmp loc_100DA47  +
***
xor edi edi +
mov eax [ebp-1Ch] +
sub eax ebx +
mov [ebp-1Ch] eax +
jz loc_100DBAF  +
movzx eax byte ptr [edi+ebx] +
add eax ecx +
add [ebp-24h] eax +
mov edx ecx +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax esi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax esi +
add eax edx +
add [ebp-24h] eax +
inc edi  +
mov [ebp-20h] eax +
cmp edi [ebp-1Ch] +
jb loc_100DB76  +
mov esi [ebp-0Ch] +
add dword ptr [esi+8] 10h +
mov ecx [ebp-24h] +
mov eax [ebp-14h] +
mov eax [eax] +
and eax 0FFFFFFFh +
cmp ecx ds:__ImageBase[eax] +
jnz loc_100DBDA  +
mov ecx [ebp-20h] +
cmp ecx ds:dword_1000004[eax] +
jz loc_100DC89  +
call sub_100E99C  +
lea ecx [esi+0Ch] +
mov edx 0FFFFF000h +
and ecx 0FFFFFFFCh +
and eax edx +
lea edi [ecx+0FFFh] +
and edi edx +
mov [ebp-1Ch] eax +
mov dword ptr [esi+8] offset sub_1025029 +
mov edx 0FFFFh +
xor eax eax +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100DC05  +
mov ebx 0FFFFh +
div  ebx +
mov eax [ebp-1Ch] +
mov [ebp-3Ch] eax +
inc edx  +
mov [ebp-44h] edx +
mov eax ecx +
cmp ecx edi +
mov dword ptr [ebp-1Ch] 0 +
jnb loc_100DC56  +
mov ecx [ebp-1Ch] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_100DC4A  +
mov eax [ebp-14h] +
mov dword ptr [esi+8] offset sub_1025029 +
mov ecx [ebp-44h] +
mov edx ecx +
mov eax [eax+8] +
mov [ebp-48h] ecx +
and eax 0FFFFFFFh +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_104E454 +
xor edx ecx +
and dword ptr [ebp-44h] 0 +
mov [ebp-50h] edx +
mov eax 0D94606BBh +
mov esi [ebp-50h] +
mov ecx [ebp-44h] +
mov ebx [ebp-40h] +
mov eax [ebp-4Ch] +
mov edi [ebp-48h] +
mov edx [ebp-3Ch] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push ebp  +
mov edi edi +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [eax] +
push ebx  +
push esi  +
mov esi offset Address +
shr ecx 2 +
and ecx 0FFFFFFFh +
add ecx offset __ImageBase +
mov [ebp-4] ecx +
lea ecx [eax+4] +
push edi  +
lea edi [ecx-1] +
cmp edi esi +
jb loc_100DD0E  +
mov eax ds:dword_100DDCC +
mov edx ds:dword_1004CB8 +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_100DD0E  +
mov eax edi +
xor edx edx +
mov ebx ds:dword_1004CB8 +
sub eax esi +
div  ebx +
mov edx ds:dword_1004CB8 +
imul edx eax +
lea ebx Address[edx] +
jmp loc_100DD10  +
xor ebx ebx +
test ebx ebx +
jnz loc_100DD1C  +
and edi 0FFFF0000h +
mov ebx edi +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_100DD27  +
xor eax eax +
add eax ebx +
push 40h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100DD2C  +
mov eax 5F46024Bh +
cmp ebx esi +
jb loc_100DD73  +
mov ecx ds:dword_1004CB8 +
mov eax ds:dword_100DDCC +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_100DD73  +
mov eax ebx +
sub eax esi +
xor edx edx +
mov ecx ds:dword_1004CB8 +
div  ecx +
mov ecx ds:dword_1004CB8 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_100DD75  +
xor ecx ecx +
test ecx ecx +
jz loc_100DD9A  +
mov eax ebx +
sub eax esi +
xor edx edx +
mov ecx ds:dword_1004CB8 +
div  ecx +
mov ecx ds:dword_100DDCC +
mov dword_104D078[eax*4] 0C4A6h +
jmp loc_100DDB7  +
call ds:__imp_GetLastError  +
push 8000h  +
mov esi eax +
push 0  +
push ebx  +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov ecx [ebp-4] +
mov eax [ebp+8] +
pop edi  +
pop esi  +
mov [eax+8] ecx +
add dword ptr [eax+0Ch] 4 +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
mov eax dword ptr aNc@ +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [ebp-6Ch] eax +
add eax 0Ch +
push ebx  +
mov [ebp-70h] eax +
mov ebx offset __ImageBase +
mov eax [eax] +
mov edx [eax] +
shr edx 1 +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi 0FFFFFFFh +
mov [ebp-4Ch] ecx +
and edx edi +
mov ecx [eax+4] +
mov [ebp-80h] edx +
add eax 0Ch +
and ecx edi +
add ecx ebx +
and esi edi +
lea edx [eax-1] +
cmp edx offset Address +
mov [ebp-68h] ecx +
mov [ebp-50h] esi +
mov [ebp-20h] eax +
mov [ebp-24h] edx +
jb loc_100DE81  +
mov eax ds:dword_100DDCC +
mov edx ds:dword_1004CB8 +
imul eax edx +
lea eax Address[eax] +
mov edx [ebp-24h] +
cmp edx eax +
jnb loc_100DE7E  +
mov eax edx +
mov esi ds:dword_1004CB8 +
sub eax offset Address +
xor edx edx +
div  esi +
mov edx ds:dword_1004CB8 +
imul edx eax +
lea eax Address[edx] +
mov edx [ebp-24h] +
mov esi [ebp-50h] +
mov [ebp-18h] eax +
mov eax [ebp-20h] +
jmp loc_100DE85  +
mov eax [ebp-20h] +
and dword ptr [ebp-18h] 0 +
cmp dword ptr [ebp-18h] 0 +
jnz loc_100DE94  +
and edx 0FFFF0000h +
mov [ebp-18h] edx +
mov edx [ebp-18h] +
sub eax edx +
add eax 0FFFFFFC0h +
jns loc_100DEA0  +
xor eax eax +
add eax edx +
mov dword ptr [ebp-24h] 40h +
mov byte ptr [eax] 0 +
inc eax  +
dec dword ptr [ebp-24h]  +
jnz loc_100DEA9  +
lea eax [ecx+esi] +
mov [ebp-48h] eax +
mov eax ds:dword_1004CB8 +
mov [ebp-44h] ecx +
sub eax esi +
sub [ebp-44h] ebx +
lea ecx [eax+1] +
xor eax eax +
mov [ebp-24h] ecx +
test ecx ecx +
jz loc_100DEFB  +
mov edx dword_104D00C +
shr dword ptr [ebp-24h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_104D00C edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-24h] 0 +
jnz loc_100DED1  +
xor edx edx +
div  ecx +
mov eax [ebp-18h] +
push esi  +
push dword ptr [ebp-44h]  +
add eax edx +
mov [ebp-24h] eax +
mov eax 0F17EE055h +
lea esi [ebp-78h] +
mov eax [ebp-48h] +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-78h] ecx +
mov [ebp-74h] eax +
mov byte ptr [ebp-11h] 0 +
mov eax 0EFBF7A45h +
mov eax ebx +
mov esi [ebp-74h] +
mov ecx [ebp-78h] +
and ecx edi +
and esi edi +
xor edx edx +
mov edi ds:off_1005164 +
add ecx ebx +
sub eax edi +
mov [ebp-30h] edx +
mov [ebp-2Ch] edx +
mov [ebp-40h] eax +
jnz loc_100DF90  +
cmp esi edx +
mov [ebp-18h] edx +
jbe loc_100E156  +
mov edi 74A3CF2Eh +
mov eax [ebp-18h] +
movzx eax byte ptr [eax+ecx] +
add eax edi +
add [ebp-30h] eax +
add eax [ebp-2Ch] +
imul eax eax +
mov edx edi +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-30h] eax +
inc dword ptr [ebp-18h]  +
mov [ebp-2Ch] eax +
cmp [ebp-18h] esi +
jb loc_100DF5F  +
jmp loc_100E156  +
mov edx ds:dword_100003C +
mov edi ecx +
lea edx dword_10000A0[edx] +
sub edi ebx +
lea eax [ecx+esi] +
mov [ebp-3Ch] eax +
mov eax [edx] +
mov edx [edx+4] +
mov [ebp-18h] edx +
mov edx edi +
and edx 0FFFFF000h +
mov [ebp-34h] edi +
sub edi edx +
mov [ebp-20h] edi +
mov edi [ebp-34h] +
add esi edi +
mov edi esi +
and edi 0FFFFF000h +
mov [ebp-64h] edi +
sub esi edi +
add eax ebx +
mov edi [ebp-18h] +
mov [ebp-60h] esi +
mov esi eax +
add edi eax +
cmp eax edi +
mov [ebp-5Ch] edi +
jz loc_100DFEF  +
cmp [esi] edx +
jnb loc_100DFEF  +
add esi [esi+4] +
cmp esi [ebp-5Ch] +
jnz loc_100DFE3  +
and dword ptr [ebp-54h] 0 +
cmp esi [ebp-5Ch] +
jz loc_100E020  +
cmp [esi] edx +
jnz loc_100E020  +
mov edx [esi+4] +
sub edx 8 +
shr edx 1 +
jz loc_100E020  +
lea edi [esi+8] +
movzx eax word ptr [edi] +
and eax 0FFFh +
cmp eax [ebp-20h] +
jnb loc_100E020  +
inc dword ptr [ebp-54h]  +
inc edi  +
inc edi  +
cmp [ebp-54h] edx +
jnz loc_100E009  +
mov edi 74A3CF2Eh +
cmp esi [ebp-5Ch] +
jz loc_100E123  +
mov eax [ebp-64h] +
cmp [esi] eax +
ja loc_100E123  +
mov eax [esi+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp [ebp-54h] eax +
jnz loc_100E063  +
add esi [esi+4] +
cmp esi [ebp-5Ch] +
jz loc_100E123  +
mov eax [ebp-64h] +
cmp [esi] eax +
ja loc_100E123  +
and dword ptr [ebp-54h] 0 +
jmp loc_100E039  +
***
mov eax [ebp-64h] +
cmp [esi] eax +
jnz loc_100E080  +
mov eax [ebp-54h] +
movzx eax word ptr [esi+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-60h] +
jnb loc_100E123  +
mov edx [ebp-54h] +
mov eax 0F000h +
inc dword ptr [ebp-54h]  +
test [esi+edx*2+8] ax +
jz loc_100E025  +
movzx eax word ptr [esi+edx*2+8] +
mov edx [esi] +
and dword ptr [ebp-18h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-20h] eax +
sub [ebp-20h] ecx +
mov [ebp-38h] eax +
jz loc_100E0E6  +
mov eax [ebp-18h] +
movzx eax byte ptr [eax+ecx] +
add eax edi +
add [ebp-30h] eax +
add eax [ebp-2Ch] +
imul eax eax +
mov edx edi +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-30h] eax +
inc dword ptr [ebp-18h]  +
mov [ebp-2Ch] eax +
mov eax [ebp-18h] +
cmp eax [ebp-20h] +
jb loc_100E0B4  +
mov eax [ebp-38h] +
mov eax [eax] +
sub eax [ebp-40h] +
mov [ebp-7Ch] eax +
xor ecx ecx +
movzx eax byte ptr [ebp+ecx-7Ch] +
mov edx edi +
add eax edi +
add [ebp-30h] eax +
add eax [ebp-2Ch] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-30h] eax +
inc ecx  +
mov [ebp-2Ch] eax +
cmp ecx 4 +
jb loc_100E0F0  +
mov ecx [ebp-38h] +
add ecx 4 +
jmp loc_100E025  +
***
mov eax [ebp-3Ch] +
xor esi esi +
sub eax ecx +
mov [ebp-34h] eax +
jz loc_100E156  +
mov edx edi +
movzx eax byte ptr [ecx+esi] +
add eax edi +
add [ebp-30h] eax +
add eax [ebp-2Ch] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-30h] eax +
mov [ebp-2Ch] eax +
inc esi  +
cmp esi [ebp-34h] +
jb loc_100E12F  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-30h] +
mov [ebp+eax-10h] cl +
inc eax  +
cmp eax 8 +
jb loc_100E158  +
mov eax 5F7AA1E6h +
mov esi [ebp-68h] +
mov eax [ebp-24h] +
mov [ebp-3Ch] eax +
mov eax [ebp-50h] +
and eax 7 +
mov [ebp-34h] eax +
jz loc_100E524  +
mov edi [ebp-44h] +
xor ecx ecx +
not edi  +
cmp eax ecx +
mov [ebp-18h] ecx +
mov [ebp-20h] ecx +
mov [ebp-1Ch] ecx +
jle loc_100E1C5  +
push 38h  +
pop edx  +
movzx ebx byte ptr [esi] +
cmp dword ptr [ebp-1Ch] 4 +
jge loc_100E1B2  +
lea ecx [edx-20h] +
shl ebx cl +
or [ebp-20h] ebx +
jmp loc_100E1B9  +
mov ecx edx +
shl ebx cl +
or [ebp-18h] ebx +
inc esi  +
inc dword ptr [ebp-1Ch]  +
sub edx 8 +
cmp [ebp-1Ch] eax +
jl loc_100E19F  +
mov ecx [ebp-10h] +
xor ecx edi +
mov eax [ebp-0Ch] +
sub eax ecx +
movzx ebx word ptr [ebp-0Ch] +
movzx ecx word ptr [ebp-0Ah] +
xor eax [ebp-44h] +
mov edx eax +
sub edx ecx +
sub edx [ebp-10h] +
xor edi edx +
mov [ebp-1Ch] ecx +
movzx edx word ptr [ebp-10h] +
mov [ebp-38h] edx +
xor edx edi +
imul edx ebx +
mov ebx edi +
shr ebx 3 +
add edx ebx +
xor eax edx +
mov ebx eax +
xor ecx eax +
movzx edx word ptr [ebp-0Eh] +
mov [ebp-40h] edx +
rol ecx 3 +
imul edx ecx +
ror ebx 0Eh +
xor ebx edx +
xor edi ebx +
mov edx edi +
mov ebx [ebp-38h] +
mov ecx edi +
sub ecx [ebp-0Ch] +
ror ecx 4 +
imul ebx ecx +
mov ecx [ebp-10h] +
rol edx 7 +
add edx ebx +
xor eax edx +
mov edx eax +
mov ebx [ebp-1Ch] +
sub ecx eax +
rol ecx 6 +
imul ebx ecx +
ror edx 6 +
add edx ebx +
xor edi edx +
movzx edx word ptr [ebp-0Ch] +
mov ebx edi +
mov ecx edi +
sub ecx [ebp-10h] +
rol ecx 0Fh +
imul edx ecx +
movzx ecx word ptr [ebp-0Ch] +
rol ebx 0Ch +
xor ebx edx +
xor eax ebx +
mov edx eax +
xor ecx eax +
imul ecx [ebp-40h] +
ror edx 4 +
sub ecx edx +
xor edi ecx +
mov ecx [ebp-0Ch] +
xor ecx [ebp-10h] +
xor ecx edi +
xor eax ecx +
mov edx eax +
mov ecx [ebp-1Ch] +
sub edx ecx +
xor edx [ebp-10h] +
xor edi edx +
movzx edx word ptr [ebp-0Ch] +
mov ebx edi +
sub ebx ecx +
imul ebx edx +
mov edx edi +
shr edx 3 +
sub ebx edx +
mov edx [ebp-40h] +
xor eax ebx +
xor ecx eax +
mov ebx eax +
rol ecx 1 +
imul edx ecx +
mov ecx [ebp-38h] +
and dword ptr [ebp-1Ch] 0 +
ror ebx 0Eh +
sub edx ebx +
xor edi edx +
mov edx [ebp-0Ch] +
sub edx edi +
ror edx 4 +
imul ecx edx +
mov ebx edi +
xor edi [ebp-18h] +
ror ebx 0Dh +
sub ecx ebx +
xor ecx [ebp-20h] +
mov ebx [ebp-34h] +
xor eax ecx +
mov [ebp-38h] eax +
mov ecx edi +
test ebx ebx +
jle loc_100E309  +
cmp dword ptr [ebp-1Ch] 4 +
jge loc_100E2F0  +
rol dword ptr [ebp-38h] 8 +
mov dl [ebp-38h] +
mov ebx [ebp-3Ch] +
inc dword ptr [ebp-3Ch]  +
xor [ebp-11h] dl +
mov [ebx] dl +
jmp loc_100E2FE  +
mov edx [ebp-3Ch] +
inc dword ptr [ebp-3Ch]  +
rol ecx 8 +
xor [ebp-11h] cl +
mov [edx] cl +
inc dword ptr [ebp-1Ch]  +
mov ebx [ebp-34h] +
cmp [ebp-1Ch] ebx +
jl loc_100E2D6  +
add ebx 0FFFFFFFCh +
test ebx ebx +
jle loc_100E50A  +
push 4  +
pop ecx  +
sub ecx ebx +
shl ecx 3 +
shr edi cl +
shl edi cl +
mov edx edi +
mov ebx offset __ImageBase +
mov ecx [ebp-50h] +
shr ecx 3 +
test ecx ecx +
jbe loc_100E538  +
mov edi [ebp-0Ch] +
xor edi [ebp-10h] +
mov [ebp-34h] ecx +
mov [ebp-84h] edi +
movzx edi word ptr [ebp-0Ah] +
mov [ebp-1Ch] edi +
movzx edi word ptr [ebp-0Eh] +
mov [ebp-40h] edi +
movzx ebx byte ptr [esi+5] +
movzx ecx byte ptr [esi] +
movzx edi byte ptr [esi+1] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+2] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+3] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+4] +
shl edi 8 +
or edi ebx +
shl edi 8 +
movzx ebx byte ptr [esi+6] +
or edi ebx +
movzx ebx byte ptr [esi+7] +
shl edi 8 +
or edi ebx +
mov ebx [ebp-0Ch] +
mov [ebp-88h] edi +
xor edx edi +
mov edi [ebp-10h] +
xor edi edx +
mov [ebp-38h] ecx +
sub ebx edi +
xor ebx ecx +
xor eax ebx +
mov ebx [ebp-40h] +
mov ecx eax +
sub ecx [ebp-1Ch] +
sub ecx [ebp-10h] +
add esi 8 +
xor edx ecx +
movzx ecx word ptr [ebp-10h] +
mov edi ecx +
movzx ecx word ptr [ebp-0Ch] +
xor edi edx +
imul edi ecx +
mov ecx edx +
shr ecx 3 +
add edi ecx +
mov ecx [ebp-1Ch] +
xor eax edi +
xor ecx eax +
mov edi eax +
rol ecx 3 +
imul ebx ecx +
ror edi 0Eh +
xor edi ebx +
xor edx edi +
mov ecx edx +
movzx edi word ptr [ebp-10h] +
mov ebx edx +
sub ecx [ebp-0Ch] +
ror ecx 4 +
imul edi ecx +
rol ebx 7 +
add ebx edi +
xor eax ebx +
mov ecx [ebp-10h] +
sub ecx eax +
mov edi eax +
rol ecx 6 +
mov ebx [ebp-1Ch] +
imul ebx ecx +
ror edi 6 +
add edi ebx +
xor edx edi +
movzx edi word ptr [ebp-0Ch] +
mov ecx edx +
mov ebx edx +
sub ecx [ebp-10h] +
rol ecx 0Fh +
imul edi ecx +
rol ebx 0Ch +
movzx ecx word ptr [ebp-0Ch] +
xor ebx edi +
xor eax ebx +
mov ebx [ebp-40h] +
mov edi eax +
ror edi 4 +
xor ecx eax +
imul ecx [ebp-40h] +
sub ecx edi +
xor edx ecx +
mov ecx [ebp-84h] +
xor ecx edx +
xor eax ecx +
mov ecx eax +
sub ecx [ebp-1Ch] +
xor ecx [ebp-10h] +
xor edx ecx +
movzx ecx word ptr [ebp-0Ch] +
mov edi edx +
sub edi [ebp-1Ch] +
imul edi ecx +
mov ecx edx +
shr ecx 3 +
sub edi ecx +
mov ecx [ebp-1Ch] +
xor eax edi +
xor ecx eax +
mov edi eax +
rol ecx 1 +
imul ebx ecx +
mov ecx [ebp-0Ch] +
ror edi 0Eh +
sub ebx edi +
xor edx ebx +
sub ecx edx +
mov ebx edx +
ror ecx 4 +
movzx edi word ptr [ebp-10h] +
imul edi ecx +
mov cl [ebp-11h] +
xor edx [ebp-18h] +
ror ebx 0Dh +
sub edi ebx +
xor edi [ebp-20h] +
xor eax edi +
mov edi [ebp-3Ch] +
mov [edi+3] al +
mov [edi+7] dl +
xor cl al +
xor cl dl +
ror eax 8 +
mov [edi+2] al +
xor cl al +
ror edx 8 +
xor cl dl +
mov [edi+6] dl +
ror eax 8 +
xor cl al +
ror edx 8 +
xor cl dl +
mov [edi+1] al +
ror eax 8 +
mov [edi+5] dl +
ror edx 8 +
mov bl dl +
xor bl al +
xor cl bl +
mov ebx [ebp-38h] +
mov [edi] al +
mov [edi+4] dl +
mov [ebp-20h] ebx +
add edi 8 +
mov ebx [ebp-88h] +
dec dword ptr [ebp-34h]  +
mov [ebp-11h] cl +
ror eax 8 +
ror edx 8 +
mov [ebp-18h] ebx +
mov [ebp-3Ch] edi +
jnz loc_100E352  +
mov ebx offset __ImageBase +
jmp loc_100E53B  +
xor edx edx +
test ebx ebx +
jge loc_100E322  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_100E322  +
***
mov eax [ebp-44h] +
xor edx edx +
mov [ebp-20h] eax +
not eax  +
mov [ebp-18h] eax +
xor eax eax +
jmp loc_100E327  +
***
mov cl [ebp-11h] +
mov eax [ebp-48h] +
cmp cl [eax+8] +
jz loc_100E5CF  +
call sub_100E99C  +
mov edx 0FFFFh +
mov edi eax +
mov eax 0FFFFF000h +
mov ecx [ebp-70h] +
and ecx 0FFFFFFFCh +
lea esi [ecx+0FFFh] +
and edi eax +
and esi eax +
mov eax [ebp-6Ch] +
mov dword ptr [eax+8] offset sub_1025029 +
xor eax eax +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100E574  +
mov ebx 0FFFFh +
div  ebx +
mov eax [ebp-4Ch] +
mov [eax+14h] edi +
inc edx  +
mov [eax+0Ch] edx +
mov dword ptr [ebp-4Ch] 0 +
cmp ecx esi +
mov eax ecx +
jnb loc_100E5C5  +
mov ecx [ebp-4Ch] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100E5B9  +
mov eax offset sub_1025029 +
jmp loc_100E6A0  +
mov eax [ebp-68h] +
mov ecx ds:off_1005164 +
sub eax [ebp-24h] +
sub ebx ecx +
mov [ebp-34h] eax +
mov [ebp-48h] ebx +
jnz loc_100E5ED  +
test eax eax +
jz loc_100E68E  +
mov esi [ebp-24h] +
mov edi [ebp-44h] +
mov eax [ebp-50h] +
sub esi [ebp-68h] +
mov ecx ds:dword_100EB28 +
add eax edi +
mov [ebp-4Ch] eax +
xor ebx ebx +
dec ecx  +
js loc_100E630  +
lea eax [ecx+ebx] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp edi edx +
jnb loc_100E627  +
lea ecx [eax-1] +
jmp loc_100E62C  +
jbe loc_100E634  +
lea ebx [eax+1] +
cmp ecx ebx +
jge loc_100E609  +
mov edi ebx +
jmp loc_100E686  +
mov edi eax +
jmp loc_100E686  +
mov eax ds:dword_100EB2C[edi*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-4Ch] +
jnb loc_100E68E  +
lea ebx __ImageBase[ecx+esi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100E679  +
dec ecx  +
jz loc_100E674  +
dec ecx  +
jnz loc_100E67F  +
mov edx [ebp-48h] +
jmp loc_100E67F  +
mov edx [ebp-34h] +
jmp loc_100E67F  +
mov edx [ebp-48h] +
sub edx [ebp-34h] +
dec eax  +
dec eax  +
jnz loc_100E685  +
add [ebx] edx +
inc edi  +
cmp edi ds:dword_100EB28 +
jb loc_100E638  +
mov eax ds:dword_1004CB8 +
mov eax 618496B4h +
mov ecx [ebp-24h] +
mov eax [ebp-80h] +
add eax ecx +
mov ecx [ebp-6Ch] +
mov [ecx+8] eax +
mov ecx [ebp-4] +
mov eax [ebp-70h] +
add dword ptr [eax] 0Ch +
pop edi  +
xor ecx ebp +
pop esi  +
pop ebx  +
call sub_1028111  +
leave   +
retn 8  +
***
call sub_101C897  +
mov edi edi +
push esi  +
mov esi ds:DeleteCriticalSection +
jmp loc_100E976  +
dec dword_104D540  +
mov eax dword_104D540 +
imul eax eax +
add eax offset byte_104E308 +
push eax  +
call esi  +
cmp dword_104D540 0 +
ja loc_100E960  +
cmp dword_104D0B0 0 +
jz loc_100E98F  +
push offset CriticalSection  +
call esi  +
and dword_104D0B0 0 +
pop esi  +
retn   +
***
mov edi edi +
lea eax [ebp+4] +
add eax 4 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push offset dword_1005EF8  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+10h] +
push eax  +
push 0Ch  +
push offset dword_1005EF8  +
push 2Bh  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_100EAB2  +
dec eax  +
jz loc_100EAA9  +
push 57h  +
pop eax  +
jmp loc_100EB20  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_100EAD8  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_100EB01  +
cmp dword ptr [esi+10h] 0 +
jz loc_100EB01  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_100EB1E  +
test cl 2 +
jz loc_100EB0F  +
mov esi [esi+10h] +
test esi esi +
jz loc_100EB0F  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi off_104D01C +
push edi  +
mov edi offset off_104D01C +
cmp esi edi +
jz loc_100F9BC  +
jmp loc_100F9B2  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_100F9B0  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_100F994  +
mov off_104D01C edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 0CCh +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov [esp+0D8h] ebx +
mov [esp+0DCh] ebx +
mov [esp+0E4h] bl +
mov [esp+6Bh] bl +
mov dword ptr [esp+38h] 8000000Ah +
call ds:HeapSetInformation  +
mov edi 7FFFFFFFh +
test eax eax +
jnz loc_100FFB1  +
call sub_102063C  +
dec eax  +
add al [eax] +
jo near ptr loc_100FF9A+1  +
in eax 4 +
sar byte ptr [eax] 0E5h +
add al 0B0h +
add [esi+0] ch +
mov al 0FFh +
adc eax offset __imp_GetLastError +
call sub_101CBFA  +
dec eax  +
in eax 4 +
nop   +
js near ptr loc_100FFD8+2  +
add al dh +
clc   +
or eax 0E544A000h +
add al 0A0h +
cmp eax ebx +
jle loc_100FFA8  +
call sub_102063C  +
dec eax  +
add al [eax] +
pusha   +
cmp al 0E5h +
add al 80h +
cmp ch ah +
add al 80h +
add [esi+0] ch +
shl large byte ptr ds:0FFFFh 1 +
or eax 80070000h +
mov [esp+18h] eax +
jmp loc_10111EC  +
xor eax eax +
mov dword_104D450 ebx +
mov dword_104D440 ebx +
mov byte_104D458 1 +
mov byte_104D459 bl +
mov word_104D45A ax +
mov dword_104D45C ebx +
mov dword_104D460 offset dword_10098D0 +
mov off_104D01C offset dword_104D440 +
call sub_100F938  +
mov eax off_104D01C +
cmp eax offset off_104D01C +
jz loc_101000A  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100EA38  +
call sub_101CBFA  +
pop esp  +
in eax 4 +
ror byte ptr [eax] 1 +
pop edi  +
add al al +
cmp al 0 +
add al al +
jz near ptr loc_100FFEC+1  +
add al 0C0h +
mov dword ptr [esp+28h] offset loc_101001F +
mov eax [esp+28h] +
test byte_104D504 1 +
jnz loc_1010050  +
call sub_10418C2  +
inc esp  +
pop edi  +
add [eax+54h] dl +
in eax 4 +
sal byte ptr [eax+eax] 1 +
add al dh +
push eax  +
in eax 4 +
inc eax  +
xor eax eax +
jmp loc_101106B  +
mov eax dword_104D4F4 +
and eax 3 +
imul eax eax +
add eax offset byte_104E308 +
push eax  +
call ds:EnterCriticalSection  +
call sub_10226D6  +
xor ch ah +
add al 90h +
sub al 0E5h +
add al 20h +
sbb [eax] ch +
add [eax+48h] dl +
jo $+2  +
adc [ecx+3974245Ch] cl +
sbb eax offset dword_104D500 +
jnz loc_10108FD  +
mov eax dword_104D4F0 +
dec eax  +
cmp eax ebx +
mov [esp+84h] ebx +
mov [esp+88h] ebx +
mov [esp+8Ch] ebx +
mov [esp+90h] ebx +
mov [esp+94h] ebx +
mov [esp+14h] eax +
jl loc_10108E4  +
mov eax [esp+14h] +
shl eax 4 +
mov ebx dword_104D518[eax] +
mov ecx dword_104D514[eax] +
mov edx 0FFFFFFFh +
mov [esp+3Ch] eax +
and ebx edx +
lea eax dword_104D50C[eax] +
and ecx edx +
add ebx offset __ImageBase +
mov esi eax +
mov [esp+18h] ebx +
mov [esp+78h] ecx +
mov [esp+80h] eax +
mov eax 7450095Ch +
mov eax [esp+84h] +
mov esi [esp+78h] +
cmp ebx eax +
jb loc_1010126  +
mov ecx [esp+88h] +
add ecx eax +
lea edx [esi+ebx] +
cmp edx ecx +
jbe loc_10101E3  +
cmp dword ptr [esp+94h] 0 +
jz loc_1010155  +
lea ecx [esp+8Ch] +
push ecx  +
push dword ptr [esp+90h]  +
push dword ptr [esp+90h]  +
push eax  +
call ds:VirtualProtect  +
and dword ptr [esp+94h] 0 +
cmp dword ptr [esp+90h] 0 +
jz loc_1010172  +
and dword ptr [esp+90h] 0 +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
and dword ptr [esp+8Ch] 0 +
mov ecx 0FFFFF000h +
mov eax ebx +
and eax ecx +
lea edx [esi+ebx+0FFFh] +
and edx ecx +
sub edx eax +
push offset CriticalSection  +
mov [esp+88h] eax +
mov [esp+8Ch] edx +
call ds:EnterCriticalSection  +
lea eax [esp+8Ch] +
push eax  +
push 40h  +
push dword ptr [esp+90h]  +
mov dword ptr [esp+9Ch] 1 +
push dword ptr [esp+90h]  +
call ds:VirtualProtect  +
test eax eax +
jz loc_1010819  +
mov dword ptr [esp+94h] 1 +
test ebx ebx +
jz loc_1010819  +
mov eax [esp+80h] +
test byte ptr [eax] 1 +
jz loc_10107EF  +
mov byte ptr [esp+13h] 0 +
test esi esi +
jbe loc_1010723  +
mov esi offset dword_104D4F8 +
mov eax 6989E324h +
mov ebx dword_104D4FC +
mov esi dword_104D4F8 +
mov ecx ds:off_1005164 +
and dword ptr [esp+50h] 0 +
and dword ptr [esp+54h] 0 +
mov eax 0FFFFFFFh +
and esi eax +
and ebx eax +
mov eax offset __ImageBase +
add esi eax +
sub eax ecx +
mov [esp+70h] eax +
jnz loc_101029A  +
xor ecx ecx +
test ebx ebx +
jbe loc_10104DA  +
movzx eax byte ptr [ecx+esi] +
sub eax 1D913679h +
add [esp+50h] eax +
add eax [esp+54h] +
mov edx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax edi +
add eax edx +
add [esp+50h] eax +
inc ecx  +
mov [esp+54h] eax +
cmp ecx ebx +
jb loc_1010250  +
jmp loc_10104DA  +
mov ecx esi +
sub ecx offset __ImageBase +
mov edx ecx +
and edx 0FFFFF000h +
mov [esp+1Ch] edx +
mov edx ecx +
sub edx [esp+1Ch] +
add ecx ebx +
lea eax [esi+ebx] +
mov ebx ecx +
and ebx 0FFFFF000h +
sub ecx ebx +
mov [esp+7Ch] eax +
mov eax ds:dword_100003C +
mov [esp+60h] ecx +
mov ecx ds:dword_10000A0[eax] +
mov eax ds:dword_10000A4[eax] +
add ecx offset __ImageBase +
add eax ecx +
mov [esp+5Ch] ebx +
mov [esp+64h] eax +
cmp ecx eax +
jz loc_1010301  +
mov eax [esp+1Ch] +
cmp [ecx] eax +
jnb loc_1010301  +
add ecx [ecx+4] +
cmp ecx [esp+64h] +
jnz loc_10102F0  +
and dword ptr [esp+6Ch] 0 +
cmp ecx [esp+64h] +
jz loc_1010345  +
mov eax [esp+1Ch] +
cmp [ecx] eax +
jnz loc_1010345  +
mov eax [ecx+4] +
sub eax 8 +
shr eax 1 +
jz loc_1010345  +
lea ebx [ecx+8] +
mov [esp+1Ch] ebx +
mov ebx [esp+1Ch] +
movzx ebx word ptr [ebx] +
and ebx 0FFFh +
cmp ebx edx +
jnb loc_1010345  +
inc dword ptr [esp+6Ch]  +
add dword ptr [esp+1Ch] 2 +
cmp [esp+6Ch] eax +
jnz loc_1010325  +
mov edx [esp+5Ch] +
cmp ecx [esp+64h] +
jz loc_1010485  +
cmp [ecx] edx +
ja loc_1010485  +
mov eax [ecx+4] +
lea ebx [eax-8] +
shr ebx 1 +
cmp [esp+6Ch] ebx +
jnz loc_1010384  +
add ecx eax +
cmp ecx [esp+64h] +
jz loc_1010485  +
cmp [ecx] edx +
ja loc_1010485  +
and dword ptr [esp+6Ch] 0 +
jmp loc_101035B  +
***
cmp [ecx] edx +
jnz loc_10103A0  +
mov eax [esp+6Ch] +
movzx eax word ptr [ecx+eax*2+8] +
and eax 0FFFh +
cmp eax [esp+60h] +
jnb loc_1010485  +
mov eax [esp+6Ch] +
inc dword ptr [esp+6Ch]  +
mov ebx 0F000h +
test [ecx+eax*2+8] bx +
jz loc_1010349  +
mov edx [ecx] +
lea eax [ecx+eax*2+8] +
movzx eax word ptr [eax] +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [esp+1Ch] eax +
xor ebx ebx +
sub [esp+1Ch] esi +
mov [esp+28h] eax +
jz loc_1010420  +
movzx eax byte ptr [ebx+esi] +
sub eax 1D913679h +
add [esp+50h] eax +
add eax [esp+54h] +
mov edx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax edi +
add eax edx +
add [esp+50h] eax +
inc ebx  +
mov [esp+54h] eax +
cmp ebx [esp+1Ch] +
jb loc_10103D9  +
mov esi [esp+28h] +
mov eax [esi] +
sub eax [esp+70h] +
xor ebx ebx +
mov [esp+0C0h] eax +
movzx eax byte ptr [esp+ebx+0C0h] +
sub eax 1D913679h +
add [esp+50h] eax +
add eax [esp+54h] +
mov edx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax edi +
add eax edx +
add [esp+50h] eax +
inc ebx  +
mov [esp+54h] eax +
cmp ebx 4 +
jb loc_1010433  +
add esi 4 +
jmp loc_1010345  +
***
mov eax [esp+7Ch] +
xor ebx ebx +
sub eax esi +
mov [esp+7Ch] eax +
jz loc_10104DA  +
movzx eax byte ptr [ebx+esi] +
sub eax 1D913679h +
add [esp+50h] eax +
add eax [esp+54h] +
mov ecx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  ecx +
lea ecx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub ecx eax +
mov eax ecx +
sar eax 1Fh +
and eax edi +
add eax ecx +
add [esp+50h] eax +
inc ebx  +
mov [esp+54h] eax +
cmp ebx [esp+7Ch] +
jb loc_1010493  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [esp+ecx+50h] +
mov [esp+eax+20h] cl +
inc eax  +
cmp eax 6 +
jb loc_10104DC  +
mov eax 1A807FE8h +
or byte ptr [esp+20h] 1 +
or byte ptr [esp+22h] 1 +
or byte ptr [esp+24h] 1 +
or byte ptr [esp+25h] 1 +
mov eax [esp+78h] +
mov ecx 100h +
dec eax  +
mov [esp+1Ch] eax +
jz loc_1010682  +
mov edx [esp+18h] +
test al 1 +
jz loc_10105BE  +
add eax edx +
mov dl [eax] +
mov [esp+28h] eax +
mov al dl +
xor al [esp+23h] +
movzx esi dl +
and al 1 +
mov [esp+12h] al +
movzx eax byte ptr [esp+23h] +
jz loc_101055D  +
movzx edx byte ptr [esp+22h] +
mov ebx eax +
shr ebx 1 +
shr edx 1 +
xor edx ebx +
mov ebx esi +
xor ebx ecx +
sar ebx 1 +
xor edx ebx +
jmp loc_1010563  +
mov edx eax +
xor edx esi +
shr edx 1 +
mov ebx [esp+18h] +
mov [esp+70h] edx +
mov edx [esp+1Ch] +
movzx ebx byte ptr [edx+ebx-1] +
mov edx [esp+70h] +
xor edx ebx +
test dl 1 +
jz loc_10105A9  +
cmp byte ptr [esp+12h] 0 +
jz loc_1010599  +
movzx edx byte ptr [esp+22h] +
shr edx 1 +
shr eax 1 +
xor esi ecx +
xor edx eax +
sar esi 1 +
xor edx esi +
jmp loc_101059F  +
xor eax esi +
shr eax 1 +
mov edx eax +
movzx eax byte ptr [esp+25h] +
jmp loc_101063A  +
cmp byte ptr [esp+12h] 0 +
jz loc_1010663  +
movzx edx byte ptr [esp+22h] +
jmp loc_1010655  +
add eax edx +
mov dl [eax] +
mov [esp+28h] eax +
mov al dl +
xor al [esp+21h] +
movzx esi dl +
and al 1 +
mov [esp+12h] al +
movzx eax byte ptr [esp+21h] +
jz loc_10105F3  +
movzx edx byte ptr [esp+20h] +
mov ebx eax +
shr ebx 1 +
shr edx 1 +
xor edx ebx +
mov ebx esi +
xor ebx ecx +
sar ebx 1 +
xor edx ebx +
jmp loc_10105F9  +
mov edx eax +
xor edx esi +
shr edx 1 +
mov ebx [esp+1Ch] +
mov [esp+70h] edx +
mov edx [esp+18h] +
movzx ebx byte ptr [edx+ebx-1] +
mov edx [esp+70h] +
xor edx ebx +
test dl 1 +
jz loc_1010649  +
cmp byte ptr [esp+12h] 0 +
jz loc_101062F  +
movzx edx byte ptr [esp+20h] +
shr edx 1 +
shr eax 1 +
xor esi ecx +
xor edx eax +
sar esi 1 +
xor edx esi +
jmp loc_1010635  +
xor eax esi +
shr eax 1 +
mov edx eax +
movzx eax byte ptr [esp+24h] +
shr eax 1 +
xor edx ebx +
xor eax 80h +
sar edx 1 +
xor eax edx +
jmp loc_101066F  +
cmp byte ptr [esp+12h] 0 +
jz loc_1010663  +
movzx edx byte ptr [esp+20h] +
shr edx 1 +
shr eax 1 +
xor esi ecx +
xor edx eax +
sar esi 1 +
xor edx esi +
jmp loc_1010669  +
xor eax esi +
shr eax 1 +
mov edx eax +
xor edx ebx +
sar edx 1 +
mov eax edx +
mov edx [esp+28h] +
xor [esp+13h] al +
mov [edx] al +
mov eax [esp+1Ch] +
jmp loc_1010511  +
***
mov eax [esp+18h] +
mov al [eax] +
movzx esi byte ptr [esp+21h] +
mov bl al +
xor bl [esp+21h] +
movzx eax al +
and bl 1 +
mov [esp+12h] bl +
jz loc_10106BA  +
movzx edx byte ptr [esp+20h] +
mov ebx esi +
shr ebx 1 +
shr edx 1 +
xor edx ebx +
mov ebx eax +
xor ebx ecx +
sar ebx 1 +
xor edx ebx +
mov bl [esp+12h] +
jmp loc_10106C0  +
mov edx eax +
xor edx esi +
shr edx 1 +
test dl 1 +
jz loc_10106ED  +
test bl bl +
jz loc_10106DC  +
movzx ebx byte ptr [esp+20h] +
shr ebx 1 +
shr esi 1 +
xor eax ecx +
xor ebx esi +
sar eax 1 +
xor ebx eax +
jmp loc_10106E2  +
xor eax esi +
shr eax 1 +
mov ebx eax +
movzx edx byte ptr [esp+24h] +
xor edx ebx +
xor edx ecx +
jmp loc_101070A  +
test bl bl +
jz loc_1010704  +
movzx edx byte ptr [esp+20h] +
shr edx 1 +
shr esi 1 +
xor eax ecx +
xor edx esi +
sar eax 1 +
xor edx eax +
jmp loc_101070A  +
xor eax esi +
shr eax 1 +
mov edx eax +
mov eax [esp+18h] +
mov esi [esp+78h] +
sar edx 1 +
xor [esp+13h] dl +
mov [eax] dl +
mov ebx eax +
mov eax [esp+80h] +
and dword ptr [eax] 0FFFFFFFEh +
mov ecx [esp+3Ch] +
mov dl [esp+13h] +
mov eax [eax] +
cmp dl byte_104D510[ecx] +
jnz loc_101084D  +
test al 2 +
jnz loc_10107EF  +
mov edx ds:off_1005164 +
mov eax offset __ImageBase +
mov ecx eax +
sub ecx edx +
mov [esp+28h] ecx +
jz loc_10107E5  +
mov ecx ds:dword_100EB28 +
sub ebx eax +
lea eax [esi+ebx] +
xor esi esi +
dec ecx  +
mov [esp+3Ch] eax +
js loc_10107DD  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp ebx edx +
jnb loc_101078F  +
lea ecx [eax-1] +
jmp loc_1010794  +
jbe loc_101079A  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_1010771  +
jmp loc_10107DD  +
mov esi eax +
jmp loc_10107DD  +
mov ecx ds:dword_100EB2C[esi*4] +
mov eax ecx +
and eax 0FFFFFFFh +
cmp eax [esp+3Ch] +
jnb loc_10107E5  +
mov edx ecx +
shl ecx 2 +
sar ecx 1Eh +
sar edx 1Eh +
and ecx 3 +
and edx 3 +
xor ebx ebx +
dec ecx  +
jz loc_10107CE  +
dec ecx  +
jz loc_1010815  +
dec ecx  +
jnz loc_10107D2  +
mov ebx [esp+28h] +
dec edx  +
dec edx  +
jnz loc_10107DC  +
add ds:__ImageBase[eax] ebx +
inc esi  +
cmp esi ds:dword_100EB28 +
jb loc_101079E  +
mov eax [esp+80h] +
or dword ptr [eax] 2 +
mov eax 0D2A2671Bh +
dec dword ptr [esp+14h]  +
jns loc_10100C1  +
call sub_10418C2  +
inc esp  +
pop edi  +
push ebp  +
xor ebx ebx +
jmp loc_10107D2  +
***
call sub_10418C2  +
inc esp  +
pop edi  +
add al al +
push esp  +
in eax 4 +
add [eax+eax] dh +
add [eax+50h] dl +
in eax 4 +
mov al ds:11EA3E8h +
add [eax] dh +
in eax 4 +
nop   +
sub al 0E5h +
add al 30h +
sbb [eax] ch +
add [eax-3FFF8FB8h] dl +
mov dword ptr [esp+74h] 8007000Eh +
jmp loc_101086A  +
call sub_101CBFA  +
pop esp  +
in eax 4 +
and [eax] cl +
pop edi  +
add [eax+4000003Ch] dl +
jz near ptr loc_101082D+3  +
add al 0B0h +
mov dword ptr [esp+74h] 80004005h +
xor esi esi +
cmp [esp+94h] esi +
jz loc_10108C9  +
lea eax [esp+8Ch] +
push eax  +
push dword ptr [esp+90h]  +
push dword ptr [esp+90h]  +
push dword ptr [esp+90h]  +
call ds:VirtualProtect  +
call sub_10418C2  +
inc esp  +
pop edi  +
add al al +
push esp  +
in eax 4 +
mov al 34h +
mov al ds:4004E550h +
call sub_10226D6  +
xor ch ah +
add al 70h +
sub al 0E5h +
add al 0E0h +
sbb [eax] ch +
add [eax-7FFF8FB8h] dl +
mov [esp+94h] esi +
cmp [esp+90h] esi +
jz loc_10108E4  +
push offset CriticalSection  +
mov [esp+94h] esi +
call ds:LeaveCriticalSection  +
xor eax eax +
mov [esp+84h] eax +
mov [esp+88h] eax +
mov [esp+8Ch] eax +
xor ebx ebx +
call sub_102063C  +
dec eax  +
add al [eax] +
push eax  +
cmp al 0E5h +
add al 70h +
cmp ch ah +
add al 0B0h +
add [esi+0] ch +
and bh bh +
add eax offset dword_104D500 +
cmp [esp+74h] ebx +
jge loc_1011026  +
call sub_101CBFA  +
pop esp  +
in eax 4 +
mov al ds:0B0005F08h +
cmp al 0 +
jnz loc_1011026  +
cmp dword_104D4F0 ebx +
mov [esp+98h] ebx +
mov [esp+9Ch] ebx +
mov [esp+0A0h] ebx +
mov [esp+0A4h] ebx +
mov [esp+0A8h] ebx +
mov [esp+78h] ebx +
jle loc_1010FF8  +
mov eax [esp+78h] +
shl eax 4 +
mov ebx dword_104D518[eax] +
mov ecx dword_104D514[eax] +
mov edx 0FFFFFFFh +
mov [esp+80h] eax +
and ebx edx +
lea eax dword_104D50C[eax] +
and ecx edx +
add ebx offset __ImageBase +
mov esi eax +
mov [esp+28h] ebx +
mov [esp+18h] ecx +
mov [esp+3Ch] eax +
mov eax 0B9F6DF3Eh +
mov eax [esp+98h] +
mov ecx [esp+9Ch] +
cmp ebx eax +
jb loc_1010A05  +
mov edx [esp+18h] +
add edx ebx +
lea esi [ecx+eax] +
cmp edx esi +
jbe loc_1010AB9  +
xor esi esi +
cmp [esp+0A8h] esi +
jz loc_1010A2E  +
lea edx [esp+0A0h] +
push edx  +
push dword ptr [esp+0A4h]  +
push ecx  +
push eax  +
call ds:VirtualProtect  +
mov [esp+0A8h] esi +
cmp [esp+0A4h] esi +
jz loc_1010A49  +
push offset CriticalSection  +
mov [esp+0A8h] esi +
call ds:LeaveCriticalSection  +
mov edx [esp+18h] +
and dword ptr [esp+0A0h] 0 +
mov ecx 0FFFFF000h +
lea edx [edx+ebx+0FFFh] +
mov eax ebx +
and eax ecx +
and edx ecx +
sub edx eax +
push offset CriticalSection  +
mov [esp+9Ch] eax +
mov [esp+0A0h] edx +
call ds:EnterCriticalSection  +
lea eax [esp+0A0h] +
push eax  +
push 40h  +
push dword ptr [esp+0A4h]  +
xor esi esi +
push dword ptr [esp+0A4h]  +
inc esi  +
mov [esp+0B4h] esi +
call ds:VirtualProtect  +
test eax eax +
jz loc_1010F54  +
mov [esp+0A8h] esi +
xor esi esi +
cmp ebx esi +
jz loc_1010F56  +
mov eax [esp+3Ch] +
test byte ptr [eax] 1 +
jnz loc_1010F3B  +
mov byte ptr [esp+13h] 0 +
cmp [esp+18h] esi +
jbe loc_1010F23  +
mov esi offset dword_104D4F8 +
mov eax 2A59704Eh +
mov ebx dword_104D4FC +
mov esi dword_104D4F8 +
mov ecx ds:off_1005164 +
and dword ptr [esp+48h] 0 +
and dword ptr [esp+4Ch] 0 +
mov eax 0FFFFFFFh +
and esi eax +
and ebx eax +
mov eax offset __ImageBase +
add esi eax +
sub eax ecx +
mov [esp+7Ch] eax +
jnz loc_1010B71  +
xor ecx ecx +
test ebx ebx +
jbe loc_1010DB1  +
movzx eax byte ptr [ecx+esi] +
sub eax 1D913679h +
add [esp+48h] eax +
add eax [esp+4Ch] +
mov edx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax edi +
add eax edx +
add [esp+48h] eax +
inc ecx  +
mov [esp+4Ch] eax +
cmp ecx ebx +
jb loc_1010B27  +
jmp loc_1010DB1  +
mov ecx esi +
sub ecx offset __ImageBase +
mov edx ecx +
and edx 0FFFFF000h +
mov [esp+14h] edx +
mov edx ecx +
sub edx [esp+14h] +
add ecx ebx +
lea eax [esi+ebx] +
mov ebx ecx +
and ebx 0FFFFF000h +
sub ecx ebx +
mov [esp+0C0h] eax +
mov eax ds:dword_100003C +
mov [esp+60h] ecx +
mov ecx ds:dword_10000A0[eax] +
mov eax ds:dword_10000A4[eax] +
add ecx offset __ImageBase +
add eax ecx +
mov [esp+5Ch] ebx +
mov [esp+64h] eax +
cmp ecx eax +
jz loc_1010BDB  +
mov eax [esp+14h] +
cmp [ecx] eax +
jnb loc_1010BDB  +
add ecx [ecx+4] +
cmp ecx [esp+64h] +
jnz loc_1010BCA  +
and dword ptr [esp+6Ch] 0 +
cmp ecx [esp+64h] +
jz loc_1010C1F  +
mov eax [esp+14h] +
cmp [ecx] eax +
jnz loc_1010C1F  +
mov eax [ecx+4] +
sub eax 8 +
shr eax 1 +
jz loc_1010C1F  +
lea ebx [ecx+8] +
mov [esp+14h] ebx +
mov ebx [esp+14h] +
movzx ebx word ptr [ebx] +
and ebx 0FFFh +
cmp ebx edx +
jnb loc_1010C1F  +
inc dword ptr [esp+6Ch]  +
add dword ptr [esp+14h] 2 +
cmp [esp+6Ch] eax +
jnz loc_1010BFF  +
mov edx [esp+5Ch] +
cmp ecx [esp+64h] +
jz loc_1010D59  +
cmp [ecx] edx +
ja loc_1010D59  +
mov eax [ecx+4] +
lea ebx [eax-8] +
shr ebx 1 +
cmp [esp+6Ch] ebx +
jnz loc_1010C5E  +
add ecx eax +
cmp ecx [esp+64h] +
jz loc_1010D59  +
cmp [ecx] edx +
ja loc_1010D59  +
and dword ptr [esp+6Ch] 0 +
jmp loc_1010C35  +
***
cmp [ecx] edx +
jnz loc_1010C7A  +
mov eax [esp+6Ch] +
movzx eax word ptr [ecx+eax*2+8] +
and eax 0FFFh +
cmp eax [esp+60h] +
jnb loc_1010D59  +
mov eax [esp+6Ch] +
inc dword ptr [esp+6Ch]  +
mov ebx 0F000h +
test [ecx+eax*2+8] bx +
jz loc_1010C23  +
mov edx [ecx] +
lea eax [ecx+eax*2+8] +
movzx eax word ptr [eax] +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [esp+14h] eax +
xor ebx ebx +
sub [esp+14h] esi +
mov [esp+3Ch] eax +
jz loc_1010CFA  +
movzx eax byte ptr [ebx+esi] +
sub eax 1D913679h +
add [esp+48h] eax +
add eax [esp+4Ch] +
mov edx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax edi +
add eax edx +
add [esp+48h] eax +
inc ebx  +
mov [esp+4Ch] eax +
cmp ebx [esp+14h] +
jb loc_1010CB3  +
mov esi [esp+3Ch] +
mov eax [esi] +
sub eax [esp+7Ch] +
xor ebx ebx +
mov [esp+70h] eax +
movzx eax byte ptr [esp+ebx+70h] +
sub eax 1D913679h +
add [esp+48h] eax +
add eax [esp+4Ch] +
mov edx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax edi +
add eax edx +
add [esp+48h] eax +
inc ebx  +
mov [esp+4Ch] eax +
cmp ebx 4 +
jb loc_1010D0A  +
add esi 4 +
jmp loc_1010C1F  +
***
mov eax [esp+0C0h] +
xor ebx ebx +
sub eax esi +
mov [esp+3Ch] eax +
jz loc_1010DB1  +
movzx eax byte ptr [ebx+esi] +
sub eax 1D913679h +
add [esp+48h] eax +
add eax [esp+4Ch] +
mov ecx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  ecx +
lea ecx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub ecx eax +
mov eax ecx +
sar eax 1Fh +
and eax edi +
add eax ecx +
add [esp+48h] eax +
inc ebx  +
mov [esp+4Ch] eax +
cmp ebx [esp+3Ch] +
jb loc_1010D6A  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [esp+ecx+48h] +
mov [esp+eax+2Ch] cl +
inc eax  +
cmp eax 6 +
jb loc_1010DB3  +
mov eax 9021CEB3h +
mov ebx [esp+28h] +
mov dl [ebx] +
or byte ptr [esp+2Ch] 1 +
or byte ptr [esp+2Eh] 1 +
or byte ptr [esp+30h] 1 +
or byte ptr [esp+31h] 1 +
movzx ecx dl +
mov [esp+13h] dl +
add ecx ecx +
and dl 80h +
jz loc_1010DFC  +
movzx eax byte ptr [esp+30h] +
xor eax ecx +
jmp loc_1010DFE  +
mov eax ecx +
test al al +
jns loc_1010E1C  +
test dl dl +
jz loc_1010E0F  +
movzx eax byte ptr [esp+30h] +
xor eax ecx +
jmp loc_1010E11  +
mov eax ecx +
movzx ecx byte ptr [esp+2Ch] +
add eax eax +
xor eax ecx +
jmp loc_1010E2D  +
test dl dl +
jz loc_1010E29  +
movzx eax byte ptr [esp+30h] +
xor eax ecx +
jmp loc_1010E2B  +
mov eax ecx +
add eax eax +
mov cl [esp+2Dh] +
xor edx edx +
xor cl al +
inc edx  +
mov [ebx] cl +
cmp [esp+18h] edx +
jbe loc_1010F23  +
mov al [edx+ebx] +
xor [esp+13h] al +
movzx esi al +
add esi esi +
mov [esp+12h] al +
test dl 1 +
jz loc_1010EB4  +
and byte ptr [esp+12h] 80h +
jz loc_1010E67  +
movzx ecx byte ptr [esp+31h] +
xor ecx esi +
jmp loc_1010E69  +
mov ecx esi +
movzx eax byte ptr [edx+ebx-1] +
mov ebx eax +
xor ebx ecx +
test bl bl +
jns loc_1010E95  +
cmp byte ptr [esp+12h] 0 +
jz loc_1010E86  +
movzx ecx byte ptr [esp+31h] +
xor ecx esi +
jmp loc_1010E88  +
mov ecx esi +
xor eax ecx +
movzx ecx byte ptr [esp+2Eh] +
add eax eax +
xor eax ecx +
jmp loc_1010EAB  +
cmp byte ptr [esp+12h] 0 +
jz loc_1010EA5  +
movzx ecx byte ptr [esp+31h] +
xor ecx esi +
jmp loc_1010EA7  +
mov ecx esi +
xor eax ecx +
add eax eax +
mov ecx eax +
movzx eax byte ptr [esp+2Fh] +
jmp loc_1010F0F  +
and byte ptr [esp+12h] 80h +
jz loc_1010EC4  +
movzx ecx byte ptr [esp+30h] +
xor ecx esi +
jmp loc_1010EC6  +
mov ecx esi +
movzx eax byte ptr [edx+ebx-1] +
mov ebx eax +
xor ebx ecx +
test bl bl +
jns loc_1010EF2  +
cmp byte ptr [esp+12h] 0 +
jz loc_1010EE3  +
movzx ecx byte ptr [esp+30h] +
xor ecx esi +
jmp loc_1010EE5  +
mov ecx esi +
xor eax ecx +
movzx ecx byte ptr [esp+2Ch] +
add eax eax +
xor eax ecx +
jmp loc_1010F08  +
cmp byte ptr [esp+12h] 0 +
jz loc_1010F02  +
movzx ecx byte ptr [esp+30h] +
xor ecx esi +
jmp loc_1010F04  +
mov ecx esi +
xor eax ecx +
add eax eax +
mov ecx eax +
movzx eax byte ptr [esp+2Dh] +
mov ebx [esp+28h] +
xor eax ecx +
mov [edx+ebx] al +
inc edx  +
cmp edx [esp+18h] +
jb loc_1010E42  +
mov eax [esp+80h] +
mov cl [esp+13h] +
or dword_104D50C[eax] 1 +
mov byte_104D510[eax] cl +
mov eax 0F071DB0Eh +
inc dword ptr [esp+78h]  +
mov eax [esp+78h] +
cmp eax dword_104D4F0 +
jl loc_10109A0  +
xor esi esi +
call sub_10418C2  +
inc esp  +
pop edi  +
add [eax-3FFB1AACh] ah +
xor al 0 +
add [eax+50h] dl +
in eax 4 +
inc eax  +
cmp [esp+0A8h] esi +
jz loc_1010FC8  +
call sub_101CBFA  +
pop esp  +
in eax 4 +
mov al 8 +
pop edi  +
add al ah +
cmp al 0 +
add al dl +
jz near ptr loc_1010F56+1  +
add al 50h +
lea eax [esp+0A0h] +
push eax  +
push dword ptr [esp+0A4h]  +
push dword ptr [esp+0A4h]  +
push dword ptr [esp+0A4h]  +
call ds:VirtualProtect  +
call sub_101CBFA  +
pop esp  +
in eax 4 +
or [edi+0] bl +
sar byte ptr [eax+eax] 0 +
pusha   +
jz near ptr loc_1010F89+6  +
add al 70h +
mov [esp+0A8h] esi +
cmp [esp+0A4h] esi +
jz loc_1010FF8  +
call sub_102063C  +
dec eax  +
add al [eax] +
xor ds:0E5383004h bh +
add al 60h +
add [esi+0] ch +
push eax  +
push offset CriticalSection  +
mov [esp+0A8h] esi +
call ds:LeaveCriticalSection  +
call sub_10226D6  +
xor ch ah +
add al 0 +
sub al 0E5h +
add al 10h +
sbb [eax] ch +
add [eax+48h] al +
jo $+2  +
xor byte ptr [ebx] 0C0h +
mov [esp+98h] eax +
mov [esp+9Ch] eax +
mov [esp+0A0h] eax +
xor ebx ebx +
call sub_101CBFA  +
pop esp  +
in eax 4 +
or byte ptr [eax] 5Fh +
add [eax+3Ch] al +
add eax [eax] +
inc esp  +
pop edi  +
add [eax-6FFB1AACh] dh +
xor al 0 +
add [eax] dl +
push eax  +
in eax 4 +
loopne loc_1010FF2  +
hlt   +
aam  4 +
add [ebx-3F94FC20h] eax +
sbb byte_104E308 al +
push eax  +
call ds:LeaveCriticalSection  +
mov eax [esp+74h] +
call sub_10418C2  +
inc esp  +
pop edi  +
add [eax-1FFB1AACh] dl +
xor al 0 +
add [eax] ah +
push eax  +
in eax 4 +
adc al ch +
jnz loc_101103E  +
call sub_10418C2  +
inc esp  +
pop edi  +
add al al +
push esp  +
in eax 4 +
sal byte ptr [eax+eax] 0 +
rcl byte ptr [eax-1Bh] 1 +
add al 20h +
call sub_102063C  +
dec eax  +
add al [eax] +
mov al 3Ch +
in eax 4 +
sar byte ptr [eax] 1 +
in eax 4 +
nop   +
add [esi+0] ch +
push eax  +
call sub_10226D6  +
xor ch ah +
add al 0B0h +
sub al 0E5h +
add al 90h +
sbb [eax] ch +
add al ah +
dec eax  +
jo $+2  +
and [ecx] bh +
pop esp  +
and al 18h +
jge loc_10112A0  +
call sub_101CBFA  +
dec eax  +
in eax 4 +
xor [eax+5Fh] bh +
add [eax] dl +
clc   +
or eax 0E5448000h +
add al 20h +
call sub_101CBFA  +
dec eax  +
in eax 4 +
jo loc_10112C8  +
pop edi  +
add al al +
clc   +
or eax 0E544A000h +
add al 0A0h +
mov eax off_104D01C +
cmp eax offset off_104D01C +
jz loc_10112A0  +
call sub_10418C2  +
inc esp  +
pop edi  +
cmp [esp+28h] ebx +
jl loc_10119D8  +
test byte_104D504 1 +
jz loc_10119D8  +
mov eax dword_104D4F4 +
and eax 3 +
imul eax eax +
add eax offset byte_104E308 +
push eax  +
call ds:EnterCriticalSection  +
call sub_102063C  +
dec eax  +
add al [eax] +
adc ds:0E5388004h bh +
add al 40h +
add [esi+0] ch +
push eax  +
call sub_102063C  +
dec eax  +
add al [eax] +
nop   +
cmp al 0E5h +
add al 40h +
cmp ch ah +
add al 90h +
add [esi+0] ch +
nop   +
dec dword_104D500  +
jnz loc_10119C1  +
call sub_101CBFA  +
pop esp  +
in eax 4 +
adc [eax] cl +
pop edi  +
add [eax] ah +
cmp al 0 +
add [eax+74h] dl +
rol byte ptr [eax+esi] 1 +
cmp dword_104D4F0 ebx +
mov [esp+0ACh] ebx +
mov [esp+0B0h] ebx +
mov [esp+0B4h] ebx +
mov [esp+0B8h] ebx +
mov [esp+0BCh] ebx +
mov [esp+74h] ebx +
jle loc_10119AA  +
mov eax [esp+74h] +
shl eax 4 +
mov ebx dword_104D518[eax] +
mov ecx dword_104D514[eax] +
mov edx 0FFFFFFFh +
mov [esp+80h] eax +
and ebx edx +
lea eax dword_104D50C[eax] +
and ecx edx +
add ebx offset __ImageBase +
mov esi eax +
mov [esp+28h] ebx +
mov [esp+1Ch] ecx +
mov [esp+3Ch] eax +
mov eax 4C982CDAh +
mov eax [esp+0ACh] +
mov ecx [esp+0B0h] +
cmp ebx eax +
jb loc_10113B1  +
mov esi [esp+1Ch] +
lea edx [eax+ecx] +
add esi ebx +
cmp esi edx +
jbe loc_1011465  +
xor esi esi +
cmp [esp+0BCh] esi +
jz loc_10113DA  +
lea edx [esp+0B4h] +
push edx  +
push dword ptr [esp+0B8h]  +
push ecx  +
push eax  +
call ds:VirtualProtect  +
mov [esp+0BCh] esi +
cmp [esp+0B8h] esi +
jz loc_10113F5  +
push offset CriticalSection  +
mov [esp+0BCh] esi +
call ds:LeaveCriticalSection  +
mov edx [esp+1Ch] +
and dword ptr [esp+0B4h] 0 +
mov ecx 0FFFFF000h +
lea edx [edx+ebx+0FFFh] +
mov eax ebx +
and eax ecx +
and edx ecx +
sub edx eax +
push offset CriticalSection  +
mov [esp+0B0h] eax +
mov [esp+0B4h] edx +
call ds:EnterCriticalSection  +
lea eax [esp+0B4h] +
push eax  +
push 40h  +
push dword ptr [esp+0B8h]  +
xor esi esi +
push dword ptr [esp+0B8h]  +
inc esi  +
mov [esp+0C8h] esi +
call ds:VirtualProtect  +
test eax eax +
jz loc_1011906  +
mov [esp+0BCh] esi +
xor esi esi +
cmp ebx esi +
jz loc_1011908  +
mov eax [esp+3Ch] +
test byte ptr [eax] 1 +
jnz loc_10118ED  +
mov byte ptr [esp+13h] 0 +
cmp [esp+1Ch] esi +
jbe loc_10118D5  +
mov esi offset dword_104D4F8 +
mov eax 56BCE0F4h +
mov ebx dword_104D4FC +
mov esi dword_104D4F8 +
mov ecx ds:off_1005164 +
and dword ptr [esp+40h] 0 +
and dword ptr [esp+44h] 0 +
mov eax 0FFFFFFFh +
and esi eax +
and ebx eax +
mov eax offset __ImageBase +
add esi eax +
sub eax ecx +
mov [esp+7Ch] eax +
jnz loc_101151D  +
xor ecx ecx +
test ebx ebx +
jbe loc_1011769  +
movzx eax byte ptr [ecx+esi] +
sub eax 1D913679h +
add [esp+40h] eax +
add eax [esp+44h] +
mov edx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax edi +
add eax edx +
add [esp+40h] eax +
inc ecx  +
mov [esp+44h] eax +
cmp ecx ebx +
jb loc_10114D3  +
jmp loc_1011769  +
mov ecx esi +
sub ecx offset __ImageBase +
mov edx ecx +
and edx 0FFFFF000h +
mov [esp+14h] edx +
mov edx ecx +
sub edx [esp+14h] +
add ecx ebx +
lea eax [esi+ebx] +
mov ebx ecx +
and ebx 0FFFFF000h +
sub ecx ebx +
mov [esp+0C0h] eax +
mov eax ds:dword_100003C +
mov [esp+60h] ecx +
mov ecx ds:dword_10000A0[eax] +
mov eax ds:dword_10000A4[eax] +
add ecx offset __ImageBase +
add eax ecx +
mov [esp+5Ch] ebx +
mov [esp+64h] eax +
cmp ecx eax +
jz loc_1011587  +
mov eax [esp+14h] +
cmp [ecx] eax +
jnb loc_1011587  +
add ecx [ecx+4] +
cmp ecx [esp+64h] +
jnz loc_1011576  +
and dword ptr [esp+6Ch] 0 +
cmp ecx [esp+64h] +
jz loc_10115CB  +
mov eax [esp+14h] +
cmp [ecx] eax +
jnz loc_10115CB  +
mov eax [ecx+4] +
sub eax 8 +
shr eax 1 +
jz loc_10115CB  +
lea ebx [ecx+8] +
mov [esp+14h] ebx +
mov ebx [esp+14h] +
movzx ebx word ptr [ebx] +
and ebx 0FFFh +
cmp ebx edx +
jnb loc_10115CB  +
inc dword ptr [esp+6Ch]  +
add dword ptr [esp+14h] 2 +
cmp [esp+6Ch] eax +
jnz loc_10115AB  +
mov edx [esp+5Ch] +
cmp ecx [esp+64h] +
jz loc_101170B  +
cmp [ecx] edx +
ja loc_101170B  +
mov eax [ecx+4] +
lea ebx [eax-8] +
shr ebx 1 +
cmp [esp+6Ch] ebx +
jnz loc_101160A  +
add ecx eax +
cmp ecx [esp+64h] +
jz loc_101170B  +
cmp [ecx] edx +
ja loc_101170B  +
and dword ptr [esp+6Ch] 0 +
jmp loc_10115E1  +
***
cmp [ecx] edx +
jnz loc_1011626  +
mov eax [esp+6Ch] +
movzx eax word ptr [ecx+eax*2+8] +
and eax 0FFFh +
cmp eax [esp+60h] +
jnb loc_101170B  +
mov eax [esp+6Ch] +
inc dword ptr [esp+6Ch]  +
mov ebx 0F000h +
test [ecx+eax*2+8] bx +
jz loc_10115CF  +
mov edx [ecx] +
lea eax [ecx+eax*2+8] +
movzx eax word ptr [eax] +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [esp+14h] eax +
xor ebx ebx +
sub [esp+14h] esi +
mov [esp+3Ch] eax +
jz loc_10116A6  +
movzx eax byte ptr [ebx+esi] +
sub eax 1D913679h +
add [esp+40h] eax +
add eax [esp+44h] +
mov edx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax edi +
add eax edx +
add [esp+40h] eax +
inc ebx  +
mov [esp+44h] eax +
cmp ebx [esp+14h] +
jb loc_101165F  +
mov esi [esp+3Ch] +
mov eax [esi] +
sub eax [esp+7Ch] +
xor ebx ebx +
mov [esp+0C4h] eax +
movzx eax byte ptr [esp+ebx+0C4h] +
sub eax 1D913679h +
add [esp+40h] eax +
add eax [esp+44h] +
mov edx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax edi +
add eax edx +
add [esp+40h] eax +
inc ebx  +
mov [esp+44h] eax +
cmp ebx 4 +
jb loc_10116B9  +
add esi 4 +
jmp loc_10115CB  +
***
mov eax [esp+0C0h] +
xor ebx ebx +
sub eax esi +
mov [esp+0C4h] eax +
jz loc_1011769  +
movzx eax byte ptr [ebx+esi] +
sub eax 1D913679h +
add [esp+40h] eax +
add eax [esp+44h] +
mov ecx 0E26EC987h +
imul eax eax +
ror eax 17h +
mul  ecx +
lea ecx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax edi +
sub ecx eax +
mov eax ecx +
sar eax 1Fh +
and eax edi +
add eax ecx +
add [esp+40h] eax +
inc ebx  +
mov [esp+44h] eax +
cmp ebx [esp+0C4h] +
jb loc_101171F  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [esp+ecx+40h] +
mov [esp+eax+34h] cl +
inc eax  +
cmp eax 6 +
jb loc_101176B  +
mov eax 0B9F302B9h +
mov esi [esp+28h] +
mov al [esi] +
or byte ptr [esp+34h] 1 +
or byte ptr [esp+36h] 1 +
or byte ptr [esp+38h] 1 +
or byte ptr [esp+39h] 1 +
movzx ecx al +
mov dl al +
add ecx ecx +
and dl 80h +
mov [esp+13h] al +
jz loc_10117B6  +
movzx eax byte ptr [esp+38h] +
xor eax ecx +
jmp loc_10117B8  +
mov eax ecx +
test al al +
jns loc_10117D6  +
test dl dl +
jz loc_10117C9  +
movzx eax byte ptr [esp+38h] +
xor eax ecx +
jmp loc_10117CB  +
mov eax ecx +
movzx ecx byte ptr [esp+34h] +
add eax eax +
xor eax ecx +
jmp loc_10117E7  +
test dl dl +
jz loc_10117E3  +
movzx eax byte ptr [esp+38h] +
xor eax ecx +
jmp loc_10117E5  +
mov eax ecx +
add eax eax +
mov cl [esp+35h] +
xor ebx ebx +
xor cl al +
inc ebx  +
mov [esi] cl +
cmp [esp+1Ch] ebx +
jbe loc_10118D5  +
mov al [esi+ebx] +
xor [esp+13h] al +
movzx ecx al +
add ecx ecx +
mov [esp+12h] al +
test bl 1 +
jz loc_101186C  +
and byte ptr [esp+12h] 80h +
jz loc_1011821  +
movzx eax byte ptr [esp+39h] +
xor eax ecx +
jmp loc_1011823  +
mov eax ecx +
movzx edx byte ptr [esi+ebx-1] +
xor eax edx +
test al al +
jns loc_101184D  +
cmp byte ptr [esp+12h] 0 +
jz loc_101183E  +
movzx eax byte ptr [esp+39h] +
xor eax ecx +
jmp loc_1011840  +
mov eax ecx +
movzx ecx byte ptr [esp+36h] +
xor eax edx +
add eax eax +
xor eax ecx +
jmp loc_1011863  +
cmp byte ptr [esp+12h] 0 +
jz loc_101185D  +
movzx eax byte ptr [esp+39h] +
xor eax ecx +
jmp loc_101185F  +
mov eax ecx +
xor eax edx +
add eax eax +
mov ecx eax +
movzx eax byte ptr [esp+37h] +
jmp loc_10118C5  +
and byte ptr [esp+12h] 80h +
jz loc_101187C  +
movzx eax byte ptr [esp+38h] +
xor eax ecx +
jmp loc_101187E  +
mov eax ecx +
movzx edx byte ptr [esi+ebx-1] +
xor eax edx +
test al al +
jns loc_10118A8  +
cmp byte ptr [esp+12h] 0 +
jz loc_1011899  +
movzx eax byte ptr [esp+38h] +
xor eax ecx +
jmp loc_101189B  +
mov eax ecx +
movzx ecx byte ptr [esp+34h] +
xor eax edx +
add eax eax +
xor eax ecx +
jmp loc_10118BE  +
cmp byte ptr [esp+12h] 0 +
jz loc_10118B8  +
movzx eax byte ptr [esp+38h] +
xor eax ecx +
jmp loc_10118BA  +
mov eax ecx +
xor eax edx +
add eax eax +
mov ecx eax +
movzx eax byte ptr [esp+35h] +
xor eax ecx +
mov [esi+ebx] al +
inc ebx  +
cmp ebx [esp+1Ch] +
jb loc_10117FC  +
mov eax [esp+80h] +
mov cl [esp+13h] +
or dword_104D50C[eax] 1 +
mov byte_104D510[eax] cl +
mov eax 17459281h +
inc dword ptr [esp+74h]  +
mov eax [esp+74h] +
cmp eax dword_104D4F0 +
jl loc_101134C  +
xor esi esi +
cmp [esp+0BCh] esi +
jz loc_1011965  +
call sub_101CBFA  +
dec eax  +
in eax 4 +
add [eax+5Fh] bh +
cmp [esp+0B8h] esi +
jz loc_10119AA  +
call sub_101CBFA  +
dec eax  +
in eax 4 +
mov al 78h +
pop edi  +
add [eax-8] dl +
or eax 0E544D000h +
add al 10h +
call sub_10226D6  +
xor ch ah +
add al 90h +
sub al 0E5h +
add al 90h +
sbb [eax] ch +
add [eax] ah +
dec eax  +
jo $+2  +
shr byte ptr (unk_104E5FF-104E64Fh)[eax] 0E3h +
add al 1 +
mov [esp+0BCh] esi +
call ds:LeaveCriticalSection  +
xor eax eax +
mov [esp+0ACh] eax +
mov [esp+0B0h] eax +
mov [esp+0B4h] eax +
mov eax dword_104D4F4 +
and eax 3 +
imul eax eax +
add eax offset byte_104E308 +
push eax  +
call ds:LeaveCriticalSection  +
call sub_101CBFA  +
dec eax  +
in eax 4 +
mov al 78h +
pop edi  +
add [eax-5FFFF208h] ah +
inc esp  +
in eax 4 +
jo near ptr loc_10119D2+4  +
in al 0Ch +
add [eax] eax +
xor ch ah +
add al 0E0h +
sub al 0E5h +
add al 90h +
sbb [eax] ch +
add [eax-5FFF8FB8h] ah +
call sub_100F97F  +
call sub_10226D6  +
xor ch ah +
add al 30h +
sub al 0E5h +
add al 90h +
sbb [eax] ch +
add [eax] dl +
dec eax  +
jo $+2  +
mov al ds:0C824B48Dh +
xchg eax edi +
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1016EA0  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101639C  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl locret_10163A3  +
mov eax 80004005h +
retn   +
***
push 8  +
push offset dword_103FBB0  +
call sub_10170CE  +
mov esi ecx +
xor edi edi +
mov byte ptr [esi] 0 +
and [ebp-4] edi +
push dword ptr [ebp+8]  +
call ds:InitializeCriticalSection  +
mov byte ptr [esi] 1 +
jmp loc_10163D4  +
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
mov edi 8007000Eh +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax edi +
call sub_1009D42  +
retn 4  +
***
mov eax ecx +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
mov ebx edx +
push edi  +
mov edi eax +
mov esi ecx +
test bl 3 +
jnz loc_1016524  +
test esi esi +
jz loc_1016524  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1016524  +
test ebx ebx +
jz loc_1016524  +
test edi edi +
jz loc_1016470  +
mov eax [eax] +
mov [ebp+var_4] eax +
jmp loc_1016474  +
and [ebp+var_4] 0 +
mov ecx ebx +
call sub_10163F0  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
cmp eax [ebp+var_4] +
jbe loc_1016497  +
neg edi  +
sbb edi edi +
and edi 8007007Ah +
mov [ebp+var_8] edi +
jmp loc_101652B  +
mov [ebp+var_4] eax +
lea eax [esi+ebx*2] +
mov [ebp+var_C] eax +
movzx eax byte ptr [esi] +
mov cl ds:byte_1005DE8[eax] +
movzx ebx byte ptr [esi+6] +
movzx edx byte ptr [esi+4] +
mov bl ds:byte_1005DE8[ebx] +
movzx eax byte ptr [esi+2] +
mov dl ds:byte_1005DE8[edx] +
mov al ds:byte_1005DE8[eax] +
mov byte ptr [ebp+arg_0+3] bl +
or bl dl +
or bl al +
or bl cl +
cmp bl 0FFh +
jz loc_101651B  +
mov bl al +
shr bl 4 +
shl cl 2 +
or bl cl +
cmp [ebp+var_4] 1 +
mov [edi] bl +
jbe loc_101650A  +
mov cl dl +
shr cl 2 +
and cl 0Fh +
shl al 4 +
or cl al +
cmp [ebp+var_4] 2 +
mov [edi+1] cl +
jbe loc_101650A  +
mov al byte ptr [ebp+arg_0+3] +
and al 3Fh +
shl dl 6 +
or al dl +
mov [edi+2] al +
sub [ebp+var_4] 3 +
add esi 8 +
add edi 3 +
cmp esi [ebp+var_C] +
jb loc_10164A0  +
jmp loc_101652B  +
mov [ebp+var_8] 8007000Dh +
jmp loc_101652B  +
mov [ebp+var_8] 80070057h +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx eax +
xor eax eax +
push esi  +
push edi  +
mov edi edx +
mov [ebp-8] eax +
cmp ecx eax +
jz loc_101664D  +
cmp [ebp+8] eax +
jz loc_101664D  +
cmp edi eax +
jz loc_101664D  +
cmp ebx eax +
jz loc_1016568  +
mov eax [edi] +
mov [ebp-0Ch] eax +
mov eax ecx +
push 6  +
shl eax 3 +
xor edx edx +
pop esi  +
div  esi +
mov esi eax +
add esi 3 +
and esi 0FFFFFFFCh +
mov [edi] esi +
cmp esi [ebp-0Ch] +
jbe loc_1016598  +
neg ebx  +
sbb ebx ebx +
and ebx 8007007Ah +
mov [ebp-8] ebx +
jmp loc_1016654  +
mov eax ecx +
push 3  +
xor edx edx +
pop edi  +
div  edi +
mov byte ptr [ebp-2] 0 +
mov byte ptr [ebp-3] 0 +
mov byte ptr [ebp-4] 40h +
mov byte ptr [ebp-1] 40h +
lea eax [ebx+esi*2-8] +
sub ecx edx +
add ecx [ebp+8] +
sub edx 0 +
mov edi ecx +
jz loc_1016640  +
dec edx  +
jz loc_10165E4  +
dec edx  +
jnz loc_1016654  +
mov dl [ebp-3] +
mov bl [ebp-1] +
mov cl [edi+1] +
mov [ebp-2] cl +
and cl 0Fh +
shl cl 2 +
shr dl 6 +
or cl dl +
jmp loc_10165E9  +
mov cl [ebp-4] +
mov bl cl +
mov dl [edi] +
movzx esi dl +
shr esi 2 +
movsx si ds:byte_1005DA0[esi] +
and dl 3 +
mov [eax] si +
movzx esi byte ptr [ebp-2] +
shl dl 4 +
movzx edx dl +
shr esi 4 +
or edx esi +
movsx dx ds:byte_1005DA0[edx] +
movzx ecx cl +
mov [eax+2] dx +
movsx cx ds:byte_1005DA0[ecx] +
mov [eax+4] cx +
movzx ecx bl +
movsx cx ds:byte_1005DA0[ecx] +
mov [eax+6] cx +
cmp edi [ebp+8] +
jz loc_1016654  +
sub eax 8 +
mov dl [edi-1] +
sub edi 3 +
mov bl dl +
and bl 3Fh +
jmp loc_10165D1  +
***
mov dword ptr [ebp-8] 80070057h +
mov eax [ebp-8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
lea eax [ebp-4] +
push eax  +
push esi  +
push 20006h  +
push esi  +
push esi  +
push esi  +
push offset aSoftwareMicros  +
push 80000007h  +
xor edi edi +
mov [ebp-4] esi +
call ds:RegCreateKeyExA  +
cmp eax esi +
jnz loc_1016EEA  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 3  +
push esi  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-4]  +
call ds:RegSetValueExA  +
cmp eax esi +
jz loc_1016EF8  +
jle loc_1016EF6  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
cmp [ebp-4] esi +
jz loc_1016F06  +
push dword ptr [ebp-4]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp-4] +
push eax  +
push 20006h  +
xor esi esi +
and [ebp-4] esi +
push esi  +
push offset aSoftwareMicros  +
push 80000007h  +
call ds:RegOpenKeyExA  +
cmp eax 2 +
jz loc_1016F68  +
test eax eax +
jnz loc_1016F5A  +
push offset aRk  +
push dword ptr [ebp-4]  +
call ds:RegDeleteValueA  +
cmp eax 2 +
jz loc_1016F68  +
test eax eax +
jz loc_1016F68  +
jle loc_1016F66  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp dword ptr [ebp-4] 0 +
jz loc_1016F77  +
push dword ptr [ebp-4]  +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov eax [esp+8+arg_4] +
mov edi edi +
mov edi edi +
mov edi edi +
mov [esi+4] eax +
lea eax [esi+8] +
mov dword ptr [esi] offset off_1009970 +
push eax  +
mov dword ptr [eax] 0 +
call ds:InterlockedIncrement  +
mov eax esi +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1009970 +
jz loc_10171AD  +
push esi  +
call sub_101C399  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset InterlockedDecrement +
mov edi eax +
test edi edi +
jnz loc_10171E7  +
test esi esi +
jz loc_10171E7  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
mov eax edi +
pop edi  +
retn   +
***
call ds:CryptDestroyHash  +
and dword ptr [esi+4] 0 +
mov eax [esi] +
test eax eax +
jz locret_1017BD0  +
push 0  +
push eax  +
call ds:CryptReleaseContext  +
and dword ptr [esi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
push 0  +
call sub_1040EFB  +
cmp [eax] al +
add [eax-5FFE8035h] ah +
test eax eax +
jl loc_1017C1B  +
lea eax [esi+4] +
push eax  +
push 0  +
push 0  +
push dword ptr [ebp+8]  +
push dword ptr [esi]  +
call ds:CryptCreateHash  +
test eax eax +
jnz loc_1017C19  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1017C1B  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1017C1B  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push esi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 2  +
push dword ptr [eax+4]  +
call ds:CryptGetHashParam  +
test eax eax +
jnz loc_1017C59  +
call ds:__imp_GetLastError  +
cmp eax 0EAh +
jnz loc_1017C52  +
mov esi 8007007Ah +
jmp loc_1017C59  +
call sub_1016386  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword ptr aNc@ +
xor eax ebp +
mov [ebp-4] eax +
and dword ptr [ebp-38h] 0 +
cmp dword ptr [esi] 84h +
push ebx  +
mov ebx ecx +
jnb loc_1017C8B  +
mov ebx 80070057h +
jmp loc_1017D2C  +
lea eax [ebp-34h] +
push eax  +
push 30h  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp-3Ch] 80h +
call ds:CryptGenRandom  +
test eax eax +
jnz loc_1017CBD  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1017CB9  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_1017D2C  +
lea eax [ebp-38h] +
push eax  +
push 0  +
push 0  +
push 800Ch  +
push dword ptr [ebp+8]  +
call ds:CryptCreateHash  +
test eax eax +
jz loc_1017CA5  +
push 0  +
push 30h  +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp-38h]  +
call ds:CryptHashData  +
test eax eax +
jz loc_1017CA5  +
push ebx  +
push 800000h  +
push dword ptr [ebp-38h]  +
push 660Eh  +
push dword ptr [ebp+8]  +
call ds:CryptDeriveKey  +
test eax eax +
jz loc_1017CA5  +
lea eax [ebp-3Ch] +
push eax  +
lea eax [edi+4] +
push eax  +
lea eax [ebp-34h] +
push eax  +
call sub_101B9FD  +
mov ebx eax +
test ebx ebx +
jl loc_1017D2C  +
mov eax [ebp-3Ch] +
add eax 4 +
mov dword ptr [edi] 5 +
mov [esi] eax +
push 30h  +
pop ecx  +
lea eax [ebp-34h] +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1017D32  +
cmp [ebp-38h] ecx +
jz loc_1017D47  +
push dword ptr [ebp-38h]  +
call ds:CryptDestroyHash  +
mov ecx [ebp-4] +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_1028111  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1009A40 +
jz loc_1018214  +
push esi  +
call sub_101C399  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov esp 9A4802C7h +
add [ecx] al +
xor eax eax +
push ebx  +
push edi  +
xor ebx ebx +
mov [edx+8] ebx +
mov [edx+0Ch] bl +
mov [edx+0Dh] bl +
lea edi [edx+10h] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [edx+20h] +
stos   +
stos   +
stos   +
lea ecx [edx+30h] +
stos   +
call sub_1040EFB  +
and [eax] al +
add [eax] dh +
cwde   +
xchg eax edx +
add [eax+5Fh] esi +
mov [edx+4] ebx +
mov [edx+64h] ebx +
mov [edx+68h] bl +
mov eax edx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
mov eax [ebp+arg_0] +
imul eax [ebp+arg_4] +
add esi eax +
jmp loc_10182DD  +
sub esi [ebp+arg_0] +
mov ecx esi +
call [ebp+arg_8]  +
dec [ebp+arg_4]  +
jns loc_10182D5  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi ecx +
xor ebx ebx +
mov [esi+68h] al +
test edi edi +
jz loc_1018341  +
cmp edi 104h +
ja loc_1018341  +
xor ecx ecx +
push 2  +
pop edx  +
lea eax [edi+1] +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_101C391  +
pop ecx  +
mov [esi+8] eax +
test eax eax +
jnz loc_1018327  +
mov ebx 8007000Eh +
jmp loc_1018346  +
add edi edi +
push edi  +
push dword ptr [ebp+8]  +
push eax  +
call memcpy  +
mov eax [esi+8] +
add esp 0Ch +
xor ecx ecx +
mov [edi+eax] cx +
jmp loc_1018346  +
mov ebx 80070057h +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+8] +
mov eax [ebx+0Ch] +
push esi  +
mov [ebp-4] eax +
lea eax [ebp+8] +
push eax  +
mov esi ecx +
push offset aType  +
mov [ebp-8] esi +
call sub_101BFD4  +
test eax eax +
jl loc_10183FC  +
cmp dword ptr [ebp+8] 0 +
jz loc_1018398  +
push offset aRequired  +
push dword ptr [ebp+8]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1018398  +
mov byte ptr [esi+68h] 1 +
lea eax [ebp+0Bh] +
push eax  +
push 0  +
push offset aObject  +
call sub_101BF15  +
test eax eax +
jl loc_10183FC  +
cmp byte ptr [ebp+0Bh] 0 +
jnz loc_10183B9  +
mov eax 8004CF00h +
jmp loc_10183FC  +
push edi  +
add esi 8 +
mov edi ebx +
call sub_1019812  +
pop edi  +
test eax eax +
jl loc_10183FC  +
mov eax [ebp-4] +
mov [ebx+0Ch] eax +
lea eax [ebp+0Bh] +
push eax  +
push 0  +
push offset aDigest  +
call sub_101BF15  +
test eax eax +
jl loc_10183FC  +
cmp byte ptr [ebp+0Bh] 0 +
jz loc_10183FC  +
mov esi [ebp-8] +
lea ecx [esi+30h] +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+4]  +
test eax eax +
jl loc_10183FC  +
inc dword ptr [esi+64h]  +
mov ecx [ebp-4] +
pop esi  +
mov [ebx+0Ch] ecx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword ptr aNc@ +
xor eax ebp +
mov [ebp-4] eax +
mov ecx [ebp+0Ch] +
mov eax [ebp+8] +
push ebx  +
mov ebx offset __ImageBase +
mov [ebp-68h] eax +
mov eax [eax+8] +
mov edx [eax] +
shr edx 1 +
push esi  +
push edi  +
mov edi 0FFFFFFFh +
and edx edi +
mov [ebp-48h] ecx +
mov ecx [eax+4] +
mov [ebp-84h] edx +
mov edx [eax+8] +
add eax 0Ch +
lea esi [eax-1] +
and ecx edi +
add ecx ebx +
mov [ebp-64h] ecx +
and edx edi +
cmp esi offset Address +
mov [ebp-4Ch] edx +
mov [ebp-20h] eax +
mov [ebp-38h] esi +
jb loc_10184B7  +
mov esi ds:dword_1004CB8 +
mov eax ds:dword_100DDCC +
imul eax esi +
mov esi [ebp-38h] +
lea eax Address[eax] +
cmp esi eax +
jnb loc_10184B4  +
mov eax esi +
sub eax offset Address +
xor edx edx +
mov esi ds:dword_1004CB8 +
div  esi +
mov edx ds:dword_1004CB8 +
imul edx eax +
mov esi [ebp-38h] +
lea eax Address[edx] +
mov edx [ebp-4Ch] +
mov [ebp-18h] eax +
mov eax [ebp-20h] +
jmp loc_10184BB  +
mov eax [ebp-20h] +
and dword ptr [ebp-18h] 0 +
cmp dword ptr [ebp-18h] 0 +
jnz loc_10184CA  +
and esi 0FFFF0000h +
mov [ebp-18h] esi +
mov esi [ebp-18h] +
sub eax esi +
add eax 0FFFFFFC0h +
jns loc_10184D6  +
xor eax eax +
mov dword ptr [ebp-38h] 40h +
add eax esi +
mov byte ptr [eax] 0 +
inc eax  +
dec dword ptr [ebp-38h]  +
jnz loc_10184DF  +
mov eax ds:dword_1004CB8 +
sub eax edx +
lea esi [ecx+edx] +
mov [ebp-44h] ecx +
lea ecx [eax+1] +
sub [ebp-44h] ebx +
xor eax eax +
mov [ebp-78h] esi +
mov [ebp-24h] ecx +
jmp loc_1018528  +
mov edx dword_104D00C +
imul edx edx +
add edx 269EC3h +
mov dword_104D00C edx +
shr edx 10h +
shl eax 10h +
or eax edx +
shr ecx 10h +
test ecx ecx +
jnz loc_1018505  +
xor edx edx +
div  dword ptr [ebp-24h] +
push dword ptr [ebp-4Ch]  +
mov eax [ebp-18h] +
push dword ptr [ebp-44h]  +
add eax edx +
mov [ebp-38h] eax +
mov eax 0DD413795h +
mov eax [esi] +
mov [ebp-70h] eax +
mov eax [esi+4] +
pop ecx  +
lea esi [ebp-70h] +
pop ecx  +
mov [ebp-6Ch] eax +
mov byte ptr [ebp-11h] 0 +
mov eax 0D4040C02h +
mov ecx [ebp-70h] +
mov esi [ebp-6Ch] +
mov eax ebx +
and ecx edi +
and esi edi +
xor edx edx +
add ecx ebx +
mov edi ds:off_1005164 +
mov [ebp-30h] edx +
mov [ebp-2Ch] edx +
sub eax edi +
mov [ebp-40h] eax +
jnz loc_10185C1  +
mov [ebp-18h] edx +
cmp esi edx +
jbe loc_1018787  +
mov edi 74A3CF2Eh +
mov eax [ebp-18h] +
movzx eax byte ptr [eax+ecx] +
mov edx edi +
add eax edi +
add [ebp-30h] eax +
add eax [ebp-2Ch] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-30h] eax +
inc dword ptr [ebp-18h]  +
mov [ebp-2Ch] eax +
cmp [ebp-18h] esi +
jb loc_1018590  +
jmp loc_1018787  +
lea eax [ecx+esi] +
mov edx ds:dword_100003C +
mov [ebp-3Ch] eax +
lea edx dword_10000A0[edx] +
mov edi ecx +
mov eax [edx] +
sub edi ebx +
mov edx [edx+4] +
mov [ebp-18h] edx +
mov [ebp-24h] edi +
mov edx edi +
and edx 0FFFFF000h +
sub edi edx +
mov [ebp-20h] edi +
mov edi [ebp-24h] +
add esi edi +
mov edi esi +
and edi 0FFFFF000h +
mov [ebp-60h] edi +
sub esi edi +
add eax ebx +
mov edi [ebp-18h] +
add edi eax +
cmp eax edi +
mov [ebp-5Ch] esi +
mov esi eax +
mov [ebp-58h] edi +
jz loc_1018620  +
cmp [esi] edx +
jnb loc_1018620  +
add esi [esi+4] +
cmp esi [ebp-58h] +
jnz loc_1018614  +
and dword ptr [ebp-50h] 0 +
cmp esi [ebp-58h] +
jz loc_1018651  +
cmp [esi] edx +
jnz loc_1018651  +
mov edx [esi+4] +
sub edx 8 +
shr edx 1 +
jz loc_1018651  +
lea edi [esi+8] +
movzx eax word ptr [edi] +
and eax 0FFFh +
cmp eax [ebp-20h] +
jnb loc_1018651  +
inc dword ptr [ebp-50h]  +
inc edi  +
inc edi  +
cmp [ebp-50h] edx +
jnz loc_101863A  +
mov edi 74A3CF2Eh +
cmp esi [ebp-58h] +
jz loc_1018754  +
mov eax [ebp-60h] +
cmp [esi] eax +
ja loc_1018754  +
mov eax [esi+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp [ebp-50h] eax +
jnz loc_1018694  +
add esi [esi+4] +
cmp esi [ebp-58h] +
jz loc_1018754  +
mov eax [ebp-60h] +
cmp [esi] eax +
ja loc_1018754  +
and dword ptr [ebp-50h] 0 +
jmp loc_101866A  +
***
mov eax [ebp-60h] +
cmp [esi] eax +
jnz loc_10186B1  +
mov eax [ebp-50h] +
movzx eax word ptr [esi+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-5Ch] +
jnb loc_1018754  +
mov eax 0F000h +
mov edx [ebp-50h] +
inc dword ptr [ebp-50h]  +
test [esi+edx*2+8] ax +
jz loc_1018656  +
movzx eax word ptr [esi+edx*2+8] +
mov edx [esi] +
and dword ptr [ebp-18h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-20h] eax +
sub [ebp-20h] ecx +
mov [ebp-34h] eax +
jz loc_1018717  +
mov eax [ebp-18h] +
movzx eax byte ptr [eax+ecx] +
add eax edi +
mov edx edi +
add [ebp-30h] eax +
add eax [ebp-2Ch] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-30h] eax +
inc dword ptr [ebp-18h]  +
mov [ebp-2Ch] eax +
mov eax [ebp-18h] +
cmp eax [ebp-20h] +
jb loc_10186E5  +
mov eax [ebp-34h] +
mov eax [eax] +
sub eax [ebp-40h] +
xor ecx ecx +
mov [ebp-7Ch] eax +
movzx eax byte ptr [ebp+ecx-7Ch] +
add eax edi +
add [ebp-30h] eax +
mov edx edi +
add eax [ebp-2Ch] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-30h] eax +
inc ecx  +
cmp ecx 4 +
mov [ebp-2Ch] eax +
jb loc_1018721  +
mov ecx [ebp-34h] +
add ecx 4 +
jmp loc_1018656  +
***
xor esi esi +
mov eax [ebp-3Ch] +
sub eax ecx +
mov [ebp-24h] eax +
jz loc_1018787  +
mov edx edi +
movzx eax byte ptr [ecx+esi] +
add eax edi +
add [ebp-30h] eax +
add eax [ebp-2Ch] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-30h] eax +
mov [ebp-2Ch] eax +
inc esi  +
cmp esi [ebp-24h] +
jb loc_1018760  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-30h] +
mov [ebp+eax-10h] cl +
inc eax  +
cmp eax 8 +
jb loc_1018789  +
mov eax 53058FB2h +
mov esi [ebp-64h] +
mov eax [ebp-38h] +
mov [ebp-3Ch] eax +
mov eax [ebp-4Ch] +
and eax 7 +
mov [ebp-24h] eax +
jz loc_1018B49  +
mov edi [ebp-44h] +
xor ecx ecx +
not edi  +
mov [ebp-18h] ecx +
mov [ebp-20h] ecx +
mov [ebp-1Ch] ecx +
cmp eax ecx +
jle loc_10187F6  +
push 38h  +
pop edx  +
cmp dword ptr [ebp-1Ch] 4 +
movzx ebx byte ptr [esi] +
jge loc_10187E3  +
lea ecx [edx-20h] +
shl ebx cl +
or [ebp-20h] ebx +
jmp loc_10187EA  +
mov ecx edx +
shl ebx cl +
or [ebp-18h] ebx +
inc esi  +
inc dword ptr [ebp-1Ch]  +
sub edx 8 +
cmp [ebp-1Ch] eax +
jl loc_10187D0  +
mov ecx [ebp-10h] +
mov eax [ebp-0Ch] +
xor ecx edi +
sub eax ecx +
xor eax [ebp-44h] +
mov edx eax +
movzx ebx word ptr [ebp-0Ch] +
movzx ecx word ptr [ebp-0Ah] +
sub edx ecx +
sub edx [ebp-10h] +
xor edi edx +
mov [ebp-1Ch] ecx +
movzx edx word ptr [ebp-10h] +
mov [ebp-34h] edx +
xor edx edi +
imul edx ebx +
mov ebx edi +
shr ebx 3 +
add edx ebx +
xor eax edx +
xor ecx eax +
mov ebx eax +
movzx edx word ptr [ebp-0Eh] +
rol ecx 3 +
mov [ebp-40h] edx +
imul edx ecx +
ror ebx 0Eh +
xor ebx edx +
xor edi ebx +
mov ebx [ebp-34h] +
mov ecx edi +
mov edx edi +
sub ecx [ebp-0Ch] +
ror ecx 4 +
imul ebx ecx +
mov ecx [ebp-10h] +
rol edx 7 +
add edx ebx +
mov ebx [ebp-1Ch] +
xor eax edx +
mov edx eax +
sub ecx eax +
rol ecx 6 +
imul ebx ecx +
ror edx 6 +
add edx ebx +
xor edi edx +
mov ecx edi +
sub ecx [ebp-10h] +
rol ecx 0Fh +
mov ebx edi +
movzx edx word ptr [ebp-0Ch] +
imul edx ecx +
rol ebx 0Ch +
xor ebx edx +
xor eax ebx +
movzx ecx word ptr [ebp-0Ch] +
mov edx eax +
xor ecx eax +
imul ecx [ebp-40h] +
ror edx 4 +
sub ecx edx +
xor edi ecx +
mov ecx [ebp-0Ch] +
xor ecx [ebp-10h] +
xor ecx edi +
xor eax ecx +
mov ecx [ebp-1Ch] +
mov edx eax +
sub edx ecx +
xor edx [ebp-10h] +
xor edi edx +
movzx edx word ptr [ebp-0Ch] +
mov ebx edi +
sub ebx ecx +
imul ebx edx +
mov edx edi +
shr edx 3 +
sub ebx edx +
xor eax ebx +
xor ecx eax +
mov ebx eax +
mov edx [ebp-40h] +
rol ecx 1 +
imul edx ecx +
mov ecx [ebp-34h] +
and dword ptr [ebp-1Ch] 0 +
ror ebx 0Eh +
sub edx ebx +
xor edi edx +
mov ebx edi +
mov edx [ebp-0Ch] +
sub edx edi +
ror edx 4 +
imul ecx edx +
xor edi [ebp-18h] +
ror ebx 0Dh +
sub ecx ebx +
mov ebx [ebp-24h] +
xor ecx [ebp-20h] +
xor eax ecx +
mov ecx edi +
test ebx ebx +
mov [ebp-34h] eax +
jle loc_101893A  +
cmp dword ptr [ebp-1Ch] 4 +
jge loc_1018921  +
rol dword ptr [ebp-34h] 8 +
mov dl [ebp-34h] +
mov ebx [ebp-3Ch] +
inc dword ptr [ebp-3Ch]  +
xor [ebp-11h] dl +
mov [ebx] dl +
jmp loc_101892F  +
mov edx [ebp-3Ch] +
inc dword ptr [ebp-3Ch]  +
rol ecx 8 +
xor [ebp-11h] cl +
mov [edx] cl +
inc dword ptr [ebp-1Ch]  +
mov ebx [ebp-24h] +
cmp [ebp-1Ch] ebx +
jl loc_1018907  +
add ebx 0FFFFFFFCh +
test ebx ebx +
jle loc_1018B2F  +
push 4  +
pop ecx  +
sub ecx ebx +
shl ecx 3 +
shr edi cl +
shl edi cl +
mov edx edi +
mov ebx offset __ImageBase +
mov ecx [ebp-4Ch] +
shr ecx 3 +
test ecx ecx +
jbe loc_1018B5D  +
mov edi [ebp-0Ch] +
xor edi [ebp-10h] +
mov [ebp-24h] ecx +
mov [ebp-74h] edi +
movzx edi word ptr [ebp-0Ah] +
mov [ebp-1Ch] edi +
movzx edi word ptr [ebp-0Eh] +
mov [ebp-40h] edi +
movzx ebx byte ptr [esi+5] +
movzx edi byte ptr [esi+1] +
movzx ecx byte ptr [esi] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+2] +
shl ecx 8 +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+3] +
or ecx edi +
movzx edi byte ptr [esi+4] +
shl edi 8 +
or edi ebx +
shl edi 8 +
movzx ebx byte ptr [esi+6] +
or edi ebx +
shl edi 8 +
movzx ebx byte ptr [esi+7] +
or edi ebx +
mov ebx [ebp-0Ch] +
mov [ebp-80h] edi +
xor edx edi +
mov edi [ebp-10h] +
xor edi edx +
mov [ebp-34h] ecx +
sub ebx edi +
xor ebx ecx +
xor eax ebx +
mov ecx eax +
mov ebx [ebp-40h] +
sub ecx [ebp-1Ch] +
sub ecx [ebp-10h] +
add esi 8 +
xor edx ecx +
movzx ecx word ptr [ebp-10h] +
mov edi ecx +
xor edi edx +
movzx ecx word ptr [ebp-0Ch] +
imul edi ecx +
mov ecx edx +
shr ecx 3 +
add edi ecx +
xor eax edi +
mov ecx [ebp-1Ch] +
xor ecx eax +
mov edi eax +
rol ecx 3 +
imul ebx ecx +
ror edi 0Eh +
xor edi ebx +
xor edx edi +
mov ebx edx +
movzx edi word ptr [ebp-10h] +
mov ecx edx +
sub ecx [ebp-0Ch] +
ror ecx 4 +
imul edi ecx +
mov ecx [ebp-10h] +
rol ebx 7 +
add ebx edi +
xor eax ebx +
sub ecx eax +
mov ebx [ebp-1Ch] +
mov edi eax +
rol ecx 6 +
imul ebx ecx +
ror edi 6 +
add edi ebx +
xor edx edi +
mov ecx edx +
mov ebx edx +
movzx edi word ptr [ebp-0Ch] +
sub ecx [ebp-10h] +
rol ecx 0Fh +
imul edi ecx +
rol ebx 0Ch +
xor ebx edi +
movzx ecx word ptr [ebp-0Ch] +
xor eax ebx +
mov ebx [ebp-40h] +
mov edi eax +
ror edi 4 +
xor ecx eax +
imul ecx [ebp-40h] +
sub ecx edi +
xor edx ecx +
mov ecx [ebp-74h] +
xor ecx edx +
xor eax ecx +
mov ecx eax +
sub ecx [ebp-1Ch] +
xor ecx [ebp-10h] +
xor edx ecx +
movzx ecx word ptr [ebp-0Ch] +
mov edi edx +
sub edi [ebp-1Ch] +
imul edi ecx +
mov ecx edx +
shr ecx 3 +
sub edi ecx +
mov ecx [ebp-1Ch] +
xor eax edi +
xor ecx eax +
rol ecx 1 +
mov edi eax +
imul ebx ecx +
ror edi 0Eh +
mov ecx [ebp-0Ch] +
sub ebx edi +
xor edx ebx +
sub ecx edx +
movzx edi word ptr [ebp-10h] +
ror ecx 4 +
mov ebx edx +
imul edi ecx +
xor edx [ebp-18h] +
mov cl [ebp-11h] +
ror ebx 0Dh +
sub edi ebx +
xor edi [ebp-20h] +
xor eax edi +
xor cl al +
xor cl dl +
mov edi [ebp-3Ch] +
mov [edi+3] al +
mov [edi+7] dl +
ror eax 8 +
mov [edi+2] al +
xor cl al +
ror edx 8 +
mov [edi+6] dl +
xor cl dl +
ror eax 8 +
xor cl al +
mov [edi+1] al +
ror edx 8 +
xor cl dl +
ror eax 8 +
mov [edi+5] dl +
ror edx 8 +
mov bl dl +
xor bl al +
xor cl bl +
mov ebx [ebp-34h] +
mov [edi] al +
mov [edi+4] dl +
mov [ebp-20h] ebx +
mov ebx [ebp-80h] +
add edi 8 +
dec dword ptr [ebp-24h]  +
mov [ebp-11h] cl +
ror eax 8 +
ror edx 8 +
mov [ebp-18h] ebx +
mov [ebp-3Ch] edi +
jnz loc_1018980  +
mov ebx offset __ImageBase +
jmp loc_1018B60  +
xor edx edx +
test ebx ebx +
jge loc_1018953  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_1018953  +
***
xor edx edx +
mov eax [ebp-44h] +
mov [ebp-20h] eax +
not eax  +
mov [ebp-18h] eax +
xor eax eax +
jmp loc_1018958  +
***
mov cl [ebp-11h] +
mov eax [ebp-78h] +
cmp cl [eax+8] +
jz loc_1018BF4  +
call sub_100E99C  +
mov edi eax +
mov eax 0FFFFF000h +
mov edx [ebp-68h] +
lea ecx [edx+0Ch] +
mov dword ptr [edx+8] offset sub_1025029 +
mov edx 0FFFFh +
and ecx 0FFFFFFFCh +
lea esi [ecx+0FFFh] +
and edi eax +
and esi eax +
xor eax eax +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_1018B99  +
mov ebx 0FFFFh +
div  ebx +
mov eax [ebp-48h] +
inc edx  +
cmp ecx esi +
mov [eax+14h] edi +
mov [eax+0Ch] edx +
mov dword ptr [ebp-48h] 0 +
mov eax ecx +
jnb loc_1018BEA  +
mov ecx [ebp-48h] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_1018BDE  +
mov eax offset sub_1025029 +
jmp loc_1018CC8  +
mov eax [ebp-64h] +
mov ecx ds:off_1005164 +
sub eax [ebp-38h] +
sub ebx ecx +
mov [ebp-18h] eax +
mov [ebp-24h] ebx +
jnz loc_1018C12  +
test eax eax +
jz loc_1018CB3  +
mov edi [ebp-44h] +
mov ecx ds:dword_100EB28 +
mov eax [ebp-4Ch] +
mov esi [ebp-38h] +
sub esi [ebp-64h] +
add eax edi +
xor ebx ebx +
mov [ebp-48h] eax +
dec ecx  +
js loc_1018C55  +
lea eax [ecx+ebx] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp edi edx +
jnb loc_1018C4C  +
lea ecx [eax-1] +
jmp loc_1018C51  +
jbe loc_1018C59  +
lea ebx [eax+1] +
cmp ecx ebx +
jge loc_1018C2E  +
mov edi ebx +
jmp loc_1018CAB  +
mov edi eax +
jmp loc_1018CAB  +
mov eax ds:dword_100EB2C[edi*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-48h] +
jnb loc_1018CB3  +
lea ebx __ImageBase[ecx+esi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_1018C9E  +
dec ecx  +
jz loc_1018C99  +
dec ecx  +
jnz loc_1018CA4  +
mov edx [ebp-24h] +
jmp loc_1018CA4  +
mov edx [ebp-18h] +
jmp loc_1018CA4  +
mov edx [ebp-24h] +
sub edx [ebp-18h] +
dec eax  +
dec eax  +
jnz loc_1018CAA  +
add [ebx] edx +
inc edi  +
cmp edi ds:dword_100EB28 +
jb loc_1018C5D  +
mov eax ds:dword_1004CB8 +
mov eax 0D89656ACh +
mov eax [ebp-84h] +
mov ecx [ebp-38h] +
add eax ecx +
mov ecx [ebp-68h] +
mov [ecx+8] eax +
mov ecx [ebp-4] +
xor ecx ebp +
pop edi  +
pop esi  +
pop ebx  +
call sub_1028111  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov edx [eax+4] +
imul edx edx +
add edx [ebp+8] +
lea ecx [ebp+0Ch] +
call sub_1018E98  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 4  +
pop ebx  +
add esi 20h +
mov [ebp+var_4] ebx +
mov edi [esi-4] +
jmp loc_1018D70  +
mov ecx [edi] +
test ecx ecx +
jz loc_1018D6E  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+4]  +
add edi ebx +
cmp edi [esi] +
jnz loc_1018D61  +
mov eax [esi] +
mov ecx [esi-4] +
cmp ecx eax +
jz loc_1018D91  +
mov edx eax +
cmp eax eax +
jz loc_1018D8F  +
mov edi [edx] +
mov [ecx] edi +
add edx ebx +
add ecx ebx +
cmp edx eax +
jnz loc_1018D83  +
mov [esi] ecx +
add esi 28h +
dec [ebp+var_4]  +
jnz loc_1018D5C  +
mov eax [ebp+arg_0] +
push offset sub_1018E66  +
push ebx  +
push 28h  +
call sub_10182C2  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push 16h  +
mov esi eax +
pop eax  +
call sub_1017176  +
lea eax [esi+0Ch] +
push eax  +
mov dword ptr [esi] offset off_1009A3C +
call sub_1018E19  +
lea eax [esi+0ACh] +
push eax  +
call sub_1018E19  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov ecx [eax+1Ch] +
call sub_10170CE  +
test edx edx +
mov edi edi +
call sub_10170CE  +
mov edi edi +
cmp eax 1 +
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1009A50 +
jz loc_1019291  +
push esi  +
call sub_101C399  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [edx] +
xor eax eax +
cmp ecx edx +
jz loc_101A853  +
push esi  +
mov esi [ecx+8] +
mov eax ecx +
cmp esi [ebp+8] +
jz loc_101A852  +
mov ecx [ecx] +
xor eax eax +
cmp ecx edx +
jnz loc_101A840  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov edi edi +
mov eax dword_104E478 +
or eax dword_104E47C +
jz loc_101AB50  +
xor eax eax +
jmp loc_101AB68  +
push offset dword_104E478  +
push dword ptr [ebp+8]  +
push offset sub_102237A  +
push offset dword_1004B90  +
call dword_104D11C  +
pop ebp  +
retn 4  +
***
mov esi [edi] +
mov [ecx] esi +
dec dword ptr [ebp-20h]  +
add ecx 4 +
jmp loc_101B63F  +
***
lea edx [ebp-74h] +
mov eax [ebp-14h] +
call sub_1017113  +
retn   +
***
test edx edx +
mov edi edi +
call sub_10170CE  +
mov edi edi +
cmp eax 1 +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call near ptr loc_103EC54+3  +
mov edi eax +
mov eax [ebp+var_4] +
cmp eax 40h +
jb loc_101BAC0  +
lea ecx [eax-0Bh] +
cmp ecx 30h +
jb loc_101BAC0  +
mov ecx [ebp+arg_8] +
cmp [ecx] eax +
jb loc_101BAC0  +
lea esi [eax+1Ch] +
push esi  +
call malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_101BA50  +
mov eax 8007000Eh +
jmp loc_101BAC5  +
push esi  +
push 0  +
push ebx  +
call memset  +
mov dword ptr [ebx] 31415352h +
add esi 0FFFFFFECh +
mov [ebx+4] esi +
mov eax [ebp+var_4] +
shl eax 3 +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov [ebx+0Ch] eax +
mov eax [ebp+var_8] +
mov [ebx+10h] eax +
push [ebp+var_4]  +
lea eax [ebx+14h] +
push edi  +
push eax  +
call memcpy  +
add esp 18h +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101BC6D  +
push ebx  +
mov esi eax +
call free  +
pop ecx  +
test esi esi +
jz loc_101BAB4  +
jle loc_101BAB0  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
jmp loc_101BAC5  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_101BAC5  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
push eax  +
call sub_103ECA5  +
mov eax [ebp-4] +
cmp [ebx] eax +
jnb loc_101BAEE  +
mov eax 80070057h +
jmp locret_101BB35  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [eax+esi-1] 0 +
push dword ptr [ebp+8]  +
mov eax [ebp-4] +
mov ecx esi +
call sub_101BD54  +
test eax eax +
jz loc_101BB15  +
jle locret_101BB35  +
and eax 0FFFFh +
or eax 80070000h +
jmp locret_101BB35  +
push esi  +
push esi  +
call sub_103EC09  +
test eax eax +
jnz loc_101BB27  +
mov eax 8007000Eh +
jmp locret_101BB35  +
mov ecx [ebp-4] +
mov eax esi +
mov [ebx] ecx +
call sub_101BC54  +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
lea ecx [eax+ecx-1] +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push dword ptr [esi+8]  +
and dword ptr [esi+4] 0 +
call sub_101C3A4  +
and dword ptr [esi+8] 0 +
push esi  +
call sub_101C399  +
add esp 0Ch +
mov eax esi +
retn   +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
xor edi edi +
push eax  +
push edi  +
lea esi [ebp+var_8] +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
call sub_101C06D  +
cmp eax edi +
jl loc_101C10C  +
mov edi [ebp+var_4] +
lea esi [edi+1] +
cmp esi edi +
jnb loc_101C0D0  +
mov eax 80004005h +
jmp loc_101C10C  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_101C391  +
pop ecx  +
mov [ebx] eax +
test eax eax +
jnz loc_101C0F4  +
mov eax 8007000Eh +
jmp loc_101C10C  +
push edi  +
push [ebp+var_8]  +
push esi  +
mov esi eax +
call sub_101BE0C  +
test eax eax +
jl loc_101C10C  +
mov ecx [ebx] +
xor edx edx +
mov [ecx+edi*2] dx +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
mov ecx [ecx] +
push esi  +
mov esi [eax+14h] +
mov eax [eax+18h] +
push dword ptr [ebp+8]  +
mov edx eax +
mov eax [ebp+0Ch] +
lea ecx [ecx+esi*2] +
sub edx esi +
call sub_101642C  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
cmp eax [edi+4] +
mov edi edi +
cmp eax [edi+4] +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
jns loc_101C283  +
movzx eax cx +
mov [ebp+lpProcName] eax +
test edx edx +
jnz loc_101C302  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jz loc_101C2E0  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_101C2D5  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_1002684 +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jz loc_101C302  +
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_101C302  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_101C302  +
call GetLastError  +
cmp eax 7Eh +
jz loc_101C2F1  +
cmp eax 0C1h +
jnz loc_101C344  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_101C308  +
mov [ebp+hModule] eax +
cmp [ebp+hModule] 0FFFFFFFFh +
jnz loc_101C311  +
mov [ebp+var_4] 1 +
jmp loc_101C344  +
cmp [ebp+hModule] 0 +
jz loc_101C344  +
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jnz loc_101C339  +
call GetLastError  +
cmp eax 7Fh +
jz loc_101C339  +
cmp eax 0B6h +
jnz loc_101C340  +
mov [ebp+var_4] 1 +
test esi esi +
jnz loc_101C34F  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_101C35A  +
mov eax [ebp+arg_4] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov eax dword_104D400 +
push offset dword_104D124  +
push dword_104D3FC  +
mov dword_104D124 eax +
push offset dword_104D0B4  +
push offset dword_104D0C0  +
push offset dword_104D09C  +
call ds:__getmainargs  +
add esp 14h +
mov dword_104D120 eax +
retn   +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_104D3F4 eax +
xor ebx ebx +
cmp dword_104D118 ebx +
jnz loc_101C5B6  +
push eax  +
call ds:_exit  +
***
mov eax 5A4Dh +
call sub_101CB4B  +
jmp loc_101C46D  +
***
mov edi edi +
xor eax eax +
call sub_10170CE  +
and dword ptr [ebp-1Ch] 0 +
and dword ptr [ebp-4] 0 +
push 80000000h  +
push dword ptr [ebp+8]  +
call ds:InitializeCriticalSectionAndSpinCount  +
test eax eax +
jnz loc_101C77E  +
cmp dword_104D468 eax +
jnz loc_101C77E  +
jmp loc_101C75E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
call ds:__imp_GetLastError  +
test eax eax +
jnz loc_101C76F  +
mov eax 54Fh +
test eax eax +
jle loc_101C77B  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_1009D42  +
retn 4  +
***
mov edi edi +
mov edi edi +
call sub_10170CE  +
mov edi edi +
call ds:_controlfp  +
retn   +
***
call sub_10170CE  +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword ptr aNc@ +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_101CB7D  +
test eax ebx +
jz loc_101CB7D  +
not eax  +
mov dword_104D4B8 eax +
jmp loc_101CBD8  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_101CBC4  +
test dword ptr aNc@ ebx +
jnz loc_101CBC9  +
mov esi 0BB40E64Fh +
mov dword ptr aNc@ esi +
not esi  +
mov dword_104D4B8 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov eax offset __AddMachineCertToLicenseStore +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset msdrm_dll_import_table  +
call sub_101C239  +
pop edx  +
pop ecx  +
jmp eax  +
***
pushf   +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebx  +
push ebx  +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
add ecx 0FFFFFFFFh +
push esi  +
push edi  +
js loc_101F802  +
mov edx [ebp+arg_4] +
mov edi [ebp+arg_0] +
lea eax [edx+ecx*4] +
sub edi edx +
lea ebx [ebx] +
mov edx [edi+eax] +
mov esi [eax] +
cmp edx esi +
ja loc_101F80A  +
jb loc_101F815  +
dec ecx  +
sub eax 4 +
test ecx ecx +
jge loc_101F7EF  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
pop edi  +
mov eax 1 +
pop esi  +
pop ebp  +
retn 0Ch  +
pop edi  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov ecx [esp+arg_C] +
mov ecx [esp+arg_C] +
mov edx [esp+arg_0] +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
pushf   +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
pushf   +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
mov eax ecx +
shl eax 4 +
mov ebx edi +
shr ebx 4 +
add ebx eax +
movzx eax bl +
mov edx [esi+eax*8-478h] +
mov [ebp+var_10] eax +
mov eax [esi+eax*8-474h] +
mov [ebp+var_20] eax +
mov eax ebx +
shr eax 8 +
movzx eax al +
mov [ebp+var_24] edx +
mov edx [esi+eax*8-1C8h] +
mov eax [esi+eax*8-1C4h] +
mov [ebp+var_28] eax +
mov eax ebx +
shr eax 10h +
movzx eax al +
xor eax 71h +
mov [ebp+var_2C] edx +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_18] eax +
lea eax [ecx-74F51B08h] +
mov [ebp+var_4] eax +
xor eax 5EE626A8h +
mov [ebp+var_1C] edx +
push eax  +
mov edx offset dword_1004B40 +
mov eax esi +
call sub_1022306  +
mov eax [ebp+arg_4] +
mov edx [ebp+var_2C] +
lea eax [edi+eax+20E32F80h] +
xor eax ebx +
movzx ecx ax +
mov ecx [ecx+edx-325Bh] +
mov edx [ebp+arg_4] +
mov [ebp+var_34] ecx +
mov ecx edi +
shl ecx 4 +
shr edx 4 +
add ecx edx +
mov edx ecx +
xor edx [ebp+var_4] +
xor ecx eax +
xor ecx [ebp+var_4] +
xor edx ebx +
mov [ebp+var_8] ecx +
mov ecx edi +
xor ecx edx +
xor ecx eax +
mov eax [ebp+arg_4] +
xor ecx eax +
sub edi eax +
xor edi [ebp+var_8] +
mov [ebp+arg_4] ecx +
xor ecx [ebp+var_8] +
xor edi edx +
xor ecx ebx +
xor ecx 741272DCh +
mov eax ecx +
shr eax 8 +
xor al 43h +
movzx eax al +
xor edi 92187BA7h +
mov [ebp+var_14] edx +
cdq   +
mov [ebp+var_C] edi +
mov edi eax +
mov al cl +
mov ebx edx +
xor al 7Eh +
movzx eax al +
cdq   +
sub eax edi +
sbb edx ebx +
add eax [ebp+var_1C] +
adc edx [ebp+var_18] +
mov [ebp+var_2C] eax +
mov eax [ebp+arg_4] +
xor eax 2DABA66Ah +
mov [ebp+var_28] edx +
mov edx [ebp+var_C] +
xor edi edi +
add edx 0B85CD603h +
or edi edx +
mov edx [ebp+var_2C] +
mov [edx] edi +
mov edi [ebp+var_24] +
xor ebx ebx +
or eax ebx +
mov [edx+4] eax +
mov eax ecx +
shr eax 10h +
movzx eax al +
xor eax 6Eh +
mov [esi+eax*8] edi +
mov edi [ebp+var_20] +
mov [esi+eax*8+4] edi +
mov eax [ebp+var_34] +
shr ecx 18h +
xor ecx 4Bh +
mov [esi+ecx*8] eax +
xor eax eax +
mov [esi+ecx*8+4] eax +
movzx ecx byte ptr [ebp+arg_4] +
movzx eax byte ptr [ebp+var_4] +
xor eax ecx +
movzx ecx byte ptr [ebp+var_C] +
xor eax ecx +
mov ecx [ebp+var_28] +
xor eax 4Dh +
xor eax [ebp+var_10] +
pop edi  +
mov [eax+esi] edx +
mov edx [ebp+var_14] +
mov [eax+esi+4] ecx +
mov ecx [ebp+var_8] +
xor eax eax +
add ecx 987785Dh +
xor esi esi +
xor edx 576B97DCh +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
and dword ptr [ebp-4Ch] 0 +
jmp loc_102315E  +
***
mov eax 0F000h +
mov edx [ebp-4Ch] +
inc dword ptr [ebp-4Ch]  +
test [esi+edx*2+8] ax +
jz loc_102314A  +
movzx eax word ptr [esi+edx*2+8] +
mov edx [esi] +
and dword ptr [ebp-14h] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-1Ch] eax +
sub [ebp-1Ch] ecx +
mov [ebp-30h] eax +
jz loc_102320B  +
mov eax [ebp-14h] +
mov edx edi +
movzx eax byte ptr [eax+ecx] +
add eax edi +
add [ebp-28h] eax +
add eax [ebp-24h] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-28h] eax +
inc dword ptr [ebp-14h]  +
mov [ebp-24h] eax +
mov eax [ebp-14h] +
cmp eax [ebp-1Ch] +
jb loc_10231D9  +
mov eax [ebp-30h] +
mov eax [eax] +
sub eax [ebp-38h] +
xor ecx ecx +
mov [ebp-74h] eax +
movzx eax byte ptr [ebp+ecx-74h] +
add eax edi +
add [ebp-28h] eax +
mov edx edi +
add eax [ebp-24h] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-28h] eax +
mov [ebp-24h] eax +
inc ecx  +
cmp ecx 4 +
jb loc_1023215  +
mov ecx [ebp-30h] +
add ecx 4 +
jmp loc_102314A  +
***
xor edx edx +
test ebx ebx +
jge loc_1023447  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_1023447  +
***
xor edx edx +
mov eax [ebp-3Ch] +
mov [ebp-1Ch] eax +
not eax  +
mov [ebp-14h] eax +
xor eax eax +
jmp loc_102344C  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
sub eax eax +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi eax +
sub edi edx +
lea ebx [edx+6C0D0D03h] +
mov ecx edi +
xor ecx 44D74806h +
mov [ebp+arg_4] ecx +
lea ecx [edx-517FD473h] +
xor ecx ebx +
mov [ebp+var_C] ecx +
shl eax 4 +
shr edx 4 +
add eax edx +
xor eax [ebp+var_C] +
mov ecx edi +
xor ecx [ebp+arg_4] +
xor eax [ebp+arg_4] +
xor ecx ebx +
movzx edx bl +
xor ecx 41FC21FDh +
xor edx 13h +
xor eax 0D2EB0164h +
mov [ebp+var_4] ebx +
mov ebx [edx+esi] +
mov [ebp+var_8] ecx +
xor ecx ecx +
sub ebx eax +
mov eax [edx+esi+4] +
sbb eax ecx +
movzx ecx byte ptr [ebp+var_8] +
xor edx edx +
sub ecx 50h +
add ebx ecx +
adc eax edx +
xor edi [ebp+var_8] +
mov [esi+1B8h] ebx +
mov ebx [ebp+var_C] +
xor edi ebx +
xor edi 0A1B3228h +
mov [esi+1BCh] eax +
add edi 5CA3526Dh +
push edi  +
mov edx offset dword_1004C5C +
mov eax esi +
call sub_1022306  +
mov edx [ebp+arg_4] +
add ebx 8EE7CD54h +
pop edi  +
xor eax eax +
xor edx 946E6B7Ah +
xor ecx ecx +
or eax ebx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov edx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
shr edx 4 +
mov eax ebx +
shl eax 4 +
add edx eax +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebx-6BB2739Bh] +
mov ebx ecx +
shr ebx 8 +
movzx eax dl +
xor eax 85h +
mov eax [esi+eax*8] +
mov [ebp+var_8] ecx +
movzx edi bl +
xor edi 0C6h +
mov eax [eax+edi] +
mov [ebp+var_44] eax +
movzx eax cl +
mov [ebp+var_1C] eax +
xor eax 19h +
shr ecx 10h +
movzx ecx cl +
xor edi edi +
sub ecx 8Dh +
add ecx [eax+esi] +
mov ebx [ebp+arg_4] +
adc edi [eax+esi+4] +
mov eax edx +
shr eax 8 +
movzx eax al +
xor eax 51h +
mov [ebp+var_34] ecx +
mov ecx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_20] eax +
mov eax edx +
shr eax 10h +
movzx eax al +
xor eax 76h +
mov [ebp+var_30] edi +
mov edi [ebp+arg_0] +
mov [ebp+var_24] ecx +
mov ecx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_28] eax +
lea eax [edi+ebx-24CFBE70h] +
sub edi ebx +
xor edi [ebp+var_8] +
xor eax edx +
xor edi edx +
xor edi 0D67521Bh +
mov [ebp+var_C] edi +
mov [ebp+var_18] eax +
lea edi [ebx-6BC75B6Ch] +
xor edi eax +
xor edi [ebp+var_8] +
mov [ebp+var_2C] ecx +
mov eax edi +
shr eax 8 +
xor al 4Dh +
movzx eax al +
mov ecx edx +
shr ecx 18h +
mov [ebp+var_4] edi +
mov edi [ecx+esi-19h] +
mov ecx [ecx+esi-15h] +
mov [ebp+var_14] edx +
cdq   +
sub edi eax +
mov al byte ptr [ebp+var_4] +
sbb ecx edx +
xor al 0C3h +
movzx eax al +
cdq   +
add edi eax +
adc ecx edx +
mov [ebp+var_38] ecx +
mov eax [ebp+arg_0] +
xor eax [ebp+var_C] +
mov edx offset dword_1004D18 +
xor eax [ebp+var_18] +
xor eax ebx +
mov [ebp+var_10] eax +
xor eax 0B6543E1h +
push eax  +
mov eax esi +
call sub_1022306  +
mov eax [ebp+arg_0] +
xor eax [ebp+var_4] +
xor edx edx +
xor eax [ebp+var_C] +
xor eax ebx +
mov [ebp+arg_4] eax +
mov eax [ebp+var_10] +
xor eax [ebp+var_4] +
mov ecx [ebp+arg_4] +
xor eax [ebp+var_14] +
xor ecx 0CC0FC860h +
xor eax 68DB2085h +
mov [ebp+var_4] eax +
add eax 0F71101C5h +
or edx eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_10] +
mov [edi] edx +
xor eax [ebp+var_8] +
mov edx [ebp+var_24] +
xor eax [ebp+var_14] +
xor ebx ebx +
or ecx ebx +
mov [edi+4] ecx +
movzx ecx al +
mov [ecx+esi+0C6h] edx +
mov edx [ebp+var_20] +
mov [ecx+esi+0CAh] edx +
mov edx [ebp+var_2C] +
mov ecx eax +
shr ecx 8 +
movzx ecx cl +
xor ecx 0D9h +
mov [ecx+esi] edx +
mov edx [ebp+var_28] +
mov [ecx+esi+4] edx +
mov edx [ebp+var_38] +
mov ecx eax +
shr ecx 10h +
movzx ecx cl +
mov [ecx+esi+35h] edx +
mov edx [ebp+var_18] +
mov [ecx+esi+31h] edi +
mov ecx [ebp+var_44] +
shr eax 18h +
xor eax 90h +
mov [esi+eax*8] ecx +
xor ecx ecx +
mov [esi+eax*8+4] ecx +
movzx ecx byte ptr [ebp+arg_4] +
movzx eax dl +
xor eax ecx +
movzx ecx byte ptr [ebp+var_4] +
xor eax ecx +
xor eax [ebp+var_1C] +
mov ecx [ebp+var_34] +
mov [esi+eax*8-420h] ecx +
mov ecx [ebp+var_30] +
mov [esi+eax*8-41Ch] ecx +
mov ecx [ebp+var_C] +
xor eax eax +
add ecx 0A2C8598h +
xor esi esi +
xor edx 4B46E1E6h +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_14] ecx +
mov eax [ebp+arg_4] +
mov esi [ebp+arg_0] +
sub esi eax +
mov ebx esi +
xor ebx 0CB7DACD4h +
movzx edx bl +
mov edi [edx+ecx+49h] +
mov edx [edx+ecx+4Dh] +
mov [ebp+var_18] edx +
mov edx [ebp+arg_0] +
shr edx 4 +
shl eax 4 +
mov [ebp+var_1C] edi +
lea edi [edx+eax] +
mov edx esi +
xor edx ebx +
xor edx 6BE3C2D8h +
mov [ebp+var_C] edx +
xor edx 0FDDA6D0Fh +
push edx  +
mov edx offset dword_1004DCC +
mov eax ecx +
mov [ebp+var_10] ebx +
mov [ebp+var_8] edi +
call sub_1022306  +
mov eax [ebp+arg_0] +
mov edx [ebp+var_1C] +
and [ebp+var_18] 0 +
and [ebp+var_18] 0 +
xor eax edi +
xor eax ebx +
xor eax [ebp+arg_4] +
add edi 0FB004B42h +
movzx ecx al +
xor ecx 0A1h +
mov edx [edx+ecx] +
mov ecx edx +
sub ecx edi +
neg ecx  +
sbb cl cl +
inc cl  +
cmp edi edx +
mov edi [ebp+arg_0] +
setnbe [ebp+var_1]  +
xor esi eax +
xor esi [ebp+var_C] +
add edi 886A397Bh +
xor edi [ebp+var_C] +
xor esi 0E713694Dh +
xor edi [ebp+var_8] +
mov [ebp+arg_4] esi +
mov esi [ebp+var_8] +
xor esi edi +
xor esi eax +
mov eax esi +
xor eax [ebp+arg_4] +
xor eax [ebp+var_8] +
xor ebx eax +
cmp [ebp+var_1] 1 +
jnz loc_1027C58  +
mov edx [ebp+arg_4] +
lea eax [edi+4EF6FA6Bh] +
xor edi edi +
xor edx 37EFDD2Dh +
xor esi esi +
jmp loc_1027C76  +
mov eax [ebp+arg_4] +
xor eax edi +
xor eax [ebp+var_10] +
add esi 0DF911CAEh +
xor eax 0DD09845Dh +
add eax 452F6E84h +
mov edi eax +
xor eax eax +
xor edx edx +
or eax esi +
mov esi [ebp+var_14] +
or edi edx +
cmp [ebp+var_1] 0 +
movzx edx bl +
mov [ebp+arg_4] eax +
setnz al  +
mov [esi+edx*8-188h] al +
mov edx [ebp+arg_4] +
test cl cl +
setnz al  +
shr ebx 8 +
movzx ecx bl +
xor ecx 0DDh +
mov [esi+ecx*8] al +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
and dword ptr [ebp-28h] 0 +
jmp loc_1027E06  +
***
mov eax [ebp-28h] +
mov edx 0F000h +
inc dword ptr [ebp-28h]  +
test [esi+eax*2+8] dx +
jz loc_1027DF3  +
movzx eax word ptr [esi+eax*2+8] +
mov edx [esi] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] edi +
mov [ebp-10h] eax +
jz loc_1027EC0  +
mov eax [ebp-4] +
movzx eax byte ptr [eax+edi] +
add eax ecx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Fh +
ror eax 0Fh +
xor edx eax +
mov eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov eax [ebp-4] +
mov [ebp-20h] edx +
cmp eax [ebp-8] +
jb loc_1027E7F  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
mov [ebp-8] eax +
xor edi edi +
movzx eax byte ptr [ebp+edi-8] +
add eax ecx +
mov edx ecx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Fh +
ror eax 0Fh +
xor edx eax +
add [ebp-24h] edx +
mov [ebp-20h] edx +
inc edi  +
cmp edi 4 +
jb loc_1027ECA  +
mov edi [ebp-10h] +
add edi 4 +
jmp loc_1027DF3  +
***
mov edi edi +
cmp ecx dword ptr aNc@ +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
mov ebx ecx +
sub ebx [ebp+arg_0] +
push edi  +
movzx eax bl +
xor eax 0E0h +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_0] +
xor eax ecx +
mov [ebp+var_4] eax +
xor eax 6DAC6704h +
mov [ebp+var_C] edx +
push eax  +
mov edx (offset loc_10050F3+1) +
mov eax esi +
call sub_1022306  +
mov eax ebx +
shr eax 8 +
movzx eax al +
sub eax 0A8h +
mov ecx eax +
mov eax ebx +
shr eax 10h +
sub al 29h +
movzx eax al +
cdq   +
xor edi edi +
sub ecx eax +
sbb edi edx +
add ecx [ebp+var_C] +
adc edi [ebp+var_8] +
mov [esi+1B8h] ecx +
mov ecx [ebp+arg_4] +
mov [esi+1BCh] edi +
mov esi [ebp+arg_0] +
mov edx ecx +
mov eax esi +
shl eax 4 +
shr edx 4 +
add eax edx +
xor eax [ebp+var_4] +
lea ecx [esi+ecx-60146F9h] +
xor eax ebx +
xor esi esi +
add eax 77CD6DDEh +
xor ecx ebx +
pop edi  +
or eax esi +
xor edx edx +
sub ecx 6A5A3220h +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx eax +
push edi  +
mov edi [ebp+arg_0] +
sub ecx edi +
mov edx edi +
xor edx eax +
movzx eax cl +
xor eax 5Dh +
mov ebx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_2C] eax +
mov [ebp+var_30] ebx +
mov eax ecx +
shr eax 10h +
movzx eax al +
mov ebx [eax+esi-9Eh] +
mov eax [eax+esi-9Ah] +
mov [ebp+var_3C] eax +
mov [ebp+var_40] ebx +
mov eax ecx +
shr eax 18h +
mov ebx [eax+esi+18h] +
mov eax [eax+esi+1Ch] +
mov [ebp+var_24] eax +
mov [ebp+var_28] ebx +
mov ebx edx +
shr ebx 8 +
mov eax ecx +
shr eax 8 +
movzx eax al +
mov eax [esi+eax*8-48h] +
movzx ebx bl +
mov eax [eax+ebx-9Ah] +
mov [ebp+var_4] edx +
mov [ebp+var_48] eax +
movzx eax dl +
shr edx 10h +
movzx edx dl +
xor ebx ebx +
add edx 17h +
add edx [eax+esi-85h] +
mov [ebp+var_20] eax +
adc ebx [eax+esi-81h] +
mov [ebp+var_38] edx +
mov [ebp+var_34] ebx +
mov ebx [ebp+arg_4] +
add ebx 35D24D68h +
xor ebx ecx +
lea eax [ebx-5AFB2576h] +
push eax  +
mov edx offset loc_1005158 +
mov eax esi +
mov [ebp+var_8] ecx +
mov [ebp+var_1C] ebx +
call sub_1022306  +
mov ecx [ebp+arg_4] +
mov eax edi +
sub eax ecx +
xor eax [ebp+var_4] +
lea ecx [edi+ecx+3738DEBAh] +
xor eax [ebp+var_8] +
xor ecx ebx +
xor ecx [ebp+var_4] +
xor eax 5F372D89h +
mov [ebp+var_C] ecx +
mov [ebp+var_14] eax +
lea ecx [edi+5710B731h] +
xor ecx eax +
xor ecx ebx +
mov eax ecx +
shr eax 8 +
add al 7 +
movzx eax al +
cdq   +
mov ebx eax +
mov [ebp+var_10] ecx +
mov eax edx +
xor cl 0EBh +
mov [ebp+var_18] eax +
movzx eax cl +
mov ecx [ebp+var_10] +
cdq   +
sub eax ebx +
mov ebx [ebp+var_18] +
sbb edx ebx +
add eax [ebp+var_28] +
adc edx [ebp+var_24] +
xor ecx [ebp+var_C] +
xor edi [ebp+var_C] +
xor ecx [ebp+var_8] +
xor edi [ebp+var_14] +
xor ecx 0C7F3D20Ah +
xor edi [ebp+arg_4] +
mov [ebp+var_24] edx +
mov [ebp+var_18] ecx +
xor ecx 0A1AC453Ah +
xor edx edx +
or edx ecx +
mov [eax] edx +
mov [ebp+arg_4] edi +
mov ecx [ebp+arg_4] +
xor ecx [ebp+var_10] +
xor edi 9B295B52h +
xor ecx [ebp+var_4] +
xor ebx ebx +
xor ecx [ebp+var_8] +
or edi ebx +
mov [eax+4] edi +
mov edi [ebp+var_48] +
movzx edx cl +
xor edx 1Bh +
mov [esi+edx*8] edi +
xor edi edi +
mov [esi+edx*8+4] edi +
mov edi [ebp+var_30] +
mov edx ecx +
shr edx 8 +
movzx edx dl +
xor edx 0B6h +
mov [edx+esi] edi +
mov edi [ebp+var_2C] +
mov [edx+esi+4] edi +
mov edx ecx +
shr edx 10h +
movzx edx dl +
mov [edx+esi+3Eh] eax +
mov eax [ebp+var_24] +
mov [edx+esi+42h] eax +
mov eax [ebp+var_38] +
shr ecx 18h +
xor ecx 5Eh +
mov [esi+ecx*8] eax +
mov eax [ebp+var_34] +
mov [esi+ecx*8+4] eax +
movzx ecx byte ptr [ebp+arg_4] +
movzx eax byte ptr [ebp+var_1C] +
mov edx [ebp+var_14] +
xor eax ecx +
movzx ecx byte ptr [ebp+var_18] +
xor eax ecx +
xor eax [ebp+var_20] +
mov ecx [ebp+var_40] +
mov [eax+esi+97h] ecx +
mov ecx [ebp+var_3C] +
mov [eax+esi+9Bh] ecx +
mov ecx [ebp+var_C] +
xor eax eax +
add ecx 0B6AD83E9h +
xor esi esi +
add edx 0CD573732h +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax ecx +
push edi  +
mov edi [ebp+arg_4] +
mov ecx esi +
shl ecx 4 +
mov edx edi +
shr edx 4 +
lea ebx [ecx+edx] +
movzx ecx bl +
xor ecx 0CCh +
mov edx [ecx+eax] +
mov ecx [ecx+eax+4] +
sub esi edi +
mov [ebp+var_10] ecx +
xor esi 0DDE903CFh +
lea ecx [esi+3E24C89Dh] +
mov [ebp+var_14] edx +
push ecx  +
mov edx offset dword_1005224 +
mov [ebp+var_1C] eax +
mov [ebp+var_8] ebx +
mov [ebp+var_18] ebx +
call sub_1022306  +
mov ecx [ebp+var_14] +
and [ebp+var_10] 0 +
and [ebp+var_10] 0 +
mov eax edi +
sub eax [ebp+arg_0] +
xor eax ebx +
mov [ebp+var_C] eax +
movzx eax al +
mov eax [eax+ecx-0CFh] +
lea ecx [edi-1B8D55F5h] +
xor ecx esi +
xor ecx ebx +
mov edx eax +
lea ebx [ecx+12987A2Bh] +
sub edx ebx +
neg edx  +
sbb dl dl +
inc dl  +
cmp ebx eax +
setnbe [ebp+var_1]  +
lea eax [edi+6EB7FB9Eh] +
xor eax [ebp+var_C] +
xor eax esi +
mov [ebp+var_10] eax +
mov eax [ebp+arg_0] +
mov ebx [ebp+var_10] +
xor eax ecx +
xor eax [ebp+var_C] +
xor eax edi +
mov edi [ebp+var_8] +
xor edi ebx +
xor edi ecx +
mov ecx edi +
xor ecx eax +
xor ecx esi +
xor [ebp+var_8] ecx +
cmp [ebp+var_1] 1 +
jnz loc_102E0FF  +
xor esi esi +
xor eax 0F7BD0740h +
lea ecx [ebx+2EC0909Eh] +
xor edi edi +
jmp loc_102E11A  +
xor eax ebx +
xor eax [ebp+var_18] +
xor ecx ecx +
xor eax 0D663F1E8h +
add eax 2CD58DDBh +
mov esi eax +
xor edi 9AB30045h +
xor eax eax +
movzx ebx byte ptr [ebp+var_8] +
or esi eax +
or ecx edi +
cmp [ebp+var_1] 0 +
mov edi [ebp+var_1C] +
setnz al  +
xor ebx 0DBh +
mov [edi+ebx*8] al +
mov eax [ebp+var_8] +
test dl dl +
setnz dl  +
shr eax 8 +
movzx eax al +
mov [edi+eax*8-120h] dl +
pop edi  +
mov eax esi +
pop esi  +
mov edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov edx eax +
push ebx  +
push esi  +
lea ebx [eax-69F1D6B0h] +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_4] +
mov esi ecx +
shr edx 4 +
shl esi 4 +
add edx esi +
mov esi eax +
shl eax 4 +
xor esi edx +
xor esi ecx +
shr ecx 4 +
add eax ecx +
xor eax ebx +
xor eax edx +
mov [ebp+var_8] eax +
shr eax 8 +
xor al 3Dh +
movzx eax al +
movzx ecx dl +
cdq   +
xor ecx 8Bh +
mov [ebp+var_4] ebx +
mov ebx [ecx+edi] +
mov ecx [ecx+edi+4] +
sub ebx eax +
movzx eax byte ptr [ebp+var_8] +
sbb ecx edx +
sub eax 0DEh +
xor edx edx +
add ebx eax +
mov eax [ebp+arg_0] +
adc ecx edx +
add eax 7CE70F0Ch +
xor eax esi +
xor eax [ebp+var_4] +
mov edx offset dword_10054D8 +
add eax 58ED6ED9h +
push eax  +
mov eax edi +
mov [ebp+var_8] ecx +
call sub_1022306  +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
mov [edi+1BCh] eax +
xor esi 0FEB828A9h +
mov [edi+1B8h] ebx +
xor eax eax +
pop edi  +
or eax esi +
add edx 82A102BEh +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 90h +
mov [ebp-8Ch] eax +
mov [ebp-84h] ecx +
mov [ebp-7Ch] edx +
lea eax [ebp+4] +
sub eax 4 +
mov [ebp-80h] ebx +
mov [ebp-90h] esi +
mov [ebp-88h] edi +
mov [ebp-50h] eax +
mov ebx 0FFFFFFFh +
mov edi offset __ImageBase +
mov eax [eax+8] +
mov edx [eax+8] +
and edx ebx +
mov ecx [eax] +
mov [ebp-74h] edx +
mov edx [eax+4] +
add eax 0Ch +
and ecx ebx +
lea esi [eax-1] +
add ecx edi +
mov [ebp-4Ch] ecx +
and edx ebx +
cmp esi offset Address +
mov [ebp-44h] edx +
mov [ebp-40h] eax +
mov [ebp-1Ch] esi +
jb loc_1031BFF  +
mov eax ds:dword_100DDCC +
mov esi ds:dword_1004CB8 +
imul eax esi +
mov esi [ebp-1Ch] +
lea eax Address[eax] +
cmp esi eax +
jnb loc_1031BFC  +
mov eax esi +
mov esi ds:dword_1004CB8 +
sub eax offset Address +
xor edx edx +
div  esi +
mov esi [ebp-1Ch] +
mov edx ds:dword_1004CB8 +
imul edx eax +
lea eax Address[edx] +
mov edx [ebp-44h] +
mov [ebp-14h] eax +
mov eax [ebp-40h] +
jmp loc_1031C03  +
mov eax [ebp-40h] +
and dword ptr [ebp-14h] 0 +
cmp dword ptr [ebp-14h] 0 +
jnz loc_1031C12  +
and esi 0FFFF0000h +
mov [ebp-14h] esi +
mov esi [ebp-14h] +
sub eax esi +
add eax 0FFFFFFC0h +
jns loc_1031C1E  +
xor eax eax +
mov dword ptr [ebp-1Ch] 40h +
add eax esi +
mov byte ptr [eax] 0 +
inc eax  +
dec dword ptr [ebp-1Ch]  +
jnz loc_1031C27  +
mov eax ds:dword_1004CB8 +
mov [ebp-34h] ecx +
lea esi [ecx+edx] +
sub eax edx +
sub [ebp-34h] edi +
lea ecx [eax+1] +
mov [ebp-48h] esi +
mov [ebp-30h] ecx +
xor eax eax +
jmp loc_1031C70  +
mov edx dword_104D00C +
imul edx edx +
add edx 269EC3h +
mov dword_104D00C edx +
shr edx 10h +
shl eax 10h +
or eax edx +
shr ecx 10h +
test ecx ecx +
jnz loc_1031C4D  +
xor edx edx +
div  dword ptr [ebp-30h] +
push dword ptr [ebp-44h]  +
mov eax [ebp-14h] +
push dword ptr [ebp-34h]  +
add eax edx +
mov [ebp-40h] eax +
mov eax 6C4BABEDh +
mov eax [esi] +
mov [ebp-6Ch] eax +
mov eax [esi+4] +
lea esi [ebp-6Ch] +
pop ecx  +
pop ecx  +
mov [ebp-68h] eax +
mov byte ptr [ebp-0Dh] 0 +
mov eax 28D1868Eh +
mov ecx [ebp-68h] +
mov edx edi +
mov eax [ebp-6Ch] +
and eax ebx +
and ecx ebx +
xor esi esi +
mov ebx ds:off_1005164 +
mov [ebp-2Ch] esi +
mov [ebp-28h] esi +
add eax edi +
sub edx ebx +
mov [ebp-3Ch] edx +
jnz loc_1031D0C  +
mov [ebp-14h] esi +
cmp ecx esi +
jbe loc_1031EE0  +
mov ebx 6E0A9DA6h +
mov edx [ebp-14h] +
movzx edx byte ptr [edx+eax] +
add edx ebx +
add [ebp-2Ch] edx +
add edx [ebp-28h] +
imul edx edx +
ror edx 9 +
imul edx edx +
ror edx 9 +
add [ebp-2Ch] edx +
inc dword ptr [ebp-14h]  +
mov [ebp-28h] edx +
cmp [ebp-14h] ecx +
jb loc_1031CD8  +
jmp loc_1031EE0  +
mov ebx ds:dword_100003C +
lea edx [eax+ecx] +
mov [ebp-24h] edx +
lea ebx dword_10000A0[ebx] +
mov edx [ebx] +
mov esi eax +
mov ebx [ebx+4] +
sub esi edi +
mov [ebp-30h] ebx +
mov ebx esi +
and ebx 0FFFFF000h +
mov [ebp-20h] ebx +
add ecx esi +
mov ebx esi +
sub ebx [ebp-20h] +
mov esi ecx +
and esi 0FFFFF000h +
sub ecx esi +
add edx edi +
mov [ebp-60h] ecx +
mov ecx [ebp-30h] +
mov [ebp-64h] esi +
add ecx edx +
mov [ebp-5Ch] ecx +
jmp loc_1031D62  +
mov esi [ebp-20h] +
cmp [edx] esi +
jnb loc_1031D66  +
add edx [edx+4] +
cmp edx ecx +
jnz loc_1031D58  +
and dword ptr [ebp-54h] 0 +
cmp edx ecx +
jz loc_1031DA1  +
mov ecx [ebp-20h] +
cmp [edx] ecx +
jnz loc_1031DA1  +
mov ecx [edx+4] +
sub ecx 8 +
shr ecx 1 +
jz loc_1031DA1  +
lea esi [edx+8] +
mov [ebp-20h] esi +
mov esi [ebp-20h] +
movzx esi word ptr [esi] +
and esi 0FFFh +
cmp esi ebx +
jnb loc_1031DA1  +
inc dword ptr [ebp-54h]  +
add dword ptr [ebp-20h] 2 +
cmp [ebp-54h] ecx +
jnz loc_1031D85  +
mov ebx 6E0A9DA6h +
cmp edx [ebp-5Ch] +
jz loc_1031EAA  +
mov ecx [edx] +
cmp ecx [ebp-64h] +
ja loc_1031EAA  +
mov esi [ebp-54h] +
mov ecx [edx+4] +
add ecx 0FFFFFFF8h +
shr ecx 1 +
cmp esi ecx +
jnz loc_1031DE4  +
add edx [edx+4] +
cmp edx [ebp-5Ch] +
jz loc_1031EAA  +
mov ecx [ebp-64h] +
cmp [edx] ecx +
ja loc_1031EAA  +
xor esi esi +
jmp loc_1031DBD  +
***
mov ecx [ebp-64h] +
cmp [edx] ecx +
jnz loc_1031DFF  +
movzx ecx word ptr [edx+esi*2+8] +
and ecx 0FFFh +
cmp ecx [ebp-60h] +
jnb loc_1031EAA  +
mov ecx esi +
inc esi  +
mov [ebp-54h] esi +
mov esi 0F000h +
test [edx+ecx*2+8] si +
jz loc_1031DA6  +
movzx esi word ptr [edx+ecx*2+8] +
mov ecx [edx] +
and esi 0FFFh +
lea esi __ImageBase[esi+ecx] +
mov [ebp-20h] esi +
xor ecx ecx +
sub [ebp-20h] eax +
mov [ebp-14h] esi +
mov [ebp-1Ch] ecx +
jz loc_1031E67  +
movzx esi byte ptr [ecx+eax] +
add esi ebx +
add [ebp-2Ch] esi +
add esi [ebp-28h] +
imul esi esi +
ror esi 9 +
imul esi esi +
ror esi 9 +
mov ecx esi +
add [ebp-2Ch] ecx +
mov ecx [ebp-1Ch] +
mov [ebp-28h] esi +
inc ecx  +
mov [ebp-1Ch] ecx +
cmp ecx [ebp-20h] +
jb loc_1031E35  +
mov eax [ebp-14h] +
mov eax [eax] +
sub eax [ebp-3Ch] +
xor ecx ecx +
mov [ebp-78h] eax +
movzx eax byte ptr [ebp+ecx-78h] +
add eax ebx +
add [ebp-2Ch] eax +
add eax [ebp-28h] +
imul eax eax +
ror eax 9 +
imul eax eax +
ror eax 9 +
add [ebp-2Ch] eax +
inc ecx  +
mov [ebp-28h] eax +
cmp ecx 4 +
jb loc_1031E74  +
mov eax [ebp-14h] +
add eax 4 +
jmp loc_1031DA6  +
***
xor edx edx +
mov ecx [ebp-24h] +
sub ecx eax +
mov [ebp-30h] ecx +
jz loc_1031EE0  +
movzx ecx byte ptr [eax+edx] +
add ecx ebx +
add [ebp-2Ch] ecx +
add ecx [ebp-28h] +
imul ecx ecx +
ror ecx 9 +
imul ecx ecx +
ror ecx 9 +
add [ebp-2Ch] ecx +
inc edx  +
mov [ebp-28h] ecx +
cmp edx [ebp-30h] +
jb loc_1031EB6  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-2Ch] +
mov [ebp+eax-0Ch] cl +
inc eax  +
cmp eax 8 +
jb loc_1031EE2  +
mov eax 2BE2F4B8h +
mov esi [ebp-4Ch] +
mov eax [ebp-40h] +
mov [ebp-38h] eax +
mov eax [ebp-44h] +
and eax 7 +
mov [ebp-1Ch] eax +
jz loc_103231C  +
xor ecx ecx +
cmp eax ecx +
mov edi [ebp-34h] +
not edi  +
mov [ebp-14h] ecx +
mov [ebp-3Ch] ecx +
mov [ebp-18h] ecx +
jle loc_1031F4F  +
push 38h  +
pop edx  +
movzx ebx byte ptr [esi] +
cmp dword ptr [ebp-18h] 4 +
jge loc_1031F3C  +
lea ecx [edx-20h] +
shl ebx cl +
or [ebp-3Ch] ebx +
jmp loc_1031F43  +
mov ecx edx +
shl ebx cl +
or [ebp-14h] ebx +
inc esi  +
inc dword ptr [ebp-18h]  +
sub edx 8 +
cmp [ebp-18h] eax +
jl loc_1031F29  +
movzx ebx word ptr [ebp-8] +
mov eax edi +
movzx edx word ptr [ebp-0Ah] +
mov ecx edx +
xor ecx edi +
rol ecx 6 +
imul ebx ecx +
rol eax 0Dh +
mov ecx [ebp-8] +
xor eax ebx +
xor eax [ebp-34h] +
xor ecx eax +
mov ebx [ebp-0Ch] +
sub ebx ecx +
xor edi ebx +
movzx ebx word ptr [ebp-0Ch] +
mov [ebp-18h] edx +
mov ecx edi +
sub ecx edx +
imul ecx ebx +
mov edx edi +
shr edx 0Eh +
sub ecx edx +
xor eax ecx +
mov ecx [ebp-0Ch] +
add ecx eax +
rol ecx 4 +
movzx edx word ptr [ebp-6] +
mov [ebp-20h] edx +
imul edx ecx +
mov ecx ebx +
mov [ebp-24h] ebx +
mov ebx eax +
ror ebx 2 +
add ebx edx +
movzx edx word ptr [ebp-8] +
xor edi ebx +
xor ecx edi +
rol ecx 3 +
mov ebx edi +
imul edx ecx +
rol ebx 7 +
add ebx edx +
xor eax ebx +
mov ecx eax +
mov ebx [ebp-24h] +
movzx edx word ptr [ebp-8] +
sub ecx edx +
mov edx [ebp-18h] +
rol ecx 5 +
imul edx ecx +
mov ecx eax +
shr ecx 1 +
xor edx ecx +
xor edi edx +
mov ecx [ebp-8] +
mov edx edi +
xor ecx edi +
rol ecx 3 +
imul ebx ecx +
ror edx 0Ch +
add edx ebx +
xor eax edx +
mov ebx eax +
mov edx eax +
mov ecx [ebp-20h] +
sub edx [ebp-0Ch] +
rol edx 7 +
imul ecx edx +
ror ebx 0Ch +
sub ecx ebx +
xor edi ecx +
movzx ecx word ptr [ebp-8] +
mov edx edi +
mov ebx [ebp-18h] +
ror edx 3 +
sub edx ecx +
imul edx [ebp-24h] +
xor eax edx +
mov edx eax +
mov ecx eax +
sub ecx [ebp-8] +
ror ecx 6 +
imul ebx ecx +
rol edx 0Ch +
mov ecx [ebp-18h] +
xor edx ebx +
and dword ptr [ebp-18h] 0 +
xor edi edx +
xor ecx edi +
mov ebx edi +
rol ecx 7 +
mov edx ecx +
mov ecx [ebp-24h] +
imul ecx edx +
xor edi [ebp-14h] +
ror ebx 2 +
sub ecx ebx +
xor ecx [ebp-3Ch] +
xor eax ecx +
mov ecx edi +
mov ebx [ebp-1Ch] +
test ebx ebx +
mov [ebp-24h] eax +
jle loc_1032094  +
cmp dword ptr [ebp-18h] 4 +
jge loc_103207B  +
rol dword ptr [ebp-24h] 8 +
mov ebx [ebp-38h] +
mov dl [ebp-24h] +
inc dword ptr [ebp-38h]  +
xor [ebp-0Dh] dl +
mov [ebx] dl +
jmp loc_1032089  +
mov edx [ebp-38h] +
inc dword ptr [ebp-38h]  +
rol ecx 8 +
xor [ebp-0Dh] cl +
mov [edx] cl +
inc dword ptr [ebp-18h]  +
mov ebx [ebp-1Ch] +
cmp [ebp-18h] ebx +
jl loc_1032061  +
add ebx 0FFFFFFFCh +
test ebx ebx +
jle loc_1032302  +
push 4  +
pop ecx  +
sub ecx ebx +
shl ecx 3 +
shr edi cl +
shl edi cl +
mov edx edi +
mov edi offset __ImageBase +
mov ebx [ebp-44h] +
shr ebx 3 +
test ebx ebx +
jbe loc_1032285  +
movzx ecx word ptr [ebp-8] +
mov [ebp-1Ch] ecx +
movzx ecx word ptr [ebp-6] +
neg dword ptr [ebp-1Ch]  +
mov [ebp-20h] ecx +
movzx ecx word ptr [ebp-0Ah] +
mov [ebp-18h] ecx +
mov [ebp-30h] ebx +
movzx edi byte ptr [esi+1] +
movzx ecx byte ptr [esi] +
shl ecx 8 +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+2] +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+3] +
or ecx edi +
movzx edi byte ptr [esi+5] +
mov [ebp-24h] ecx +
movzx ecx byte ptr [esi+4] +
shl ecx 8 +
or ecx edi +
movzx edi byte ptr [esi+6] +
shl ecx 8 +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+7] +
or ecx edi +
xor edx ecx +
movzx edi word ptr [ebp-8] +
mov [ebp-70h] ecx +
mov ebx edx +
mov ecx [ebp-18h] +
xor ecx edx +
add esi 8 +
rol ecx 6 +
imul edi ecx +
mov ecx [ebp-0Ch] +
rol ebx 0Dh +
xor ebx edi +
mov edi [ebp-8] +
xor ebx [ebp-24h] +
xor eax ebx +
xor edi eax +
mov ebx ecx +
sub ebx edi +
movzx edi cx +
xor edx ebx +
mov ebx edx +
sub ebx [ebp-18h] +
imul ebx edi +
mov edi edx +
shr edi 0Eh +
sub ebx edi +
xor eax ebx +
mov ebx [ebp-20h] +
add ecx eax +
rol ecx 4 +
mov edi eax +
imul ebx ecx +
movzx ecx word ptr [ebp-0Ch] +
ror edi 2 +
add edi ebx +
xor edx edi +
mov ebx edx +
movzx edi word ptr [ebp-8] +
xor ecx edx +
rol ecx 3 +
imul edi ecx +
mov ecx [ebp-1Ch] +
rol ebx 7 +
add ebx edi +
mov edi [ebp-18h] +
xor eax ebx +
add ecx eax +
rol ecx 5 +
imul edi ecx +
mov ecx eax +
shr ecx 1 +
xor edi ecx +
xor edx edi +
mov ebx edx +
mov ecx [ebp-8] +
xor ecx edx +
movzx edi word ptr [ebp-0Ch] +
rol ecx 3 +
ror ebx 0Ch +
imul edi ecx +
add ebx edi +
xor eax ebx +
mov edi eax +
mov ecx eax +
mov ebx [ebp-20h] +
sub ecx [ebp-0Ch] +
rol ecx 7 +
imul ebx ecx +
movzx ecx word ptr [ebp-8] +
ror edi 0Ch +
sub ebx edi +
xor edx ebx +
mov ebx [ebp-18h] +
mov edi edx +
ror edi 3 +
sub edi ecx +
movzx ecx word ptr [ebp-0Ch] +
imul edi ecx +
xor eax edi +
mov ecx eax +
sub ecx [ebp-8] +
ror ecx 6 +
imul ebx ecx +
mov edi eax +
rol edi 0Ch +
xor edi ebx +
xor edx edi +
movzx edi word ptr [ebp-0Ch] +
mov ebx edx +
mov ecx [ebp-18h] +
xor ecx edx +
rol ecx 7 +
imul edi ecx +
mov cl [ebp-0Dh] +
xor edx [ebp-14h] +
ror ebx 2 +
sub edi ebx +
xor edi [ebp-3Ch] +
xor eax edi +
xor cl al +
xor cl dl +
mov edi [ebp-38h] +
mov [edi+3] al +
mov [edi+7] dl +
ror eax 8 +
xor cl al +
ror edx 8 +
mov [edi+2] al +
xor cl dl +
mov [edi+6] dl +
ror eax 8 +
xor cl al +
mov [edi+1] al +
ror edx 8 +
mov [edi+5] dl +
xor cl dl +
ror eax 8 +
ror edx 8 +
mov bl dl +
xor bl al +
xor cl bl +
mov [ebp-0Dh] cl +
mov ecx [ebp-24h] +
mov [edi] al +
mov [edi+4] dl +
add edi 8 +
mov [ebp-3Ch] ecx +
mov ecx [ebp-70h] +
dec dword ptr [ebp-30h]  +
mov [ebp-14h] ecx +
mov [ebp-38h] edi +
ror eax 8 +
ror edx 8 +
jnz loc_10320DB  +
mov edi offset __ImageBase +
mov eax [ebp-48h] +
mov cl [ebp-0Dh] +
cmp cl [eax+8] +
jz loc_1032346  +
call sub_100E99C  +
mov edi eax +
mov eax 0FFFFF000h +
mov edx [ebp-50h] +
lea ecx [edx+0Ch] +
and ecx 0FFFFFFFCh +
mov dword ptr [edx+8] offset sub_1025029 +
mov edx 0FFFFh +
and edi eax +
lea esi [ecx+0FFFh] +
and esi eax +
xor eax eax +
mov ebx dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_10322C1  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
mov [ebp-7Ch] edi +
mov [ebp-84h] edx +
mov dword ptr [ebp-48h] 0 +
jmp loc_1032338  +
xor edx edx +
test ebx ebx +
jge loc_10320AD  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_10320AD  +
***
xor edx edx +
mov eax [ebp-34h] +
mov [ebp-3Ch] eax +
not eax  +
mov [ebp-14h] eax +
xor eax eax +
jmp loc_10320B2  +
***
mov eax [ebp-48h] +
mov [ecx] eax +
add ecx 4 +
cmp ecx esi +
jb loc_1032330  +
mov eax offset sub_1025029 +
jmp loc_1032425  +
mov eax ds:off_1005164 +
mov ebx [ebp-4Ch] +
sub ebx [ebp-40h] +
mov [ebp-30h] ebx +
sub edi eax +
mov [ebp-1Ch] edi +
jnz loc_1032363  +
test ebx ebx +
jz loc_1032413  +
mov eax [ebp-44h] +
mov ecx [ebp-34h] +
mov esi [ebp-40h] +
sub esi [ebp-4Ch] +
add ecx eax +
xor edi edi +
mov [ebp-48h] ecx +
mov ecx ds:dword_100EB28 +
dec ecx  +
js loc_10323AA  +
lea eax [ecx+edi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-34h] edx +
jnb loc_103239E  +
lea ecx [eax-1] +
jmp loc_10323A3  +
jbe loc_10323AF  +
lea edi [eax+1] +
cmp ecx edi +
jge loc_103237F  +
mov ebx [ebp-30h] +
mov [ebp-14h] edi +
jmp loc_1032408  +
mov ebx [ebp-30h] +
mov [ebp-14h] eax +
jmp loc_1032408  +
mov eax [ebp-14h] +
mov eax ds:dword_100EB2C[eax*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-48h] +
jnb loc_1032413  +
lea edi __ImageBase[ecx+esi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_10323FA  +
dec ecx  +
jz loc_10323F6  +
dec ecx  +
jnz loc_10323FF  +
mov edx [ebp-1Ch] +
jmp loc_10323FF  +
mov edx ebx +
jmp loc_10323FF  +
mov edx [ebp-1Ch] +
sub edx ebx +
dec eax  +
dec eax  +
jnz loc_1032405  +
add [edi] edx +
inc dword ptr [ebp-14h]  +
mov eax [ebp-14h] +
cmp eax ds:dword_100EB28 +
jb loc_10323B7  +
mov eax ds:dword_1004CB8 +
mov eax 0E2D2F733h +
mov eax [ebp-74h] +
mov ecx [ebp-40h] +
add eax ecx +
mov ecx [ebp-50h] +
mov [ecx+8] eax +
mov ebx [ebp-80h] +
mov esi [ebp-90h] +
mov ecx [ebp-84h] +
mov edi [ebp-88h] +
mov eax [ebp-8Ch] +
mov edx [ebp-7Ch] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_0] +
mov ecx ebx +
sub ecx edi +
movzx eax cl +
xor eax 3Ah +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_24] eax +
mov eax ecx +
shr eax 8 +
movzx eax al +
mov [ebp+var_28] edx +
xor eax 92h +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_30] edx +
mov [ebp+var_2C] eax +
mov edx ebx +
shr edx 4 +
mov eax edi +
shl eax 4 +
add eax edx +
lea edx [ebx+edi] +
add ebx 10C9B477h +
mov [ebp+var_10] edx +
xor ebx eax +
add edx 0C99913C0h +
xor ebx ecx +
mov [ebp+var_C] eax +
xor edx ecx +
lea eax [ebx-6F76B3B9h] +
mov [ebp+var_8] edx +
push eax  +
mov edx offset dword_10055B8 +
mov eax esi +
mov [ebp+var_18] ecx +
mov [ebp+var_14] ebx +
call sub_1022306  +
mov ecx [ebp+arg_4] +
shl ecx 4 +
mov eax edi +
shr eax 4 +
add eax ecx +
xor eax [ebp+var_8] +
mov ecx [ebp+var_10] +
xor eax [ebp+var_C] +
and [ebp+var_1C] 0 +
mov [ebp+var_4] eax +
shr eax 8 +
xor al 0C4h +
movzx eax al +
cdq   +
add ecx 9F18969Ah +
xor ecx ebx +
xor ecx [ebp+var_8] +
mov ebx eax +
mov eax edx +
movzx edx byte ptr [ebp+var_4] +
sub edx 0BCh +
mov [ebp+var_10] eax +
mov eax edx +
mov [ebp+var_20] edx +
mov edx [ebp+var_1C] +
sub eax ebx +
mov ebx [ebp+var_10] +
sbb edx ebx +
add eax [ebp+var_28] +
adc edx [ebp+var_24] +
xor edi [ebp+var_4] +
mov [ebp+var_20] eax +
xor edi [ebp+var_14] +
mov [ebp+var_1C] edx +
xor edi [ebp+arg_4] +
sub edi 7DF4FE65h +
mov eax edi +
xor edx edx +
lea edi [ecx-68805C47h] +
xor ecx [ebp+var_4] +
or edx edi +
mov edi [ebp+var_20] +
xor ebx ebx +
or eax ebx +
mov [edi] eax +
mov [edi+4] edx +
mov edx [ebp+var_18] +
xor ecx edx +
xor ecx 0DA5ED7Fh +
movzx eax cl +
xor eax 1Dh +
mov [eax+esi] edi +
mov edi [ebp+var_1C] +
mov [eax+esi+4] edi +
mov edi [ebp+var_30] +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 70h +
mov [esi+eax*8] edi +
mov edi [ebp+var_2C] +
mov [esi+eax*8+4] edi +
mov eax ecx +
shr eax 10h +
mov edi edx +
movzx eax al +
and [esi+eax*8-44Ch] ebx +
shr edi 18h +
sub edi 7Bh +
mov [esi+eax*8-450h] edi +
shr edx 10h +
movzx eax dl +
mov edx [ebp+var_C] +
shr ecx 18h +
and [esi+ecx*8-334h] ebx +
sub eax 0A4h +
mov [esi+ecx*8-338h] eax +
mov ecx [ebp+var_8] +
xor eax eax +
xor ecx 0E1BD3C4Eh +
xor esi esi +
add edx 4DDADA91h +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea edx [eax+edi-6CA25644h] +
lea ecx [edi+37C3090h] +
mov eax ecx +
shr eax 10h +
movzx eax al +
xor eax 0F2h +
mov ebx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_1C] eax +
mov eax ecx +
shr eax 18h +
xor eax 75h +
mov [ebp+var_20] ebx +
mov ebx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_38] eax +
mov eax edx +
shr eax 8 +
movzx eax al +
mov [ebp+var_4] edx +
xor eax 0EEh +
shr edx 18h +
sub edx 49h +
mov [ebp+var_3C] ebx +
xor ebx ebx +
add edx [eax+esi] +
mov eax [eax+esi+4] +
adc eax ebx +
mov [ebp+var_28] eax +
movzx eax byte ptr [ebp+var_4] +
mov [ebp+var_2C] edx +
mov edx [ebp+var_4] +
mov [ebp+var_24] eax +
mov eax [eax+esi-1Fh] +
shr edx 10h +
movzx edx dl +
add eax edx +
movzx edx cl +
mov edx [edx+esi-33h] +
mov eax [edx+eax*4-2ECh] +
mov [ebp+var_44] eax +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 10h +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov ebx edi +
sub ebx [ebp+arg_0] +
mov [ebp+var_30] eax +
xor ebx ecx +
mov eax ebx +
xor eax 3C54851Bh +
mov [ebp+var_34] edx +
push eax  +
mov edx offset dword_10055C4 +
mov eax esi +
mov [ebp+var_8] ecx +
mov [ebp+var_18] ebx +
call sub_1022306  +
mov eax [ebp+arg_0] +
shl eax 4 +
mov ecx edi +
shr ecx 4 +
add eax ecx +
mov ecx [ebp+arg_0] +
mov edx eax +
xor edx [ebp+var_4] +
xor eax ebx +
xor eax [ebp+var_4] +
xor edx [ebp+var_8] +
sub ecx edi +
mov [ebp+var_C] eax +
mov [ebp+var_14] edx +
mov eax ecx +
xor eax edx +
xor eax ebx +
xor eax 0D89BE559h +
mov [ebp+arg_4] eax +
shr eax 8 +
add al 3Fh +
movzx eax al +
cdq   +
mov ebx edx +
mov edi eax +
mov al byte ptr [ebp+arg_4] +
xor al 0C7h +
movzx eax al +
cdq   +
sub eax edi +
sbb edx ebx +
add eax [ebp+var_20] +
adc edx [ebp+var_1C] +
xor ecx [ebp+var_C] +
mov [ebp+var_48] edx +
xor ecx [ebp+var_14] +
mov edx [ebp+arg_4] +
xor edx [ebp+var_C] +
xor ecx 0D622FE64h +
xor edx [ebp+var_8] +
mov [ebp+var_10] ecx +
xor edx 0EADD9150h +
mov [ebp+var_1C] edx +
xor edx 0C5D12AF1h +
add ecx 8EE1336Ah +
xor edi edi +
or edi edx +
mov [eax] edi +
mov edi [ebp+var_44] +
xor ebx ebx +
or ecx ebx +
mov [eax+4] ecx +
mov ecx [ebp+var_10] +
xor ecx [ebp+arg_4] +
xor ecx [ebp+var_4] +
xor ecx [ebp+var_8] +
movzx edx cl +
mov [esi+edx*8-498h] edi +
xor edi edi +
mov [esi+edx*8-494h] edi +
mov edi [ebp+var_2C] +
mov edx ecx +
shr edx 8 +
movzx edx dl +
xor edx 0BCh +
mov [esi+edx*8] edi +
mov edi [ebp+var_28] +
mov [esi+edx*8+4] edi +
mov edi [ebp+var_34] +
mov edx ecx +
shr edx 10h +
movzx edx dl +
xor edx 0FAh +
mov [edx+esi] edi +
mov edi [ebp+var_30] +
mov [edx+esi+4] edi +
mov edx [ebp+var_3C] +
shr ecx 18h +
xor ecx 0FDh +
mov [ecx+esi] edx +
mov edx [ebp+var_38] +
mov [ecx+esi+4] edx +
movzx edx byte ptr [ebp+var_10] +
movzx ecx byte ptr [ebp+var_18] +
xor ecx edx +
movzx edx byte ptr [ebp+var_1C] +
xor ecx edx +
mov edx [ebp+var_14] +
xor ecx 69h +
xor ecx [ebp+var_24] +
xor edx 45463FFFh +
mov [ecx+esi] eax +
mov eax [ebp+var_48] +
mov [ecx+esi+4] eax +
mov ecx [ebp+var_C] +
xor eax eax +
add ecx 2E5508C0h +
xor esi esi +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov edx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov ebx edx +
sub ebx ecx +
movzx eax bl +
xor eax 13h +
push edi  +
mov edi [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_8] eax +
mov eax ecx +
mov [ebp+var_C] edi +
mov edi edx +
shl eax 4 +
shr edi 4 +
add eax edi +
xor ecx eax +
xor ecx ebx +
xor ecx edx +
sub ecx 58E77509h +
mov [ebp+var_4] eax +
push ecx  +
mov edx (offset loc_10058FD+3) +
mov eax esi +
call sub_1022306  +
mov eax ebx +
shr eax 8 +
movzx eax al +
sub eax 26h +
mov ecx eax +
mov eax ebx +
shr eax 10h +
add eax 7E2Ah +
movzx eax ax +
cdq   +
xor edi edi +
sub ecx eax +
mov eax [ebp+arg_4] +
sbb edi edx +
add ecx [ebp+var_C] +
adc edi [ebp+var_8] +
add eax 69C9617h +
xor eax ebx +
mov [esi+1B8h] ecx +
mov ecx [ebp+var_4] +
mov [esi+1BCh] edi +
xor esi esi +
add eax 6D89796Dh +
pop edi  +
or eax esi +
xor edx edx +
add ecx 75A4D433h +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
xor eax eax +
retn   +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
mov ecx edi +
sub ecx [ebp+arg_0] +
lea edx [edi-57009273h] +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 0D8h +
mov ebx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_8] edx +
mov [ebp+var_20] eax +
shr edx 10h +
movzx eax dl +
xor eax 53h +
mov edx ecx +
shr edx 18h +
sub edx 5Ch +
mov [ebp+var_24] ebx +
xor ebx ebx +
add edx [eax+esi] +
mov eax [eax+esi+4] +
adc eax ebx +
mov [ebp+var_28] eax +
movzx eax cl +
xor eax 0BCh +
mov eax [esi+eax] +
mov [ebp+var_4] ecx +
shr ecx 10h +
movzx ecx cl +
add eax ecx +
mov ecx [ebp+var_8] +
mov [ebp+var_2C] edx +
mov edx ecx +
shr edx 8 +
movzx edx dl +
mov edx [edx+esi+76h] +
mov eax [edx+eax*4-26Ch] +
mov [ebp+var_44] eax +
mov eax ecx +
shr eax 18h +
mov edx [esi+eax*8+18h] +
mov eax [esi+eax*8+1Ch] +
mov [ebp+var_38] eax +
movzx eax cl +
mov [ebp+var_3C] edx +
mov edx [esi+eax*8-0D8h] +
mov eax [esi+eax*8-0D4h] +
lea ebx [edi+5EB4BAACh] +
xor ebx ecx +
mov [ebp+var_30] eax +
lea eax [ebx-7B67E21Ch] +
mov [ebp+var_34] edx +
push eax  +
mov edx offset loc_1005A6C +
mov eax esi +
call sub_1022306  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_4] +
sub eax edi +
xor eax [ebp+var_4] +
add ecx edi +
xor eax [ebp+var_8] +
xor edx ebx +
xor edx [ebp+var_4] +
lea edi [ecx-71A1F721h] +
xor eax 0B2A82D04h +
xor edi eax +
add ecx 8917AEF7h +
xor edi ebx +
xor ecx edx +
mov [ebp+var_18] eax +
mov [ebp+var_1C] edx +
mov [ebp+arg_4] edi +
xor ecx eax +
mov ebx edi +
xor ebx edx +
xor ebx [ebp+var_8] +
xor ebx 5458AC25h +
mov eax ebx +
shr eax 8 +
xor eax 0BA41h +
movzx eax ax +
cdq   +
mov edi eax +
mov eax edx +
mov [ebp+var_C] eax +
movzx eax bl +
cdq   +
sub eax edi +
mov edi [ebp+var_C] +
sbb edx edi +
add eax [ebp+var_24] +
mov [ebp+var_14] ebx +
adc edx [ebp+var_20] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
xor eax 2F6023CEh +
xor edi edi +
mov [ebp+var_C] edx +
mov edx ecx +
xor ecx [ebp+arg_4] +
xor edx 971F3C28h +
xor ecx [ebp+var_4] +
or edi edx +
mov edx [ebp+var_10] +
xor ecx [ebp+var_8] +
mov [edx] edi +
mov edi [ebp+var_2C] +
xor ebx ebx +
or eax ebx +
mov [edx+4] eax +
mov eax [ebp+var_14] +
shr eax 18h +
mov [esi+eax*8+110h] edi +
mov edi [ebp+var_28] +
mov [esi+eax*8+114h] edi +
mov edi [ebp+var_44] +
movzx eax cl +
mov [esi+eax*8+190h] edi +
xor edi edi +
mov [esi+eax*8+194h] edi +
mov edi [ebp+var_34] +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 0D2h +
mov [eax+esi] edi +
mov edi [ebp+var_30] +
mov [eax+esi+4] edi +
mov edi [ebp+var_3C] +
mov eax ecx +
shr eax 10h +
movzx eax al +
mov [eax+esi+60h] edi +
mov edi [ebp+var_38] +
mov [eax+esi+64h] edi +
mov eax [ebp+var_C] +
shr ecx 18h +
mov [ecx+esi-11h] edx +
mov edx [ebp+var_18] +
mov [ecx+esi-0Dh] eax +
mov ecx [ebp+var_1C] +
xor eax eax +
xor ecx 0C493BC27h +
xor esi esi +
add edx 0E97BA358h +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
dec edx  +
retn 0C29Dh  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
lea eax [ebx+esi-79BA5CB8h] +
movzx edx al +
xor edx 0Ch +
cmp byte ptr [ecx+edx*8] 0 +
mov [ebp+var_C] eax +
setnz [ebp+var_1]  +
shr eax 8 +
movzx eax al +
xor eax 0BFh +
cmp byte ptr [ecx+eax*8] 0 +
mov eax ebx +
setnz byte ptr [ebp+arg_4+3]  +
shr eax 4 +
mov edx esi +
shl edx 4 +
add eax edx +
mov [ebp+var_8] eax +
push edi  +
add eax 8F932024h +
push eax  +
mov edx (offset loc_1005B83+1) +
mov eax ecx +
call sub_1022306  +
shr esi 4 +
mov edi ebx +
shl edi 4 +
add edi esi +
xor edi [ebp+var_8] +
mov esi [ebp+var_8] +
xor edi [ebp+var_C] +
lea ecx [ebx-65ADCFC8h] +
xor ecx [ebp+var_C] +
lea eax [ebx-6B819917h] +
xor eax edi +
xor esi ecx +
xor esi [ebp+var_8] +
xor eax ecx +
sub eax 0A917BFh +
xor edx edx +
xor esi 0E868695Fh +
xor ebx ebx +
or eax ebx +
or edx esi +
cmp byte ptr [ebp+arg_4+3] bl +
jnz loc_103DD0F  +
cmp [ebp+var_1] bl +
jnz loc_103DD0F  +
xor ecx 2B6B7C42h +
xor eax eax +
mov edx ecx +
xor edi 79771F68h +
xor ecx ecx +
or eax edi +
or edx ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
test eax 47B980CEh +
sub eax 17E0CE41h +
xchg ecx [eax] +
js near ptr loc_103EC65+1  +
sbb bh [ecx-0Bh] +
pop eax  +
sbb eax [eax-6D4ED8D4h] +
jecxz near ptr loc_103EBD0+4  +
mov esp 5B10EFCAh +
jbe near ptr loc_103EC3C+1  +
xchg eax ecx +
dec edi  +
cmp dl [ecx+1Dh] +
and [ebp+esi*8-720B0650h] ebx +
dec ecx  +
xor byte ptr [ebx+2Eh] 0FBh +
outs   +
sub eax 0DE6A9138h +
aad  36h +
out 5Eh eax +
cmp cl al +
sti   +
xor [edx] dl +
adc ebp esi +
jb near ptr loc_103EBD6+2  +
mov [esi+5073760Ah] ah +
cmp eax 0CEA93612h +
***
cmp byte ptr [ecx-31BED2B9h] 0E0h +
pop ss  +
xchg ecx [eax] +
js near ptr loc_103ECB3+1  +
sbb bh [ecx-0Bh] +
pop eax  +
xchg eax esi +
cdq   +
ins  dx +
ror byte ptr [eax-5] 1 +
push cs  +
stos   +
retn 2936h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
push esi  +
push 0B8DEEA85h  +
push 4BE37598h  +
push 2C930C6Ch  +
push 0A9D0FB9Fh  +
push esi  +
push ecx  +
xor edx edx +
push edx  +
mov [ebp+var_8] 8C3A2990h +
push eax  +
mov [ebp+var_4] 5A6A3A40h +
push [ebp+var_4]  +
xor ecx ecx +
push [ebp+var_8]  +
call sub_103EAB1  +
mov [ebp+var_4] edx +
pop esi  +
leave   +
retn 8  +
***
jmp ds:Module32FirstW  +
***
jmp ds:CreateToolhelp32Snapshot  +
***
jmp ds:_stricmp  +
***
jmp ds:_snwprintf_s  +
***
mov eax [esp+arg_C] +
or eax eax +
jnz loc_103ED6C  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_103EDAD  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_103ED7A  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_103EDA8  +
cmp edx [esp+arg_4] +
ja loc_103EDA8  +
jb loc_103EDA9  +
cmp eax [esp+arg_0] +
jbe loc_103EDA9  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
cmp cl 40h +
cmp cl 40h +
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_103EE13  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov eax ds:dword_1004CB8 +
imul eax [ebp-1Ch] +
lea eax Address[eax] +
mov [ebp-14h] eax +
jmp loc_103EF48  +
***
mov [ebp-14h] eax +
jmp loc_103EF8D  +
***
and dword ptr [ebp-54h] 0 +
jmp loc_103F1B5  +
***
mov esi 0F000h +
mov ecx [ebp-54h] +
inc dword ptr [ebp-54h]  +
test [edx+ecx*2+8] si +
jz loc_103F1A1  +
movzx esi word ptr [edx+ecx*2+8] +
mov ecx [edx] +
and esi 0FFFh +
lea esi __ImageBase[esi+ecx] +
xor ecx ecx +
mov [ebp-18h] esi +
sub [ebp-18h] eax +
mov [ebp-38h] esi +
mov [ebp-30h] ecx +
jz loc_103F25F  +
movzx esi byte ptr [ecx+eax] +
add esi edi +
add [ebp-28h] esi +
add esi [ebp-24h] +
imul esi esi +
ror esi 9 +
imul esi esi +
ror esi 9 +
mov ecx esi +
add [ebp-28h] ecx +
mov ecx [ebp-30h] +
mov [ebp-24h] esi +
inc ecx  +
mov [ebp-30h] ecx +
cmp ecx [ebp-18h] +
jb loc_103F22D  +
mov eax [ebp-38h] +
mov eax [eax] +
sub eax [ebp-4Ch] +
xor ecx ecx +
mov [ebp-74h] eax +
movzx eax byte ptr [ebp+ecx-74h] +
add eax edi +
add [ebp-28h] eax +
add eax [ebp-24h] +
imul eax eax +
ror eax 9 +
imul eax eax +
ror eax 9 +
add [ebp-28h] eax +
inc ecx  +
mov [ebp-24h] eax +
cmp ecx 4 +
jb loc_103F26C  +
mov eax [ebp-38h] +
add eax 4 +
jmp loc_103F1A1  +
***
xor edx edx +
test ebx ebx +
jge loc_103F49B  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_103F49B  +
***
xor edx edx +
mov eax [ebp-34h] +
mov [ebp-38h] eax +
not eax  +
mov [ebp-18h] eax +
xor eax eax +
jmp loc_103F49E  +
***
sub ecx eax +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_103F85C  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp-8+arg_0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_103F84E  +
***
jmp ds:WinVerifyTrust  +
***
jmp ds:WTHelperGetProvSignerFromChain  +
***
mov edi edi +
mov edi edi +
mov eax (offset loc_1005C1B+5) +
mov eax (offset loc_1005C1B+5) +
mov eax (offset loc_1005C1B+5) +
shr eax 8 +
mov cl al +
xor cl 5Ch +
mov dl al +
xor dl 2Eh +
mov ds:byte_104E480 cl +
mov ds:byte_104E481 cl +
mov ds:byte_104E482 dl +
mov ds:byte_104E483 cl +
mov cl al +
mov dl al +
xor cl 53h +
xor dl 57h +
mov ds:byte_104E484 cl +
mov ds:byte_104E486 dl +
mov cl al +
mov dl al +
xor cl 49h +
xor dl 56h +
xor al 44h +
mov ds:byte_104E485 cl +
mov ds:byte_104E487 dl +
mov ds:byte_104E488 cl +
mov ds:byte_104E489 al +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-20h] eax +
mov [ebp-18h] ecx +
mov [ebp-10h] edx +
mov [ebp-14h] ebx +
mov [ebp-24h] esi +
mov [ebp-1Ch] edi +
lea esi [ebp+4] +
mov eax [esi+4] +
mov ecx [esi+8] +
sub esi 4 +
mov edi offset Address +
mov [ebp-0Ch] ecx +
movzx ecx byte ptr [eax] +
and ecx 0Fh +
mov [ebp-8] ecx +
lea ecx [eax+1] +
lea eax [ecx-1] +
mov [ebp-4] eax +
cmp eax edi +
jb loc_103FA7B  +
mov ebx ds:dword_1004CB8 +
mov edx ds:dword_100DDCC +
imul edx ebx +
lea edx Address[edx] +
cmp eax edx +
jnb loc_103FA7B  +
mov ebx ds:dword_1004CB8 +
sub eax edi +
xor edx edx +
div  ebx +
mov edx ds:dword_1004CB8 +
imul edx eax +
mov eax [ebp-4] +
lea ebx Address[edx] +
jmp loc_103FA7D  +
xor ebx ebx +
test ebx ebx +
jnz loc_103FA88  +
and eax 0FFFF0000h +
mov ebx eax +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_103FA93  +
xor eax eax +
add eax ebx +
push 40h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_103FA98  +
mov eax 0F3FA958Dh +
cmp ebx edi +
jb loc_103FADF  +
mov ecx ds:dword_1004CB8 +
mov eax ds:dword_100DDCC +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_103FADF  +
mov eax ebx +
sub eax edi +
xor edx edx +
mov ecx ds:dword_1004CB8 +
div  ecx +
mov ecx ds:dword_1004CB8 +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_103FAE1  +
xor ecx ecx +
test ecx ecx +
jz loc_103FB06  +
mov ecx ds:dword_1004CB8 +
mov eax ebx +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_100DDCC +
mov ds:dword_104D078[eax*4] 0C4A6h +
jmp loc_103FB23  +
call ds:__imp_GetLastError  +
mov edi eax +
push 8000h  +
push 0  +
push ebx  +
call ds:VirtualFree  +
push edi  +
call ds:SetLastError  +
mov eax [ebp-8] +
mov eax ds:off_101C3D0[eax*4] +
mov [esi+8] eax +
mov eax [ebp-0Ch] +
mov [esi+0Ch] eax +
mov edi [ebp-1Ch] +
mov esi [ebp-24h] +
mov edx [ebp-10h] +
mov ecx [ebp-18h] +
mov ebx [ebp-14h] +
mov eax [ebp-20h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push ebp  +
mov ebp esp +
mov edi edi +
sub esp 84h +
mov eax dword ptr ds:aNc@ +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [ebp-5Ch] eax +
add eax 0Ch +
mov [ebp-58h] eax +
mov eax [eax] +
mov edx [eax] +
push ebx  +
mov ebx 0FFFFFFFh +
mov [ebp-4Ch] ecx +
mov ecx [eax+8] +
push esi  +
and ecx ebx +
and edx ebx +
mov esi [eax+4] +
mov [ebp-80h] ecx +
lea ecx [eax+0Ch] +
lea eax [ecx-1] +
push edi  +
mov edi offset __ImageBase +
add edx edi +
mov [ebp-54h] edx +
and esi ebx +
mov [ebp-50h] esi +
cmp eax offset Address +
mov [ebp-28h] eax +
jb loc_103FD16  +
mov eax ds:dword_100DDCC +
mov esi ds:dword_1004CB8 +
imul eax esi +
lea esi Address[eax] +
mov eax [ebp-28h] +
cmp eax esi +
jnb loc_103FD13  +
xor edx edx +
mov esi ds:dword_1004CB8 +
sub eax offset Address +
div  esi +
mov edx ds:dword_1004CB8 +
imul edx eax +
lea eax Address[edx] +
mov edx [ebp-54h] +
mov esi [ebp-50h] +
mov [ebp-18h] eax +
jmp loc_103FD1A  +
mov esi [ebp-50h] +
and dword ptr [ebp-18h] 0 +
cmp dword ptr [ebp-18h] 0 +
jnz loc_103FD2B  +
mov eax [ebp-28h] +
and eax 0FFFF0000h +
mov [ebp-18h] eax +
sub ecx [ebp-18h] +
lea eax [ecx-40h] +
test eax eax +
jge loc_103FD37  +
xor eax eax +
mov ecx [ebp-18h] +
add eax ecx +
mov dword ptr [ebp-28h] 40h +
mov byte ptr [eax] 0 +
inc eax  +
dec dword ptr [ebp-28h]  +
jnz loc_103FD43  +
lea eax [esi+edx] +
mov [ebp-48h] eax +
mov eax ds:dword_1004CB8 +
sub eax esi +
lea ecx [eax+1] +
mov [ebp-34h] edx +
sub [ebp-34h] edi +
mov [ebp-44h] ecx +
xor eax eax +
test ecx ecx +
jz loc_103FD95  +
mov edx ds:dword_104D00C +
shr dword ptr [ebp-44h] 10h +
imul edx edx +
add edx 269EC3h +
mov ds:dword_104D00C edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-44h] 0 +
jnz loc_103FD6B  +
xor edx edx +
div  ecx +
mov eax [ebp-18h] +
push esi  +
push dword ptr [ebp-34h]  +
add eax edx +
mov [ebp-44h] eax +
mov eax 64EB0BDh +
mov eax [ebp-48h] +
lea esi [ebp-78h] +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-78h] ecx +
mov [ebp-74h] eax +
mov byte ptr [ebp-11h] 0 +
mov eax 89E2BAB4h +
mov eax [ebp-78h] +
mov edx edi +
and eax ebx +
mov ecx [ebp-74h] +
and ecx ebx +
xor esi esi +
add eax edi +
mov ebx ds:off_1005164 +
mov [ebp-30h] esi +
sub edx ebx +
mov [ebp-2Ch] esi +
mov [ebp-3Ch] edx +
jnz loc_103FE2D  +
cmp ecx esi +
mov [ebp-1Ch] esi +
jbe loc_1040001  +
mov ebx 6E0A9DA6h +
mov edx [ebp-1Ch] +
movzx edx byte ptr [edx+eax] +
add edx ebx +
add [ebp-30h] edx +
add edx [ebp-2Ch] +
imul edx edx +
ror edx 9 +
imul edx edx +
ror edx 9 +
add [ebp-30h] edx +
inc dword ptr [ebp-1Ch]  +
mov [ebp-2Ch] edx +
cmp [ebp-1Ch] ecx +
jb loc_103FDF9  +
jmp loc_1040001  +
mov ebx ds:dword_100003C +
lea edx [eax+ecx] +
lea ebx dword_10000A0[ebx] +
mov [ebp-18h] edx +
mov edx [ebx] +
mov esi eax +
sub esi edi +
mov ebx [ebx+4] +
mov [ebp-38h] ebx +
mov ebx esi +
and ebx 0FFFFF000h +
add ecx esi +
mov [ebp-24h] ebx +
mov ebx esi +
mov esi ecx +
sub ebx [ebp-24h] +
and esi 0FFFFF000h +
sub ecx esi +
mov [ebp-6Ch] ecx +
mov ecx [ebp-38h] +
mov [ebp-70h] esi +
add edx edi +
add ecx edx +
mov [ebp-68h] ecx +
jmp loc_103FE83  +
mov esi [ebp-24h] +
cmp [edx] esi +
jnb loc_103FE87  +
add edx [edx+4] +
cmp edx ecx +
jnz loc_103FE79  +
and dword ptr [ebp-60h] 0 +
cmp edx ecx +
jz loc_103FEC2  +
mov ecx [ebp-24h] +
cmp [edx] ecx +
jnz loc_103FEC2  +
mov ecx [edx+4] +
sub ecx 8 +
shr ecx 1 +
jz loc_103FEC2  +
lea esi [edx+8] +
mov [ebp-24h] esi +
mov esi [ebp-24h] +
movzx esi word ptr [esi] +
and esi 0FFFh +
cmp esi ebx +
jnb loc_103FEC2  +
inc dword ptr [ebp-60h]  +
add dword ptr [ebp-24h] 2 +
cmp [ebp-60h] ecx +
jnz loc_103FEA6  +
mov ebx 6E0A9DA6h +
cmp edx [ebp-68h] +
jz loc_103FFCB  +
mov ecx [edx] +
cmp ecx [ebp-70h] +
ja loc_103FFCB  +
mov esi [ebp-60h] +
mov ecx [edx+4] +
add ecx 0FFFFFFF8h +
shr ecx 1 +
cmp esi ecx +
jnz loc_103FF05  +
add edx [edx+4] +
cmp edx [ebp-68h] +
jz loc_103FFCB  +
mov ecx [ebp-70h] +
cmp [edx] ecx +
ja loc_103FFCB  +
xor esi esi +
jmp loc_103FEDE  +
***
mov ecx [ebp-70h] +
cmp [edx] ecx +
jnz loc_103FF20  +
movzx ecx word ptr [edx+esi*2+8] +
and ecx 0FFFh +
cmp ecx [ebp-6Ch] +
jnb loc_103FFCB  +
mov ecx esi +
inc esi  +
mov [ebp-60h] esi +
mov esi 0F000h +
test [edx+ecx*2+8] si +
jz loc_103FEC7  +
movzx esi word ptr [edx+ecx*2+8] +
mov ecx [edx] +
and esi 0FFFh +
lea esi __ImageBase[esi+ecx] +
xor ecx ecx +
mov [ebp-24h] esi +
sub [ebp-24h] eax +
mov [ebp-1Ch] esi +
mov [ebp-28h] ecx +
jz loc_103FF88  +
movzx esi byte ptr [ecx+eax] +
add esi ebx +
add [ebp-30h] esi +
add esi [ebp-2Ch] +
imul esi esi +
ror esi 9 +
imul esi esi +
ror esi 9 +
mov ecx esi +
add [ebp-30h] ecx +
mov ecx [ebp-28h] +
mov [ebp-2Ch] esi +
inc ecx  +
mov [ebp-28h] ecx +
cmp ecx [ebp-24h] +
jb loc_103FF56  +
mov eax [ebp-1Ch] +
mov eax [eax] +
sub eax [ebp-3Ch] +
xor ecx ecx +
mov [ebp-7Ch] eax +
movzx eax byte ptr [ebp+ecx-7Ch] +
add eax ebx +
add [ebp-30h] eax +
add eax [ebp-2Ch] +
imul eax eax +
ror eax 9 +
imul eax eax +
ror eax 9 +
add [ebp-30h] eax +
inc ecx  +
mov [ebp-2Ch] eax +
cmp ecx 4 +
jb loc_103FF95  +
mov eax [ebp-1Ch] +
add eax 4 +
jmp loc_103FEC7  +
***
xor edx edx +
mov ecx [ebp-18h] +
sub ecx eax +
mov [ebp-38h] ecx +
jz loc_1040001  +
movzx ecx byte ptr [eax+edx] +
add ecx ebx +
add [ebp-30h] ecx +
add ecx [ebp-2Ch] +
imul ecx ecx +
ror ecx 9 +
imul ecx ecx +
ror ecx 9 +
add [ebp-30h] ecx +
inc edx  +
mov [ebp-2Ch] ecx +
cmp edx [ebp-38h] +
jb loc_103FFD7  +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-30h] +
mov [ebp+eax-10h] cl +
inc eax  +
cmp eax 8 +
jb loc_1040003  +
mov eax 0CE7B44E7h +
mov esi [ebp-54h] +
mov eax [ebp-44h] +
mov [ebp-40h] eax +
mov eax [ebp-50h] +
and eax 7 +
mov [ebp-28h] eax +
jz loc_1040443  +
mov edi [ebp-34h] +
xor ecx ecx +
not edi  +
cmp eax ecx +
mov [ebp-1Ch] ecx +
mov [ebp-3Ch] ecx +
mov [ebp-20h] ecx +
jle loc_1040070  +
push 38h  +
pop edx  +
cmp dword ptr [ebp-20h] 4 +
movzx ebx byte ptr [esi] +
jge loc_104005D  +
lea ecx [edx-20h] +
shl ebx cl +
or [ebp-3Ch] ebx +
jmp loc_1040064  +
mov ecx edx +
shl ebx cl +
or [ebp-1Ch] ebx +
inc esi  +
inc dword ptr [ebp-20h]  +
sub edx 8 +
cmp [ebp-20h] eax +
jl loc_104004A  +
movzx ebx word ptr [ebp-0Ch] +
movzx edx word ptr [ebp-0Eh] +
mov ecx edx +
xor ecx edi +
mov eax edi +
rol ecx 6 +
imul ebx ecx +
rol eax 0Dh +
xor eax ebx +
xor eax [ebp-34h] +
mov ecx [ebp-0Ch] +
xor ecx eax +
mov ebx [ebp-10h] +
sub ebx ecx +
xor edi ebx +
movzx ebx word ptr [ebp-10h] +
mov [ebp-20h] edx +
mov ecx edi +
sub ecx edx +
mov edx edi +
imul ecx ebx +
shr edx 0Eh +
sub ecx edx +
movzx edx word ptr [ebp-0Ah] +
xor eax ecx +
mov ecx [ebp-10h] +
mov [ebp-24h] edx +
mov [ebp-18h] ebx +
add ecx eax +
rol ecx 4 +
imul edx ecx +
mov ecx ebx +
mov ebx eax +
ror ebx 2 +
add ebx edx +
xor edi ebx +
mov ebx edi +
xor ecx edi +
rol ecx 3 +
movzx edx word ptr [ebp-0Ch] +
imul edx ecx +
rol ebx 7 +
add ebx edx +
movzx edx word ptr [ebp-0Ch] +
xor eax ebx +
mov ebx [ebp-18h] +
mov ecx eax +
sub ecx edx +
mov edx [ebp-20h] +
rol ecx 5 +
imul edx ecx +
mov ecx eax +
shr ecx 1 +
xor edx ecx +
xor edi edx +
mov edx edi +
mov ecx [ebp-0Ch] +
xor ecx edi +
rol ecx 3 +
imul ebx ecx +
mov ecx [ebp-24h] +
ror edx 0Ch +
add edx ebx +
xor eax edx +
mov edx eax +
mov ebx eax +
sub edx [ebp-10h] +
rol edx 7 +
imul ecx edx +
ror ebx 0Ch +
sub ecx ebx +
mov ebx [ebp-20h] +
xor edi ecx +
mov edx edi +
ror edx 3 +
movzx ecx word ptr [ebp-0Ch] +
sub edx ecx +
imul edx [ebp-18h] +
xor eax edx +
mov ecx eax +
mov edx eax +
sub ecx [ebp-0Ch] +
ror ecx 6 +
imul ebx ecx +
mov ecx [ebp-20h] +
rol edx 0Ch +
xor edx ebx +
and dword ptr [ebp-20h] 0 +
xor edi edx +
mov ebx edi +
xor ecx edi +
rol ecx 7 +
mov edx ecx +
mov ecx [ebp-18h] +
imul ecx edx +
xor edi [ebp-1Ch] +
ror ebx 2 +
sub ecx ebx +
xor ecx [ebp-3Ch] +
xor eax ecx +
mov ebx [ebp-28h] +
mov ecx edi +
mov [ebp-18h] eax +
test ebx ebx +
jle loc_10401B5  +
cmp dword ptr [ebp-20h] 4 +
jge loc_104019C  +
rol dword ptr [ebp-18h] 8 +
mov dl [ebp-18h] +
mov ebx [ebp-40h] +
inc dword ptr [ebp-40h]  +
xor [ebp-11h] dl +
mov [ebx] dl +
jmp loc_10401AA  +
mov edx [ebp-40h] +
inc dword ptr [ebp-40h]  +
rol ecx 8 +
xor [ebp-11h] cl +
mov [edx] cl +
inc dword ptr [ebp-20h]  +
mov ebx [ebp-28h] +
cmp [ebp-20h] ebx +
jl loc_1040182  +
add ebx 0FFFFFFFCh +
test ebx ebx +
jle loc_1040429  +
push 4  +
pop ecx  +
sub ecx ebx +
shl ecx 3 +
shr edi cl +
shl edi cl +
mov edx edi +
mov edi offset __ImageBase +
mov ebx [ebp-50h] +
shr ebx 3 +
test ebx ebx +
jbe loc_10403AC  +
movzx ecx word ptr [ebp-0Ch] +
mov [ebp-28h] ecx +
movzx ecx word ptr [ebp-0Ah] +
neg dword ptr [ebp-28h]  +
mov [ebp-24h] ecx +
movzx ecx word ptr [ebp-0Eh] +
mov [ebp-20h] ecx +
mov [ebp-38h] ebx +
movzx edi byte ptr [esi+1] +
movzx ecx byte ptr [esi] +
shl ecx 8 +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+2] +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+3] +
or ecx edi +
movzx edi byte ptr [esi+5] +
mov [ebp-18h] ecx +
movzx ecx byte ptr [esi+4] +
shl ecx 8 +
or ecx edi +
shl ecx 8 +
movzx edi byte ptr [esi+6] +
or ecx edi +
movzx edi byte ptr [esi+7] +
shl ecx 8 +
or ecx edi +
xor edx ecx +
movzx edi word ptr [ebp-0Ch] +
mov [ebp-84h] ecx +
mov ebx edx +
mov ecx [ebp-20h] +
xor ecx edx +
add esi 8 +
rol ecx 6 +
imul edi ecx +
mov ecx [ebp-10h] +
rol ebx 0Dh +
xor ebx edi +
mov edi [ebp-0Ch] +
xor ebx [ebp-18h] +
xor eax ebx +
mov ebx ecx +
xor edi eax +
sub ebx edi +
xor edx ebx +
movzx edi cx +
mov ebx edx +
sub ebx [ebp-20h] +
imul ebx edi +
mov edi edx +
shr edi 0Eh +
sub ebx edi +
xor eax ebx +
add ecx eax +
mov ebx [ebp-24h] +
rol ecx 4 +
mov edi eax +
imul ebx ecx +
ror edi 2 +
movzx ecx word ptr [ebp-10h] +
add edi ebx +
xor edx edi +
xor ecx edx +
movzx edi word ptr [ebp-0Ch] +
rol ecx 3 +
mov ebx edx +
imul edi ecx +
rol ebx 7 +
mov ecx [ebp-28h] +
add ebx edi +
xor eax ebx +
add ecx eax +
mov edi [ebp-20h] +
rol ecx 5 +
imul edi ecx +
mov ecx eax +
shr ecx 1 +
xor edi ecx +
xor edx edi +
movzx edi word ptr [ebp-10h] +
mov ebx edx +
mov ecx [ebp-0Ch] +
xor ecx edx +
rol ecx 3 +
ror ebx 0Ch +
imul edi ecx +
add ebx edi +
xor eax ebx +
mov edi eax +
mov ebx [ebp-24h] +
mov ecx eax +
sub ecx [ebp-10h] +
rol ecx 7 +
imul ebx ecx +
movzx ecx word ptr [ebp-0Ch] +
ror edi 0Ch +
sub ebx edi +
xor edx ebx +
mov edi edx +
ror edi 3 +
sub edi ecx +
movzx ecx word ptr [ebp-10h] +
imul edi ecx +
mov ebx [ebp-20h] +
xor eax edi +
mov ecx eax +
mov edi eax +
sub ecx [ebp-0Ch] +
ror ecx 6 +
imul ebx ecx +
mov ecx [ebp-20h] +
rol edi 0Ch +
xor edi ebx +
xor edx edi +
movzx edi word ptr [ebp-10h] +
xor ecx edx +
rol ecx 7 +
imul edi ecx +
mov ebx edx +
xor edx [ebp-1Ch] +
ror ebx 2 +
mov cl [ebp-11h] +
sub edi ebx +
xor edi [ebp-3Ch] +
xor eax edi +
mov edi [ebp-40h] +
xor cl al +
mov [edi+3] al +
xor cl dl +
mov [edi+7] dl +
ror eax 8 +
mov [edi+2] al +
xor cl al +
ror edx 8 +
xor cl dl +
ror eax 8 +
xor cl al +
mov [edi+6] dl +
mov [edi+1] al +
ror edx 8 +
xor cl dl +
mov [edi+5] dl +
ror eax 8 +
ror edx 8 +
mov bl dl +
xor bl al +
xor cl bl +
mov [ebp-11h] cl +
mov ecx [ebp-18h] +
mov [edi] al +
mov [edi+4] dl +
add edi 8 +
mov [ebp-3Ch] ecx +
mov ecx [ebp-84h] +
dec dword ptr [ebp-38h]  +
ror eax 8 +
ror edx 8 +
mov [ebp-1Ch] ecx +
mov [ebp-40h] edi +
jnz loc_10401FC  +
mov edi offset __ImageBase +
mov cl [ebp-11h] +
mov eax [ebp-48h] +
cmp cl [eax+8] +
jz loc_104046D  +
call sub_100E99C  +
mov edi eax +
mov ecx [ebp-58h] +
mov eax 0FFFFF000h +
and ecx 0FFFFFFFCh +
lea esi [ecx+0FFFh] +
and edi eax +
and esi eax +
mov eax [ebp-5Ch] +
mov dword ptr [eax+8] offset sub_1025029 +
xor eax eax +
mov edx 0FFFFh +
mov ebx ds:dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov ds:dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_10403E8  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
mov eax [ebp-4Ch] +
mov [eax+14h] edi +
mov [eax+0Ch] edx +
mov dword ptr [ebp-4Ch] 0 +
jmp loc_104045F  +
xor edx edx +
test ebx ebx +
jge loc_10401CE  +
neg ebx  +
shl ebx 3 +
mov ecx ebx +
shr eax cl +
shl eax cl +
jmp loc_10401CE  +
***
mov eax [ebp-34h] +
xor edx edx +
mov [ebp-3Ch] eax +
not eax  +
mov [ebp-1Ch] eax +
xor eax eax +
jmp loc_10401D3  +
***
mov eax [ebp-4Ch] +
mov [ecx] eax +
add ecx 4 +
cmp ecx esi +
jb loc_1040457  +
mov eax offset sub_1025029 +
jmp loc_104054C  +
mov ebx [ebp-54h] +
mov eax ds:off_1005164 +
sub ebx [ebp-44h] +
mov [ebp-48h] ebx +
sub edi eax +
mov [ebp-38h] edi +
jnz loc_104048A  +
test ebx ebx +
jz loc_104053A  +
mov ecx [ebp-34h] +
mov esi [ebp-44h] +
mov eax [ebp-50h] +
sub esi [ebp-54h] +
add ecx eax +
mov [ebp-4Ch] ecx +
mov ecx ds:dword_100EB28 +
xor edi edi +
dec ecx  +
js loc_10404D1  +
lea eax [ecx+edi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100EB2C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-34h] edx +
jnb loc_10404C5  +
lea ecx [eax-1] +
jmp loc_10404CA  +
jbe loc_10404D6  +
lea edi [eax+1] +
cmp ecx edi +
jge loc_10404A6  +
mov ebx [ebp-48h] +
mov [ebp-1Ch] edi +
jmp loc_104052F  +
mov ebx [ebp-48h] +
mov [ebp-1Ch] eax +
jmp loc_104052F  +
mov eax [ebp-1Ch] +
mov eax ds:dword_100EB2C[eax*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-4Ch] +
jnb loc_104053A  +
lea edi __ImageBase[ecx+esi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_1040521  +
dec ecx  +
jz loc_104051D  +
dec ecx  +
jnz loc_1040526  +
mov edx [ebp-38h] +
jmp loc_1040526  +
mov edx ebx +
jmp loc_1040526  +
mov edx [ebp-38h] +
sub edx ebx +
dec eax  +
dec eax  +
jnz loc_104052C  +
add [edi] edx +
inc dword ptr [ebp-1Ch]  +
mov eax [ebp-1Ch] +
cmp eax ds:dword_100EB28 +
jb loc_10404DE  +
mov eax ds:dword_1004CB8 +
mov eax 0FC32789Ah +
mov ecx [ebp-44h] +
mov eax [ebp-80h] +
add eax ecx +
mov ecx [ebp-5Ch] +
mov [ecx+8] eax +
mov eax [ebp-58h] +
mov ecx [ebp-4] +
add dword ptr [eax] 0Ch +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1028111  +
leave   +
retn 8  +
***
mov edi ds:dword_1004CB8 +
imul edi edx +
lea edi Address[edi] +
jmp loc_1040662  +
***
mov edi eax +
jmp loc_1040699  +
***
xor ebx ebx +
jmp loc_10408AD  +
***
mov eax ebx +
inc ebx  +
mov [ebp-50h] ebx +
mov ebx 0F000h +
test [esi+eax*2+8] bx +
jz loc_1040896  +
movzx eax word ptr [esi+eax*2+8] +
and eax edx +
mov edx [esi] +
xor ebx ebx +
lea eax __ImageBase[eax+edx] +
mov [ebp-18h] eax +
sub [ebp-18h] ecx +
mov [ebp-28h] eax +
jz loc_1040941  +
mov edx edi +
movzx eax byte ptr [ebx+ecx] +
add eax edi +
add [ebp-20h] eax +
add eax [ebp-1Ch] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-20h] eax +
inc ebx  +
mov [ebp-1Ch] eax +
cmp ebx [ebp-18h] +
jb loc_104091A  +
mov ecx [ebp-28h] +
mov eax [ecx] +
sub eax [ebp-2Ch] +
xor ebx ebx +
mov [ebp-70h] eax +
mov edx edi +
movzx eax byte ptr [ebp+ebx-70h] +
add eax edi +
add [ebp-20h] eax +
add eax [ebp-1Ch] +
imul eax eax +
ror eax 13h +
mul  edx +
add eax edx +
add [ebp-20h] eax +
mov [ebp-1Ch] eax +
inc ebx  +
cmp ebx 4 +
jb loc_104094E  +
mov edx 0FFFh +
add ecx 4 +
jmp loc_1040896  +
***
push ebp  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp+var_4C] eax +
mov [ebp+var_44] ecx +
mov [ebp+var_3C] edx +
mov [ebp+var_40] ebx +
mov [ebp+var_50] esi +
mov [ebp+var_48] edi +
lea esi [ebp+arg_0] +
mov edi [esi+4] +
sub esi 4 +
mov eax edi +
push edi  +
mov [ebp+var_C] esi +
mov [ebp+var_14] edi +
mov eax 6AEE167Fh +
mov edx ds:off_1005164 +
mov ebx [edi+8] +
mov eax 0FFFFFFFh +
mov edi [edi] +
and [ebp+var_24] 0 +
and [ebp+var_20] 0 +
pop ecx  +
and edi eax +
and ebx eax +
mov eax offset __ImageBase +
add edi eax +
mov ecx eax +
sub ecx edx +
mov [ebp+var_18] ecx +
jnz loc_1041968  +
and [ebp+var_4] 0 +
test ebx ebx +
jbe loc_1041B40  +
mov esi 241A38A6h +
mov eax [ebp+var_4] +
movzx ecx byte ptr [eax+edi] +
add ecx esi +
add [ebp+var_24] ecx +
add ecx [ebp+var_20] +
mov eax ecx +
imul eax eax +
rol eax 6 +
ror ecx 6 +
xor eax ecx +
mov ecx esi +
mul  ecx +
add eax edx +
add [ebp+var_24] eax +
inc [ebp+var_4]  +
mov [ebp+var_20] eax +
cmp [ebp+var_4] ebx +
jb loc_1041930  +
jmp loc_1041B3D  +
mov edx ds:dword_100003C +
lea ecx [ebx+edi] +
mov [ebp+var_1C] ecx +
mov ecx edi +
sub ecx eax +
mov esi ecx +
and esi 0FFFFF000h +
mov [ebp+var_4] esi +
mov esi ecx +
sub esi [ebp+var_4] +
add ecx ebx +
mov ebx ecx +
and ebx 0FFFFF000h +
sub ecx ebx +
mov [ebp+var_34] ecx +
mov ecx ds:dword_10000A0[edx] +
mov [ebp+var_38] ebx +
mov ebx ds:dword_10000A4[edx] +
add ecx eax +
add ebx ecx +
jmp loc_10419B6  +
mov eax [ebp+var_4] +
cmp [ecx] eax +
jnb loc_10419BA  +
add ecx [ecx+4] +
cmp ecx ebx +
jnz loc_10419AC  +
and [ebp+var_28] 0 +
cmp ecx ebx +
jz loc_10419F5  +
mov eax [ebp+var_4] +
cmp [ecx] eax +
jnz loc_10419F5  +
mov eax [ecx+4] +
sub eax 8 +
shr eax 1 +
jz loc_10419F5  +
lea edx [ecx+8] +
mov [ebp+var_4] edx +
mov edx [ebp+var_4] +
movzx edx word ptr [edx] +
and edx 0FFFh +
cmp edx esi +
jnb loc_10419F5  +
inc [ebp+var_28]  +
add [ebp+var_4] 2 +
cmp [ebp+var_28] eax +
jnz loc_10419D9  +
mov esi 241A38A6h +
cmp ecx ebx +
jz loc_1041B03  +
mov eax [ebp+var_38] +
cmp [ecx] eax +
ja loc_1041B03  +
mov eax [ecx+4] +
lea edx [eax-8] +
shr edx 1 +
mov eax [ebp+var_28] +
cmp eax edx +
jnz loc_1041A38  +
add ecx [ecx+4] +
cmp ecx ebx +
jz loc_1041B03  +
mov eax [ebp+var_38] +
cmp [ecx] eax +
ja loc_1041B03  +
and [ebp+var_28] 0 +
jmp loc_1041A0D  +
mov edx [ebp+var_38] +
cmp [ecx] edx +
jnz loc_1041A52  +
movzx eax word ptr [ecx+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp+var_34] +
jnb loc_1041B03  +
mov edx 0F000h +
mov eax [ebp+var_28] +
inc [ebp+var_28]  +
test [ecx+eax*2+8] dx +
jz loc_10419FA  +
mov edx [ecx] +
movzx eax word ptr [ecx+eax*2+8] +
and [ebp+var_4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp+var_8] eax +
sub [ebp+var_8] edi +
mov [ebp+var_10] eax +
jz loc_1041ABF  +
mov eax [ebp+var_4] +
movzx edx byte ptr [eax+edi] +
add edx esi +
add [ebp+var_24] edx +
add edx [ebp+var_20] +
mov eax edx +
imul eax eax +
rol eax 6 +
ror edx 6 +
xor eax edx +
mov edx esi +
mul  edx +
add eax edx +
add [ebp+var_24] eax +
inc [ebp+var_4]  +
mov [ebp+var_20] eax +
mov eax [ebp+var_4] +
cmp eax [ebp+var_8] +
jb loc_1041A86  +
mov eax [ebp+var_10] +
mov eax [eax] +
sub eax [ebp+var_18] +
xor edi edi +
mov [ebp+var_8] eax +
movzx edx byte ptr [ebp+edi+var_8] +
add edx esi +
add [ebp+var_24] edx +
add edx [ebp+var_20] +
mov eax edx +
imul eax eax +
rol eax 6 +
ror edx 6 +
xor eax edx +
mov edx esi +
mul  edx +
add eax edx +
add [ebp+var_24] eax +
inc edi  +
cmp edi 4 +
mov [ebp+var_20] eax +
jb loc_1041AC9  +
mov edi [ebp+var_10] +
add edi 4 +
jmp loc_10419FA  +
mov eax [ebp+var_1C] +
xor ebx ebx +
sub eax edi +
mov [ebp+var_1C] eax +
jz loc_1041B3D  +
movzx ecx byte ptr [ebx+edi] +
add ecx esi +
add [ebp+var_24] ecx +
add ecx [ebp+var_20] +
mov eax ecx +
imul eax eax +
rol eax 6 +
ror ecx 6 +
xor eax ecx +
mov ecx esi +
mul  ecx +
add eax edx +
add [ebp+var_24] eax +
inc ebx  +
mov [ebp+var_20] eax +
cmp ebx [ebp+var_1C] +
jb loc_1041B0F  +
mov esi [ebp+var_C] +
add dword ptr [esi+8] 10h +
mov eax [ebp+var_14] +
mov eax [eax+4] +
and eax 0FFFFFFFh +
mov ecx [ebp+var_24] +
cmp ecx ds:__ImageBase[eax] +
jnz loc_1041B69  +
mov ecx [ebp+var_20] +
cmp ecx ds:dword_1000004[eax] +
jz loc_1041C18  +
call sub_100E99C  +
lea ecx [esi+0Ch] +
and ecx 0FFFFFFFCh +
lea edi [ecx+0FFFh] +
mov edx 0FFFFF000h +
and eax edx +
mov [ebp+var_1C] eax +
mov dword ptr [esi+8] offset sub_1025029 +
and edi edx +
xor eax eax +
mov edx 0FFFFh +
mov ebx ds:dword_104D00C +
imul ebx ebx +
add ebx 269EC3h +
mov ds:dword_104D00C ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_1041B94  +
mov ebx 0FFFFh +
div  ebx +
mov eax [ebp+var_1C] +
inc edx  +
mov [ebp+var_3C] eax +
mov eax ecx +
cmp ecx edi +
mov [ebp+var_44] edx +
mov [ebp+var_1C] 0 +
jnb loc_1041BE5  +
mov ecx [ebp+var_1C] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_1041BD9  +
mov eax [ebp+var_14] +
mov dword ptr [esi+8] offset sub_1025029 +
mov ecx [ebp+var_44] +
mov eax [eax+0Ch] +
mov [ebp+var_48] ecx +
mov edx ecx +
and eax 0FFFFFFFh +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx ds:dword_104D0A0 +
xor edx ecx +
and [ebp+var_44] 0 +
mov [ebp+var_50] edx +
mov eax 0CCFBE980h +
mov ecx [ebp+var_44] +
mov ebx [ebp+var_40] +
mov edi [ebp+var_48] +
mov eax [ebp+var_4C] +
mov edx [ebp+var_3C] +
mov esi [ebp+var_50] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
